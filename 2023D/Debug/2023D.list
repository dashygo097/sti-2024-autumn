
2023D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013bf4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002808  08013e98  08013e98  00014e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080166a0  080166a0  000176a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080166a8  080166a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080166b0  080166b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000006c0  24000000  080166b4  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ARM.__at_0x30000000 00004000  240006c0  08016d74  000186c0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00010620  240046c0  0801ad74  0001c6c0  2**3
                  ALLOC
  9 ._user_heap_stack 00004000  24014ce0  0801ad74  0001cce0  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001c6c0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00023b28  00000000  00000000  0001c6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004461  00000000  00000000  00040216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001a58  00000000  00000000  00044678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000147e  00000000  00000000  000460d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d34f  00000000  00000000  0004754e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025b2c  00000000  00000000  0008489d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017b979  00000000  00000000  000aa3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00225d42  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000087b8  00000000  00000000  00225d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000058  00000000  00000000  0022e540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240046c0 	.word	0x240046c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013e7c 	.word	0x08013e7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240046c4 	.word	0x240046c4
 80002dc:	08013e7c 	.word	0x08013e7c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 bac6 	b.w	8000934 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f962 	bl	8000678 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__muldc3>:
 80003c0:	ee20 5b02 	vmul.f64	d5, d0, d2
 80003c4:	ee21 4b03 	vmul.f64	d4, d1, d3
 80003c8:	ee35 7b44 	vsub.f64	d7, d5, d4
 80003cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80003d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d4:	ed2d 8b0a 	vpush	{d8-d12}
 80003d8:	ee20 9b03 	vmul.f64	d9, d0, d3
 80003dc:	ee22 8b01 	vmul.f64	d8, d2, d1
 80003e0:	ee39 6b08 	vadd.f64	d6, d9, d8
 80003e4:	d606      	bvs.n	80003f4 <__muldc3+0x34>
 80003e6:	eeb0 0b47 	vmov.f64	d0, d7
 80003ea:	eeb0 1b46 	vmov.f64	d1, d6
 80003ee:	ecbd 8b0a 	vpop	{d8-d12}
 80003f2:	4770      	bx	lr
 80003f4:	eeb4 6b46 	vcmp.f64	d6, d6
 80003f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003fc:	d7f3      	bvc.n	80003e6 <__muldc3+0x26>
 80003fe:	eeb0 bbc0 	vabs.f64	d11, d0
 8000402:	eeb0 cbc1 	vabs.f64	d12, d1
 8000406:	ed9f ab94 	vldr	d10, [pc, #592]	@ 8000658 <__muldc3+0x298>
 800040a:	eeb4 bb4a 	vcmp.f64	d11, d10
 800040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000412:	f300 809d 	bgt.w	8000550 <__muldc3+0x190>
 8000416:	eeb4 cb4a 	vcmp.f64	d12, d10
 800041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041e:	f300 8097 	bgt.w	8000550 <__muldc3+0x190>
 8000422:	2300      	movs	r3, #0
 8000424:	ed9f ab8c 	vldr	d10, [pc, #560]	@ 8000658 <__muldc3+0x298>
 8000428:	eeb0 bbc2 	vabs.f64	d11, d2
 800042c:	eeb0 cbc3 	vabs.f64	d12, d3
 8000430:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000438:	dc48      	bgt.n	80004cc <__muldc3+0x10c>
 800043a:	eeb4 cb4a 	vcmp.f64	d12, d10
 800043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000442:	dc43      	bgt.n	80004cc <__muldc3+0x10c>
 8000444:	bb9b      	cbnz	r3, 80004ae <__muldc3+0xee>
 8000446:	eeb0 5bc5 	vabs.f64	d5, d5
 800044a:	eeb4 5b4a 	vcmp.f64	d5, d10
 800044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000452:	dc14      	bgt.n	800047e <__muldc3+0xbe>
 8000454:	eeb0 4bc4 	vabs.f64	d4, d4
 8000458:	eeb4 4b4a 	vcmp.f64	d4, d10
 800045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000460:	dc0d      	bgt.n	800047e <__muldc3+0xbe>
 8000462:	eeb0 9bc9 	vabs.f64	d9, d9
 8000466:	eeb4 9b4a 	vcmp.f64	d9, d10
 800046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046e:	dc06      	bgt.n	800047e <__muldc3+0xbe>
 8000470:	eeb0 8bc8 	vabs.f64	d8, d8
 8000474:	eeb4 8b4a 	vcmp.f64	d8, d10
 8000478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047c:	ddb3      	ble.n	80003e6 <__muldc3+0x26>
 800047e:	eeb4 0b40 	vcmp.f64	d0, d0
 8000482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000486:	f180 80dc 	bvs.w	8000642 <__muldc3+0x282>
 800048a:	eeb4 1b41 	vcmp.f64	d1, d1
 800048e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000492:	f180 80cc 	bvs.w	800062e <__muldc3+0x26e>
 8000496:	eeb4 2b42 	vcmp.f64	d2, d2
 800049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049e:	f180 80bc 	bvs.w	800061a <__muldc3+0x25a>
 80004a2:	eeb4 3b43 	vcmp.f64	d3, d3
 80004a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004aa:	f180 80ac 	bvs.w	8000606 <__muldc3+0x246>
 80004ae:	ee23 7b41 	vnmul.f64	d7, d3, d1
 80004b2:	ee21 1b02 	vmul.f64	d1, d1, d2
 80004b6:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000660 <__muldc3+0x2a0>
 80004ba:	eea0 7b02 	vfma.f64	d7, d0, d2
 80004be:	eea0 1b03 	vfma.f64	d1, d0, d3
 80004c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80004c6:	ee21 6b06 	vmul.f64	d6, d1, d6
 80004ca:	e78c      	b.n	80003e6 <__muldc3+0x26>
 80004cc:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8000658 <__muldc3+0x298>
 80004d0:	eeb4 bb47 	vcmp.f64	d11, d7
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	bfcc      	ite	gt
 80004da:	2301      	movgt	r3, #1
 80004dc:	2300      	movle	r3, #0
 80004de:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000658 <__muldc3+0x298>
 80004e2:	ee07 3a10 	vmov	s14, r3
 80004e6:	eeb4 cb46 	vcmp.f64	d12, d6
 80004ea:	ee12 3a90 	vmov	r3, s5
 80004ee:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80004f8:	bfb8      	it	lt
 80004fa:	eeb1 7b47 	vneglt.f64	d7, d7
 80004fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000502:	bfcc      	ite	gt
 8000504:	2301      	movgt	r3, #1
 8000506:	2300      	movle	r3, #0
 8000508:	eeb0 2b47 	vmov.f64	d2, d7
 800050c:	ee07 3a10 	vmov	s14, r3
 8000510:	eeb4 0b40 	vcmp.f64	d0, d0
 8000514:	ee13 3a90 	vmov	r3, s7
 8000518:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800051c:	2b00      	cmp	r3, #0
 800051e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000522:	bfb8      	it	lt
 8000524:	eeb1 7b47 	vneglt.f64	d7, d7
 8000528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052c:	eeb0 3b47 	vmov.f64	d3, d7
 8000530:	d655      	bvs.n	80005de <__muldc3+0x21e>
 8000532:	eeb4 1b41 	vcmp.f64	d1, d1
 8000536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053a:	d7b8      	bvc.n	80004ae <__muldc3+0xee>
 800053c:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000668 <__muldc3+0x2a8>
 8000540:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 8000670 <__muldc3+0x2b0>
 8000544:	ee11 3a90 	vmov	r3, s3
 8000548:	2b00      	cmp	r3, #0
 800054a:	fe26 1b07 	vselge.f64	d1, d6, d7
 800054e:	e7ae      	b.n	80004ae <__muldc3+0xee>
 8000550:	ed9f ab41 	vldr	d10, [pc, #260]	@ 8000658 <__muldc3+0x298>
 8000554:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055c:	bfcc      	ite	gt
 800055e:	2301      	movgt	r3, #1
 8000560:	2300      	movle	r3, #0
 8000562:	ee0a 3a10 	vmov	s20, r3
 8000566:	ee10 3a90 	vmov	r3, s1
 800056a:	eeb8 abca 	vcvt.f64.s32	d10, s20
 800056e:	2b00      	cmp	r3, #0
 8000570:	eeb0 abca 	vabs.f64	d10, d10
 8000574:	bfb8      	it	lt
 8000576:	eeb1 ab4a 	vneglt.f64	d10, d10
 800057a:	eeb0 0b4a 	vmov.f64	d0, d10
 800057e:	ed9f ab36 	vldr	d10, [pc, #216]	@ 8000658 <__muldc3+0x298>
 8000582:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	bfcc      	ite	gt
 800058c:	2301      	movgt	r3, #1
 800058e:	2300      	movle	r3, #0
 8000590:	ee0a 3a10 	vmov	s20, r3
 8000594:	eeb4 2b42 	vcmp.f64	d2, d2
 8000598:	ee11 3a90 	vmov	r3, s3
 800059c:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	eeb0 abca 	vabs.f64	d10, d10
 80005a6:	bfb8      	it	lt
 80005a8:	eeb1 ab4a 	vneglt.f64	d10, d10
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	eeb0 1b4a 	vmov.f64	d1, d10
 80005b4:	d61d      	bvs.n	80005f2 <__muldc3+0x232>
 80005b6:	eeb4 3b43 	vcmp.f64	d3, d3
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	bf78      	it	vc
 80005c0:	2301      	movvc	r3, #1
 80005c2:	f5ff af2f 	bvc.w	8000424 <__muldc3+0x64>
 80005c6:	ee13 3a90 	vmov	r3, s7
 80005ca:	ed9f ab29 	vldr	d10, [pc, #164]	@ 8000670 <__muldc3+0x2b0>
 80005ce:	ed9f 3b26 	vldr	d3, [pc, #152]	@ 8000668 <__muldc3+0x2a8>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f04f 0301 	mov.w	r3, #1
 80005d8:	fe23 3b0a 	vselge.f64	d3, d3, d10
 80005dc:	e722      	b.n	8000424 <__muldc3+0x64>
 80005de:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8000668 <__muldc3+0x2a8>
 80005e2:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8000670 <__muldc3+0x2b0>
 80005e6:	ee10 3a90 	vmov	r3, s1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	fe26 0b07 	vselge.f64	d0, d6, d7
 80005f0:	e79f      	b.n	8000532 <__muldc3+0x172>
 80005f2:	ee12 3a90 	vmov	r3, s5
 80005f6:	ed9f ab1e 	vldr	d10, [pc, #120]	@ 8000670 <__muldc3+0x2b0>
 80005fa:	ed9f 2b1b 	vldr	d2, [pc, #108]	@ 8000668 <__muldc3+0x2a8>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	fe22 2b0a 	vselge.f64	d2, d2, d10
 8000604:	e7d7      	b.n	80005b6 <__muldc3+0x1f6>
 8000606:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000668 <__muldc3+0x2a8>
 800060a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8000670 <__muldc3+0x2b0>
 800060e:	ee13 3a90 	vmov	r3, s7
 8000612:	2b00      	cmp	r3, #0
 8000614:	fe26 3b07 	vselge.f64	d3, d6, d7
 8000618:	e749      	b.n	80004ae <__muldc3+0xee>
 800061a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000668 <__muldc3+0x2a8>
 800061e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000670 <__muldc3+0x2b0>
 8000622:	ee12 3a90 	vmov	r3, s5
 8000626:	2b00      	cmp	r3, #0
 8000628:	fe26 2b07 	vselge.f64	d2, d6, d7
 800062c:	e739      	b.n	80004a2 <__muldc3+0xe2>
 800062e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000668 <__muldc3+0x2a8>
 8000632:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8000670 <__muldc3+0x2b0>
 8000636:	ee11 3a90 	vmov	r3, s3
 800063a:	2b00      	cmp	r3, #0
 800063c:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000640:	e729      	b.n	8000496 <__muldc3+0xd6>
 8000642:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000668 <__muldc3+0x2a8>
 8000646:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8000670 <__muldc3+0x2b0>
 800064a:	ee10 3a90 	vmov	r3, s1
 800064e:	2b00      	cmp	r3, #0
 8000650:	fe26 0b07 	vselge.f64	d0, d6, d7
 8000654:	e719      	b.n	800048a <__muldc3+0xca>
 8000656:	bf00      	nop
 8000658:	ffffffff 	.word	0xffffffff
 800065c:	7fefffff 	.word	0x7fefffff
 8000660:	00000000 	.word	0x00000000
 8000664:	7ff00000 	.word	0x7ff00000
	...
 8000674:	80000000 	.word	0x80000000

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	460c      	mov	r4, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d14e      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000684:	4694      	mov	ip, r2
 8000686:	458c      	cmp	ip, r1
 8000688:	4686      	mov	lr, r0
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	d962      	bls.n	8000756 <__udivmoddi4+0xde>
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	4091      	lsls	r1, r2
 8000698:	fa20 f303 	lsr.w	r3, r0, r3
 800069c:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a0:	4319      	orrs	r1, r3
 80006a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006aa:	fa1f f68c 	uxth.w	r6, ip
 80006ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80006b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006b6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006be:	fb04 f106 	mul.w	r1, r4, r6
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80006ce:	f080 8112 	bcs.w	80008f6 <__udivmoddi4+0x27e>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 810f 	bls.w	80008f6 <__udivmoddi4+0x27e>
 80006d8:	3c02      	subs	r4, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a59      	subs	r1, r3, r1
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006e6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ee:	fb00 f606 	mul.w	r6, r0, r6
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x94>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80006fe:	f080 80fc 	bcs.w	80008fa <__udivmoddi4+0x282>
 8000702:	429e      	cmp	r6, r3
 8000704:	f240 80f9 	bls.w	80008fa <__udivmoddi4+0x282>
 8000708:	4463      	add	r3, ip
 800070a:	3802      	subs	r0, #2
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000712:	2100      	movs	r1, #0
 8000714:	b11d      	cbz	r5, 800071e <__udivmoddi4+0xa6>
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	e9c5 3200 	strd	r3, r2, [r5]
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d905      	bls.n	8000732 <__udivmoddi4+0xba>
 8000726:	b10d      	cbz	r5, 800072c <__udivmoddi4+0xb4>
 8000728:	e9c5 0100 	strd	r0, r1, [r5]
 800072c:	2100      	movs	r1, #0
 800072e:	4608      	mov	r0, r1
 8000730:	e7f5      	b.n	800071e <__udivmoddi4+0xa6>
 8000732:	fab3 f183 	clz	r1, r3
 8000736:	2900      	cmp	r1, #0
 8000738:	d146      	bne.n	80007c8 <__udivmoddi4+0x150>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xcc>
 800073e:	4290      	cmp	r0, r2
 8000740:	f0c0 80f0 	bcc.w	8000924 <__udivmoddi4+0x2ac>
 8000744:	1a86      	subs	r6, r0, r2
 8000746:	eb64 0303 	sbc.w	r3, r4, r3
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0e6      	beq.n	800071e <__udivmoddi4+0xa6>
 8000750:	e9c5 6300 	strd	r6, r3, [r5]
 8000754:	e7e3      	b.n	800071e <__udivmoddi4+0xa6>
 8000756:	2a00      	cmp	r2, #0
 8000758:	f040 8090 	bne.w	800087c <__udivmoddi4+0x204>
 800075c:	eba1 040c 	sub.w	r4, r1, ip
 8000760:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000764:	fa1f f78c 	uxth.w	r7, ip
 8000768:	2101      	movs	r1, #1
 800076a:	fbb4 f6f8 	udiv	r6, r4, r8
 800076e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000772:	fb08 4416 	mls	r4, r8, r6, r4
 8000776:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077a:	fb07 f006 	mul.w	r0, r7, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x11c>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x11a>
 800078c:	4298      	cmp	r0, r3
 800078e:	f200 80cd 	bhi.w	800092c <__udivmoddi4+0x2b4>
 8000792:	4626      	mov	r6, r4
 8000794:	1a1c      	subs	r4, r3, r0
 8000796:	fa1f f38e 	uxth.w	r3, lr
 800079a:	fbb4 f0f8 	udiv	r0, r4, r8
 800079e:	fb08 4410 	mls	r4, r8, r0, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb00 f707 	mul.w	r7, r0, r7
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x148>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x146>
 80007b8:	429f      	cmp	r7, r3
 80007ba:	f200 80b0 	bhi.w	800091e <__udivmoddi4+0x2a6>
 80007be:	4620      	mov	r0, r4
 80007c0:	1bdb      	subs	r3, r3, r7
 80007c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c6:	e7a5      	b.n	8000714 <__udivmoddi4+0x9c>
 80007c8:	f1c1 0620 	rsb	r6, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 f706 	lsr.w	r7, r2, r6
 80007d2:	431f      	orrs	r7, r3
 80007d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007d8:	fa04 f301 	lsl.w	r3, r4, r1
 80007dc:	ea43 030c 	orr.w	r3, r3, ip
 80007e0:	40f4      	lsrs	r4, r6
 80007e2:	fa00 f801 	lsl.w	r8, r0, r1
 80007e6:	0c38      	lsrs	r0, r7, #16
 80007e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ec:	fbb4 fef0 	udiv	lr, r4, r0
 80007f0:	fa1f fc87 	uxth.w	ip, r7
 80007f4:	fb00 441e 	mls	r4, r0, lr, r4
 80007f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000800:	45a1      	cmp	r9, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90a      	bls.n	800081e <__udivmoddi4+0x1a6>
 8000808:	193c      	adds	r4, r7, r4
 800080a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800080e:	f080 8084 	bcs.w	800091a <__udivmoddi4+0x2a2>
 8000812:	45a1      	cmp	r9, r4
 8000814:	f240 8081 	bls.w	800091a <__udivmoddi4+0x2a2>
 8000818:	f1ae 0e02 	sub.w	lr, lr, #2
 800081c:	443c      	add	r4, r7
 800081e:	eba4 0409 	sub.w	r4, r4, r9
 8000822:	fa1f f983 	uxth.w	r9, r3
 8000826:	fbb4 f3f0 	udiv	r3, r4, r0
 800082a:	fb00 4413 	mls	r4, r0, r3, r4
 800082e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000832:	fb03 fc0c 	mul.w	ip, r3, ip
 8000836:	45a4      	cmp	ip, r4
 8000838:	d907      	bls.n	800084a <__udivmoddi4+0x1d2>
 800083a:	193c      	adds	r4, r7, r4
 800083c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000840:	d267      	bcs.n	8000912 <__udivmoddi4+0x29a>
 8000842:	45a4      	cmp	ip, r4
 8000844:	d965      	bls.n	8000912 <__udivmoddi4+0x29a>
 8000846:	3b02      	subs	r3, #2
 8000848:	443c      	add	r4, r7
 800084a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800084e:	fba0 9302 	umull	r9, r3, r0, r2
 8000852:	eba4 040c 	sub.w	r4, r4, ip
 8000856:	429c      	cmp	r4, r3
 8000858:	46ce      	mov	lr, r9
 800085a:	469c      	mov	ip, r3
 800085c:	d351      	bcc.n	8000902 <__udivmoddi4+0x28a>
 800085e:	d04e      	beq.n	80008fe <__udivmoddi4+0x286>
 8000860:	b155      	cbz	r5, 8000878 <__udivmoddi4+0x200>
 8000862:	ebb8 030e 	subs.w	r3, r8, lr
 8000866:	eb64 040c 	sbc.w	r4, r4, ip
 800086a:	fa04 f606 	lsl.w	r6, r4, r6
 800086e:	40cb      	lsrs	r3, r1
 8000870:	431e      	orrs	r6, r3
 8000872:	40cc      	lsrs	r4, r1
 8000874:	e9c5 6400 	strd	r6, r4, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	e750      	b.n	800071e <__udivmoddi4+0xa6>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f103 	lsr.w	r1, r0, r3
 8000884:	fa0c fc02 	lsl.w	ip, ip, r2
 8000888:	fa24 f303 	lsr.w	r3, r4, r3
 800088c:	4094      	lsls	r4, r2
 800088e:	430c      	orrs	r4, r1
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa00 fe02 	lsl.w	lr, r0, r2
 8000898:	fa1f f78c 	uxth.w	r7, ip
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3110 	mls	r1, r8, r0, r3
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb00 f107 	mul.w	r1, r0, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x24c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80008ba:	d22c      	bcs.n	8000916 <__udivmoddi4+0x29e>
 80008bc:	4299      	cmp	r1, r3
 80008be:	d92a      	bls.n	8000916 <__udivmoddi4+0x29e>
 80008c0:	3802      	subs	r0, #2
 80008c2:	4463      	add	r3, ip
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008cc:	fb08 3311 	mls	r3, r8, r1, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb01 f307 	mul.w	r3, r1, r7
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x276>
 80008dc:	eb1c 0404 	adds.w	r4, ip, r4
 80008e0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80008e4:	d213      	bcs.n	800090e <__udivmoddi4+0x296>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d911      	bls.n	800090e <__udivmoddi4+0x296>
 80008ea:	3902      	subs	r1, #2
 80008ec:	4464      	add	r4, ip
 80008ee:	1ae4      	subs	r4, r4, r3
 80008f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008f4:	e739      	b.n	800076a <__udivmoddi4+0xf2>
 80008f6:	4604      	mov	r4, r0
 80008f8:	e6f0      	b.n	80006dc <__udivmoddi4+0x64>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e706      	b.n	800070c <__udivmoddi4+0x94>
 80008fe:	45c8      	cmp	r8, r9
 8000900:	d2ae      	bcs.n	8000860 <__udivmoddi4+0x1e8>
 8000902:	ebb9 0e02 	subs.w	lr, r9, r2
 8000906:	eb63 0c07 	sbc.w	ip, r3, r7
 800090a:	3801      	subs	r0, #1
 800090c:	e7a8      	b.n	8000860 <__udivmoddi4+0x1e8>
 800090e:	4631      	mov	r1, r6
 8000910:	e7ed      	b.n	80008ee <__udivmoddi4+0x276>
 8000912:	4603      	mov	r3, r0
 8000914:	e799      	b.n	800084a <__udivmoddi4+0x1d2>
 8000916:	4630      	mov	r0, r6
 8000918:	e7d4      	b.n	80008c4 <__udivmoddi4+0x24c>
 800091a:	46d6      	mov	lr, sl
 800091c:	e77f      	b.n	800081e <__udivmoddi4+0x1a6>
 800091e:	4463      	add	r3, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e74d      	b.n	80007c0 <__udivmoddi4+0x148>
 8000924:	4606      	mov	r6, r0
 8000926:	4623      	mov	r3, r4
 8000928:	4608      	mov	r0, r1
 800092a:	e70f      	b.n	800074c <__udivmoddi4+0xd4>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	e730      	b.n	8000794 <__udivmoddi4+0x11c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <rev>:
    }
    return A;
}

int rev(int size , int index)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	ed2d 8b02 	vpush	{d8}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
    int k = floor(log2(size)) , reg = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000950:	eeb0 0b47 	vmov.f64	d0, d7
 8000954:	f012 f81c 	bl	8012990 <log>
 8000958:	eeb0 6b40 	vmov.f64	d6, d0
 800095c:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000a18 <rev+0xe0>
 8000960:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000964:	eeb0 0b47 	vmov.f64	d0, d7
 8000968:	f012 fbaa 	bl	80130c0 <floor>
 800096c:	eeb0 7b40 	vmov.f64	d7, d0
 8000970:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000974:	ee17 3a90 	vmov	r3, s15
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
    int ans = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
    for (int i =size/2 ; i>0 ; i/=2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da00      	bge.n	800098a <rev+0x52>
 8000988:	3301      	adds	r3, #1
 800098a:	105b      	asrs	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e036      	b.n	80009fe <rev+0xc6>
    {
        reg = index%2;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	60bb      	str	r3, [r7, #8]
        ans += reg * pow(2 , k - 1) ;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009b4:	eeb0 1b47 	vmov.f64	d1, d7
 80009b8:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 80009bc:	f012 f910 	bl	8012be0 <pow>
 80009c0:	eeb0 7b40 	vmov.f64	d7, d0
 80009c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	ee07 3a90 	vmov	s15, r3
 80009ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009da:	ee17 3a90 	vmov	r3, s15
 80009de:	613b      	str	r3, [r7, #16]
        k--;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
        index/= 2;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	da00      	bge.n	80009ee <rev+0xb6>
 80009ec:	3301      	adds	r3, #1
 80009ee:	105b      	asrs	r3, r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
    for (int i =size/2 ; i>0 ; i/=2)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	da00      	bge.n	80009fa <rev+0xc2>
 80009f8:	3301      	adds	r3, #1
 80009fa:	105b      	asrs	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dcc5      	bgt.n	8000990 <rev+0x58>
    }
    return ans;
 8000a04:	693b      	ldr	r3, [r7, #16]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	ecbd 8b02 	vpop	{d8}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	f3af 8000 	nop.w
 8000a18:	fefa39ef 	.word	0xfefa39ef
 8000a1c:	3fe62e42 	.word	0x3fe62e42

08000a20 <FFT>:
    }
    return X;
}

double complex* FFT(int size , double x[])
{
 8000a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	ed2d 8b02 	vpush	{d8}
 8000a28:	b0a9      	sub	sp, #164	@ 0xa4
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	466b      	mov	r3, sp
 8000a32:	461e      	mov	r6, r3
    double complex W[size/2];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <FFT+0x1c>
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	105b      	asrs	r3, r3, #1
 8000a3e:	4619      	mov	r1, r3
 8000a40:	1e4b      	subs	r3, r1, #1
 8000a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a46:	460a      	mov	r2, r1
 8000a48:	2300      	movs	r3, #0
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	01c3      	lsls	r3, r0, #7
 8000a5a:	6838      	ldr	r0, [r7, #0]
 8000a5c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	01c2      	lsls	r2, r0, #7
 8000a64:	460a      	mov	r2, r1
 8000a66:	2300      	movs	r3, #0
 8000a68:	4692      	mov	sl, r2
 8000a6a:	469b      	mov	fp, r3
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8000a78:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8000a7c:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8000a80:	460b      	mov	r3, r1
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	3307      	adds	r3, #7
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8e:	466b      	mov	r3, sp
 8000a90:	3307      	adds	r3, #7
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    for (int i = 0 ; i < size/2 ; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000aa0:	e049      	b.n	8000b36 <FFT+0x116>
    {
        W[i] = cos(2*M_PI*i/size) + I*sin(2*M_PI*i/size);
 8000aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aae:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8000c50 <FFT+0x230>
 8000ab2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ac0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ac4:	eeb0 0b45 	vmov.f64	d0, d5
 8000ac8:	f011 ff16 	bl	80128f8 <sin>
 8000acc:	eeb0 8b40 	vmov.f64	d8, d0
 8000ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000adc:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 8000c50 <FFT+0x230>
 8000ae0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000af2:	eeb0 0b45 	vmov.f64	d0, d5
 8000af6:	f011 feb3 	bl	8012860 <cos>
 8000afa:	eeb0 6b40 	vmov.f64	d6, d0
 8000afe:	ed9f 7b56 	vldr	d7, [pc, #344]	@ 8000c58 <FFT+0x238>
 8000b02:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	4413      	add	r3, r2
 8000b16:	ed83 7b00 	vstr	d7, [r3]
 8000b1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	4413      	add	r3, r2
 8000b26:	3308      	adds	r3, #8
 8000b28:	ed83 8b00 	vstr	d8, [r3]
    for (int i = 0 ; i < size/2 ; i++)
 8000b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da00      	bge.n	8000b3e <FFT+0x11e>
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	105b      	asrs	r3, r3, #1
 8000b40:	461a      	mov	r2, r3
 8000b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b46:	4293      	cmp	r3, r2
 8000b48:	dbab      	blt.n	8000aa2 <FFT+0x82>
    }

    double complex A[size];
 8000b4a:	68f9      	ldr	r1, [r7, #12]
 8000b4c:	1e4b      	subs	r3, r1, #1
 8000b4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b52:	460a      	mov	r2, r1
 8000b54:	2300      	movs	r3, #0
 8000b56:	4690      	mov	r8, r2
 8000b58:	4699      	mov	r9, r3
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000b66:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000b6a:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000b6e:	460a      	mov	r2, r1
 8000b70:	2300      	movs	r3, #0
 8000b72:	4614      	mov	r4, r2
 8000b74:	461d      	mov	r5, r3
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	01eb      	lsls	r3, r5, #7
 8000b80:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000b84:	01e2      	lsls	r2, r4, #7
 8000b86:	460b      	mov	r3, r1
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	3307      	adds	r3, #7
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	ebad 0d03 	sub.w	sp, sp, r3
 8000b94:	466b      	mov	r3, sp
 8000b96:	3307      	adds	r3, #7
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    double complex *X = A;
 8000b9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0;i < size ; i ++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ba8:	e027      	b.n	8000bfa <FFT+0x1da>
    {
    	A[i] = x[rev(size,i)] + 0*I;
 8000baa:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff fec2 	bl	8000938 <rev>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	4413      	add	r3, r2
 8000bbc:	ed93 7b00 	vldr	d7, [r3]
 8000bc0:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8000c58 <FFT+0x238>
 8000bc4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bc8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	ed83 7b00 	vstr	d7, [r3]
 8000bd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	4413      	add	r3, r2
 8000be0:	f103 0108 	add.w	r1, r3, #8
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0;i < size ; i ++)
 8000bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbd2      	blt.n	8000baa <FFT+0x18a>
    }
    
    int s ,m ,k ,j;
    double complex omega , t, u;

    for(s = 1 ; s <size ; s*=2)
 8000c04:	2301      	movs	r3, #1
 8000c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000c0a:	e0f6      	b.n	8000dfa <FFT+0x3da>
    {
        m = s * 2;
 8000c0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	677b      	str	r3, [r7, #116]	@ 0x74
        for ( k = 0 ; k< size ; k += m)
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000c1a:	e0e3      	b.n	8000de4 <FFT+0x3c4>
        {
            omega = 1;
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <FFT+0x240>)
 8000c22:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
            for (j = 0; j < m/2; j++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <FFT+0x240>)
 8000c4a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000c4e:	e0b8      	b.n	8000dc2 <FFT+0x3a2>
 8000c50:	54442d18 	.word	0x54442d18
 8000c54:	401921fb 	.word	0x401921fb
	...
 8000c60:	3ff00000 	.word	0x3ff00000
            {
                t = omega * A[k+j+m/2];
 8000c64:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c6c:	441a      	add	r2, r3
 8000c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	da00      	bge.n	8000c76 <FFT+0x256>
 8000c74:	3301      	adds	r3, #1
 8000c76:	105b      	asrs	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000c7c:	011a      	lsls	r2, r3, #4
 8000c7e:	440a      	add	r2, r1
 8000c80:	ed92 7b00 	vldr	d7, [r2]
 8000c84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	4413      	add	r3, r2
 8000c8a:	ed93 6b02 	vldr	d6, [r3, #8]
 8000c8e:	eeb0 3b46 	vmov.f64	d3, d6
 8000c92:	eeb0 2b47 	vmov.f64	d2, d7
 8000c96:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000c9a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000c9e:	f7ff fb8f 	bl	80003c0 <__muldc3>
 8000ca2:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
 8000ca6:	ed87 1b16 	vstr	d1, [r7, #88]	@ 0x58
 8000caa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000cae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000cb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
                u = A[k+j];
 8000cba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cc2:	18d1      	adds	r1, r2, r3
 8000cc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cc6:	010b      	lsls	r3, r1, #4
 8000cc8:	4413      	add	r3, r2
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cd2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cd4:	010b      	lsls	r3, r1, #4
 8000cd6:	4413      	add	r3, r2
 8000cd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ce4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ce8:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8000cec:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
                A[k+j] = u + t;
 8000cf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cf8:	4413      	add	r3, r2
 8000cfa:	ed97 6b06 	vldr	d6, [r7, #24]
 8000cfe:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d02:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d06:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d0a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d0e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d14:	011a      	lsls	r2, r3, #4
 8000d16:	440a      	add	r2, r1
 8000d18:	ed82 6b00 	vstr	d6, [r2]
 8000d1c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4413      	add	r3, r2
 8000d22:	3308      	adds	r3, #8
 8000d24:	ed83 7b00 	vstr	d7, [r3]
                A[k+j+m/2] = u - t;
 8000d28:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d30:	441a      	add	r2, r3
 8000d32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da00      	bge.n	8000d3a <FFT+0x31a>
 8000d38:	3301      	adds	r3, #1
 8000d3a:	105b      	asrs	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d42:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d4a:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d4e:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d58:	011a      	lsls	r2, r3, #4
 8000d5a:	440a      	add	r2, r1
 8000d5c:	ed82 6b00 	vstr	d6, [r2]
 8000d60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	4413      	add	r3, r2
 8000d66:	3308      	adds	r3, #8
 8000d68:	ed83 7b00 	vstr	d7, [r3]
                omega = omega * W[size/m];
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d74:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000d78:	011a      	lsls	r2, r3, #4
 8000d7a:	440a      	add	r2, r1
 8000d7c:	ed92 7b00 	vldr	d7, [r2]
 8000d80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	4413      	add	r3, r2
 8000d88:	ed93 6b02 	vldr	d6, [r3, #8]
 8000d8c:	eeb0 3b46 	vmov.f64	d3, d6
 8000d90:	eeb0 2b47 	vmov.f64	d2, d7
 8000d94:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000d98:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000d9c:	f7ff fb10 	bl	80003c0 <__muldc3>
 8000da0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 8000da4:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8000da8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000dac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000db0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000db4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            for (j = 0; j < m/2; j++)
 8000db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da00      	bge.n	8000dca <FFT+0x3aa>
 8000dc8:	3301      	adds	r3, #1
 8000dca:	105b      	asrs	r3, r3, #1
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f6ff af46 	blt.w	8000c64 <FFT+0x244>
        for ( k = 0 ; k< size ; k += m)
 8000dd8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000ddc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dde:	4413      	add	r3, r2
 8000de0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000de4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	f6ff af16 	blt.w	8000c1c <FFT+0x1fc>
    for(s = 1 ; s <size ; s*=2)
 8000df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f6ff af03 	blt.w	8000c0c <FFT+0x1ec>
            } 
        }
    }
    return X;
 8000e06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e08:	46b5      	mov	sp, r6

}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	37a4      	adds	r7, #164	@ 0xa4
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	ecbd 8b02 	vpop	{d8}
 8000e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e18 <FFT_Mag_sqrt>:
    }
}


void FFT_Mag_sqrt(int size , double x[])
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    double complex* X = FFT(size , x);
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fdfb 	bl	8000a20 <FFT>
 8000e2a:	60b8      	str	r0, [r7, #8]
    for (int i = 0 ; i < size ; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	e01c      	b.n	8000e6c <FFT_Mag_sqrt+0x54>
    {
        x[i] = cabs(X[i]);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	4413      	add	r3, r2
 8000e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e42:	68fc      	ldr	r4, [r7, #12]
 8000e44:	00e4      	lsls	r4, r4, #3
 8000e46:	683d      	ldr	r5, [r7, #0]
 8000e48:	442c      	add	r4, r5
 8000e4a:	ec41 0b16 	vmov	d6, r0, r1
 8000e4e:	ec43 2b17 	vmov	d7, r2, r3
 8000e52:	eeb0 0b46 	vmov.f64	d0, d6
 8000e56:	eeb0 1b47 	vmov.f64	d1, d7
 8000e5a:	f012 f911 	bl	8013080 <cabs>
 8000e5e:	eeb0 7b40 	vmov.f64	d7, d0
 8000e62:	ed84 7b00 	vstr	d7, [r4]
    for (int i = 0 ; i < size ; i++)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbde      	blt.n	8000e32 <FFT_Mag_sqrt+0x1a>
    }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e80 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea4:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ea6:	4a31      	ldr	r2, [pc, #196]	@ (8000f6c <MX_ADC1_Init+0xec>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ec2:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ec8:	4b27      	ldr	r3, [pc, #156]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ece:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed4:	4b24      	ldr	r3, [pc, #144]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000eda:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000edc:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ee4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000eea:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000eec:	2203      	movs	r2, #3
 8000eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f04:	4818      	ldr	r0, [pc, #96]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000f06:	f001 fed7 	bl	8002cb8 <HAL_ADC_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f10:	f001 f874 	bl	8001ffc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4812      	ldr	r0, [pc, #72]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000f20:	f003 fa18 	bl	8004354 <HAL_ADCEx_MultiModeConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f2a:	f001 f867 	bl	8001ffc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <MX_ADC1_Init+0xf0>)
 8000f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f32:	2306      	movs	r3, #6
 8000f34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000f36:	2305      	movs	r3, #5
 8000f38:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f3a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000f3e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f40:	2304      	movs	r3, #4
 8000f42:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000f52:	f002 faab 	bl	80034ac <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000f5c:	f001 f84e 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	@ 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	240046dc 	.word	0x240046dc
 8000f6c:	40022000 	.word	0x40022000
 8000f70:	0c900008 	.word	0x0c900008

08000f74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b0bc      	sub	sp, #240	@ 0xf0
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	22c0      	movs	r2, #192	@ 0xc0
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f00d f924 	bl	800e1e2 <memset>
  if(adcHandle->Instance==ADC1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a53      	ldr	r2, [pc, #332]	@ (80010ec <HAL_ADC_MspInit+0x178>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	f040 809e 	bne.w	80010e2 <HAL_ADC_MspInit+0x16e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fa6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 10;
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 384;
 8000fb6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 6;
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000fc8:	2340      	movs	r3, #64	@ 0x40
 8000fca:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f008 f992 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000fea:	f001 f807 	bl	8001ffc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fee:	4b40      	ldr	r3, [pc, #256]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 8000ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ff4:	4a3e      	ldr	r2, [pc, #248]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 8000ff6:	f043 0320 	orr.w	r3, r3, #32
 8000ffa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 8001000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001004:	f003 0320 	and.w	r3, r3, #32
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	4b38      	ldr	r3, [pc, #224]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001012:	4a37      	ldr	r2, [pc, #220]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800101c:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001030:	4a2f      	ldr	r2, [pc, #188]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103a:	4b2d      	ldr	r3, [pc, #180]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001048:	2340      	movs	r3, #64	@ 0x40
 800104a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104e:	2303      	movs	r3, #3
 8001050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800105e:	4619      	mov	r1, r3
 8001060:	4824      	ldr	r0, [pc, #144]	@ (80010f4 <HAL_ADC_MspInit+0x180>)
 8001062:	f006 fd33 	bl	8007acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001066:	2310      	movs	r3, #16
 8001068:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106c:	2303      	movs	r3, #3
 800106e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001078:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800107c:	4619      	mov	r1, r3
 800107e:	481e      	ldr	r0, [pc, #120]	@ (80010f8 <HAL_ADC_MspInit+0x184>)
 8001080:	f006 fd24 	bl	8007acc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 8001086:	4a1e      	ldr	r2, [pc, #120]	@ (8001100 <HAL_ADC_MspInit+0x18c>)
 8001088:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800108a:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 800108c:	2209      	movs	r2, #9
 800108e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 800109e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010c6:	480d      	ldr	r0, [pc, #52]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010c8:	f003 fd0e 	bl	8004ae8 <HAL_DMA_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_ADC_MspInit+0x162>
    {
      Error_Handler();
 80010d2:	f000 ff93 	bl	8001ffc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	37f0      	adds	r7, #240	@ 0xf0
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58020000 	.word	0x58020000
 80010f8:	58020800 	.word	0x58020800
 80010fc:	24004740 	.word	0x24004740
 8001100:	40020010 	.word	0x40020010

08001104 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <HAL_ADC_MspDeInit+0x44>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d114      	bne.n	8001140 <HAL_ADC_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 8001116:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <HAL_ADC_MspDeInit+0x48>)
 8001118:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800111c:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <HAL_ADC_MspDeInit+0x48>)
 800111e:	f023 0320 	bic.w	r3, r3, #32
 8001122:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8001126:	2140      	movs	r1, #64	@ 0x40
 8001128:	4809      	ldr	r0, [pc, #36]	@ (8001150 <HAL_ADC_MspDeInit+0x4c>)
 800112a:	f006 fe7f 	bl	8007e2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 800112e:	2110      	movs	r1, #16
 8001130:	4808      	ldr	r0, [pc, #32]	@ (8001154 <HAL_ADC_MspDeInit+0x50>)
 8001132:	f006 fe7b 	bl	8007e2c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	4618      	mov	r0, r3
 800113c:	f004 f830 	bl	80051a0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40022000 	.word	0x40022000
 800114c:	58024400 	.word	0x58024400
 8001150:	58020000 	.word	0x58020000
 8001154:	58020800 	.word	0x58020800

08001158 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2224      	movs	r2, #36	@ 0x24
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00d f83c 	bl	800e1e2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_DAC1_Init+0x5c>)
 800116c:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <MX_DAC1_Init+0x60>)
 800116e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001170:	4810      	ldr	r0, [pc, #64]	@ (80011b4 <MX_DAC1_Init+0x5c>)
 8001172:	f003 fb59 	bl	8004828 <HAL_DAC_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800117c:	f000 ff3e 	bl	8001ffc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001184:	2302      	movs	r3, #2
 8001186:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001188:	2302      	movs	r3, #2
 800118a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800118c:	2301      	movs	r3, #1
 800118e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2210      	movs	r2, #16
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <MX_DAC1_Init+0x5c>)
 800119c:	f003 fb66 	bl	800486c <HAL_DAC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011a6:	f000 ff29 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	@ 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	240047b8 	.word	0x240047b8
 80011b8:	40007400 	.word	0x40007400

080011bc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a30      	ldr	r2, [pc, #192]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d159      	bne.n	8001292 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80011de:	4b30      	ldr	r3, [pc, #192]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 80011e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011e4:	4a2e      	ldr	r2, [pc, #184]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 80011e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80011ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011ee:	4b2c      	ldr	r3, [pc, #176]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 80011f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001202:	4a27      	ldr	r2, [pc, #156]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800120c:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800121a:	2320      	movs	r3, #32
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	481d      	ldr	r0, [pc, #116]	@ (80012a4 <HAL_DAC_MspInit+0xe8>)
 800122e:	f006 fc4d 	bl	8007acc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001232:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001234:	4a1d      	ldr	r2, [pc, #116]	@ (80012ac <HAL_DAC_MspInit+0xf0>)
 8001236:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001238:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 800123a:	2244      	movs	r2, #68	@ 0x44
 800123c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800123e:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001240:	2240      	movs	r2, #64	@ 0x40
 8001242:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001244:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 800124c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001250:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001254:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001258:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 800125c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001260:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001268:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001270:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001276:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001278:	f003 fc36 	bl	8004ae8 <HAL_DMA_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001282:	f000 febb 	bl	8001ffc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a07      	ldr	r2, [pc, #28]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40007400 	.word	0x40007400
 80012a0:	58024400 	.word	0x58024400
 80012a4:	58020000 	.word	0x58020000
 80012a8:	240047cc 	.word	0x240047cc
 80012ac:	40020028 	.word	0x40020028

080012b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <MX_DMA_Init+0x4c>)
 80012b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012bc:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <MX_DMA_Init+0x4c>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <MX_DMA_Init+0x4c>)
 80012c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	200b      	movs	r0, #11
 80012da:	f003 f9f4 	bl	80046c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012de:	200b      	movs	r0, #11
 80012e0:	f003 fa0b 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	200c      	movs	r0, #12
 80012ea:	f003 f9ec 	bl	80046c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012ee:	200c      	movs	r0, #12
 80012f0:	f003 fa03 	bl	80046fa <HAL_NVIC_EnableIRQ>

}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	58024400 	.word	0x58024400

08001300 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	4b39      	ldr	r3, [pc, #228]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131c:	4a37      	ldr	r2, [pc, #220]	@ (80013fc <MX_GPIO_Init+0xfc>)
 800131e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001326:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	4a30      	ldr	r2, [pc, #192]	@ (80013fc <MX_GPIO_Init+0xfc>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001358:	4a28      	ldr	r2, [pc, #160]	@ (80013fc <MX_GPIO_Init+0xfc>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001362:	4b26      	ldr	r3, [pc, #152]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001370:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001376:	4a21      	ldr	r2, [pc, #132]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001380:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138e:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001394:	4a19      	ldr	r2, [pc, #100]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <MX_GPIO_Init+0xfc>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2
 80013ac:	2200      	movs	r2, #0
 80013ae:	f24c 011e 	movw	r1, #49182	@ 0xc01e
 80013b2:	4813      	ldr	r0, [pc, #76]	@ (8001400 <MX_GPIO_Init+0x100>)
 80013b4:	f006 fe44 	bl	8008040 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013b8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <MX_GPIO_Init+0x100>)
 80013d2:	f006 fb7b 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80013d6:	231e      	movs	r3, #30
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e2:	2302      	movs	r3, #2
 80013e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4804      	ldr	r0, [pc, #16]	@ (8001400 <MX_GPIO_Init+0x100>)
 80013ee:	f006 fb6d 	bl	8007acc <HAL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	@ 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	58024400 	.word	0x58024400
 8001400:	58020c00 	.word	0x58020c00

08001404 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_I2C1_Init+0x74>)
 800140a:	4a1c      	ldr	r2, [pc, #112]	@ (800147c <MX_I2C1_Init+0x78>)
 800140c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001410:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <MX_I2C1_Init+0x7c>)
 8001412:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_I2C1_Init+0x74>)
 800141c:	2201      	movs	r2, #1
 800141e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_I2C1_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_I2C1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143e:	480e      	ldr	r0, [pc, #56]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001440:	f006 fe18 	bl	8008074 <HAL_I2C_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800144a:	f000 fdd7 	bl	8001ffc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800144e:	2100      	movs	r1, #0
 8001450:	4809      	ldr	r0, [pc, #36]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001452:	f006 fe9f 	bl	8008194 <HAL_I2CEx_ConfigAnalogFilter>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800145c:	f000 fdce 	bl	8001ffc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001460:	2100      	movs	r1, #0
 8001462:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001464:	f006 fee1 	bl	800822a <HAL_I2CEx_ConfigDigitalFilter>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800146e:	f000 fdc5 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	24004844 	.word	0x24004844
 800147c:	40005400 	.word	0x40005400
 8001480:	00b03fdb 	.word	0x00b03fdb

08001484 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0ba      	sub	sp, #232	@ 0xe8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	22c0      	movs	r2, #192	@ 0xc0
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00c fe9c 	bl	800e1e2 <memset>
  if(i2cHandle->Instance==I2C1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a26      	ldr	r2, [pc, #152]	@ (8001548 <HAL_I2C_MspInit+0xc4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d145      	bne.n	8001540 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014b4:	f04f 0208 	mov.w	r2, #8
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4618      	mov	r0, r3
 80014cc:	f007 ff1c 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014d6:	f000 fd91 	bl	8001ffc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <HAL_I2C_MspInit+0xc8>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e0:	4a1a      	ldr	r2, [pc, #104]	@ (800154c <HAL_I2C_MspInit+0xc8>)
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <HAL_I2C_MspInit+0xc8>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014f8:	23c0      	movs	r3, #192	@ 0xc0
 80014fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001510:	2304      	movs	r3, #4
 8001512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	@ (8001550 <HAL_I2C_MspInit+0xcc>)
 800151e:	f006 fad5 	bl	8007acc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_I2C_MspInit+0xc8>)
 8001524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001528:	4a08      	ldr	r2, [pc, #32]	@ (800154c <HAL_I2C_MspInit+0xc8>)
 800152a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800152e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_I2C_MspInit+0xc8>)
 8001534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001540:	bf00      	nop
 8001542:	37e8      	adds	r7, #232	@ 0xe8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40005400 	.word	0x40005400
 800154c:	58024400 	.word	0x58024400
 8001550:	58020400 	.word	0x58020400
 8001554:	00000000 	.word	0x00000000

08001558 <Analog_Judge>:
#include "tim.h"
#include "usart.h"
#include "gpio.h"

int Analog_Judge(double x[])
{
 8001558:	b580      	push	{r7, lr}
 800155a:	f5ad 3d80 	sub.w	sp, sp, #65536	@ 0x10000
 800155e:	b0c2      	sub	sp, #264	@ 0x108
 8001560:	af00      	add	r7, sp, #0
 8001562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800156a:	6018      	str	r0, [r3, #0]
    double bands[FO_LENGTH / 2];
    double bands_idx[FO_LENGTH / 2];
    double bands_sum = 0;
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	494e      	ldr	r1, [pc, #312]	@ (80016b0 <Analog_Judge+0x158>)
 8001576:	4439      	add	r1, r7
 8001578:	e9c1 2300 	strd	r2, r3, [r1]
//    int main_band_idx = 0;
    int n_bands = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	4a4d      	ldr	r2, [pc, #308]	@ (80016b4 <Analog_Judge+0x15c>)
 8001580:	443a      	add	r2, r7
 8001582:	6013      	str	r3, [r2, #0]
    int bands_gap = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	4a4c      	ldr	r2, [pc, #304]	@ (80016b8 <Analog_Judge+0x160>)
 8001588:	443a      	add	r2, r7
 800158a:	6013      	str	r3, [r2, #0]
    char str[200];


    // This can be optimized with specific threshold
    double main_band = 0;
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	4949      	ldr	r1, [pc, #292]	@ (80016bc <Analog_Judge+0x164>)
 8001596:	4439      	add	r1, r7
 8001598:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < FO_LENGTH / 2; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	4a48      	ldr	r2, [pc, #288]	@ (80016c0 <Analog_Judge+0x168>)
 80015a0:	443a      	add	r2, r7
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e02b      	b.n	80015fe <Analog_Judge+0xa6>
    {
        if (x[i] > main_band)
 80015a6:	4b46      	ldr	r3, [pc, #280]	@ (80016c0 <Analog_Judge+0x168>)
 80015a8:	443b      	add	r3, r7
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80015b2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	ed93 7b00 	vldr	d7, [r3]
 80015be:	4b3f      	ldr	r3, [pc, #252]	@ (80016bc <Analog_Judge+0x164>)
 80015c0:	443b      	add	r3, r7
 80015c2:	ed93 6b00 	vldr	d6, [r3]
 80015c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ce:	d50f      	bpl.n	80015f0 <Analog_Judge+0x98>
        {
            main_band = x[i];
 80015d0:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <Analog_Judge+0x168>)
 80015d2:	443b      	add	r3, r7
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80015dc:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	4934      	ldr	r1, [pc, #208]	@ (80016bc <Analog_Judge+0x164>)
 80015ea:	4439      	add	r1, r7
 80015ec:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < FO_LENGTH / 2; i++)
 80015f0:	4b33      	ldr	r3, [pc, #204]	@ (80016c0 <Analog_Judge+0x168>)
 80015f2:	443b      	add	r3, r7
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a31      	ldr	r2, [pc, #196]	@ (80016c0 <Analog_Judge+0x168>)
 80015fa:	443a      	add	r2, r7
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <Analog_Judge+0x168>)
 8001600:	443b      	add	r3, r7
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001608:	dbcd      	blt.n	80015a6 <Analog_Judge+0x4e>
        }
    }
    double threshold = main_band * 0.01;
 800160a:	4b2c      	ldr	r3, [pc, #176]	@ (80016bc <Analog_Judge+0x164>)
 800160c:	443b      	add	r3, r7
 800160e:	ed93 7b00 	vldr	d7, [r3]
 8001612:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 80016a8 <Analog_Judge+0x150>
 8001616:	ee27 7b06 	vmul.f64	d7, d7, d6
 800161a:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <Analog_Judge+0x16c>)
 800161c:	443b      	add	r3, r7
 800161e:	ed83 7b00 	vstr	d7, [r3]
    
    for(int i = 50; i < FO_LENGTH / 2; i++)
 8001622:	2332      	movs	r3, #50	@ 0x32
 8001624:	4a28      	ldr	r2, [pc, #160]	@ (80016c8 <Analog_Judge+0x170>)
 8001626:	443a      	add	r2, r7
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e0d7      	b.n	80017dc <Analog_Judge+0x284>
    {
        if(x[i] > threshold && x[i] > 20 && i < FO_LENGTH/2 - 50)
 800162c:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <Analog_Judge+0x170>)
 800162e:	443b      	add	r3, r7
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001638:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	4413      	add	r3, r2
 8001640:	ed93 7b00 	vldr	d7, [r3]
 8001644:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <Analog_Judge+0x16c>)
 8001646:	443b      	add	r3, r7
 8001648:	ed93 6b00 	vldr	d6, [r3]
 800164c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	f140 80bb 	bpl.w	80017ce <Analog_Judge+0x276>
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <Analog_Judge+0x170>)
 800165a:	443b      	add	r3, r7
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001664:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	4413      	add	r3, r2
 800166c:	ed93 7b00 	vldr	d7, [r3]
 8001670:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001674:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167c:	f340 80a7 	ble.w	80017ce <Analog_Judge+0x276>
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <Analog_Judge+0x170>)
 8001682:	443b      	add	r3, r7
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f640 72cd 	movw	r2, #4045	@ 0xfcd
 800168a:	4293      	cmp	r3, r2
 800168c:	f300 809f 	bgt.w	80017ce <Analog_Judge+0x276>
        {
        	int flag = 1 ;
 8001690:	2301      	movs	r3, #1
 8001692:	4a0e      	ldr	r2, [pc, #56]	@ (80016cc <Analog_Judge+0x174>)
 8001694:	443a      	add	r2, r7
 8001696:	6013      	str	r3, [r2, #0]
        	for (int j = i - 2 ; j < i + 2 ; j++)
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <Analog_Judge+0x170>)
 800169a:	443b      	add	r3, r7
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3b02      	subs	r3, #2
 80016a0:	4a0b      	ldr	r2, [pc, #44]	@ (80016d0 <Analog_Judge+0x178>)
 80016a2:	443a      	add	r2, r7
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e03d      	b.n	8001724 <Analog_Judge+0x1cc>
 80016a8:	47ae147b 	.word	0x47ae147b
 80016ac:	3f847ae1 	.word	0x3f847ae1
 80016b0:	00010100 	.word	0x00010100
 80016b4:	000100fc 	.word	0x000100fc
 80016b8:	000100dc 	.word	0x000100dc
 80016bc:	000100f0 	.word	0x000100f0
 80016c0:	000100ec 	.word	0x000100ec
 80016c4:	000100d0 	.word	0x000100d0
 80016c8:	000100e8 	.word	0x000100e8
 80016cc:	000100e4 	.word	0x000100e4
 80016d0:	000100e0 	.word	0x000100e0
        	{
        		if (x[j] > x[i])flag = 0;
 80016d4:	4b79      	ldr	r3, [pc, #484]	@ (80018bc <Analog_Judge+0x364>)
 80016d6:	443b      	add	r3, r7
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80016e0:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	ed93 6b00 	vldr	d6, [r3]
 80016ec:	4b74      	ldr	r3, [pc, #464]	@ (80018c0 <Analog_Judge+0x368>)
 80016ee:	443b      	add	r3, r7
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80016f8:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	ed93 7b00 	vldr	d7, [r3]
 8001704:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	dd03      	ble.n	8001716 <Analog_Judge+0x1be>
 800170e:	2300      	movs	r3, #0
 8001710:	4a6c      	ldr	r2, [pc, #432]	@ (80018c4 <Analog_Judge+0x36c>)
 8001712:	443a      	add	r2, r7
 8001714:	6013      	str	r3, [r2, #0]
        	for (int j = i - 2 ; j < i + 2 ; j++)
 8001716:	4b69      	ldr	r3, [pc, #420]	@ (80018bc <Analog_Judge+0x364>)
 8001718:	443b      	add	r3, r7
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	4a67      	ldr	r2, [pc, #412]	@ (80018bc <Analog_Judge+0x364>)
 8001720:	443a      	add	r2, r7
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b66      	ldr	r3, [pc, #408]	@ (80018c0 <Analog_Judge+0x368>)
 8001726:	443b      	add	r3, r7
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	4a63      	ldr	r2, [pc, #396]	@ (80018bc <Analog_Judge+0x364>)
 800172e:	443a      	add	r2, r7
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	ddce      	ble.n	80016d4 <Analog_Judge+0x17c>
        	}
        	if (flag == 1)
 8001736:	4b63      	ldr	r3, [pc, #396]	@ (80018c4 <Analog_Judge+0x36c>)
 8001738:	443b      	add	r3, r7
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d146      	bne.n	80017ce <Analog_Judge+0x276>
        	{
        		bands_sum += x[i];
 8001740:	4b5f      	ldr	r3, [pc, #380]	@ (80018c0 <Analog_Judge+0x368>)
 8001742:	443b      	add	r3, r7
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800174c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	4413      	add	r3, r2
 8001754:	ed93 7b00 	vldr	d7, [r3]
 8001758:	4b5b      	ldr	r3, [pc, #364]	@ (80018c8 <Analog_Judge+0x370>)
 800175a:	443b      	add	r3, r7
 800175c:	ed93 6b00 	vldr	d6, [r3]
 8001760:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001764:	4b58      	ldr	r3, [pc, #352]	@ (80018c8 <Analog_Judge+0x370>)
 8001766:	443b      	add	r3, r7
 8001768:	ed83 7b00 	vstr	d7, [r3]
        		bands[n_bands] = x[i];
 800176c:	4b54      	ldr	r3, [pc, #336]	@ (80018c0 <Analog_Judge+0x368>)
 800176e:	443b      	add	r3, r7
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001778:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	4413      	add	r3, r2
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f248 1108 	movw	r1, #33032	@ 0x8108
 8001788:	4439      	add	r1, r7
 800178a:	4608      	mov	r0, r1
 800178c:	494f      	ldr	r1, [pc, #316]	@ (80018cc <Analog_Judge+0x374>)
 800178e:	4439      	add	r1, r7
 8001790:	6809      	ldr	r1, [r1, #0]
 8001792:	00c9      	lsls	r1, r1, #3
 8001794:	4401      	add	r1, r0
 8001796:	3938      	subs	r1, #56	@ 0x38
 8001798:	e9c1 2300 	strd	r2, r3, [r1]
        		bands_idx[n_bands] = i;
 800179c:	4b48      	ldr	r3, [pc, #288]	@ (80018c0 <Analog_Judge+0x368>)
 800179e:	443b      	add	r3, r7
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b46      	ldr	r3, [pc, #280]	@ (80018cc <Analog_Judge+0x374>)
 80017b2:	443b      	add	r3, r7
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4413      	add	r3, r2
 80017ba:	3b38      	subs	r3, #56	@ 0x38
 80017bc:	ed83 7b00 	vstr	d7, [r3]
        		n_bands++;
 80017c0:	4b42      	ldr	r3, [pc, #264]	@ (80018cc <Analog_Judge+0x374>)
 80017c2:	443b      	add	r3, r7
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a40      	ldr	r2, [pc, #256]	@ (80018cc <Analog_Judge+0x374>)
 80017ca:	443a      	add	r2, r7
 80017cc:	6013      	str	r3, [r2, #0]
    for(int i = 50; i < FO_LENGTH / 2; i++)
 80017ce:	4b3c      	ldr	r3, [pc, #240]	@ (80018c0 <Analog_Judge+0x368>)
 80017d0:	443b      	add	r3, r7
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	4a3a      	ldr	r2, [pc, #232]	@ (80018c0 <Analog_Judge+0x368>)
 80017d8:	443a      	add	r2, r7
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b38      	ldr	r3, [pc, #224]	@ (80018c0 <Analog_Judge+0x368>)
 80017de:	443b      	add	r3, r7
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017e6:	f6ff af21 	blt.w	800162c <Analog_Judge+0xd4>
        	}
        }
    }

    bands_gap = bands_idx[n_bands / 2 + 1] - bands_idx[n_bands / 2];
 80017ea:	4b38      	ldr	r3, [pc, #224]	@ (80018cc <Analog_Judge+0x374>)
 80017ec:	443b      	add	r3, r7
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	da00      	bge.n	80017f6 <Analog_Judge+0x29e>
 80017f4:	3301      	adds	r3, #1
 80017f6:	105b      	asrs	r3, r3, #1
 80017f8:	3301      	adds	r3, #1
 80017fa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4413      	add	r3, r2
 8001802:	3b38      	subs	r3, #56	@ 0x38
 8001804:	ed93 6b00 	vldr	d6, [r3]
 8001808:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <Analog_Judge+0x374>)
 800180a:	443b      	add	r3, r7
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	da00      	bge.n	8001814 <Analog_Judge+0x2bc>
 8001812:	3301      	adds	r3, #1
 8001814:	105b      	asrs	r3, r3, #1
 8001816:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	3b38      	subs	r3, #56	@ 0x38
 8001820:	ed93 7b00 	vldr	d7, [r3]
 8001824:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001828:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800182c:	ee17 3a90 	vmov	r3, s15
 8001830:	4a27      	ldr	r2, [pc, #156]	@ (80018d0 <Analog_Judge+0x378>)
 8001832:	443a      	add	r2, r7
 8001834:	6013      	str	r3, [r2, #0]
	sprintf(str , "number of seperated bands: %d." , n_bands);
 8001836:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <Analog_Judge+0x37c>)
 8001838:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800183c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001840:	443b      	add	r3, r7
 8001842:	4a22      	ldr	r2, [pc, #136]	@ (80018cc <Analog_Judge+0x374>)
 8001844:	443a      	add	r2, r7
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	4923      	ldr	r1, [pc, #140]	@ (80018d8 <Analog_Judge+0x380>)
 800184a:	4618      	mov	r0, r3
 800184c:	f00c fc66 	bl	800e11c <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001850:	4920      	ldr	r1, [pc, #128]	@ (80018d4 <Analog_Judge+0x37c>)
 8001852:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <Analog_Judge+0x384>)
 8001854:	440b      	add	r3, r1
 8001856:	19d9      	adds	r1, r3, r7
 8001858:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800185c:	221c      	movs	r2, #28
 800185e:	4820      	ldr	r0, [pc, #128]	@ (80018e0 <Analog_Judge+0x388>)
 8001860:	f00a fe4e 	bl	800c500 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001868:	2201      	movs	r2, #1
 800186a:	491e      	ldr	r1, [pc, #120]	@ (80018e4 <Analog_Judge+0x38c>)
 800186c:	481c      	ldr	r0, [pc, #112]	@ (80018e0 <Analog_Judge+0x388>)
 800186e:	f00a fe47 	bl	800c500 <HAL_UART_Transmit>
	sprintf(str , "band_gap: %d." , bands_gap);
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <Analog_Judge+0x37c>)
 8001874:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001878:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800187c:	443b      	add	r3, r7
 800187e:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <Analog_Judge+0x378>)
 8001880:	443a      	add	r2, r7
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	4918      	ldr	r1, [pc, #96]	@ (80018e8 <Analog_Judge+0x390>)
 8001886:	4618      	mov	r0, r3
 8001888:	f00c fc48 	bl	800e11c <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 12   ,HAL_MAX_DELAY);
 800188c:	4911      	ldr	r1, [pc, #68]	@ (80018d4 <Analog_Judge+0x37c>)
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <Analog_Judge+0x384>)
 8001890:	440b      	add	r3, r1
 8001892:	19d9      	adds	r1, r3, r7
 8001894:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001898:	220c      	movs	r2, #12
 800189a:	4811      	ldr	r0, [pc, #68]	@ (80018e0 <Analog_Judge+0x388>)
 800189c:	f00a fe30 	bl	800c500 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018a4:	2201      	movs	r2, #1
 80018a6:	490f      	ldr	r1, [pc, #60]	@ (80018e4 <Analog_Judge+0x38c>)
 80018a8:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <Analog_Judge+0x388>)
 80018aa:	f00a fe29 	bl	800c500 <HAL_UART_Transmit>

//    printf("number of seperated bands: %d\n", n_bands);

    if (n_bands == 1)
 80018ae:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <Analog_Judge+0x374>)
 80018b0:	443b      	add	r3, r7
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d119      	bne.n	80018ec <Analog_Judge+0x394>
    {
        return 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e095      	b.n	80019e8 <Analog_Judge+0x490>
 80018bc:	000100e0 	.word	0x000100e0
 80018c0:	000100e8 	.word	0x000100e8
 80018c4:	000100e4 	.word	0x000100e4
 80018c8:	00010100 	.word	0x00010100
 80018cc:	000100fc 	.word	0x000100fc
 80018d0:	000100dc 	.word	0x000100dc
 80018d4:	fffeff00 	.word	0xfffeff00
 80018d8:	08013e98 	.word	0x08013e98
 80018dc:	00010108 	.word	0x00010108
 80018e0:	2401493c 	.word	0x2401493c
 80018e4:	08013eb8 	.word	0x08013eb8
 80018e8:	08013ebc 	.word	0x08013ebc
    }
    else if (n_bands <= 3)
 80018ec:	4b44      	ldr	r3, [pc, #272]	@ (8001a00 <Analog_Judge+0x4a8>)
 80018ee:	443b      	add	r3, r7
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	dc6a      	bgt.n	80019cc <Analog_Judge+0x474>
    {
    	sprintf(str , "signal fre: %.2lf." ,1.0 * bands_gap / 7);
 80018f6:	4b43      	ldr	r3, [pc, #268]	@ (8001a04 <Analog_Judge+0x4ac>)
 80018f8:	443b      	add	r3, r7
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001904:	eeb1 6b0c 	vmov.f64	d6, #28	@ 0x40e00000  7.0
 8001908:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800190c:	483e      	ldr	r0, [pc, #248]	@ (8001a08 <Analog_Judge+0x4b0>)
 800190e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a0c <Analog_Judge+0x4b4>)
 8001910:	4403      	add	r3, r0
 8001912:	19d8      	adds	r0, r3, r7
 8001914:	ec53 2b15 	vmov	r2, r3, d5
 8001918:	493d      	ldr	r1, [pc, #244]	@ (8001a10 <Analog_Judge+0x4b8>)
 800191a:	f00c fbff 	bl	800e11c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 17   ,HAL_MAX_DELAY);
 800191e:	493a      	ldr	r1, [pc, #232]	@ (8001a08 <Analog_Judge+0x4b0>)
 8001920:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <Analog_Judge+0x4b4>)
 8001922:	440b      	add	r3, r1
 8001924:	19d9      	adds	r1, r3, r7
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800192a:	2211      	movs	r2, #17
 800192c:	4839      	ldr	r0, [pc, #228]	@ (8001a14 <Analog_Judge+0x4bc>)
 800192e:	f00a fde7 	bl	800c500 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001936:	2201      	movs	r2, #1
 8001938:	4937      	ldr	r1, [pc, #220]	@ (8001a18 <Analog_Judge+0x4c0>)
 800193a:	4836      	ldr	r0, [pc, #216]	@ (8001a14 <Analog_Judge+0x4bc>)
 800193c:	f00a fde0 	bl	800c500 <HAL_UART_Transmit>
    	sprintf(str , "degree of moderation: %.2lf" , 1.43 *  (bands_sum - bands[n_bands / 2]) / bands[n_bands / 2]);
 8001940:	4b2f      	ldr	r3, [pc, #188]	@ (8001a00 <Analog_Judge+0x4a8>)
 8001942:	443b      	add	r3, r7
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	da00      	bge.n	800194c <Analog_Judge+0x3f4>
 800194a:	3301      	adds	r3, #1
 800194c:	105b      	asrs	r3, r3, #1
 800194e:	f248 1208 	movw	r2, #33032	@ 0x8108
 8001952:	443a      	add	r2, r7
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	3b38      	subs	r3, #56	@ 0x38
 800195a:	ed93 7b00 	vldr	d7, [r3]
 800195e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a1c <Analog_Judge+0x4c4>)
 8001960:	443b      	add	r3, r7
 8001962:	ed93 6b00 	vldr	d6, [r3]
 8001966:	ee36 7b47 	vsub.f64	d7, d6, d7
 800196a:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 80019f8 <Analog_Judge+0x4a0>
 800196e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001972:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <Analog_Judge+0x4a8>)
 8001974:	443b      	add	r3, r7
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	da00      	bge.n	800197e <Analog_Judge+0x426>
 800197c:	3301      	adds	r3, #1
 800197e:	105b      	asrs	r3, r3, #1
 8001980:	f248 1208 	movw	r2, #33032	@ 0x8108
 8001984:	443a      	add	r2, r7
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4413      	add	r3, r2
 800198a:	3b38      	subs	r3, #56	@ 0x38
 800198c:	ed93 7b00 	vldr	d7, [r3]
 8001990:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001994:	481c      	ldr	r0, [pc, #112]	@ (8001a08 <Analog_Judge+0x4b0>)
 8001996:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <Analog_Judge+0x4b4>)
 8001998:	4403      	add	r3, r0
 800199a:	19d8      	adds	r0, r3, r7
 800199c:	ec53 2b15 	vmov	r2, r3, d5
 80019a0:	491f      	ldr	r1, [pc, #124]	@ (8001a20 <Analog_Judge+0x4c8>)
 80019a2:	f00c fbbb 	bl	800e11c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 26   ,HAL_MAX_DELAY);
 80019a6:	4918      	ldr	r1, [pc, #96]	@ (8001a08 <Analog_Judge+0x4b0>)
 80019a8:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <Analog_Judge+0x4b4>)
 80019aa:	440b      	add	r3, r1
 80019ac:	19d9      	adds	r1, r3, r7
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019b2:	221a      	movs	r2, #26
 80019b4:	4817      	ldr	r0, [pc, #92]	@ (8001a14 <Analog_Judge+0x4bc>)
 80019b6:	f00a fda3 	bl	800c500 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019be:	2201      	movs	r2, #1
 80019c0:	4915      	ldr	r1, [pc, #84]	@ (8001a18 <Analog_Judge+0x4c0>)
 80019c2:	4814      	ldr	r0, [pc, #80]	@ (8001a14 <Analog_Judge+0x4bc>)
 80019c4:	f00a fd9c 	bl	800c500 <HAL_UART_Transmit>
        return 1; 
 80019c8:	2301      	movs	r3, #1
 80019ca:	e00d      	b.n	80019e8 <Analog_Judge+0x490>
    } 
    else if (n_bands > 3 && n_bands < 20)
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <Analog_Judge+0x4a8>)
 80019ce:	443b      	add	r3, r7
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	dd06      	ble.n	80019e4 <Analog_Judge+0x48c>
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <Analog_Judge+0x4a8>)
 80019d8:	443b      	add	r3, r7
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b13      	cmp	r3, #19
 80019de:	dc01      	bgt.n	80019e4 <Analog_Judge+0x48c>
    {
        return 2; 
 80019e0:	2302      	movs	r3, #2
 80019e2:	e001      	b.n	80019e8 <Analog_Judge+0x490>
    }
    else
    {
        return -1;
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 80019ee:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	ae147ae1 	.word	0xae147ae1
 80019fc:	3ff6e147 	.word	0x3ff6e147
 8001a00:	000100fc 	.word	0x000100fc
 8001a04:	000100dc 	.word	0x000100dc
 8001a08:	fffeff00 	.word	0xfffeff00
 8001a0c:	00010108 	.word	0x00010108
 8001a10:	08013ecc 	.word	0x08013ecc
 8001a14:	2401493c 	.word	0x2401493c
 8001a18:	08013eb8 	.word	0x08013eb8
 8001a1c:	00010100 	.word	0x00010100
 8001a20:	08013ee0 	.word	0x08013ee0

08001a24 <Judger>:
    
 
void Judger(int value)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0b4      	sub	sp, #208	@ 0xd0
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	char str[200];

    if (value == 0)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10e      	bne.n	8001a50 <Judger+0x2c>
    {
    	sprintf(str , "Sin signal.\n");
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	4921      	ldr	r1, [pc, #132]	@ (8001abc <Judger+0x98>)
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f00c fb6f 	bl	800e11c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 12   ,HAL_MAX_DELAY);
 8001a3e:	f107 0108 	add.w	r1, r7, #8
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a46:	220c      	movs	r2, #12
 8001a48:	481d      	ldr	r0, [pc, #116]	@ (8001ac0 <Judger+0x9c>)
 8001a4a:	f00a fd59 	bl	800c500 <HAL_UART_Transmit>
    else 
    {
    	sprintf(str , "No analog moderated signal.\n");
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
    }
}
 8001a4e:	e031      	b.n	8001ab4 <Judger+0x90>
    else if (value == 1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d10e      	bne.n	8001a74 <Judger+0x50>
    	sprintf(str , "AM signal.\n");
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	491a      	ldr	r1, [pc, #104]	@ (8001ac4 <Judger+0xa0>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f00c fb5d 	bl	800e11c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 11   ,HAL_MAX_DELAY);
 8001a62:	f107 0108 	add.w	r1, r7, #8
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a6a:	220b      	movs	r2, #11
 8001a6c:	4814      	ldr	r0, [pc, #80]	@ (8001ac0 <Judger+0x9c>)
 8001a6e:	f00a fd47 	bl	800c500 <HAL_UART_Transmit>
}
 8001a72:	e01f      	b.n	8001ab4 <Judger+0x90>
    else if (value == 2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d10e      	bne.n	8001a98 <Judger+0x74>
    	sprintf(str , "FM signal.\n");
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	4912      	ldr	r1, [pc, #72]	@ (8001ac8 <Judger+0xa4>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00c fb4b 	bl	800e11c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 11   ,HAL_MAX_DELAY);
 8001a86:	f107 0108 	add.w	r1, r7, #8
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a8e:	220b      	movs	r2, #11
 8001a90:	480b      	ldr	r0, [pc, #44]	@ (8001ac0 <Judger+0x9c>)
 8001a92:	f00a fd35 	bl	800c500 <HAL_UART_Transmit>
}
 8001a96:	e00d      	b.n	8001ab4 <Judger+0x90>
    	sprintf(str , "No analog moderated signal.\n");
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	490b      	ldr	r1, [pc, #44]	@ (8001acc <Judger+0xa8>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f00c fb3c 	bl	800e11c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001aa4:	f107 0108 	add.w	r1, r7, #8
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aac:	221c      	movs	r2, #28
 8001aae:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <Judger+0x9c>)
 8001ab0:	f00a fd26 	bl	800c500 <HAL_UART_Transmit>
}
 8001ab4:	bf00      	nop
 8001ab6:	37d0      	adds	r7, #208	@ 0xd0
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08013efc 	.word	0x08013efc
 8001ac0:	2401493c 	.word	0x2401493c
 8001ac4:	08013f0c 	.word	0x08013f0c
 8001ac8:	08013f18 	.word	0x08013f18
 8001acc:	08013f24 	.word	0x08013f24

08001ad0 <adc_init>:
__IO uint8_t AdcConvEnd = 0;

double v[FO_LENGTH];

void adc_init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ad8:	220b      	movs	r2, #11
 8001ada:	4920      	ldr	r1, [pc, #128]	@ (8001b5c <adc_init+0x8c>)
 8001adc:	4820      	ldr	r0, [pc, #128]	@ (8001b60 <adc_init+0x90>)
 8001ade:	f00a fd0f 	bl	800c500 <HAL_UART_Transmit>
	MX_ADC1_Init();
 8001ae2:	f7ff f9cd 	bl	8000e80 <MX_ADC1_Init>
	HAL_Delay(1);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f000 fe7e 	bl	80027e8 <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8001aec:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001af0:	2100      	movs	r1, #0
 8001af2:	481c      	ldr	r0, [pc, #112]	@ (8001b64 <adc_init+0x94>)
 8001af4:	f002 fbca 	bl	800428c <HAL_ADCEx_Calibration_Start>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d008      	beq.n	8001b10 <adc_init+0x40>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b02:	222f      	movs	r2, #47	@ 0x2f
 8001b04:	4918      	ldr	r1, [pc, #96]	@ (8001b68 <adc_init+0x98>)
 8001b06:	4816      	ldr	r0, [pc, #88]	@ (8001b60 <adc_init+0x90>)
 8001b08:	f00a fcfa 	bl	800c500 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001b0c:	f000 fa76 	bl	8001ffc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data, FO_LENGTH) != HAL_OK)
 8001b10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b14:	4915      	ldr	r1, [pc, #84]	@ (8001b6c <adc_init+0x9c>)
 8001b16:	4813      	ldr	r0, [pc, #76]	@ (8001b64 <adc_init+0x94>)
 8001b18:	f001 fbf0 	bl	80032fc <HAL_ADC_Start_DMA>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d008      	beq.n	8001b34 <adc_init+0x64>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b26:	2225      	movs	r2, #37	@ 0x25
 8001b28:	4911      	ldr	r1, [pc, #68]	@ (8001b70 <adc_init+0xa0>)
 8001b2a:	480d      	ldr	r0, [pc, #52]	@ (8001b60 <adc_init+0x90>)
 8001b2c:	f00a fce8 	bl	800c500 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001b30:	f000 fa64 	bl	8001ffc <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8001b34:	480f      	ldr	r0, [pc, #60]	@ (8001b74 <adc_init+0xa4>)
 8001b36:	f00a f93d 	bl	800bdb4 <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 8001b3a:	bf00      	nop
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <adc_init+0xa8>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0fa      	beq.n	8001b3c <adc_init+0x6c>
	AdcConvEnd = 0;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <adc_init+0xa8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 8001b4c:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <adc_init+0x94>)
 8001b4e:	f001 fa55 	bl	8002ffc <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 8001b52:	4808      	ldr	r0, [pc, #32]	@ (8001b74 <adc_init+0xa4>)
 8001b54:	f00a f99e 	bl	800be94 <HAL_TIM_Base_Stop>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	08013f44 	.word	0x08013f44
 8001b60:	2401493c 	.word	0x2401493c
 8001b64:	240046dc 	.word	0x240046dc
 8001b68:	08013f50 	.word	0x08013f50
 8001b6c:	240006c0 	.word	0x240006c0
 8001b70:	08013f80 	.word	0x08013f80
 8001b74:	240148f0 	.word	0x240148f0
 8001b78:	24004898 	.word	0x24004898
 8001b7c:	00000000 	.word	0x00000000

08001b80 <ADC_Get>:


void ADC_Get(double arr[])
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	adc_init();
 8001b88:	f7ff ffa2 	bl	8001ad0 <adc_init>
	double voltage;
//	char str[50];

	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	82fb      	strh	r3, [r7, #22]
 8001b90:	e020      	b.n	8001bd4 <ADC_Get+0x54>
		voltage = ((double)adc1_data[temp]*3.3)/65535 *3;
 8001b92:	8afb      	ldrh	r3, [r7, #22]
 8001b94:	4a18      	ldr	r2, [pc, #96]	@ (8001bf8 <ADC_Get+0x78>)
 8001b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ba2:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8001be8 <ADC_Get+0x68>
 8001ba6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001baa:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001bf0 <ADC_Get+0x70>
 8001bae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001bb2:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 8001bb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bba:	ed87 7b02 	vstr	d7, [r7, #8]

		arr[temp] = voltage;
 8001bbe:	8afb      	ldrh	r3, [r7, #22]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	18d1      	adds	r1, r2, r3
 8001bc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bca:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 8001bce:	8afb      	ldrh	r3, [r7, #22]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	82fb      	strh	r3, [r7, #22]
 8001bd4:	8afb      	ldrh	r3, [r7, #22]
 8001bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bda:	d3da      	bcc.n	8001b92 <ADC_Get+0x12>
//		sprintf(str , "%.5f" , v[temp]);
//		HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
//		HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
	}
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	66666666 	.word	0x66666666
 8001bec:	400a6666 	.word	0x400a6666
 8001bf0:	00000000 	.word	0x00000000
 8001bf4:	40efffe0 	.word	0x40efffe0
 8001bf8:	240006c0 	.word	0x240006c0

08001bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b094      	sub	sp, #80	@ 0x50
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001c02:	f000 f99d 	bl	8001f40 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001c06:	4b66      	ldr	r3, [pc, #408]	@ (8001da0 <main+0x1a4>)
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d11b      	bne.n	8001c4a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c12:	f3bf 8f4f 	dsb	sy
}
 8001c16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c18:	f3bf 8f6f 	isb	sy
}
 8001c1c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001c1e:	4b60      	ldr	r3, [pc, #384]	@ (8001da0 <main+0x1a4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001c26:	f3bf 8f4f 	dsb	sy
}
 8001c2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c2c:	f3bf 8f6f 	isb	sy
}
 8001c30:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001c32:	4b5b      	ldr	r3, [pc, #364]	@ (8001da0 <main+0x1a4>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	4a5a      	ldr	r2, [pc, #360]	@ (8001da0 <main+0x1a4>)
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c3c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c3e:	f3bf 8f4f 	dsb	sy
}
 8001c42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c44:	f3bf 8f6f 	isb	sy
}
 8001c48:	e000      	b.n	8001c4c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001c4a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001c4c:	4b54      	ldr	r3, [pc, #336]	@ (8001da0 <main+0x1a4>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d138      	bne.n	8001cca <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001c58:	4b51      	ldr	r3, [pc, #324]	@ (8001da0 <main+0x1a4>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c60:	f3bf 8f4f 	dsb	sy
}
 8001c64:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c66:	4b4e      	ldr	r3, [pc, #312]	@ (8001da0 <main+0x1a4>)
 8001c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c6c:	643b      	str	r3, [r7, #64]	@ 0x40

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c70:	0b5b      	lsrs	r3, r3, #13
 8001c72:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c7a:	08db      	lsrs	r3, r3, #3
 8001c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c80:	63bb      	str	r3, [r7, #56]	@ 0x38
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001c8a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001c8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c8e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c90:	4943      	ldr	r1, [pc, #268]	@ (8001da0 <main+0x1a4>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c9a:	1e5a      	subs	r2, r3, #1
 8001c9c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1ef      	bne.n	8001c82 <main+0x86>
    } while(sets-- != 0U);
 8001ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ca4:	1e5a      	subs	r2, r3, #1
 8001ca6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e5      	bne.n	8001c78 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cac:	f3bf 8f4f 	dsb	sy
}
 8001cb0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001da0 <main+0x1a4>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	4a3a      	ldr	r2, [pc, #232]	@ (8001da0 <main+0x1a4>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cbc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cbe:	f3bf 8f4f 	dsb	sy
}
 8001cc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cc4:	f3bf 8f6f 	isb	sy
}
 8001cc8:	e000      	b.n	8001ccc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001cca:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ccc:	f000 fcfa 	bl	80026c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd0:	f000 f870 	bl	8001db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd4:	f7ff fb14 	bl	8001300 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cd8:	f7ff faea 	bl	80012b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001cdc:	f7ff fb92 	bl	8001404 <MX_I2C1_Init>
  MX_TIM15_Init();
 8001ce0:	f000 fb7e 	bl	80023e0 <MX_TIM15_Init>
  MX_DAC1_Init();
 8001ce4:	f7ff fa38 	bl	8001158 <MX_DAC1_Init>
  MX_TIM7_Init();
 8001ce8:	f000 fb44 	bl	8002374 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8001cec:	f000 fc02 	bl	80024f4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001cf0:	f7ff f8c6 	bl	8000e80 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  char str[50];
  ADC_Get(v);
 8001cf4:	482b      	ldr	r0, [pc, #172]	@ (8001da4 <main+0x1a8>)
 8001cf6:	f7ff ff43 	bl	8001b80 <ADC_Get>
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cfe:	e01a      	b.n	8001d36 <main+0x13a>
  {
	  sprintf(str , "%.5f" , v[i]);
 8001d00:	4a28      	ldr	r2, [pc, #160]	@ (8001da4 <main+0x1a8>)
 8001d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	1d38      	adds	r0, r7, #4
 8001d0e:	4926      	ldr	r1, [pc, #152]	@ (8001da8 <main+0x1ac>)
 8001d10:	f00c fa04 	bl	800e11c <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 8001d14:	1d39      	adds	r1, r7, #4
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	4823      	ldr	r0, [pc, #140]	@ (8001dac <main+0x1b0>)
 8001d1e:	f00a fbef 	bl	800c500 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d26:	2201      	movs	r2, #1
 8001d28:	4921      	ldr	r1, [pc, #132]	@ (8001db0 <main+0x1b4>)
 8001d2a:	4820      	ldr	r0, [pc, #128]	@ (8001dac <main+0x1b0>)
 8001d2c:	f00a fbe8 	bl	800c500 <HAL_UART_Transmit>
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 8001d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d32:	3301      	adds	r3, #1
 8001d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d3c:	dbe0      	blt.n	8001d00 <main+0x104>
  }
  FFT_Mag_sqrt(FO_LENGTH, v);
 8001d3e:	4919      	ldr	r1, [pc, #100]	@ (8001da4 <main+0x1a8>)
 8001d40:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d44:	f7ff f868 	bl	8000e18 <FFT_Mag_sqrt>
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d4c:	e01a      	b.n	8001d84 <main+0x188>
  {
	  sprintf(str , "%.5f" , v[i]);
 8001d4e:	4a15      	ldr	r2, [pc, #84]	@ (8001da4 <main+0x1a8>)
 8001d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	1d38      	adds	r0, r7, #4
 8001d5c:	4912      	ldr	r1, [pc, #72]	@ (8001da8 <main+0x1ac>)
 8001d5e:	f00c f9dd 	bl	800e11c <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 8001d62:	1d39      	adds	r1, r7, #4
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d68:	2207      	movs	r2, #7
 8001d6a:	4810      	ldr	r0, [pc, #64]	@ (8001dac <main+0x1b0>)
 8001d6c:	f00a fbc8 	bl	800c500 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d74:	2201      	movs	r2, #1
 8001d76:	490e      	ldr	r1, [pc, #56]	@ (8001db0 <main+0x1b4>)
 8001d78:	480c      	ldr	r0, [pc, #48]	@ (8001dac <main+0x1b0>)
 8001d7a:	f00a fbc1 	bl	800c500 <HAL_UART_Transmit>
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 8001d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d80:	3301      	adds	r3, #1
 8001d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d8a:	dbe0      	blt.n	8001d4e <main+0x152>
  }
  int value = Analog_Judge(v);
 8001d8c:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <main+0x1a8>)
 8001d8e:	f7ff fbe3 	bl	8001558 <Analog_Judge>
 8001d92:	6478      	str	r0, [r7, #68]	@ 0x44
  Judger(value);
 8001d94:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d96:	f7ff fe45 	bl	8001a24 <Judger>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d9a:	bf00      	nop
 8001d9c:	e7fd      	b.n	8001d9a <main+0x19e>
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00
 8001da4:	240048a0 	.word	0x240048a0
 8001da8:	08013fa8 	.word	0x08013fa8
 8001dac:	2401493c 	.word	0x2401493c
 8001db0:	08013fb0 	.word	0x08013fb0

08001db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b09e      	sub	sp, #120	@ 0x78
 8001db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dbe:	224c      	movs	r2, #76	@ 0x4c
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f00c fa0d 	bl	800e1e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	2220      	movs	r2, #32
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f00c fa06 	bl	800e1e2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001dd6:	2002      	movs	r0, #2
 8001dd8:	f006 fa74 	bl	80082c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	4b4c      	ldr	r3, [pc, #304]	@ (8001f14 <SystemClock_Config+0x160>)
 8001de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de4:	4a4b      	ldr	r2, [pc, #300]	@ (8001f14 <SystemClock_Config+0x160>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001dec:	4b49      	ldr	r3, [pc, #292]	@ (8001f14 <SystemClock_Config+0x160>)
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b48      	ldr	r3, [pc, #288]	@ (8001f18 <SystemClock_Config+0x164>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	4a47      	ldr	r2, [pc, #284]	@ (8001f18 <SystemClock_Config+0x164>)
 8001dfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e00:	6193      	str	r3, [r2, #24]
 8001e02:	4b45      	ldr	r3, [pc, #276]	@ (8001f18 <SystemClock_Config+0x164>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e0e:	bf00      	nop
 8001e10:	4b41      	ldr	r3, [pc, #260]	@ (8001f18 <SystemClock_Config+0x164>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e1c:	d1f8      	bne.n	8001e10 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f1c <SystemClock_Config+0x168>)
 8001e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e24:	4a3d      	ldr	r2, [pc, #244]	@ (8001f1c <SystemClock_Config+0x168>)
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f1c <SystemClock_Config+0x168>)
 8001e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	4b35      	ldr	r3, [pc, #212]	@ (8001f18 <SystemClock_Config+0x164>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a34      	ldr	r2, [pc, #208]	@ (8001f18 <SystemClock_Config+0x164>)
 8001e46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b32      	ldr	r3, [pc, #200]	@ (8001f18 <SystemClock_Config+0x164>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4b2f      	ldr	r3, [pc, #188]	@ (8001f14 <SystemClock_Config+0x160>)
 8001e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8001f14 <SystemClock_Config+0x160>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001e62:	4b2c      	ldr	r3, [pc, #176]	@ (8001f14 <SystemClock_Config+0x160>)
 8001e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e6e:	bf00      	nop
 8001e70:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <SystemClock_Config+0x164>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e7c:	d1f8      	bne.n	8001e70 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001e7e:	4b27      	ldr	r3, [pc, #156]	@ (8001f1c <SystemClock_Config+0x168>)
 8001e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	4a25      	ldr	r2, [pc, #148]	@ (8001f1c <SystemClock_Config+0x168>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001ea0:	2305      	movs	r3, #5
 8001ea2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ea4:	23c0      	movs	r3, #192	@ 0xc0
 8001ea6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f006 fa37 	bl	8008338 <HAL_RCC_OscConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001ed0:	f000 f894 	bl	8001ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed4:	233f      	movs	r3, #63	@ 0x3f
 8001ed6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001ee4:	2340      	movs	r3, #64	@ 0x40
 8001ee6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ee8:	2340      	movs	r3, #64	@ 0x40
 8001eea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001eec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001ef2:	2340      	movs	r3, #64	@ 0x40
 8001ef4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	2104      	movs	r1, #4
 8001efc:	4618      	mov	r0, r3
 8001efe:	f006 fe77 	bl	8008bf0 <HAL_RCC_ClockConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8001f08:	f000 f878 	bl	8001ffc <Error_Handler>
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3778      	adds	r7, #120	@ 0x78
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	58000400 	.word	0x58000400
 8001f18:	58024800 	.word	0x58024800
 8001f1c:	58024400 	.word	0x58024400

08001f20 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
   if(hadc->Instance == ADC1)
	{
      //SCB_InvalidateDCache_by_Addr((uint32_t *) &adc1_data[0], ADC1_BUFFER_SIZE);
   }
	 AdcConvEnd = 1;
 8001f28:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <HAL_ADC_ConvCpltCallback+0x1c>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	24004898 	.word	0x24004898

08001f40 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001f46:	463b      	mov	r3, r7
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001f52:	f002 fbed 	bl	8004730 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f56:	2301      	movs	r3, #1
 8001f58:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001f5e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001f62:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001f64:	2312      	movs	r3, #18
 8001f66:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001f70:	2303      	movs	r3, #3
 8001f72:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f84:	463b      	mov	r3, r7
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 fc0a 	bl	80047a0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001f90:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001f94:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8001f96:	2310      	movs	r3, #16
 8001f98:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 fbfb 	bl	80047a0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001faa:	2302      	movs	r3, #2
 8001fac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <MPU_Config+0xb4>)
 8001fb0:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 fbf3 	bl	80047a0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <MPU_Config+0xb8>)
 8001fc0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001fc2:	230e      	movs	r3, #14
 8001fc4:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 fbe9 	bl	80047a0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8001fd2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8001fd6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001fd8:	230f      	movs	r3, #15
 8001fda:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fdc:	463b      	mov	r3, r7
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 fbde 	bl	80047a0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001fe4:	2004      	movs	r0, #4
 8001fe6:	f002 fbbb 	bl	8004760 <HAL_MPU_Enable>

}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	30020000 	.word	0x30020000
 8001ff8:	30040000 	.word	0x30040000

08001ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <Error_Handler+0x8>

08002008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <HAL_MspInit+0x30>)
 8002010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002014:	4a08      	ldr	r2, [pc, #32]	@ (8002038 <HAL_MspInit+0x30>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_MspInit+0x30>)
 8002020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	58024400 	.word	0x58024400

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <NMI_Handler+0x4>

08002044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <HardFault_Handler+0x4>

0800204c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <MemManage_Handler+0x4>

08002054 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <UsageFault_Handler+0x4>

08002064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002092:	f000 fb89 	bl	80027a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020a0:	4802      	ldr	r0, [pc, #8]	@ (80020ac <DMA1_Stream0_IRQHandler+0x10>)
 80020a2:	f004 fa01 	bl	80064a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	24004740 	.word	0x24004740

080020b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80020b4:	4802      	ldr	r0, [pc, #8]	@ (80020c0 <DMA1_Stream1_IRQHandler+0x10>)
 80020b6:	f004 f9f7 	bl	80064a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	240047cc 	.word	0x240047cc

080020c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020c8:	4802      	ldr	r0, [pc, #8]	@ (80020d4 <USART1_IRQHandler+0x10>)
 80020ca:	f00a faa7 	bl	800c61c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2401493c 	.word	0x2401493c

080020d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return 1;
 80020dc:	2301      	movs	r3, #1
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_kill>:

int _kill(int pid, int sig)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020f2:	f00c f8c5 	bl	800e280 <__errno>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2216      	movs	r2, #22
 80020fa:	601a      	str	r2, [r3, #0]
  return -1;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_exit>:

void _exit (int status)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002110:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ffe7 	bl	80020e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800211a:	bf00      	nop
 800211c:	e7fd      	b.n	800211a <_exit+0x12>

0800211e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e00a      	b.n	8002146 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002130:	f3af 8000 	nop.w
 8002134:	4601      	mov	r1, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	60ba      	str	r2, [r7, #8]
 800213c:	b2ca      	uxtb	r2, r1
 800213e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	dbf0      	blt.n	8002130 <_read+0x12>
  }

  return len;
 800214e:	687b      	ldr	r3, [r7, #4]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e009      	b.n	800217e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	60ba      	str	r2, [r7, #8]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3301      	adds	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	dbf1      	blt.n	800216a <_write+0x12>
  }
  return len;
 8002186:	687b      	ldr	r3, [r7, #4]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_close>:

int _close(int file)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021b8:	605a      	str	r2, [r3, #4]
  return 0;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_isatty>:

int _isatty(int file)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021d0:	2301      	movs	r3, #1
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	@ (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	@ (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	@ (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f00c f82a 	bl	800e280 <__errno>
 800222c:	4603      	mov	r3, r0
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	@ (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	@ (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	@ (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	24080000 	.word	0x24080000
 8002258:	00001000 	.word	0x00001000
 800225c:	240148a0 	.word	0x240148a0
 8002260:	24014ce0 	.word	0x24014ce0

08002264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002268:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <SystemInit+0xe4>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226e:	4a36      	ldr	r2, [pc, #216]	@ (8002348 <SystemInit+0xe4>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002278:	4b34      	ldr	r3, [pc, #208]	@ (800234c <SystemInit+0xe8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	2b06      	cmp	r3, #6
 8002282:	d807      	bhi.n	8002294 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002284:	4b31      	ldr	r3, [pc, #196]	@ (800234c <SystemInit+0xe8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 030f 	bic.w	r3, r3, #15
 800228c:	4a2f      	ldr	r2, [pc, #188]	@ (800234c <SystemInit+0xe8>)
 800228e:	f043 0307 	orr.w	r3, r3, #7
 8002292:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002294:	4b2e      	ldr	r3, [pc, #184]	@ (8002350 <SystemInit+0xec>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <SystemInit+0xec>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <SystemInit+0xec>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80022a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002350 <SystemInit+0xec>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4929      	ldr	r1, [pc, #164]	@ (8002350 <SystemInit+0xec>)
 80022ac:	4b29      	ldr	r3, [pc, #164]	@ (8002354 <SystemInit+0xf0>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022b2:	4b26      	ldr	r3, [pc, #152]	@ (800234c <SystemInit+0xe8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022be:	4b23      	ldr	r3, [pc, #140]	@ (800234c <SystemInit+0xe8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 030f 	bic.w	r3, r3, #15
 80022c6:	4a21      	ldr	r2, [pc, #132]	@ (800234c <SystemInit+0xe8>)
 80022c8:	f043 0307 	orr.w	r3, r3, #7
 80022cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80022ce:	4b20      	ldr	r3, [pc, #128]	@ (8002350 <SystemInit+0xec>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80022d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002350 <SystemInit+0xec>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80022da:	4b1d      	ldr	r3, [pc, #116]	@ (8002350 <SystemInit+0xec>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002350 <SystemInit+0xec>)
 80022e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002358 <SystemInit+0xf4>)
 80022e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80022e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002350 <SystemInit+0xec>)
 80022e8:	4a1c      	ldr	r2, [pc, #112]	@ (800235c <SystemInit+0xf8>)
 80022ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022ec:	4b18      	ldr	r3, [pc, #96]	@ (8002350 <SystemInit+0xec>)
 80022ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002360 <SystemInit+0xfc>)
 80022f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022f2:	4b17      	ldr	r3, [pc, #92]	@ (8002350 <SystemInit+0xec>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022f8:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <SystemInit+0xec>)
 80022fa:	4a19      	ldr	r2, [pc, #100]	@ (8002360 <SystemInit+0xfc>)
 80022fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022fe:	4b14      	ldr	r3, [pc, #80]	@ (8002350 <SystemInit+0xec>)
 8002300:	2200      	movs	r2, #0
 8002302:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002304:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <SystemInit+0xec>)
 8002306:	4a16      	ldr	r2, [pc, #88]	@ (8002360 <SystemInit+0xfc>)
 8002308:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800230a:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <SystemInit+0xec>)
 800230c:	2200      	movs	r2, #0
 800230e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002310:	4b0f      	ldr	r3, [pc, #60]	@ (8002350 <SystemInit+0xec>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0e      	ldr	r2, [pc, #56]	@ (8002350 <SystemInit+0xec>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800231a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800231c:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <SystemInit+0xec>)
 800231e:	2200      	movs	r2, #0
 8002320:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002322:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <SystemInit+0x100>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <SystemInit+0x104>)
 8002328:	4013      	ands	r3, r2
 800232a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800232e:	d202      	bcs.n	8002336 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002330:	4b0e      	ldr	r3, [pc, #56]	@ (800236c <SystemInit+0x108>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002336:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <SystemInit+0x10c>)
 8002338:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800233c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00
 800234c:	52002000 	.word	0x52002000
 8002350:	58024400 	.word	0x58024400
 8002354:	eaf6ed7f 	.word	0xeaf6ed7f
 8002358:	02020200 	.word	0x02020200
 800235c:	01ff0000 	.word	0x01ff0000
 8002360:	01010280 	.word	0x01010280
 8002364:	5c001000 	.word	0x5c001000
 8002368:	ffff0000 	.word	0xffff0000
 800236c:	51008108 	.word	0x51008108
 8002370:	52004000 	.word	0x52004000

08002374 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <MX_TIM7_Init+0x64>)
 8002386:	4a15      	ldr	r2, [pc, #84]	@ (80023dc <MX_TIM7_Init+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 800238a:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <MX_TIM7_Init+0x64>)
 800238c:	22ef      	movs	r2, #239	@ 0xef
 800238e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <MX_TIM7_Init+0x64>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002396:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <MX_TIM7_Init+0x64>)
 8002398:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800239c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239e:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <MX_TIM7_Init+0x64>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80023a4:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <MX_TIM7_Init+0x64>)
 80023a6:	f009 fcad 	bl	800bd04 <HAL_TIM_Base_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80023b0:	f7ff fe24 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b4:	2300      	movs	r3, #0
 80023b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <MX_TIM7_Init+0x64>)
 80023c2:	f009 ffbf 	bl	800c344 <HAL_TIMEx_MasterConfigSynchronization>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80023cc:	f7ff fe16 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	240148a4 	.word	0x240148a4
 80023dc:	40001400 	.word	0x40001400

080023e0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80023fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <MX_TIM15_Init+0x98>)
 8002400:	4a1e      	ldr	r2, [pc, #120]	@ (800247c <MX_TIM15_Init+0x9c>)
 8002402:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2- 1;
 8002404:	4b1c      	ldr	r3, [pc, #112]	@ (8002478 <MX_TIM15_Init+0x98>)
 8002406:	2201      	movs	r2, #1
 8002408:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240a:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <MX_TIM15_Init+0x98>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2-1;
 8002410:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <MX_TIM15_Init+0x98>)
 8002412:	2201      	movs	r2, #1
 8002414:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	4b18      	ldr	r3, [pc, #96]	@ (8002478 <MX_TIM15_Init+0x98>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800241c:	4b16      	ldr	r3, [pc, #88]	@ (8002478 <MX_TIM15_Init+0x98>)
 800241e:	2200      	movs	r2, #0
 8002420:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002422:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <MX_TIM15_Init+0x98>)
 8002424:	2280      	movs	r2, #128	@ 0x80
 8002426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002428:	4813      	ldr	r0, [pc, #76]	@ (8002478 <MX_TIM15_Init+0x98>)
 800242a:	f009 fc6b 	bl	800bd04 <HAL_TIM_Base_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8002434:	f7ff fde2 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800243c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4619      	mov	r1, r3
 8002444:	480c      	ldr	r0, [pc, #48]	@ (8002478 <MX_TIM15_Init+0x98>)
 8002446:	f009 fd4d 	bl	800bee4 <HAL_TIM_ConfigClockSource>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8002450:	f7ff fdd4 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002454:	2320      	movs	r3, #32
 8002456:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	4619      	mov	r1, r3
 8002460:	4805      	ldr	r0, [pc, #20]	@ (8002478 <MX_TIM15_Init+0x98>)
 8002462:	f009 ff6f 	bl	800c344 <HAL_TIMEx_MasterConfigSynchronization>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 800246c:	f7ff fdc6 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	3720      	adds	r7, #32
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	240148f0 	.word	0x240148f0
 800247c:	40014000 	.word	0x40014000

08002480 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a16      	ldr	r2, [pc, #88]	@ (80024e8 <HAL_TIM_Base_MspInit+0x68>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d10f      	bne.n	80024b2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002492:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <HAL_TIM_Base_MspInit+0x6c>)
 8002494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002498:	4a14      	ldr	r2, [pc, #80]	@ (80024ec <HAL_TIM_Base_MspInit+0x6c>)
 800249a:	f043 0320 	orr.w	r3, r3, #32
 800249e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024a2:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <HAL_TIM_Base_MspInit+0x6c>)
 80024a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80024b0:	e013      	b.n	80024da <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM15)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a0e      	ldr	r2, [pc, #56]	@ (80024f0 <HAL_TIM_Base_MspInit+0x70>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d10e      	bne.n	80024da <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80024bc:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <HAL_TIM_Base_MspInit+0x6c>)
 80024be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024c2:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <HAL_TIM_Base_MspInit+0x6c>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024cc:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <HAL_TIM_Base_MspInit+0x6c>)
 80024ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40001400 	.word	0x40001400
 80024ec:	58024400 	.word	0x58024400
 80024f0:	40014000 	.word	0x40014000

080024f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024f8:	4b22      	ldr	r3, [pc, #136]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 80024fa:	4a23      	ldr	r2, [pc, #140]	@ (8002588 <MX_USART1_UART_Init+0x94>)
 80024fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024fe:	4b21      	ldr	r3, [pc, #132]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 8002500:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002506:	4b1f      	ldr	r3, [pc, #124]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800250c:	4b1d      	ldr	r3, [pc, #116]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002512:	4b1c      	ldr	r3, [pc, #112]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002518:	4b1a      	ldr	r3, [pc, #104]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 800251a:	220c      	movs	r2, #12
 800251c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251e:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002524:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800252a:	4b16      	ldr	r3, [pc, #88]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002530:	4b14      	ldr	r3, [pc, #80]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 8002532:	2200      	movs	r2, #0
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002536:	4b13      	ldr	r3, [pc, #76]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 8002538:	2200      	movs	r2, #0
 800253a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800253c:	4811      	ldr	r0, [pc, #68]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 800253e:	f009 ff8f 	bl	800c460 <HAL_UART_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002548:	f7ff fd58 	bl	8001ffc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800254c:	2100      	movs	r1, #0
 800254e:	480d      	ldr	r0, [pc, #52]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 8002550:	f00b fc58 	bl	800de04 <HAL_UARTEx_SetTxFifoThreshold>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800255a:	f7ff fd4f 	bl	8001ffc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800255e:	2100      	movs	r1, #0
 8002560:	4808      	ldr	r0, [pc, #32]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 8002562:	f00b fc8d 	bl	800de80 <HAL_UARTEx_SetRxFifoThreshold>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800256c:	f7ff fd46 	bl	8001ffc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002570:	4804      	ldr	r0, [pc, #16]	@ (8002584 <MX_USART1_UART_Init+0x90>)
 8002572:	f00b fc0e 	bl	800dd92 <HAL_UARTEx_DisableFifoMode>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800257c:	f7ff fd3e 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2401493c 	.word	0x2401493c
 8002588:	40011000 	.word	0x40011000

0800258c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b0ba      	sub	sp, #232	@ 0xe8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025a4:	f107 0310 	add.w	r3, r7, #16
 80025a8:	22c0      	movs	r2, #192	@ 0xc0
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00b fe18 	bl	800e1e2 <memset>
  if(uartHandle->Instance==USART1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002664 <HAL_UART_MspInit+0xd8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d14e      	bne.n	800265a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025bc:	f04f 0201 	mov.w	r2, #1
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ce:	f107 0310 	add.w	r3, r7, #16
 80025d2:	4618      	mov	r0, r3
 80025d4:	f006 fe98 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80025de:	f7ff fd0d 	bl	8001ffc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025e2:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <HAL_UART_MspInit+0xdc>)
 80025e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002668 <HAL_UART_MspInit+0xdc>)
 80025ea:	f043 0310 	orr.w	r3, r3, #16
 80025ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <HAL_UART_MspInit+0xdc>)
 80025f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002600:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <HAL_UART_MspInit+0xdc>)
 8002602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002606:	4a18      	ldr	r2, [pc, #96]	@ (8002668 <HAL_UART_MspInit+0xdc>)
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002610:	4b15      	ldr	r3, [pc, #84]	@ (8002668 <HAL_UART_MspInit+0xdc>)
 8002612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800261e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002622:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002638:	2304      	movs	r3, #4
 800263a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002642:	4619      	mov	r1, r3
 8002644:	4809      	ldr	r0, [pc, #36]	@ (800266c <HAL_UART_MspInit+0xe0>)
 8002646:	f005 fa41 	bl	8007acc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	2025      	movs	r0, #37	@ 0x25
 8002650:	f002 f839 	bl	80046c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002654:	2025      	movs	r0, #37	@ 0x25
 8002656:	f002 f850 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800265a:	bf00      	nop
 800265c:	37e8      	adds	r7, #232	@ 0xe8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40011000 	.word	0x40011000
 8002668:	58024400 	.word	0x58024400
 800266c:	58020400 	.word	0x58020400

08002670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002670:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002674:	f7ff fdf6 	bl	8002264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002678:	480c      	ldr	r0, [pc, #48]	@ (80026ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800267a:	490d      	ldr	r1, [pc, #52]	@ (80026b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800267c:	4a0d      	ldr	r2, [pc, #52]	@ (80026b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002680:	e002      	b.n	8002688 <LoopCopyDataInit>

08002682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002686:	3304      	adds	r3, #4

08002688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800268c:	d3f9      	bcc.n	8002682 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268e:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002690:	4c0a      	ldr	r4, [pc, #40]	@ (80026bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002694:	e001      	b.n	800269a <LoopFillZerobss>

08002696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002698:	3204      	adds	r2, #4

0800269a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800269c:	d3fb      	bcc.n	8002696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800269e:	f00b fdf5 	bl	800e28c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026a2:	f7ff faab 	bl	8001bfc <main>
  bx  lr
 80026a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026b0:	240006c0 	.word	0x240006c0
  ldr r2, =_sidata
 80026b4:	080166b4 	.word	0x080166b4
  ldr r2, =_sbss
 80026b8:	240046c0 	.word	0x240046c0
  ldr r4, =_ebss
 80026bc:	24014ce0 	.word	0x24014ce0

080026c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c0:	e7fe      	b.n	80026c0 <ADC3_IRQHandler>
	...

080026c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ca:	2003      	movs	r0, #3
 80026cc:	f001 fff0 	bl	80046b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026d0:	f006 fc44 	bl	8008f5c <HAL_RCC_GetSysClockFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b15      	ldr	r3, [pc, #84]	@ (800272c <HAL_Init+0x68>)
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	4913      	ldr	r1, [pc, #76]	@ (8002730 <HAL_Init+0x6c>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026ee:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <HAL_Init+0x68>)
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002730 <HAL_Init+0x6c>)
 80026f8:	5cd3      	ldrb	r3, [r2, r3]
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
 8002704:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <HAL_Init+0x70>)
 8002706:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002708:	4a0b      	ldr	r2, [pc, #44]	@ (8002738 <HAL_Init+0x74>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800270e:	200f      	movs	r0, #15
 8002710:	f000 f814 	bl	800273c <HAL_InitTick>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e002      	b.n	8002724 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800271e:	f7ff fc73 	bl	8002008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	58024400 	.word	0x58024400
 8002730:	08013fb4 	.word	0x08013fb4
 8002734:	24000004 	.word	0x24000004
 8002738:	24000000 	.word	0x24000000

0800273c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002744:	4b15      	ldr	r3, [pc, #84]	@ (800279c <HAL_InitTick+0x60>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e021      	b.n	8002794 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <HAL_InitTick+0x64>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_InitTick+0x60>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800275e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	4618      	mov	r0, r3
 8002768:	f001 ffd5 	bl	8004716 <HAL_SYSTICK_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e00e      	b.n	8002794 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b0f      	cmp	r3, #15
 800277a:	d80a      	bhi.n	8002792 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800277c:	2200      	movs	r2, #0
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002784:	f001 ff9f 	bl	80046c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002788:	4a06      	ldr	r2, [pc, #24]	@ (80027a4 <HAL_InitTick+0x68>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e000      	b.n	8002794 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	2400000c 	.word	0x2400000c
 80027a0:	24000000 	.word	0x24000000
 80027a4:	24000008 	.word	0x24000008

080027a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027ac:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_IncTick+0x20>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_IncTick+0x24>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <HAL_IncTick+0x24>)
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	2400000c 	.word	0x2400000c
 80027cc:	240149d0 	.word	0x240149d0

080027d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return uwTick;
 80027d4:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <HAL_GetTick+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	240149d0 	.word	0x240149d0

080027e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f0:	f7ff ffee 	bl	80027d0 <HAL_GetTick>
 80027f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002800:	d005      	beq.n	800280e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002802:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <HAL_Delay+0x44>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800280e:	bf00      	nop
 8002810:	f7ff ffde 	bl	80027d0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	429a      	cmp	r2, r3
 800281e:	d8f7      	bhi.n	8002810 <HAL_Delay+0x28>
  {
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2400000c 	.word	0x2400000c

08002830 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002834:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <HAL_GetREVID+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0c1b      	lsrs	r3, r3, #16
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	5c001000 	.word	0x5c001000

08002848 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	609a      	str	r2, [r3, #8]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	609a      	str	r2, [r3, #8]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3360      	adds	r3, #96	@ 0x60
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	430b      	orrs	r3, r1
 80028de:	431a      	orrs	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80028e4:	bf00      	nop
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	431a      	orrs	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	611a      	str	r2, [r3, #16]
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002922:	b480      	push	{r7}
 8002924:	b087      	sub	sp, #28
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3360      	adds	r3, #96	@ 0x60
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	431a      	orrs	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	601a      	str	r2, [r3, #0]
  }
}
 800294c:	bf00      	nop
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800297e:	b480      	push	{r7}
 8002980:	b087      	sub	sp, #28
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3330      	adds	r3, #48	@ 0x30
 800298e:	461a      	mov	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	4413      	add	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	211f      	movs	r1, #31
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	401a      	ands	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0e9b      	lsrs	r3, r3, #26
 80029b6:	f003 011f 	and.w	r1, r3, #31
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	431a      	orrs	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f023 0203 	bic.w	r2, r3, #3
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	0e5b      	lsrs	r3, r3, #25
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	4413      	add	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	0d1b      	lsrs	r3, r3, #20
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2107      	movs	r1, #7
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	401a      	ands	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	0d1b      	lsrs	r3, r3, #20
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	431a      	orrs	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	401a      	ands	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f003 0318 	and.w	r3, r3, #24
 8002a76:	4908      	ldr	r1, [pc, #32]	@ (8002a98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a78:	40d9      	lsrs	r1, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a82:	431a      	orrs	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	000fffff 	.word	0x000fffff

08002a9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6093      	str	r3, [r2, #8]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	5fffffc0 	.word	0x5fffffc0

08002adc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002af0:	d101      	bne.n	8002af6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	6fffffc0 	.word	0x6fffffc0

08002b2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b40:	d101      	bne.n	8002b46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <LL_ADC_Enable+0x24>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	f043 0201 	orr.w	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	7fffffc0 	.word	0x7fffffc0

08002b7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <LL_ADC_Disable+0x24>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	f043 0202 	orr.w	r2, r3, #2
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	7fffffc0 	.word	0x7fffffc0

08002ba4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <LL_ADC_IsEnabled+0x18>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <LL_ADC_IsEnabled+0x1a>
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d101      	bne.n	8002be2 <LL_ADC_IsDisableOngoing+0x18>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <LL_ADC_IsDisableOngoing+0x1a>
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <LL_ADC_REG_StartConversion+0x24>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	f043 0204 	orr.w	r2, r3, #4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	7fffffc0 	.word	0x7fffffc0

08002c18 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <LL_ADC_REG_StopConversion+0x24>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	f043 0210 	orr.w	r2, r3, #16
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	7fffffc0 	.word	0x7fffffc0

08002c40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d101      	bne.n	8002c58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <LL_ADC_INJ_StopConversion+0x24>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	f043 0220 	orr.w	r2, r3, #32
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	7fffffc0 	.word	0x7fffffc0

08002c90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d101      	bne.n	8002ca8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e18f      	b.n	8002ff2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7fe f947 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff feef 	bl	8002adc <LL_ADC_IsDeepPowerDownEnabled>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fed5 	bl	8002ab8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff0a 	bl	8002b2c <LL_ADC_IsInternalRegulatorEnabled>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d114      	bne.n	8002d48 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff feee 	bl	8002b04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d28:	4b87      	ldr	r3, [pc, #540]	@ (8002f48 <HAL_ADC_Init+0x290>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	4a87      	ldr	r2, [pc, #540]	@ (8002f4c <HAL_ADC_Init+0x294>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	3301      	adds	r3, #1
 8002d38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d3a:	e002      	b.n	8002d42 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f9      	bne.n	8002d3c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff feed 	bl	8002b2c <LL_ADC_IsInternalRegulatorEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5c:	f043 0210 	orr.w	r2, r3, #16
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	f043 0201 	orr.w	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff61 	bl	8002c40 <LL_ADC_REG_IsConversionOngoing>
 8002d7e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f040 8129 	bne.w	8002fe0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f040 8125 	bne.w	8002fe0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d9e:	f043 0202 	orr.w	r2, r3, #2
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fefa 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d136      	bne.n	8002e24 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a65      	ldr	r2, [pc, #404]	@ (8002f50 <HAL_ADC_Init+0x298>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_ADC_Init+0x112>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a63      	ldr	r2, [pc, #396]	@ (8002f54 <HAL_ADC_Init+0x29c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d10e      	bne.n	8002de8 <HAL_ADC_Init+0x130>
 8002dca:	4861      	ldr	r0, [pc, #388]	@ (8002f50 <HAL_ADC_Init+0x298>)
 8002dcc:	f7ff feea 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	4860      	ldr	r0, [pc, #384]	@ (8002f54 <HAL_ADC_Init+0x29c>)
 8002dd4:	f7ff fee6 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4323      	orrs	r3, r4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e008      	b.n	8002dfa <HAL_ADC_Init+0x142>
 8002de8:	485b      	ldr	r0, [pc, #364]	@ (8002f58 <HAL_ADC_Init+0x2a0>)
 8002dea:	f7ff fedb 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d012      	beq.n	8002e24 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a53      	ldr	r2, [pc, #332]	@ (8002f50 <HAL_ADC_Init+0x298>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_ADC_Init+0x15a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a51      	ldr	r2, [pc, #324]	@ (8002f54 <HAL_ADC_Init+0x29c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_Init+0x15e>
 8002e12:	4a52      	ldr	r2, [pc, #328]	@ (8002f5c <HAL_ADC_Init+0x2a4>)
 8002e14:	e000      	b.n	8002e18 <HAL_ADC_Init+0x160>
 8002e16:	4a52      	ldr	r2, [pc, #328]	@ (8002f60 <HAL_ADC_Init+0x2a8>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f7ff fd12 	bl	8002848 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002e24:	f7ff fd04 	bl	8002830 <HAL_GetREVID>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d914      	bls.n	8002e5c <HAL_ADC_Init+0x1a4>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d110      	bne.n	8002e5c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7d5b      	ldrb	r3, [r3, #21]
 8002e3e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e44:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e4a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7f1b      	ldrb	r3, [r3, #28]
 8002e50:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e52:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e54:	f043 030c 	orr.w	r3, r3, #12
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	e00d      	b.n	8002e78 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7d5b      	ldrb	r3, [r3, #21]
 8002e60:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e66:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e6c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7f1b      	ldrb	r3, [r3, #28]
 8002e72:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7f1b      	ldrb	r3, [r3, #28]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	045b      	lsls	r3, r3, #17
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f64 <HAL_ADC_Init+0x2ac>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	69b9      	ldr	r1, [r7, #24]
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff febc 	bl	8002c40 <LL_ADC_REG_IsConversionOngoing>
 8002ec8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fede 	bl	8002c90 <LL_ADC_INJ_IsConversionOngoing>
 8002ed4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d15f      	bne.n	8002f9c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d15c      	bne.n	8002f9c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7d1b      	ldrb	r3, [r3, #20]
 8002ee6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f68 <HAL_ADC_Init+0x2b0>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d130      	bne.n	8002f70 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <HAL_ADC_Init+0x2b4>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f22:	3a01      	subs	r2, #1
 8002f24:	0411      	lsls	r1, r2, #16
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f2a:	4311      	orrs	r1, r2
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f30:	4311      	orrs	r1, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f36:	430a      	orrs	r2, r1
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	611a      	str	r2, [r3, #16]
 8002f44:	e01c      	b.n	8002f80 <HAL_ADC_Init+0x2c8>
 8002f46:	bf00      	nop
 8002f48:	24000000 	.word	0x24000000
 8002f4c:	053e2d63 	.word	0x053e2d63
 8002f50:	40022000 	.word	0x40022000
 8002f54:	40022100 	.word	0x40022100
 8002f58:	58026000 	.word	0x58026000
 8002f5c:	40022300 	.word	0x40022300
 8002f60:	58026300 	.word	0x58026300
 8002f64:	fff0c003 	.word	0xfff0c003
 8002f68:	ffffbffc 	.word	0xffffbffc
 8002f6c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f001 f812 	bl	8003fc0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10c      	bne.n	8002fbe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	f023 010f 	bic.w	r1, r3, #15
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	1e5a      	subs	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fbc:	e007      	b.n	8002fce <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 020f 	bic.w	r2, r2, #15
 8002fcc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fde:	e007      	b.n	8002ff0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe4:	f043 0210 	orr.w	r2, r3, #16
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	@ 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	bf00      	nop

08002ffc <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e16e      	b.n	80032ec <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003012:	f043 0202 	orr.w	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800301a:	2103      	movs	r1, #3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fd95 	bl	8003b4c <ADC_ConversionStop>
 8003022:	4603      	mov	r3, r0
 8003024:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003034:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fecb 	bl	8003dd8 <ADC_Disable>
 8003042:	4603      	mov	r3, r0
 8003044:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b8c      	ldr	r3, [pc, #560]	@ (8003290 <HAL_ADC_DeInit+0x294>)
 800305e:	400b      	ands	r3, r1
 8003060:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800306a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 800307a:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800308a:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 800309a:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80030aa:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6919      	ldr	r1, [r3, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b77      	ldr	r3, [pc, #476]	@ (8003294 <HAL_ADC_DeInit+0x298>)
 80030b8:	400b      	ands	r3, r1
 80030ba:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80030ca:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 80030da:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6a1a      	ldr	r2, [r3, #32]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80030ea:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80030fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 800310c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003120:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003134:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003148:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b50      	ldr	r3, [pc, #320]	@ (8003298 <HAL_ADC_DeInit+0x29c>)
 8003158:	400b      	ands	r3, r1
 800315a:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4b4d      	ldr	r3, [pc, #308]	@ (800329c <HAL_ADC_DeInit+0x2a0>)
 8003168:	400b      	ands	r3, r1
 800316a:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b49      	ldr	r3, [pc, #292]	@ (800329c <HAL_ADC_DeInit+0x2a0>)
 8003178:	400b      	ands	r3, r1
 800317a:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b46      	ldr	r3, [pc, #280]	@ (80032a0 <HAL_ADC_DeInit+0x2a4>)
 8003188:	400b      	ands	r3, r1
 800318a:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2200      	movs	r2, #0
 80031a6:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2200      	movs	r2, #0
 80031b4:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2200      	movs	r2, #0
 80031c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b34      	ldr	r3, [pc, #208]	@ (80032a4 <HAL_ADC_DeInit+0x2a8>)
 80031d2:	400b      	ands	r3, r1
 80031d4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b2f      	ldr	r3, [pc, #188]	@ (80032a4 <HAL_ADC_DeInit+0x2a8>)
 80031e6:	400b      	ands	r3, r1
 80031e8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b2a      	ldr	r3, [pc, #168]	@ (80032a4 <HAL_ADC_DeInit+0x2a8>)
 80031fa:	400b      	ands	r3, r1
 80031fc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 8003210:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a23      	ldr	r2, [pc, #140]	@ (80032a8 <HAL_ADC_DeInit+0x2ac>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d004      	beq.n	8003228 <HAL_ADC_DeInit+0x22c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a22      	ldr	r2, [pc, #136]	@ (80032ac <HAL_ADC_DeInit+0x2b0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d10e      	bne.n	8003246 <HAL_ADC_DeInit+0x24a>
 8003228:	481f      	ldr	r0, [pc, #124]	@ (80032a8 <HAL_ADC_DeInit+0x2ac>)
 800322a:	f7ff fcbb 	bl	8002ba4 <LL_ADC_IsEnabled>
 800322e:	4604      	mov	r4, r0
 8003230:	481e      	ldr	r0, [pc, #120]	@ (80032ac <HAL_ADC_DeInit+0x2b0>)
 8003232:	f7ff fcb7 	bl	8002ba4 <LL_ADC_IsEnabled>
 8003236:	4603      	mov	r3, r0
 8003238:	4323      	orrs	r3, r4
 800323a:	2b00      	cmp	r3, #0
 800323c:	bf0c      	ite	eq
 800323e:	2301      	moveq	r3, #1
 8003240:	2300      	movne	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	e008      	b.n	8003258 <HAL_ADC_DeInit+0x25c>
 8003246:	481a      	ldr	r0, [pc, #104]	@ (80032b0 <HAL_ADC_DeInit+0x2b4>)
 8003248:	f7ff fcac 	bl	8002ba4 <LL_ADC_IsEnabled>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d036      	beq.n	80032ca <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a11      	ldr	r2, [pc, #68]	@ (80032a8 <HAL_ADC_DeInit+0x2ac>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_ADC_DeInit+0x274>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a10      	ldr	r2, [pc, #64]	@ (80032ac <HAL_ADC_DeInit+0x2b0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_ADC_DeInit+0x278>
 8003270:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <HAL_ADC_DeInit+0x2b8>)
 8003272:	e000      	b.n	8003276 <HAL_ADC_DeInit+0x27a>
 8003274:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <HAL_ADC_DeInit+0x2bc>)
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0a      	ldr	r2, [pc, #40]	@ (80032a8 <HAL_ADC_DeInit+0x2ac>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <HAL_ADC_DeInit+0x290>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a09      	ldr	r2, [pc, #36]	@ (80032ac <HAL_ADC_DeInit+0x2b0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d117      	bne.n	80032bc <HAL_ADC_DeInit+0x2c0>
 800328c:	4a09      	ldr	r2, [pc, #36]	@ (80032b4 <HAL_ADC_DeInit+0x2b8>)
 800328e:	e016      	b.n	80032be <HAL_ADC_DeInit+0x2c2>
 8003290:	fffff800 	.word	0xfffff800
 8003294:	fc00f81c 	.word	0xfc00f81c
 8003298:	e0820830 	.word	0xe0820830
 800329c:	e0820820 	.word	0xe0820820
 80032a0:	fffff820 	.word	0xfffff820
 80032a4:	fff00000 	.word	0xfff00000
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40022100 	.word	0x40022100
 80032b0:	58026000 	.word	0x58026000
 80032b4:	40022300 	.word	0x40022300
 80032b8:	58026300 	.word	0x58026300
 80032bc:	4a0d      	ldr	r2, [pc, #52]	@ (80032f4 <HAL_ADC_DeInit+0x2f8>)
 80032be:	4b0e      	ldr	r3, [pc, #56]	@ (80032f8 <HAL_ADC_DeInit+0x2fc>)
 80032c0:	400b      	ands	r3, r1
 80032c2:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7fd ff1d 	bl	8001104 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd90      	pop	{r4, r7, pc}
 80032f4:	58026300 	.word	0x58026300
 80032f8:	fe0030e0 	.word	0xfe0030e0

080032fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a55      	ldr	r2, [pc, #340]	@ (8003464 <HAL_ADC_Start_DMA+0x168>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_ADC_Start_DMA+0x20>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a54      	ldr	r2, [pc, #336]	@ (8003468 <HAL_ADC_Start_DMA+0x16c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_ADC_Start_DMA+0x24>
 800331c:	4b53      	ldr	r3, [pc, #332]	@ (800346c <HAL_ADC_Start_DMA+0x170>)
 800331e:	e000      	b.n	8003322 <HAL_ADC_Start_DMA+0x26>
 8003320:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <HAL_ADC_Start_DMA+0x174>)
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fbba 	bl	8002a9c <LL_ADC_GetMultimode>
 8003328:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fc86 	bl	8002c40 <LL_ADC_REG_IsConversionOngoing>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 808c 	bne.w	8003454 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_ADC_Start_DMA+0x4e>
 8003346:	2302      	movs	r3, #2
 8003348:	e087      	b.n	800345a <HAL_ADC_Start_DMA+0x15e>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b05      	cmp	r3, #5
 800335c:	d002      	beq.n	8003364 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b09      	cmp	r3, #9
 8003362:	d170      	bne.n	8003446 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fcad 	bl	8003cc4 <ADC_Enable>
 800336a:	4603      	mov	r3, r0
 800336c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d163      	bne.n	800343c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003378:	4b3e      	ldr	r3, [pc, #248]	@ (8003474 <HAL_ADC_Start_DMA+0x178>)
 800337a:	4013      	ands	r3, r2
 800337c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a37      	ldr	r2, [pc, #220]	@ (8003468 <HAL_ADC_Start_DMA+0x16c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d002      	beq.n	8003394 <HAL_ADC_Start_DMA+0x98>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	e000      	b.n	8003396 <HAL_ADC_Start_DMA+0x9a>
 8003394:	4b33      	ldr	r3, [pc, #204]	@ (8003464 <HAL_ADC_Start_DMA+0x168>)
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	4293      	cmp	r3, r2
 800339c:	d002      	beq.n	80033a4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d006      	beq.n	80033ca <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c0:	f023 0206 	bic.w	r2, r3, #6
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80033c8:	e002      	b.n	80033d0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d4:	4a28      	ldr	r2, [pc, #160]	@ (8003478 <HAL_ADC_Start_DMA+0x17c>)
 80033d6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033dc:	4a27      	ldr	r2, [pc, #156]	@ (800347c <HAL_ADC_Start_DMA+0x180>)
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e4:	4a26      	ldr	r2, [pc, #152]	@ (8003480 <HAL_ADC_Start_DMA+0x184>)
 80033e6:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	221c      	movs	r2, #28
 80033ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0210 	orr.w	r2, r2, #16
 8003406:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f7ff fadf 	bl	80029d6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3340      	adds	r3, #64	@ 0x40
 8003422:	4619      	mov	r1, r3
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f002 f870 	bl	800550c <HAL_DMA_Start_IT>
 800342c:	4603      	mov	r3, r0
 800342e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fbdb 	bl	8002bf0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800343a:	e00d      	b.n	8003458 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003444:	e008      	b.n	8003458 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003452:	e001      	b.n	8003458 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003454:	2302      	movs	r3, #2
 8003456:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003458:	7dfb      	ldrb	r3, [r7, #23]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40022000 	.word	0x40022000
 8003468:	40022100 	.word	0x40022100
 800346c:	40022300 	.word	0x40022300
 8003470:	58026300 	.word	0x58026300
 8003474:	fffff0fe 	.word	0xfffff0fe
 8003478:	08003e97 	.word	0x08003e97
 800347c:	08003f6f 	.word	0x08003f6f
 8003480:	08003f8b 	.word	0x08003f8b

08003484 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b0a1      	sub	sp, #132	@ 0x84
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a9d      	ldr	r2, [pc, #628]	@ (800373c <HAL_ADC_ConfigChannel+0x290>)
 80034c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x2a>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e321      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x66e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fbac 	bl	8002c40 <LL_ADC_REG_IsConversionOngoing>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 8306 	bne.w	8003afc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d108      	bne.n	800350e <HAL_ADC_ConfigChannel+0x62>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	0e9b      	lsrs	r3, r3, #26
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	2201      	movs	r2, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	e016      	b.n	800353c <HAL_ADC_ConfigChannel+0x90>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800351c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800351e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003526:	2320      	movs	r3, #32
 8003528:	e003      	b.n	8003532 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800352a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2201      	movs	r2, #1
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	69d1      	ldr	r1, [r2, #28]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	430b      	orrs	r3, r1
 8003548:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	f7ff fa11 	bl	800297e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fb6d 	bl	8002c40 <LL_ADC_REG_IsConversionOngoing>
 8003566:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fb8f 	bl	8002c90 <LL_ADC_INJ_IsConversionOngoing>
 8003572:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003576:	2b00      	cmp	r3, #0
 8003578:	f040 80b3 	bne.w	80036e2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800357c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 80af 	bne.w	80036e2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6819      	ldr	r1, [r3, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	461a      	mov	r2, r3
 8003592:	f7ff fa33 	bl	80029fc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003596:	4b6a      	ldr	r3, [pc, #424]	@ (8003740 <HAL_ADC_ConfigChannel+0x294>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800359e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035a2:	d10b      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x110>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	e01d      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x14c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x136>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	089b      	lsrs	r3, r3, #2
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	e00a      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x14c>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d027      	beq.n	8003652 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6919      	ldr	r1, [r3, #16]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003610:	f7ff f94e 	bl	80028b0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6919      	ldr	r1, [r3, #16]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	7e5b      	ldrb	r3, [r3, #25]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d102      	bne.n	800362a <HAL_ADC_ConfigChannel+0x17e>
 8003624:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003628:	e000      	b.n	800362c <HAL_ADC_ConfigChannel+0x180>
 800362a:	2300      	movs	r3, #0
 800362c:	461a      	mov	r2, r3
 800362e:	f7ff f978 	bl	8002922 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6919      	ldr	r1, [r3, #16]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	7e1b      	ldrb	r3, [r3, #24]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x19c>
 8003642:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003646:	e000      	b.n	800364a <HAL_ADC_ConfigChannel+0x19e>
 8003648:	2300      	movs	r3, #0
 800364a:	461a      	mov	r2, r3
 800364c:	f7ff f950 	bl	80028f0 <LL_ADC_SetDataRightShift>
 8003650:	e047      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003658:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	069b      	lsls	r3, r3, #26
 8003662:	429a      	cmp	r2, r3
 8003664:	d107      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003674:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800367c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	069b      	lsls	r3, r3, #26
 8003686:	429a      	cmp	r2, r3
 8003688:	d107      	bne.n	800369a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003698:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	069b      	lsls	r3, r3, #26
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d107      	bne.n	80036be <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80036bc:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	069b      	lsls	r3, r3, #26
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d107      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80036e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fa5c 	bl	8002ba4 <LL_ADC_IsEnabled>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 820d 	bne.w	8003b0e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	461a      	mov	r2, r3
 8003702:	f7ff f9a7 	bl	8002a54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4a0c      	ldr	r2, [pc, #48]	@ (800373c <HAL_ADC_ConfigChannel+0x290>)
 800370c:	4293      	cmp	r3, r2
 800370e:	f040 8133 	bne.w	8003978 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800371e:	2b00      	cmp	r3, #0
 8003720:	d110      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x298>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0e9b      	lsrs	r3, r3, #26
 8003728:	3301      	adds	r3, #1
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2b09      	cmp	r3, #9
 8003730:	bf94      	ite	ls
 8003732:	2301      	movls	r3, #1
 8003734:	2300      	movhi	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	e01e      	b.n	8003778 <HAL_ADC_ConfigChannel+0x2cc>
 800373a:	bf00      	nop
 800373c:	47ff0000 	.word	0x47ff0000
 8003740:	5c001000 	.word	0x5c001000
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003754:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800375c:	2320      	movs	r3, #32
 800375e:	e003      	b.n	8003768 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	3301      	adds	r3, #1
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	2b09      	cmp	r3, #9
 8003770:	bf94      	ite	ls
 8003772:	2301      	movls	r3, #1
 8003774:	2300      	movhi	r3, #0
 8003776:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003778:	2b00      	cmp	r3, #0
 800377a:	d079      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003784:	2b00      	cmp	r3, #0
 8003786:	d107      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x2ec>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	0e9b      	lsrs	r3, r3, #26
 800378e:	3301      	adds	r3, #1
 8003790:	069b      	lsls	r3, r3, #26
 8003792:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003796:	e015      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x318>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80037a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037a8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80037aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80037b0:	2320      	movs	r3, #32
 80037b2:	e003      	b.n	80037bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80037b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	3301      	adds	r3, #1
 80037be:	069b      	lsls	r3, r3, #26
 80037c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x338>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0e9b      	lsrs	r3, r3, #26
 80037d6:	3301      	adds	r3, #1
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f303 	lsl.w	r3, r1, r3
 80037e2:	e017      	b.n	8003814 <HAL_ADC_ConfigChannel+0x368>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80037f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80037f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80037fc:	2320      	movs	r3, #32
 80037fe:	e003      	b.n	8003808 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	3301      	adds	r3, #1
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	2101      	movs	r1, #1
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	ea42 0103 	orr.w	r1, r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <HAL_ADC_ConfigChannel+0x38e>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0e9b      	lsrs	r3, r3, #26
 800382a:	3301      	adds	r3, #1
 800382c:	f003 021f 	and.w	r2, r3, #31
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	051b      	lsls	r3, r3, #20
 8003838:	e018      	b.n	800386c <HAL_ADC_ConfigChannel+0x3c0>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800384c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003852:	2320      	movs	r3, #32
 8003854:	e003      	b.n	800385e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003858:	fab3 f383 	clz	r3, r3
 800385c:	b2db      	uxtb	r3, r3
 800385e:	3301      	adds	r3, #1
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	4613      	mov	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800386c:	430b      	orrs	r3, r1
 800386e:	e07e      	b.n	800396e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_ADC_ConfigChannel+0x3e0>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0e9b      	lsrs	r3, r3, #26
 8003882:	3301      	adds	r3, #1
 8003884:	069b      	lsls	r3, r3, #26
 8003886:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800388a:	e015      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x40c>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800389e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80038a4:	2320      	movs	r3, #32
 80038a6:	e003      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80038a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	069b      	lsls	r3, r3, #26
 80038b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d109      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x42c>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	0e9b      	lsrs	r3, r3, #26
 80038ca:	3301      	adds	r3, #1
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2101      	movs	r1, #1
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	e017      	b.n	8003908 <HAL_ADC_ConfigChannel+0x45c>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	fa93 f3a3 	rbit	r3, r3
 80038e4:	61bb      	str	r3, [r7, #24]
  return result;
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80038f0:	2320      	movs	r3, #32
 80038f2:	e003      	b.n	80038fc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	3301      	adds	r3, #1
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	ea42 0103 	orr.w	r1, r2, r3
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10d      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x488>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	0e9b      	lsrs	r3, r3, #26
 800391e:	3301      	adds	r3, #1
 8003920:	f003 021f 	and.w	r2, r3, #31
 8003924:	4613      	mov	r3, r2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	3b1e      	subs	r3, #30
 800392c:	051b      	lsls	r3, r3, #20
 800392e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003932:	e01b      	b.n	800396c <HAL_ADC_ConfigChannel+0x4c0>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	fa93 f3a3 	rbit	r3, r3
 8003940:	60fb      	str	r3, [r7, #12]
  return result;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800394c:	2320      	movs	r3, #32
 800394e:	e003      	b.n	8003958 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	fab3 f383 	clz	r3, r3
 8003956:	b2db      	uxtb	r3, r3
 8003958:	3301      	adds	r3, #1
 800395a:	f003 021f 	and.w	r2, r3, #31
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	3b1e      	subs	r3, #30
 8003966:	051b      	lsls	r3, r3, #20
 8003968:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800396c:	430b      	orrs	r3, r1
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	6892      	ldr	r2, [r2, #8]
 8003972:	4619      	mov	r1, r3
 8003974:	f7ff f842 	bl	80029fc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f280 80c6 	bge.w	8003b0e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a67      	ldr	r2, [pc, #412]	@ (8003b24 <HAL_ADC_ConfigChannel+0x678>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d004      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x4ea>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a65      	ldr	r2, [pc, #404]	@ (8003b28 <HAL_ADC_ConfigChannel+0x67c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <HAL_ADC_ConfigChannel+0x4ee>
 8003996:	4b65      	ldr	r3, [pc, #404]	@ (8003b2c <HAL_ADC_ConfigChannel+0x680>)
 8003998:	e000      	b.n	800399c <HAL_ADC_ConfigChannel+0x4f0>
 800399a:	4b65      	ldr	r3, [pc, #404]	@ (8003b30 <HAL_ADC_ConfigChannel+0x684>)
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe ff79 	bl	8002894 <LL_ADC_GetCommonPathInternalCh>
 80039a2:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a5e      	ldr	r2, [pc, #376]	@ (8003b24 <HAL_ADC_ConfigChannel+0x678>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_ADC_ConfigChannel+0x50c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003b28 <HAL_ADC_ConfigChannel+0x67c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d10e      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x52a>
 80039b8:	485a      	ldr	r0, [pc, #360]	@ (8003b24 <HAL_ADC_ConfigChannel+0x678>)
 80039ba:	f7ff f8f3 	bl	8002ba4 <LL_ADC_IsEnabled>
 80039be:	4604      	mov	r4, r0
 80039c0:	4859      	ldr	r0, [pc, #356]	@ (8003b28 <HAL_ADC_ConfigChannel+0x67c>)
 80039c2:	f7ff f8ef 	bl	8002ba4 <LL_ADC_IsEnabled>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4323      	orrs	r3, r4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	bf0c      	ite	eq
 80039ce:	2301      	moveq	r3, #1
 80039d0:	2300      	movne	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	e008      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x53c>
 80039d6:	4857      	ldr	r0, [pc, #348]	@ (8003b34 <HAL_ADC_ConfigChannel+0x688>)
 80039d8:	f7ff f8e4 	bl	8002ba4 <LL_ADC_IsEnabled>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bf0c      	ite	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	2300      	movne	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d07d      	beq.n	8003ae8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a51      	ldr	r2, [pc, #324]	@ (8003b38 <HAL_ADC_ConfigChannel+0x68c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d130      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x5ac>
 80039f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d12b      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a4b      	ldr	r2, [pc, #300]	@ (8003b34 <HAL_ADC_ConfigChannel+0x688>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	f040 8081 	bne.w	8003b0e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a44      	ldr	r2, [pc, #272]	@ (8003b24 <HAL_ADC_ConfigChannel+0x678>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_ADC_ConfigChannel+0x574>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a43      	ldr	r2, [pc, #268]	@ (8003b28 <HAL_ADC_ConfigChannel+0x67c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d101      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x578>
 8003a20:	4a42      	ldr	r2, [pc, #264]	@ (8003b2c <HAL_ADC_ConfigChannel+0x680>)
 8003a22:	e000      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x57a>
 8003a24:	4a42      	ldr	r2, [pc, #264]	@ (8003b30 <HAL_ADC_ConfigChannel+0x684>)
 8003a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f7fe ff1d 	bl	800286e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a34:	4b41      	ldr	r3, [pc, #260]	@ (8003b3c <HAL_ADC_ConfigChannel+0x690>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	099b      	lsrs	r3, r3, #6
 8003a3a:	4a41      	ldr	r2, [pc, #260]	@ (8003b40 <HAL_ADC_ConfigChannel+0x694>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	3301      	adds	r3, #1
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a48:	e002      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f9      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a56:	e05a      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a39      	ldr	r2, [pc, #228]	@ (8003b44 <HAL_ADC_ConfigChannel+0x698>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d11e      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x5f4>
 8003a62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d119      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a30      	ldr	r2, [pc, #192]	@ (8003b34 <HAL_ADC_ConfigChannel+0x688>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d14b      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003b24 <HAL_ADC_ConfigChannel+0x678>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_ADC_ConfigChannel+0x5de>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a28      	ldr	r2, [pc, #160]	@ (8003b28 <HAL_ADC_ConfigChannel+0x67c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x5e2>
 8003a8a:	4a28      	ldr	r2, [pc, #160]	@ (8003b2c <HAL_ADC_ConfigChannel+0x680>)
 8003a8c:	e000      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x5e4>
 8003a8e:	4a28      	ldr	r2, [pc, #160]	@ (8003b30 <HAL_ADC_ConfigChannel+0x684>)
 8003a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a96:	4619      	mov	r1, r3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	f7fe fee8 	bl	800286e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a9e:	e036      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a28      	ldr	r2, [pc, #160]	@ (8003b48 <HAL_ADC_ConfigChannel+0x69c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d131      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x662>
 8003aaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d12c      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b34 <HAL_ADC_ConfigChannel+0x688>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d127      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a18      	ldr	r2, [pc, #96]	@ (8003b24 <HAL_ADC_ConfigChannel+0x678>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_ADC_ConfigChannel+0x626>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a16      	ldr	r2, [pc, #88]	@ (8003b28 <HAL_ADC_ConfigChannel+0x67c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x62a>
 8003ad2:	4a16      	ldr	r2, [pc, #88]	@ (8003b2c <HAL_ADC_ConfigChannel+0x680>)
 8003ad4:	e000      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x62c>
 8003ad6:	4a16      	ldr	r2, [pc, #88]	@ (8003b30 <HAL_ADC_ConfigChannel+0x684>)
 8003ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ada:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f7fe fec4 	bl	800286e <LL_ADC_SetCommonPathInternalCh>
 8003ae6:	e012      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aec:	f043 0220 	orr.w	r2, r3, #32
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003afa:	e008      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b00:	f043 0220 	orr.w	r2, r3, #32
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b16:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3784      	adds	r7, #132	@ 0x84
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd90      	pop	{r4, r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40022000 	.word	0x40022000
 8003b28:	40022100 	.word	0x40022100
 8003b2c:	40022300 	.word	0x40022300
 8003b30:	58026300 	.word	0x58026300
 8003b34:	58026000 	.word	0x58026000
 8003b38:	cb840000 	.word	0xcb840000
 8003b3c:	24000000 	.word	0x24000000
 8003b40:	053e2d63 	.word	0x053e2d63
 8003b44:	c7520000 	.word	0xc7520000
 8003b48:	cfb80000 	.word	0xcfb80000

08003b4c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff f86c 	bl	8002c40 <LL_ADC_REG_IsConversionOngoing>
 8003b68:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f88e 	bl	8002c90 <LL_ADC_INJ_IsConversionOngoing>
 8003b74:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d103      	bne.n	8003b84 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8098 	beq.w	8003cb4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d02a      	beq.n	8003be8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7d5b      	ldrb	r3, [r3, #21]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d126      	bne.n	8003be8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7d1b      	ldrb	r3, [r3, #20]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d122      	bne.n	8003be8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ba6:	e014      	b.n	8003bd2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4a45      	ldr	r2, [pc, #276]	@ (8003cc0 <ADC_ConversionStop+0x174>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d90d      	bls.n	8003bcc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb4:	f043 0210 	orr.w	r2, r3, #16
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc0:	f043 0201 	orr.w	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e074      	b.n	8003cb6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bdc:	2b40      	cmp	r3, #64	@ 0x40
 8003bde:	d1e3      	bne.n	8003ba8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2240      	movs	r2, #64	@ 0x40
 8003be6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d014      	beq.n	8003c18 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff f824 	bl	8002c40 <LL_ADC_REG_IsConversionOngoing>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe ffe1 	bl	8002bca <LL_ADC_IsDisableOngoing>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff f800 	bl	8002c18 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d014      	beq.n	8003c48 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff f834 	bl	8002c90 <LL_ADC_INJ_IsConversionOngoing>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00c      	beq.n	8003c48 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe ffc9 	bl	8002bca <LL_ADC_IsDisableOngoing>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d104      	bne.n	8003c48 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff f810 	bl	8002c68 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d005      	beq.n	8003c5a <ADC_ConversionStop+0x10e>
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d105      	bne.n	8003c60 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c54:	230c      	movs	r3, #12
 8003c56:	617b      	str	r3, [r7, #20]
        break;
 8003c58:	e005      	b.n	8003c66 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	617b      	str	r3, [r7, #20]
        break;
 8003c5e:	e002      	b.n	8003c66 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c60:	2304      	movs	r3, #4
 8003c62:	617b      	str	r3, [r7, #20]
        break;
 8003c64:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c66:	f7fe fdb3 	bl	80027d0 <HAL_GetTick>
 8003c6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c6c:	e01b      	b.n	8003ca6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c6e:	f7fe fdaf 	bl	80027d0 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	d914      	bls.n	8003ca6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8e:	f043 0210 	orr.w	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9a:	f043 0201 	orr.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e007      	b.n	8003cb6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1dc      	bne.n	8003c6e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	000cdbff 	.word	0x000cdbff

08003cc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fe ff67 	bl	8002ba4 <LL_ADC_IsEnabled>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d16e      	bne.n	8003dba <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	4b38      	ldr	r3, [pc, #224]	@ (8003dc4 <ADC_Enable+0x100>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00d      	beq.n	8003d06 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cee:	f043 0210 	orr.w	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfa:	f043 0201 	orr.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e05a      	b.n	8003dbc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe ff22 	bl	8002b54 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d10:	f7fe fd5e 	bl	80027d0 <HAL_GetTick>
 8003d14:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc8 <ADC_Enable+0x104>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d004      	beq.n	8003d2a <ADC_Enable+0x66>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a29      	ldr	r2, [pc, #164]	@ (8003dcc <ADC_Enable+0x108>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <ADC_Enable+0x6a>
 8003d2a:	4b29      	ldr	r3, [pc, #164]	@ (8003dd0 <ADC_Enable+0x10c>)
 8003d2c:	e000      	b.n	8003d30 <ADC_Enable+0x6c>
 8003d2e:	4b29      	ldr	r3, [pc, #164]	@ (8003dd4 <ADC_Enable+0x110>)
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe feb3 	bl	8002a9c <LL_ADC_GetMultimode>
 8003d36:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a23      	ldr	r2, [pc, #140]	@ (8003dcc <ADC_Enable+0x108>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d002      	beq.n	8003d48 <ADC_Enable+0x84>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	e000      	b.n	8003d4a <ADC_Enable+0x86>
 8003d48:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc8 <ADC_Enable+0x104>)
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d02c      	beq.n	8003dac <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d130      	bne.n	8003dba <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d58:	e028      	b.n	8003dac <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe ff20 	bl	8002ba4 <LL_ADC_IsEnabled>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe fef0 	bl	8002b54 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d74:	f7fe fd2c 	bl	80027d0 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d914      	bls.n	8003dac <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d00d      	beq.n	8003dac <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d94:	f043 0210 	orr.w	r2, r3, #16
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da0:	f043 0201 	orr.w	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e007      	b.n	8003dbc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d1cf      	bne.n	8003d5a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	8000003f 	.word	0x8000003f
 8003dc8:	40022000 	.word	0x40022000
 8003dcc:	40022100 	.word	0x40022100
 8003dd0:	40022300 	.word	0x40022300
 8003dd4:	58026300 	.word	0x58026300

08003dd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe fef0 	bl	8002bca <LL_ADC_IsDisableOngoing>
 8003dea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe fed7 	bl	8002ba4 <LL_ADC_IsEnabled>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d047      	beq.n	8003e8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d144      	bne.n	8003e8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030d 	and.w	r3, r3, #13
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10c      	bne.n	8003e2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe feb1 	bl	8002b7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2203      	movs	r2, #3
 8003e20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e22:	f7fe fcd5 	bl	80027d0 <HAL_GetTick>
 8003e26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e28:	e029      	b.n	8003e7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2e:	f043 0210 	orr.w	r2, r3, #16
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	f043 0201 	orr.w	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e023      	b.n	8003e8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e46:	f7fe fcc3 	bl	80027d0 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d914      	bls.n	8003e7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e66:	f043 0210 	orr.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e007      	b.n	8003e8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1dc      	bne.n	8003e46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d14b      	bne.n	8003f48 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d021      	beq.n	8003f0e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fd42 	bl	8002958 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d032      	beq.n	8003f40 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d12b      	bne.n	8003f40 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d11f      	bne.n	8003f40 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f04:	f043 0201 	orr.w	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003f0c:	e018      	b.n	8003f40 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d111      	bne.n	8003f40 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7fd ffed 	bl	8001f20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f46:	e00e      	b.n	8003f66 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff fa9f 	bl	8003498 <HAL_ADC_ErrorCallback>
}
 8003f5a:	e004      	b.n	8003f66 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff fa81 	bl	8003484 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff fa71 	bl	8003498 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a7a      	ldr	r2, [pc, #488]	@ (80041b8 <ADC_ConfigureBoostMode+0x1f8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <ADC_ConfigureBoostMode+0x1c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a79      	ldr	r2, [pc, #484]	@ (80041bc <ADC_ConfigureBoostMode+0x1fc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d109      	bne.n	8003ff0 <ADC_ConfigureBoostMode+0x30>
 8003fdc:	4b78      	ldr	r3, [pc, #480]	@ (80041c0 <ADC_ConfigureBoostMode+0x200>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf14      	ite	ne
 8003fe8:	2301      	movne	r3, #1
 8003fea:	2300      	moveq	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e008      	b.n	8004002 <ADC_ConfigureBoostMode+0x42>
 8003ff0:	4b74      	ldr	r3, [pc, #464]	@ (80041c4 <ADC_ConfigureBoostMode+0x204>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d01c      	beq.n	8004040 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004006:	f005 f923 	bl	8009250 <HAL_RCC_GetHCLKFreq>
 800400a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004014:	d010      	beq.n	8004038 <ADC_ConfigureBoostMode+0x78>
 8004016:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800401a:	d873      	bhi.n	8004104 <ADC_ConfigureBoostMode+0x144>
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004020:	d002      	beq.n	8004028 <ADC_ConfigureBoostMode+0x68>
 8004022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004026:	d16d      	bne.n	8004104 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	fbb2 f3f3 	udiv	r3, r2, r3
 8004034:	60fb      	str	r3, [r7, #12]
        break;
 8004036:	e068      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	60fb      	str	r3, [r7, #12]
        break;
 800403e:	e064      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004040:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	f006 fb68 	bl	800a71c <HAL_RCCEx_GetPeriphCLKFreq>
 800404c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004056:	d051      	beq.n	80040fc <ADC_ConfigureBoostMode+0x13c>
 8004058:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800405c:	d854      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 800405e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004062:	d047      	beq.n	80040f4 <ADC_ConfigureBoostMode+0x134>
 8004064:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004068:	d84e      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 800406a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800406e:	d03d      	beq.n	80040ec <ADC_ConfigureBoostMode+0x12c>
 8004070:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004074:	d848      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 8004076:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800407a:	d033      	beq.n	80040e4 <ADC_ConfigureBoostMode+0x124>
 800407c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004080:	d842      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 8004082:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004086:	d029      	beq.n	80040dc <ADC_ConfigureBoostMode+0x11c>
 8004088:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800408c:	d83c      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 800408e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004092:	d01a      	beq.n	80040ca <ADC_ConfigureBoostMode+0x10a>
 8004094:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004098:	d836      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 800409a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800409e:	d014      	beq.n	80040ca <ADC_ConfigureBoostMode+0x10a>
 80040a0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80040a4:	d830      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 80040a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040aa:	d00e      	beq.n	80040ca <ADC_ConfigureBoostMode+0x10a>
 80040ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040b0:	d82a      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 80040b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040b6:	d008      	beq.n	80040ca <ADC_ConfigureBoostMode+0x10a>
 80040b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040bc:	d824      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 80040be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040c2:	d002      	beq.n	80040ca <ADC_ConfigureBoostMode+0x10a>
 80040c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040c8:	d11e      	bne.n	8004108 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	0c9b      	lsrs	r3, r3, #18
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	60fb      	str	r3, [r7, #12]
        break;
 80040da:	e016      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	60fb      	str	r3, [r7, #12]
        break;
 80040e2:	e012      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	60fb      	str	r3, [r7, #12]
        break;
 80040ea:	e00e      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	099b      	lsrs	r3, r3, #6
 80040f0:	60fb      	str	r3, [r7, #12]
        break;
 80040f2:	e00a      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	09db      	lsrs	r3, r3, #7
 80040f8:	60fb      	str	r3, [r7, #12]
        break;
 80040fa:	e006      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	60fb      	str	r3, [r7, #12]
        break;
 8004102:	e002      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004104:	bf00      	nop
 8004106:	e000      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004108:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800410a:	f7fe fb91 	bl	8002830 <HAL_GetREVID>
 800410e:	4603      	mov	r3, r0
 8004110:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004114:	4293      	cmp	r3, r2
 8004116:	d815      	bhi.n	8004144 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4a2b      	ldr	r2, [pc, #172]	@ (80041c8 <ADC_ConfigureBoostMode+0x208>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d908      	bls.n	8004132 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800412e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004130:	e03e      	b.n	80041b0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004140:	609a      	str	r2, [r3, #8]
}
 8004142:	e035      	b.n	80041b0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a1f      	ldr	r2, [pc, #124]	@ (80041cc <ADC_ConfigureBoostMode+0x20c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d808      	bhi.n	8004164 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004160:	609a      	str	r2, [r3, #8]
}
 8004162:	e025      	b.n	80041b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4a1a      	ldr	r2, [pc, #104]	@ (80041d0 <ADC_ConfigureBoostMode+0x210>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d80a      	bhi.n	8004182 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800417e:	609a      	str	r2, [r3, #8]
}
 8004180:	e016      	b.n	80041b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a13      	ldr	r2, [pc, #76]	@ (80041d4 <ADC_ConfigureBoostMode+0x214>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d80a      	bhi.n	80041a0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419c:	609a      	str	r2, [r3, #8]
}
 800419e:	e007      	b.n	80041b0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80041ae:	609a      	str	r2, [r3, #8]
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40022000 	.word	0x40022000
 80041bc:	40022100 	.word	0x40022100
 80041c0:	40022300 	.word	0x40022300
 80041c4:	58026300 	.word	0x58026300
 80041c8:	01312d00 	.word	0x01312d00
 80041cc:	005f5e10 	.word	0x005f5e10
 80041d0:	00bebc20 	.word	0x00bebc20
 80041d4:	017d7840 	.word	0x017d7840

080041d8 <LL_ADC_IsEnabled>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <LL_ADC_IsEnabled+0x18>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <LL_ADC_IsEnabled+0x1a>
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <LL_ADC_StartCalibration>:
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <LL_ADC_StartCalibration+0x38>)
 8004212:	4013      	ands	r3, r2
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004220:	430a      	orrs	r2, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	609a      	str	r2, [r3, #8]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	3ffeffc0 	.word	0x3ffeffc0

0800423c <LL_ADC_IsCalibrationOnGoing>:
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800424c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004250:	d101      	bne.n	8004256 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_REG_IsConversionOngoing>:
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b04      	cmp	r3, #4
 8004276:	d101      	bne.n	800427c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004298:	2300      	movs	r3, #0
 800429a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_ADCEx_Calibration_Start+0x1e>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e04c      	b.n	8004344 <HAL_ADCEx_Calibration_Start+0xb8>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff fd90 	bl	8003dd8 <ADC_Disable>
 80042b8:	4603      	mov	r3, r0
 80042ba:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d135      	bne.n	800432e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042c6:	4b21      	ldr	r3, [pc, #132]	@ (800434c <HAL_ADCEx_Calibration_Start+0xc0>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	f043 0202 	orr.w	r2, r3, #2
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff90 	bl	8004200 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042e0:	e014      	b.n	800430c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	3301      	adds	r3, #1
 80042e6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	4a19      	ldr	r2, [pc, #100]	@ (8004350 <HAL_ADCEx_Calibration_Start+0xc4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d30d      	bcc.n	800430c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f4:	f023 0312 	bic.w	r3, r3, #18
 80042f8:	f043 0210 	orr.w	r2, r3, #16
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e01b      	b.n	8004344 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff93 	bl	800423c <LL_ADC_IsCalibrationOnGoing>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e2      	bne.n	80042e2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004320:	f023 0303 	bic.w	r3, r3, #3
 8004324:	f043 0201 	orr.w	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	655a      	str	r2, [r3, #84]	@ 0x54
 800432c:	e005      	b.n	800433a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004332:	f043 0210 	orr.w	r2, r3, #16
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004342:	7dfb      	ldrb	r3, [r7, #23]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	ffffeefd 	.word	0xffffeefd
 8004350:	25c3f800 	.word	0x25c3f800

08004354 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004354:	b590      	push	{r4, r7, lr}
 8004356:	b09f      	sub	sp, #124	@ 0x7c
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800436e:	2302      	movs	r3, #2
 8004370:	e0be      	b.n	80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800437a:	2300      	movs	r3, #0
 800437c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800437e:	2300      	movs	r3, #0
 8004380:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a5c      	ldr	r2, [pc, #368]	@ (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d102      	bne.n	8004392 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800438c:	4b5b      	ldr	r3, [pc, #364]	@ (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	e001      	b.n	8004396 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004392:	2300      	movs	r3, #0
 8004394:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10b      	bne.n	80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a0:	f043 0220 	orr.w	r2, r3, #32
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e09d      	b.n	80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ff54 	bl	8004264 <LL_ADC_REG_IsConversionOngoing>
 80043bc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff ff4e 	bl	8004264 <LL_ADC_REG_IsConversionOngoing>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d17f      	bne.n	80044ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80043ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d17c      	bne.n	80044ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a47      	ldr	r2, [pc, #284]	@ (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a46      	ldr	r2, [pc, #280]	@ (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80043e8:	4b45      	ldr	r3, [pc, #276]	@ (8004500 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80043ea:	e000      	b.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80043ec:	4b45      	ldr	r3, [pc, #276]	@ (8004504 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80043ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d039      	beq.n	800446c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80043f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	431a      	orrs	r2, r3
 8004406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004408:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a3a      	ldr	r2, [pc, #232]	@ (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a38      	ldr	r2, [pc, #224]	@ (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d10e      	bne.n	800443c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800441e:	4836      	ldr	r0, [pc, #216]	@ (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004420:	f7ff feda 	bl	80041d8 <LL_ADC_IsEnabled>
 8004424:	4604      	mov	r4, r0
 8004426:	4835      	ldr	r0, [pc, #212]	@ (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004428:	f7ff fed6 	bl	80041d8 <LL_ADC_IsEnabled>
 800442c:	4603      	mov	r3, r0
 800442e:	4323      	orrs	r3, r4
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e008      	b.n	800444e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800443c:	4832      	ldr	r0, [pc, #200]	@ (8004508 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800443e:	f7ff fecb 	bl	80041d8 <LL_ADC_IsEnabled>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d047      	beq.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	4b2d      	ldr	r3, [pc, #180]	@ (800450c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004458:	4013      	ands	r3, r2
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	6811      	ldr	r1, [r2, #0]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	6892      	ldr	r2, [r2, #8]
 8004462:	430a      	orrs	r2, r1
 8004464:	431a      	orrs	r2, r3
 8004466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004468:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800446a:	e03a      	b.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800446c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004476:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1e      	ldr	r2, [pc, #120]	@ (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1d      	ldr	r2, [pc, #116]	@ (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d10e      	bne.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800448c:	481a      	ldr	r0, [pc, #104]	@ (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800448e:	f7ff fea3 	bl	80041d8 <LL_ADC_IsEnabled>
 8004492:	4604      	mov	r4, r0
 8004494:	4819      	ldr	r0, [pc, #100]	@ (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004496:	f7ff fe9f 	bl	80041d8 <LL_ADC_IsEnabled>
 800449a:	4603      	mov	r3, r0
 800449c:	4323      	orrs	r3, r4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bf0c      	ite	eq
 80044a2:	2301      	moveq	r3, #1
 80044a4:	2300      	movne	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	e008      	b.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80044aa:	4817      	ldr	r0, [pc, #92]	@ (8004508 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80044ac:	f7ff fe94 	bl	80041d8 <LL_ADC_IsEnabled>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d010      	beq.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	4b11      	ldr	r3, [pc, #68]	@ (800450c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044ca:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044cc:	e009      	b.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d2:	f043 0220 	orr.w	r2, r3, #32
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80044e0:	e000      	b.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044e2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80044ec:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	377c      	adds	r7, #124	@ 0x7c
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd90      	pop	{r4, r7, pc}
 80044f8:	40022000 	.word	0x40022000
 80044fc:	40022100 	.word	0x40022100
 8004500:	40022300 	.word	0x40022300
 8004504:	58026300 	.word	0x58026300
 8004508:	58026000 	.word	0x58026000
 800450c:	fffff0e0 	.word	0xfffff0e0

08004510 <__NVIC_SetPriorityGrouping>:
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <__NVIC_SetPriorityGrouping+0x40>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800452c:	4013      	ands	r3, r2
 800452e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004538:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <__NVIC_SetPriorityGrouping+0x44>)
 800453a:	4313      	orrs	r3, r2
 800453c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800453e:	4a04      	ldr	r2, [pc, #16]	@ (8004550 <__NVIC_SetPriorityGrouping+0x40>)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	60d3      	str	r3, [r2, #12]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000ed00 	.word	0xe000ed00
 8004554:	05fa0000 	.word	0x05fa0000

08004558 <__NVIC_GetPriorityGrouping>:
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800455c:	4b04      	ldr	r3, [pc, #16]	@ (8004570 <__NVIC_GetPriorityGrouping+0x18>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	0a1b      	lsrs	r3, r3, #8
 8004562:	f003 0307 	and.w	r3, r3, #7
}
 8004566:	4618      	mov	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	e000ed00 	.word	0xe000ed00

08004574 <__NVIC_EnableIRQ>:
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800457e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004582:	2b00      	cmp	r3, #0
 8004584:	db0b      	blt.n	800459e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	f003 021f 	and.w	r2, r3, #31
 800458c:	4907      	ldr	r1, [pc, #28]	@ (80045ac <__NVIC_EnableIRQ+0x38>)
 800458e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	2001      	movs	r0, #1
 8004596:	fa00 f202 	lsl.w	r2, r0, r2
 800459a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	e000e100 	.word	0xe000e100

080045b0 <__NVIC_SetPriority>:
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	6039      	str	r1, [r7, #0]
 80045ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	db0a      	blt.n	80045da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	490c      	ldr	r1, [pc, #48]	@ (80045fc <__NVIC_SetPriority+0x4c>)
 80045ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ce:	0112      	lsls	r2, r2, #4
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	440b      	add	r3, r1
 80045d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045d8:	e00a      	b.n	80045f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	4908      	ldr	r1, [pc, #32]	@ (8004600 <__NVIC_SetPriority+0x50>)
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	3b04      	subs	r3, #4
 80045e8:	0112      	lsls	r2, r2, #4
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	440b      	add	r3, r1
 80045ee:	761a      	strb	r2, [r3, #24]
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000e100 	.word	0xe000e100
 8004600:	e000ed00 	.word	0xe000ed00

08004604 <NVIC_EncodePriority>:
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	@ 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f1c3 0307 	rsb	r3, r3, #7
 800461e:	2b04      	cmp	r3, #4
 8004620:	bf28      	it	cs
 8004622:	2304      	movcs	r3, #4
 8004624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3304      	adds	r3, #4
 800462a:	2b06      	cmp	r3, #6
 800462c:	d902      	bls.n	8004634 <NVIC_EncodePriority+0x30>
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3b03      	subs	r3, #3
 8004632:	e000      	b.n	8004636 <NVIC_EncodePriority+0x32>
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004638:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43da      	mvns	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	401a      	ands	r2, r3
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800464c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	43d9      	mvns	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800465c:	4313      	orrs	r3, r2
}
 800465e:	4618      	mov	r0, r3
 8004660:	3724      	adds	r7, #36	@ 0x24
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3b01      	subs	r3, #1
 8004678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800467c:	d301      	bcc.n	8004682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800467e:	2301      	movs	r3, #1
 8004680:	e00f      	b.n	80046a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004682:	4a0a      	ldr	r2, [pc, #40]	@ (80046ac <SysTick_Config+0x40>)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3b01      	subs	r3, #1
 8004688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800468a:	210f      	movs	r1, #15
 800468c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004690:	f7ff ff8e 	bl	80045b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004694:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <SysTick_Config+0x40>)
 8004696:	2200      	movs	r2, #0
 8004698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800469a:	4b04      	ldr	r3, [pc, #16]	@ (80046ac <SysTick_Config+0x40>)
 800469c:	2207      	movs	r2, #7
 800469e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	e000e010 	.word	0xe000e010

080046b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff ff29 	bl	8004510 <__NVIC_SetPriorityGrouping>
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b086      	sub	sp, #24
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	4603      	mov	r3, r0
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
 80046d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046d4:	f7ff ff40 	bl	8004558 <__NVIC_GetPriorityGrouping>
 80046d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f7ff ff90 	bl	8004604 <NVIC_EncodePriority>
 80046e4:	4602      	mov	r2, r0
 80046e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff5f 	bl	80045b0 <__NVIC_SetPriority>
}
 80046f2:	bf00      	nop
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff33 	bl	8004574 <__NVIC_EnableIRQ>
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ffa4 	bl	800466c <SysTick_Config>
 8004724:	4603      	mov	r3, r0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004734:	f3bf 8f5f 	dmb	sy
}
 8004738:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800473a:	4b07      	ldr	r3, [pc, #28]	@ (8004758 <HAL_MPU_Disable+0x28>)
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	4a06      	ldr	r2, [pc, #24]	@ (8004758 <HAL_MPU_Disable+0x28>)
 8004740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004744:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004746:	4b05      	ldr	r3, [pc, #20]	@ (800475c <HAL_MPU_Disable+0x2c>)
 8004748:	2200      	movs	r2, #0
 800474a:	605a      	str	r2, [r3, #4]
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	e000ed00 	.word	0xe000ed00
 800475c:	e000ed90 	.word	0xe000ed90

08004760 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004768:	4a0b      	ldr	r2, [pc, #44]	@ (8004798 <HAL_MPU_Enable+0x38>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004772:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <HAL_MPU_Enable+0x3c>)
 8004774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004776:	4a09      	ldr	r2, [pc, #36]	@ (800479c <HAL_MPU_Enable+0x3c>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800477c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800477e:	f3bf 8f4f 	dsb	sy
}
 8004782:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004784:	f3bf 8f6f 	isb	sy
}
 8004788:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	e000ed90 	.word	0xe000ed90
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	785a      	ldrb	r2, [r3, #1]
 80047ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004824 <HAL_MPU_ConfigRegion+0x84>)
 80047ae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d029      	beq.n	800480c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80047b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004824 <HAL_MPU_ConfigRegion+0x84>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	7b1b      	ldrb	r3, [r3, #12]
 80047c4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	7adb      	ldrb	r3, [r3, #11]
 80047ca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80047cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	7a9b      	ldrb	r3, [r3, #10]
 80047d2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80047d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	7b5b      	ldrb	r3, [r3, #13]
 80047da:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80047dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	7b9b      	ldrb	r3, [r3, #14]
 80047e2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80047e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	7bdb      	ldrb	r3, [r3, #15]
 80047ea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80047ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	7a5b      	ldrb	r3, [r3, #9]
 80047f2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80047f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	7a1b      	ldrb	r3, [r3, #8]
 80047fa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80047fc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	7812      	ldrb	r2, [r2, #0]
 8004802:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004804:	4a07      	ldr	r2, [pc, #28]	@ (8004824 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004806:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004808:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800480a:	e005      	b.n	8004818 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800480c:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <HAL_MPU_ConfigRegion+0x84>)
 800480e:	2200      	movs	r2, #0
 8004810:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004812:	4b04      	ldr	r3, [pc, #16]	@ (8004824 <HAL_MPU_ConfigRegion+0x84>)
 8004814:	2200      	movs	r2, #0
 8004816:	611a      	str	r2, [r3, #16]
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	e000ed90 	.word	0xe000ed90

08004828 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e014      	b.n	8004864 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	791b      	ldrb	r3, [r3, #4]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d105      	bne.n	8004850 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc fcb6 	bl	80011bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	795b      	ldrb	r3, [r3, #5]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_DAC_ConfigChannel+0x18>
 8004880:	2302      	movs	r3, #2
 8004882:	e12a      	b.n	8004ada <HAL_DAC_ConfigChannel+0x26e>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2202      	movs	r2, #2
 800488e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b04      	cmp	r3, #4
 8004896:	f040 8081 	bne.w	800499c <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800489a:	f7fd ff99 	bl	80027d0 <HAL_GetTick>
 800489e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d140      	bne.n	8004928 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048a6:	e018      	b.n	80048da <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80048a8:	f7fd ff92 	bl	80027d0 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d911      	bls.n	80048da <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048bc:	4b89      	ldr	r3, [pc, #548]	@ (8004ae4 <HAL_DAC_ConfigChannel+0x278>)
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f043 0208 	orr.w	r2, r3, #8
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2203      	movs	r2, #3
 80048d4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0ff      	b.n	8004ada <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048e0:	4b80      	ldr	r3, [pc, #512]	@ (8004ae4 <HAL_DAC_ConfigChannel+0x278>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1df      	bne.n	80048a8 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80048e8:	2001      	movs	r0, #1
 80048ea:	f7fd ff7d 	bl	80027e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	6992      	ldr	r2, [r2, #24]
 80048f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80048f8:	e023      	b.n	8004942 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80048fa:	f7fd ff69 	bl	80027d0 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d90f      	bls.n	8004928 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490e:	2b00      	cmp	r3, #0
 8004910:	da0a      	bge.n	8004928 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f043 0208 	orr.w	r2, r3, #8
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2203      	movs	r2, #3
 8004922:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e0d8      	b.n	8004ada <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800492e:	2b00      	cmp	r3, #0
 8004930:	dbe3      	blt.n	80048fa <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8004932:	2001      	movs	r0, #1
 8004934:	f7fd ff58 	bl	80027e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	6992      	ldr	r2, [r2, #24]
 8004940:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004952:	fa01 f303 	lsl.w	r3, r1, r3
 8004956:	43db      	mvns	r3, r3
 8004958:	ea02 0103 	and.w	r1, r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	409a      	lsls	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	21ff      	movs	r1, #255	@ 0xff
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	ea02 0103 	and.w	r1, r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6a1a      	ldr	r2, [r3, #32]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	409a      	lsls	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d11d      	bne.n	80049e0 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	221f      	movs	r2, #31
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43db      	mvns	r3, r3
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4013      	ands	r3, r2
 80049be:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2207      	movs	r2, #7
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4013      	ands	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d102      	bne.n	8004a0a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	e00f      	b.n	8004a2a <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d102      	bne.n	8004a18 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
 8004a16:	e008      	b.n	8004a2a <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004a20:	2301      	movs	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e001      	b.n	8004a2a <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f003 0310 	and.w	r3, r3, #16
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6819      	ldr	r1, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	43da      	mvns	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	400a      	ands	r2, r1
 8004a70:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	22c0      	movs	r2, #192	@ 0xc0
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	400a      	ands	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20008000 	.word	0x20008000

08004ae8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004af0:	f7fd fe6e 	bl	80027d0 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e316      	b.n	800512e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a66      	ldr	r2, [pc, #408]	@ (8004ca0 <HAL_DMA_Init+0x1b8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d04a      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a65      	ldr	r2, [pc, #404]	@ (8004ca4 <HAL_DMA_Init+0x1bc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d045      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a63      	ldr	r2, [pc, #396]	@ (8004ca8 <HAL_DMA_Init+0x1c0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d040      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a62      	ldr	r2, [pc, #392]	@ (8004cac <HAL_DMA_Init+0x1c4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d03b      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a60      	ldr	r2, [pc, #384]	@ (8004cb0 <HAL_DMA_Init+0x1c8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d036      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a5f      	ldr	r2, [pc, #380]	@ (8004cb4 <HAL_DMA_Init+0x1cc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d031      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a5d      	ldr	r2, [pc, #372]	@ (8004cb8 <HAL_DMA_Init+0x1d0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d02c      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a5c      	ldr	r2, [pc, #368]	@ (8004cbc <HAL_DMA_Init+0x1d4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d027      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a5a      	ldr	r2, [pc, #360]	@ (8004cc0 <HAL_DMA_Init+0x1d8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d022      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a59      	ldr	r2, [pc, #356]	@ (8004cc4 <HAL_DMA_Init+0x1dc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d01d      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a57      	ldr	r2, [pc, #348]	@ (8004cc8 <HAL_DMA_Init+0x1e0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d018      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a56      	ldr	r2, [pc, #344]	@ (8004ccc <HAL_DMA_Init+0x1e4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a54      	ldr	r2, [pc, #336]	@ (8004cd0 <HAL_DMA_Init+0x1e8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00e      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a53      	ldr	r2, [pc, #332]	@ (8004cd4 <HAL_DMA_Init+0x1ec>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a51      	ldr	r2, [pc, #324]	@ (8004cd8 <HAL_DMA_Init+0x1f0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a50      	ldr	r2, [pc, #320]	@ (8004cdc <HAL_DMA_Init+0x1f4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_DMA_Init+0xbc>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_DMA_Init+0xbe>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 813b 	beq.w	8004e22 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a37      	ldr	r2, [pc, #220]	@ (8004ca0 <HAL_DMA_Init+0x1b8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d04a      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a36      	ldr	r2, [pc, #216]	@ (8004ca4 <HAL_DMA_Init+0x1bc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d045      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a34      	ldr	r2, [pc, #208]	@ (8004ca8 <HAL_DMA_Init+0x1c0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d040      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a33      	ldr	r2, [pc, #204]	@ (8004cac <HAL_DMA_Init+0x1c4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d03b      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a31      	ldr	r2, [pc, #196]	@ (8004cb0 <HAL_DMA_Init+0x1c8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d036      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a30      	ldr	r2, [pc, #192]	@ (8004cb4 <HAL_DMA_Init+0x1cc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d031      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2e      	ldr	r2, [pc, #184]	@ (8004cb8 <HAL_DMA_Init+0x1d0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d02c      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a2d      	ldr	r2, [pc, #180]	@ (8004cbc <HAL_DMA_Init+0x1d4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d027      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a2b      	ldr	r2, [pc, #172]	@ (8004cc0 <HAL_DMA_Init+0x1d8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d022      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cc4 <HAL_DMA_Init+0x1dc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d01d      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a28      	ldr	r2, [pc, #160]	@ (8004cc8 <HAL_DMA_Init+0x1e0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d018      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a27      	ldr	r2, [pc, #156]	@ (8004ccc <HAL_DMA_Init+0x1e4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a25      	ldr	r2, [pc, #148]	@ (8004cd0 <HAL_DMA_Init+0x1e8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a24      	ldr	r2, [pc, #144]	@ (8004cd4 <HAL_DMA_Init+0x1ec>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a22      	ldr	r2, [pc, #136]	@ (8004cd8 <HAL_DMA_Init+0x1f0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a21      	ldr	r2, [pc, #132]	@ (8004cdc <HAL_DMA_Init+0x1f4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d108      	bne.n	8004c6e <HAL_DMA_Init+0x186>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	e007      	b.n	8004c7e <HAL_DMA_Init+0x196>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0201 	bic.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c7e:	e02f      	b.n	8004ce0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c80:	f7fd fda6 	bl	80027d0 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b05      	cmp	r3, #5
 8004c8c:	d928      	bls.n	8004ce0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2203      	movs	r2, #3
 8004c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e246      	b.n	800512e <HAL_DMA_Init+0x646>
 8004ca0:	40020010 	.word	0x40020010
 8004ca4:	40020028 	.word	0x40020028
 8004ca8:	40020040 	.word	0x40020040
 8004cac:	40020058 	.word	0x40020058
 8004cb0:	40020070 	.word	0x40020070
 8004cb4:	40020088 	.word	0x40020088
 8004cb8:	400200a0 	.word	0x400200a0
 8004cbc:	400200b8 	.word	0x400200b8
 8004cc0:	40020410 	.word	0x40020410
 8004cc4:	40020428 	.word	0x40020428
 8004cc8:	40020440 	.word	0x40020440
 8004ccc:	40020458 	.word	0x40020458
 8004cd0:	40020470 	.word	0x40020470
 8004cd4:	40020488 	.word	0x40020488
 8004cd8:	400204a0 	.word	0x400204a0
 8004cdc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1c8      	bne.n	8004c80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4b83      	ldr	r3, [pc, #524]	@ (8004f08 <HAL_DMA_Init+0x420>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d107      	bne.n	8004d44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d44:	4b71      	ldr	r3, [pc, #452]	@ (8004f0c <HAL_DMA_Init+0x424>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	4b71      	ldr	r3, [pc, #452]	@ (8004f10 <HAL_DMA_Init+0x428>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d50:	d328      	bcc.n	8004da4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b28      	cmp	r3, #40	@ 0x28
 8004d58:	d903      	bls.n	8004d62 <HAL_DMA_Init+0x27a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d60:	d917      	bls.n	8004d92 <HAL_DMA_Init+0x2aa>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d68:	d903      	bls.n	8004d72 <HAL_DMA_Init+0x28a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b42      	cmp	r3, #66	@ 0x42
 8004d70:	d90f      	bls.n	8004d92 <HAL_DMA_Init+0x2aa>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b46      	cmp	r3, #70	@ 0x46
 8004d78:	d903      	bls.n	8004d82 <HAL_DMA_Init+0x29a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b48      	cmp	r3, #72	@ 0x48
 8004d80:	d907      	bls.n	8004d92 <HAL_DMA_Init+0x2aa>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b4e      	cmp	r3, #78	@ 0x4e
 8004d88:	d905      	bls.n	8004d96 <HAL_DMA_Init+0x2ae>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b52      	cmp	r3, #82	@ 0x52
 8004d90:	d801      	bhi.n	8004d96 <HAL_DMA_Init+0x2ae>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <HAL_DMA_Init+0x2b0>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004da2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 0307 	bic.w	r3, r3, #7
 8004dba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d117      	bne.n	8004dfe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00e      	beq.n	8004dfe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f002 fce9 	bl	80077b8 <DMA_CheckFifoParam>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2240      	movs	r2, #64	@ 0x40
 8004df0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e197      	b.n	800512e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f002 fc24 	bl	8007654 <DMA_CalcBaseAndBitshift>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	223f      	movs	r2, #63	@ 0x3f
 8004e1a:	409a      	lsls	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	e0cd      	b.n	8004fbe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a3b      	ldr	r2, [pc, #236]	@ (8004f14 <HAL_DMA_Init+0x42c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a39      	ldr	r2, [pc, #228]	@ (8004f18 <HAL_DMA_Init+0x430>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01d      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a38      	ldr	r2, [pc, #224]	@ (8004f1c <HAL_DMA_Init+0x434>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a36      	ldr	r2, [pc, #216]	@ (8004f20 <HAL_DMA_Init+0x438>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a35      	ldr	r2, [pc, #212]	@ (8004f24 <HAL_DMA_Init+0x43c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a33      	ldr	r2, [pc, #204]	@ (8004f28 <HAL_DMA_Init+0x440>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a32      	ldr	r2, [pc, #200]	@ (8004f2c <HAL_DMA_Init+0x444>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a30      	ldr	r2, [pc, #192]	@ (8004f30 <HAL_DMA_Init+0x448>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d101      	bne.n	8004e76 <HAL_DMA_Init+0x38e>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <HAL_DMA_Init+0x390>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8097 	beq.w	8004fac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a24      	ldr	r2, [pc, #144]	@ (8004f14 <HAL_DMA_Init+0x42c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d021      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a22      	ldr	r2, [pc, #136]	@ (8004f18 <HAL_DMA_Init+0x430>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01c      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a21      	ldr	r2, [pc, #132]	@ (8004f1c <HAL_DMA_Init+0x434>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d017      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f20 <HAL_DMA_Init+0x438>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d012      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8004f24 <HAL_DMA_Init+0x43c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00d      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f28 <HAL_DMA_Init+0x440>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d008      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8004f2c <HAL_DMA_Init+0x444>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a19      	ldr	r2, [pc, #100]	@ (8004f30 <HAL_DMA_Init+0x448>)
 8004eca:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4b13      	ldr	r3, [pc, #76]	@ (8004f34 <HAL_DMA_Init+0x44c>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d021      	beq.n	8004f38 <HAL_DMA_Init+0x450>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b80      	cmp	r3, #128	@ 0x80
 8004efa:	d102      	bne.n	8004f02 <HAL_DMA_Init+0x41a>
 8004efc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004f00:	e01b      	b.n	8004f3a <HAL_DMA_Init+0x452>
 8004f02:	2300      	movs	r3, #0
 8004f04:	e019      	b.n	8004f3a <HAL_DMA_Init+0x452>
 8004f06:	bf00      	nop
 8004f08:	fe10803f 	.word	0xfe10803f
 8004f0c:	5c001000 	.word	0x5c001000
 8004f10:	ffff0000 	.word	0xffff0000
 8004f14:	58025408 	.word	0x58025408
 8004f18:	5802541c 	.word	0x5802541c
 8004f1c:	58025430 	.word	0x58025430
 8004f20:	58025444 	.word	0x58025444
 8004f24:	58025458 	.word	0x58025458
 8004f28:	5802546c 	.word	0x5802546c
 8004f2c:	58025480 	.word	0x58025480
 8004f30:	58025494 	.word	0x58025494
 8004f34:	fffe000f 	.word	0xfffe000f
 8004f38:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68d2      	ldr	r2, [r2, #12]
 8004f3e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f68:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4b6e      	ldr	r3, [pc, #440]	@ (8005138 <HAL_DMA_Init+0x650>)
 8004f80:	4413      	add	r3, r2
 8004f82:	4a6e      	ldr	r2, [pc, #440]	@ (800513c <HAL_DMA_Init+0x654>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	009a      	lsls	r2, r3, #2
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f002 fb5f 	bl	8007654 <DMA_CalcBaseAndBitshift>
 8004f96:	4603      	mov	r3, r0
 8004f98:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	e008      	b.n	8004fbe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2240      	movs	r2, #64	@ 0x40
 8004fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e0b7      	b.n	800512e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a5f      	ldr	r2, [pc, #380]	@ (8005140 <HAL_DMA_Init+0x658>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d072      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a5d      	ldr	r2, [pc, #372]	@ (8005144 <HAL_DMA_Init+0x65c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d06d      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a5c      	ldr	r2, [pc, #368]	@ (8005148 <HAL_DMA_Init+0x660>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d068      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a5a      	ldr	r2, [pc, #360]	@ (800514c <HAL_DMA_Init+0x664>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d063      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a59      	ldr	r2, [pc, #356]	@ (8005150 <HAL_DMA_Init+0x668>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d05e      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a57      	ldr	r2, [pc, #348]	@ (8005154 <HAL_DMA_Init+0x66c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d059      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a56      	ldr	r2, [pc, #344]	@ (8005158 <HAL_DMA_Init+0x670>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d054      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a54      	ldr	r2, [pc, #336]	@ (800515c <HAL_DMA_Init+0x674>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d04f      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a53      	ldr	r2, [pc, #332]	@ (8005160 <HAL_DMA_Init+0x678>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d04a      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a51      	ldr	r2, [pc, #324]	@ (8005164 <HAL_DMA_Init+0x67c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d045      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a50      	ldr	r2, [pc, #320]	@ (8005168 <HAL_DMA_Init+0x680>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d040      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a4e      	ldr	r2, [pc, #312]	@ (800516c <HAL_DMA_Init+0x684>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d03b      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a4d      	ldr	r2, [pc, #308]	@ (8005170 <HAL_DMA_Init+0x688>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d036      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a4b      	ldr	r2, [pc, #300]	@ (8005174 <HAL_DMA_Init+0x68c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d031      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a4a      	ldr	r2, [pc, #296]	@ (8005178 <HAL_DMA_Init+0x690>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d02c      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a48      	ldr	r2, [pc, #288]	@ (800517c <HAL_DMA_Init+0x694>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d027      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a47      	ldr	r2, [pc, #284]	@ (8005180 <HAL_DMA_Init+0x698>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d022      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a45      	ldr	r2, [pc, #276]	@ (8005184 <HAL_DMA_Init+0x69c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01d      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a44      	ldr	r2, [pc, #272]	@ (8005188 <HAL_DMA_Init+0x6a0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d018      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a42      	ldr	r2, [pc, #264]	@ (800518c <HAL_DMA_Init+0x6a4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a41      	ldr	r2, [pc, #260]	@ (8005190 <HAL_DMA_Init+0x6a8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00e      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a3f      	ldr	r2, [pc, #252]	@ (8005194 <HAL_DMA_Init+0x6ac>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a3e      	ldr	r2, [pc, #248]	@ (8005198 <HAL_DMA_Init+0x6b0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a3c      	ldr	r2, [pc, #240]	@ (800519c <HAL_DMA_Init+0x6b4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d101      	bne.n	80050b2 <HAL_DMA_Init+0x5ca>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <HAL_DMA_Init+0x5cc>
 80050b2:	2300      	movs	r3, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d032      	beq.n	800511e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f002 fbf9 	bl	80078b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b80      	cmp	r3, #128	@ 0x80
 80050c4:	d102      	bne.n	80050cc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d010      	beq.n	800510c <HAL_DMA_Init+0x624>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d80c      	bhi.n	800510c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f002 fc76 	bl	80079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005108:	605a      	str	r2, [r3, #4]
 800510a:	e008      	b.n	800511e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	a7fdabf8 	.word	0xa7fdabf8
 800513c:	cccccccd 	.word	0xcccccccd
 8005140:	40020010 	.word	0x40020010
 8005144:	40020028 	.word	0x40020028
 8005148:	40020040 	.word	0x40020040
 800514c:	40020058 	.word	0x40020058
 8005150:	40020070 	.word	0x40020070
 8005154:	40020088 	.word	0x40020088
 8005158:	400200a0 	.word	0x400200a0
 800515c:	400200b8 	.word	0x400200b8
 8005160:	40020410 	.word	0x40020410
 8005164:	40020428 	.word	0x40020428
 8005168:	40020440 	.word	0x40020440
 800516c:	40020458 	.word	0x40020458
 8005170:	40020470 	.word	0x40020470
 8005174:	40020488 	.word	0x40020488
 8005178:	400204a0 	.word	0x400204a0
 800517c:	400204b8 	.word	0x400204b8
 8005180:	58025408 	.word	0x58025408
 8005184:	5802541c 	.word	0x5802541c
 8005188:	58025430 	.word	0x58025430
 800518c:	58025444 	.word	0x58025444
 8005190:	58025458 	.word	0x58025458
 8005194:	5802546c 	.word	0x5802546c
 8005198:	58025480 	.word	0x58025480
 800519c:	58025494 	.word	0x58025494

080051a0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e1a8      	b.n	8005504 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a82      	ldr	r2, [pc, #520]	@ (80053c0 <HAL_DMA_DeInit+0x220>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d04a      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a80      	ldr	r2, [pc, #512]	@ (80053c4 <HAL_DMA_DeInit+0x224>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d045      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a7f      	ldr	r2, [pc, #508]	@ (80053c8 <HAL_DMA_DeInit+0x228>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d040      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a7d      	ldr	r2, [pc, #500]	@ (80053cc <HAL_DMA_DeInit+0x22c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d03b      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a7c      	ldr	r2, [pc, #496]	@ (80053d0 <HAL_DMA_DeInit+0x230>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d036      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a7a      	ldr	r2, [pc, #488]	@ (80053d4 <HAL_DMA_DeInit+0x234>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d031      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a79      	ldr	r2, [pc, #484]	@ (80053d8 <HAL_DMA_DeInit+0x238>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d02c      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a77      	ldr	r2, [pc, #476]	@ (80053dc <HAL_DMA_DeInit+0x23c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d027      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a76      	ldr	r2, [pc, #472]	@ (80053e0 <HAL_DMA_DeInit+0x240>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d022      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a74      	ldr	r2, [pc, #464]	@ (80053e4 <HAL_DMA_DeInit+0x244>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01d      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a73      	ldr	r2, [pc, #460]	@ (80053e8 <HAL_DMA_DeInit+0x248>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d018      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a71      	ldr	r2, [pc, #452]	@ (80053ec <HAL_DMA_DeInit+0x24c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a70      	ldr	r2, [pc, #448]	@ (80053f0 <HAL_DMA_DeInit+0x250>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a6e      	ldr	r2, [pc, #440]	@ (80053f4 <HAL_DMA_DeInit+0x254>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6d      	ldr	r2, [pc, #436]	@ (80053f8 <HAL_DMA_DeInit+0x258>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_DMA_DeInit+0xb2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a6b      	ldr	r2, [pc, #428]	@ (80053fc <HAL_DMA_DeInit+0x25c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d108      	bne.n	8005264 <HAL_DMA_DeInit+0xc4>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e007      	b.n	8005274 <HAL_DMA_DeInit+0xd4>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0201 	bic.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a51      	ldr	r2, [pc, #324]	@ (80053c0 <HAL_DMA_DeInit+0x220>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d04a      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a50      	ldr	r2, [pc, #320]	@ (80053c4 <HAL_DMA_DeInit+0x224>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d045      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a4e      	ldr	r2, [pc, #312]	@ (80053c8 <HAL_DMA_DeInit+0x228>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d040      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a4d      	ldr	r2, [pc, #308]	@ (80053cc <HAL_DMA_DeInit+0x22c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d03b      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a4b      	ldr	r2, [pc, #300]	@ (80053d0 <HAL_DMA_DeInit+0x230>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d036      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a4a      	ldr	r2, [pc, #296]	@ (80053d4 <HAL_DMA_DeInit+0x234>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d031      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a48      	ldr	r2, [pc, #288]	@ (80053d8 <HAL_DMA_DeInit+0x238>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d02c      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a47      	ldr	r2, [pc, #284]	@ (80053dc <HAL_DMA_DeInit+0x23c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d027      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a45      	ldr	r2, [pc, #276]	@ (80053e0 <HAL_DMA_DeInit+0x240>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d022      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a44      	ldr	r2, [pc, #272]	@ (80053e4 <HAL_DMA_DeInit+0x244>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d01d      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a42      	ldr	r2, [pc, #264]	@ (80053e8 <HAL_DMA_DeInit+0x248>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d018      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a41      	ldr	r2, [pc, #260]	@ (80053ec <HAL_DMA_DeInit+0x24c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d013      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a3f      	ldr	r2, [pc, #252]	@ (80053f0 <HAL_DMA_DeInit+0x250>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00e      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a3e      	ldr	r2, [pc, #248]	@ (80053f4 <HAL_DMA_DeInit+0x254>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d009      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a3c      	ldr	r2, [pc, #240]	@ (80053f8 <HAL_DMA_DeInit+0x258>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d004      	beq.n	8005314 <HAL_DMA_DeInit+0x174>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a3b      	ldr	r2, [pc, #236]	@ (80053fc <HAL_DMA_DeInit+0x25c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d101      	bne.n	8005318 <HAL_DMA_DeInit+0x178>
 8005314:	2301      	movs	r3, #1
 8005316:	e000      	b.n	800531a <HAL_DMA_DeInit+0x17a>
 8005318:	2300      	movs	r3, #0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d025      	beq.n	800536a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2200      	movs	r2, #0
 800533c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2221      	movs	r2, #33	@ 0x21
 800534c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f002 f980 	bl	8007654 <DMA_CalcBaseAndBitshift>
 8005354:	4603      	mov	r3, r0
 8005356:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	223f      	movs	r2, #63	@ 0x3f
 8005362:	409a      	lsls	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	609a      	str	r2, [r3, #8]
 8005368:	e081      	b.n	800546e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a24      	ldr	r2, [pc, #144]	@ (8005400 <HAL_DMA_DeInit+0x260>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d022      	beq.n	80053ba <HAL_DMA_DeInit+0x21a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a22      	ldr	r2, [pc, #136]	@ (8005404 <HAL_DMA_DeInit+0x264>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01d      	beq.n	80053ba <HAL_DMA_DeInit+0x21a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a21      	ldr	r2, [pc, #132]	@ (8005408 <HAL_DMA_DeInit+0x268>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d018      	beq.n	80053ba <HAL_DMA_DeInit+0x21a>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1f      	ldr	r2, [pc, #124]	@ (800540c <HAL_DMA_DeInit+0x26c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_DMA_DeInit+0x21a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1e      	ldr	r2, [pc, #120]	@ (8005410 <HAL_DMA_DeInit+0x270>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00e      	beq.n	80053ba <HAL_DMA_DeInit+0x21a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005414 <HAL_DMA_DeInit+0x274>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_DMA_DeInit+0x21a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005418 <HAL_DMA_DeInit+0x278>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_DMA_DeInit+0x21a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a19      	ldr	r2, [pc, #100]	@ (800541c <HAL_DMA_DeInit+0x27c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d132      	bne.n	8005420 <HAL_DMA_DeInit+0x280>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e031      	b.n	8005422 <HAL_DMA_DeInit+0x282>
 80053be:	bf00      	nop
 80053c0:	40020010 	.word	0x40020010
 80053c4:	40020028 	.word	0x40020028
 80053c8:	40020040 	.word	0x40020040
 80053cc:	40020058 	.word	0x40020058
 80053d0:	40020070 	.word	0x40020070
 80053d4:	40020088 	.word	0x40020088
 80053d8:	400200a0 	.word	0x400200a0
 80053dc:	400200b8 	.word	0x400200b8
 80053e0:	40020410 	.word	0x40020410
 80053e4:	40020428 	.word	0x40020428
 80053e8:	40020440 	.word	0x40020440
 80053ec:	40020458 	.word	0x40020458
 80053f0:	40020470 	.word	0x40020470
 80053f4:	40020488 	.word	0x40020488
 80053f8:	400204a0 	.word	0x400204a0
 80053fc:	400204b8 	.word	0x400204b8
 8005400:	58025408 	.word	0x58025408
 8005404:	5802541c 	.word	0x5802541c
 8005408:	58025430 	.word	0x58025430
 800540c:	58025444 	.word	0x58025444
 8005410:	58025458 	.word	0x58025458
 8005414:	5802546c 	.word	0x5802546c
 8005418:	58025480 	.word	0x58025480
 800541c:	58025494 	.word	0x58025494
 8005420:	2300      	movs	r3, #0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d021      	beq.n	800546a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2200      	movs	r2, #0
 8005434:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2200      	movs	r2, #0
 800543c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2200      	movs	r2, #0
 8005444:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f002 f900 	bl	8007654 <DMA_CalcBaseAndBitshift>
 8005454:	4603      	mov	r3, r0
 8005456:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	2201      	movs	r2, #1
 8005462:	409a      	lsls	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	605a      	str	r2, [r3, #4]
 8005468:	e001      	b.n	800546e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e04a      	b.n	8005504 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f002 fa1e 	bl	80078b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800548c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00f      	beq.n	80054b6 <HAL_DMA_DeInit+0x316>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b08      	cmp	r3, #8
 800549c:	d80b      	bhi.n	80054b6 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f002 faa0 	bl	80079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80054b4:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e226      	b.n	8005976 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_DMA_Start_IT+0x2a>
 8005532:	2302      	movs	r3, #2
 8005534:	e21f      	b.n	8005976 <HAL_DMA_Start_IT+0x46a>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b01      	cmp	r3, #1
 8005548:	f040 820a 	bne.w	8005960 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a68      	ldr	r2, [pc, #416]	@ (8005700 <HAL_DMA_Start_IT+0x1f4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d04a      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a66      	ldr	r2, [pc, #408]	@ (8005704 <HAL_DMA_Start_IT+0x1f8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d045      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a65      	ldr	r2, [pc, #404]	@ (8005708 <HAL_DMA_Start_IT+0x1fc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d040      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a63      	ldr	r2, [pc, #396]	@ (800570c <HAL_DMA_Start_IT+0x200>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d03b      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a62      	ldr	r2, [pc, #392]	@ (8005710 <HAL_DMA_Start_IT+0x204>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d036      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a60      	ldr	r2, [pc, #384]	@ (8005714 <HAL_DMA_Start_IT+0x208>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d031      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a5f      	ldr	r2, [pc, #380]	@ (8005718 <HAL_DMA_Start_IT+0x20c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d02c      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a5d      	ldr	r2, [pc, #372]	@ (800571c <HAL_DMA_Start_IT+0x210>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d027      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a5c      	ldr	r2, [pc, #368]	@ (8005720 <HAL_DMA_Start_IT+0x214>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d022      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a5a      	ldr	r2, [pc, #360]	@ (8005724 <HAL_DMA_Start_IT+0x218>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d01d      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a59      	ldr	r2, [pc, #356]	@ (8005728 <HAL_DMA_Start_IT+0x21c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d018      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a57      	ldr	r2, [pc, #348]	@ (800572c <HAL_DMA_Start_IT+0x220>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a56      	ldr	r2, [pc, #344]	@ (8005730 <HAL_DMA_Start_IT+0x224>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00e      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a54      	ldr	r2, [pc, #336]	@ (8005734 <HAL_DMA_Start_IT+0x228>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d009      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a53      	ldr	r2, [pc, #332]	@ (8005738 <HAL_DMA_Start_IT+0x22c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d004      	beq.n	80055fa <HAL_DMA_Start_IT+0xee>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a51      	ldr	r2, [pc, #324]	@ (800573c <HAL_DMA_Start_IT+0x230>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d108      	bne.n	800560c <HAL_DMA_Start_IT+0x100>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e007      	b.n	800561c <HAL_DMA_Start_IT+0x110>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f001 fe6a 	bl	80072fc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a34      	ldr	r2, [pc, #208]	@ (8005700 <HAL_DMA_Start_IT+0x1f4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d04a      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a33      	ldr	r2, [pc, #204]	@ (8005704 <HAL_DMA_Start_IT+0x1f8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d045      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a31      	ldr	r2, [pc, #196]	@ (8005708 <HAL_DMA_Start_IT+0x1fc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d040      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a30      	ldr	r2, [pc, #192]	@ (800570c <HAL_DMA_Start_IT+0x200>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d03b      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2e      	ldr	r2, [pc, #184]	@ (8005710 <HAL_DMA_Start_IT+0x204>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d036      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a2d      	ldr	r2, [pc, #180]	@ (8005714 <HAL_DMA_Start_IT+0x208>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d031      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a2b      	ldr	r2, [pc, #172]	@ (8005718 <HAL_DMA_Start_IT+0x20c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d02c      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a2a      	ldr	r2, [pc, #168]	@ (800571c <HAL_DMA_Start_IT+0x210>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d027      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a28      	ldr	r2, [pc, #160]	@ (8005720 <HAL_DMA_Start_IT+0x214>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d022      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a27      	ldr	r2, [pc, #156]	@ (8005724 <HAL_DMA_Start_IT+0x218>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d01d      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a25      	ldr	r2, [pc, #148]	@ (8005728 <HAL_DMA_Start_IT+0x21c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d018      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a24      	ldr	r2, [pc, #144]	@ (800572c <HAL_DMA_Start_IT+0x220>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a22      	ldr	r2, [pc, #136]	@ (8005730 <HAL_DMA_Start_IT+0x224>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00e      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a21      	ldr	r2, [pc, #132]	@ (8005734 <HAL_DMA_Start_IT+0x228>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d009      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005738 <HAL_DMA_Start_IT+0x22c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d004      	beq.n	80056c8 <HAL_DMA_Start_IT+0x1bc>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1e      	ldr	r2, [pc, #120]	@ (800573c <HAL_DMA_Start_IT+0x230>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d101      	bne.n	80056cc <HAL_DMA_Start_IT+0x1c0>
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <HAL_DMA_Start_IT+0x1c2>
 80056cc:	2300      	movs	r3, #0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d036      	beq.n	8005740 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f023 021e 	bic.w	r2, r3, #30
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0216 	orr.w	r2, r2, #22
 80056e4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d03e      	beq.n	800576c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0208 	orr.w	r2, r2, #8
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e035      	b.n	800576c <HAL_DMA_Start_IT+0x260>
 8005700:	40020010 	.word	0x40020010
 8005704:	40020028 	.word	0x40020028
 8005708:	40020040 	.word	0x40020040
 800570c:	40020058 	.word	0x40020058
 8005710:	40020070 	.word	0x40020070
 8005714:	40020088 	.word	0x40020088
 8005718:	400200a0 	.word	0x400200a0
 800571c:	400200b8 	.word	0x400200b8
 8005720:	40020410 	.word	0x40020410
 8005724:	40020428 	.word	0x40020428
 8005728:	40020440 	.word	0x40020440
 800572c:	40020458 	.word	0x40020458
 8005730:	40020470 	.word	0x40020470
 8005734:	40020488 	.word	0x40020488
 8005738:	400204a0 	.word	0x400204a0
 800573c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 020e 	bic.w	r2, r3, #14
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 020a 	orr.w	r2, r2, #10
 8005752:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0204 	orr.w	r2, r2, #4
 800576a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a83      	ldr	r2, [pc, #524]	@ (8005980 <HAL_DMA_Start_IT+0x474>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d072      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a82      	ldr	r2, [pc, #520]	@ (8005984 <HAL_DMA_Start_IT+0x478>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d06d      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a80      	ldr	r2, [pc, #512]	@ (8005988 <HAL_DMA_Start_IT+0x47c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d068      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a7f      	ldr	r2, [pc, #508]	@ (800598c <HAL_DMA_Start_IT+0x480>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d063      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a7d      	ldr	r2, [pc, #500]	@ (8005990 <HAL_DMA_Start_IT+0x484>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d05e      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005994 <HAL_DMA_Start_IT+0x488>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d059      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a7a      	ldr	r2, [pc, #488]	@ (8005998 <HAL_DMA_Start_IT+0x48c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d054      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a79      	ldr	r2, [pc, #484]	@ (800599c <HAL_DMA_Start_IT+0x490>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d04f      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a77      	ldr	r2, [pc, #476]	@ (80059a0 <HAL_DMA_Start_IT+0x494>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d04a      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a76      	ldr	r2, [pc, #472]	@ (80059a4 <HAL_DMA_Start_IT+0x498>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d045      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a74      	ldr	r2, [pc, #464]	@ (80059a8 <HAL_DMA_Start_IT+0x49c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d040      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a73      	ldr	r2, [pc, #460]	@ (80059ac <HAL_DMA_Start_IT+0x4a0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d03b      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a71      	ldr	r2, [pc, #452]	@ (80059b0 <HAL_DMA_Start_IT+0x4a4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d036      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a70      	ldr	r2, [pc, #448]	@ (80059b4 <HAL_DMA_Start_IT+0x4a8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d031      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a6e      	ldr	r2, [pc, #440]	@ (80059b8 <HAL_DMA_Start_IT+0x4ac>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d02c      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a6d      	ldr	r2, [pc, #436]	@ (80059bc <HAL_DMA_Start_IT+0x4b0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d027      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a6b      	ldr	r2, [pc, #428]	@ (80059c0 <HAL_DMA_Start_IT+0x4b4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d022      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a6a      	ldr	r2, [pc, #424]	@ (80059c4 <HAL_DMA_Start_IT+0x4b8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d01d      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a68      	ldr	r2, [pc, #416]	@ (80059c8 <HAL_DMA_Start_IT+0x4bc>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d018      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a67      	ldr	r2, [pc, #412]	@ (80059cc <HAL_DMA_Start_IT+0x4c0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d013      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a65      	ldr	r2, [pc, #404]	@ (80059d0 <HAL_DMA_Start_IT+0x4c4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00e      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a64      	ldr	r2, [pc, #400]	@ (80059d4 <HAL_DMA_Start_IT+0x4c8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d009      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a62      	ldr	r2, [pc, #392]	@ (80059d8 <HAL_DMA_Start_IT+0x4cc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d004      	beq.n	800585c <HAL_DMA_Start_IT+0x350>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a61      	ldr	r2, [pc, #388]	@ (80059dc <HAL_DMA_Start_IT+0x4d0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d101      	bne.n	8005860 <HAL_DMA_Start_IT+0x354>
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <HAL_DMA_Start_IT+0x356>
 8005860:	2300      	movs	r3, #0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01a      	beq.n	800589c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800587e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005882:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d007      	beq.n	800589c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005896:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800589a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a37      	ldr	r2, [pc, #220]	@ (8005980 <HAL_DMA_Start_IT+0x474>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d04a      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a36      	ldr	r2, [pc, #216]	@ (8005984 <HAL_DMA_Start_IT+0x478>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d045      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a34      	ldr	r2, [pc, #208]	@ (8005988 <HAL_DMA_Start_IT+0x47c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d040      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a33      	ldr	r2, [pc, #204]	@ (800598c <HAL_DMA_Start_IT+0x480>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d03b      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a31      	ldr	r2, [pc, #196]	@ (8005990 <HAL_DMA_Start_IT+0x484>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d036      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a30      	ldr	r2, [pc, #192]	@ (8005994 <HAL_DMA_Start_IT+0x488>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d031      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005998 <HAL_DMA_Start_IT+0x48c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d02c      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2d      	ldr	r2, [pc, #180]	@ (800599c <HAL_DMA_Start_IT+0x490>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d027      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2b      	ldr	r2, [pc, #172]	@ (80059a0 <HAL_DMA_Start_IT+0x494>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d022      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a2a      	ldr	r2, [pc, #168]	@ (80059a4 <HAL_DMA_Start_IT+0x498>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d01d      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a28      	ldr	r2, [pc, #160]	@ (80059a8 <HAL_DMA_Start_IT+0x49c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d018      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a27      	ldr	r2, [pc, #156]	@ (80059ac <HAL_DMA_Start_IT+0x4a0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d013      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a25      	ldr	r2, [pc, #148]	@ (80059b0 <HAL_DMA_Start_IT+0x4a4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00e      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a24      	ldr	r2, [pc, #144]	@ (80059b4 <HAL_DMA_Start_IT+0x4a8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d009      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a22      	ldr	r2, [pc, #136]	@ (80059b8 <HAL_DMA_Start_IT+0x4ac>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_DMA_Start_IT+0x430>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a21      	ldr	r2, [pc, #132]	@ (80059bc <HAL_DMA_Start_IT+0x4b0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d108      	bne.n	800594e <HAL_DMA_Start_IT+0x442>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e012      	b.n	8005974 <HAL_DMA_Start_IT+0x468>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f042 0201 	orr.w	r2, r2, #1
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e009      	b.n	8005974 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005966:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005974:	7dfb      	ldrb	r3, [r7, #23]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40020010 	.word	0x40020010
 8005984:	40020028 	.word	0x40020028
 8005988:	40020040 	.word	0x40020040
 800598c:	40020058 	.word	0x40020058
 8005990:	40020070 	.word	0x40020070
 8005994:	40020088 	.word	0x40020088
 8005998:	400200a0 	.word	0x400200a0
 800599c:	400200b8 	.word	0x400200b8
 80059a0:	40020410 	.word	0x40020410
 80059a4:	40020428 	.word	0x40020428
 80059a8:	40020440 	.word	0x40020440
 80059ac:	40020458 	.word	0x40020458
 80059b0:	40020470 	.word	0x40020470
 80059b4:	40020488 	.word	0x40020488
 80059b8:	400204a0 	.word	0x400204a0
 80059bc:	400204b8 	.word	0x400204b8
 80059c0:	58025408 	.word	0x58025408
 80059c4:	5802541c 	.word	0x5802541c
 80059c8:	58025430 	.word	0x58025430
 80059cc:	58025444 	.word	0x58025444
 80059d0:	58025458 	.word	0x58025458
 80059d4:	5802546c 	.word	0x5802546c
 80059d8:	58025480 	.word	0x58025480
 80059dc:	58025494 	.word	0x58025494

080059e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80059e8:	f7fc fef2 	bl	80027d0 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e2dc      	b.n	8005fb2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d008      	beq.n	8005a16 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2280      	movs	r2, #128	@ 0x80
 8005a08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e2cd      	b.n	8005fb2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a76      	ldr	r2, [pc, #472]	@ (8005bf4 <HAL_DMA_Abort+0x214>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d04a      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a74      	ldr	r2, [pc, #464]	@ (8005bf8 <HAL_DMA_Abort+0x218>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d045      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a73      	ldr	r2, [pc, #460]	@ (8005bfc <HAL_DMA_Abort+0x21c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d040      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a71      	ldr	r2, [pc, #452]	@ (8005c00 <HAL_DMA_Abort+0x220>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d03b      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a70      	ldr	r2, [pc, #448]	@ (8005c04 <HAL_DMA_Abort+0x224>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d036      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8005c08 <HAL_DMA_Abort+0x228>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d031      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a6d      	ldr	r2, [pc, #436]	@ (8005c0c <HAL_DMA_Abort+0x22c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d02c      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a6b      	ldr	r2, [pc, #428]	@ (8005c10 <HAL_DMA_Abort+0x230>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d027      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a6a      	ldr	r2, [pc, #424]	@ (8005c14 <HAL_DMA_Abort+0x234>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d022      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a68      	ldr	r2, [pc, #416]	@ (8005c18 <HAL_DMA_Abort+0x238>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01d      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a67      	ldr	r2, [pc, #412]	@ (8005c1c <HAL_DMA_Abort+0x23c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d018      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a65      	ldr	r2, [pc, #404]	@ (8005c20 <HAL_DMA_Abort+0x240>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a64      	ldr	r2, [pc, #400]	@ (8005c24 <HAL_DMA_Abort+0x244>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00e      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a62      	ldr	r2, [pc, #392]	@ (8005c28 <HAL_DMA_Abort+0x248>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d009      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a61      	ldr	r2, [pc, #388]	@ (8005c2c <HAL_DMA_Abort+0x24c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d004      	beq.n	8005ab6 <HAL_DMA_Abort+0xd6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a5f      	ldr	r2, [pc, #380]	@ (8005c30 <HAL_DMA_Abort+0x250>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d101      	bne.n	8005aba <HAL_DMA_Abort+0xda>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_DMA_Abort+0xdc>
 8005aba:	2300      	movs	r3, #0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d013      	beq.n	8005ae8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 021e 	bic.w	r2, r2, #30
 8005ace:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ade:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	e00a      	b.n	8005afe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 020e 	bic.w	r2, r2, #14
 8005af6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a3c      	ldr	r2, [pc, #240]	@ (8005bf4 <HAL_DMA_Abort+0x214>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d072      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8005bf8 <HAL_DMA_Abort+0x218>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d06d      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a39      	ldr	r2, [pc, #228]	@ (8005bfc <HAL_DMA_Abort+0x21c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d068      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a37      	ldr	r2, [pc, #220]	@ (8005c00 <HAL_DMA_Abort+0x220>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d063      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a36      	ldr	r2, [pc, #216]	@ (8005c04 <HAL_DMA_Abort+0x224>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d05e      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a34      	ldr	r2, [pc, #208]	@ (8005c08 <HAL_DMA_Abort+0x228>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d059      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a33      	ldr	r2, [pc, #204]	@ (8005c0c <HAL_DMA_Abort+0x22c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d054      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a31      	ldr	r2, [pc, #196]	@ (8005c10 <HAL_DMA_Abort+0x230>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d04f      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a30      	ldr	r2, [pc, #192]	@ (8005c14 <HAL_DMA_Abort+0x234>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d04a      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a2e      	ldr	r2, [pc, #184]	@ (8005c18 <HAL_DMA_Abort+0x238>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d045      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a2d      	ldr	r2, [pc, #180]	@ (8005c1c <HAL_DMA_Abort+0x23c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d040      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a2b      	ldr	r2, [pc, #172]	@ (8005c20 <HAL_DMA_Abort+0x240>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d03b      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a2a      	ldr	r2, [pc, #168]	@ (8005c24 <HAL_DMA_Abort+0x244>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d036      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a28      	ldr	r2, [pc, #160]	@ (8005c28 <HAL_DMA_Abort+0x248>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d031      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a27      	ldr	r2, [pc, #156]	@ (8005c2c <HAL_DMA_Abort+0x24c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d02c      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a25      	ldr	r2, [pc, #148]	@ (8005c30 <HAL_DMA_Abort+0x250>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d027      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a24      	ldr	r2, [pc, #144]	@ (8005c34 <HAL_DMA_Abort+0x254>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a22      	ldr	r2, [pc, #136]	@ (8005c38 <HAL_DMA_Abort+0x258>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01d      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a21      	ldr	r2, [pc, #132]	@ (8005c3c <HAL_DMA_Abort+0x25c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c40 <HAL_DMA_Abort+0x260>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1e      	ldr	r2, [pc, #120]	@ (8005c44 <HAL_DMA_Abort+0x264>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c48 <HAL_DMA_Abort+0x268>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1b      	ldr	r2, [pc, #108]	@ (8005c4c <HAL_DMA_Abort+0x26c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_DMA_Abort+0x20e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a19      	ldr	r2, [pc, #100]	@ (8005c50 <HAL_DMA_Abort+0x270>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d132      	bne.n	8005c54 <HAL_DMA_Abort+0x274>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e031      	b.n	8005c56 <HAL_DMA_Abort+0x276>
 8005bf2:	bf00      	nop
 8005bf4:	40020010 	.word	0x40020010
 8005bf8:	40020028 	.word	0x40020028
 8005bfc:	40020040 	.word	0x40020040
 8005c00:	40020058 	.word	0x40020058
 8005c04:	40020070 	.word	0x40020070
 8005c08:	40020088 	.word	0x40020088
 8005c0c:	400200a0 	.word	0x400200a0
 8005c10:	400200b8 	.word	0x400200b8
 8005c14:	40020410 	.word	0x40020410
 8005c18:	40020428 	.word	0x40020428
 8005c1c:	40020440 	.word	0x40020440
 8005c20:	40020458 	.word	0x40020458
 8005c24:	40020470 	.word	0x40020470
 8005c28:	40020488 	.word	0x40020488
 8005c2c:	400204a0 	.word	0x400204a0
 8005c30:	400204b8 	.word	0x400204b8
 8005c34:	58025408 	.word	0x58025408
 8005c38:	5802541c 	.word	0x5802541c
 8005c3c:	58025430 	.word	0x58025430
 8005c40:	58025444 	.word	0x58025444
 8005c44:	58025458 	.word	0x58025458
 8005c48:	5802546c 	.word	0x5802546c
 8005c4c:	58025480 	.word	0x58025480
 8005c50:	58025494 	.word	0x58025494
 8005c54:	2300      	movs	r3, #0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c68:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a6d      	ldr	r2, [pc, #436]	@ (8005e24 <HAL_DMA_Abort+0x444>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d04a      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a6b      	ldr	r2, [pc, #428]	@ (8005e28 <HAL_DMA_Abort+0x448>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d045      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a6a      	ldr	r2, [pc, #424]	@ (8005e2c <HAL_DMA_Abort+0x44c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d040      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a68      	ldr	r2, [pc, #416]	@ (8005e30 <HAL_DMA_Abort+0x450>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d03b      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a67      	ldr	r2, [pc, #412]	@ (8005e34 <HAL_DMA_Abort+0x454>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d036      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a65      	ldr	r2, [pc, #404]	@ (8005e38 <HAL_DMA_Abort+0x458>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d031      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a64      	ldr	r2, [pc, #400]	@ (8005e3c <HAL_DMA_Abort+0x45c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d02c      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a62      	ldr	r2, [pc, #392]	@ (8005e40 <HAL_DMA_Abort+0x460>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d027      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a61      	ldr	r2, [pc, #388]	@ (8005e44 <HAL_DMA_Abort+0x464>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d022      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a5f      	ldr	r2, [pc, #380]	@ (8005e48 <HAL_DMA_Abort+0x468>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01d      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8005e4c <HAL_DMA_Abort+0x46c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d018      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a5c      	ldr	r2, [pc, #368]	@ (8005e50 <HAL_DMA_Abort+0x470>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8005e54 <HAL_DMA_Abort+0x474>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00e      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a59      	ldr	r2, [pc, #356]	@ (8005e58 <HAL_DMA_Abort+0x478>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d009      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a58      	ldr	r2, [pc, #352]	@ (8005e5c <HAL_DMA_Abort+0x47c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d004      	beq.n	8005d0a <HAL_DMA_Abort+0x32a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a56      	ldr	r2, [pc, #344]	@ (8005e60 <HAL_DMA_Abort+0x480>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d108      	bne.n	8005d1c <HAL_DMA_Abort+0x33c>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0201 	bic.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e007      	b.n	8005d2c <HAL_DMA_Abort+0x34c>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0201 	bic.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005d2c:	e013      	b.n	8005d56 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d2e:	f7fc fd4f 	bl	80027d0 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	d90c      	bls.n	8005d56 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2203      	movs	r2, #3
 8005d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e12d      	b.n	8005fb2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e5      	bne.n	8005d2e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a2f      	ldr	r2, [pc, #188]	@ (8005e24 <HAL_DMA_Abort+0x444>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d04a      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a2d      	ldr	r2, [pc, #180]	@ (8005e28 <HAL_DMA_Abort+0x448>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d045      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8005e2c <HAL_DMA_Abort+0x44c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d040      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a2a      	ldr	r2, [pc, #168]	@ (8005e30 <HAL_DMA_Abort+0x450>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d03b      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a29      	ldr	r2, [pc, #164]	@ (8005e34 <HAL_DMA_Abort+0x454>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d036      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a27      	ldr	r2, [pc, #156]	@ (8005e38 <HAL_DMA_Abort+0x458>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d031      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a26      	ldr	r2, [pc, #152]	@ (8005e3c <HAL_DMA_Abort+0x45c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d02c      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a24      	ldr	r2, [pc, #144]	@ (8005e40 <HAL_DMA_Abort+0x460>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d027      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a23      	ldr	r2, [pc, #140]	@ (8005e44 <HAL_DMA_Abort+0x464>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d022      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a21      	ldr	r2, [pc, #132]	@ (8005e48 <HAL_DMA_Abort+0x468>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01d      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a20      	ldr	r2, [pc, #128]	@ (8005e4c <HAL_DMA_Abort+0x46c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d018      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8005e50 <HAL_DMA_Abort+0x470>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1d      	ldr	r2, [pc, #116]	@ (8005e54 <HAL_DMA_Abort+0x474>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00e      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e58 <HAL_DMA_Abort+0x478>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d009      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e5c <HAL_DMA_Abort+0x47c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d004      	beq.n	8005e02 <HAL_DMA_Abort+0x422>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a18      	ldr	r2, [pc, #96]	@ (8005e60 <HAL_DMA_Abort+0x480>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d101      	bne.n	8005e06 <HAL_DMA_Abort+0x426>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <HAL_DMA_Abort+0x428>
 8005e06:	2300      	movs	r3, #0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d02b      	beq.n	8005e64 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e10:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	223f      	movs	r2, #63	@ 0x3f
 8005e1c:	409a      	lsls	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	609a      	str	r2, [r3, #8]
 8005e22:	e02a      	b.n	8005e7a <HAL_DMA_Abort+0x49a>
 8005e24:	40020010 	.word	0x40020010
 8005e28:	40020028 	.word	0x40020028
 8005e2c:	40020040 	.word	0x40020040
 8005e30:	40020058 	.word	0x40020058
 8005e34:	40020070 	.word	0x40020070
 8005e38:	40020088 	.word	0x40020088
 8005e3c:	400200a0 	.word	0x400200a0
 8005e40:	400200b8 	.word	0x400200b8
 8005e44:	40020410 	.word	0x40020410
 8005e48:	40020428 	.word	0x40020428
 8005e4c:	40020440 	.word	0x40020440
 8005e50:	40020458 	.word	0x40020458
 8005e54:	40020470 	.word	0x40020470
 8005e58:	40020488 	.word	0x40020488
 8005e5c:	400204a0 	.word	0x400204a0
 8005e60:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e68:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e6e:	f003 031f 	and.w	r3, r3, #31
 8005e72:	2201      	movs	r2, #1
 8005e74:	409a      	lsls	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a4f      	ldr	r2, [pc, #316]	@ (8005fbc <HAL_DMA_Abort+0x5dc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d072      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a4d      	ldr	r2, [pc, #308]	@ (8005fc0 <HAL_DMA_Abort+0x5e0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d06d      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a4c      	ldr	r2, [pc, #304]	@ (8005fc4 <HAL_DMA_Abort+0x5e4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d068      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8005fc8 <HAL_DMA_Abort+0x5e8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d063      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a49      	ldr	r2, [pc, #292]	@ (8005fcc <HAL_DMA_Abort+0x5ec>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d05e      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a47      	ldr	r2, [pc, #284]	@ (8005fd0 <HAL_DMA_Abort+0x5f0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d059      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a46      	ldr	r2, [pc, #280]	@ (8005fd4 <HAL_DMA_Abort+0x5f4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d054      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a44      	ldr	r2, [pc, #272]	@ (8005fd8 <HAL_DMA_Abort+0x5f8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d04f      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a43      	ldr	r2, [pc, #268]	@ (8005fdc <HAL_DMA_Abort+0x5fc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d04a      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a41      	ldr	r2, [pc, #260]	@ (8005fe0 <HAL_DMA_Abort+0x600>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d045      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a40      	ldr	r2, [pc, #256]	@ (8005fe4 <HAL_DMA_Abort+0x604>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d040      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a3e      	ldr	r2, [pc, #248]	@ (8005fe8 <HAL_DMA_Abort+0x608>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d03b      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a3d      	ldr	r2, [pc, #244]	@ (8005fec <HAL_DMA_Abort+0x60c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d036      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a3b      	ldr	r2, [pc, #236]	@ (8005ff0 <HAL_DMA_Abort+0x610>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d031      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a3a      	ldr	r2, [pc, #232]	@ (8005ff4 <HAL_DMA_Abort+0x614>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d02c      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a38      	ldr	r2, [pc, #224]	@ (8005ff8 <HAL_DMA_Abort+0x618>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d027      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a37      	ldr	r2, [pc, #220]	@ (8005ffc <HAL_DMA_Abort+0x61c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d022      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a35      	ldr	r2, [pc, #212]	@ (8006000 <HAL_DMA_Abort+0x620>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d01d      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a34      	ldr	r2, [pc, #208]	@ (8006004 <HAL_DMA_Abort+0x624>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d018      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a32      	ldr	r2, [pc, #200]	@ (8006008 <HAL_DMA_Abort+0x628>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a31      	ldr	r2, [pc, #196]	@ (800600c <HAL_DMA_Abort+0x62c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00e      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a2f      	ldr	r2, [pc, #188]	@ (8006010 <HAL_DMA_Abort+0x630>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d009      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a2e      	ldr	r2, [pc, #184]	@ (8006014 <HAL_DMA_Abort+0x634>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d004      	beq.n	8005f6a <HAL_DMA_Abort+0x58a>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2c      	ldr	r2, [pc, #176]	@ (8006018 <HAL_DMA_Abort+0x638>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d101      	bne.n	8005f6e <HAL_DMA_Abort+0x58e>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <HAL_DMA_Abort+0x590>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d015      	beq.n	8005fa0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005f7c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00c      	beq.n	8005fa0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f94:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f9e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	40020010 	.word	0x40020010
 8005fc0:	40020028 	.word	0x40020028
 8005fc4:	40020040 	.word	0x40020040
 8005fc8:	40020058 	.word	0x40020058
 8005fcc:	40020070 	.word	0x40020070
 8005fd0:	40020088 	.word	0x40020088
 8005fd4:	400200a0 	.word	0x400200a0
 8005fd8:	400200b8 	.word	0x400200b8
 8005fdc:	40020410 	.word	0x40020410
 8005fe0:	40020428 	.word	0x40020428
 8005fe4:	40020440 	.word	0x40020440
 8005fe8:	40020458 	.word	0x40020458
 8005fec:	40020470 	.word	0x40020470
 8005ff0:	40020488 	.word	0x40020488
 8005ff4:	400204a0 	.word	0x400204a0
 8005ff8:	400204b8 	.word	0x400204b8
 8005ffc:	58025408 	.word	0x58025408
 8006000:	5802541c 	.word	0x5802541c
 8006004:	58025430 	.word	0x58025430
 8006008:	58025444 	.word	0x58025444
 800600c:	58025458 	.word	0x58025458
 8006010:	5802546c 	.word	0x5802546c
 8006014:	58025480 	.word	0x58025480
 8006018:	58025494 	.word	0x58025494

0800601c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e237      	b.n	800649e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d004      	beq.n	8006044 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2280      	movs	r2, #128	@ 0x80
 800603e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e22c      	b.n	800649e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a5c      	ldr	r2, [pc, #368]	@ (80061bc <HAL_DMA_Abort_IT+0x1a0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d04a      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a5b      	ldr	r2, [pc, #364]	@ (80061c0 <HAL_DMA_Abort_IT+0x1a4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d045      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a59      	ldr	r2, [pc, #356]	@ (80061c4 <HAL_DMA_Abort_IT+0x1a8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d040      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a58      	ldr	r2, [pc, #352]	@ (80061c8 <HAL_DMA_Abort_IT+0x1ac>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d03b      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a56      	ldr	r2, [pc, #344]	@ (80061cc <HAL_DMA_Abort_IT+0x1b0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d036      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a55      	ldr	r2, [pc, #340]	@ (80061d0 <HAL_DMA_Abort_IT+0x1b4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d031      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a53      	ldr	r2, [pc, #332]	@ (80061d4 <HAL_DMA_Abort_IT+0x1b8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d02c      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a52      	ldr	r2, [pc, #328]	@ (80061d8 <HAL_DMA_Abort_IT+0x1bc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d027      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a50      	ldr	r2, [pc, #320]	@ (80061dc <HAL_DMA_Abort_IT+0x1c0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d022      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a4f      	ldr	r2, [pc, #316]	@ (80061e0 <HAL_DMA_Abort_IT+0x1c4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d01d      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a4d      	ldr	r2, [pc, #308]	@ (80061e4 <HAL_DMA_Abort_IT+0x1c8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d018      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a4c      	ldr	r2, [pc, #304]	@ (80061e8 <HAL_DMA_Abort_IT+0x1cc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d013      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a4a      	ldr	r2, [pc, #296]	@ (80061ec <HAL_DMA_Abort_IT+0x1d0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00e      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a49      	ldr	r2, [pc, #292]	@ (80061f0 <HAL_DMA_Abort_IT+0x1d4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a47      	ldr	r2, [pc, #284]	@ (80061f4 <HAL_DMA_Abort_IT+0x1d8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_DMA_Abort_IT+0xc8>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a46      	ldr	r2, [pc, #280]	@ (80061f8 <HAL_DMA_Abort_IT+0x1dc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d101      	bne.n	80060e8 <HAL_DMA_Abort_IT+0xcc>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <HAL_DMA_Abort_IT+0xce>
 80060e8:	2300      	movs	r3, #0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 8086 	beq.w	80061fc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2204      	movs	r2, #4
 80060f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2f      	ldr	r2, [pc, #188]	@ (80061bc <HAL_DMA_Abort_IT+0x1a0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d04a      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a2e      	ldr	r2, [pc, #184]	@ (80061c0 <HAL_DMA_Abort_IT+0x1a4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d045      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a2c      	ldr	r2, [pc, #176]	@ (80061c4 <HAL_DMA_Abort_IT+0x1a8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d040      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a2b      	ldr	r2, [pc, #172]	@ (80061c8 <HAL_DMA_Abort_IT+0x1ac>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d03b      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a29      	ldr	r2, [pc, #164]	@ (80061cc <HAL_DMA_Abort_IT+0x1b0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d036      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a28      	ldr	r2, [pc, #160]	@ (80061d0 <HAL_DMA_Abort_IT+0x1b4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d031      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a26      	ldr	r2, [pc, #152]	@ (80061d4 <HAL_DMA_Abort_IT+0x1b8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d02c      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a25      	ldr	r2, [pc, #148]	@ (80061d8 <HAL_DMA_Abort_IT+0x1bc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d027      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a23      	ldr	r2, [pc, #140]	@ (80061dc <HAL_DMA_Abort_IT+0x1c0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d022      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a22      	ldr	r2, [pc, #136]	@ (80061e0 <HAL_DMA_Abort_IT+0x1c4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d01d      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a20      	ldr	r2, [pc, #128]	@ (80061e4 <HAL_DMA_Abort_IT+0x1c8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d018      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1f      	ldr	r2, [pc, #124]	@ (80061e8 <HAL_DMA_Abort_IT+0x1cc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d013      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1d      	ldr	r2, [pc, #116]	@ (80061ec <HAL_DMA_Abort_IT+0x1d0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00e      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a1c      	ldr	r2, [pc, #112]	@ (80061f0 <HAL_DMA_Abort_IT+0x1d4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d009      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1a      	ldr	r2, [pc, #104]	@ (80061f4 <HAL_DMA_Abort_IT+0x1d8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <HAL_DMA_Abort_IT+0x17c>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a19      	ldr	r2, [pc, #100]	@ (80061f8 <HAL_DMA_Abort_IT+0x1dc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d108      	bne.n	80061aa <HAL_DMA_Abort_IT+0x18e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	e178      	b.n	800649c <HAL_DMA_Abort_IT+0x480>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0201 	bic.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	e16f      	b.n	800649c <HAL_DMA_Abort_IT+0x480>
 80061bc:	40020010 	.word	0x40020010
 80061c0:	40020028 	.word	0x40020028
 80061c4:	40020040 	.word	0x40020040
 80061c8:	40020058 	.word	0x40020058
 80061cc:	40020070 	.word	0x40020070
 80061d0:	40020088 	.word	0x40020088
 80061d4:	400200a0 	.word	0x400200a0
 80061d8:	400200b8 	.word	0x400200b8
 80061dc:	40020410 	.word	0x40020410
 80061e0:	40020428 	.word	0x40020428
 80061e4:	40020440 	.word	0x40020440
 80061e8:	40020458 	.word	0x40020458
 80061ec:	40020470 	.word	0x40020470
 80061f0:	40020488 	.word	0x40020488
 80061f4:	400204a0 	.word	0x400204a0
 80061f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 020e 	bic.w	r2, r2, #14
 800620a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a6c      	ldr	r2, [pc, #432]	@ (80063c4 <HAL_DMA_Abort_IT+0x3a8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d04a      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a6b      	ldr	r2, [pc, #428]	@ (80063c8 <HAL_DMA_Abort_IT+0x3ac>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d045      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a69      	ldr	r2, [pc, #420]	@ (80063cc <HAL_DMA_Abort_IT+0x3b0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d040      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a68      	ldr	r2, [pc, #416]	@ (80063d0 <HAL_DMA_Abort_IT+0x3b4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d03b      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a66      	ldr	r2, [pc, #408]	@ (80063d4 <HAL_DMA_Abort_IT+0x3b8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d036      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a65      	ldr	r2, [pc, #404]	@ (80063d8 <HAL_DMA_Abort_IT+0x3bc>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d031      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a63      	ldr	r2, [pc, #396]	@ (80063dc <HAL_DMA_Abort_IT+0x3c0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d02c      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a62      	ldr	r2, [pc, #392]	@ (80063e0 <HAL_DMA_Abort_IT+0x3c4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d027      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a60      	ldr	r2, [pc, #384]	@ (80063e4 <HAL_DMA_Abort_IT+0x3c8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d022      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a5f      	ldr	r2, [pc, #380]	@ (80063e8 <HAL_DMA_Abort_IT+0x3cc>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d01d      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a5d      	ldr	r2, [pc, #372]	@ (80063ec <HAL_DMA_Abort_IT+0x3d0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d018      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a5c      	ldr	r2, [pc, #368]	@ (80063f0 <HAL_DMA_Abort_IT+0x3d4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d013      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a5a      	ldr	r2, [pc, #360]	@ (80063f4 <HAL_DMA_Abort_IT+0x3d8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00e      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a59      	ldr	r2, [pc, #356]	@ (80063f8 <HAL_DMA_Abort_IT+0x3dc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a57      	ldr	r2, [pc, #348]	@ (80063fc <HAL_DMA_Abort_IT+0x3e0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <HAL_DMA_Abort_IT+0x290>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a56      	ldr	r2, [pc, #344]	@ (8006400 <HAL_DMA_Abort_IT+0x3e4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d108      	bne.n	80062be <HAL_DMA_Abort_IT+0x2a2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	e007      	b.n	80062ce <HAL_DMA_Abort_IT+0x2b2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a3c      	ldr	r2, [pc, #240]	@ (80063c4 <HAL_DMA_Abort_IT+0x3a8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d072      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a3a      	ldr	r2, [pc, #232]	@ (80063c8 <HAL_DMA_Abort_IT+0x3ac>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d06d      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a39      	ldr	r2, [pc, #228]	@ (80063cc <HAL_DMA_Abort_IT+0x3b0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d068      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a37      	ldr	r2, [pc, #220]	@ (80063d0 <HAL_DMA_Abort_IT+0x3b4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d063      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a36      	ldr	r2, [pc, #216]	@ (80063d4 <HAL_DMA_Abort_IT+0x3b8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d05e      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a34      	ldr	r2, [pc, #208]	@ (80063d8 <HAL_DMA_Abort_IT+0x3bc>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d059      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a33      	ldr	r2, [pc, #204]	@ (80063dc <HAL_DMA_Abort_IT+0x3c0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d054      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a31      	ldr	r2, [pc, #196]	@ (80063e0 <HAL_DMA_Abort_IT+0x3c4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d04f      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a30      	ldr	r2, [pc, #192]	@ (80063e4 <HAL_DMA_Abort_IT+0x3c8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d04a      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a2e      	ldr	r2, [pc, #184]	@ (80063e8 <HAL_DMA_Abort_IT+0x3cc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d045      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a2d      	ldr	r2, [pc, #180]	@ (80063ec <HAL_DMA_Abort_IT+0x3d0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d040      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a2b      	ldr	r2, [pc, #172]	@ (80063f0 <HAL_DMA_Abort_IT+0x3d4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d03b      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a2a      	ldr	r2, [pc, #168]	@ (80063f4 <HAL_DMA_Abort_IT+0x3d8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d036      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a28      	ldr	r2, [pc, #160]	@ (80063f8 <HAL_DMA_Abort_IT+0x3dc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d031      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a27      	ldr	r2, [pc, #156]	@ (80063fc <HAL_DMA_Abort_IT+0x3e0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d02c      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a25      	ldr	r2, [pc, #148]	@ (8006400 <HAL_DMA_Abort_IT+0x3e4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d027      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a24      	ldr	r2, [pc, #144]	@ (8006404 <HAL_DMA_Abort_IT+0x3e8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d022      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a22      	ldr	r2, [pc, #136]	@ (8006408 <HAL_DMA_Abort_IT+0x3ec>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d01d      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a21      	ldr	r2, [pc, #132]	@ (800640c <HAL_DMA_Abort_IT+0x3f0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d018      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a1f      	ldr	r2, [pc, #124]	@ (8006410 <HAL_DMA_Abort_IT+0x3f4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d013      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1e      	ldr	r2, [pc, #120]	@ (8006414 <HAL_DMA_Abort_IT+0x3f8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00e      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006418 <HAL_DMA_Abort_IT+0x3fc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d009      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a1b      	ldr	r2, [pc, #108]	@ (800641c <HAL_DMA_Abort_IT+0x400>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d004      	beq.n	80063be <HAL_DMA_Abort_IT+0x3a2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a19      	ldr	r2, [pc, #100]	@ (8006420 <HAL_DMA_Abort_IT+0x404>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d132      	bne.n	8006424 <HAL_DMA_Abort_IT+0x408>
 80063be:	2301      	movs	r3, #1
 80063c0:	e031      	b.n	8006426 <HAL_DMA_Abort_IT+0x40a>
 80063c2:	bf00      	nop
 80063c4:	40020010 	.word	0x40020010
 80063c8:	40020028 	.word	0x40020028
 80063cc:	40020040 	.word	0x40020040
 80063d0:	40020058 	.word	0x40020058
 80063d4:	40020070 	.word	0x40020070
 80063d8:	40020088 	.word	0x40020088
 80063dc:	400200a0 	.word	0x400200a0
 80063e0:	400200b8 	.word	0x400200b8
 80063e4:	40020410 	.word	0x40020410
 80063e8:	40020428 	.word	0x40020428
 80063ec:	40020440 	.word	0x40020440
 80063f0:	40020458 	.word	0x40020458
 80063f4:	40020470 	.word	0x40020470
 80063f8:	40020488 	.word	0x40020488
 80063fc:	400204a0 	.word	0x400204a0
 8006400:	400204b8 	.word	0x400204b8
 8006404:	58025408 	.word	0x58025408
 8006408:	5802541c 	.word	0x5802541c
 800640c:	58025430 	.word	0x58025430
 8006410:	58025444 	.word	0x58025444
 8006414:	58025458 	.word	0x58025458
 8006418:	5802546c 	.word	0x5802546c
 800641c:	58025480 	.word	0x58025480
 8006420:	58025494 	.word	0x58025494
 8006424:	2300      	movs	r3, #0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d028      	beq.n	800647c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006434:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006438:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	2201      	movs	r2, #1
 800644a:	409a      	lsls	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006458:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00c      	beq.n	800647c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800646c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006470:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800647a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop

080064a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	@ 0x28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064b4:	4b67      	ldr	r3, [pc, #412]	@ (8006654 <HAL_DMA_IRQHandler+0x1ac>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a67      	ldr	r2, [pc, #412]	@ (8006658 <HAL_DMA_IRQHandler+0x1b0>)
 80064ba:	fba2 2303 	umull	r2, r3, r2, r3
 80064be:	0a9b      	lsrs	r3, r3, #10
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a5f      	ldr	r2, [pc, #380]	@ (800665c <HAL_DMA_IRQHandler+0x1b4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d04a      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a5d      	ldr	r2, [pc, #372]	@ (8006660 <HAL_DMA_IRQHandler+0x1b8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d045      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a5c      	ldr	r2, [pc, #368]	@ (8006664 <HAL_DMA_IRQHandler+0x1bc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d040      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a5a      	ldr	r2, [pc, #360]	@ (8006668 <HAL_DMA_IRQHandler+0x1c0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d03b      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a59      	ldr	r2, [pc, #356]	@ (800666c <HAL_DMA_IRQHandler+0x1c4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d036      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a57      	ldr	r2, [pc, #348]	@ (8006670 <HAL_DMA_IRQHandler+0x1c8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d031      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a56      	ldr	r2, [pc, #344]	@ (8006674 <HAL_DMA_IRQHandler+0x1cc>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d02c      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a54      	ldr	r2, [pc, #336]	@ (8006678 <HAL_DMA_IRQHandler+0x1d0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d027      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a53      	ldr	r2, [pc, #332]	@ (800667c <HAL_DMA_IRQHandler+0x1d4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d022      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a51      	ldr	r2, [pc, #324]	@ (8006680 <HAL_DMA_IRQHandler+0x1d8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d01d      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a50      	ldr	r2, [pc, #320]	@ (8006684 <HAL_DMA_IRQHandler+0x1dc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d018      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a4e      	ldr	r2, [pc, #312]	@ (8006688 <HAL_DMA_IRQHandler+0x1e0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d013      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a4d      	ldr	r2, [pc, #308]	@ (800668c <HAL_DMA_IRQHandler+0x1e4>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00e      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a4b      	ldr	r2, [pc, #300]	@ (8006690 <HAL_DMA_IRQHandler+0x1e8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d009      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a4a      	ldr	r2, [pc, #296]	@ (8006694 <HAL_DMA_IRQHandler+0x1ec>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d004      	beq.n	800657a <HAL_DMA_IRQHandler+0xd2>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a48      	ldr	r2, [pc, #288]	@ (8006698 <HAL_DMA_IRQHandler+0x1f0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d101      	bne.n	800657e <HAL_DMA_IRQHandler+0xd6>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <HAL_DMA_IRQHandler+0xd8>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 842b 	beq.w	8006ddc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2208      	movs	r2, #8
 8006590:	409a      	lsls	r2, r3
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	4013      	ands	r3, r2
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 80a2 	beq.w	80066e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a2e      	ldr	r2, [pc, #184]	@ (800665c <HAL_DMA_IRQHandler+0x1b4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d04a      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a2d      	ldr	r2, [pc, #180]	@ (8006660 <HAL_DMA_IRQHandler+0x1b8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d045      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a2b      	ldr	r2, [pc, #172]	@ (8006664 <HAL_DMA_IRQHandler+0x1bc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d040      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2a      	ldr	r2, [pc, #168]	@ (8006668 <HAL_DMA_IRQHandler+0x1c0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d03b      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a28      	ldr	r2, [pc, #160]	@ (800666c <HAL_DMA_IRQHandler+0x1c4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d036      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a27      	ldr	r2, [pc, #156]	@ (8006670 <HAL_DMA_IRQHandler+0x1c8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d031      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a25      	ldr	r2, [pc, #148]	@ (8006674 <HAL_DMA_IRQHandler+0x1cc>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d02c      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a24      	ldr	r2, [pc, #144]	@ (8006678 <HAL_DMA_IRQHandler+0x1d0>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d027      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a22      	ldr	r2, [pc, #136]	@ (800667c <HAL_DMA_IRQHandler+0x1d4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d022      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a21      	ldr	r2, [pc, #132]	@ (8006680 <HAL_DMA_IRQHandler+0x1d8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d01d      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1f      	ldr	r2, [pc, #124]	@ (8006684 <HAL_DMA_IRQHandler+0x1dc>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d018      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1e      	ldr	r2, [pc, #120]	@ (8006688 <HAL_DMA_IRQHandler+0x1e0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d013      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a1c      	ldr	r2, [pc, #112]	@ (800668c <HAL_DMA_IRQHandler+0x1e4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00e      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a1b      	ldr	r2, [pc, #108]	@ (8006690 <HAL_DMA_IRQHandler+0x1e8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d009      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a19      	ldr	r2, [pc, #100]	@ (8006694 <HAL_DMA_IRQHandler+0x1ec>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_DMA_IRQHandler+0x194>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a18      	ldr	r2, [pc, #96]	@ (8006698 <HAL_DMA_IRQHandler+0x1f0>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d12f      	bne.n	800669c <HAL_DMA_IRQHandler+0x1f4>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	bf14      	ite	ne
 800664a:	2301      	movne	r3, #1
 800664c:	2300      	moveq	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	e02e      	b.n	80066b0 <HAL_DMA_IRQHandler+0x208>
 8006652:	bf00      	nop
 8006654:	24000000 	.word	0x24000000
 8006658:	1b4e81b5 	.word	0x1b4e81b5
 800665c:	40020010 	.word	0x40020010
 8006660:	40020028 	.word	0x40020028
 8006664:	40020040 	.word	0x40020040
 8006668:	40020058 	.word	0x40020058
 800666c:	40020070 	.word	0x40020070
 8006670:	40020088 	.word	0x40020088
 8006674:	400200a0 	.word	0x400200a0
 8006678:	400200b8 	.word	0x400200b8
 800667c:	40020410 	.word	0x40020410
 8006680:	40020428 	.word	0x40020428
 8006684:	40020440 	.word	0x40020440
 8006688:	40020458 	.word	0x40020458
 800668c:	40020470 	.word	0x40020470
 8006690:	40020488 	.word	0x40020488
 8006694:	400204a0 	.word	0x400204a0
 8006698:	400204b8 	.word	0x400204b8
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bf14      	ite	ne
 80066aa:	2301      	movne	r3, #1
 80066ac:	2300      	moveq	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d015      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0204 	bic.w	r2, r2, #4
 80066c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c8:	f003 031f 	and.w	r3, r3, #31
 80066cc:	2208      	movs	r2, #8
 80066ce:	409a      	lsls	r2, r3
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d8:	f043 0201 	orr.w	r2, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066e4:	f003 031f 	and.w	r3, r3, #31
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	fa22 f303 	lsr.w	r3, r2, r3
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d06e      	beq.n	80067d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a69      	ldr	r2, [pc, #420]	@ (80068a0 <HAL_DMA_IRQHandler+0x3f8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d04a      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a67      	ldr	r2, [pc, #412]	@ (80068a4 <HAL_DMA_IRQHandler+0x3fc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d045      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a66      	ldr	r2, [pc, #408]	@ (80068a8 <HAL_DMA_IRQHandler+0x400>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d040      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a64      	ldr	r2, [pc, #400]	@ (80068ac <HAL_DMA_IRQHandler+0x404>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d03b      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a63      	ldr	r2, [pc, #396]	@ (80068b0 <HAL_DMA_IRQHandler+0x408>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d036      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a61      	ldr	r2, [pc, #388]	@ (80068b4 <HAL_DMA_IRQHandler+0x40c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d031      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a60      	ldr	r2, [pc, #384]	@ (80068b8 <HAL_DMA_IRQHandler+0x410>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d02c      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a5e      	ldr	r2, [pc, #376]	@ (80068bc <HAL_DMA_IRQHandler+0x414>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d027      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a5d      	ldr	r2, [pc, #372]	@ (80068c0 <HAL_DMA_IRQHandler+0x418>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d022      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a5b      	ldr	r2, [pc, #364]	@ (80068c4 <HAL_DMA_IRQHandler+0x41c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01d      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a5a      	ldr	r2, [pc, #360]	@ (80068c8 <HAL_DMA_IRQHandler+0x420>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d018      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a58      	ldr	r2, [pc, #352]	@ (80068cc <HAL_DMA_IRQHandler+0x424>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a57      	ldr	r2, [pc, #348]	@ (80068d0 <HAL_DMA_IRQHandler+0x428>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00e      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a55      	ldr	r2, [pc, #340]	@ (80068d4 <HAL_DMA_IRQHandler+0x42c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d009      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a54      	ldr	r2, [pc, #336]	@ (80068d8 <HAL_DMA_IRQHandler+0x430>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_DMA_IRQHandler+0x2ee>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a52      	ldr	r2, [pc, #328]	@ (80068dc <HAL_DMA_IRQHandler+0x434>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d10a      	bne.n	80067ac <HAL_DMA_IRQHandler+0x304>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bf14      	ite	ne
 80067a4:	2301      	movne	r3, #1
 80067a6:	2300      	moveq	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	e003      	b.n	80067b4 <HAL_DMA_IRQHandler+0x30c>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00d      	beq.n	80067d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067bc:	f003 031f 	and.w	r3, r3, #31
 80067c0:	2201      	movs	r2, #1
 80067c2:	409a      	lsls	r2, r3
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067cc:	f043 0202 	orr.w	r2, r3, #2
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	2204      	movs	r2, #4
 80067de:	409a      	lsls	r2, r3
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	4013      	ands	r3, r2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 808f 	beq.w	8006908 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a2c      	ldr	r2, [pc, #176]	@ (80068a0 <HAL_DMA_IRQHandler+0x3f8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d04a      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a2a      	ldr	r2, [pc, #168]	@ (80068a4 <HAL_DMA_IRQHandler+0x3fc>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d045      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a29      	ldr	r2, [pc, #164]	@ (80068a8 <HAL_DMA_IRQHandler+0x400>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d040      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a27      	ldr	r2, [pc, #156]	@ (80068ac <HAL_DMA_IRQHandler+0x404>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d03b      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a26      	ldr	r2, [pc, #152]	@ (80068b0 <HAL_DMA_IRQHandler+0x408>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d036      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a24      	ldr	r2, [pc, #144]	@ (80068b4 <HAL_DMA_IRQHandler+0x40c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d031      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a23      	ldr	r2, [pc, #140]	@ (80068b8 <HAL_DMA_IRQHandler+0x410>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d02c      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a21      	ldr	r2, [pc, #132]	@ (80068bc <HAL_DMA_IRQHandler+0x414>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d027      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a20      	ldr	r2, [pc, #128]	@ (80068c0 <HAL_DMA_IRQHandler+0x418>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d022      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1e      	ldr	r2, [pc, #120]	@ (80068c4 <HAL_DMA_IRQHandler+0x41c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d01d      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1d      	ldr	r2, [pc, #116]	@ (80068c8 <HAL_DMA_IRQHandler+0x420>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d018      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1b      	ldr	r2, [pc, #108]	@ (80068cc <HAL_DMA_IRQHandler+0x424>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1a      	ldr	r2, [pc, #104]	@ (80068d0 <HAL_DMA_IRQHandler+0x428>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00e      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a18      	ldr	r2, [pc, #96]	@ (80068d4 <HAL_DMA_IRQHandler+0x42c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d009      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a17      	ldr	r2, [pc, #92]	@ (80068d8 <HAL_DMA_IRQHandler+0x430>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d004      	beq.n	800688a <HAL_DMA_IRQHandler+0x3e2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a15      	ldr	r2, [pc, #84]	@ (80068dc <HAL_DMA_IRQHandler+0x434>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d12a      	bne.n	80068e0 <HAL_DMA_IRQHandler+0x438>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	bf14      	ite	ne
 8006898:	2301      	movne	r3, #1
 800689a:	2300      	moveq	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	e023      	b.n	80068e8 <HAL_DMA_IRQHandler+0x440>
 80068a0:	40020010 	.word	0x40020010
 80068a4:	40020028 	.word	0x40020028
 80068a8:	40020040 	.word	0x40020040
 80068ac:	40020058 	.word	0x40020058
 80068b0:	40020070 	.word	0x40020070
 80068b4:	40020088 	.word	0x40020088
 80068b8:	400200a0 	.word	0x400200a0
 80068bc:	400200b8 	.word	0x400200b8
 80068c0:	40020410 	.word	0x40020410
 80068c4:	40020428 	.word	0x40020428
 80068c8:	40020440 	.word	0x40020440
 80068cc:	40020458 	.word	0x40020458
 80068d0:	40020470 	.word	0x40020470
 80068d4:	40020488 	.word	0x40020488
 80068d8:	400204a0 	.word	0x400204a0
 80068dc:	400204b8 	.word	0x400204b8
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2300      	movs	r3, #0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00d      	beq.n	8006908 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	2204      	movs	r2, #4
 80068f6:	409a      	lsls	r2, r3
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006900:	f043 0204 	orr.w	r2, r3, #4
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800690c:	f003 031f 	and.w	r3, r3, #31
 8006910:	2210      	movs	r2, #16
 8006912:	409a      	lsls	r2, r3
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	4013      	ands	r3, r2
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 80a6 	beq.w	8006a6a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a85      	ldr	r2, [pc, #532]	@ (8006b38 <HAL_DMA_IRQHandler+0x690>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d04a      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a83      	ldr	r2, [pc, #524]	@ (8006b3c <HAL_DMA_IRQHandler+0x694>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d045      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a82      	ldr	r2, [pc, #520]	@ (8006b40 <HAL_DMA_IRQHandler+0x698>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d040      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a80      	ldr	r2, [pc, #512]	@ (8006b44 <HAL_DMA_IRQHandler+0x69c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d03b      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a7f      	ldr	r2, [pc, #508]	@ (8006b48 <HAL_DMA_IRQHandler+0x6a0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d036      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a7d      	ldr	r2, [pc, #500]	@ (8006b4c <HAL_DMA_IRQHandler+0x6a4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d031      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a7c      	ldr	r2, [pc, #496]	@ (8006b50 <HAL_DMA_IRQHandler+0x6a8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d02c      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a7a      	ldr	r2, [pc, #488]	@ (8006b54 <HAL_DMA_IRQHandler+0x6ac>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d027      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a79      	ldr	r2, [pc, #484]	@ (8006b58 <HAL_DMA_IRQHandler+0x6b0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d022      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a77      	ldr	r2, [pc, #476]	@ (8006b5c <HAL_DMA_IRQHandler+0x6b4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d01d      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a76      	ldr	r2, [pc, #472]	@ (8006b60 <HAL_DMA_IRQHandler+0x6b8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d018      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a74      	ldr	r2, [pc, #464]	@ (8006b64 <HAL_DMA_IRQHandler+0x6bc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d013      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a73      	ldr	r2, [pc, #460]	@ (8006b68 <HAL_DMA_IRQHandler+0x6c0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00e      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a71      	ldr	r2, [pc, #452]	@ (8006b6c <HAL_DMA_IRQHandler+0x6c4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d009      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a70      	ldr	r2, [pc, #448]	@ (8006b70 <HAL_DMA_IRQHandler+0x6c8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d004      	beq.n	80069be <HAL_DMA_IRQHandler+0x516>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a6e      	ldr	r2, [pc, #440]	@ (8006b74 <HAL_DMA_IRQHandler+0x6cc>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d10a      	bne.n	80069d4 <HAL_DMA_IRQHandler+0x52c>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bf14      	ite	ne
 80069cc:	2301      	movne	r3, #1
 80069ce:	2300      	moveq	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	e009      	b.n	80069e8 <HAL_DMA_IRQHandler+0x540>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bf14      	ite	ne
 80069e2:	2301      	movne	r3, #1
 80069e4:	2300      	moveq	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d03e      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f0:	f003 031f 	and.w	r3, r3, #31
 80069f4:	2210      	movs	r2, #16
 80069f6:	409a      	lsls	r2, r3
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d018      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d108      	bne.n	8006a2a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d024      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	4798      	blx	r3
 8006a28:	e01f      	b.n	8006a6a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d01b      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	4798      	blx	r3
 8006a3a:	e016      	b.n	8006a6a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d107      	bne.n	8006a5a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0208 	bic.w	r2, r2, #8
 8006a58:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	2220      	movs	r2, #32
 8006a74:	409a      	lsls	r2, r3
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8110 	beq.w	8006ca0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a2c      	ldr	r2, [pc, #176]	@ (8006b38 <HAL_DMA_IRQHandler+0x690>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d04a      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8006b3c <HAL_DMA_IRQHandler+0x694>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d045      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a29      	ldr	r2, [pc, #164]	@ (8006b40 <HAL_DMA_IRQHandler+0x698>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d040      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a28      	ldr	r2, [pc, #160]	@ (8006b44 <HAL_DMA_IRQHandler+0x69c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d03b      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a26      	ldr	r2, [pc, #152]	@ (8006b48 <HAL_DMA_IRQHandler+0x6a0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d036      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a25      	ldr	r2, [pc, #148]	@ (8006b4c <HAL_DMA_IRQHandler+0x6a4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d031      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a23      	ldr	r2, [pc, #140]	@ (8006b50 <HAL_DMA_IRQHandler+0x6a8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d02c      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a22      	ldr	r2, [pc, #136]	@ (8006b54 <HAL_DMA_IRQHandler+0x6ac>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d027      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a20      	ldr	r2, [pc, #128]	@ (8006b58 <HAL_DMA_IRQHandler+0x6b0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d022      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1f      	ldr	r2, [pc, #124]	@ (8006b5c <HAL_DMA_IRQHandler+0x6b4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d01d      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8006b60 <HAL_DMA_IRQHandler+0x6b8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d018      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b64 <HAL_DMA_IRQHandler+0x6bc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d013      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1a      	ldr	r2, [pc, #104]	@ (8006b68 <HAL_DMA_IRQHandler+0x6c0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00e      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a19      	ldr	r2, [pc, #100]	@ (8006b6c <HAL_DMA_IRQHandler+0x6c4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d009      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a17      	ldr	r2, [pc, #92]	@ (8006b70 <HAL_DMA_IRQHandler+0x6c8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d004      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x678>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a16      	ldr	r2, [pc, #88]	@ (8006b74 <HAL_DMA_IRQHandler+0x6cc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d12b      	bne.n	8006b78 <HAL_DMA_IRQHandler+0x6d0>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0310 	and.w	r3, r3, #16
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bf14      	ite	ne
 8006b2e:	2301      	movne	r3, #1
 8006b30:	2300      	moveq	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	e02a      	b.n	8006b8c <HAL_DMA_IRQHandler+0x6e4>
 8006b36:	bf00      	nop
 8006b38:	40020010 	.word	0x40020010
 8006b3c:	40020028 	.word	0x40020028
 8006b40:	40020040 	.word	0x40020040
 8006b44:	40020058 	.word	0x40020058
 8006b48:	40020070 	.word	0x40020070
 8006b4c:	40020088 	.word	0x40020088
 8006b50:	400200a0 	.word	0x400200a0
 8006b54:	400200b8 	.word	0x400200b8
 8006b58:	40020410 	.word	0x40020410
 8006b5c:	40020428 	.word	0x40020428
 8006b60:	40020440 	.word	0x40020440
 8006b64:	40020458 	.word	0x40020458
 8006b68:	40020470 	.word	0x40020470
 8006b6c:	40020488 	.word	0x40020488
 8006b70:	400204a0 	.word	0x400204a0
 8006b74:	400204b8 	.word	0x400204b8
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	bf14      	ite	ne
 8006b86:	2301      	movne	r3, #1
 8006b88:	2300      	moveq	r3, #0
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 8087 	beq.w	8006ca0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b96:	f003 031f 	and.w	r3, r3, #31
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	409a      	lsls	r2, r3
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d139      	bne.n	8006c22 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0216 	bic.w	r2, r2, #22
 8006bbc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695a      	ldr	r2, [r3, #20]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bcc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <HAL_DMA_IRQHandler+0x736>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0208 	bic.w	r2, r2, #8
 8006bec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf2:	f003 031f 	and.w	r3, r3, #31
 8006bf6:	223f      	movs	r2, #63	@ 0x3f
 8006bf8:	409a      	lsls	r2, r3
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 834a 	beq.w	80072ac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	4798      	blx	r3
          }
          return;
 8006c20:	e344      	b.n	80072ac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d018      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d108      	bne.n	8006c50 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d02c      	beq.n	8006ca0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	4798      	blx	r3
 8006c4e:	e027      	b.n	8006ca0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d023      	beq.n	8006ca0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
 8006c60:	e01e      	b.n	8006ca0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10f      	bne.n	8006c90 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0210 	bic.w	r2, r2, #16
 8006c7e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 8306 	beq.w	80072b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 8088 	beq.w	8006dc8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2204      	movs	r2, #4
 8006cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a7a      	ldr	r2, [pc, #488]	@ (8006eb0 <HAL_DMA_IRQHandler+0xa08>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d04a      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a79      	ldr	r2, [pc, #484]	@ (8006eb4 <HAL_DMA_IRQHandler+0xa0c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d045      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a77      	ldr	r2, [pc, #476]	@ (8006eb8 <HAL_DMA_IRQHandler+0xa10>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d040      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a76      	ldr	r2, [pc, #472]	@ (8006ebc <HAL_DMA_IRQHandler+0xa14>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d03b      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a74      	ldr	r2, [pc, #464]	@ (8006ec0 <HAL_DMA_IRQHandler+0xa18>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d036      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a73      	ldr	r2, [pc, #460]	@ (8006ec4 <HAL_DMA_IRQHandler+0xa1c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d031      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a71      	ldr	r2, [pc, #452]	@ (8006ec8 <HAL_DMA_IRQHandler+0xa20>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d02c      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a70      	ldr	r2, [pc, #448]	@ (8006ecc <HAL_DMA_IRQHandler+0xa24>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d027      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a6e      	ldr	r2, [pc, #440]	@ (8006ed0 <HAL_DMA_IRQHandler+0xa28>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d022      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a6d      	ldr	r2, [pc, #436]	@ (8006ed4 <HAL_DMA_IRQHandler+0xa2c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d01d      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a6b      	ldr	r2, [pc, #428]	@ (8006ed8 <HAL_DMA_IRQHandler+0xa30>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d018      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a6a      	ldr	r2, [pc, #424]	@ (8006edc <HAL_DMA_IRQHandler+0xa34>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d013      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a68      	ldr	r2, [pc, #416]	@ (8006ee0 <HAL_DMA_IRQHandler+0xa38>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00e      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a67      	ldr	r2, [pc, #412]	@ (8006ee4 <HAL_DMA_IRQHandler+0xa3c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d009      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a65      	ldr	r2, [pc, #404]	@ (8006ee8 <HAL_DMA_IRQHandler+0xa40>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x8b8>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a64      	ldr	r2, [pc, #400]	@ (8006eec <HAL_DMA_IRQHandler+0xa44>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d108      	bne.n	8006d72 <HAL_DMA_IRQHandler+0x8ca>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0201 	bic.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e007      	b.n	8006d82 <HAL_DMA_IRQHandler+0x8da>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0201 	bic.w	r2, r2, #1
 8006d80:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3301      	adds	r3, #1
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d307      	bcc.n	8006d9e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1f2      	bne.n	8006d82 <HAL_DMA_IRQHandler+0x8da>
 8006d9c:	e000      	b.n	8006da0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006d9e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2203      	movs	r2, #3
 8006db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006db6:	e003      	b.n	8006dc0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 8272 	beq.w	80072b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	4798      	blx	r3
 8006dda:	e26c      	b.n	80072b6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a43      	ldr	r2, [pc, #268]	@ (8006ef0 <HAL_DMA_IRQHandler+0xa48>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d022      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x984>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a42      	ldr	r2, [pc, #264]	@ (8006ef4 <HAL_DMA_IRQHandler+0xa4c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d01d      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x984>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a40      	ldr	r2, [pc, #256]	@ (8006ef8 <HAL_DMA_IRQHandler+0xa50>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d018      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x984>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a3f      	ldr	r2, [pc, #252]	@ (8006efc <HAL_DMA_IRQHandler+0xa54>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d013      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x984>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3d      	ldr	r2, [pc, #244]	@ (8006f00 <HAL_DMA_IRQHandler+0xa58>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00e      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x984>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a3c      	ldr	r2, [pc, #240]	@ (8006f04 <HAL_DMA_IRQHandler+0xa5c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d009      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x984>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a3a      	ldr	r2, [pc, #232]	@ (8006f08 <HAL_DMA_IRQHandler+0xa60>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d004      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x984>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a39      	ldr	r2, [pc, #228]	@ (8006f0c <HAL_DMA_IRQHandler+0xa64>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d101      	bne.n	8006e30 <HAL_DMA_IRQHandler+0x988>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <HAL_DMA_IRQHandler+0x98a>
 8006e30:	2300      	movs	r3, #0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 823f 	beq.w	80072b6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e44:	f003 031f 	and.w	r3, r3, #31
 8006e48:	2204      	movs	r2, #4
 8006e4a:	409a      	lsls	r2, r3
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 80cd 	beq.w	8006ff0 <HAL_DMA_IRQHandler+0xb48>
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80c7 	beq.w	8006ff0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	2204      	movs	r2, #4
 8006e6c:	409a      	lsls	r2, r3
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d049      	beq.n	8006f10 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 8210 	beq.w	80072b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e98:	e20a      	b.n	80072b0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 8206 	beq.w	80072b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eac:	e200      	b.n	80072b0 <HAL_DMA_IRQHandler+0xe08>
 8006eae:	bf00      	nop
 8006eb0:	40020010 	.word	0x40020010
 8006eb4:	40020028 	.word	0x40020028
 8006eb8:	40020040 	.word	0x40020040
 8006ebc:	40020058 	.word	0x40020058
 8006ec0:	40020070 	.word	0x40020070
 8006ec4:	40020088 	.word	0x40020088
 8006ec8:	400200a0 	.word	0x400200a0
 8006ecc:	400200b8 	.word	0x400200b8
 8006ed0:	40020410 	.word	0x40020410
 8006ed4:	40020428 	.word	0x40020428
 8006ed8:	40020440 	.word	0x40020440
 8006edc:	40020458 	.word	0x40020458
 8006ee0:	40020470 	.word	0x40020470
 8006ee4:	40020488 	.word	0x40020488
 8006ee8:	400204a0 	.word	0x400204a0
 8006eec:	400204b8 	.word	0x400204b8
 8006ef0:	58025408 	.word	0x58025408
 8006ef4:	5802541c 	.word	0x5802541c
 8006ef8:	58025430 	.word	0x58025430
 8006efc:	58025444 	.word	0x58025444
 8006f00:	58025458 	.word	0x58025458
 8006f04:	5802546c 	.word	0x5802546c
 8006f08:	58025480 	.word	0x58025480
 8006f0c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d160      	bne.n	8006fdc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a7f      	ldr	r2, [pc, #508]	@ (800711c <HAL_DMA_IRQHandler+0xc74>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d04a      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a7d      	ldr	r2, [pc, #500]	@ (8007120 <HAL_DMA_IRQHandler+0xc78>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d045      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a7c      	ldr	r2, [pc, #496]	@ (8007124 <HAL_DMA_IRQHandler+0xc7c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d040      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a7a      	ldr	r2, [pc, #488]	@ (8007128 <HAL_DMA_IRQHandler+0xc80>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d03b      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a79      	ldr	r2, [pc, #484]	@ (800712c <HAL_DMA_IRQHandler+0xc84>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d036      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a77      	ldr	r2, [pc, #476]	@ (8007130 <HAL_DMA_IRQHandler+0xc88>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d031      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a76      	ldr	r2, [pc, #472]	@ (8007134 <HAL_DMA_IRQHandler+0xc8c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d02c      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a74      	ldr	r2, [pc, #464]	@ (8007138 <HAL_DMA_IRQHandler+0xc90>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d027      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a73      	ldr	r2, [pc, #460]	@ (800713c <HAL_DMA_IRQHandler+0xc94>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d022      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a71      	ldr	r2, [pc, #452]	@ (8007140 <HAL_DMA_IRQHandler+0xc98>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d01d      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a70      	ldr	r2, [pc, #448]	@ (8007144 <HAL_DMA_IRQHandler+0xc9c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d018      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8007148 <HAL_DMA_IRQHandler+0xca0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d013      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a6d      	ldr	r2, [pc, #436]	@ (800714c <HAL_DMA_IRQHandler+0xca4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00e      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8007150 <HAL_DMA_IRQHandler+0xca8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d009      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a6a      	ldr	r2, [pc, #424]	@ (8007154 <HAL_DMA_IRQHandler+0xcac>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d004      	beq.n	8006fba <HAL_DMA_IRQHandler+0xb12>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a68      	ldr	r2, [pc, #416]	@ (8007158 <HAL_DMA_IRQHandler+0xcb0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d108      	bne.n	8006fcc <HAL_DMA_IRQHandler+0xb24>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0208 	bic.w	r2, r2, #8
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	e007      	b.n	8006fdc <HAL_DMA_IRQHandler+0xb34>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0204 	bic.w	r2, r2, #4
 8006fda:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 8165 	beq.w	80072b0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fee:	e15f      	b.n	80072b0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ff4:	f003 031f 	and.w	r3, r3, #31
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	409a      	lsls	r2, r3
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	4013      	ands	r3, r2
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 80c5 	beq.w	8007190 <HAL_DMA_IRQHandler+0xce8>
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 80bf 	beq.w	8007190 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007016:	f003 031f 	and.w	r3, r3, #31
 800701a:	2202      	movs	r2, #2
 800701c:	409a      	lsls	r2, r3
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d018      	beq.n	800705e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d109      	bne.n	800704a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 813a 	beq.w	80072b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007048:	e134      	b.n	80072b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 8130 	beq.w	80072b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800705c:	e12a      	b.n	80072b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b00      	cmp	r3, #0
 8007066:	f040 8089 	bne.w	800717c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a2b      	ldr	r2, [pc, #172]	@ (800711c <HAL_DMA_IRQHandler+0xc74>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d04a      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a29      	ldr	r2, [pc, #164]	@ (8007120 <HAL_DMA_IRQHandler+0xc78>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d045      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a28      	ldr	r2, [pc, #160]	@ (8007124 <HAL_DMA_IRQHandler+0xc7c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d040      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a26      	ldr	r2, [pc, #152]	@ (8007128 <HAL_DMA_IRQHandler+0xc80>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d03b      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a25      	ldr	r2, [pc, #148]	@ (800712c <HAL_DMA_IRQHandler+0xc84>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d036      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a23      	ldr	r2, [pc, #140]	@ (8007130 <HAL_DMA_IRQHandler+0xc88>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d031      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a22      	ldr	r2, [pc, #136]	@ (8007134 <HAL_DMA_IRQHandler+0xc8c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d02c      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a20      	ldr	r2, [pc, #128]	@ (8007138 <HAL_DMA_IRQHandler+0xc90>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d027      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1f      	ldr	r2, [pc, #124]	@ (800713c <HAL_DMA_IRQHandler+0xc94>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d022      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007140 <HAL_DMA_IRQHandler+0xc98>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d01d      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007144 <HAL_DMA_IRQHandler+0xc9c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d018      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007148 <HAL_DMA_IRQHandler+0xca0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a19      	ldr	r2, [pc, #100]	@ (800714c <HAL_DMA_IRQHandler+0xca4>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a17      	ldr	r2, [pc, #92]	@ (8007150 <HAL_DMA_IRQHandler+0xca8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d009      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a16      	ldr	r2, [pc, #88]	@ (8007154 <HAL_DMA_IRQHandler+0xcac>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_DMA_IRQHandler+0xc62>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a14      	ldr	r2, [pc, #80]	@ (8007158 <HAL_DMA_IRQHandler+0xcb0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d128      	bne.n	800715c <HAL_DMA_IRQHandler+0xcb4>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0214 	bic.w	r2, r2, #20
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	e027      	b.n	800716c <HAL_DMA_IRQHandler+0xcc4>
 800711c:	40020010 	.word	0x40020010
 8007120:	40020028 	.word	0x40020028
 8007124:	40020040 	.word	0x40020040
 8007128:	40020058 	.word	0x40020058
 800712c:	40020070 	.word	0x40020070
 8007130:	40020088 	.word	0x40020088
 8007134:	400200a0 	.word	0x400200a0
 8007138:	400200b8 	.word	0x400200b8
 800713c:	40020410 	.word	0x40020410
 8007140:	40020428 	.word	0x40020428
 8007144:	40020440 	.word	0x40020440
 8007148:	40020458 	.word	0x40020458
 800714c:	40020470 	.word	0x40020470
 8007150:	40020488 	.word	0x40020488
 8007154:	400204a0 	.word	0x400204a0
 8007158:	400204b8 	.word	0x400204b8
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 020a 	bic.w	r2, r2, #10
 800716a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 8097 	beq.w	80072b4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800718e:	e091      	b.n	80072b4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	2208      	movs	r2, #8
 800719a:	409a      	lsls	r2, r3
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	4013      	ands	r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 8088 	beq.w	80072b6 <HAL_DMA_IRQHandler+0xe0e>
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f003 0308 	and.w	r3, r3, #8
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8082 	beq.w	80072b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a41      	ldr	r2, [pc, #260]	@ (80072bc <HAL_DMA_IRQHandler+0xe14>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d04a      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a3f      	ldr	r2, [pc, #252]	@ (80072c0 <HAL_DMA_IRQHandler+0xe18>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d045      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a3e      	ldr	r2, [pc, #248]	@ (80072c4 <HAL_DMA_IRQHandler+0xe1c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d040      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a3c      	ldr	r2, [pc, #240]	@ (80072c8 <HAL_DMA_IRQHandler+0xe20>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d03b      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a3b      	ldr	r2, [pc, #236]	@ (80072cc <HAL_DMA_IRQHandler+0xe24>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d036      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a39      	ldr	r2, [pc, #228]	@ (80072d0 <HAL_DMA_IRQHandler+0xe28>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d031      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a38      	ldr	r2, [pc, #224]	@ (80072d4 <HAL_DMA_IRQHandler+0xe2c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d02c      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a36      	ldr	r2, [pc, #216]	@ (80072d8 <HAL_DMA_IRQHandler+0xe30>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d027      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a35      	ldr	r2, [pc, #212]	@ (80072dc <HAL_DMA_IRQHandler+0xe34>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d022      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a33      	ldr	r2, [pc, #204]	@ (80072e0 <HAL_DMA_IRQHandler+0xe38>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d01d      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a32      	ldr	r2, [pc, #200]	@ (80072e4 <HAL_DMA_IRQHandler+0xe3c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d018      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a30      	ldr	r2, [pc, #192]	@ (80072e8 <HAL_DMA_IRQHandler+0xe40>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d013      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a2f      	ldr	r2, [pc, #188]	@ (80072ec <HAL_DMA_IRQHandler+0xe44>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00e      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a2d      	ldr	r2, [pc, #180]	@ (80072f0 <HAL_DMA_IRQHandler+0xe48>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d009      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a2c      	ldr	r2, [pc, #176]	@ (80072f4 <HAL_DMA_IRQHandler+0xe4c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d004      	beq.n	8007252 <HAL_DMA_IRQHandler+0xdaa>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a2a      	ldr	r2, [pc, #168]	@ (80072f8 <HAL_DMA_IRQHandler+0xe50>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d108      	bne.n	8007264 <HAL_DMA_IRQHandler+0xdbc>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 021c 	bic.w	r2, r2, #28
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	e007      	b.n	8007274 <HAL_DMA_IRQHandler+0xdcc>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 020e 	bic.w	r2, r2, #14
 8007272:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	2201      	movs	r2, #1
 800727e:	409a      	lsls	r2, r3
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
 80072aa:	e004      	b.n	80072b6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80072ac:	bf00      	nop
 80072ae:	e002      	b.n	80072b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072b0:	bf00      	nop
 80072b2:	e000      	b.n	80072b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80072b6:	3728      	adds	r7, #40	@ 0x28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40020010 	.word	0x40020010
 80072c0:	40020028 	.word	0x40020028
 80072c4:	40020040 	.word	0x40020040
 80072c8:	40020058 	.word	0x40020058
 80072cc:	40020070 	.word	0x40020070
 80072d0:	40020088 	.word	0x40020088
 80072d4:	400200a0 	.word	0x400200a0
 80072d8:	400200b8 	.word	0x400200b8
 80072dc:	40020410 	.word	0x40020410
 80072e0:	40020428 	.word	0x40020428
 80072e4:	40020440 	.word	0x40020440
 80072e8:	40020458 	.word	0x40020458
 80072ec:	40020470 	.word	0x40020470
 80072f0:	40020488 	.word	0x40020488
 80072f4:	400204a0 	.word	0x400204a0
 80072f8:	400204b8 	.word	0x400204b8

080072fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800730e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007314:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a7f      	ldr	r2, [pc, #508]	@ (8007518 <DMA_SetConfig+0x21c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d072      	beq.n	8007406 <DMA_SetConfig+0x10a>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a7d      	ldr	r2, [pc, #500]	@ (800751c <DMA_SetConfig+0x220>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d06d      	beq.n	8007406 <DMA_SetConfig+0x10a>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a7c      	ldr	r2, [pc, #496]	@ (8007520 <DMA_SetConfig+0x224>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d068      	beq.n	8007406 <DMA_SetConfig+0x10a>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a7a      	ldr	r2, [pc, #488]	@ (8007524 <DMA_SetConfig+0x228>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d063      	beq.n	8007406 <DMA_SetConfig+0x10a>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a79      	ldr	r2, [pc, #484]	@ (8007528 <DMA_SetConfig+0x22c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d05e      	beq.n	8007406 <DMA_SetConfig+0x10a>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a77      	ldr	r2, [pc, #476]	@ (800752c <DMA_SetConfig+0x230>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d059      	beq.n	8007406 <DMA_SetConfig+0x10a>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a76      	ldr	r2, [pc, #472]	@ (8007530 <DMA_SetConfig+0x234>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d054      	beq.n	8007406 <DMA_SetConfig+0x10a>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a74      	ldr	r2, [pc, #464]	@ (8007534 <DMA_SetConfig+0x238>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d04f      	beq.n	8007406 <DMA_SetConfig+0x10a>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a73      	ldr	r2, [pc, #460]	@ (8007538 <DMA_SetConfig+0x23c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d04a      	beq.n	8007406 <DMA_SetConfig+0x10a>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a71      	ldr	r2, [pc, #452]	@ (800753c <DMA_SetConfig+0x240>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d045      	beq.n	8007406 <DMA_SetConfig+0x10a>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a70      	ldr	r2, [pc, #448]	@ (8007540 <DMA_SetConfig+0x244>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d040      	beq.n	8007406 <DMA_SetConfig+0x10a>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a6e      	ldr	r2, [pc, #440]	@ (8007544 <DMA_SetConfig+0x248>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d03b      	beq.n	8007406 <DMA_SetConfig+0x10a>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a6d      	ldr	r2, [pc, #436]	@ (8007548 <DMA_SetConfig+0x24c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d036      	beq.n	8007406 <DMA_SetConfig+0x10a>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a6b      	ldr	r2, [pc, #428]	@ (800754c <DMA_SetConfig+0x250>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d031      	beq.n	8007406 <DMA_SetConfig+0x10a>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a6a      	ldr	r2, [pc, #424]	@ (8007550 <DMA_SetConfig+0x254>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d02c      	beq.n	8007406 <DMA_SetConfig+0x10a>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a68      	ldr	r2, [pc, #416]	@ (8007554 <DMA_SetConfig+0x258>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d027      	beq.n	8007406 <DMA_SetConfig+0x10a>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a67      	ldr	r2, [pc, #412]	@ (8007558 <DMA_SetConfig+0x25c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d022      	beq.n	8007406 <DMA_SetConfig+0x10a>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a65      	ldr	r2, [pc, #404]	@ (800755c <DMA_SetConfig+0x260>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d01d      	beq.n	8007406 <DMA_SetConfig+0x10a>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a64      	ldr	r2, [pc, #400]	@ (8007560 <DMA_SetConfig+0x264>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d018      	beq.n	8007406 <DMA_SetConfig+0x10a>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a62      	ldr	r2, [pc, #392]	@ (8007564 <DMA_SetConfig+0x268>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d013      	beq.n	8007406 <DMA_SetConfig+0x10a>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a61      	ldr	r2, [pc, #388]	@ (8007568 <DMA_SetConfig+0x26c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00e      	beq.n	8007406 <DMA_SetConfig+0x10a>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a5f      	ldr	r2, [pc, #380]	@ (800756c <DMA_SetConfig+0x270>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d009      	beq.n	8007406 <DMA_SetConfig+0x10a>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a5e      	ldr	r2, [pc, #376]	@ (8007570 <DMA_SetConfig+0x274>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d004      	beq.n	8007406 <DMA_SetConfig+0x10a>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a5c      	ldr	r2, [pc, #368]	@ (8007574 <DMA_SetConfig+0x278>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d101      	bne.n	800740a <DMA_SetConfig+0x10e>
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <DMA_SetConfig+0x110>
 800740a:	2300      	movs	r3, #0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00d      	beq.n	800742c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007418:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800742a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a39      	ldr	r2, [pc, #228]	@ (8007518 <DMA_SetConfig+0x21c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d04a      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a38      	ldr	r2, [pc, #224]	@ (800751c <DMA_SetConfig+0x220>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d045      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a36      	ldr	r2, [pc, #216]	@ (8007520 <DMA_SetConfig+0x224>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d040      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a35      	ldr	r2, [pc, #212]	@ (8007524 <DMA_SetConfig+0x228>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d03b      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a33      	ldr	r2, [pc, #204]	@ (8007528 <DMA_SetConfig+0x22c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d036      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a32      	ldr	r2, [pc, #200]	@ (800752c <DMA_SetConfig+0x230>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d031      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a30      	ldr	r2, [pc, #192]	@ (8007530 <DMA_SetConfig+0x234>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d02c      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a2f      	ldr	r2, [pc, #188]	@ (8007534 <DMA_SetConfig+0x238>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d027      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a2d      	ldr	r2, [pc, #180]	@ (8007538 <DMA_SetConfig+0x23c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d022      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a2c      	ldr	r2, [pc, #176]	@ (800753c <DMA_SetConfig+0x240>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d01d      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a2a      	ldr	r2, [pc, #168]	@ (8007540 <DMA_SetConfig+0x244>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d018      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a29      	ldr	r2, [pc, #164]	@ (8007544 <DMA_SetConfig+0x248>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d013      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a27      	ldr	r2, [pc, #156]	@ (8007548 <DMA_SetConfig+0x24c>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d00e      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a26      	ldr	r2, [pc, #152]	@ (800754c <DMA_SetConfig+0x250>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d009      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a24      	ldr	r2, [pc, #144]	@ (8007550 <DMA_SetConfig+0x254>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d004      	beq.n	80074cc <DMA_SetConfig+0x1d0>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a23      	ldr	r2, [pc, #140]	@ (8007554 <DMA_SetConfig+0x258>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d101      	bne.n	80074d0 <DMA_SetConfig+0x1d4>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e000      	b.n	80074d2 <DMA_SetConfig+0x1d6>
 80074d0:	2300      	movs	r3, #0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d059      	beq.n	800758a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074da:	f003 031f 	and.w	r3, r3, #31
 80074de:	223f      	movs	r2, #63	@ 0x3f
 80074e0:	409a      	lsls	r2, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80074f4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2b40      	cmp	r3, #64	@ 0x40
 8007504:	d138      	bne.n	8007578 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007516:	e086      	b.n	8007626 <DMA_SetConfig+0x32a>
 8007518:	40020010 	.word	0x40020010
 800751c:	40020028 	.word	0x40020028
 8007520:	40020040 	.word	0x40020040
 8007524:	40020058 	.word	0x40020058
 8007528:	40020070 	.word	0x40020070
 800752c:	40020088 	.word	0x40020088
 8007530:	400200a0 	.word	0x400200a0
 8007534:	400200b8 	.word	0x400200b8
 8007538:	40020410 	.word	0x40020410
 800753c:	40020428 	.word	0x40020428
 8007540:	40020440 	.word	0x40020440
 8007544:	40020458 	.word	0x40020458
 8007548:	40020470 	.word	0x40020470
 800754c:	40020488 	.word	0x40020488
 8007550:	400204a0 	.word	0x400204a0
 8007554:	400204b8 	.word	0x400204b8
 8007558:	58025408 	.word	0x58025408
 800755c:	5802541c 	.word	0x5802541c
 8007560:	58025430 	.word	0x58025430
 8007564:	58025444 	.word	0x58025444
 8007568:	58025458 	.word	0x58025458
 800756c:	5802546c 	.word	0x5802546c
 8007570:	58025480 	.word	0x58025480
 8007574:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	60da      	str	r2, [r3, #12]
}
 8007588:	e04d      	b.n	8007626 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a29      	ldr	r2, [pc, #164]	@ (8007634 <DMA_SetConfig+0x338>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d022      	beq.n	80075da <DMA_SetConfig+0x2de>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a27      	ldr	r2, [pc, #156]	@ (8007638 <DMA_SetConfig+0x33c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d01d      	beq.n	80075da <DMA_SetConfig+0x2de>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a26      	ldr	r2, [pc, #152]	@ (800763c <DMA_SetConfig+0x340>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d018      	beq.n	80075da <DMA_SetConfig+0x2de>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a24      	ldr	r2, [pc, #144]	@ (8007640 <DMA_SetConfig+0x344>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d013      	beq.n	80075da <DMA_SetConfig+0x2de>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a23      	ldr	r2, [pc, #140]	@ (8007644 <DMA_SetConfig+0x348>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00e      	beq.n	80075da <DMA_SetConfig+0x2de>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a21      	ldr	r2, [pc, #132]	@ (8007648 <DMA_SetConfig+0x34c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d009      	beq.n	80075da <DMA_SetConfig+0x2de>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a20      	ldr	r2, [pc, #128]	@ (800764c <DMA_SetConfig+0x350>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d004      	beq.n	80075da <DMA_SetConfig+0x2de>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007650 <DMA_SetConfig+0x354>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d101      	bne.n	80075de <DMA_SetConfig+0x2e2>
 80075da:	2301      	movs	r3, #1
 80075dc:	e000      	b.n	80075e0 <DMA_SetConfig+0x2e4>
 80075de:	2300      	movs	r3, #0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d020      	beq.n	8007626 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075e8:	f003 031f 	and.w	r3, r3, #31
 80075ec:	2201      	movs	r2, #1
 80075ee:	409a      	lsls	r2, r3
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	2b40      	cmp	r3, #64	@ 0x40
 8007602:	d108      	bne.n	8007616 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	60da      	str	r2, [r3, #12]
}
 8007614:	e007      	b.n	8007626 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	60da      	str	r2, [r3, #12]
}
 8007626:	bf00      	nop
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	58025408 	.word	0x58025408
 8007638:	5802541c 	.word	0x5802541c
 800763c:	58025430 	.word	0x58025430
 8007640:	58025444 	.word	0x58025444
 8007644:	58025458 	.word	0x58025458
 8007648:	5802546c 	.word	0x5802546c
 800764c:	58025480 	.word	0x58025480
 8007650:	58025494 	.word	0x58025494

08007654 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a42      	ldr	r2, [pc, #264]	@ (800776c <DMA_CalcBaseAndBitshift+0x118>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d04a      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a41      	ldr	r2, [pc, #260]	@ (8007770 <DMA_CalcBaseAndBitshift+0x11c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d045      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a3f      	ldr	r2, [pc, #252]	@ (8007774 <DMA_CalcBaseAndBitshift+0x120>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d040      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a3e      	ldr	r2, [pc, #248]	@ (8007778 <DMA_CalcBaseAndBitshift+0x124>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d03b      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a3c      	ldr	r2, [pc, #240]	@ (800777c <DMA_CalcBaseAndBitshift+0x128>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d036      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a3b      	ldr	r2, [pc, #236]	@ (8007780 <DMA_CalcBaseAndBitshift+0x12c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d031      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a39      	ldr	r2, [pc, #228]	@ (8007784 <DMA_CalcBaseAndBitshift+0x130>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d02c      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a38      	ldr	r2, [pc, #224]	@ (8007788 <DMA_CalcBaseAndBitshift+0x134>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d027      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a36      	ldr	r2, [pc, #216]	@ (800778c <DMA_CalcBaseAndBitshift+0x138>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d022      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a35      	ldr	r2, [pc, #212]	@ (8007790 <DMA_CalcBaseAndBitshift+0x13c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d01d      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a33      	ldr	r2, [pc, #204]	@ (8007794 <DMA_CalcBaseAndBitshift+0x140>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d018      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a32      	ldr	r2, [pc, #200]	@ (8007798 <DMA_CalcBaseAndBitshift+0x144>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d013      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a30      	ldr	r2, [pc, #192]	@ (800779c <DMA_CalcBaseAndBitshift+0x148>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00e      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2f      	ldr	r2, [pc, #188]	@ (80077a0 <DMA_CalcBaseAndBitshift+0x14c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d009      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a2d      	ldr	r2, [pc, #180]	@ (80077a4 <DMA_CalcBaseAndBitshift+0x150>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d004      	beq.n	80076fc <DMA_CalcBaseAndBitshift+0xa8>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a2c      	ldr	r2, [pc, #176]	@ (80077a8 <DMA_CalcBaseAndBitshift+0x154>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d101      	bne.n	8007700 <DMA_CalcBaseAndBitshift+0xac>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <DMA_CalcBaseAndBitshift+0xae>
 8007700:	2300      	movs	r3, #0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d024      	beq.n	8007750 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	3b10      	subs	r3, #16
 800770e:	4a27      	ldr	r2, [pc, #156]	@ (80077ac <DMA_CalcBaseAndBitshift+0x158>)
 8007710:	fba2 2303 	umull	r2, r3, r2, r3
 8007714:	091b      	lsrs	r3, r3, #4
 8007716:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	4a24      	ldr	r2, [pc, #144]	@ (80077b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007720:	5cd3      	ldrb	r3, [r2, r3]
 8007722:	461a      	mov	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b03      	cmp	r3, #3
 800772c:	d908      	bls.n	8007740 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	4b1f      	ldr	r3, [pc, #124]	@ (80077b4 <DMA_CalcBaseAndBitshift+0x160>)
 8007736:	4013      	ands	r3, r2
 8007738:	1d1a      	adds	r2, r3, #4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	659a      	str	r2, [r3, #88]	@ 0x58
 800773e:	e00d      	b.n	800775c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	4b1b      	ldr	r3, [pc, #108]	@ (80077b4 <DMA_CalcBaseAndBitshift+0x160>)
 8007748:	4013      	ands	r3, r2
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6593      	str	r3, [r2, #88]	@ 0x58
 800774e:	e005      	b.n	800775c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	40020010 	.word	0x40020010
 8007770:	40020028 	.word	0x40020028
 8007774:	40020040 	.word	0x40020040
 8007778:	40020058 	.word	0x40020058
 800777c:	40020070 	.word	0x40020070
 8007780:	40020088 	.word	0x40020088
 8007784:	400200a0 	.word	0x400200a0
 8007788:	400200b8 	.word	0x400200b8
 800778c:	40020410 	.word	0x40020410
 8007790:	40020428 	.word	0x40020428
 8007794:	40020440 	.word	0x40020440
 8007798:	40020458 	.word	0x40020458
 800779c:	40020470 	.word	0x40020470
 80077a0:	40020488 	.word	0x40020488
 80077a4:	400204a0 	.word	0x400204a0
 80077a8:	400204b8 	.word	0x400204b8
 80077ac:	aaaaaaab 	.word	0xaaaaaaab
 80077b0:	08013fc4 	.word	0x08013fc4
 80077b4:	fffffc00 	.word	0xfffffc00

080077b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d120      	bne.n	800780e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d858      	bhi.n	8007886 <DMA_CheckFifoParam+0xce>
 80077d4:	a201      	add	r2, pc, #4	@ (adr r2, 80077dc <DMA_CheckFifoParam+0x24>)
 80077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077da:	bf00      	nop
 80077dc:	080077ed 	.word	0x080077ed
 80077e0:	080077ff 	.word	0x080077ff
 80077e4:	080077ed 	.word	0x080077ed
 80077e8:	08007887 	.word	0x08007887
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d048      	beq.n	800788a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077fc:	e045      	b.n	800788a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007802:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007806:	d142      	bne.n	800788e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800780c:	e03f      	b.n	800788e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007816:	d123      	bne.n	8007860 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781c:	2b03      	cmp	r3, #3
 800781e:	d838      	bhi.n	8007892 <DMA_CheckFifoParam+0xda>
 8007820:	a201      	add	r2, pc, #4	@ (adr r2, 8007828 <DMA_CheckFifoParam+0x70>)
 8007822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007826:	bf00      	nop
 8007828:	08007839 	.word	0x08007839
 800782c:	0800783f 	.word	0x0800783f
 8007830:	08007839 	.word	0x08007839
 8007834:	08007851 	.word	0x08007851
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	73fb      	strb	r3, [r7, #15]
        break;
 800783c:	e030      	b.n	80078a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007842:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d025      	beq.n	8007896 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800784e:	e022      	b.n	8007896 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007854:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007858:	d11f      	bne.n	800789a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800785e:	e01c      	b.n	800789a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007864:	2b02      	cmp	r3, #2
 8007866:	d902      	bls.n	800786e <DMA_CheckFifoParam+0xb6>
 8007868:	2b03      	cmp	r3, #3
 800786a:	d003      	beq.n	8007874 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800786c:	e018      	b.n	80078a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	73fb      	strb	r3, [r7, #15]
        break;
 8007872:	e015      	b.n	80078a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007878:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00e      	beq.n	800789e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	73fb      	strb	r3, [r7, #15]
    break;
 8007884:	e00b      	b.n	800789e <DMA_CheckFifoParam+0xe6>
        break;
 8007886:	bf00      	nop
 8007888:	e00a      	b.n	80078a0 <DMA_CheckFifoParam+0xe8>
        break;
 800788a:	bf00      	nop
 800788c:	e008      	b.n	80078a0 <DMA_CheckFifoParam+0xe8>
        break;
 800788e:	bf00      	nop
 8007890:	e006      	b.n	80078a0 <DMA_CheckFifoParam+0xe8>
        break;
 8007892:	bf00      	nop
 8007894:	e004      	b.n	80078a0 <DMA_CheckFifoParam+0xe8>
        break;
 8007896:	bf00      	nop
 8007898:	e002      	b.n	80078a0 <DMA_CheckFifoParam+0xe8>
        break;
 800789a:	bf00      	nop
 800789c:	e000      	b.n	80078a0 <DMA_CheckFifoParam+0xe8>
    break;
 800789e:	bf00      	nop
    }
  }

  return status;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop

080078b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a38      	ldr	r2, [pc, #224]	@ (80079a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d022      	beq.n	800790e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a36      	ldr	r2, [pc, #216]	@ (80079a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d01d      	beq.n	800790e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a35      	ldr	r2, [pc, #212]	@ (80079ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d018      	beq.n	800790e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a33      	ldr	r2, [pc, #204]	@ (80079b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d013      	beq.n	800790e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a32      	ldr	r2, [pc, #200]	@ (80079b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00e      	beq.n	800790e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a30      	ldr	r2, [pc, #192]	@ (80079b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d009      	beq.n	800790e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a2f      	ldr	r2, [pc, #188]	@ (80079bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d004      	beq.n	800790e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a2d      	ldr	r2, [pc, #180]	@ (80079c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d101      	bne.n	8007912 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007912:	2300      	movs	r3, #0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01a      	beq.n	800794e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	3b08      	subs	r3, #8
 8007920:	4a28      	ldr	r2, [pc, #160]	@ (80079c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007922:	fba2 2303 	umull	r2, r3, r2, r3
 8007926:	091b      	lsrs	r3, r3, #4
 8007928:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	4b26      	ldr	r3, [pc, #152]	@ (80079c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a24      	ldr	r2, [pc, #144]	@ (80079cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800793c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f003 031f 	and.w	r3, r3, #31
 8007944:	2201      	movs	r2, #1
 8007946:	409a      	lsls	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800794c:	e024      	b.n	8007998 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	3b10      	subs	r3, #16
 8007956:	4a1e      	ldr	r2, [pc, #120]	@ (80079d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007958:	fba2 2303 	umull	r2, r3, r2, r3
 800795c:	091b      	lsrs	r3, r3, #4
 800795e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4a1c      	ldr	r2, [pc, #112]	@ (80079d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d806      	bhi.n	8007976 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4a1b      	ldr	r2, [pc, #108]	@ (80079d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d902      	bls.n	8007976 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3308      	adds	r3, #8
 8007974:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4b18      	ldr	r3, [pc, #96]	@ (80079dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a16      	ldr	r2, [pc, #88]	@ (80079e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007988:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f003 031f 	and.w	r3, r3, #31
 8007990:	2201      	movs	r2, #1
 8007992:	409a      	lsls	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007998:	bf00      	nop
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	58025408 	.word	0x58025408
 80079a8:	5802541c 	.word	0x5802541c
 80079ac:	58025430 	.word	0x58025430
 80079b0:	58025444 	.word	0x58025444
 80079b4:	58025458 	.word	0x58025458
 80079b8:	5802546c 	.word	0x5802546c
 80079bc:	58025480 	.word	0x58025480
 80079c0:	58025494 	.word	0x58025494
 80079c4:	cccccccd 	.word	0xcccccccd
 80079c8:	16009600 	.word	0x16009600
 80079cc:	58025880 	.word	0x58025880
 80079d0:	aaaaaaab 	.word	0xaaaaaaab
 80079d4:	400204b8 	.word	0x400204b8
 80079d8:	4002040f 	.word	0x4002040f
 80079dc:	10008200 	.word	0x10008200
 80079e0:	40020880 	.word	0x40020880

080079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d04a      	beq.n	8007a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d847      	bhi.n	8007a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a25      	ldr	r2, [pc, #148]	@ (8007a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d022      	beq.n	8007a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a24      	ldr	r2, [pc, #144]	@ (8007aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d01d      	beq.n	8007a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a22      	ldr	r2, [pc, #136]	@ (8007aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d018      	beq.n	8007a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a21      	ldr	r2, [pc, #132]	@ (8007aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d013      	beq.n	8007a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8007aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00e      	beq.n	8007a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d009      	beq.n	8007a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d004      	beq.n	8007a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d101      	bne.n	8007a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e000      	b.n	8007a56 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007a54:	2300      	movs	r3, #0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4b17      	ldr	r3, [pc, #92]	@ (8007abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a15      	ldr	r2, [pc, #84]	@ (8007ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007a6c:	671a      	str	r2, [r3, #112]	@ 0x70
 8007a6e:	e009      	b.n	8007a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4b14      	ldr	r3, [pc, #80]	@ (8007ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	461a      	mov	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a11      	ldr	r2, [pc, #68]	@ (8007ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007a82:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	2201      	movs	r2, #1
 8007a8a:	409a      	lsls	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007a90:	bf00      	nop
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	58025408 	.word	0x58025408
 8007aa0:	5802541c 	.word	0x5802541c
 8007aa4:	58025430 	.word	0x58025430
 8007aa8:	58025444 	.word	0x58025444
 8007aac:	58025458 	.word	0x58025458
 8007ab0:	5802546c 	.word	0x5802546c
 8007ab4:	58025480 	.word	0x58025480
 8007ab8:	58025494 	.word	0x58025494
 8007abc:	1600963f 	.word	0x1600963f
 8007ac0:	58025940 	.word	0x58025940
 8007ac4:	1000823f 	.word	0x1000823f
 8007ac8:	40020940 	.word	0x40020940

08007acc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b089      	sub	sp, #36	@ 0x24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007ada:	4b89      	ldr	r3, [pc, #548]	@ (8007d00 <HAL_GPIO_Init+0x234>)
 8007adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ade:	e194      	b.n	8007e0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8007aec:	4013      	ands	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 8186 	beq.w	8007e04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d005      	beq.n	8007b10 <HAL_GPIO_Init+0x44>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f003 0303 	and.w	r3, r3, #3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d130      	bne.n	8007b72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b20:	43db      	mvns	r3, r3
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	4013      	ands	r3, r2
 8007b26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	fa02 f303 	lsl.w	r3, r2, r3
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b46:	2201      	movs	r2, #1
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	43db      	mvns	r3, r3
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	4013      	ands	r3, r2
 8007b54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	091b      	lsrs	r3, r3, #4
 8007b5c:	f003 0201 	and.w	r2, r3, #1
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	fa02 f303 	lsl.w	r3, r2, r3
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d017      	beq.n	8007bae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	2203      	movs	r2, #3
 8007b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8e:	43db      	mvns	r3, r3
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	4013      	ands	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d123      	bne.n	8007c02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	08da      	lsrs	r2, r3, #3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3208      	adds	r2, #8
 8007bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	f003 0307 	and.w	r3, r3, #7
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	220f      	movs	r2, #15
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	43db      	mvns	r3, r3
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	691a      	ldr	r2, [r3, #16]
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	f003 0307 	and.w	r3, r3, #7
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	fa02 f303 	lsl.w	r3, r2, r3
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	08da      	lsrs	r2, r3, #3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3208      	adds	r2, #8
 8007bfc:	69b9      	ldr	r1, [r7, #24]
 8007bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	2203      	movs	r2, #3
 8007c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c12:	43db      	mvns	r3, r3
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	4013      	ands	r3, r2
 8007c18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f003 0203 	and.w	r2, r3, #3
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80e0 	beq.w	8007e04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c44:	4b2f      	ldr	r3, [pc, #188]	@ (8007d04 <HAL_GPIO_Init+0x238>)
 8007c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8007d04 <HAL_GPIO_Init+0x238>)
 8007c4c:	f043 0302 	orr.w	r3, r3, #2
 8007c50:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007c54:	4b2b      	ldr	r3, [pc, #172]	@ (8007d04 <HAL_GPIO_Init+0x238>)
 8007c56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c62:	4a29      	ldr	r2, [pc, #164]	@ (8007d08 <HAL_GPIO_Init+0x23c>)
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	089b      	lsrs	r3, r3, #2
 8007c68:	3302      	adds	r3, #2
 8007c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	220f      	movs	r2, #15
 8007c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7e:	43db      	mvns	r3, r3
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	4013      	ands	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a20      	ldr	r2, [pc, #128]	@ (8007d0c <HAL_GPIO_Init+0x240>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d052      	beq.n	8007d34 <HAL_GPIO_Init+0x268>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a1f      	ldr	r2, [pc, #124]	@ (8007d10 <HAL_GPIO_Init+0x244>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d031      	beq.n	8007cfa <HAL_GPIO_Init+0x22e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a1e      	ldr	r2, [pc, #120]	@ (8007d14 <HAL_GPIO_Init+0x248>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d02b      	beq.n	8007cf6 <HAL_GPIO_Init+0x22a>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d18 <HAL_GPIO_Init+0x24c>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d025      	beq.n	8007cf2 <HAL_GPIO_Init+0x226>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d1c <HAL_GPIO_Init+0x250>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d01f      	beq.n	8007cee <HAL_GPIO_Init+0x222>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8007d20 <HAL_GPIO_Init+0x254>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d019      	beq.n	8007cea <HAL_GPIO_Init+0x21e>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8007d24 <HAL_GPIO_Init+0x258>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d013      	beq.n	8007ce6 <HAL_GPIO_Init+0x21a>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a19      	ldr	r2, [pc, #100]	@ (8007d28 <HAL_GPIO_Init+0x25c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00d      	beq.n	8007ce2 <HAL_GPIO_Init+0x216>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a18      	ldr	r2, [pc, #96]	@ (8007d2c <HAL_GPIO_Init+0x260>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d007      	beq.n	8007cde <HAL_GPIO_Init+0x212>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a17      	ldr	r2, [pc, #92]	@ (8007d30 <HAL_GPIO_Init+0x264>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d101      	bne.n	8007cda <HAL_GPIO_Init+0x20e>
 8007cd6:	2309      	movs	r3, #9
 8007cd8:	e02d      	b.n	8007d36 <HAL_GPIO_Init+0x26a>
 8007cda:	230a      	movs	r3, #10
 8007cdc:	e02b      	b.n	8007d36 <HAL_GPIO_Init+0x26a>
 8007cde:	2308      	movs	r3, #8
 8007ce0:	e029      	b.n	8007d36 <HAL_GPIO_Init+0x26a>
 8007ce2:	2307      	movs	r3, #7
 8007ce4:	e027      	b.n	8007d36 <HAL_GPIO_Init+0x26a>
 8007ce6:	2306      	movs	r3, #6
 8007ce8:	e025      	b.n	8007d36 <HAL_GPIO_Init+0x26a>
 8007cea:	2305      	movs	r3, #5
 8007cec:	e023      	b.n	8007d36 <HAL_GPIO_Init+0x26a>
 8007cee:	2304      	movs	r3, #4
 8007cf0:	e021      	b.n	8007d36 <HAL_GPIO_Init+0x26a>
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e01f      	b.n	8007d36 <HAL_GPIO_Init+0x26a>
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e01d      	b.n	8007d36 <HAL_GPIO_Init+0x26a>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e01b      	b.n	8007d36 <HAL_GPIO_Init+0x26a>
 8007cfe:	bf00      	nop
 8007d00:	58000080 	.word	0x58000080
 8007d04:	58024400 	.word	0x58024400
 8007d08:	58000400 	.word	0x58000400
 8007d0c:	58020000 	.word	0x58020000
 8007d10:	58020400 	.word	0x58020400
 8007d14:	58020800 	.word	0x58020800
 8007d18:	58020c00 	.word	0x58020c00
 8007d1c:	58021000 	.word	0x58021000
 8007d20:	58021400 	.word	0x58021400
 8007d24:	58021800 	.word	0x58021800
 8007d28:	58021c00 	.word	0x58021c00
 8007d2c:	58022000 	.word	0x58022000
 8007d30:	58022400 	.word	0x58022400
 8007d34:	2300      	movs	r3, #0
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	f002 0203 	and.w	r2, r2, #3
 8007d3c:	0092      	lsls	r2, r2, #2
 8007d3e:	4093      	lsls	r3, r2
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d46:	4938      	ldr	r1, [pc, #224]	@ (8007e28 <HAL_GPIO_Init+0x35c>)
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	089b      	lsrs	r3, r3, #2
 8007d4c:	3302      	adds	r3, #2
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	43db      	mvns	r3, r3
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	4013      	ands	r3, r2
 8007d64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	4013      	ands	r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007da8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	43db      	mvns	r3, r3
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	43db      	mvns	r3, r3
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	4013      	ands	r3, r2
 8007de8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	3301      	adds	r3, #1
 8007e08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	fa22 f303 	lsr.w	r3, r2, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f47f ae63 	bne.w	8007ae0 <HAL_GPIO_Init+0x14>
  }
}
 8007e1a:	bf00      	nop
 8007e1c:	bf00      	nop
 8007e1e:	3724      	adds	r7, #36	@ 0x24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	58000400 	.word	0x58000400

08007e2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e3a:	4b75      	ldr	r3, [pc, #468]	@ (8008010 <HAL_GPIO_DeInit+0x1e4>)
 8007e3c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8007e3e:	e0d9      	b.n	8007ff4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007e40:	2201      	movs	r2, #1
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	fa02 f303 	lsl.w	r3, r2, r3
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 80cc 	beq.w	8007fee <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007e56:	4a6f      	ldr	r2, [pc, #444]	@ (8008014 <HAL_GPIO_DeInit+0x1e8>)
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	089b      	lsrs	r3, r3, #2
 8007e5c:	3302      	adds	r3, #2
 8007e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e62:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	220f      	movs	r2, #15
 8007e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	4013      	ands	r3, r2
 8007e76:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a67      	ldr	r2, [pc, #412]	@ (8008018 <HAL_GPIO_DeInit+0x1ec>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d037      	beq.n	8007ef0 <HAL_GPIO_DeInit+0xc4>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a66      	ldr	r2, [pc, #408]	@ (800801c <HAL_GPIO_DeInit+0x1f0>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d031      	beq.n	8007eec <HAL_GPIO_DeInit+0xc0>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a65      	ldr	r2, [pc, #404]	@ (8008020 <HAL_GPIO_DeInit+0x1f4>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d02b      	beq.n	8007ee8 <HAL_GPIO_DeInit+0xbc>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a64      	ldr	r2, [pc, #400]	@ (8008024 <HAL_GPIO_DeInit+0x1f8>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d025      	beq.n	8007ee4 <HAL_GPIO_DeInit+0xb8>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a63      	ldr	r2, [pc, #396]	@ (8008028 <HAL_GPIO_DeInit+0x1fc>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d01f      	beq.n	8007ee0 <HAL_GPIO_DeInit+0xb4>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a62      	ldr	r2, [pc, #392]	@ (800802c <HAL_GPIO_DeInit+0x200>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d019      	beq.n	8007edc <HAL_GPIO_DeInit+0xb0>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a61      	ldr	r2, [pc, #388]	@ (8008030 <HAL_GPIO_DeInit+0x204>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d013      	beq.n	8007ed8 <HAL_GPIO_DeInit+0xac>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a60      	ldr	r2, [pc, #384]	@ (8008034 <HAL_GPIO_DeInit+0x208>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d00d      	beq.n	8007ed4 <HAL_GPIO_DeInit+0xa8>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a5f      	ldr	r2, [pc, #380]	@ (8008038 <HAL_GPIO_DeInit+0x20c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d007      	beq.n	8007ed0 <HAL_GPIO_DeInit+0xa4>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800803c <HAL_GPIO_DeInit+0x210>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d101      	bne.n	8007ecc <HAL_GPIO_DeInit+0xa0>
 8007ec8:	2309      	movs	r3, #9
 8007eca:	e012      	b.n	8007ef2 <HAL_GPIO_DeInit+0xc6>
 8007ecc:	230a      	movs	r3, #10
 8007ece:	e010      	b.n	8007ef2 <HAL_GPIO_DeInit+0xc6>
 8007ed0:	2308      	movs	r3, #8
 8007ed2:	e00e      	b.n	8007ef2 <HAL_GPIO_DeInit+0xc6>
 8007ed4:	2307      	movs	r3, #7
 8007ed6:	e00c      	b.n	8007ef2 <HAL_GPIO_DeInit+0xc6>
 8007ed8:	2306      	movs	r3, #6
 8007eda:	e00a      	b.n	8007ef2 <HAL_GPIO_DeInit+0xc6>
 8007edc:	2305      	movs	r3, #5
 8007ede:	e008      	b.n	8007ef2 <HAL_GPIO_DeInit+0xc6>
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	e006      	b.n	8007ef2 <HAL_GPIO_DeInit+0xc6>
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e004      	b.n	8007ef2 <HAL_GPIO_DeInit+0xc6>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e002      	b.n	8007ef2 <HAL_GPIO_DeInit+0xc6>
 8007eec:	2301      	movs	r3, #1
 8007eee:	e000      	b.n	8007ef2 <HAL_GPIO_DeInit+0xc6>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	f002 0203 	and.w	r2, r2, #3
 8007ef8:	0092      	lsls	r2, r2, #2
 8007efa:	4093      	lsls	r3, r2
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d136      	bne.n	8007f70 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	401a      	ands	r2, r3
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	43db      	mvns	r3, r3
 8007f18:	401a      	ands	r2, r3
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	43db      	mvns	r3, r3
 8007f28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	43db      	mvns	r3, r3
 8007f3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f3e:	4013      	ands	r3, r2
 8007f40:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f003 0303 	and.w	r3, r3, #3
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	220f      	movs	r2, #15
 8007f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f50:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007f52:	4a30      	ldr	r2, [pc, #192]	@ (8008014 <HAL_GPIO_DeInit+0x1e8>)
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	089b      	lsrs	r3, r3, #2
 8007f58:	3302      	adds	r3, #2
 8007f5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	43da      	mvns	r2, r3
 8007f62:	482c      	ldr	r0, [pc, #176]	@ (8008014 <HAL_GPIO_DeInit+0x1e8>)
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	089b      	lsrs	r3, r3, #2
 8007f68:	400a      	ands	r2, r1
 8007f6a:	3302      	adds	r3, #2
 8007f6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	005b      	lsls	r3, r3, #1
 8007f78:	2103      	movs	r1, #3
 8007f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	08da      	lsrs	r2, r3, #3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3208      	adds	r2, #8
 8007f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f003 0307 	and.w	r3, r3, #7
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	220f      	movs	r2, #15
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	43db      	mvns	r3, r3
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	08d2      	lsrs	r2, r2, #3
 8007fa4:	4019      	ands	r1, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3208      	adds	r2, #8
 8007faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	2103      	movs	r1, #3
 8007fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	401a      	ands	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	2101      	movs	r1, #1
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	401a      	ands	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	2103      	movs	r1, #3
 8007fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe6:	43db      	mvns	r3, r3
 8007fe8:	401a      	ands	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	609a      	str	r2, [r3, #8]
    }

    position++;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f47f af1f 	bne.w	8007e40 <HAL_GPIO_DeInit+0x14>
  }
}
 8008002:	bf00      	nop
 8008004:	bf00      	nop
 8008006:	371c      	adds	r7, #28
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	58000080 	.word	0x58000080
 8008014:	58000400 	.word	0x58000400
 8008018:	58020000 	.word	0x58020000
 800801c:	58020400 	.word	0x58020400
 8008020:	58020800 	.word	0x58020800
 8008024:	58020c00 	.word	0x58020c00
 8008028:	58021000 	.word	0x58021000
 800802c:	58021400 	.word	0x58021400
 8008030:	58021800 	.word	0x58021800
 8008034:	58021c00 	.word	0x58021c00
 8008038:	58022000 	.word	0x58022000
 800803c:	58022400 	.word	0x58022400

08008040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	807b      	strh	r3, [r7, #2]
 800804c:	4613      	mov	r3, r2
 800804e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008050:	787b      	ldrb	r3, [r7, #1]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008056:	887a      	ldrh	r2, [r7, #2]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800805c:	e003      	b.n	8008066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800805e:	887b      	ldrh	r3, [r7, #2]
 8008060:	041a      	lsls	r2, r3, #16
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	619a      	str	r2, [r3, #24]
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
	...

08008074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e07f      	b.n	8008186 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7f9 f9f2 	bl	8001484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2224      	movs	r2, #36	@ 0x24
 80080a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0201 	bic.w	r2, r2, #1
 80080b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80080c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80080d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d107      	bne.n	80080ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689a      	ldr	r2, [r3, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080ea:	609a      	str	r2, [r3, #8]
 80080ec:	e006      	b.n	80080fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80080fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	2b02      	cmp	r3, #2
 8008102:	d104      	bne.n	800810e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800810c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6859      	ldr	r1, [r3, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	4b1d      	ldr	r3, [pc, #116]	@ (8008190 <HAL_I2C_Init+0x11c>)
 800811a:	430b      	orrs	r3, r1
 800811c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800812c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691a      	ldr	r2, [r3, #16]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69d9      	ldr	r1, [r3, #28]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1a      	ldr	r2, [r3, #32]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	430a      	orrs	r2, r1
 8008156:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	02008000 	.word	0x02008000

08008194 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	d138      	bne.n	800821c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d101      	bne.n	80081b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80081b4:	2302      	movs	r3, #2
 80081b6:	e032      	b.n	800821e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2224      	movs	r2, #36	@ 0x24
 80081c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0201 	bic.w	r2, r2, #1
 80081d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80081e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6819      	ldr	r1, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	430a      	orrs	r2, r1
 80081f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2220      	movs	r2, #32
 800820c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	e000      	b.n	800821e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800821c:	2302      	movs	r3, #2
  }
}
 800821e:	4618      	mov	r0, r3
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800822a:	b480      	push	{r7}
 800822c:	b085      	sub	sp, #20
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b20      	cmp	r3, #32
 800823e:	d139      	bne.n	80082b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800824a:	2302      	movs	r3, #2
 800824c:	e033      	b.n	80082b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2224      	movs	r2, #36	@ 0x24
 800825a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 0201 	bic.w	r2, r2, #1
 800826c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800827c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	021b      	lsls	r3, r3, #8
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	4313      	orrs	r3, r2
 8008286:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0201 	orr.w	r2, r2, #1
 800829e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	e000      	b.n	80082b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80082b4:	2302      	movs	r3, #2
  }
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
	...

080082c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80082cc:	4b19      	ldr	r3, [pc, #100]	@ (8008334 <HAL_PWREx_ConfigSupply+0x70>)
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d00a      	beq.n	80082ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80082d8:	4b16      	ldr	r3, [pc, #88]	@ (8008334 <HAL_PWREx_ConfigSupply+0x70>)
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f003 0307 	and.w	r3, r3, #7
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d001      	beq.n	80082ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e01f      	b.n	800832a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	e01d      	b.n	800832a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80082ee:	4b11      	ldr	r3, [pc, #68]	@ (8008334 <HAL_PWREx_ConfigSupply+0x70>)
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f023 0207 	bic.w	r2, r3, #7
 80082f6:	490f      	ldr	r1, [pc, #60]	@ (8008334 <HAL_PWREx_ConfigSupply+0x70>)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80082fe:	f7fa fa67 	bl	80027d0 <HAL_GetTick>
 8008302:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008304:	e009      	b.n	800831a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008306:	f7fa fa63 	bl	80027d0 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008314:	d901      	bls.n	800831a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e007      	b.n	800832a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800831a:	4b06      	ldr	r3, [pc, #24]	@ (8008334 <HAL_PWREx_ConfigSupply+0x70>)
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008326:	d1ee      	bne.n	8008306 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	58024800 	.word	0x58024800

08008338 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08c      	sub	sp, #48	@ 0x30
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d102      	bne.n	800834c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	f000 bc48 	b.w	8008bdc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 808c 	beq.w	8008472 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800835a:	4b96      	ldr	r3, [pc, #600]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008364:	4b93      	ldr	r3, [pc, #588]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008368:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800836a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836c:	2b10      	cmp	r3, #16
 800836e:	d007      	beq.n	8008380 <HAL_RCC_OscConfig+0x48>
 8008370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008372:	2b18      	cmp	r3, #24
 8008374:	d111      	bne.n	800839a <HAL_RCC_OscConfig+0x62>
 8008376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d10c      	bne.n	800839a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008380:	4b8c      	ldr	r3, [pc, #560]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d071      	beq.n	8008470 <HAL_RCC_OscConfig+0x138>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d16d      	bne.n	8008470 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	f000 bc21 	b.w	8008bdc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083a2:	d106      	bne.n	80083b2 <HAL_RCC_OscConfig+0x7a>
 80083a4:	4b83      	ldr	r3, [pc, #524]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a82      	ldr	r2, [pc, #520]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80083aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	e02e      	b.n	8008410 <HAL_RCC_OscConfig+0xd8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10c      	bne.n	80083d4 <HAL_RCC_OscConfig+0x9c>
 80083ba:	4b7e      	ldr	r3, [pc, #504]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a7d      	ldr	r2, [pc, #500]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80083c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	4b7b      	ldr	r3, [pc, #492]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a7a      	ldr	r2, [pc, #488]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80083cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	e01d      	b.n	8008410 <HAL_RCC_OscConfig+0xd8>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083dc:	d10c      	bne.n	80083f8 <HAL_RCC_OscConfig+0xc0>
 80083de:	4b75      	ldr	r3, [pc, #468]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a74      	ldr	r2, [pc, #464]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80083e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	4b72      	ldr	r3, [pc, #456]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a71      	ldr	r2, [pc, #452]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80083f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	e00b      	b.n	8008410 <HAL_RCC_OscConfig+0xd8>
 80083f8:	4b6e      	ldr	r3, [pc, #440]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a6d      	ldr	r2, [pc, #436]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80083fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	4b6b      	ldr	r3, [pc, #428]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a6a      	ldr	r2, [pc, #424]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 800840a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800840e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d015      	beq.n	8008444 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008418:	f7fa f9da 	bl	80027d0 <HAL_GetTick>
 800841c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800841e:	e00a      	b.n	8008436 <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008420:	f7fa f9d6 	bl	80027d0 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800842e:	4293      	cmp	r3, r2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e3d2      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008436:	4b5f      	ldr	r3, [pc, #380]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0ee      	beq.n	8008420 <HAL_RCC_OscConfig+0xe8>
 8008442:	e016      	b.n	8008472 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008444:	f7fa f9c4 	bl	80027d0 <HAL_GetTick>
 8008448:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800844a:	e00a      	b.n	8008462 <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800844c:	f7fa f9c0 	bl	80027d0 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800845a:	4293      	cmp	r3, r2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e3bc      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008462:	4b54      	ldr	r3, [pc, #336]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1ee      	bne.n	800844c <HAL_RCC_OscConfig+0x114>
 800846e:	e000      	b.n	8008472 <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 80cb 	beq.w	8008616 <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008480:	4b4c      	ldr	r3, [pc, #304]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008488:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800848a:	4b4a      	ldr	r3, [pc, #296]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 800848c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d007      	beq.n	80084a6 <HAL_RCC_OscConfig+0x16e>
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	2b18      	cmp	r3, #24
 800849a:	d156      	bne.n	800854a <HAL_RCC_OscConfig+0x212>
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	f003 0303 	and.w	r3, r3, #3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d151      	bne.n	800854a <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084a6:	4b43      	ldr	r3, [pc, #268]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0304 	and.w	r3, r3, #4
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d005      	beq.n	80084be <HAL_RCC_OscConfig+0x186>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e38e      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084be:	4b3d      	ldr	r3, [pc, #244]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f023 0219 	bic.w	r2, r3, #25
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	493a      	ldr	r1, [pc, #232]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d0:	f7fa f97e 	bl	80027d0 <HAL_GetTick>
 80084d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084d6:	e008      	b.n	80084ea <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084d8:	f7fa f97a 	bl	80027d0 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e378      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084ea:	4b32      	ldr	r3, [pc, #200]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0f0      	beq.n	80084d8 <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084f6:	f7fa f99b 	bl	8002830 <HAL_GetREVID>
 80084fa:	4603      	mov	r3, r0
 80084fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008500:	4293      	cmp	r3, r2
 8008502:	d817      	bhi.n	8008534 <HAL_RCC_OscConfig+0x1fc>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	2b40      	cmp	r3, #64	@ 0x40
 800850a:	d108      	bne.n	800851e <HAL_RCC_OscConfig+0x1e6>
 800850c:	4b29      	ldr	r3, [pc, #164]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008514:	4a27      	ldr	r2, [pc, #156]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800851a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800851c:	e07b      	b.n	8008616 <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800851e:	4b25      	ldr	r3, [pc, #148]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	031b      	lsls	r3, r3, #12
 800852c:	4921      	ldr	r1, [pc, #132]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 800852e:	4313      	orrs	r3, r2
 8008530:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008532:	e070      	b.n	8008616 <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008534:	4b1f      	ldr	r3, [pc, #124]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	061b      	lsls	r3, r3, #24
 8008542:	491c      	ldr	r1, [pc, #112]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008544:	4313      	orrs	r3, r2
 8008546:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008548:	e065      	b.n	8008616 <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d048      	beq.n	80085e4 <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008552:	4b18      	ldr	r3, [pc, #96]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f023 0219 	bic.w	r2, r3, #25
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	4915      	ldr	r1, [pc, #84]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008560:	4313      	orrs	r3, r2
 8008562:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008564:	f7fa f934 	bl	80027d0 <HAL_GetTick>
 8008568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800856a:	e008      	b.n	800857e <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800856c:	f7fa f930 	bl	80027d0 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	2b02      	cmp	r3, #2
 8008578:	d901      	bls.n	800857e <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e32e      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800857e:	4b0d      	ldr	r3, [pc, #52]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0304 	and.w	r3, r3, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	d0f0      	beq.n	800856c <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800858a:	f7fa f951 	bl	8002830 <HAL_GetREVID>
 800858e:	4603      	mov	r3, r0
 8008590:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008594:	4293      	cmp	r3, r2
 8008596:	d81a      	bhi.n	80085ce <HAL_RCC_OscConfig+0x296>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	2b40      	cmp	r3, #64	@ 0x40
 800859e:	d10b      	bne.n	80085b8 <HAL_RCC_OscConfig+0x280>
 80085a0:	4b04      	ldr	r3, [pc, #16]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80085a8:	4a02      	ldr	r2, [pc, #8]	@ (80085b4 <HAL_RCC_OscConfig+0x27c>)
 80085aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085ae:	6053      	str	r3, [r2, #4]
 80085b0:	e031      	b.n	8008616 <HAL_RCC_OscConfig+0x2de>
 80085b2:	bf00      	nop
 80085b4:	58024400 	.word	0x58024400
 80085b8:	4b9c      	ldr	r3, [pc, #624]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	031b      	lsls	r3, r3, #12
 80085c6:	4999      	ldr	r1, [pc, #612]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	604b      	str	r3, [r1, #4]
 80085cc:	e023      	b.n	8008616 <HAL_RCC_OscConfig+0x2de>
 80085ce:	4b97      	ldr	r3, [pc, #604]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	061b      	lsls	r3, r3, #24
 80085dc:	4993      	ldr	r1, [pc, #588]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	604b      	str	r3, [r1, #4]
 80085e2:	e018      	b.n	8008616 <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085e4:	4b91      	ldr	r3, [pc, #580]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a90      	ldr	r2, [pc, #576]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80085ea:	f023 0301 	bic.w	r3, r3, #1
 80085ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f0:	f7fa f8ee 	bl	80027d0 <HAL_GetTick>
 80085f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085f6:	e008      	b.n	800860a <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085f8:	f7fa f8ea 	bl	80027d0 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d901      	bls.n	800860a <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e2e8      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800860a:	4b88      	ldr	r3, [pc, #544]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0304 	and.w	r3, r3, #4
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1f0      	bne.n	80085f8 <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0310 	and.w	r3, r3, #16
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 80a9 	beq.w	8008776 <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008624:	4b81      	ldr	r3, [pc, #516]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800862c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800862e:	4b7f      	ldr	r3, [pc, #508]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 8008630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008632:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	2b08      	cmp	r3, #8
 8008638:	d007      	beq.n	800864a <HAL_RCC_OscConfig+0x312>
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	2b18      	cmp	r3, #24
 800863e:	d13a      	bne.n	80086b6 <HAL_RCC_OscConfig+0x37e>
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	2b01      	cmp	r3, #1
 8008648:	d135      	bne.n	80086b6 <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800864a:	4b78      	ldr	r3, [pc, #480]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <HAL_RCC_OscConfig+0x32a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	2b80      	cmp	r3, #128	@ 0x80
 800865c:	d001      	beq.n	8008662 <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e2bc      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008662:	f7fa f8e5 	bl	8002830 <HAL_GetREVID>
 8008666:	4603      	mov	r3, r0
 8008668:	f241 0203 	movw	r2, #4099	@ 0x1003
 800866c:	4293      	cmp	r3, r2
 800866e:	d817      	bhi.n	80086a0 <HAL_RCC_OscConfig+0x368>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	2b20      	cmp	r3, #32
 8008676:	d108      	bne.n	800868a <HAL_RCC_OscConfig+0x352>
 8008678:	4b6c      	ldr	r3, [pc, #432]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008680:	4a6a      	ldr	r2, [pc, #424]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 8008682:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008686:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008688:	e075      	b.n	8008776 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800868a:	4b68      	ldr	r3, [pc, #416]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	069b      	lsls	r3, r3, #26
 8008698:	4964      	ldr	r1, [pc, #400]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 800869a:	4313      	orrs	r3, r2
 800869c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800869e:	e06a      	b.n	8008776 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086a0:	4b62      	ldr	r3, [pc, #392]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	061b      	lsls	r3, r3, #24
 80086ae:	495f      	ldr	r1, [pc, #380]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086b4:	e05f      	b.n	8008776 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d042      	beq.n	8008744 <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80086be:	4b5b      	ldr	r3, [pc, #364]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a5a      	ldr	r2, [pc, #360]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80086c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ca:	f7fa f881 	bl	80027d0 <HAL_GetTick>
 80086ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086d0:	e008      	b.n	80086e4 <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086d2:	f7fa f87d 	bl	80027d0 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d901      	bls.n	80086e4 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e27b      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086e4:	4b51      	ldr	r3, [pc, #324]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0f0      	beq.n	80086d2 <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086f0:	f7fa f89e 	bl	8002830 <HAL_GetREVID>
 80086f4:	4603      	mov	r3, r0
 80086f6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d817      	bhi.n	800872e <HAL_RCC_OscConfig+0x3f6>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	2b20      	cmp	r3, #32
 8008704:	d108      	bne.n	8008718 <HAL_RCC_OscConfig+0x3e0>
 8008706:	4b49      	ldr	r3, [pc, #292]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800870e:	4a47      	ldr	r2, [pc, #284]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 8008710:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008714:	6053      	str	r3, [r2, #4]
 8008716:	e02e      	b.n	8008776 <HAL_RCC_OscConfig+0x43e>
 8008718:	4b44      	ldr	r3, [pc, #272]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	069b      	lsls	r3, r3, #26
 8008726:	4941      	ldr	r1, [pc, #260]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 8008728:	4313      	orrs	r3, r2
 800872a:	604b      	str	r3, [r1, #4]
 800872c:	e023      	b.n	8008776 <HAL_RCC_OscConfig+0x43e>
 800872e:	4b3f      	ldr	r3, [pc, #252]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	061b      	lsls	r3, r3, #24
 800873c:	493b      	ldr	r1, [pc, #236]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 800873e:	4313      	orrs	r3, r2
 8008740:	60cb      	str	r3, [r1, #12]
 8008742:	e018      	b.n	8008776 <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008744:	4b39      	ldr	r3, [pc, #228]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a38      	ldr	r2, [pc, #224]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 800874a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800874e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008750:	f7fa f83e 	bl	80027d0 <HAL_GetTick>
 8008754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008758:	f7fa f83a 	bl	80027d0 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e238      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800876a:	4b30      	ldr	r3, [pc, #192]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1f0      	bne.n	8008758 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0308 	and.w	r3, r3, #8
 800877e:	2b00      	cmp	r3, #0
 8008780:	d036      	beq.n	80087f0 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d019      	beq.n	80087be <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800878a:	4b28      	ldr	r3, [pc, #160]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 800878c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800878e:	4a27      	ldr	r2, [pc, #156]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 8008790:	f043 0301 	orr.w	r3, r3, #1
 8008794:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008796:	f7fa f81b 	bl	80027d0 <HAL_GetTick>
 800879a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800879c:	e008      	b.n	80087b0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800879e:	f7fa f817 	bl	80027d0 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d901      	bls.n	80087b0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e215      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087b0:	4b1e      	ldr	r3, [pc, #120]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80087b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0f0      	beq.n	800879e <HAL_RCC_OscConfig+0x466>
 80087bc:	e018      	b.n	80087f0 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087be:	4b1b      	ldr	r3, [pc, #108]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80087c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087c2:	4a1a      	ldr	r2, [pc, #104]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80087c4:	f023 0301 	bic.w	r3, r3, #1
 80087c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ca:	f7fa f801 	bl	80027d0 <HAL_GetTick>
 80087ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087d0:	e008      	b.n	80087e4 <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087d2:	f7f9 fffd 	bl	80027d0 <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e1fb      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087e4:	4b11      	ldr	r3, [pc, #68]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 80087e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1f0      	bne.n	80087d2 <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0320 	and.w	r3, r3, #32
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d039      	beq.n	8008870 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d01c      	beq.n	800883e <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008804:	4b09      	ldr	r3, [pc, #36]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a08      	ldr	r2, [pc, #32]	@ (800882c <HAL_RCC_OscConfig+0x4f4>)
 800880a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800880e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008810:	f7f9 ffde 	bl	80027d0 <HAL_GetTick>
 8008814:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008816:	e00b      	b.n	8008830 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008818:	f7f9 ffda 	bl	80027d0 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b02      	cmp	r3, #2
 8008824:	d904      	bls.n	8008830 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e1d8      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
 800882a:	bf00      	nop
 800882c:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008830:	4b65      	ldr	r3, [pc, #404]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0ed      	beq.n	8008818 <HAL_RCC_OscConfig+0x4e0>
 800883c:	e018      	b.n	8008870 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800883e:	4b62      	ldr	r3, [pc, #392]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a61      	ldr	r2, [pc, #388]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 8008844:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008848:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800884a:	f7f9 ffc1 	bl	80027d0 <HAL_GetTick>
 800884e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008850:	e008      	b.n	8008864 <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008852:	f7f9 ffbd 	bl	80027d0 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	2b02      	cmp	r3, #2
 800885e:	d901      	bls.n	8008864 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e1bb      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008864:	4b58      	ldr	r3, [pc, #352]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1f0      	bne.n	8008852 <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0304 	and.w	r3, r3, #4
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 8081 	beq.w	8008980 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800887e:	4b53      	ldr	r3, [pc, #332]	@ (80089cc <HAL_RCC_OscConfig+0x694>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a52      	ldr	r2, [pc, #328]	@ (80089cc <HAL_RCC_OscConfig+0x694>)
 8008884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008888:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800888a:	f7f9 ffa1 	bl	80027d0 <HAL_GetTick>
 800888e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008890:	e008      	b.n	80088a4 <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008892:	f7f9 ff9d 	bl	80027d0 <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	2b64      	cmp	r3, #100	@ 0x64
 800889e:	d901      	bls.n	80088a4 <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e19b      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088a4:	4b49      	ldr	r3, [pc, #292]	@ (80089cc <HAL_RCC_OscConfig+0x694>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0f0      	beq.n	8008892 <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d106      	bne.n	80088c6 <HAL_RCC_OscConfig+0x58e>
 80088b8:	4b43      	ldr	r3, [pc, #268]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 80088ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088bc:	4a42      	ldr	r2, [pc, #264]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 80088be:	f043 0301 	orr.w	r3, r3, #1
 80088c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80088c4:	e02d      	b.n	8008922 <HAL_RCC_OscConfig+0x5ea>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10c      	bne.n	80088e8 <HAL_RCC_OscConfig+0x5b0>
 80088ce:	4b3e      	ldr	r3, [pc, #248]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 80088d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d2:	4a3d      	ldr	r2, [pc, #244]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 80088d4:	f023 0301 	bic.w	r3, r3, #1
 80088d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80088da:	4b3b      	ldr	r3, [pc, #236]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 80088dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088de:	4a3a      	ldr	r2, [pc, #232]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 80088e0:	f023 0304 	bic.w	r3, r3, #4
 80088e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80088e6:	e01c      	b.n	8008922 <HAL_RCC_OscConfig+0x5ea>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	2b05      	cmp	r3, #5
 80088ee:	d10c      	bne.n	800890a <HAL_RCC_OscConfig+0x5d2>
 80088f0:	4b35      	ldr	r3, [pc, #212]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 80088f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088f4:	4a34      	ldr	r2, [pc, #208]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 80088f6:	f043 0304 	orr.w	r3, r3, #4
 80088fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80088fc:	4b32      	ldr	r3, [pc, #200]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 80088fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008900:	4a31      	ldr	r2, [pc, #196]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 8008902:	f043 0301 	orr.w	r3, r3, #1
 8008906:	6713      	str	r3, [r2, #112]	@ 0x70
 8008908:	e00b      	b.n	8008922 <HAL_RCC_OscConfig+0x5ea>
 800890a:	4b2f      	ldr	r3, [pc, #188]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 800890c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800890e:	4a2e      	ldr	r2, [pc, #184]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 8008910:	f023 0301 	bic.w	r3, r3, #1
 8008914:	6713      	str	r3, [r2, #112]	@ 0x70
 8008916:	4b2c      	ldr	r3, [pc, #176]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 8008918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800891a:	4a2b      	ldr	r2, [pc, #172]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 800891c:	f023 0304 	bic.w	r3, r3, #4
 8008920:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d015      	beq.n	8008956 <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800892a:	f7f9 ff51 	bl	80027d0 <HAL_GetTick>
 800892e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008930:	e00a      	b.n	8008948 <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008932:	f7f9 ff4d 	bl	80027d0 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008940:	4293      	cmp	r3, r2
 8008942:	d901      	bls.n	8008948 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e149      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008948:	4b1f      	ldr	r3, [pc, #124]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 800894a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0ee      	beq.n	8008932 <HAL_RCC_OscConfig+0x5fa>
 8008954:	e014      	b.n	8008980 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008956:	f7f9 ff3b 	bl	80027d0 <HAL_GetTick>
 800895a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800895c:	e00a      	b.n	8008974 <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800895e:	f7f9 ff37 	bl	80027d0 <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800896c:	4293      	cmp	r3, r2
 800896e:	d901      	bls.n	8008974 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e133      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008974:	4b14      	ldr	r3, [pc, #80]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 8008976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1ee      	bne.n	800895e <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 8128 	beq.w	8008bda <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800898a:	4b0f      	ldr	r3, [pc, #60]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008992:	2b18      	cmp	r3, #24
 8008994:	f000 80b8 	beq.w	8008b08 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800899c:	2b02      	cmp	r3, #2
 800899e:	f040 8099 	bne.w	8008ad4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089a2:	4b09      	ldr	r3, [pc, #36]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a08      	ldr	r2, [pc, #32]	@ (80089c8 <HAL_RCC_OscConfig+0x690>)
 80089a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ae:	f7f9 ff0f 	bl	80027d0 <HAL_GetTick>
 80089b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089b4:	e00c      	b.n	80089d0 <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089b6:	f7f9 ff0b 	bl	80027d0 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d905      	bls.n	80089d0 <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e109      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
 80089c8:	58024400 	.word	0x58024400
 80089cc:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089d0:	4b84      	ldr	r3, [pc, #528]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1ec      	bne.n	80089b6 <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089dc:	4b81      	ldr	r3, [pc, #516]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 80089de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089e0:	4b81      	ldr	r3, [pc, #516]	@ (8008be8 <HAL_RCC_OscConfig+0x8b0>)
 80089e2:	4013      	ands	r3, r2
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80089ec:	0112      	lsls	r2, r2, #4
 80089ee:	430a      	orrs	r2, r1
 80089f0:	497c      	ldr	r1, [pc, #496]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 80089f2:	4313      	orrs	r3, r2
 80089f4:	628b      	str	r3, [r1, #40]	@ 0x28
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089fa:	3b01      	subs	r3, #1
 80089fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a04:	3b01      	subs	r3, #1
 8008a06:	025b      	lsls	r3, r3, #9
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a10:	3b01      	subs	r3, #1
 8008a12:	041b      	lsls	r3, r3, #16
 8008a14:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	061b      	lsls	r3, r3, #24
 8008a22:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a26:	496f      	ldr	r1, [pc, #444]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008a2c:	4b6d      	ldr	r3, [pc, #436]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a30:	4a6c      	ldr	r2, [pc, #432]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a32:	f023 0301 	bic.w	r3, r3, #1
 8008a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a38:	4b6a      	ldr	r3, [pc, #424]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a3c:	4b6b      	ldr	r3, [pc, #428]	@ (8008bec <HAL_RCC_OscConfig+0x8b4>)
 8008a3e:	4013      	ands	r3, r2
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008a44:	00d2      	lsls	r2, r2, #3
 8008a46:	4967      	ldr	r1, [pc, #412]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a4c:	4b65      	ldr	r3, [pc, #404]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a50:	f023 020c 	bic.w	r2, r3, #12
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a58:	4962      	ldr	r1, [pc, #392]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a5e:	4b61      	ldr	r3, [pc, #388]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	f023 0202 	bic.w	r2, r3, #2
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a6a:	495e      	ldr	r1, [pc, #376]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a70:	4b5c      	ldr	r3, [pc, #368]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a74:	4a5b      	ldr	r2, [pc, #364]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a7c:	4b59      	ldr	r3, [pc, #356]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a80:	4a58      	ldr	r2, [pc, #352]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a88:	4b56      	ldr	r3, [pc, #344]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8c:	4a55      	ldr	r2, [pc, #340]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a94:	4b53      	ldr	r3, [pc, #332]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a98:	4a52      	ldr	r2, [pc, #328]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008a9a:	f043 0301 	orr.w	r3, r3, #1
 8008a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aa0:	4b50      	ldr	r3, [pc, #320]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a4f      	ldr	r2, [pc, #316]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008aa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aac:	f7f9 fe90 	bl	80027d0 <HAL_GetTick>
 8008ab0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ab2:	e008      	b.n	8008ac6 <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ab4:	f7f9 fe8c 	bl	80027d0 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e08a      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ac6:	4b47      	ldr	r3, [pc, #284]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0f0      	beq.n	8008ab4 <HAL_RCC_OscConfig+0x77c>
 8008ad2:	e082      	b.n	8008bda <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ad4:	4b43      	ldr	r3, [pc, #268]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a42      	ldr	r2, [pc, #264]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008ada:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae0:	f7f9 fe76 	bl	80027d0 <HAL_GetTick>
 8008ae4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ae6:	e008      	b.n	8008afa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ae8:	f7f9 fe72 	bl	80027d0 <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d901      	bls.n	8008afa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e070      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008afa:	4b3a      	ldr	r3, [pc, #232]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1f0      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x7b0>
 8008b06:	e068      	b.n	8008bda <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b08:	4b36      	ldr	r3, [pc, #216]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b0e:	4b35      	ldr	r3, [pc, #212]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d031      	beq.n	8008b80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f003 0203 	and.w	r2, r3, #3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d12a      	bne.n	8008b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	091b      	lsrs	r3, r3, #4
 8008b2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d122      	bne.n	8008b80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d11a      	bne.n	8008b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	0a5b      	lsrs	r3, r3, #9
 8008b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d111      	bne.n	8008b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	0c1b      	lsrs	r3, r3, #16
 8008b60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d108      	bne.n	8008b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	0e1b      	lsrs	r3, r3, #24
 8008b72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d001      	beq.n	8008b84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e02b      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b84:	4b17      	ldr	r3, [pc, #92]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b88:	08db      	lsrs	r3, r3, #3
 8008b8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d01f      	beq.n	8008bda <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008b9a:	4b12      	ldr	r3, [pc, #72]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9e:	4a11      	ldr	r2, [pc, #68]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008ba0:	f023 0301 	bic.w	r3, r3, #1
 8008ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ba6:	f7f9 fe13 	bl	80027d0 <HAL_GetTick>
 8008baa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008bac:	bf00      	nop
 8008bae:	f7f9 fe0f 	bl	80027d0 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d0f9      	beq.n	8008bae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008bba:	4b0a      	ldr	r3, [pc, #40]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8008bec <HAL_RCC_OscConfig+0x8b4>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008bc6:	00d2      	lsls	r2, r2, #3
 8008bc8:	4906      	ldr	r1, [pc, #24]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008bce:	4b05      	ldr	r3, [pc, #20]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd2:	4a04      	ldr	r2, [pc, #16]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008bd4:	f043 0301 	orr.w	r3, r3, #1
 8008bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3730      	adds	r7, #48	@ 0x30
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	58024400 	.word	0x58024400
 8008be8:	fffffc0c 	.word	0xfffffc0c
 8008bec:	ffff0007 	.word	0xffff0007

08008bf0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e19c      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c04:	4b8a      	ldr	r3, [pc, #552]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 030f 	and.w	r3, r3, #15
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d910      	bls.n	8008c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c12:	4b87      	ldr	r3, [pc, #540]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f023 020f 	bic.w	r2, r3, #15
 8008c1a:	4985      	ldr	r1, [pc, #532]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c22:	4b83      	ldr	r3, [pc, #524]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d001      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e184      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d010      	beq.n	8008c62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691a      	ldr	r2, [r3, #16]
 8008c44:	4b7b      	ldr	r3, [pc, #492]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d908      	bls.n	8008c62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c50:	4b78      	ldr	r3, [pc, #480]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	4975      	ldr	r1, [pc, #468]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0308 	and.w	r3, r3, #8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d010      	beq.n	8008c90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695a      	ldr	r2, [r3, #20]
 8008c72:	4b70      	ldr	r3, [pc, #448]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d908      	bls.n	8008c90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	496a      	ldr	r1, [pc, #424]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0310 	and.w	r3, r3, #16
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d010      	beq.n	8008cbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	699a      	ldr	r2, [r3, #24]
 8008ca0:	4b64      	ldr	r3, [pc, #400]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d908      	bls.n	8008cbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cac:	4b61      	ldr	r3, [pc, #388]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	495e      	ldr	r1, [pc, #376]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d010      	beq.n	8008cec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	69da      	ldr	r2, [r3, #28]
 8008cce:	4b59      	ldr	r3, [pc, #356]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d908      	bls.n	8008cec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008cda:	4b56      	ldr	r3, [pc, #344]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	4953      	ldr	r1, [pc, #332]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0302 	and.w	r3, r3, #2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d010      	beq.n	8008d1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	f003 030f 	and.w	r3, r3, #15
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d908      	bls.n	8008d1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d08:	4b4a      	ldr	r3, [pc, #296]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	f023 020f 	bic.w	r2, r3, #15
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	4947      	ldr	r1, [pc, #284]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d055      	beq.n	8008dd2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d26:	4b43      	ldr	r3, [pc, #268]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	4940      	ldr	r1, [pc, #256]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d107      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d40:	4b3c      	ldr	r3, [pc, #240]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d121      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0f6      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d107      	bne.n	8008d68 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d58:	4b36      	ldr	r3, [pc, #216]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d115      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e0ea      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d107      	bne.n	8008d80 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d70:	4b30      	ldr	r3, [pc, #192]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d109      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e0de      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d80:	4b2c      	ldr	r3, [pc, #176]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e0d6      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d90:	4b28      	ldr	r3, [pc, #160]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f023 0207 	bic.w	r2, r3, #7
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	4925      	ldr	r1, [pc, #148]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008da2:	f7f9 fd15 	bl	80027d0 <HAL_GetTick>
 8008da6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008da8:	e00a      	b.n	8008dc0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008daa:	f7f9 fd11 	bl	80027d0 <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d901      	bls.n	8008dc0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e0be      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d1eb      	bne.n	8008daa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d010      	beq.n	8008e00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	4b14      	ldr	r3, [pc, #80]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d208      	bcs.n	8008e00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dee:	4b11      	ldr	r3, [pc, #68]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f023 020f 	bic.w	r2, r3, #15
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	490e      	ldr	r1, [pc, #56]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e00:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d214      	bcs.n	8008e38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e0e:	4b08      	ldr	r3, [pc, #32]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f023 020f 	bic.w	r2, r3, #15
 8008e16:	4906      	ldr	r1, [pc, #24]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e1e:	4b04      	ldr	r3, [pc, #16]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 030f 	and.w	r3, r3, #15
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d005      	beq.n	8008e38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e086      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
 8008e30:	52002000 	.word	0x52002000
 8008e34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d010      	beq.n	8008e66 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	4b3f      	ldr	r3, [pc, #252]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d208      	bcs.n	8008e66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e54:	4b3c      	ldr	r3, [pc, #240]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	4939      	ldr	r1, [pc, #228]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0308 	and.w	r3, r3, #8
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d010      	beq.n	8008e94 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	695a      	ldr	r2, [r3, #20]
 8008e76:	4b34      	ldr	r3, [pc, #208]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d208      	bcs.n	8008e94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e82:	4b31      	ldr	r3, [pc, #196]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	492e      	ldr	r1, [pc, #184]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0310 	and.w	r3, r3, #16
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d010      	beq.n	8008ec2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699a      	ldr	r2, [r3, #24]
 8008ea4:	4b28      	ldr	r3, [pc, #160]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d208      	bcs.n	8008ec2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008eb0:	4b25      	ldr	r3, [pc, #148]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	4922      	ldr	r1, [pc, #136]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d010      	beq.n	8008ef0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69da      	ldr	r2, [r3, #28]
 8008ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d208      	bcs.n	8008ef0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ede:	4b1a      	ldr	r3, [pc, #104]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	4917      	ldr	r1, [pc, #92]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ef0:	f000 f834 	bl	8008f5c <HAL_RCC_GetSysClockFreq>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	4b14      	ldr	r3, [pc, #80]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	4912      	ldr	r1, [pc, #72]	@ (8008f4c <HAL_RCC_ClockConfig+0x35c>)
 8008f02:	5ccb      	ldrb	r3, [r1, r3]
 8008f04:	f003 031f 	and.w	r3, r3, #31
 8008f08:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	f003 030f 	and.w	r3, r3, #15
 8008f16:	4a0d      	ldr	r2, [pc, #52]	@ (8008f4c <HAL_RCC_ClockConfig+0x35c>)
 8008f18:	5cd3      	ldrb	r3, [r2, r3]
 8008f1a:	f003 031f 	and.w	r3, r3, #31
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	fa22 f303 	lsr.w	r3, r2, r3
 8008f24:	4a0a      	ldr	r2, [pc, #40]	@ (8008f50 <HAL_RCC_ClockConfig+0x360>)
 8008f26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f28:	4a0a      	ldr	r2, [pc, #40]	@ (8008f54 <HAL_RCC_ClockConfig+0x364>)
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8008f58 <HAL_RCC_ClockConfig+0x368>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7f9 fc02 	bl	800273c <HAL_InitTick>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	58024400 	.word	0x58024400
 8008f4c:	08013fb4 	.word	0x08013fb4
 8008f50:	24000004 	.word	0x24000004
 8008f54:	24000000 	.word	0x24000000
 8008f58:	24000008 	.word	0x24000008

08008f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b089      	sub	sp, #36	@ 0x24
 8008f60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f62:	4bb3      	ldr	r3, [pc, #716]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f6a:	2b18      	cmp	r3, #24
 8008f6c:	f200 8155 	bhi.w	800921a <HAL_RCC_GetSysClockFreq+0x2be>
 8008f70:	a201      	add	r2, pc, #4	@ (adr r2, 8008f78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	08008fdd 	.word	0x08008fdd
 8008f7c:	0800921b 	.word	0x0800921b
 8008f80:	0800921b 	.word	0x0800921b
 8008f84:	0800921b 	.word	0x0800921b
 8008f88:	0800921b 	.word	0x0800921b
 8008f8c:	0800921b 	.word	0x0800921b
 8008f90:	0800921b 	.word	0x0800921b
 8008f94:	0800921b 	.word	0x0800921b
 8008f98:	08009003 	.word	0x08009003
 8008f9c:	0800921b 	.word	0x0800921b
 8008fa0:	0800921b 	.word	0x0800921b
 8008fa4:	0800921b 	.word	0x0800921b
 8008fa8:	0800921b 	.word	0x0800921b
 8008fac:	0800921b 	.word	0x0800921b
 8008fb0:	0800921b 	.word	0x0800921b
 8008fb4:	0800921b 	.word	0x0800921b
 8008fb8:	08009009 	.word	0x08009009
 8008fbc:	0800921b 	.word	0x0800921b
 8008fc0:	0800921b 	.word	0x0800921b
 8008fc4:	0800921b 	.word	0x0800921b
 8008fc8:	0800921b 	.word	0x0800921b
 8008fcc:	0800921b 	.word	0x0800921b
 8008fd0:	0800921b 	.word	0x0800921b
 8008fd4:	0800921b 	.word	0x0800921b
 8008fd8:	0800900f 	.word	0x0800900f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fdc:	4b94      	ldr	r3, [pc, #592]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0320 	and.w	r3, r3, #32
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d009      	beq.n	8008ffc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fe8:	4b91      	ldr	r3, [pc, #580]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	08db      	lsrs	r3, r3, #3
 8008fee:	f003 0303 	and.w	r3, r3, #3
 8008ff2:	4a90      	ldr	r2, [pc, #576]	@ (8009234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008ffa:	e111      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ffc:	4b8d      	ldr	r3, [pc, #564]	@ (8009234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ffe:	61bb      	str	r3, [r7, #24]
      break;
 8009000:	e10e      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009002:	4b8d      	ldr	r3, [pc, #564]	@ (8009238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009004:	61bb      	str	r3, [r7, #24]
      break;
 8009006:	e10b      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009008:	4b8c      	ldr	r3, [pc, #560]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800900a:	61bb      	str	r3, [r7, #24]
      break;
 800900c:	e108      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800900e:	4b88      	ldr	r3, [pc, #544]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009012:	f003 0303 	and.w	r3, r3, #3
 8009016:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009018:	4b85      	ldr	r3, [pc, #532]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800901a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901c:	091b      	lsrs	r3, r3, #4
 800901e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009022:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009024:	4b82      	ldr	r3, [pc, #520]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800902e:	4b80      	ldr	r3, [pc, #512]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009032:	08db      	lsrs	r3, r3, #3
 8009034:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	fb02 f303 	mul.w	r3, r2, r3
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009046:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 80e1 	beq.w	8009214 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2b02      	cmp	r3, #2
 8009056:	f000 8083 	beq.w	8009160 <HAL_RCC_GetSysClockFreq+0x204>
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b02      	cmp	r3, #2
 800905e:	f200 80a1 	bhi.w	80091a4 <HAL_RCC_GetSysClockFreq+0x248>
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <HAL_RCC_GetSysClockFreq+0x114>
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d056      	beq.n	800911c <HAL_RCC_GetSysClockFreq+0x1c0>
 800906e:	e099      	b.n	80091a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009070:	4b6f      	ldr	r3, [pc, #444]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0320 	and.w	r3, r3, #32
 8009078:	2b00      	cmp	r3, #0
 800907a:	d02d      	beq.n	80090d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800907c:	4b6c      	ldr	r3, [pc, #432]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	08db      	lsrs	r3, r3, #3
 8009082:	f003 0303 	and.w	r3, r3, #3
 8009086:	4a6b      	ldr	r2, [pc, #428]	@ (8009234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009088:	fa22 f303 	lsr.w	r3, r2, r3
 800908c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	ee07 3a90 	vmov	s15, r3
 8009094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a6:	4b62      	ldr	r3, [pc, #392]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ae:	ee07 3a90 	vmov	s15, r3
 80090b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80090d6:	e087      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	ee07 3a90 	vmov	s15, r3
 80090de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009244 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ea:	4b51      	ldr	r3, [pc, #324]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80090fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800910e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009116:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800911a:	e065      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	ee07 3a90 	vmov	s15, r3
 8009122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009126:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009248 <HAL_RCC_GetSysClockFreq+0x2ec>
 800912a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912e:	4b40      	ldr	r3, [pc, #256]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009142:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800915e:	e043      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	ee07 3a90 	vmov	s15, r3
 8009166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800924c <HAL_RCC_GetSysClockFreq+0x2f0>
 800916e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009172:	4b2f      	ldr	r3, [pc, #188]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009182:	ed97 6a02 	vldr	s12, [r7, #8]
 8009186:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009240 <HAL_RCC_GetSysClockFreq+0x2e4>
 800918a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091a2:	e021      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	ee07 3a90 	vmov	s15, r3
 80091aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009248 <HAL_RCC_GetSysClockFreq+0x2ec>
 80091b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80091ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80091e8:	4b11      	ldr	r3, [pc, #68]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ec:	0a5b      	lsrs	r3, r3, #9
 80091ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091f2:	3301      	adds	r3, #1
 80091f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	ee07 3a90 	vmov	s15, r3
 80091fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009200:	edd7 6a07 	vldr	s13, [r7, #28]
 8009204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800920c:	ee17 3a90 	vmov	r3, s15
 8009210:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009212:	e005      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	61bb      	str	r3, [r7, #24]
      break;
 8009218:	e002      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800921a:	4b07      	ldr	r3, [pc, #28]	@ (8009238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800921c:	61bb      	str	r3, [r7, #24]
      break;
 800921e:	bf00      	nop
  }

  return sysclockfreq;
 8009220:	69bb      	ldr	r3, [r7, #24]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3724      	adds	r7, #36	@ 0x24
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	58024400 	.word	0x58024400
 8009234:	03d09000 	.word	0x03d09000
 8009238:	003d0900 	.word	0x003d0900
 800923c:	017d7840 	.word	0x017d7840
 8009240:	46000000 	.word	0x46000000
 8009244:	4c742400 	.word	0x4c742400
 8009248:	4a742400 	.word	0x4a742400
 800924c:	4bbebc20 	.word	0x4bbebc20

08009250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009256:	f7ff fe81 	bl	8008f5c <HAL_RCC_GetSysClockFreq>
 800925a:	4602      	mov	r2, r0
 800925c:	4b10      	ldr	r3, [pc, #64]	@ (80092a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	0a1b      	lsrs	r3, r3, #8
 8009262:	f003 030f 	and.w	r3, r3, #15
 8009266:	490f      	ldr	r1, [pc, #60]	@ (80092a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009268:	5ccb      	ldrb	r3, [r1, r3]
 800926a:	f003 031f 	and.w	r3, r3, #31
 800926e:	fa22 f303 	lsr.w	r3, r2, r3
 8009272:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009274:	4b0a      	ldr	r3, [pc, #40]	@ (80092a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	f003 030f 	and.w	r3, r3, #15
 800927c:	4a09      	ldr	r2, [pc, #36]	@ (80092a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800927e:	5cd3      	ldrb	r3, [r2, r3]
 8009280:	f003 031f 	and.w	r3, r3, #31
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	fa22 f303 	lsr.w	r3, r2, r3
 800928a:	4a07      	ldr	r2, [pc, #28]	@ (80092a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800928c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800928e:	4a07      	ldr	r2, [pc, #28]	@ (80092ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009294:	4b04      	ldr	r3, [pc, #16]	@ (80092a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009296:	681b      	ldr	r3, [r3, #0]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	58024400 	.word	0x58024400
 80092a4:	08013fb4 	.word	0x08013fb4
 80092a8:	24000004 	.word	0x24000004
 80092ac:	24000000 	.word	0x24000000

080092b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80092b4:	f7ff ffcc 	bl	8009250 <HAL_RCC_GetHCLKFreq>
 80092b8:	4602      	mov	r2, r0
 80092ba:	4b06      	ldr	r3, [pc, #24]	@ (80092d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	091b      	lsrs	r3, r3, #4
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	4904      	ldr	r1, [pc, #16]	@ (80092d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092c6:	5ccb      	ldrb	r3, [r1, r3]
 80092c8:	f003 031f 	and.w	r3, r3, #31
 80092cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	58024400 	.word	0x58024400
 80092d8:	08013fb4 	.word	0x08013fb4

080092dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80092e0:	f7ff ffb6 	bl	8009250 <HAL_RCC_GetHCLKFreq>
 80092e4:	4602      	mov	r2, r0
 80092e6:	4b06      	ldr	r3, [pc, #24]	@ (8009300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	0a1b      	lsrs	r3, r3, #8
 80092ec:	f003 0307 	and.w	r3, r3, #7
 80092f0:	4904      	ldr	r1, [pc, #16]	@ (8009304 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092f2:	5ccb      	ldrb	r3, [r1, r3]
 80092f4:	f003 031f 	and.w	r3, r3, #31
 80092f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	58024400 	.word	0x58024400
 8009304:	08013fb4 	.word	0x08013fb4

08009308 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800930c:	b0ca      	sub	sp, #296	@ 0x128
 800930e:	af00      	add	r7, sp, #0
 8009310:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009314:	2300      	movs	r3, #0
 8009316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800931a:	2300      	movs	r3, #0
 800931c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009328:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800932c:	2500      	movs	r5, #0
 800932e:	ea54 0305 	orrs.w	r3, r4, r5
 8009332:	d049      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009338:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800933a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800933e:	d02f      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009340:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009344:	d828      	bhi.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009346:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800934a:	d01a      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800934c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009350:	d822      	bhi.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800935a:	d007      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800935c:	e01c      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800935e:	4bb8      	ldr	r3, [pc, #736]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009362:	4ab7      	ldr	r2, [pc, #732]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009368:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800936a:	e01a      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800936c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009370:	3308      	adds	r3, #8
 8009372:	2102      	movs	r1, #2
 8009374:	4618      	mov	r0, r3
 8009376:	f002 fb61 	bl	800ba3c <RCCEx_PLL2_Config>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009380:	e00f      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009386:	3328      	adds	r3, #40	@ 0x28
 8009388:	2102      	movs	r1, #2
 800938a:	4618      	mov	r0, r3
 800938c:	f002 fc08 	bl	800bba0 <RCCEx_PLL3_Config>
 8009390:	4603      	mov	r3, r0
 8009392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009396:	e004      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800939e:	e000      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80093a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10a      	bne.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80093aa:	4ba5      	ldr	r3, [pc, #660]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80093b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093b8:	4aa1      	ldr	r2, [pc, #644]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093ba:	430b      	orrs	r3, r1
 80093bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80093be:	e003      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80093d4:	f04f 0900 	mov.w	r9, #0
 80093d8:	ea58 0309 	orrs.w	r3, r8, r9
 80093dc:	d047      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80093de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	d82a      	bhi.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80093e8:	a201      	add	r2, pc, #4	@ (adr r2, 80093f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80093ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ee:	bf00      	nop
 80093f0:	08009405 	.word	0x08009405
 80093f4:	08009413 	.word	0x08009413
 80093f8:	08009429 	.word	0x08009429
 80093fc:	08009447 	.word	0x08009447
 8009400:	08009447 	.word	0x08009447
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009404:	4b8e      	ldr	r3, [pc, #568]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009408:	4a8d      	ldr	r2, [pc, #564]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800940a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800940e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009410:	e01a      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009416:	3308      	adds	r3, #8
 8009418:	2100      	movs	r1, #0
 800941a:	4618      	mov	r0, r3
 800941c:	f002 fb0e 	bl	800ba3c <RCCEx_PLL2_Config>
 8009420:	4603      	mov	r3, r0
 8009422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009426:	e00f      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800942c:	3328      	adds	r3, #40	@ 0x28
 800942e:	2100      	movs	r1, #0
 8009430:	4618      	mov	r0, r3
 8009432:	f002 fbb5 	bl	800bba0 <RCCEx_PLL3_Config>
 8009436:	4603      	mov	r3, r0
 8009438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800943c:	e004      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009444:	e000      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009450:	4b7b      	ldr	r3, [pc, #492]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009454:	f023 0107 	bic.w	r1, r3, #7
 8009458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800945c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800945e:	4a78      	ldr	r2, [pc, #480]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009460:	430b      	orrs	r3, r1
 8009462:	6513      	str	r3, [r2, #80]	@ 0x50
 8009464:	e003      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800946a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800946e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800947a:	f04f 0b00 	mov.w	fp, #0
 800947e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009482:	d04c      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800948a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800948e:	d030      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009494:	d829      	bhi.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009496:	2bc0      	cmp	r3, #192	@ 0xc0
 8009498:	d02d      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800949a:	2bc0      	cmp	r3, #192	@ 0xc0
 800949c:	d825      	bhi.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800949e:	2b80      	cmp	r3, #128	@ 0x80
 80094a0:	d018      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80094a2:	2b80      	cmp	r3, #128	@ 0x80
 80094a4:	d821      	bhi.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80094aa:	2b40      	cmp	r3, #64	@ 0x40
 80094ac:	d007      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80094ae:	e01c      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094b0:	4b63      	ldr	r3, [pc, #396]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b4:	4a62      	ldr	r2, [pc, #392]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094bc:	e01c      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c2:	3308      	adds	r3, #8
 80094c4:	2100      	movs	r1, #0
 80094c6:	4618      	mov	r0, r3
 80094c8:	f002 fab8 	bl	800ba3c <RCCEx_PLL2_Config>
 80094cc:	4603      	mov	r3, r0
 80094ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094d2:	e011      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d8:	3328      	adds	r3, #40	@ 0x28
 80094da:	2100      	movs	r1, #0
 80094dc:	4618      	mov	r0, r3
 80094de:	f002 fb5f 	bl	800bba0 <RCCEx_PLL3_Config>
 80094e2:	4603      	mov	r3, r0
 80094e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094e8:	e006      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094f0:	e002      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80094f2:	bf00      	nop
 80094f4:	e000      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80094f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10a      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009500:	4b4f      	ldr	r3, [pc, #316]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009504:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800950c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800950e:	4a4c      	ldr	r2, [pc, #304]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009510:	430b      	orrs	r3, r1
 8009512:	6513      	str	r3, [r2, #80]	@ 0x50
 8009514:	e003      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800951a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800951e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800952a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800952e:	2300      	movs	r3, #0
 8009530:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009534:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009538:	460b      	mov	r3, r1
 800953a:	4313      	orrs	r3, r2
 800953c:	d053      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800953e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009542:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009546:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800954a:	d035      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800954c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009550:	d82e      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009552:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009556:	d031      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009558:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800955c:	d828      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800955e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009562:	d01a      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009564:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009568:	d822      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800956e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009572:	d007      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009574:	e01c      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009576:	4b32      	ldr	r3, [pc, #200]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957a:	4a31      	ldr	r2, [pc, #196]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800957c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009580:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009582:	e01c      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009588:	3308      	adds	r3, #8
 800958a:	2100      	movs	r1, #0
 800958c:	4618      	mov	r0, r3
 800958e:	f002 fa55 	bl	800ba3c <RCCEx_PLL2_Config>
 8009592:	4603      	mov	r3, r0
 8009594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009598:	e011      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800959a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959e:	3328      	adds	r3, #40	@ 0x28
 80095a0:	2100      	movs	r1, #0
 80095a2:	4618      	mov	r0, r3
 80095a4:	f002 fafc 	bl	800bba0 <RCCEx_PLL3_Config>
 80095a8:	4603      	mov	r3, r0
 80095aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095ae:	e006      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095b6:	e002      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80095b8:	bf00      	nop
 80095ba:	e000      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80095bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10b      	bne.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80095c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80095ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80095d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095d8:	430b      	orrs	r3, r1
 80095da:	6593      	str	r3, [r2, #88]	@ 0x58
 80095dc:	e003      	b.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80095e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80095f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095f6:	2300      	movs	r3, #0
 80095f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80095fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009600:	460b      	mov	r3, r1
 8009602:	4313      	orrs	r3, r2
 8009604:	d056      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800960a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800960e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009612:	d038      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009614:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009618:	d831      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800961a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800961e:	d034      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009620:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009624:	d82b      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009626:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800962a:	d01d      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800962c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009630:	d825      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009632:	2b00      	cmp	r3, #0
 8009634:	d006      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009636:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800963a:	d00a      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800963c:	e01f      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800963e:	bf00      	nop
 8009640:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009644:	4ba2      	ldr	r3, [pc, #648]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009648:	4aa1      	ldr	r2, [pc, #644]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800964a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800964e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009650:	e01c      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009656:	3308      	adds	r3, #8
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f002 f9ee 	bl	800ba3c <RCCEx_PLL2_Config>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009666:	e011      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800966c:	3328      	adds	r3, #40	@ 0x28
 800966e:	2100      	movs	r1, #0
 8009670:	4618      	mov	r0, r3
 8009672:	f002 fa95 	bl	800bba0 <RCCEx_PLL3_Config>
 8009676:	4603      	mov	r3, r0
 8009678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800967c:	e006      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009684:	e002      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009686:	bf00      	nop
 8009688:	e000      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800968a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800968c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10b      	bne.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009694:	4b8e      	ldr	r3, [pc, #568]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009698:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800969c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80096a4:	4a8a      	ldr	r2, [pc, #552]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096a6:	430b      	orrs	r3, r1
 80096a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80096aa:	e003      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80096b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80096c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80096c4:	2300      	movs	r3, #0
 80096c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80096ce:	460b      	mov	r3, r1
 80096d0:	4313      	orrs	r3, r2
 80096d2:	d03a      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096da:	2b30      	cmp	r3, #48	@ 0x30
 80096dc:	d01f      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80096de:	2b30      	cmp	r3, #48	@ 0x30
 80096e0:	d819      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d00c      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	d815      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d019      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80096ee:	2b10      	cmp	r3, #16
 80096f0:	d111      	bne.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096f2:	4b77      	ldr	r3, [pc, #476]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f6:	4a76      	ldr	r2, [pc, #472]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80096fe:	e011      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009704:	3308      	adds	r3, #8
 8009706:	2102      	movs	r1, #2
 8009708:	4618      	mov	r0, r3
 800970a:	f002 f997 	bl	800ba3c <RCCEx_PLL2_Config>
 800970e:	4603      	mov	r3, r0
 8009710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009714:	e006      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800971c:	e002      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800971e:	bf00      	nop
 8009720:	e000      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10a      	bne.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800972c:	4b68      	ldr	r3, [pc, #416]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800972e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009730:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800973a:	4a65      	ldr	r2, [pc, #404]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800973c:	430b      	orrs	r3, r1
 800973e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009740:	e003      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009746:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800974a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009756:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800975a:	2300      	movs	r3, #0
 800975c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009760:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009764:	460b      	mov	r3, r1
 8009766:	4313      	orrs	r3, r2
 8009768:	d051      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800976a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009770:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009774:	d035      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009776:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800977a:	d82e      	bhi.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800977c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009780:	d031      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009782:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009786:	d828      	bhi.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800978c:	d01a      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800978e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009792:	d822      	bhi.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009794:	2b00      	cmp	r3, #0
 8009796:	d003      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800979c:	d007      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800979e:	e01c      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a0:	4b4b      	ldr	r3, [pc, #300]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a4:	4a4a      	ldr	r2, [pc, #296]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097ac:	e01c      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097b2:	3308      	adds	r3, #8
 80097b4:	2100      	movs	r1, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f002 f940 	bl	800ba3c <RCCEx_PLL2_Config>
 80097bc:	4603      	mov	r3, r0
 80097be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097c2:	e011      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c8:	3328      	adds	r3, #40	@ 0x28
 80097ca:	2100      	movs	r1, #0
 80097cc:	4618      	mov	r0, r3
 80097ce:	f002 f9e7 	bl	800bba0 <RCCEx_PLL3_Config>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097d8:	e006      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097e0:	e002      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80097e2:	bf00      	nop
 80097e4:	e000      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80097e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10a      	bne.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80097f0:	4b37      	ldr	r3, [pc, #220]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80097f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097fe:	4a34      	ldr	r2, [pc, #208]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009800:	430b      	orrs	r3, r1
 8009802:	6513      	str	r3, [r2, #80]	@ 0x50
 8009804:	e003      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800980a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800980e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800981a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800981e:	2300      	movs	r3, #0
 8009820:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009824:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009828:	460b      	mov	r3, r1
 800982a:	4313      	orrs	r3, r2
 800982c:	d056      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800982e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009838:	d033      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800983a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800983e:	d82c      	bhi.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009840:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009844:	d02f      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009846:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800984a:	d826      	bhi.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800984c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009850:	d02b      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009852:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009856:	d820      	bhi.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009858:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800985c:	d012      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800985e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009862:	d81a      	bhi.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009864:	2b00      	cmp	r3, #0
 8009866:	d022      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800986c:	d115      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800986e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009872:	3308      	adds	r3, #8
 8009874:	2101      	movs	r1, #1
 8009876:	4618      	mov	r0, r3
 8009878:	f002 f8e0 	bl	800ba3c <RCCEx_PLL2_Config>
 800987c:	4603      	mov	r3, r0
 800987e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009882:	e015      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009888:	3328      	adds	r3, #40	@ 0x28
 800988a:	2101      	movs	r1, #1
 800988c:	4618      	mov	r0, r3
 800988e:	f002 f987 	bl	800bba0 <RCCEx_PLL3_Config>
 8009892:	4603      	mov	r3, r0
 8009894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009898:	e00a      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098a0:	e006      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098a2:	bf00      	nop
 80098a4:	e004      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098a6:	bf00      	nop
 80098a8:	e002      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098aa:	bf00      	nop
 80098ac:	e000      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10d      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80098b8:	4b05      	ldr	r3, [pc, #20]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80098c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098c6:	4a02      	ldr	r2, [pc, #8]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098c8:	430b      	orrs	r3, r1
 80098ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80098cc:	e006      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80098ce:	bf00      	nop
 80098d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80098dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80098e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80098ec:	2300      	movs	r3, #0
 80098ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80098f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4313      	orrs	r3, r2
 80098fa:	d055      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80098fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009900:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009908:	d033      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800990a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800990e:	d82c      	bhi.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009914:	d02f      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800991a:	d826      	bhi.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800991c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009920:	d02b      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009922:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009926:	d820      	bhi.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800992c:	d012      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800992e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009932:	d81a      	bhi.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009934:	2b00      	cmp	r3, #0
 8009936:	d022      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800993c:	d115      	bne.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800993e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009942:	3308      	adds	r3, #8
 8009944:	2101      	movs	r1, #1
 8009946:	4618      	mov	r0, r3
 8009948:	f002 f878 	bl	800ba3c <RCCEx_PLL2_Config>
 800994c:	4603      	mov	r3, r0
 800994e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009952:	e015      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009958:	3328      	adds	r3, #40	@ 0x28
 800995a:	2101      	movs	r1, #1
 800995c:	4618      	mov	r0, r3
 800995e:	f002 f91f 	bl	800bba0 <RCCEx_PLL3_Config>
 8009962:	4603      	mov	r3, r0
 8009964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009968:	e00a      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009970:	e006      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009972:	bf00      	nop
 8009974:	e004      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009976:	bf00      	nop
 8009978:	e002      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800997a:	bf00      	nop
 800997c:	e000      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800997e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10b      	bne.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009988:	4ba3      	ldr	r3, [pc, #652]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800998a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800998c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009994:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009998:	4a9f      	ldr	r2, [pc, #636]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800999a:	430b      	orrs	r3, r1
 800999c:	6593      	str	r3, [r2, #88]	@ 0x58
 800999e:	e003      	b.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80099b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099b8:	2300      	movs	r3, #0
 80099ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80099be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80099c2:	460b      	mov	r3, r1
 80099c4:	4313      	orrs	r3, r2
 80099c6:	d037      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80099c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d2:	d00e      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80099d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d8:	d816      	bhi.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d018      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80099de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099e2:	d111      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099e4:	4b8c      	ldr	r3, [pc, #560]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e8:	4a8b      	ldr	r2, [pc, #556]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80099f0:	e00f      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099f6:	3308      	adds	r3, #8
 80099f8:	2101      	movs	r1, #1
 80099fa:	4618      	mov	r0, r3
 80099fc:	f002 f81e 	bl	800ba3c <RCCEx_PLL2_Config>
 8009a00:	4603      	mov	r3, r0
 8009a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a06:	e004      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a0e:	e000      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10a      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a28:	4a7b      	ldr	r2, [pc, #492]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a2a:	430b      	orrs	r3, r1
 8009a2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a2e:	e003      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009a4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4313      	orrs	r3, r2
 8009a56:	d039      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d81c      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009a62:	a201      	add	r2, pc, #4	@ (adr r2, 8009a68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009aa5 	.word	0x08009aa5
 8009a6c:	08009a79 	.word	0x08009a79
 8009a70:	08009a87 	.word	0x08009a87
 8009a74:	08009aa5 	.word	0x08009aa5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a78:	4b67      	ldr	r3, [pc, #412]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7c:	4a66      	ldr	r2, [pc, #408]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a84:	e00f      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	2102      	movs	r1, #2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f001 ffd4 	bl	800ba3c <RCCEx_PLL2_Config>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a9a:	e004      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009aa2:	e000      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10a      	bne.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009aae:	4b5a      	ldr	r3, [pc, #360]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ab2:	f023 0103 	bic.w	r1, r3, #3
 8009ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009abc:	4a56      	ldr	r2, [pc, #344]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009abe:	430b      	orrs	r3, r1
 8009ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ac2:	e003      	b.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ac8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009adc:	2300      	movs	r3, #0
 8009ade:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ae2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	f000 809f 	beq.w	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009aee:	4b4b      	ldr	r3, [pc, #300]	@ (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a4a      	ldr	r2, [pc, #296]	@ (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009af8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009afa:	f7f8 fe69 	bl	80027d0 <HAL_GetTick>
 8009afe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b02:	e00b      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b04:	f7f8 fe64 	bl	80027d0 <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	2b64      	cmp	r3, #100	@ 0x64
 8009b12:	d903      	bls.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009b14:	2303      	movs	r3, #3
 8009b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b1a:	e005      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b1c:	4b3f      	ldr	r3, [pc, #252]	@ (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0ed      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d179      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b30:	4b39      	ldr	r3, [pc, #228]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b3c:	4053      	eors	r3, r2
 8009b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d015      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b46:	4b34      	ldr	r3, [pc, #208]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b4e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b52:	4b31      	ldr	r3, [pc, #196]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b56:	4a30      	ldr	r2, [pc, #192]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b62:	4a2d      	ldr	r2, [pc, #180]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b7e:	d118      	bne.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b80:	f7f8 fe26 	bl	80027d0 <HAL_GetTick>
 8009b84:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b88:	e00d      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b8a:	f7f8 fe21 	bl	80027d0 <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009b94:	1ad2      	subs	r2, r2, r3
 8009b96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d903      	bls.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009ba4:	e005      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0eb      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d129      	bne.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bca:	d10e      	bne.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009bcc:	4b12      	ldr	r3, [pc, #72]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bdc:	091a      	lsrs	r2, r3, #4
 8009bde:	4b10      	ldr	r3, [pc, #64]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	4a0d      	ldr	r2, [pc, #52]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009be4:	430b      	orrs	r3, r1
 8009be6:	6113      	str	r3, [r2, #16]
 8009be8:	e005      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009bea:	4b0b      	ldr	r3, [pc, #44]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	4a0a      	ldr	r2, [pc, #40]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bf0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009bf4:	6113      	str	r3, [r2, #16]
 8009bf6:	4b08      	ldr	r3, [pc, #32]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bf8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c06:	4a04      	ldr	r2, [pc, #16]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c0c:	e00e      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009c16:	e009      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009c18:	58024400 	.word	0x58024400
 8009c1c:	58024800 	.word	0x58024800
 8009c20:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	f002 0301 	and.w	r3, r2, #1
 8009c38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	f000 8089 	beq.w	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c54:	2b28      	cmp	r3, #40	@ 0x28
 8009c56:	d86b      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009c58:	a201      	add	r2, pc, #4	@ (adr r2, 8009c60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5e:	bf00      	nop
 8009c60:	08009d39 	.word	0x08009d39
 8009c64:	08009d31 	.word	0x08009d31
 8009c68:	08009d31 	.word	0x08009d31
 8009c6c:	08009d31 	.word	0x08009d31
 8009c70:	08009d31 	.word	0x08009d31
 8009c74:	08009d31 	.word	0x08009d31
 8009c78:	08009d31 	.word	0x08009d31
 8009c7c:	08009d31 	.word	0x08009d31
 8009c80:	08009d05 	.word	0x08009d05
 8009c84:	08009d31 	.word	0x08009d31
 8009c88:	08009d31 	.word	0x08009d31
 8009c8c:	08009d31 	.word	0x08009d31
 8009c90:	08009d31 	.word	0x08009d31
 8009c94:	08009d31 	.word	0x08009d31
 8009c98:	08009d31 	.word	0x08009d31
 8009c9c:	08009d31 	.word	0x08009d31
 8009ca0:	08009d1b 	.word	0x08009d1b
 8009ca4:	08009d31 	.word	0x08009d31
 8009ca8:	08009d31 	.word	0x08009d31
 8009cac:	08009d31 	.word	0x08009d31
 8009cb0:	08009d31 	.word	0x08009d31
 8009cb4:	08009d31 	.word	0x08009d31
 8009cb8:	08009d31 	.word	0x08009d31
 8009cbc:	08009d31 	.word	0x08009d31
 8009cc0:	08009d39 	.word	0x08009d39
 8009cc4:	08009d31 	.word	0x08009d31
 8009cc8:	08009d31 	.word	0x08009d31
 8009ccc:	08009d31 	.word	0x08009d31
 8009cd0:	08009d31 	.word	0x08009d31
 8009cd4:	08009d31 	.word	0x08009d31
 8009cd8:	08009d31 	.word	0x08009d31
 8009cdc:	08009d31 	.word	0x08009d31
 8009ce0:	08009d39 	.word	0x08009d39
 8009ce4:	08009d31 	.word	0x08009d31
 8009ce8:	08009d31 	.word	0x08009d31
 8009cec:	08009d31 	.word	0x08009d31
 8009cf0:	08009d31 	.word	0x08009d31
 8009cf4:	08009d31 	.word	0x08009d31
 8009cf8:	08009d31 	.word	0x08009d31
 8009cfc:	08009d31 	.word	0x08009d31
 8009d00:	08009d39 	.word	0x08009d39
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d08:	3308      	adds	r3, #8
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f001 fe95 	bl	800ba3c <RCCEx_PLL2_Config>
 8009d12:	4603      	mov	r3, r0
 8009d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d18:	e00f      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d1e:	3328      	adds	r3, #40	@ 0x28
 8009d20:	2101      	movs	r1, #1
 8009d22:	4618      	mov	r0, r3
 8009d24:	f001 ff3c 	bl	800bba0 <RCCEx_PLL3_Config>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d2e:	e004      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d36:	e000      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10a      	bne.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d42:	4bbf      	ldr	r3, [pc, #764]	@ (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d50:	4abb      	ldr	r2, [pc, #748]	@ (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d52:	430b      	orrs	r3, r1
 8009d54:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d56:	e003      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	f002 0302 	and.w	r3, r2, #2
 8009d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d70:	2300      	movs	r3, #0
 8009d72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009d76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	d041      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d86:	2b05      	cmp	r3, #5
 8009d88:	d824      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d90:	08009ddd 	.word	0x08009ddd
 8009d94:	08009da9 	.word	0x08009da9
 8009d98:	08009dbf 	.word	0x08009dbf
 8009d9c:	08009ddd 	.word	0x08009ddd
 8009da0:	08009ddd 	.word	0x08009ddd
 8009da4:	08009ddd 	.word	0x08009ddd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dac:	3308      	adds	r3, #8
 8009dae:	2101      	movs	r1, #1
 8009db0:	4618      	mov	r0, r3
 8009db2:	f001 fe43 	bl	800ba3c <RCCEx_PLL2_Config>
 8009db6:	4603      	mov	r3, r0
 8009db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009dbc:	e00f      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc2:	3328      	adds	r3, #40	@ 0x28
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f001 feea 	bl	800bba0 <RCCEx_PLL3_Config>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009dd2:	e004      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dda:	e000      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10a      	bne.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009de6:	4b96      	ldr	r3, [pc, #600]	@ (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dea:	f023 0107 	bic.w	r1, r3, #7
 8009dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009df4:	4a92      	ldr	r2, [pc, #584]	@ (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009df6:	430b      	orrs	r3, r1
 8009df8:	6553      	str	r3, [r2, #84]	@ 0x54
 8009dfa:	e003      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	f002 0304 	and.w	r3, r2, #4
 8009e10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e14:	2300      	movs	r3, #0
 8009e16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e1a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	4313      	orrs	r3, r2
 8009e22:	d044      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e2c:	2b05      	cmp	r3, #5
 8009e2e:	d825      	bhi.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009e30:	a201      	add	r2, pc, #4	@ (adr r2, 8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e36:	bf00      	nop
 8009e38:	08009e85 	.word	0x08009e85
 8009e3c:	08009e51 	.word	0x08009e51
 8009e40:	08009e67 	.word	0x08009e67
 8009e44:	08009e85 	.word	0x08009e85
 8009e48:	08009e85 	.word	0x08009e85
 8009e4c:	08009e85 	.word	0x08009e85
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e54:	3308      	adds	r3, #8
 8009e56:	2101      	movs	r1, #1
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f001 fdef 	bl	800ba3c <RCCEx_PLL2_Config>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e64:	e00f      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e6a:	3328      	adds	r3, #40	@ 0x28
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f001 fe96 	bl	800bba0 <RCCEx_PLL3_Config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e7a:	e004      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e82:	e000      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10b      	bne.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e8e:	4b6c      	ldr	r3, [pc, #432]	@ (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e92:	f023 0107 	bic.w	r1, r3, #7
 8009e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e9e:	4a68      	ldr	r2, [pc, #416]	@ (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ea4:	e003      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f002 0320 	and.w	r3, r2, #32
 8009eba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	d055      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009eda:	d033      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ee0:	d82c      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ee6:	d02f      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eec:	d826      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009eee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ef2:	d02b      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009ef4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ef8:	d820      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009efe:	d012      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009f00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f04:	d81a      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d022      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009f0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f0e:	d115      	bne.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f14:	3308      	adds	r3, #8
 8009f16:	2100      	movs	r1, #0
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 fd8f 	bl	800ba3c <RCCEx_PLL2_Config>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f24:	e015      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2a:	3328      	adds	r3, #40	@ 0x28
 8009f2c:	2102      	movs	r1, #2
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f001 fe36 	bl	800bba0 <RCCEx_PLL3_Config>
 8009f34:	4603      	mov	r3, r0
 8009f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f3a:	e00a      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f42:	e006      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f44:	bf00      	nop
 8009f46:	e004      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f48:	bf00      	nop
 8009f4a:	e002      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f4c:	bf00      	nop
 8009f4e:	e000      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10b      	bne.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f5a:	4b39      	ldr	r3, [pc, #228]	@ (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f6a:	4a35      	ldr	r2, [pc, #212]	@ (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f70:	e003      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f82:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009f86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009f90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4313      	orrs	r3, r2
 8009f98:	d058      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009fa2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009fa6:	d033      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009fa8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009fac:	d82c      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fb2:	d02f      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fb8:	d826      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009fbe:	d02b      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009fc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009fc4:	d820      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fca:	d012      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fd0:	d81a      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d022      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fda:	d115      	bne.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe0:	3308      	adds	r3, #8
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 fd29 	bl	800ba3c <RCCEx_PLL2_Config>
 8009fea:	4603      	mov	r3, r0
 8009fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ff0:	e015      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff6:	3328      	adds	r3, #40	@ 0x28
 8009ff8:	2102      	movs	r1, #2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f001 fdd0 	bl	800bba0 <RCCEx_PLL3_Config>
 800a000:	4603      	mov	r3, r0
 800a002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a006:	e00a      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a00e:	e006      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a010:	bf00      	nop
 800a012:	e004      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a014:	bf00      	nop
 800a016:	e002      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a018:	bf00      	nop
 800a01a:	e000      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a01c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a01e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10e      	bne.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a026:	4b06      	ldr	r3, [pc, #24]	@ (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a02a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a032:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a036:	4a02      	ldr	r2, [pc, #8]	@ (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a038:	430b      	orrs	r3, r1
 800a03a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a03c:	e006      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a03e:	bf00      	nop
 800a040:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a048:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a05c:	2300      	movs	r3, #0
 800a05e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a062:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a066:	460b      	mov	r3, r1
 800a068:	4313      	orrs	r3, r2
 800a06a:	d055      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a070:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a074:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a078:	d033      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a07a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a07e:	d82c      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a084:	d02f      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a08a:	d826      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a08c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a090:	d02b      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a092:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a096:	d820      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a098:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a09c:	d012      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a09e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0a2:	d81a      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d022      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a0a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0ac:	d115      	bne.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f001 fcc0 	bl	800ba3c <RCCEx_PLL2_Config>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0c2:	e015      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c8:	3328      	adds	r3, #40	@ 0x28
 800a0ca:	2102      	movs	r1, #2
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f001 fd67 	bl	800bba0 <RCCEx_PLL3_Config>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0d8:	e00a      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0e0:	e006      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0e2:	bf00      	nop
 800a0e4:	e004      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0e6:	bf00      	nop
 800a0e8:	e002      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0ea:	bf00      	nop
 800a0ec:	e000      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10b      	bne.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a0f8:	4ba1      	ldr	r3, [pc, #644]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a104:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a108:	4a9d      	ldr	r2, [pc, #628]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a10a:	430b      	orrs	r3, r1
 800a10c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a10e:	e003      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a114:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f002 0308 	and.w	r3, r2, #8
 800a124:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a128:	2300      	movs	r3, #0
 800a12a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a12e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a132:	460b      	mov	r3, r1
 800a134:	4313      	orrs	r3, r2
 800a136:	d01e      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a144:	d10c      	bne.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a14a:	3328      	adds	r3, #40	@ 0x28
 800a14c:	2102      	movs	r1, #2
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 fd26 	bl	800bba0 <RCCEx_PLL3_Config>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d002      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a160:	4b87      	ldr	r3, [pc, #540]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a164:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a16c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a170:	4a83      	ldr	r2, [pc, #524]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a172:	430b      	orrs	r3, r1
 800a174:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f002 0310 	and.w	r3, r2, #16
 800a182:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a186:	2300      	movs	r3, #0
 800a188:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a18c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a190:	460b      	mov	r3, r1
 800a192:	4313      	orrs	r3, r2
 800a194:	d01e      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a19e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1a2:	d10c      	bne.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a8:	3328      	adds	r3, #40	@ 0x28
 800a1aa:	2102      	movs	r1, #2
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f001 fcf7 	bl	800bba0 <RCCEx_PLL3_Config>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1be:	4b70      	ldr	r3, [pc, #448]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1ce:	4a6c      	ldr	r2, [pc, #432]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a1e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	d03e      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a1fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a200:	d022      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a206:	d81b      	bhi.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d003      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a20c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a210:	d00b      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a212:	e015      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a218:	3308      	adds	r3, #8
 800a21a:	2100      	movs	r1, #0
 800a21c:	4618      	mov	r0, r3
 800a21e:	f001 fc0d 	bl	800ba3c <RCCEx_PLL2_Config>
 800a222:	4603      	mov	r3, r0
 800a224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a228:	e00f      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a22e:	3328      	adds	r3, #40	@ 0x28
 800a230:	2102      	movs	r1, #2
 800a232:	4618      	mov	r0, r3
 800a234:	f001 fcb4 	bl	800bba0 <RCCEx_PLL3_Config>
 800a238:	4603      	mov	r3, r0
 800a23a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a23e:	e004      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a246:	e000      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a24a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10b      	bne.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a252:	4b4b      	ldr	r3, [pc, #300]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a256:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a25e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a262:	4a47      	ldr	r2, [pc, #284]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a264:	430b      	orrs	r3, r1
 800a266:	6593      	str	r3, [r2, #88]	@ 0x58
 800a268:	e003      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a26e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a27e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a280:	2300      	movs	r3, #0
 800a282:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a284:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a288:	460b      	mov	r3, r1
 800a28a:	4313      	orrs	r3, r2
 800a28c:	d03b      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a296:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a29a:	d01f      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a29c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2a0:	d818      	bhi.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a2a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2a6:	d003      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a2a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2ac:	d007      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a2ae:	e011      	b.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2b0:	4b33      	ldr	r3, [pc, #204]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b4:	4a32      	ldr	r2, [pc, #200]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2bc:	e00f      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c2:	3328      	adds	r3, #40	@ 0x28
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f001 fc6a 	bl	800bba0 <RCCEx_PLL3_Config>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2d2:	e004      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2da:	e000      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a2dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10b      	bne.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2e6:	4b26      	ldr	r3, [pc, #152]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2f6:	4a22      	ldr	r2, [pc, #136]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	6553      	str	r3, [r2, #84]	@ 0x54
 800a2fc:	e003      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a312:	673b      	str	r3, [r7, #112]	@ 0x70
 800a314:	2300      	movs	r3, #0
 800a316:	677b      	str	r3, [r7, #116]	@ 0x74
 800a318:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a31c:	460b      	mov	r3, r1
 800a31e:	4313      	orrs	r3, r2
 800a320:	d034      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d003      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a32c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a330:	d007      	beq.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a332:	e011      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a334:	4b12      	ldr	r3, [pc, #72]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a338:	4a11      	ldr	r2, [pc, #68]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a33a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a33e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a340:	e00e      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a346:	3308      	adds	r3, #8
 800a348:	2102      	movs	r1, #2
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 fb76 	bl	800ba3c <RCCEx_PLL2_Config>
 800a350:	4603      	mov	r3, r0
 800a352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a356:	e003      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a35e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10d      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a368:	4b05      	ldr	r3, [pc, #20]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a36a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a36c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a376:	4a02      	ldr	r2, [pc, #8]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a378:	430b      	orrs	r3, r1
 800a37a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a37c:	e006      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a37e:	bf00      	nop
 800a380:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a398:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a39a:	2300      	movs	r3, #0
 800a39c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a39e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	d00c      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ac:	3328      	adds	r3, #40	@ 0x28
 800a3ae:	2102      	movs	r1, #2
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f001 fbf5 	bl	800bba0 <RCCEx_PLL3_Config>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a3ce:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	d038      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3ea:	d018      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a3ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3f0:	d811      	bhi.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a3f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3f6:	d014      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a3f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3fc:	d80b      	bhi.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d011      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a406:	d106      	bne.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a408:	4bc3      	ldr	r3, [pc, #780]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40c:	4ac2      	ldr	r2, [pc, #776]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a40e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a414:	e008      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a41c:	e004      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a41e:	bf00      	nop
 800a420:	e002      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a422:	bf00      	nop
 800a424:	e000      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a426:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10b      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a430:	4bb9      	ldr	r3, [pc, #740]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a434:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a43c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a440:	4ab5      	ldr	r2, [pc, #724]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a442:	430b      	orrs	r3, r1
 800a444:	6553      	str	r3, [r2, #84]	@ 0x54
 800a446:	e003      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a44c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a45c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a45e:	2300      	movs	r3, #0
 800a460:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a462:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a466:	460b      	mov	r3, r1
 800a468:	4313      	orrs	r3, r2
 800a46a:	d009      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a46c:	4baa      	ldr	r3, [pc, #680]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a46e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a470:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a47a:	4aa7      	ldr	r2, [pc, #668]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a47c:	430b      	orrs	r3, r1
 800a47e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a48c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a48e:	2300      	movs	r3, #0
 800a490:	657b      	str	r3, [r7, #84]	@ 0x54
 800a492:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a496:	460b      	mov	r3, r1
 800a498:	4313      	orrs	r3, r2
 800a49a:	d00a      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a49c:	4b9e      	ldr	r3, [pc, #632]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a4ac:	4a9a      	ldr	r2, [pc, #616]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4ae:	430b      	orrs	r3, r1
 800a4b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a4be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	d009      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4ce:	4b92      	ldr	r3, [pc, #584]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4d2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4dc:	4a8e      	ldr	r2, [pc, #568]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4de:	430b      	orrs	r3, r1
 800a4e0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a4ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	d00e      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4fe:	4b86      	ldr	r3, [pc, #536]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	4a85      	ldr	r2, [pc, #532]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a504:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a508:	6113      	str	r3, [r2, #16]
 800a50a:	4b83      	ldr	r3, [pc, #524]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a50c:	6919      	ldr	r1, [r3, #16]
 800a50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a512:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a516:	4a80      	ldr	r2, [pc, #512]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a518:	430b      	orrs	r3, r1
 800a51a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a528:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a52a:	2300      	movs	r3, #0
 800a52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a52e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a532:	460b      	mov	r3, r1
 800a534:	4313      	orrs	r3, r2
 800a536:	d009      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a538:	4b77      	ldr	r3, [pc, #476]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a53a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a53c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a546:	4a74      	ldr	r2, [pc, #464]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a548:	430b      	orrs	r3, r1
 800a54a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a558:	633b      	str	r3, [r7, #48]	@ 0x30
 800a55a:	2300      	movs	r3, #0
 800a55c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a55e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a562:	460b      	mov	r3, r1
 800a564:	4313      	orrs	r3, r2
 800a566:	d00a      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a568:	4b6b      	ldr	r3, [pc, #428]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a56a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a56c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a578:	4a67      	ldr	r2, [pc, #412]	@ (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a57a:	430b      	orrs	r3, r1
 800a57c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	2100      	movs	r1, #0
 800a588:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a590:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a594:	460b      	mov	r3, r1
 800a596:	4313      	orrs	r3, r2
 800a598:	d011      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a59e:	3308      	adds	r3, #8
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f001 fa4a 	bl	800ba3c <RCCEx_PLL2_Config>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	6239      	str	r1, [r7, #32]
 800a5ca:	f003 0302 	and.w	r3, r3, #2
 800a5ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	d011      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5de:	3308      	adds	r3, #8
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f001 fa2a 	bl	800ba3c <RCCEx_PLL2_Config>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a5ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	2100      	movs	r1, #0
 800a608:	61b9      	str	r1, [r7, #24]
 800a60a:	f003 0304 	and.w	r3, r3, #4
 800a60e:	61fb      	str	r3, [r7, #28]
 800a610:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a614:	460b      	mov	r3, r1
 800a616:	4313      	orrs	r3, r2
 800a618:	d011      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a61e:	3308      	adds	r3, #8
 800a620:	2102      	movs	r1, #2
 800a622:	4618      	mov	r0, r3
 800a624:	f001 fa0a 	bl	800ba3c <RCCEx_PLL2_Config>
 800a628:	4603      	mov	r3, r0
 800a62a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a62e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a632:	2b00      	cmp	r3, #0
 800a634:	d003      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a63a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	2100      	movs	r1, #0
 800a648:	6139      	str	r1, [r7, #16]
 800a64a:	f003 0308 	and.w	r3, r3, #8
 800a64e:	617b      	str	r3, [r7, #20]
 800a650:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a654:	460b      	mov	r3, r1
 800a656:	4313      	orrs	r3, r2
 800a658:	d011      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a65e:	3328      	adds	r3, #40	@ 0x28
 800a660:	2100      	movs	r1, #0
 800a662:	4618      	mov	r0, r3
 800a664:	f001 fa9c 	bl	800bba0 <RCCEx_PLL3_Config>
 800a668:	4603      	mov	r3, r0
 800a66a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a66e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a67a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a686:	2100      	movs	r1, #0
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	f003 0310 	and.w	r3, r3, #16
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a694:	460b      	mov	r3, r1
 800a696:	4313      	orrs	r3, r2
 800a698:	d011      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a69e:	3328      	adds	r3, #40	@ 0x28
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f001 fa7c 	bl	800bba0 <RCCEx_PLL3_Config>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a6ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d003      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	6039      	str	r1, [r7, #0]
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	607b      	str	r3, [r7, #4]
 800a6d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	d011      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6de:	3328      	adds	r3, #40	@ 0x28
 800a6e0:	2102      	movs	r1, #2
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 fa5c 	bl	800bba0 <RCCEx_PLL3_Config>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a6ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d003      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a6fe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	e000      	b.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a712:	46bd      	mov	sp, r7
 800a714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a718:	58024400 	.word	0x58024400

0800a71c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b090      	sub	sp, #64	@ 0x40
 800a720:	af00      	add	r7, sp, #0
 800a722:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a72a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a72e:	430b      	orrs	r3, r1
 800a730:	f040 8094 	bne.w	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a734:	4b9e      	ldr	r3, [pc, #632]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a738:	f003 0307 	and.w	r3, r3, #7
 800a73c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a740:	2b04      	cmp	r3, #4
 800a742:	f200 8087 	bhi.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a746:	a201      	add	r2, pc, #4	@ (adr r2, 800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74c:	0800a761 	.word	0x0800a761
 800a750:	0800a789 	.word	0x0800a789
 800a754:	0800a7b1 	.word	0x0800a7b1
 800a758:	0800a84d 	.word	0x0800a84d
 800a75c:	0800a7d9 	.word	0x0800a7d9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a760:	4b93      	ldr	r3, [pc, #588]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a76c:	d108      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a76e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a772:	4618      	mov	r0, r3
 800a774:	f001 f810 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a77c:	f000 bd45 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a784:	f000 bd41 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a788:	4b89      	ldr	r3, [pc, #548]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a794:	d108      	bne.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a796:	f107 0318 	add.w	r3, r7, #24
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fd54 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7a4:	f000 bd31 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ac:	f000 bd2d 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7b0:	4b7f      	ldr	r3, [pc, #508]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7bc:	d108      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7be:	f107 030c 	add.w	r3, r7, #12
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 fe94 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7cc:	f000 bd1d 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7d4:	f000 bd19 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7d8:	4b75      	ldr	r3, [pc, #468]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7e0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7e2:	4b73      	ldr	r3, [pc, #460]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 0304 	and.w	r3, r3, #4
 800a7ea:	2b04      	cmp	r3, #4
 800a7ec:	d10c      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d109      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7f4:	4b6e      	ldr	r3, [pc, #440]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	08db      	lsrs	r3, r3, #3
 800a7fa:	f003 0303 	and.w	r3, r3, #3
 800a7fe:	4a6d      	ldr	r2, [pc, #436]	@ (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a800:	fa22 f303 	lsr.w	r3, r2, r3
 800a804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a806:	e01f      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a808:	4b69      	ldr	r3, [pc, #420]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a814:	d106      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a818:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a81c:	d102      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a81e:	4b66      	ldr	r3, [pc, #408]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a822:	e011      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a824:	4b62      	ldr	r3, [pc, #392]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a82c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a830:	d106      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a838:	d102      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a83a:	4b60      	ldr	r3, [pc, #384]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a83e:	e003      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a844:	f000 bce1 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a848:	f000 bcdf 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a84c:	4b5c      	ldr	r3, [pc, #368]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a850:	f000 bcdb 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a858:	f000 bcd7 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a85c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a860:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a864:	430b      	orrs	r3, r1
 800a866:	f040 80ad 	bne.w	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a86a:	4b51      	ldr	r3, [pc, #324]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a86c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a86e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a872:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a87a:	d056      	beq.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a882:	f200 8090 	bhi.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a888:	2bc0      	cmp	r3, #192	@ 0xc0
 800a88a:	f000 8088 	beq.w	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a890:	2bc0      	cmp	r3, #192	@ 0xc0
 800a892:	f200 8088 	bhi.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	2b80      	cmp	r3, #128	@ 0x80
 800a89a:	d032      	beq.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89e:	2b80      	cmp	r3, #128	@ 0x80
 800a8a0:	f200 8081 	bhi.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ac:	2b40      	cmp	r3, #64	@ 0x40
 800a8ae:	d014      	beq.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a8b0:	e079      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8b2:	4b3f      	ldr	r3, [pc, #252]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8be:	d108      	bne.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 ff67 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ce:	f000 bc9c 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d6:	f000 bc98 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8da:	4b35      	ldr	r3, [pc, #212]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8e6:	d108      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8e8:	f107 0318 	add.w	r3, r7, #24
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 fcab 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f6:	f000 bc88 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8fe:	f000 bc84 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a902:	4b2b      	ldr	r3, [pc, #172]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a90a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a90e:	d108      	bne.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a910:	f107 030c 	add.w	r3, r7, #12
 800a914:	4618      	mov	r0, r3
 800a916:	f000 fdeb 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a91e:	f000 bc74 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a926:	f000 bc70 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a92a:	4b21      	ldr	r3, [pc, #132]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a92c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a92e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a932:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a934:	4b1e      	ldr	r3, [pc, #120]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0304 	and.w	r3, r3, #4
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d10c      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a942:	2b00      	cmp	r3, #0
 800a944:	d109      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a946:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	08db      	lsrs	r3, r3, #3
 800a94c:	f003 0303 	and.w	r3, r3, #3
 800a950:	4a18      	ldr	r2, [pc, #96]	@ (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a952:	fa22 f303 	lsr.w	r3, r2, r3
 800a956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a958:	e01f      	b.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a95a:	4b15      	ldr	r3, [pc, #84]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a966:	d106      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a96e:	d102      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a970:	4b11      	ldr	r3, [pc, #68]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a974:	e011      	b.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a976:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a97e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a982:	d106      	bne.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a98a:	d102      	bne.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a98c:	4b0b      	ldr	r3, [pc, #44]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a990:	e003      	b.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a992:	2300      	movs	r3, #0
 800a994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a996:	f000 bc38 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a99a:	f000 bc36 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a99e:	4b08      	ldr	r3, [pc, #32]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a2:	f000 bc32 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9aa:	f000 bc2e 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9ae:	bf00      	nop
 800a9b0:	58024400 	.word	0x58024400
 800a9b4:	03d09000 	.word	0x03d09000
 800a9b8:	003d0900 	.word	0x003d0900
 800a9bc:	017d7840 	.word	0x017d7840
 800a9c0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a9c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9c8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a9cc:	430b      	orrs	r3, r1
 800a9ce:	f040 809c 	bne.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a9d2:	4b9e      	ldr	r3, [pc, #632]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9d6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a9da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a9e2:	d054      	beq.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a9ea:	f200 808b 	bhi.w	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a9f4:	f000 8083 	beq.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a9fe:	f200 8081 	bhi.w	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa08:	d02f      	beq.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa10:	d878      	bhi.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d004      	beq.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800aa18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa1e:	d012      	beq.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800aa20:	e070      	b.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa22:	4b8a      	ldr	r3, [pc, #552]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa2e:	d107      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 feaf 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa3e:	e3e4      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa44:	e3e1      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa46:	4b81      	ldr	r3, [pc, #516]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa52:	d107      	bne.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa54:	f107 0318 	add.w	r3, r7, #24
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 fbf5 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa62:	e3d2      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa68:	e3cf      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa6a:	4b78      	ldr	r3, [pc, #480]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa76:	d107      	bne.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa78:	f107 030c 	add.w	r3, r7, #12
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 fd37 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa86:	e3c0      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa8c:	e3bd      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa8e:	4b6f      	ldr	r3, [pc, #444]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa98:	4b6c      	ldr	r3, [pc, #432]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	d10c      	bne.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d109      	bne.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaaa:	4b68      	ldr	r3, [pc, #416]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	08db      	lsrs	r3, r3, #3
 800aab0:	f003 0303 	and.w	r3, r3, #3
 800aab4:	4a66      	ldr	r2, [pc, #408]	@ (800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aab6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aabc:	e01e      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aabe:	4b63      	ldr	r3, [pc, #396]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaca:	d106      	bne.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aad2:	d102      	bne.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aad4:	4b5f      	ldr	r3, [pc, #380]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aad8:	e010      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aada:	4b5c      	ldr	r3, [pc, #368]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aae6:	d106      	bne.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800aae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaee:	d102      	bne.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aaf0:	4b59      	ldr	r3, [pc, #356]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aaf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaf4:	e002      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aafa:	e386      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aafc:	e385      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aafe:	4b57      	ldr	r3, [pc, #348]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ab00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab02:	e382      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab08:	e37f      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ab0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab0e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ab12:	430b      	orrs	r3, r1
 800ab14:	f040 80a7 	bne.w	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ab18:	4b4c      	ldr	r3, [pc, #304]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab1c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ab20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ab22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab28:	d055      	beq.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab30:	f200 8096 	bhi.w	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ab3a:	f000 8084 	beq.w	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ab44:	f200 808c 	bhi.w	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab4e:	d030      	beq.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ab50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab56:	f200 8083 	bhi.w	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d004      	beq.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ab60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab66:	d012      	beq.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ab68:	e07a      	b.n	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab6a:	4b38      	ldr	r3, [pc, #224]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab76:	d107      	bne.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 fe0b 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab86:	e340      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8c:	e33d      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab9a:	d107      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab9c:	f107 0318 	add.w	r3, r7, #24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 fb51 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abaa:	e32e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb0:	e32b      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abb2:	4b26      	ldr	r3, [pc, #152]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abbe:	d107      	bne.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abc0:	f107 030c 	add.w	r3, r7, #12
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fc93 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abce:	e31c      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd4:	e319      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abd6:	4b1d      	ldr	r3, [pc, #116]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abde:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abe0:	4b1a      	ldr	r3, [pc, #104]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 0304 	and.w	r3, r3, #4
 800abe8:	2b04      	cmp	r3, #4
 800abea:	d10c      	bne.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800abec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d109      	bne.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abf2:	4b16      	ldr	r3, [pc, #88]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	08db      	lsrs	r3, r3, #3
 800abf8:	f003 0303 	and.w	r3, r3, #3
 800abfc:	4a14      	ldr	r2, [pc, #80]	@ (800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800abfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ac02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac04:	e01e      	b.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac06:	4b11      	ldr	r3, [pc, #68]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac12:	d106      	bne.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ac14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac1a:	d102      	bne.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac20:	e010      	b.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac22:	4b0a      	ldr	r3, [pc, #40]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac2e:	d106      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ac30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac36:	d102      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac38:	4b07      	ldr	r3, [pc, #28]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ac3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac3c:	e002      	b.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac42:	e2e2      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac44:	e2e1      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac46:	4b05      	ldr	r3, [pc, #20]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ac48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac4a:	e2de      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac4c:	58024400 	.word	0x58024400
 800ac50:	03d09000 	.word	0x03d09000
 800ac54:	003d0900 	.word	0x003d0900
 800ac58:	017d7840 	.word	0x017d7840
 800ac5c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac64:	e2d1      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ac66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac6a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ac6e:	430b      	orrs	r3, r1
 800ac70:	f040 809c 	bne.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ac74:	4b93      	ldr	r3, [pc, #588]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac78:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ac7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac84:	d054      	beq.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ac86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac8c:	f200 808b 	bhi.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ac90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac96:	f000 8083 	beq.w	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ac9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aca0:	f200 8081 	bhi.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acaa:	d02f      	beq.n	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800acac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acb2:	d878      	bhi.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800acb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d004      	beq.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800acba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acc0:	d012      	beq.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800acc2:	e070      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acc4:	4b7f      	ldr	r3, [pc, #508]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800accc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800acd0:	d107      	bne.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 fd5e 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ace0:	e293      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ace2:	2300      	movs	r3, #0
 800ace4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ace6:	e290      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ace8:	4b76      	ldr	r3, [pc, #472]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acf4:	d107      	bne.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acf6:	f107 0318 	add.w	r3, r7, #24
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 faa4 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad04:	e281      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad0a:	e27e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad0c:	4b6d      	ldr	r3, [pc, #436]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad18:	d107      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad1a:	f107 030c 	add.w	r3, r7, #12
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 fbe6 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad28:	e26f      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad2e:	e26c      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad30:	4b64      	ldr	r3, [pc, #400]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad38:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad3a:	4b62      	ldr	r3, [pc, #392]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0304 	and.w	r3, r3, #4
 800ad42:	2b04      	cmp	r3, #4
 800ad44:	d10c      	bne.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ad46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d109      	bne.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad4c:	4b5d      	ldr	r3, [pc, #372]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	08db      	lsrs	r3, r3, #3
 800ad52:	f003 0303 	and.w	r3, r3, #3
 800ad56:	4a5c      	ldr	r2, [pc, #368]	@ (800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ad58:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad5e:	e01e      	b.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad60:	4b58      	ldr	r3, [pc, #352]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad6c:	d106      	bne.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ad6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad74:	d102      	bne.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad76:	4b55      	ldr	r3, [pc, #340]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad7a:	e010      	b.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad7c:	4b51      	ldr	r3, [pc, #324]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad88:	d106      	bne.n	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad90:	d102      	bne.n	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad92:	4b4f      	ldr	r3, [pc, #316]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ad94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad96:	e002      	b.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad9c:	e235      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad9e:	e234      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ada0:	4b4c      	ldr	r3, [pc, #304]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ada2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada4:	e231      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adaa:	e22e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800adac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adb0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800adb4:	430b      	orrs	r3, r1
 800adb6:	f040 808f 	bne.w	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800adba:	4b42      	ldr	r3, [pc, #264]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adbe:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800adc2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800adc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800adca:	d06b      	beq.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800adcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800add2:	d874      	bhi.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800add4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800adda:	d056      	beq.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800addc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ade2:	d86c      	bhi.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ade4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800adea:	d03b      	beq.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800adec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800adf2:	d864      	bhi.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800adf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adfa:	d021      	beq.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800adfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae02:	d85c      	bhi.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d004      	beq.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae10:	d004      	beq.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ae12:	e054      	b.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ae14:	f7fe fa4c 	bl	80092b0 <HAL_RCC_GetPCLK1Freq>
 800ae18:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae1a:	e1f6      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae1c:	4b29      	ldr	r3, [pc, #164]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae28:	d107      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae2a:	f107 0318 	add.w	r3, r7, #24
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fa0a 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae38:	e1e7      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae3e:	e1e4      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae40:	4b20      	ldr	r3, [pc, #128]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae4c:	d107      	bne.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae4e:	f107 030c 	add.w	r3, r7, #12
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 fb4c 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae5c:	e1d5      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae62:	e1d2      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae64:	4b17      	ldr	r3, [pc, #92]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0304 	and.w	r3, r3, #4
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	d109      	bne.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae70:	4b14      	ldr	r3, [pc, #80]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	08db      	lsrs	r3, r3, #3
 800ae76:	f003 0303 	and.w	r3, r3, #3
 800ae7a:	4a13      	ldr	r2, [pc, #76]	@ (800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ae7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae82:	e1c2      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae88:	e1bf      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae8a:	4b0e      	ldr	r3, [pc, #56]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae96:	d102      	bne.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ae98:	4b0c      	ldr	r3, [pc, #48]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae9c:	e1b5      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea2:	e1b2      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aea4:	4b07      	ldr	r3, [pc, #28]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aeac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeb0:	d102      	bne.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800aeb2:	4b07      	ldr	r3, [pc, #28]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aeb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb6:	e1a8      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aebc:	e1a5      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aec2:	e1a2      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aec4:	58024400 	.word	0x58024400
 800aec8:	03d09000 	.word	0x03d09000
 800aecc:	003d0900 	.word	0x003d0900
 800aed0:	017d7840 	.word	0x017d7840
 800aed4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aedc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aee0:	430b      	orrs	r3, r1
 800aee2:	d173      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aee4:	4b9c      	ldr	r3, [pc, #624]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aee8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aeec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aeee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aef4:	d02f      	beq.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aefc:	d863      	bhi.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aefe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af00:	2b00      	cmp	r3, #0
 800af02:	d004      	beq.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800af04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af0a:	d012      	beq.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800af0c:	e05b      	b.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af0e:	4b92      	ldr	r3, [pc, #584]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af1a:	d107      	bne.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af1c:	f107 0318 	add.w	r3, r7, #24
 800af20:	4618      	mov	r0, r3
 800af22:	f000 f991 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af2a:	e16e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af30:	e16b      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af32:	4b89      	ldr	r3, [pc, #548]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af3e:	d107      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af40:	f107 030c 	add.w	r3, r7, #12
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fad3 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af4e:	e15c      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af54:	e159      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af56:	4b80      	ldr	r3, [pc, #512]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800af5e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af60:	4b7d      	ldr	r3, [pc, #500]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 0304 	and.w	r3, r3, #4
 800af68:	2b04      	cmp	r3, #4
 800af6a:	d10c      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800af6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d109      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af72:	4b79      	ldr	r3, [pc, #484]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	08db      	lsrs	r3, r3, #3
 800af78:	f003 0303 	and.w	r3, r3, #3
 800af7c:	4a77      	ldr	r2, [pc, #476]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800af7e:	fa22 f303 	lsr.w	r3, r2, r3
 800af82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af84:	e01e      	b.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af86:	4b74      	ldr	r3, [pc, #464]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af92:	d106      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800af94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af9a:	d102      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af9c:	4b70      	ldr	r3, [pc, #448]	@ (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800af9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afa0:	e010      	b.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afa2:	4b6d      	ldr	r3, [pc, #436]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afae:	d106      	bne.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800afb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afb6:	d102      	bne.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800afb8:	4b6a      	ldr	r3, [pc, #424]	@ (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800afba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afbc:	e002      	b.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800afc2:	e122      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afc4:	e121      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afca:	e11e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800afcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afd0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800afd4:	430b      	orrs	r3, r1
 800afd6:	d133      	bne.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800afd8:	4b5f      	ldr	r3, [pc, #380]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800afe0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800afe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d004      	beq.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800afe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afee:	d012      	beq.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800aff0:	e023      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aff2:	4b59      	ldr	r3, [pc, #356]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800affa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800affe:	d107      	bne.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b004:	4618      	mov	r0, r3
 800b006:	f000 fbc7 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b00e:	e0fc      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b014:	e0f9      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b016:	4b50      	ldr	r3, [pc, #320]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b01e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b022:	d107      	bne.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b024:	f107 0318 	add.w	r3, r7, #24
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 f90d 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b02e:	6a3b      	ldr	r3, [r7, #32]
 800b030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b032:	e0ea      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b034:	2300      	movs	r3, #0
 800b036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b038:	e0e7      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b03e:	e0e4      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b040:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b044:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b048:	430b      	orrs	r3, r1
 800b04a:	f040 808d 	bne.w	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b04e:	4b42      	ldr	r3, [pc, #264]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b052:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b056:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b05e:	d06b      	beq.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b062:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b066:	d874      	bhi.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b06e:	d056      	beq.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b076:	d86c      	bhi.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b07a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b07e:	d03b      	beq.n	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b082:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b086:	d864      	bhi.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b08e:	d021      	beq.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b096:	d85c      	bhi.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d004      	beq.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0a4:	d004      	beq.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b0a6:	e054      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b0a8:	f000 f8b8 	bl	800b21c <HAL_RCCEx_GetD3PCLK1Freq>
 800b0ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0ae:	e0ac      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0b0:	4b29      	ldr	r3, [pc, #164]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0bc:	d107      	bne.n	800b0ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0be:	f107 0318 	add.w	r3, r7, #24
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 f8c0 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0cc:	e09d      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0d2:	e09a      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0d4:	4b20      	ldr	r3, [pc, #128]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0e0:	d107      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0e2:	f107 030c 	add.w	r3, r7, #12
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fa02 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0f0:	e08b      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0f6:	e088      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0f8:	4b17      	ldr	r3, [pc, #92]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f003 0304 	and.w	r3, r3, #4
 800b100:	2b04      	cmp	r3, #4
 800b102:	d109      	bne.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b104:	4b14      	ldr	r3, [pc, #80]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	08db      	lsrs	r3, r3, #3
 800b10a:	f003 0303 	and.w	r3, r3, #3
 800b10e:	4a13      	ldr	r2, [pc, #76]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b110:	fa22 f303 	lsr.w	r3, r2, r3
 800b114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b116:	e078      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b118:	2300      	movs	r3, #0
 800b11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b11c:	e075      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b11e:	4b0e      	ldr	r3, [pc, #56]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b12a:	d102      	bne.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b12c:	4b0c      	ldr	r3, [pc, #48]	@ (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b130:	e06b      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b132:	2300      	movs	r3, #0
 800b134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b136:	e068      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b138:	4b07      	ldr	r3, [pc, #28]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b144:	d102      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b146:	4b07      	ldr	r3, [pc, #28]	@ (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b14a:	e05e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b150:	e05b      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b156:	e058      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b158:	58024400 	.word	0x58024400
 800b15c:	03d09000 	.word	0x03d09000
 800b160:	003d0900 	.word	0x003d0900
 800b164:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b16c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b170:	430b      	orrs	r3, r1
 800b172:	d148      	bne.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b174:	4b27      	ldr	r3, [pc, #156]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b178:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b17c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b184:	d02a      	beq.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b18c:	d838      	bhi.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b190:	2b00      	cmp	r3, #0
 800b192:	d004      	beq.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b196:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b19a:	d00d      	beq.n	800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b19c:	e030      	b.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b19e:	4b1d      	ldr	r3, [pc, #116]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1aa:	d102      	bne.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b1ac:	4b1a      	ldr	r3, [pc, #104]	@ (800b218 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1b0:	e02b      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b6:	e028      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1b8:	4b16      	ldr	r3, [pc, #88]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1c4:	d107      	bne.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 fae4 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1d4:	e019      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1da:	e016      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1dc:	4b0d      	ldr	r3, [pc, #52]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1e8:	d107      	bne.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1ea:	f107 0318 	add.w	r3, r7, #24
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 f82a 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1f8:	e007      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1fe:	e004      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b200:	2300      	movs	r3, #0
 800b202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b204:	e001      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b20a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3740      	adds	r7, #64	@ 0x40
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	58024400 	.word	0x58024400
 800b218:	017d7840 	.word	0x017d7840

0800b21c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b220:	f7fe f816 	bl	8009250 <HAL_RCC_GetHCLKFreq>
 800b224:	4602      	mov	r2, r0
 800b226:	4b06      	ldr	r3, [pc, #24]	@ (800b240 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	091b      	lsrs	r3, r3, #4
 800b22c:	f003 0307 	and.w	r3, r3, #7
 800b230:	4904      	ldr	r1, [pc, #16]	@ (800b244 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b232:	5ccb      	ldrb	r3, [r1, r3]
 800b234:	f003 031f 	and.w	r3, r3, #31
 800b238:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	58024400 	.word	0x58024400
 800b244:	08013fb4 	.word	0x08013fb4

0800b248 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b248:	b480      	push	{r7}
 800b24a:	b089      	sub	sp, #36	@ 0x24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b250:	4ba1      	ldr	r3, [pc, #644]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b254:	f003 0303 	and.w	r3, r3, #3
 800b258:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b25a:	4b9f      	ldr	r3, [pc, #636]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b25c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b25e:	0b1b      	lsrs	r3, r3, #12
 800b260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b264:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b266:	4b9c      	ldr	r3, [pc, #624]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b26a:	091b      	lsrs	r3, r3, #4
 800b26c:	f003 0301 	and.w	r3, r3, #1
 800b270:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b272:	4b99      	ldr	r3, [pc, #612]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b276:	08db      	lsrs	r3, r3, #3
 800b278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b27c:	693a      	ldr	r2, [r7, #16]
 800b27e:	fb02 f303 	mul.w	r3, r2, r3
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 8111 	beq.w	800b4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	2b02      	cmp	r3, #2
 800b29a:	f000 8083 	beq.w	800b3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	f200 80a1 	bhi.w	800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d003      	beq.n	800b2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d056      	beq.n	800b360 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b2b2:	e099      	b.n	800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2b4:	4b88      	ldr	r3, [pc, #544]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 0320 	and.w	r3, r3, #32
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d02d      	beq.n	800b31c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2c0:	4b85      	ldr	r3, [pc, #532]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	08db      	lsrs	r3, r3, #3
 800b2c6:	f003 0303 	and.w	r3, r3, #3
 800b2ca:	4a84      	ldr	r2, [pc, #528]	@ (800b4dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b2cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	ee07 3a90 	vmov	s15, r3
 800b2d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ea:	4b7b      	ldr	r3, [pc, #492]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b30a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b30e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b312:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b316:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b31a:	e087      	b.n	800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	ee07 3a90 	vmov	s15, r3
 800b322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b326:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b32e:	4b6a      	ldr	r3, [pc, #424]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b342:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b34e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b35a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b35e:	e065      	b.n	800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	ee07 3a90 	vmov	s15, r3
 800b366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b36a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b372:	4b59      	ldr	r3, [pc, #356]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b37a:	ee07 3a90 	vmov	s15, r3
 800b37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b382:	ed97 6a03 	vldr	s12, [r7, #12]
 800b386:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b39e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3a2:	e043      	b.n	800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	ee07 3a90 	vmov	s15, r3
 800b3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b4ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3b6:	4b48      	ldr	r3, [pc, #288]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3e6:	e021      	b.n	800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	ee07 3a90 	vmov	s15, r3
 800b3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3fa:	4b37      	ldr	r3, [pc, #220]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b402:	ee07 3a90 	vmov	s15, r3
 800b406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b40e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b41a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b42a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b42c:	4b2a      	ldr	r3, [pc, #168]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b430:	0a5b      	lsrs	r3, r3, #9
 800b432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b436:	ee07 3a90 	vmov	s15, r3
 800b43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b43e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b442:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b446:	edd7 6a07 	vldr	s13, [r7, #28]
 800b44a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b44e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b452:	ee17 2a90 	vmov	r2, s15
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b45a:	4b1f      	ldr	r3, [pc, #124]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b45c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b45e:	0c1b      	lsrs	r3, r3, #16
 800b460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b464:	ee07 3a90 	vmov	s15, r3
 800b468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b46c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b470:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b474:	edd7 6a07 	vldr	s13, [r7, #28]
 800b478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b47c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b480:	ee17 2a90 	vmov	r2, s15
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b488:	4b13      	ldr	r3, [pc, #76]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b48c:	0e1b      	lsrs	r3, r3, #24
 800b48e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b492:	ee07 3a90 	vmov	s15, r3
 800b496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b49a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b49e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4ae:	ee17 2a90 	vmov	r2, s15
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b4b6:	e008      	b.n	800b4ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	609a      	str	r2, [r3, #8]
}
 800b4ca:	bf00      	nop
 800b4cc:	3724      	adds	r7, #36	@ 0x24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	58024400 	.word	0x58024400
 800b4dc:	03d09000 	.word	0x03d09000
 800b4e0:	46000000 	.word	0x46000000
 800b4e4:	4c742400 	.word	0x4c742400
 800b4e8:	4a742400 	.word	0x4a742400
 800b4ec:	4bbebc20 	.word	0x4bbebc20

0800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b089      	sub	sp, #36	@ 0x24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4f8:	4ba1      	ldr	r3, [pc, #644]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fc:	f003 0303 	and.w	r3, r3, #3
 800b500:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b502:	4b9f      	ldr	r3, [pc, #636]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b506:	0d1b      	lsrs	r3, r3, #20
 800b508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b50c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b50e:	4b9c      	ldr	r3, [pc, #624]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b512:	0a1b      	lsrs	r3, r3, #8
 800b514:	f003 0301 	and.w	r3, r3, #1
 800b518:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b51a:	4b99      	ldr	r3, [pc, #612]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b51e:	08db      	lsrs	r3, r3, #3
 800b520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	fb02 f303 	mul.w	r3, r2, r3
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b532:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f000 8111 	beq.w	800b760 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	2b02      	cmp	r3, #2
 800b542:	f000 8083 	beq.w	800b64c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	2b02      	cmp	r3, #2
 800b54a:	f200 80a1 	bhi.w	800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d003      	beq.n	800b55c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d056      	beq.n	800b608 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b55a:	e099      	b.n	800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b55c:	4b88      	ldr	r3, [pc, #544]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0320 	and.w	r3, r3, #32
 800b564:	2b00      	cmp	r3, #0
 800b566:	d02d      	beq.n	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b568:	4b85      	ldr	r3, [pc, #532]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	08db      	lsrs	r3, r3, #3
 800b56e:	f003 0303 	and.w	r3, r3, #3
 800b572:	4a84      	ldr	r2, [pc, #528]	@ (800b784 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b574:	fa22 f303 	lsr.w	r3, r2, r3
 800b578:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	ee07 3a90 	vmov	s15, r3
 800b580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	ee07 3a90 	vmov	s15, r3
 800b58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b592:	4b7b      	ldr	r3, [pc, #492]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5c2:	e087      	b.n	800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	ee07 3a90 	vmov	s15, r3
 800b5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b78c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5d6:	4b6a      	ldr	r3, [pc, #424]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b606:	e065      	b.n	800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	ee07 3a90 	vmov	s15, r3
 800b60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b612:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b61a:	4b59      	ldr	r3, [pc, #356]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b622:	ee07 3a90 	vmov	s15, r3
 800b626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b62a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b62e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b63a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b63e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b64a:	e043      	b.n	800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	ee07 3a90 	vmov	s15, r3
 800b652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b656:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b794 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b65a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b65e:	4b48      	ldr	r3, [pc, #288]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b666:	ee07 3a90 	vmov	s15, r3
 800b66a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b66e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b672:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b67a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b67e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b68a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b68e:	e021      	b.n	800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	ee07 3a90 	vmov	s15, r3
 800b696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b69a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b69e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6a2:	4b37      	ldr	r3, [pc, #220]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6aa:	ee07 3a90 	vmov	s15, r3
 800b6ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b6d4:	4b2a      	ldr	r3, [pc, #168]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d8:	0a5b      	lsrs	r3, r3, #9
 800b6da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6de:	ee07 3a90 	vmov	s15, r3
 800b6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6fa:	ee17 2a90 	vmov	r2, s15
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b702:	4b1f      	ldr	r3, [pc, #124]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b706:	0c1b      	lsrs	r3, r3, #16
 800b708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b70c:	ee07 3a90 	vmov	s15, r3
 800b710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b714:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b71c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b728:	ee17 2a90 	vmov	r2, s15
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b730:	4b13      	ldr	r3, [pc, #76]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b734:	0e1b      	lsrs	r3, r3, #24
 800b736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b73a:	ee07 3a90 	vmov	s15, r3
 800b73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b742:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b74a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b74e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b756:	ee17 2a90 	vmov	r2, s15
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b75e:	e008      	b.n	800b772 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	609a      	str	r2, [r3, #8]
}
 800b772:	bf00      	nop
 800b774:	3724      	adds	r7, #36	@ 0x24
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	58024400 	.word	0x58024400
 800b784:	03d09000 	.word	0x03d09000
 800b788:	46000000 	.word	0x46000000
 800b78c:	4c742400 	.word	0x4c742400
 800b790:	4a742400 	.word	0x4a742400
 800b794:	4bbebc20 	.word	0x4bbebc20

0800b798 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b798:	b480      	push	{r7}
 800b79a:	b089      	sub	sp, #36	@ 0x24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b7a0:	4ba0      	ldr	r3, [pc, #640]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a4:	f003 0303 	and.w	r3, r3, #3
 800b7a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b7aa:	4b9e      	ldr	r3, [pc, #632]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ae:	091b      	lsrs	r3, r3, #4
 800b7b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b7b6:	4b9b      	ldr	r3, [pc, #620]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b7c0:	4b98      	ldr	r3, [pc, #608]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7c4:	08db      	lsrs	r3, r3, #3
 800b7c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7ca:	693a      	ldr	r2, [r7, #16]
 800b7cc:	fb02 f303 	mul.w	r3, r2, r3
 800b7d0:	ee07 3a90 	vmov	s15, r3
 800b7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f000 8111 	beq.w	800ba06 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	f000 8083 	beq.w	800b8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	f200 80a1 	bhi.w	800b936 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d003      	beq.n	800b802 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d056      	beq.n	800b8ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b800:	e099      	b.n	800b936 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b802:	4b88      	ldr	r3, [pc, #544]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0320 	and.w	r3, r3, #32
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d02d      	beq.n	800b86a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b80e:	4b85      	ldr	r3, [pc, #532]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	08db      	lsrs	r3, r3, #3
 800b814:	f003 0303 	and.w	r3, r3, #3
 800b818:	4a83      	ldr	r2, [pc, #524]	@ (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b81a:	fa22 f303 	lsr.w	r3, r2, r3
 800b81e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	ee07 3a90 	vmov	s15, r3
 800b826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	ee07 3a90 	vmov	s15, r3
 800b830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b838:	4b7a      	ldr	r3, [pc, #488]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b83a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b840:	ee07 3a90 	vmov	s15, r3
 800b844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b848:	ed97 6a03 	vldr	s12, [r7, #12]
 800b84c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b858:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b85c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b860:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b864:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b868:	e087      	b.n	800b97a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	ee07 3a90 	vmov	s15, r3
 800b870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b874:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ba30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b87c:	4b69      	ldr	r3, [pc, #420]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b87e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b890:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b89c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8ac:	e065      	b.n	800b97a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	ee07 3a90 	vmov	s15, r3
 800b8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b8bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8c0:	4b58      	ldr	r3, [pc, #352]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8d4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8f0:	e043      	b.n	800b97a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	ee07 3a90 	vmov	s15, r3
 800b8f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ba38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b904:	4b47      	ldr	r3, [pc, #284]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b90c:	ee07 3a90 	vmov	s15, r3
 800b910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b914:	ed97 6a03 	vldr	s12, [r7, #12]
 800b918:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b91c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b920:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b924:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b92c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b930:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b934:	e021      	b.n	800b97a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	ee07 3a90 	vmov	s15, r3
 800b93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b940:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ba30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b948:	4b36      	ldr	r3, [pc, #216]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b94a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b94c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b950:	ee07 3a90 	vmov	s15, r3
 800b954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b958:	ed97 6a03 	vldr	s12, [r7, #12]
 800b95c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b968:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b96c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b970:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b974:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b978:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b97a:	4b2a      	ldr	r3, [pc, #168]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b97c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b97e:	0a5b      	lsrs	r3, r3, #9
 800b980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b984:	ee07 3a90 	vmov	s15, r3
 800b988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b98c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b990:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b994:	edd7 6a07 	vldr	s13, [r7, #28]
 800b998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b99c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a0:	ee17 2a90 	vmov	r2, s15
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b9a8:	4b1e      	ldr	r3, [pc, #120]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ac:	0c1b      	lsrs	r3, r3, #16
 800b9ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9b2:	ee07 3a90 	vmov	s15, r3
 800b9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9ce:	ee17 2a90 	vmov	r2, s15
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b9d6:	4b13      	ldr	r3, [pc, #76]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9da:	0e1b      	lsrs	r3, r3, #24
 800b9dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9e0:	ee07 3a90 	vmov	s15, r3
 800b9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9fc:	ee17 2a90 	vmov	r2, s15
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ba04:	e008      	b.n	800ba18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	609a      	str	r2, [r3, #8]
}
 800ba18:	bf00      	nop
 800ba1a:	3724      	adds	r7, #36	@ 0x24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	58024400 	.word	0x58024400
 800ba28:	03d09000 	.word	0x03d09000
 800ba2c:	46000000 	.word	0x46000000
 800ba30:	4c742400 	.word	0x4c742400
 800ba34:	4a742400 	.word	0x4a742400
 800ba38:	4bbebc20 	.word	0x4bbebc20

0800ba3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba4a:	4b53      	ldr	r3, [pc, #332]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800ba4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba4e:	f003 0303 	and.w	r3, r3, #3
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d101      	bne.n	800ba5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e099      	b.n	800bb8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ba5a:	4b4f      	ldr	r3, [pc, #316]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a4e      	ldr	r2, [pc, #312]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800ba60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ba64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba66:	f7f6 feb3 	bl	80027d0 <HAL_GetTick>
 800ba6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba6c:	e008      	b.n	800ba80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba6e:	f7f6 feaf 	bl	80027d0 <HAL_GetTick>
 800ba72:	4602      	mov	r2, r0
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d901      	bls.n	800ba80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e086      	b.n	800bb8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba80:	4b45      	ldr	r3, [pc, #276]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1f0      	bne.n	800ba6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ba8c:	4b42      	ldr	r3, [pc, #264]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800ba8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba90:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	031b      	lsls	r3, r3, #12
 800ba9a:	493f      	ldr	r1, [pc, #252]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	628b      	str	r3, [r1, #40]	@ 0x28
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	3b01      	subs	r3, #1
 800baa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	3b01      	subs	r3, #1
 800bab0:	025b      	lsls	r3, r3, #9
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	431a      	orrs	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	3b01      	subs	r3, #1
 800babc:	041b      	lsls	r3, r3, #16
 800babe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bac2:	431a      	orrs	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	3b01      	subs	r3, #1
 800baca:	061b      	lsls	r3, r3, #24
 800bacc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bad0:	4931      	ldr	r1, [pc, #196]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bad2:	4313      	orrs	r3, r2
 800bad4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bad6:	4b30      	ldr	r3, [pc, #192]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bada:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	492d      	ldr	r1, [pc, #180]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bae4:	4313      	orrs	r3, r2
 800bae6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bae8:	4b2b      	ldr	r3, [pc, #172]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800baea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baec:	f023 0220 	bic.w	r2, r3, #32
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	4928      	ldr	r1, [pc, #160]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800baf6:	4313      	orrs	r3, r2
 800baf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bafa:	4b27      	ldr	r3, [pc, #156]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bafc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bafe:	4a26      	ldr	r2, [pc, #152]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb00:	f023 0310 	bic.w	r3, r3, #16
 800bb04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bb06:	4b24      	ldr	r3, [pc, #144]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb0a:	4b24      	ldr	r3, [pc, #144]	@ (800bb9c <RCCEx_PLL2_Config+0x160>)
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	69d2      	ldr	r2, [r2, #28]
 800bb12:	00d2      	lsls	r2, r2, #3
 800bb14:	4920      	ldr	r1, [pc, #128]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb16:	4313      	orrs	r3, r2
 800bb18:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bb1a:	4b1f      	ldr	r3, [pc, #124]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1e:	4a1e      	ldr	r2, [pc, #120]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb20:	f043 0310 	orr.w	r3, r3, #16
 800bb24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d106      	bne.n	800bb3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bb2c:	4b1a      	ldr	r3, [pc, #104]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb30:	4a19      	ldr	r2, [pc, #100]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bb36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb38:	e00f      	b.n	800bb5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d106      	bne.n	800bb4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bb40:	4b15      	ldr	r3, [pc, #84]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb44:	4a14      	ldr	r2, [pc, #80]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb4c:	e005      	b.n	800bb5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bb4e:	4b12      	ldr	r3, [pc, #72]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb52:	4a11      	ldr	r2, [pc, #68]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bb58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bb5a:	4b0f      	ldr	r3, [pc, #60]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4a0e      	ldr	r2, [pc, #56]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bb64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb66:	f7f6 fe33 	bl	80027d0 <HAL_GetTick>
 800bb6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb6c:	e008      	b.n	800bb80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb6e:	f7f6 fe2f 	bl	80027d0 <HAL_GetTick>
 800bb72:	4602      	mov	r2, r0
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d901      	bls.n	800bb80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e006      	b.n	800bb8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb80:	4b05      	ldr	r3, [pc, #20]	@ (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d0f0      	beq.n	800bb6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	58024400 	.word	0x58024400
 800bb9c:	ffff0007 	.word	0xffff0007

0800bba0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bbae:	4b53      	ldr	r3, [pc, #332]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bbb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb2:	f003 0303 	and.w	r3, r3, #3
 800bbb6:	2b03      	cmp	r3, #3
 800bbb8:	d101      	bne.n	800bbbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e099      	b.n	800bcf2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bbbe:	4b4f      	ldr	r3, [pc, #316]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a4e      	ldr	r2, [pc, #312]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bbc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbca:	f7f6 fe01 	bl	80027d0 <HAL_GetTick>
 800bbce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbd0:	e008      	b.n	800bbe4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bbd2:	f7f6 fdfd 	bl	80027d0 <HAL_GetTick>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d901      	bls.n	800bbe4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e086      	b.n	800bcf2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbe4:	4b45      	ldr	r3, [pc, #276]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1f0      	bne.n	800bbd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bbf0:	4b42      	ldr	r3, [pc, #264]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bbf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	051b      	lsls	r3, r3, #20
 800bbfe:	493f      	ldr	r1, [pc, #252]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc00:	4313      	orrs	r3, r2
 800bc02:	628b      	str	r3, [r1, #40]	@ 0x28
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	3b01      	subs	r3, #1
 800bc14:	025b      	lsls	r3, r3, #9
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	431a      	orrs	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	041b      	lsls	r3, r3, #16
 800bc22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bc26:	431a      	orrs	r2, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	061b      	lsls	r3, r3, #24
 800bc30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bc34:	4931      	ldr	r1, [pc, #196]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bc3a:	4b30      	ldr	r3, [pc, #192]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	695b      	ldr	r3, [r3, #20]
 800bc46:	492d      	ldr	r1, [pc, #180]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bc4c:	4b2b      	ldr	r3, [pc, #172]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc50:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	699b      	ldr	r3, [r3, #24]
 800bc58:	4928      	ldr	r1, [pc, #160]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bc5e:	4b27      	ldr	r3, [pc, #156]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc62:	4a26      	ldr	r2, [pc, #152]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bc6a:	4b24      	ldr	r3, [pc, #144]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc6e:	4b24      	ldr	r3, [pc, #144]	@ (800bd00 <RCCEx_PLL3_Config+0x160>)
 800bc70:	4013      	ands	r3, r2
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	69d2      	ldr	r2, [r2, #28]
 800bc76:	00d2      	lsls	r2, r2, #3
 800bc78:	4920      	ldr	r1, [pc, #128]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bc7e:	4b1f      	ldr	r3, [pc, #124]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc82:	4a1e      	ldr	r2, [pc, #120]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d106      	bne.n	800bc9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bc90:	4b1a      	ldr	r3, [pc, #104]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc94:	4a19      	ldr	r2, [pc, #100]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bc9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc9c:	e00f      	b.n	800bcbe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d106      	bne.n	800bcb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bca4:	4b15      	ldr	r3, [pc, #84]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca8:	4a14      	ldr	r2, [pc, #80]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bcaa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bcae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bcb0:	e005      	b.n	800bcbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bcb2:	4b12      	ldr	r3, [pc, #72]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bcb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb6:	4a11      	ldr	r2, [pc, #68]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bcb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bcbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bcbe:	4b0f      	ldr	r3, [pc, #60]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a0e      	ldr	r2, [pc, #56]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bcc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bcc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcca:	f7f6 fd81 	bl	80027d0 <HAL_GetTick>
 800bcce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bcd0:	e008      	b.n	800bce4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bcd2:	f7f6 fd7d 	bl	80027d0 <HAL_GetTick>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d901      	bls.n	800bce4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bce0:	2303      	movs	r3, #3
 800bce2:	e006      	b.n	800bcf2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bce4:	4b05      	ldr	r3, [pc, #20]	@ (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d0f0      	beq.n	800bcd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	58024400 	.word	0x58024400
 800bd00:	ffff0007 	.word	0xffff0007

0800bd04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e049      	b.n	800bdaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d106      	bne.n	800bd30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f7f6 fba8 	bl	8002480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2202      	movs	r2, #2
 800bd34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	3304      	adds	r3, #4
 800bd40:	4619      	mov	r1, r3
 800bd42:	4610      	mov	r0, r2
 800bd44:	f000 f9c6 	bl	800c0d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d001      	beq.n	800bdcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e04c      	b.n	800be66 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2202      	movs	r2, #2
 800bdd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a26      	ldr	r2, [pc, #152]	@ (800be74 <HAL_TIM_Base_Start+0xc0>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d022      	beq.n	800be24 <HAL_TIM_Base_Start+0x70>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bde6:	d01d      	beq.n	800be24 <HAL_TIM_Base_Start+0x70>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a22      	ldr	r2, [pc, #136]	@ (800be78 <HAL_TIM_Base_Start+0xc4>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d018      	beq.n	800be24 <HAL_TIM_Base_Start+0x70>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a21      	ldr	r2, [pc, #132]	@ (800be7c <HAL_TIM_Base_Start+0xc8>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d013      	beq.n	800be24 <HAL_TIM_Base_Start+0x70>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a1f      	ldr	r2, [pc, #124]	@ (800be80 <HAL_TIM_Base_Start+0xcc>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d00e      	beq.n	800be24 <HAL_TIM_Base_Start+0x70>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a1e      	ldr	r2, [pc, #120]	@ (800be84 <HAL_TIM_Base_Start+0xd0>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d009      	beq.n	800be24 <HAL_TIM_Base_Start+0x70>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a1c      	ldr	r2, [pc, #112]	@ (800be88 <HAL_TIM_Base_Start+0xd4>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d004      	beq.n	800be24 <HAL_TIM_Base_Start+0x70>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a1b      	ldr	r2, [pc, #108]	@ (800be8c <HAL_TIM_Base_Start+0xd8>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d115      	bne.n	800be50 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	689a      	ldr	r2, [r3, #8]
 800be2a:	4b19      	ldr	r3, [pc, #100]	@ (800be90 <HAL_TIM_Base_Start+0xdc>)
 800be2c:	4013      	ands	r3, r2
 800be2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b06      	cmp	r3, #6
 800be34:	d015      	beq.n	800be62 <HAL_TIM_Base_Start+0xae>
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be3c:	d011      	beq.n	800be62 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f042 0201 	orr.w	r2, r2, #1
 800be4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be4e:	e008      	b.n	800be62 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f042 0201 	orr.w	r2, r2, #1
 800be5e:	601a      	str	r2, [r3, #0]
 800be60:	e000      	b.n	800be64 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	40010000 	.word	0x40010000
 800be78:	40000400 	.word	0x40000400
 800be7c:	40000800 	.word	0x40000800
 800be80:	40000c00 	.word	0x40000c00
 800be84:	40010400 	.word	0x40010400
 800be88:	40001800 	.word	0x40001800
 800be8c:	40014000 	.word	0x40014000
 800be90:	00010007 	.word	0x00010007

0800be94 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6a1a      	ldr	r2, [r3, #32]
 800bea2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bea6:	4013      	ands	r3, r2
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10f      	bne.n	800becc <HAL_TIM_Base_Stop+0x38>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6a1a      	ldr	r2, [r3, #32]
 800beb2:	f240 4344 	movw	r3, #1092	@ 0x444
 800beb6:	4013      	ands	r3, r2
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d107      	bne.n	800becc <HAL_TIM_Base_Stop+0x38>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f022 0201 	bic.w	r2, r2, #1
 800beca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	370c      	adds	r7, #12
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
	...

0800bee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d101      	bne.n	800bf00 <HAL_TIM_ConfigClockSource+0x1c>
 800befc:	2302      	movs	r3, #2
 800befe:	e0dc      	b.n	800c0ba <HAL_TIM_ConfigClockSource+0x1d6>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	4b6a      	ldr	r3, [pc, #424]	@ (800c0c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a64      	ldr	r2, [pc, #400]	@ (800c0c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	f000 80a9 	beq.w	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf3c:	4a62      	ldr	r2, [pc, #392]	@ (800c0c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	f200 80ae 	bhi.w	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf44:	4a61      	ldr	r2, [pc, #388]	@ (800c0cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	f000 80a1 	beq.w	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf4c:	4a5f      	ldr	r2, [pc, #380]	@ (800c0cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	f200 80a6 	bhi.w	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf54:	4a5e      	ldr	r2, [pc, #376]	@ (800c0d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	f000 8099 	beq.w	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf5c:	4a5c      	ldr	r2, [pc, #368]	@ (800c0d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	f200 809e 	bhi.w	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bf68:	f000 8091 	beq.w	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bf70:	f200 8096 	bhi.w	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf78:	f000 8089 	beq.w	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf80:	f200 808e 	bhi.w	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf88:	d03e      	beq.n	800c008 <HAL_TIM_ConfigClockSource+0x124>
 800bf8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf8e:	f200 8087 	bhi.w	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf96:	f000 8086 	beq.w	800c0a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800bf9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf9e:	d87f      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfa0:	2b70      	cmp	r3, #112	@ 0x70
 800bfa2:	d01a      	beq.n	800bfda <HAL_TIM_ConfigClockSource+0xf6>
 800bfa4:	2b70      	cmp	r3, #112	@ 0x70
 800bfa6:	d87b      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfa8:	2b60      	cmp	r3, #96	@ 0x60
 800bfaa:	d050      	beq.n	800c04e <HAL_TIM_ConfigClockSource+0x16a>
 800bfac:	2b60      	cmp	r3, #96	@ 0x60
 800bfae:	d877      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfb0:	2b50      	cmp	r3, #80	@ 0x50
 800bfb2:	d03c      	beq.n	800c02e <HAL_TIM_ConfigClockSource+0x14a>
 800bfb4:	2b50      	cmp	r3, #80	@ 0x50
 800bfb6:	d873      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfb8:	2b40      	cmp	r3, #64	@ 0x40
 800bfba:	d058      	beq.n	800c06e <HAL_TIM_ConfigClockSource+0x18a>
 800bfbc:	2b40      	cmp	r3, #64	@ 0x40
 800bfbe:	d86f      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfc0:	2b30      	cmp	r3, #48	@ 0x30
 800bfc2:	d064      	beq.n	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfc4:	2b30      	cmp	r3, #48	@ 0x30
 800bfc6:	d86b      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfc8:	2b20      	cmp	r3, #32
 800bfca:	d060      	beq.n	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfcc:	2b20      	cmp	r3, #32
 800bfce:	d867      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d05c      	beq.n	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfd4:	2b10      	cmp	r3, #16
 800bfd6:	d05a      	beq.n	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfd8:	e062      	b.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bfea:	f000 f98b 	bl	800c304 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	609a      	str	r2, [r3, #8]
      break;
 800c006:	e04f      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c018:	f000 f974 	bl	800c304 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	689a      	ldr	r2, [r3, #8]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c02a:	609a      	str	r2, [r3, #8]
      break;
 800c02c:	e03c      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c03a:	461a      	mov	r2, r3
 800c03c:	f000 f8e4 	bl	800c208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2150      	movs	r1, #80	@ 0x50
 800c046:	4618      	mov	r0, r3
 800c048:	f000 f93e 	bl	800c2c8 <TIM_ITRx_SetConfig>
      break;
 800c04c:	e02c      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c05a:	461a      	mov	r2, r3
 800c05c:	f000 f903 	bl	800c266 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2160      	movs	r1, #96	@ 0x60
 800c066:	4618      	mov	r0, r3
 800c068:	f000 f92e 	bl	800c2c8 <TIM_ITRx_SetConfig>
      break;
 800c06c:	e01c      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c07a:	461a      	mov	r2, r3
 800c07c:	f000 f8c4 	bl	800c208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2140      	movs	r1, #64	@ 0x40
 800c086:	4618      	mov	r0, r3
 800c088:	f000 f91e 	bl	800c2c8 <TIM_ITRx_SetConfig>
      break;
 800c08c:	e00c      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4619      	mov	r1, r3
 800c098:	4610      	mov	r0, r2
 800c09a:	f000 f915 	bl	800c2c8 <TIM_ITRx_SetConfig>
      break;
 800c09e:	e003      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c0a4:	e000      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c0a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	ffceff88 	.word	0xffceff88
 800c0c8:	00100040 	.word	0x00100040
 800c0cc:	00100030 	.word	0x00100030
 800c0d0:	00100020 	.word	0x00100020

0800c0d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a40      	ldr	r2, [pc, #256]	@ (800c1e8 <TIM_Base_SetConfig+0x114>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d013      	beq.n	800c114 <TIM_Base_SetConfig+0x40>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0f2:	d00f      	beq.n	800c114 <TIM_Base_SetConfig+0x40>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a3d      	ldr	r2, [pc, #244]	@ (800c1ec <TIM_Base_SetConfig+0x118>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d00b      	beq.n	800c114 <TIM_Base_SetConfig+0x40>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a3c      	ldr	r2, [pc, #240]	@ (800c1f0 <TIM_Base_SetConfig+0x11c>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d007      	beq.n	800c114 <TIM_Base_SetConfig+0x40>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	4a3b      	ldr	r2, [pc, #236]	@ (800c1f4 <TIM_Base_SetConfig+0x120>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d003      	beq.n	800c114 <TIM_Base_SetConfig+0x40>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4a3a      	ldr	r2, [pc, #232]	@ (800c1f8 <TIM_Base_SetConfig+0x124>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d108      	bne.n	800c126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c11a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	4313      	orrs	r3, r2
 800c124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a2f      	ldr	r2, [pc, #188]	@ (800c1e8 <TIM_Base_SetConfig+0x114>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d01f      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c134:	d01b      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a2c      	ldr	r2, [pc, #176]	@ (800c1ec <TIM_Base_SetConfig+0x118>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d017      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a2b      	ldr	r2, [pc, #172]	@ (800c1f0 <TIM_Base_SetConfig+0x11c>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d013      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4a2a      	ldr	r2, [pc, #168]	@ (800c1f4 <TIM_Base_SetConfig+0x120>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d00f      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4a29      	ldr	r2, [pc, #164]	@ (800c1f8 <TIM_Base_SetConfig+0x124>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d00b      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a28      	ldr	r2, [pc, #160]	@ (800c1fc <TIM_Base_SetConfig+0x128>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d007      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a27      	ldr	r2, [pc, #156]	@ (800c200 <TIM_Base_SetConfig+0x12c>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d003      	beq.n	800c16e <TIM_Base_SetConfig+0x9a>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a26      	ldr	r2, [pc, #152]	@ (800c204 <TIM_Base_SetConfig+0x130>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d108      	bne.n	800c180 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	695b      	ldr	r3, [r3, #20]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	689a      	ldr	r2, [r3, #8]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4a10      	ldr	r2, [pc, #64]	@ (800c1e8 <TIM_Base_SetConfig+0x114>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d00f      	beq.n	800c1cc <TIM_Base_SetConfig+0xf8>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a12      	ldr	r2, [pc, #72]	@ (800c1f8 <TIM_Base_SetConfig+0x124>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d00b      	beq.n	800c1cc <TIM_Base_SetConfig+0xf8>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4a11      	ldr	r2, [pc, #68]	@ (800c1fc <TIM_Base_SetConfig+0x128>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d007      	beq.n	800c1cc <TIM_Base_SetConfig+0xf8>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a10      	ldr	r2, [pc, #64]	@ (800c200 <TIM_Base_SetConfig+0x12c>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d003      	beq.n	800c1cc <TIM_Base_SetConfig+0xf8>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a0f      	ldr	r2, [pc, #60]	@ (800c204 <TIM_Base_SetConfig+0x130>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d103      	bne.n	800c1d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	691a      	ldr	r2, [r3, #16]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	615a      	str	r2, [r3, #20]
}
 800c1da:	bf00      	nop
 800c1dc:	3714      	adds	r7, #20
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	40010000 	.word	0x40010000
 800c1ec:	40000400 	.word	0x40000400
 800c1f0:	40000800 	.word	0x40000800
 800c1f4:	40000c00 	.word	0x40000c00
 800c1f8:	40010400 	.word	0x40010400
 800c1fc:	40014000 	.word	0x40014000
 800c200:	40014400 	.word	0x40014400
 800c204:	40014800 	.word	0x40014800

0800c208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c208:	b480      	push	{r7}
 800c20a:	b087      	sub	sp, #28
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6a1b      	ldr	r3, [r3, #32]
 800c218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6a1b      	ldr	r3, [r3, #32]
 800c21e:	f023 0201 	bic.w	r2, r3, #1
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	011b      	lsls	r3, r3, #4
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	4313      	orrs	r3, r2
 800c23c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f023 030a 	bic.w	r3, r3, #10
 800c244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	693a      	ldr	r2, [r7, #16]
 800c252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	621a      	str	r2, [r3, #32]
}
 800c25a:	bf00      	nop
 800c25c:	371c      	adds	r7, #28
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr

0800c266 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c266:	b480      	push	{r7}
 800c268:	b087      	sub	sp, #28
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	60f8      	str	r0, [r7, #12]
 800c26e:	60b9      	str	r1, [r7, #8]
 800c270:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6a1b      	ldr	r3, [r3, #32]
 800c276:	f023 0210 	bic.w	r2, r3, #16
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	699b      	ldr	r3, [r3, #24]
 800c282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6a1b      	ldr	r3, [r3, #32]
 800c288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	031b      	lsls	r3, r3, #12
 800c296:	697a      	ldr	r2, [r7, #20]
 800c298:	4313      	orrs	r3, r2
 800c29a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c2a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	011b      	lsls	r3, r3, #4
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	621a      	str	r2, [r3, #32]
}
 800c2ba:	bf00      	nop
 800c2bc:	371c      	adds	r7, #28
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
	...

0800c2c8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	4b09      	ldr	r3, [pc, #36]	@ (800c300 <TIM_ITRx_SetConfig+0x38>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c2e0:	683a      	ldr	r2, [r7, #0]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	f043 0307 	orr.w	r3, r3, #7
 800c2ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	68fa      	ldr	r2, [r7, #12]
 800c2f0:	609a      	str	r2, [r3, #8]
}
 800c2f2:	bf00      	nop
 800c2f4:	3714      	adds	r7, #20
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	ffcfff8f 	.word	0xffcfff8f

0800c304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c304:	b480      	push	{r7}
 800c306:	b087      	sub	sp, #28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
 800c310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c31e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	021a      	lsls	r2, r3, #8
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	431a      	orrs	r2, r3
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	4313      	orrs	r3, r2
 800c330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	609a      	str	r2, [r3, #8]
}
 800c338:	bf00      	nop
 800c33a:	371c      	adds	r7, #28
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c354:	2b01      	cmp	r3, #1
 800c356:	d101      	bne.n	800c35c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c358:	2302      	movs	r3, #2
 800c35a:	e06d      	b.n	800c438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2202      	movs	r2, #2
 800c368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a30      	ldr	r2, [pc, #192]	@ (800c444 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d004      	beq.n	800c390 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a2f      	ldr	r2, [pc, #188]	@ (800c448 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d108      	bne.n	800c3a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c396:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a20      	ldr	r2, [pc, #128]	@ (800c444 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d022      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3ce:	d01d      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a1d      	ldr	r2, [pc, #116]	@ (800c44c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d018      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a1c      	ldr	r2, [pc, #112]	@ (800c450 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d013      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a1a      	ldr	r2, [pc, #104]	@ (800c454 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d00e      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a15      	ldr	r2, [pc, #84]	@ (800c448 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d009      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a16      	ldr	r2, [pc, #88]	@ (800c458 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d004      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a15      	ldr	r2, [pc, #84]	@ (800c45c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d10c      	bne.n	800c426 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c412:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c436:	2300      	movs	r3, #0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3714      	adds	r7, #20
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr
 800c444:	40010000 	.word	0x40010000
 800c448:	40010400 	.word	0x40010400
 800c44c:	40000400 	.word	0x40000400
 800c450:	40000800 	.word	0x40000800
 800c454:	40000c00 	.word	0x40000c00
 800c458:	40001800 	.word	0x40001800
 800c45c:	40014000 	.word	0x40014000

0800c460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d101      	bne.n	800c472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	e042      	b.n	800c4f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d106      	bne.n	800c48a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7f6 f881 	bl	800258c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2224      	movs	r2, #36	@ 0x24
 800c48e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f022 0201 	bic.w	r2, r2, #1
 800c4a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fc94 	bl	800cdd0 <UART_SetConfig>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d101      	bne.n	800c4b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e022      	b.n	800c4f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d002      	beq.n	800c4c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f001 f9f0 	bl	800d8a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	685a      	ldr	r2, [r3, #4]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c4ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	689a      	ldr	r2, [r3, #8]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c4de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f042 0201 	orr.w	r2, r2, #1
 800c4ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f001 fa77 	bl	800d9e4 <UART_CheckIdleState>
 800c4f6:	4603      	mov	r3, r0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b08a      	sub	sp, #40	@ 0x28
 800c504:	af02      	add	r7, sp, #8
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	603b      	str	r3, [r7, #0]
 800c50c:	4613      	mov	r3, r2
 800c50e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c516:	2b20      	cmp	r3, #32
 800c518:	d17b      	bne.n	800c612 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d002      	beq.n	800c526 <HAL_UART_Transmit+0x26>
 800c520:	88fb      	ldrh	r3, [r7, #6]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d101      	bne.n	800c52a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c526:	2301      	movs	r3, #1
 800c528:	e074      	b.n	800c614 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2200      	movs	r2, #0
 800c52e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2221      	movs	r2, #33	@ 0x21
 800c536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c53a:	f7f6 f949 	bl	80027d0 <HAL_GetTick>
 800c53e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	88fa      	ldrh	r2, [r7, #6]
 800c544:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	88fa      	ldrh	r2, [r7, #6]
 800c54c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c558:	d108      	bne.n	800c56c <HAL_UART_Transmit+0x6c>
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	691b      	ldr	r3, [r3, #16]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d104      	bne.n	800c56c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c562:	2300      	movs	r3, #0
 800c564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	61bb      	str	r3, [r7, #24]
 800c56a:	e003      	b.n	800c574 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c570:	2300      	movs	r3, #0
 800c572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c574:	e030      	b.n	800c5d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	2200      	movs	r2, #0
 800c57e:	2180      	movs	r1, #128	@ 0x80
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f001 fad9 	bl	800db38 <UART_WaitOnFlagUntilTimeout>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d005      	beq.n	800c598 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2220      	movs	r2, #32
 800c590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c594:	2303      	movs	r3, #3
 800c596:	e03d      	b.n	800c614 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10b      	bne.n	800c5b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	881b      	ldrh	r3, [r3, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	3302      	adds	r3, #2
 800c5b2:	61bb      	str	r3, [r7, #24]
 800c5b4:	e007      	b.n	800c5c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	781a      	ldrb	r2, [r3, #0]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1c8      	bne.n	800c576 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	2140      	movs	r1, #64	@ 0x40
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	f001 faa2 	bl	800db38 <UART_WaitOnFlagUntilTimeout>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d005      	beq.n	800c606 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2220      	movs	r2, #32
 800c5fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c602:	2303      	movs	r3, #3
 800c604:	e006      	b.n	800c614 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2220      	movs	r2, #32
 800c60a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c60e:	2300      	movs	r3, #0
 800c610:	e000      	b.n	800c614 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c612:	2302      	movs	r3, #2
  }
}
 800c614:	4618      	mov	r0, r3
 800c616:	3720      	adds	r7, #32
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b0ba      	sub	sp, #232	@ 0xe8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	69db      	ldr	r3, [r3, #28]
 800c62a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c642:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c646:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c64a:	4013      	ands	r3, r2
 800c64c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c654:	2b00      	cmp	r3, #0
 800c656:	d11b      	bne.n	800c690 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c65c:	f003 0320 	and.w	r3, r3, #32
 800c660:	2b00      	cmp	r3, #0
 800c662:	d015      	beq.n	800c690 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c668:	f003 0320 	and.w	r3, r3, #32
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d105      	bne.n	800c67c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d009      	beq.n	800c690 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c680:	2b00      	cmp	r3, #0
 800c682:	f000 8377 	beq.w	800cd74 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	4798      	blx	r3
      }
      return;
 800c68e:	e371      	b.n	800cd74 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c694:	2b00      	cmp	r3, #0
 800c696:	f000 8123 	beq.w	800c8e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c69a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c69e:	4b8d      	ldr	r3, [pc, #564]	@ (800c8d4 <HAL_UART_IRQHandler+0x2b8>)
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d106      	bne.n	800c6b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c6a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c6aa:	4b8b      	ldr	r3, [pc, #556]	@ (800c8d8 <HAL_UART_IRQHandler+0x2bc>)
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 8116 	beq.w	800c8e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6b8:	f003 0301 	and.w	r3, r3, #1
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d011      	beq.n	800c6e4 <HAL_UART_IRQHandler+0xc8>
 800c6c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00b      	beq.n	800c6e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6da:	f043 0201 	orr.w	r2, r3, #1
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6e8:	f003 0302 	and.w	r3, r3, #2
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d011      	beq.n	800c714 <HAL_UART_IRQHandler+0xf8>
 800c6f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6f4:	f003 0301 	and.w	r3, r3, #1
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00b      	beq.n	800c714 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2202      	movs	r2, #2
 800c702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c70a:	f043 0204 	orr.w	r2, r3, #4
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c718:	f003 0304 	and.w	r3, r3, #4
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d011      	beq.n	800c744 <HAL_UART_IRQHandler+0x128>
 800c720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c724:	f003 0301 	and.w	r3, r3, #1
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00b      	beq.n	800c744 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2204      	movs	r2, #4
 800c732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c73a:	f043 0202 	orr.w	r2, r3, #2
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c748:	f003 0308 	and.w	r3, r3, #8
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d017      	beq.n	800c780 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c754:	f003 0320 	and.w	r3, r3, #32
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d105      	bne.n	800c768 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c75c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c760:	4b5c      	ldr	r3, [pc, #368]	@ (800c8d4 <HAL_UART_IRQHandler+0x2b8>)
 800c762:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c764:	2b00      	cmp	r3, #0
 800c766:	d00b      	beq.n	800c780 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2208      	movs	r2, #8
 800c76e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c776:	f043 0208 	orr.w	r2, r3, #8
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d012      	beq.n	800c7b2 <HAL_UART_IRQHandler+0x196>
 800c78c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c790:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c794:	2b00      	cmp	r3, #0
 800c796:	d00c      	beq.n	800c7b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c7a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7a8:	f043 0220 	orr.w	r2, r3, #32
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	f000 82dd 	beq.w	800cd78 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7c2:	f003 0320 	and.w	r3, r3, #32
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d013      	beq.n	800c7f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c7ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7ce:	f003 0320 	and.w	r3, r3, #32
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d105      	bne.n	800c7e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c7d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d007      	beq.n	800c7f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d003      	beq.n	800c7f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c806:	2b40      	cmp	r3, #64	@ 0x40
 800c808:	d005      	beq.n	800c816 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c80a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c80e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c812:	2b00      	cmp	r3, #0
 800c814:	d054      	beq.n	800c8c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f001 f9f6 	bl	800dc08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c826:	2b40      	cmp	r3, #64	@ 0x40
 800c828:	d146      	bne.n	800c8b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	3308      	adds	r3, #8
 800c830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c834:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c838:	e853 3f00 	ldrex	r3, [r3]
 800c83c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c848:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	3308      	adds	r3, #8
 800c852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c856:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c85a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c866:	e841 2300 	strex	r3, r2, [r1]
 800c86a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c86e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1d9      	bne.n	800c82a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d017      	beq.n	800c8b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c886:	4a15      	ldr	r2, [pc, #84]	@ (800c8dc <HAL_UART_IRQHandler+0x2c0>)
 800c888:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c890:	4618      	mov	r0, r3
 800c892:	f7f9 fbc3 	bl	800601c <HAL_DMA_Abort_IT>
 800c896:	4603      	mov	r3, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d019      	beq.n	800c8d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8ae:	e00f      	b.n	800c8d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 fa77 	bl	800cda4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8b6:	e00b      	b.n	800c8d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fa73 	bl	800cda4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8be:	e007      	b.n	800c8d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 fa6f 	bl	800cda4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c8ce:	e253      	b.n	800cd78 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8d0:	bf00      	nop
    return;
 800c8d2:	e251      	b.n	800cd78 <HAL_UART_IRQHandler+0x75c>
 800c8d4:	10000001 	.word	0x10000001
 800c8d8:	04000120 	.word	0x04000120
 800c8dc:	0800dcd5 	.word	0x0800dcd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	f040 81e7 	bne.w	800ccb8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c8ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8ee:	f003 0310 	and.w	r3, r3, #16
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	f000 81e0 	beq.w	800ccb8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c8f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8fc:	f003 0310 	and.w	r3, r3, #16
 800c900:	2b00      	cmp	r3, #0
 800c902:	f000 81d9 	beq.w	800ccb8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2210      	movs	r2, #16
 800c90c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c918:	2b40      	cmp	r3, #64	@ 0x40
 800c91a:	f040 8151 	bne.w	800cbc0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a96      	ldr	r2, [pc, #600]	@ (800cb80 <HAL_UART_IRQHandler+0x564>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d068      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a93      	ldr	r2, [pc, #588]	@ (800cb84 <HAL_UART_IRQHandler+0x568>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d061      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a91      	ldr	r2, [pc, #580]	@ (800cb88 <HAL_UART_IRQHandler+0x56c>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d05a      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a8e      	ldr	r2, [pc, #568]	@ (800cb8c <HAL_UART_IRQHandler+0x570>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d053      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a8c      	ldr	r2, [pc, #560]	@ (800cb90 <HAL_UART_IRQHandler+0x574>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d04c      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a89      	ldr	r2, [pc, #548]	@ (800cb94 <HAL_UART_IRQHandler+0x578>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d045      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a87      	ldr	r2, [pc, #540]	@ (800cb98 <HAL_UART_IRQHandler+0x57c>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d03e      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a84      	ldr	r2, [pc, #528]	@ (800cb9c <HAL_UART_IRQHandler+0x580>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d037      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a82      	ldr	r2, [pc, #520]	@ (800cba0 <HAL_UART_IRQHandler+0x584>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d030      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a7f      	ldr	r2, [pc, #508]	@ (800cba4 <HAL_UART_IRQHandler+0x588>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d029      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a7d      	ldr	r2, [pc, #500]	@ (800cba8 <HAL_UART_IRQHandler+0x58c>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d022      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a7a      	ldr	r2, [pc, #488]	@ (800cbac <HAL_UART_IRQHandler+0x590>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d01b      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a78      	ldr	r2, [pc, #480]	@ (800cbb0 <HAL_UART_IRQHandler+0x594>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d014      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a75      	ldr	r2, [pc, #468]	@ (800cbb4 <HAL_UART_IRQHandler+0x598>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d00d      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a73      	ldr	r2, [pc, #460]	@ (800cbb8 <HAL_UART_IRQHandler+0x59c>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d006      	beq.n	800c9fe <HAL_UART_IRQHandler+0x3e2>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a70      	ldr	r2, [pc, #448]	@ (800cbbc <HAL_UART_IRQHandler+0x5a0>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d106      	bne.n	800ca0c <HAL_UART_IRQHandler+0x3f0>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	e005      	b.n	800ca18 <HAL_UART_IRQHandler+0x3fc>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ca1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 81ab 	beq.w	800cd7c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ca2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ca30:	429a      	cmp	r2, r3
 800ca32:	f080 81a3 	bcs.w	800cd7c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ca3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca46:	69db      	ldr	r3, [r3, #28]
 800ca48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca4c:	f000 8087 	beq.w	800cb5e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ca5c:	e853 3f00 	ldrex	r3, [r3]
 800ca60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ca64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ca68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	461a      	mov	r2, r3
 800ca76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ca7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ca7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ca86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ca8a:	e841 2300 	strex	r3, r2, [r1]
 800ca8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ca92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1da      	bne.n	800ca50 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	3308      	adds	r3, #8
 800caa0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800caa4:	e853 3f00 	ldrex	r3, [r3]
 800caa8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800caaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800caac:	f023 0301 	bic.w	r3, r3, #1
 800cab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3308      	adds	r3, #8
 800caba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cabe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cac2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800caca:	e841 2300 	strex	r3, r2, [r1]
 800cace:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cad0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d1e1      	bne.n	800ca9a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	3308      	adds	r3, #8
 800cadc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cae0:	e853 3f00 	ldrex	r3, [r3]
 800cae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800caec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	3308      	adds	r3, #8
 800caf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cafa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cafc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cb00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cb02:	e841 2300 	strex	r3, r2, [r1]
 800cb06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cb08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1e3      	bne.n	800cad6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2220      	movs	r2, #32
 800cb12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb24:	e853 3f00 	ldrex	r3, [r3]
 800cb28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cb2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb2c:	f023 0310 	bic.w	r3, r3, #16
 800cb30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	461a      	mov	r2, r3
 800cb3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb46:	e841 2300 	strex	r3, r2, [r1]
 800cb4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cb4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1e4      	bne.n	800cb1c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7f8 ff41 	bl	80059e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2202      	movs	r2, #2
 800cb62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 f91d 	bl	800cdb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cb7e:	e0fd      	b.n	800cd7c <HAL_UART_IRQHandler+0x760>
 800cb80:	40020010 	.word	0x40020010
 800cb84:	40020028 	.word	0x40020028
 800cb88:	40020040 	.word	0x40020040
 800cb8c:	40020058 	.word	0x40020058
 800cb90:	40020070 	.word	0x40020070
 800cb94:	40020088 	.word	0x40020088
 800cb98:	400200a0 	.word	0x400200a0
 800cb9c:	400200b8 	.word	0x400200b8
 800cba0:	40020410 	.word	0x40020410
 800cba4:	40020428 	.word	0x40020428
 800cba8:	40020440 	.word	0x40020440
 800cbac:	40020458 	.word	0x40020458
 800cbb0:	40020470 	.word	0x40020470
 800cbb4:	40020488 	.word	0x40020488
 800cbb8:	400204a0 	.word	0x400204a0
 800cbbc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f000 80cf 	beq.w	800cd80 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800cbe2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f000 80ca 	beq.w	800cd80 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf4:	e853 3f00 	ldrex	r3, [r3]
 800cbf8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cbfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	461a      	mov	r2, r3
 800cc0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cc0e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc10:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc16:	e841 2300 	strex	r3, r2, [r1]
 800cc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1e4      	bne.n	800cbec <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	3308      	adds	r3, #8
 800cc28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2c:	e853 3f00 	ldrex	r3, [r3]
 800cc30:	623b      	str	r3, [r7, #32]
   return(result);
 800cc32:	6a3a      	ldr	r2, [r7, #32]
 800cc34:	4b55      	ldr	r3, [pc, #340]	@ (800cd8c <HAL_UART_IRQHandler+0x770>)
 800cc36:	4013      	ands	r3, r2
 800cc38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3308      	adds	r3, #8
 800cc42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cc46:	633a      	str	r2, [r7, #48]	@ 0x30
 800cc48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc4e:	e841 2300 	strex	r3, r2, [r1]
 800cc52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d1e3      	bne.n	800cc22 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2220      	movs	r2, #32
 800cc5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	e853 3f00 	ldrex	r3, [r3]
 800cc7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f023 0310 	bic.w	r3, r3, #16
 800cc82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cc90:	61fb      	str	r3, [r7, #28]
 800cc92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc94:	69b9      	ldr	r1, [r7, #24]
 800cc96:	69fa      	ldr	r2, [r7, #28]
 800cc98:	e841 2300 	strex	r3, r2, [r1]
 800cc9c:	617b      	str	r3, [r7, #20]
   return(result);
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1e4      	bne.n	800cc6e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2202      	movs	r2, #2
 800cca8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ccaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ccae:	4619      	mov	r1, r3
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 f881 	bl	800cdb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ccb6:	e063      	b.n	800cd80 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ccb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d00e      	beq.n	800cce2 <HAL_UART_IRQHandler+0x6c6>
 800ccc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d008      	beq.n	800cce2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ccd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f001 f83b 	bl	800dd56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cce0:	e051      	b.n	800cd86 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d014      	beq.n	800cd18 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ccee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d105      	bne.n	800cd06 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ccfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d008      	beq.n	800cd18 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d03a      	beq.n	800cd84 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	4798      	blx	r3
    }
    return;
 800cd16:	e035      	b.n	800cd84 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cd18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d009      	beq.n	800cd38 <HAL_UART_IRQHandler+0x71c>
 800cd24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d003      	beq.n	800cd38 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 ffe5 	bl	800dd00 <UART_EndTransmit_IT>
    return;
 800cd36:	e026      	b.n	800cd86 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cd38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d009      	beq.n	800cd58 <HAL_UART_IRQHandler+0x73c>
 800cd44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd48:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d003      	beq.n	800cd58 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f001 f814 	bl	800dd7e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cd56:	e016      	b.n	800cd86 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cd58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d010      	beq.n	800cd86 <HAL_UART_IRQHandler+0x76a>
 800cd64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	da0c      	bge.n	800cd86 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 fffc 	bl	800dd6a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cd72:	e008      	b.n	800cd86 <HAL_UART_IRQHandler+0x76a>
      return;
 800cd74:	bf00      	nop
 800cd76:	e006      	b.n	800cd86 <HAL_UART_IRQHandler+0x76a>
    return;
 800cd78:	bf00      	nop
 800cd7a:	e004      	b.n	800cd86 <HAL_UART_IRQHandler+0x76a>
      return;
 800cd7c:	bf00      	nop
 800cd7e:	e002      	b.n	800cd86 <HAL_UART_IRQHandler+0x76a>
      return;
 800cd80:	bf00      	nop
 800cd82:	e000      	b.n	800cd86 <HAL_UART_IRQHandler+0x76a>
    return;
 800cd84:	bf00      	nop
  }
}
 800cd86:	37e8      	adds	r7, #232	@ 0xe8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	effffffe 	.word	0xeffffffe

0800cd90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b083      	sub	sp, #12
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cd98:	bf00      	nop
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cdac:	bf00      	nop
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cdc4:	bf00      	nop
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdd4:	b092      	sub	sp, #72	@ 0x48
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	689a      	ldr	r2, [r3, #8]
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	431a      	orrs	r2, r3
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	431a      	orrs	r2, r3
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	69db      	ldr	r3, [r3, #28]
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	4bbe      	ldr	r3, [pc, #760]	@ (800d0f8 <UART_SetConfig+0x328>)
 800ce00:	4013      	ands	r3, r2
 800ce02:	697a      	ldr	r2, [r7, #20]
 800ce04:	6812      	ldr	r2, [r2, #0]
 800ce06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ce08:	430b      	orrs	r3, r1
 800ce0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	68da      	ldr	r2, [r3, #12]
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	430a      	orrs	r2, r1
 800ce20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4ab3      	ldr	r2, [pc, #716]	@ (800d0fc <UART_SetConfig+0x32c>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d004      	beq.n	800ce3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	6a1b      	ldr	r3, [r3, #32]
 800ce36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	689a      	ldr	r2, [r3, #8]
 800ce42:	4baf      	ldr	r3, [pc, #700]	@ (800d100 <UART_SetConfig+0x330>)
 800ce44:	4013      	ands	r3, r2
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	6812      	ldr	r2, [r2, #0]
 800ce4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ce4c:	430b      	orrs	r3, r1
 800ce4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce56:	f023 010f 	bic.w	r1, r3, #15
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	430a      	orrs	r2, r1
 800ce64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4aa6      	ldr	r2, [pc, #664]	@ (800d104 <UART_SetConfig+0x334>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d177      	bne.n	800cf60 <UART_SetConfig+0x190>
 800ce70:	4ba5      	ldr	r3, [pc, #660]	@ (800d108 <UART_SetConfig+0x338>)
 800ce72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce78:	2b28      	cmp	r3, #40	@ 0x28
 800ce7a:	d86d      	bhi.n	800cf58 <UART_SetConfig+0x188>
 800ce7c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce84 <UART_SetConfig+0xb4>)
 800ce7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce82:	bf00      	nop
 800ce84:	0800cf29 	.word	0x0800cf29
 800ce88:	0800cf59 	.word	0x0800cf59
 800ce8c:	0800cf59 	.word	0x0800cf59
 800ce90:	0800cf59 	.word	0x0800cf59
 800ce94:	0800cf59 	.word	0x0800cf59
 800ce98:	0800cf59 	.word	0x0800cf59
 800ce9c:	0800cf59 	.word	0x0800cf59
 800cea0:	0800cf59 	.word	0x0800cf59
 800cea4:	0800cf31 	.word	0x0800cf31
 800cea8:	0800cf59 	.word	0x0800cf59
 800ceac:	0800cf59 	.word	0x0800cf59
 800ceb0:	0800cf59 	.word	0x0800cf59
 800ceb4:	0800cf59 	.word	0x0800cf59
 800ceb8:	0800cf59 	.word	0x0800cf59
 800cebc:	0800cf59 	.word	0x0800cf59
 800cec0:	0800cf59 	.word	0x0800cf59
 800cec4:	0800cf39 	.word	0x0800cf39
 800cec8:	0800cf59 	.word	0x0800cf59
 800cecc:	0800cf59 	.word	0x0800cf59
 800ced0:	0800cf59 	.word	0x0800cf59
 800ced4:	0800cf59 	.word	0x0800cf59
 800ced8:	0800cf59 	.word	0x0800cf59
 800cedc:	0800cf59 	.word	0x0800cf59
 800cee0:	0800cf59 	.word	0x0800cf59
 800cee4:	0800cf41 	.word	0x0800cf41
 800cee8:	0800cf59 	.word	0x0800cf59
 800ceec:	0800cf59 	.word	0x0800cf59
 800cef0:	0800cf59 	.word	0x0800cf59
 800cef4:	0800cf59 	.word	0x0800cf59
 800cef8:	0800cf59 	.word	0x0800cf59
 800cefc:	0800cf59 	.word	0x0800cf59
 800cf00:	0800cf59 	.word	0x0800cf59
 800cf04:	0800cf49 	.word	0x0800cf49
 800cf08:	0800cf59 	.word	0x0800cf59
 800cf0c:	0800cf59 	.word	0x0800cf59
 800cf10:	0800cf59 	.word	0x0800cf59
 800cf14:	0800cf59 	.word	0x0800cf59
 800cf18:	0800cf59 	.word	0x0800cf59
 800cf1c:	0800cf59 	.word	0x0800cf59
 800cf20:	0800cf59 	.word	0x0800cf59
 800cf24:	0800cf51 	.word	0x0800cf51
 800cf28:	2301      	movs	r3, #1
 800cf2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf2e:	e222      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cf30:	2304      	movs	r3, #4
 800cf32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf36:	e21e      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cf38:	2308      	movs	r3, #8
 800cf3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3e:	e21a      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cf40:	2310      	movs	r3, #16
 800cf42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf46:	e216      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cf48:	2320      	movs	r3, #32
 800cf4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf4e:	e212      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cf50:	2340      	movs	r3, #64	@ 0x40
 800cf52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf56:	e20e      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cf58:	2380      	movs	r3, #128	@ 0x80
 800cf5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf5e:	e20a      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a69      	ldr	r2, [pc, #420]	@ (800d10c <UART_SetConfig+0x33c>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d130      	bne.n	800cfcc <UART_SetConfig+0x1fc>
 800cf6a:	4b67      	ldr	r3, [pc, #412]	@ (800d108 <UART_SetConfig+0x338>)
 800cf6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf6e:	f003 0307 	and.w	r3, r3, #7
 800cf72:	2b05      	cmp	r3, #5
 800cf74:	d826      	bhi.n	800cfc4 <UART_SetConfig+0x1f4>
 800cf76:	a201      	add	r2, pc, #4	@ (adr r2, 800cf7c <UART_SetConfig+0x1ac>)
 800cf78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf7c:	0800cf95 	.word	0x0800cf95
 800cf80:	0800cf9d 	.word	0x0800cf9d
 800cf84:	0800cfa5 	.word	0x0800cfa5
 800cf88:	0800cfad 	.word	0x0800cfad
 800cf8c:	0800cfb5 	.word	0x0800cfb5
 800cf90:	0800cfbd 	.word	0x0800cfbd
 800cf94:	2300      	movs	r3, #0
 800cf96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf9a:	e1ec      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cf9c:	2304      	movs	r3, #4
 800cf9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfa2:	e1e8      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cfa4:	2308      	movs	r3, #8
 800cfa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfaa:	e1e4      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cfac:	2310      	movs	r3, #16
 800cfae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfb2:	e1e0      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cfb4:	2320      	movs	r3, #32
 800cfb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfba:	e1dc      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cfbc:	2340      	movs	r3, #64	@ 0x40
 800cfbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfc2:	e1d8      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cfc4:	2380      	movs	r3, #128	@ 0x80
 800cfc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfca:	e1d4      	b.n	800d376 <UART_SetConfig+0x5a6>
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a4f      	ldr	r2, [pc, #316]	@ (800d110 <UART_SetConfig+0x340>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d130      	bne.n	800d038 <UART_SetConfig+0x268>
 800cfd6:	4b4c      	ldr	r3, [pc, #304]	@ (800d108 <UART_SetConfig+0x338>)
 800cfd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfda:	f003 0307 	and.w	r3, r3, #7
 800cfde:	2b05      	cmp	r3, #5
 800cfe0:	d826      	bhi.n	800d030 <UART_SetConfig+0x260>
 800cfe2:	a201      	add	r2, pc, #4	@ (adr r2, 800cfe8 <UART_SetConfig+0x218>)
 800cfe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe8:	0800d001 	.word	0x0800d001
 800cfec:	0800d009 	.word	0x0800d009
 800cff0:	0800d011 	.word	0x0800d011
 800cff4:	0800d019 	.word	0x0800d019
 800cff8:	0800d021 	.word	0x0800d021
 800cffc:	0800d029 	.word	0x0800d029
 800d000:	2300      	movs	r3, #0
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d006:	e1b6      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d008:	2304      	movs	r3, #4
 800d00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00e:	e1b2      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d010:	2308      	movs	r3, #8
 800d012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d016:	e1ae      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d018:	2310      	movs	r3, #16
 800d01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d01e:	e1aa      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d020:	2320      	movs	r3, #32
 800d022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d026:	e1a6      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d028:	2340      	movs	r3, #64	@ 0x40
 800d02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d02e:	e1a2      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d030:	2380      	movs	r3, #128	@ 0x80
 800d032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d036:	e19e      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a35      	ldr	r2, [pc, #212]	@ (800d114 <UART_SetConfig+0x344>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d130      	bne.n	800d0a4 <UART_SetConfig+0x2d4>
 800d042:	4b31      	ldr	r3, [pc, #196]	@ (800d108 <UART_SetConfig+0x338>)
 800d044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d046:	f003 0307 	and.w	r3, r3, #7
 800d04a:	2b05      	cmp	r3, #5
 800d04c:	d826      	bhi.n	800d09c <UART_SetConfig+0x2cc>
 800d04e:	a201      	add	r2, pc, #4	@ (adr r2, 800d054 <UART_SetConfig+0x284>)
 800d050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d054:	0800d06d 	.word	0x0800d06d
 800d058:	0800d075 	.word	0x0800d075
 800d05c:	0800d07d 	.word	0x0800d07d
 800d060:	0800d085 	.word	0x0800d085
 800d064:	0800d08d 	.word	0x0800d08d
 800d068:	0800d095 	.word	0x0800d095
 800d06c:	2300      	movs	r3, #0
 800d06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d072:	e180      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d074:	2304      	movs	r3, #4
 800d076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07a:	e17c      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d07c:	2308      	movs	r3, #8
 800d07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d082:	e178      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d084:	2310      	movs	r3, #16
 800d086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d08a:	e174      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d08c:	2320      	movs	r3, #32
 800d08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d092:	e170      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d094:	2340      	movs	r3, #64	@ 0x40
 800d096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d09a:	e16c      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d09c:	2380      	movs	r3, #128	@ 0x80
 800d09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0a2:	e168      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a1b      	ldr	r2, [pc, #108]	@ (800d118 <UART_SetConfig+0x348>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d142      	bne.n	800d134 <UART_SetConfig+0x364>
 800d0ae:	4b16      	ldr	r3, [pc, #88]	@ (800d108 <UART_SetConfig+0x338>)
 800d0b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0b2:	f003 0307 	and.w	r3, r3, #7
 800d0b6:	2b05      	cmp	r3, #5
 800d0b8:	d838      	bhi.n	800d12c <UART_SetConfig+0x35c>
 800d0ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c0 <UART_SetConfig+0x2f0>)
 800d0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c0:	0800d0d9 	.word	0x0800d0d9
 800d0c4:	0800d0e1 	.word	0x0800d0e1
 800d0c8:	0800d0e9 	.word	0x0800d0e9
 800d0cc:	0800d0f1 	.word	0x0800d0f1
 800d0d0:	0800d11d 	.word	0x0800d11d
 800d0d4:	0800d125 	.word	0x0800d125
 800d0d8:	2300      	movs	r3, #0
 800d0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0de:	e14a      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d0e0:	2304      	movs	r3, #4
 800d0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e6:	e146      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d0e8:	2308      	movs	r3, #8
 800d0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ee:	e142      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d0f0:	2310      	movs	r3, #16
 800d0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0f6:	e13e      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d0f8:	cfff69f3 	.word	0xcfff69f3
 800d0fc:	58000c00 	.word	0x58000c00
 800d100:	11fff4ff 	.word	0x11fff4ff
 800d104:	40011000 	.word	0x40011000
 800d108:	58024400 	.word	0x58024400
 800d10c:	40004400 	.word	0x40004400
 800d110:	40004800 	.word	0x40004800
 800d114:	40004c00 	.word	0x40004c00
 800d118:	40005000 	.word	0x40005000
 800d11c:	2320      	movs	r3, #32
 800d11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d122:	e128      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d124:	2340      	movs	r3, #64	@ 0x40
 800d126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d12a:	e124      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d12c:	2380      	movs	r3, #128	@ 0x80
 800d12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d132:	e120      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4acb      	ldr	r2, [pc, #812]	@ (800d468 <UART_SetConfig+0x698>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d176      	bne.n	800d22c <UART_SetConfig+0x45c>
 800d13e:	4bcb      	ldr	r3, [pc, #812]	@ (800d46c <UART_SetConfig+0x69c>)
 800d140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d142:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d146:	2b28      	cmp	r3, #40	@ 0x28
 800d148:	d86c      	bhi.n	800d224 <UART_SetConfig+0x454>
 800d14a:	a201      	add	r2, pc, #4	@ (adr r2, 800d150 <UART_SetConfig+0x380>)
 800d14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d150:	0800d1f5 	.word	0x0800d1f5
 800d154:	0800d225 	.word	0x0800d225
 800d158:	0800d225 	.word	0x0800d225
 800d15c:	0800d225 	.word	0x0800d225
 800d160:	0800d225 	.word	0x0800d225
 800d164:	0800d225 	.word	0x0800d225
 800d168:	0800d225 	.word	0x0800d225
 800d16c:	0800d225 	.word	0x0800d225
 800d170:	0800d1fd 	.word	0x0800d1fd
 800d174:	0800d225 	.word	0x0800d225
 800d178:	0800d225 	.word	0x0800d225
 800d17c:	0800d225 	.word	0x0800d225
 800d180:	0800d225 	.word	0x0800d225
 800d184:	0800d225 	.word	0x0800d225
 800d188:	0800d225 	.word	0x0800d225
 800d18c:	0800d225 	.word	0x0800d225
 800d190:	0800d205 	.word	0x0800d205
 800d194:	0800d225 	.word	0x0800d225
 800d198:	0800d225 	.word	0x0800d225
 800d19c:	0800d225 	.word	0x0800d225
 800d1a0:	0800d225 	.word	0x0800d225
 800d1a4:	0800d225 	.word	0x0800d225
 800d1a8:	0800d225 	.word	0x0800d225
 800d1ac:	0800d225 	.word	0x0800d225
 800d1b0:	0800d20d 	.word	0x0800d20d
 800d1b4:	0800d225 	.word	0x0800d225
 800d1b8:	0800d225 	.word	0x0800d225
 800d1bc:	0800d225 	.word	0x0800d225
 800d1c0:	0800d225 	.word	0x0800d225
 800d1c4:	0800d225 	.word	0x0800d225
 800d1c8:	0800d225 	.word	0x0800d225
 800d1cc:	0800d225 	.word	0x0800d225
 800d1d0:	0800d215 	.word	0x0800d215
 800d1d4:	0800d225 	.word	0x0800d225
 800d1d8:	0800d225 	.word	0x0800d225
 800d1dc:	0800d225 	.word	0x0800d225
 800d1e0:	0800d225 	.word	0x0800d225
 800d1e4:	0800d225 	.word	0x0800d225
 800d1e8:	0800d225 	.word	0x0800d225
 800d1ec:	0800d225 	.word	0x0800d225
 800d1f0:	0800d21d 	.word	0x0800d21d
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1fa:	e0bc      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d1fc:	2304      	movs	r3, #4
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d202:	e0b8      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d204:	2308      	movs	r3, #8
 800d206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d20a:	e0b4      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d20c:	2310      	movs	r3, #16
 800d20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d212:	e0b0      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d214:	2320      	movs	r3, #32
 800d216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d21a:	e0ac      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d21c:	2340      	movs	r3, #64	@ 0x40
 800d21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d222:	e0a8      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d224:	2380      	movs	r3, #128	@ 0x80
 800d226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d22a:	e0a4      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a8f      	ldr	r2, [pc, #572]	@ (800d470 <UART_SetConfig+0x6a0>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d130      	bne.n	800d298 <UART_SetConfig+0x4c8>
 800d236:	4b8d      	ldr	r3, [pc, #564]	@ (800d46c <UART_SetConfig+0x69c>)
 800d238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d23a:	f003 0307 	and.w	r3, r3, #7
 800d23e:	2b05      	cmp	r3, #5
 800d240:	d826      	bhi.n	800d290 <UART_SetConfig+0x4c0>
 800d242:	a201      	add	r2, pc, #4	@ (adr r2, 800d248 <UART_SetConfig+0x478>)
 800d244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d248:	0800d261 	.word	0x0800d261
 800d24c:	0800d269 	.word	0x0800d269
 800d250:	0800d271 	.word	0x0800d271
 800d254:	0800d279 	.word	0x0800d279
 800d258:	0800d281 	.word	0x0800d281
 800d25c:	0800d289 	.word	0x0800d289
 800d260:	2300      	movs	r3, #0
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d266:	e086      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d268:	2304      	movs	r3, #4
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26e:	e082      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d270:	2308      	movs	r3, #8
 800d272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d276:	e07e      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d278:	2310      	movs	r3, #16
 800d27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27e:	e07a      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d280:	2320      	movs	r3, #32
 800d282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d286:	e076      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d288:	2340      	movs	r3, #64	@ 0x40
 800d28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d28e:	e072      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d290:	2380      	movs	r3, #128	@ 0x80
 800d292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d296:	e06e      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a75      	ldr	r2, [pc, #468]	@ (800d474 <UART_SetConfig+0x6a4>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d130      	bne.n	800d304 <UART_SetConfig+0x534>
 800d2a2:	4b72      	ldr	r3, [pc, #456]	@ (800d46c <UART_SetConfig+0x69c>)
 800d2a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2a6:	f003 0307 	and.w	r3, r3, #7
 800d2aa:	2b05      	cmp	r3, #5
 800d2ac:	d826      	bhi.n	800d2fc <UART_SetConfig+0x52c>
 800d2ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b4 <UART_SetConfig+0x4e4>)
 800d2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b4:	0800d2cd 	.word	0x0800d2cd
 800d2b8:	0800d2d5 	.word	0x0800d2d5
 800d2bc:	0800d2dd 	.word	0x0800d2dd
 800d2c0:	0800d2e5 	.word	0x0800d2e5
 800d2c4:	0800d2ed 	.word	0x0800d2ed
 800d2c8:	0800d2f5 	.word	0x0800d2f5
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d2:	e050      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d2d4:	2304      	movs	r3, #4
 800d2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2da:	e04c      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d2dc:	2308      	movs	r3, #8
 800d2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e2:	e048      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d2e4:	2310      	movs	r3, #16
 800d2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ea:	e044      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d2ec:	2320      	movs	r3, #32
 800d2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2f2:	e040      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d2f4:	2340      	movs	r3, #64	@ 0x40
 800d2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2fa:	e03c      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d2fc:	2380      	movs	r3, #128	@ 0x80
 800d2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d302:	e038      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a5b      	ldr	r2, [pc, #364]	@ (800d478 <UART_SetConfig+0x6a8>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d130      	bne.n	800d370 <UART_SetConfig+0x5a0>
 800d30e:	4b57      	ldr	r3, [pc, #348]	@ (800d46c <UART_SetConfig+0x69c>)
 800d310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d312:	f003 0307 	and.w	r3, r3, #7
 800d316:	2b05      	cmp	r3, #5
 800d318:	d826      	bhi.n	800d368 <UART_SetConfig+0x598>
 800d31a:	a201      	add	r2, pc, #4	@ (adr r2, 800d320 <UART_SetConfig+0x550>)
 800d31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d320:	0800d339 	.word	0x0800d339
 800d324:	0800d341 	.word	0x0800d341
 800d328:	0800d349 	.word	0x0800d349
 800d32c:	0800d351 	.word	0x0800d351
 800d330:	0800d359 	.word	0x0800d359
 800d334:	0800d361 	.word	0x0800d361
 800d338:	2302      	movs	r3, #2
 800d33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d33e:	e01a      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d340:	2304      	movs	r3, #4
 800d342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d346:	e016      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d348:	2308      	movs	r3, #8
 800d34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34e:	e012      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d350:	2310      	movs	r3, #16
 800d352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d356:	e00e      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d358:	2320      	movs	r3, #32
 800d35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d35e:	e00a      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d360:	2340      	movs	r3, #64	@ 0x40
 800d362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d366:	e006      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d368:	2380      	movs	r3, #128	@ 0x80
 800d36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d36e:	e002      	b.n	800d376 <UART_SetConfig+0x5a6>
 800d370:	2380      	movs	r3, #128	@ 0x80
 800d372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a3f      	ldr	r2, [pc, #252]	@ (800d478 <UART_SetConfig+0x6a8>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	f040 80f8 	bne.w	800d572 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d382:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d386:	2b20      	cmp	r3, #32
 800d388:	dc46      	bgt.n	800d418 <UART_SetConfig+0x648>
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	f2c0 8082 	blt.w	800d494 <UART_SetConfig+0x6c4>
 800d390:	3b02      	subs	r3, #2
 800d392:	2b1e      	cmp	r3, #30
 800d394:	d87e      	bhi.n	800d494 <UART_SetConfig+0x6c4>
 800d396:	a201      	add	r2, pc, #4	@ (adr r2, 800d39c <UART_SetConfig+0x5cc>)
 800d398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39c:	0800d41f 	.word	0x0800d41f
 800d3a0:	0800d495 	.word	0x0800d495
 800d3a4:	0800d427 	.word	0x0800d427
 800d3a8:	0800d495 	.word	0x0800d495
 800d3ac:	0800d495 	.word	0x0800d495
 800d3b0:	0800d495 	.word	0x0800d495
 800d3b4:	0800d437 	.word	0x0800d437
 800d3b8:	0800d495 	.word	0x0800d495
 800d3bc:	0800d495 	.word	0x0800d495
 800d3c0:	0800d495 	.word	0x0800d495
 800d3c4:	0800d495 	.word	0x0800d495
 800d3c8:	0800d495 	.word	0x0800d495
 800d3cc:	0800d495 	.word	0x0800d495
 800d3d0:	0800d495 	.word	0x0800d495
 800d3d4:	0800d447 	.word	0x0800d447
 800d3d8:	0800d495 	.word	0x0800d495
 800d3dc:	0800d495 	.word	0x0800d495
 800d3e0:	0800d495 	.word	0x0800d495
 800d3e4:	0800d495 	.word	0x0800d495
 800d3e8:	0800d495 	.word	0x0800d495
 800d3ec:	0800d495 	.word	0x0800d495
 800d3f0:	0800d495 	.word	0x0800d495
 800d3f4:	0800d495 	.word	0x0800d495
 800d3f8:	0800d495 	.word	0x0800d495
 800d3fc:	0800d495 	.word	0x0800d495
 800d400:	0800d495 	.word	0x0800d495
 800d404:	0800d495 	.word	0x0800d495
 800d408:	0800d495 	.word	0x0800d495
 800d40c:	0800d495 	.word	0x0800d495
 800d410:	0800d495 	.word	0x0800d495
 800d414:	0800d487 	.word	0x0800d487
 800d418:	2b40      	cmp	r3, #64	@ 0x40
 800d41a:	d037      	beq.n	800d48c <UART_SetConfig+0x6bc>
 800d41c:	e03a      	b.n	800d494 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d41e:	f7fd fefd 	bl	800b21c <HAL_RCCEx_GetD3PCLK1Freq>
 800d422:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d424:	e03c      	b.n	800d4a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fd ff0c 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d434:	e034      	b.n	800d4a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d436:	f107 0318 	add.w	r3, r7, #24
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7fe f858 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d444:	e02c      	b.n	800d4a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d446:	4b09      	ldr	r3, [pc, #36]	@ (800d46c <UART_SetConfig+0x69c>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f003 0320 	and.w	r3, r3, #32
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d016      	beq.n	800d480 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d452:	4b06      	ldr	r3, [pc, #24]	@ (800d46c <UART_SetConfig+0x69c>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	08db      	lsrs	r3, r3, #3
 800d458:	f003 0303 	and.w	r3, r3, #3
 800d45c:	4a07      	ldr	r2, [pc, #28]	@ (800d47c <UART_SetConfig+0x6ac>)
 800d45e:	fa22 f303 	lsr.w	r3, r2, r3
 800d462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d464:	e01c      	b.n	800d4a0 <UART_SetConfig+0x6d0>
 800d466:	bf00      	nop
 800d468:	40011400 	.word	0x40011400
 800d46c:	58024400 	.word	0x58024400
 800d470:	40007800 	.word	0x40007800
 800d474:	40007c00 	.word	0x40007c00
 800d478:	58000c00 	.word	0x58000c00
 800d47c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d480:	4b9d      	ldr	r3, [pc, #628]	@ (800d6f8 <UART_SetConfig+0x928>)
 800d482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d484:	e00c      	b.n	800d4a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d486:	4b9d      	ldr	r3, [pc, #628]	@ (800d6fc <UART_SetConfig+0x92c>)
 800d488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d48a:	e009      	b.n	800d4a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d48c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d492:	e005      	b.n	800d4a0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d494:	2300      	movs	r3, #0
 800d496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d498:	2301      	movs	r3, #1
 800d49a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d49e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d4a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	f000 81de 	beq.w	800d864 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ac:	4a94      	ldr	r2, [pc, #592]	@ (800d700 <UART_SetConfig+0x930>)
 800d4ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4ba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	685a      	ldr	r2, [r3, #4]
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	4413      	add	r3, r2
 800d4c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d305      	bcc.n	800d4d8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d903      	bls.n	800d4e0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d4de:	e1c1      	b.n	800d864 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	60bb      	str	r3, [r7, #8]
 800d4e6:	60fa      	str	r2, [r7, #12]
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ec:	4a84      	ldr	r2, [pc, #528]	@ (800d700 <UART_SetConfig+0x930>)
 800d4ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	603b      	str	r3, [r7, #0]
 800d4f8:	607a      	str	r2, [r7, #4]
 800d4fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d502:	f7f2 ff45 	bl	8000390 <__aeabi_uldivmod>
 800d506:	4602      	mov	r2, r0
 800d508:	460b      	mov	r3, r1
 800d50a:	4610      	mov	r0, r2
 800d50c:	4619      	mov	r1, r3
 800d50e:	f04f 0200 	mov.w	r2, #0
 800d512:	f04f 0300 	mov.w	r3, #0
 800d516:	020b      	lsls	r3, r1, #8
 800d518:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d51c:	0202      	lsls	r2, r0, #8
 800d51e:	6979      	ldr	r1, [r7, #20]
 800d520:	6849      	ldr	r1, [r1, #4]
 800d522:	0849      	lsrs	r1, r1, #1
 800d524:	2000      	movs	r0, #0
 800d526:	460c      	mov	r4, r1
 800d528:	4605      	mov	r5, r0
 800d52a:	eb12 0804 	adds.w	r8, r2, r4
 800d52e:	eb43 0905 	adc.w	r9, r3, r5
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	469a      	mov	sl, r3
 800d53a:	4693      	mov	fp, r2
 800d53c:	4652      	mov	r2, sl
 800d53e:	465b      	mov	r3, fp
 800d540:	4640      	mov	r0, r8
 800d542:	4649      	mov	r1, r9
 800d544:	f7f2 ff24 	bl	8000390 <__aeabi_uldivmod>
 800d548:	4602      	mov	r2, r0
 800d54a:	460b      	mov	r3, r1
 800d54c:	4613      	mov	r3, r2
 800d54e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d556:	d308      	bcc.n	800d56a <UART_SetConfig+0x79a>
 800d558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d55e:	d204      	bcs.n	800d56a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d566:	60da      	str	r2, [r3, #12]
 800d568:	e17c      	b.n	800d864 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d56a:	2301      	movs	r3, #1
 800d56c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d570:	e178      	b.n	800d864 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	69db      	ldr	r3, [r3, #28]
 800d576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d57a:	f040 80c5 	bne.w	800d708 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d57e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d582:	2b20      	cmp	r3, #32
 800d584:	dc48      	bgt.n	800d618 <UART_SetConfig+0x848>
 800d586:	2b00      	cmp	r3, #0
 800d588:	db7b      	blt.n	800d682 <UART_SetConfig+0x8b2>
 800d58a:	2b20      	cmp	r3, #32
 800d58c:	d879      	bhi.n	800d682 <UART_SetConfig+0x8b2>
 800d58e:	a201      	add	r2, pc, #4	@ (adr r2, 800d594 <UART_SetConfig+0x7c4>)
 800d590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d594:	0800d61f 	.word	0x0800d61f
 800d598:	0800d627 	.word	0x0800d627
 800d59c:	0800d683 	.word	0x0800d683
 800d5a0:	0800d683 	.word	0x0800d683
 800d5a4:	0800d62f 	.word	0x0800d62f
 800d5a8:	0800d683 	.word	0x0800d683
 800d5ac:	0800d683 	.word	0x0800d683
 800d5b0:	0800d683 	.word	0x0800d683
 800d5b4:	0800d63f 	.word	0x0800d63f
 800d5b8:	0800d683 	.word	0x0800d683
 800d5bc:	0800d683 	.word	0x0800d683
 800d5c0:	0800d683 	.word	0x0800d683
 800d5c4:	0800d683 	.word	0x0800d683
 800d5c8:	0800d683 	.word	0x0800d683
 800d5cc:	0800d683 	.word	0x0800d683
 800d5d0:	0800d683 	.word	0x0800d683
 800d5d4:	0800d64f 	.word	0x0800d64f
 800d5d8:	0800d683 	.word	0x0800d683
 800d5dc:	0800d683 	.word	0x0800d683
 800d5e0:	0800d683 	.word	0x0800d683
 800d5e4:	0800d683 	.word	0x0800d683
 800d5e8:	0800d683 	.word	0x0800d683
 800d5ec:	0800d683 	.word	0x0800d683
 800d5f0:	0800d683 	.word	0x0800d683
 800d5f4:	0800d683 	.word	0x0800d683
 800d5f8:	0800d683 	.word	0x0800d683
 800d5fc:	0800d683 	.word	0x0800d683
 800d600:	0800d683 	.word	0x0800d683
 800d604:	0800d683 	.word	0x0800d683
 800d608:	0800d683 	.word	0x0800d683
 800d60c:	0800d683 	.word	0x0800d683
 800d610:	0800d683 	.word	0x0800d683
 800d614:	0800d675 	.word	0x0800d675
 800d618:	2b40      	cmp	r3, #64	@ 0x40
 800d61a:	d02e      	beq.n	800d67a <UART_SetConfig+0x8aa>
 800d61c:	e031      	b.n	800d682 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d61e:	f7fb fe47 	bl	80092b0 <HAL_RCC_GetPCLK1Freq>
 800d622:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d624:	e033      	b.n	800d68e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d626:	f7fb fe59 	bl	80092dc <HAL_RCC_GetPCLK2Freq>
 800d62a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d62c:	e02f      	b.n	800d68e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d62e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d632:	4618      	mov	r0, r3
 800d634:	f7fd fe08 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d63c:	e027      	b.n	800d68e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d63e:	f107 0318 	add.w	r3, r7, #24
 800d642:	4618      	mov	r0, r3
 800d644:	f7fd ff54 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d64c:	e01f      	b.n	800d68e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d64e:	4b2d      	ldr	r3, [pc, #180]	@ (800d704 <UART_SetConfig+0x934>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f003 0320 	and.w	r3, r3, #32
 800d656:	2b00      	cmp	r3, #0
 800d658:	d009      	beq.n	800d66e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d65a:	4b2a      	ldr	r3, [pc, #168]	@ (800d704 <UART_SetConfig+0x934>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	08db      	lsrs	r3, r3, #3
 800d660:	f003 0303 	and.w	r3, r3, #3
 800d664:	4a24      	ldr	r2, [pc, #144]	@ (800d6f8 <UART_SetConfig+0x928>)
 800d666:	fa22 f303 	lsr.w	r3, r2, r3
 800d66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d66c:	e00f      	b.n	800d68e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d66e:	4b22      	ldr	r3, [pc, #136]	@ (800d6f8 <UART_SetConfig+0x928>)
 800d670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d672:	e00c      	b.n	800d68e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d674:	4b21      	ldr	r3, [pc, #132]	@ (800d6fc <UART_SetConfig+0x92c>)
 800d676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d678:	e009      	b.n	800d68e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d67a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d680:	e005      	b.n	800d68e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d682:	2300      	movs	r3, #0
 800d684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d68c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d68e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d690:	2b00      	cmp	r3, #0
 800d692:	f000 80e7 	beq.w	800d864 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d69a:	4a19      	ldr	r2, [pc, #100]	@ (800d700 <UART_SetConfig+0x930>)
 800d69c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6a8:	005a      	lsls	r2, r3, #1
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	085b      	lsrs	r3, r3, #1
 800d6b0:	441a      	add	r2, r3
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6be:	2b0f      	cmp	r3, #15
 800d6c0:	d916      	bls.n	800d6f0 <UART_SetConfig+0x920>
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6c8:	d212      	bcs.n	800d6f0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	f023 030f 	bic.w	r3, r3, #15
 800d6d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d6:	085b      	lsrs	r3, r3, #1
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	f003 0307 	and.w	r3, r3, #7
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d6ec:	60da      	str	r2, [r3, #12]
 800d6ee:	e0b9      	b.n	800d864 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d6f6:	e0b5      	b.n	800d864 <UART_SetConfig+0xa94>
 800d6f8:	03d09000 	.word	0x03d09000
 800d6fc:	003d0900 	.word	0x003d0900
 800d700:	08013fcc 	.word	0x08013fcc
 800d704:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d708:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d70c:	2b20      	cmp	r3, #32
 800d70e:	dc49      	bgt.n	800d7a4 <UART_SetConfig+0x9d4>
 800d710:	2b00      	cmp	r3, #0
 800d712:	db7c      	blt.n	800d80e <UART_SetConfig+0xa3e>
 800d714:	2b20      	cmp	r3, #32
 800d716:	d87a      	bhi.n	800d80e <UART_SetConfig+0xa3e>
 800d718:	a201      	add	r2, pc, #4	@ (adr r2, 800d720 <UART_SetConfig+0x950>)
 800d71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d71e:	bf00      	nop
 800d720:	0800d7ab 	.word	0x0800d7ab
 800d724:	0800d7b3 	.word	0x0800d7b3
 800d728:	0800d80f 	.word	0x0800d80f
 800d72c:	0800d80f 	.word	0x0800d80f
 800d730:	0800d7bb 	.word	0x0800d7bb
 800d734:	0800d80f 	.word	0x0800d80f
 800d738:	0800d80f 	.word	0x0800d80f
 800d73c:	0800d80f 	.word	0x0800d80f
 800d740:	0800d7cb 	.word	0x0800d7cb
 800d744:	0800d80f 	.word	0x0800d80f
 800d748:	0800d80f 	.word	0x0800d80f
 800d74c:	0800d80f 	.word	0x0800d80f
 800d750:	0800d80f 	.word	0x0800d80f
 800d754:	0800d80f 	.word	0x0800d80f
 800d758:	0800d80f 	.word	0x0800d80f
 800d75c:	0800d80f 	.word	0x0800d80f
 800d760:	0800d7db 	.word	0x0800d7db
 800d764:	0800d80f 	.word	0x0800d80f
 800d768:	0800d80f 	.word	0x0800d80f
 800d76c:	0800d80f 	.word	0x0800d80f
 800d770:	0800d80f 	.word	0x0800d80f
 800d774:	0800d80f 	.word	0x0800d80f
 800d778:	0800d80f 	.word	0x0800d80f
 800d77c:	0800d80f 	.word	0x0800d80f
 800d780:	0800d80f 	.word	0x0800d80f
 800d784:	0800d80f 	.word	0x0800d80f
 800d788:	0800d80f 	.word	0x0800d80f
 800d78c:	0800d80f 	.word	0x0800d80f
 800d790:	0800d80f 	.word	0x0800d80f
 800d794:	0800d80f 	.word	0x0800d80f
 800d798:	0800d80f 	.word	0x0800d80f
 800d79c:	0800d80f 	.word	0x0800d80f
 800d7a0:	0800d801 	.word	0x0800d801
 800d7a4:	2b40      	cmp	r3, #64	@ 0x40
 800d7a6:	d02e      	beq.n	800d806 <UART_SetConfig+0xa36>
 800d7a8:	e031      	b.n	800d80e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7aa:	f7fb fd81 	bl	80092b0 <HAL_RCC_GetPCLK1Freq>
 800d7ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d7b0:	e033      	b.n	800d81a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d7b2:	f7fb fd93 	bl	80092dc <HAL_RCC_GetPCLK2Freq>
 800d7b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d7b8:	e02f      	b.n	800d81a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fd fd42 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7c8:	e027      	b.n	800d81a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7ca:	f107 0318 	add.w	r3, r7, #24
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7fd fe8e 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7d8:	e01f      	b.n	800d81a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7da:	4b2d      	ldr	r3, [pc, #180]	@ (800d890 <UART_SetConfig+0xac0>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f003 0320 	and.w	r3, r3, #32
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d009      	beq.n	800d7fa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7e6:	4b2a      	ldr	r3, [pc, #168]	@ (800d890 <UART_SetConfig+0xac0>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	08db      	lsrs	r3, r3, #3
 800d7ec:	f003 0303 	and.w	r3, r3, #3
 800d7f0:	4a28      	ldr	r2, [pc, #160]	@ (800d894 <UART_SetConfig+0xac4>)
 800d7f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7f8:	e00f      	b.n	800d81a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d7fa:	4b26      	ldr	r3, [pc, #152]	@ (800d894 <UART_SetConfig+0xac4>)
 800d7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7fe:	e00c      	b.n	800d81a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d800:	4b25      	ldr	r3, [pc, #148]	@ (800d898 <UART_SetConfig+0xac8>)
 800d802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d804:	e009      	b.n	800d81a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d80c:	e005      	b.n	800d81a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d80e:	2300      	movs	r3, #0
 800d810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d812:	2301      	movs	r3, #1
 800d814:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d818:	bf00      	nop
    }

    if (pclk != 0U)
 800d81a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d021      	beq.n	800d864 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d824:	4a1d      	ldr	r2, [pc, #116]	@ (800d89c <UART_SetConfig+0xacc>)
 800d826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d82a:	461a      	mov	r2, r3
 800d82c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d82e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	085b      	lsrs	r3, r3, #1
 800d838:	441a      	add	r2, r3
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d842:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d846:	2b0f      	cmp	r3, #15
 800d848:	d909      	bls.n	800d85e <UART_SetConfig+0xa8e>
 800d84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d84c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d850:	d205      	bcs.n	800d85e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d854:	b29a      	uxth	r2, r3
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	60da      	str	r2, [r3, #12]
 800d85c:	e002      	b.n	800d864 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d85e:	2301      	movs	r3, #1
 800d860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	2201      	movs	r2, #1
 800d868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	2201      	movs	r2, #1
 800d870:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	2200      	movs	r2, #0
 800d878:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	2200      	movs	r2, #0
 800d87e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d880:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d884:	4618      	mov	r0, r3
 800d886:	3748      	adds	r7, #72	@ 0x48
 800d888:	46bd      	mov	sp, r7
 800d88a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d88e:	bf00      	nop
 800d890:	58024400 	.word	0x58024400
 800d894:	03d09000 	.word	0x03d09000
 800d898:	003d0900 	.word	0x003d0900
 800d89c:	08013fcc 	.word	0x08013fcc

0800d8a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ac:	f003 0301 	and.w	r3, r3, #1
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00a      	beq.n	800d8ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	430a      	orrs	r2, r1
 800d8c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ce:	f003 0302 	and.w	r3, r3, #2
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00a      	beq.n	800d8ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	430a      	orrs	r2, r1
 800d8ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8f0:	f003 0304 	and.w	r3, r3, #4
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d00a      	beq.n	800d90e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	430a      	orrs	r2, r1
 800d90c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d912:	f003 0308 	and.w	r3, r3, #8
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00a      	beq.n	800d930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	430a      	orrs	r2, r1
 800d92e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d934:	f003 0310 	and.w	r3, r3, #16
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00a      	beq.n	800d952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	430a      	orrs	r2, r1
 800d950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d956:	f003 0320 	and.w	r3, r3, #32
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d00a      	beq.n	800d974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	430a      	orrs	r2, r1
 800d972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d01a      	beq.n	800d9b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	430a      	orrs	r2, r1
 800d994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d99a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d99e:	d10a      	bne.n	800d9b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	430a      	orrs	r2, r1
 800d9b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00a      	beq.n	800d9d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	430a      	orrs	r2, r1
 800d9d6:	605a      	str	r2, [r3, #4]
  }
}
 800d9d8:	bf00      	nop
 800d9da:	370c      	adds	r7, #12
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b098      	sub	sp, #96	@ 0x60
 800d9e8:	af02      	add	r7, sp, #8
 800d9ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d9f4:	f7f4 feec 	bl	80027d0 <HAL_GetTick>
 800d9f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f003 0308 	and.w	r3, r3, #8
 800da04:	2b08      	cmp	r3, #8
 800da06:	d12f      	bne.n	800da68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da0c:	9300      	str	r3, [sp, #0]
 800da0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da10:	2200      	movs	r2, #0
 800da12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 f88e 	bl	800db38 <UART_WaitOnFlagUntilTimeout>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d022      	beq.n	800da68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da2a:	e853 3f00 	ldrex	r3, [r3]
 800da2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da36:	653b      	str	r3, [r7, #80]	@ 0x50
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	461a      	mov	r2, r3
 800da3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da40:	647b      	str	r3, [r7, #68]	@ 0x44
 800da42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da48:	e841 2300 	strex	r3, r2, [r1]
 800da4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1e6      	bne.n	800da22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2220      	movs	r2, #32
 800da58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da64:	2303      	movs	r3, #3
 800da66:	e063      	b.n	800db30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f003 0304 	and.w	r3, r3, #4
 800da72:	2b04      	cmp	r3, #4
 800da74:	d149      	bne.n	800db0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da7a:	9300      	str	r3, [sp, #0]
 800da7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da7e:	2200      	movs	r2, #0
 800da80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 f857 	bl	800db38 <UART_WaitOnFlagUntilTimeout>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d03c      	beq.n	800db0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da98:	e853 3f00 	ldrex	r3, [r3]
 800da9c:	623b      	str	r3, [r7, #32]
   return(result);
 800da9e:	6a3b      	ldr	r3, [r7, #32]
 800daa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800daa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	461a      	mov	r2, r3
 800daac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800daae:	633b      	str	r3, [r7, #48]	@ 0x30
 800dab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dab6:	e841 2300 	strex	r3, r2, [r1]
 800daba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1e6      	bne.n	800da90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	3308      	adds	r3, #8
 800dac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	e853 3f00 	ldrex	r3, [r3]
 800dad0:	60fb      	str	r3, [r7, #12]
   return(result);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f023 0301 	bic.w	r3, r3, #1
 800dad8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	3308      	adds	r3, #8
 800dae0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dae2:	61fa      	str	r2, [r7, #28]
 800dae4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae6:	69b9      	ldr	r1, [r7, #24]
 800dae8:	69fa      	ldr	r2, [r7, #28]
 800daea:	e841 2300 	strex	r3, r2, [r1]
 800daee:	617b      	str	r3, [r7, #20]
   return(result);
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d1e5      	bne.n	800dac2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2220      	movs	r2, #32
 800dafa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db06:	2303      	movs	r3, #3
 800db08:	e012      	b.n	800db30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2220      	movs	r2, #32
 800db0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2220      	movs	r2, #32
 800db16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	3758      	adds	r7, #88	@ 0x58
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	603b      	str	r3, [r7, #0]
 800db44:	4613      	mov	r3, r2
 800db46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db48:	e049      	b.n	800dbde <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db50:	d045      	beq.n	800dbde <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db52:	f7f4 fe3d 	bl	80027d0 <HAL_GetTick>
 800db56:	4602      	mov	r2, r0
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	69ba      	ldr	r2, [r7, #24]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d302      	bcc.n	800db68 <UART_WaitOnFlagUntilTimeout+0x30>
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d101      	bne.n	800db6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db68:	2303      	movs	r3, #3
 800db6a:	e048      	b.n	800dbfe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f003 0304 	and.w	r3, r3, #4
 800db76:	2b00      	cmp	r3, #0
 800db78:	d031      	beq.n	800dbde <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	69db      	ldr	r3, [r3, #28]
 800db80:	f003 0308 	and.w	r3, r3, #8
 800db84:	2b08      	cmp	r3, #8
 800db86:	d110      	bne.n	800dbaa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2208      	movs	r2, #8
 800db8e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f000 f839 	bl	800dc08 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2208      	movs	r2, #8
 800db9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	e029      	b.n	800dbfe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	69db      	ldr	r3, [r3, #28]
 800dbb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dbb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dbb8:	d111      	bne.n	800dbde <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dbc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	f000 f81f 	bl	800dc08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2220      	movs	r2, #32
 800dbce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dbda:	2303      	movs	r3, #3
 800dbdc:	e00f      	b.n	800dbfe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	69da      	ldr	r2, [r3, #28]
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	68ba      	ldr	r2, [r7, #8]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	bf0c      	ite	eq
 800dbee:	2301      	moveq	r3, #1
 800dbf0:	2300      	movne	r3, #0
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	79fb      	ldrb	r3, [r7, #7]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d0a6      	beq.n	800db4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
	...

0800dc08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b095      	sub	sp, #84	@ 0x54
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc18:	e853 3f00 	ldrex	r3, [r3]
 800dc1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dc24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc2e:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc36:	e841 2300 	strex	r3, r2, [r1]
 800dc3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1e6      	bne.n	800dc10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3308      	adds	r3, #8
 800dc48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4a:	6a3b      	ldr	r3, [r7, #32]
 800dc4c:	e853 3f00 	ldrex	r3, [r3]
 800dc50:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc52:	69fa      	ldr	r2, [r7, #28]
 800dc54:	4b1e      	ldr	r3, [pc, #120]	@ (800dcd0 <UART_EndRxTransfer+0xc8>)
 800dc56:	4013      	ands	r3, r2
 800dc58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	3308      	adds	r3, #8
 800dc60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc6a:	e841 2300 	strex	r3, r2, [r1]
 800dc6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d1e5      	bne.n	800dc42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d118      	bne.n	800dcb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	e853 3f00 	ldrex	r3, [r3]
 800dc8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	f023 0310 	bic.w	r3, r3, #16
 800dc92:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc9c:	61bb      	str	r3, [r7, #24]
 800dc9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca0:	6979      	ldr	r1, [r7, #20]
 800dca2:	69ba      	ldr	r2, [r7, #24]
 800dca4:	e841 2300 	strex	r3, r2, [r1]
 800dca8:	613b      	str	r3, [r7, #16]
   return(result);
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d1e6      	bne.n	800dc7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2220      	movs	r2, #32
 800dcb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dcc4:	bf00      	nop
 800dcc6:	3754      	adds	r7, #84	@ 0x54
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr
 800dcd0:	effffffe 	.word	0xeffffffe

0800dcd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dce0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2200      	movs	r2, #0
 800dce6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2200      	movs	r2, #0
 800dcee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f7ff f856 	bl	800cda4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcf8:	bf00      	nop
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	e853 3f00 	ldrex	r3, [r3]
 800dd14:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd1c:	61fb      	str	r3, [r7, #28]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	461a      	mov	r2, r3
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	61bb      	str	r3, [r7, #24]
 800dd28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2a:	6979      	ldr	r1, [r7, #20]
 800dd2c:	69ba      	ldr	r2, [r7, #24]
 800dd2e:	e841 2300 	strex	r3, r2, [r1]
 800dd32:	613b      	str	r3, [r7, #16]
   return(result);
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1e6      	bne.n	800dd08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2220      	movs	r2, #32
 800dd3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2200      	movs	r2, #0
 800dd46:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f7ff f821 	bl	800cd90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd4e:	bf00      	nop
 800dd50:	3720      	adds	r7, #32
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dd56:	b480      	push	{r7}
 800dd58:	b083      	sub	sp, #12
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dd5e:	bf00      	nop
 800dd60:	370c      	adds	r7, #12
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr

0800dd6a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dd6a:	b480      	push	{r7}
 800dd6c:	b083      	sub	sp, #12
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dd72:	bf00      	nop
 800dd74:	370c      	adds	r7, #12
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr

0800dd7e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dd7e:	b480      	push	{r7}
 800dd80:	b083      	sub	sp, #12
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dd86:	bf00      	nop
 800dd88:	370c      	adds	r7, #12
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr

0800dd92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dd92:	b480      	push	{r7}
 800dd94:	b085      	sub	sp, #20
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d101      	bne.n	800dda8 <HAL_UARTEx_DisableFifoMode+0x16>
 800dda4:	2302      	movs	r3, #2
 800dda6:	e027      	b.n	800ddf8 <HAL_UARTEx_DisableFifoMode+0x66>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2201      	movs	r2, #1
 800ddac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2224      	movs	r2, #36	@ 0x24
 800ddb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f022 0201 	bic.w	r2, r2, #1
 800ddce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ddd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2220      	movs	r2, #32
 800ddea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3714      	adds	r7, #20
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800de14:	2b01      	cmp	r3, #1
 800de16:	d101      	bne.n	800de1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800de18:	2302      	movs	r3, #2
 800de1a:	e02d      	b.n	800de78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2224      	movs	r2, #36	@ 0x24
 800de28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f022 0201 	bic.w	r2, r2, #1
 800de42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	430a      	orrs	r2, r1
 800de56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 f84f 	bl	800defc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2220      	movs	r2, #32
 800de6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800de90:	2b01      	cmp	r3, #1
 800de92:	d101      	bne.n	800de98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800de94:	2302      	movs	r3, #2
 800de96:	e02d      	b.n	800def4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2224      	movs	r2, #36	@ 0x24
 800dea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f022 0201 	bic.w	r2, r2, #1
 800debe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	683a      	ldr	r2, [r7, #0]
 800ded0:	430a      	orrs	r2, r1
 800ded2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 f811 	bl	800defc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2220      	movs	r2, #32
 800dee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2200      	movs	r2, #0
 800deee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800def2:	2300      	movs	r3, #0
}
 800def4:	4618      	mov	r0, r3
 800def6:	3710      	adds	r7, #16
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d108      	bne.n	800df1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2201      	movs	r2, #1
 800df10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2201      	movs	r2, #1
 800df18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800df1c:	e031      	b.n	800df82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800df1e:	2310      	movs	r3, #16
 800df20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800df22:	2310      	movs	r3, #16
 800df24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	689b      	ldr	r3, [r3, #8]
 800df2c:	0e5b      	lsrs	r3, r3, #25
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	f003 0307 	and.w	r3, r3, #7
 800df34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	689b      	ldr	r3, [r3, #8]
 800df3c:	0f5b      	lsrs	r3, r3, #29
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	f003 0307 	and.w	r3, r3, #7
 800df44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df46:	7bbb      	ldrb	r3, [r7, #14]
 800df48:	7b3a      	ldrb	r2, [r7, #12]
 800df4a:	4911      	ldr	r1, [pc, #68]	@ (800df90 <UARTEx_SetNbDataToProcess+0x94>)
 800df4c:	5c8a      	ldrb	r2, [r1, r2]
 800df4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800df52:	7b3a      	ldrb	r2, [r7, #12]
 800df54:	490f      	ldr	r1, [pc, #60]	@ (800df94 <UARTEx_SetNbDataToProcess+0x98>)
 800df56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df58:	fb93 f3f2 	sdiv	r3, r3, r2
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df64:	7bfb      	ldrb	r3, [r7, #15]
 800df66:	7b7a      	ldrb	r2, [r7, #13]
 800df68:	4909      	ldr	r1, [pc, #36]	@ (800df90 <UARTEx_SetNbDataToProcess+0x94>)
 800df6a:	5c8a      	ldrb	r2, [r1, r2]
 800df6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df70:	7b7a      	ldrb	r2, [r7, #13]
 800df72:	4908      	ldr	r1, [pc, #32]	@ (800df94 <UARTEx_SetNbDataToProcess+0x98>)
 800df74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df76:	fb93 f3f2 	sdiv	r3, r3, r2
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800df82:	bf00      	nop
 800df84:	3714      	adds	r7, #20
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	08013fe4 	.word	0x08013fe4
 800df94:	08013fec 	.word	0x08013fec

0800df98 <std>:
 800df98:	2300      	movs	r3, #0
 800df9a:	b510      	push	{r4, lr}
 800df9c:	4604      	mov	r4, r0
 800df9e:	e9c0 3300 	strd	r3, r3, [r0]
 800dfa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dfa6:	6083      	str	r3, [r0, #8]
 800dfa8:	8181      	strh	r1, [r0, #12]
 800dfaa:	6643      	str	r3, [r0, #100]	@ 0x64
 800dfac:	81c2      	strh	r2, [r0, #14]
 800dfae:	6183      	str	r3, [r0, #24]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	2208      	movs	r2, #8
 800dfb4:	305c      	adds	r0, #92	@ 0x5c
 800dfb6:	f000 f914 	bl	800e1e2 <memset>
 800dfba:	4b0d      	ldr	r3, [pc, #52]	@ (800dff0 <std+0x58>)
 800dfbc:	6223      	str	r3, [r4, #32]
 800dfbe:	4b0d      	ldr	r3, [pc, #52]	@ (800dff4 <std+0x5c>)
 800dfc0:	6263      	str	r3, [r4, #36]	@ 0x24
 800dfc2:	4b0d      	ldr	r3, [pc, #52]	@ (800dff8 <std+0x60>)
 800dfc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800dffc <std+0x64>)
 800dfc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dfca:	4b0d      	ldr	r3, [pc, #52]	@ (800e000 <std+0x68>)
 800dfcc:	61e4      	str	r4, [r4, #28]
 800dfce:	429c      	cmp	r4, r3
 800dfd0:	d006      	beq.n	800dfe0 <std+0x48>
 800dfd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dfd6:	4294      	cmp	r4, r2
 800dfd8:	d002      	beq.n	800dfe0 <std+0x48>
 800dfda:	33d0      	adds	r3, #208	@ 0xd0
 800dfdc:	429c      	cmp	r4, r3
 800dfde:	d105      	bne.n	800dfec <std+0x54>
 800dfe0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfe8:	f000 b974 	b.w	800e2d4 <__retarget_lock_init_recursive>
 800dfec:	bd10      	pop	{r4, pc}
 800dfee:	bf00      	nop
 800dff0:	0800e15d 	.word	0x0800e15d
 800dff4:	0800e17f 	.word	0x0800e17f
 800dff8:	0800e1b7 	.word	0x0800e1b7
 800dffc:	0800e1db 	.word	0x0800e1db
 800e000:	240149d4 	.word	0x240149d4

0800e004 <stdio_exit_handler>:
 800e004:	4a02      	ldr	r2, [pc, #8]	@ (800e010 <stdio_exit_handler+0xc>)
 800e006:	4903      	ldr	r1, [pc, #12]	@ (800e014 <stdio_exit_handler+0x10>)
 800e008:	4803      	ldr	r0, [pc, #12]	@ (800e018 <stdio_exit_handler+0x14>)
 800e00a:	f000 b869 	b.w	800e0e0 <_fwalk_sglue>
 800e00e:	bf00      	nop
 800e010:	24000010 	.word	0x24000010
 800e014:	080106b5 	.word	0x080106b5
 800e018:	24000020 	.word	0x24000020

0800e01c <cleanup_stdio>:
 800e01c:	6841      	ldr	r1, [r0, #4]
 800e01e:	4b0c      	ldr	r3, [pc, #48]	@ (800e050 <cleanup_stdio+0x34>)
 800e020:	4299      	cmp	r1, r3
 800e022:	b510      	push	{r4, lr}
 800e024:	4604      	mov	r4, r0
 800e026:	d001      	beq.n	800e02c <cleanup_stdio+0x10>
 800e028:	f002 fb44 	bl	80106b4 <_fclose_r>
 800e02c:	68a1      	ldr	r1, [r4, #8]
 800e02e:	4b09      	ldr	r3, [pc, #36]	@ (800e054 <cleanup_stdio+0x38>)
 800e030:	4299      	cmp	r1, r3
 800e032:	d002      	beq.n	800e03a <cleanup_stdio+0x1e>
 800e034:	4620      	mov	r0, r4
 800e036:	f002 fb3d 	bl	80106b4 <_fclose_r>
 800e03a:	68e1      	ldr	r1, [r4, #12]
 800e03c:	4b06      	ldr	r3, [pc, #24]	@ (800e058 <cleanup_stdio+0x3c>)
 800e03e:	4299      	cmp	r1, r3
 800e040:	d004      	beq.n	800e04c <cleanup_stdio+0x30>
 800e042:	4620      	mov	r0, r4
 800e044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e048:	f002 bb34 	b.w	80106b4 <_fclose_r>
 800e04c:	bd10      	pop	{r4, pc}
 800e04e:	bf00      	nop
 800e050:	240149d4 	.word	0x240149d4
 800e054:	24014a3c 	.word	0x24014a3c
 800e058:	24014aa4 	.word	0x24014aa4

0800e05c <global_stdio_init.part.0>:
 800e05c:	b510      	push	{r4, lr}
 800e05e:	4b0b      	ldr	r3, [pc, #44]	@ (800e08c <global_stdio_init.part.0+0x30>)
 800e060:	4c0b      	ldr	r4, [pc, #44]	@ (800e090 <global_stdio_init.part.0+0x34>)
 800e062:	4a0c      	ldr	r2, [pc, #48]	@ (800e094 <global_stdio_init.part.0+0x38>)
 800e064:	601a      	str	r2, [r3, #0]
 800e066:	4620      	mov	r0, r4
 800e068:	2200      	movs	r2, #0
 800e06a:	2104      	movs	r1, #4
 800e06c:	f7ff ff94 	bl	800df98 <std>
 800e070:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e074:	2201      	movs	r2, #1
 800e076:	2109      	movs	r1, #9
 800e078:	f7ff ff8e 	bl	800df98 <std>
 800e07c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e080:	2202      	movs	r2, #2
 800e082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e086:	2112      	movs	r1, #18
 800e088:	f7ff bf86 	b.w	800df98 <std>
 800e08c:	24014b0c 	.word	0x24014b0c
 800e090:	240149d4 	.word	0x240149d4
 800e094:	0800e005 	.word	0x0800e005

0800e098 <__sfp_lock_acquire>:
 800e098:	4801      	ldr	r0, [pc, #4]	@ (800e0a0 <__sfp_lock_acquire+0x8>)
 800e09a:	f000 b91d 	b.w	800e2d8 <__retarget_lock_acquire_recursive>
 800e09e:	bf00      	nop
 800e0a0:	24014b16 	.word	0x24014b16

0800e0a4 <__sfp_lock_release>:
 800e0a4:	4801      	ldr	r0, [pc, #4]	@ (800e0ac <__sfp_lock_release+0x8>)
 800e0a6:	f000 b918 	b.w	800e2da <__retarget_lock_release_recursive>
 800e0aa:	bf00      	nop
 800e0ac:	24014b16 	.word	0x24014b16

0800e0b0 <__sinit>:
 800e0b0:	b510      	push	{r4, lr}
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	f7ff fff0 	bl	800e098 <__sfp_lock_acquire>
 800e0b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0ba:	b11b      	cbz	r3, 800e0c4 <__sinit+0x14>
 800e0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0c0:	f7ff bff0 	b.w	800e0a4 <__sfp_lock_release>
 800e0c4:	4b04      	ldr	r3, [pc, #16]	@ (800e0d8 <__sinit+0x28>)
 800e0c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0c8:	4b04      	ldr	r3, [pc, #16]	@ (800e0dc <__sinit+0x2c>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d1f5      	bne.n	800e0bc <__sinit+0xc>
 800e0d0:	f7ff ffc4 	bl	800e05c <global_stdio_init.part.0>
 800e0d4:	e7f2      	b.n	800e0bc <__sinit+0xc>
 800e0d6:	bf00      	nop
 800e0d8:	0800e01d 	.word	0x0800e01d
 800e0dc:	24014b0c 	.word	0x24014b0c

0800e0e0 <_fwalk_sglue>:
 800e0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e4:	4607      	mov	r7, r0
 800e0e6:	4688      	mov	r8, r1
 800e0e8:	4614      	mov	r4, r2
 800e0ea:	2600      	movs	r6, #0
 800e0ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0f0:	f1b9 0901 	subs.w	r9, r9, #1
 800e0f4:	d505      	bpl.n	800e102 <_fwalk_sglue+0x22>
 800e0f6:	6824      	ldr	r4, [r4, #0]
 800e0f8:	2c00      	cmp	r4, #0
 800e0fa:	d1f7      	bne.n	800e0ec <_fwalk_sglue+0xc>
 800e0fc:	4630      	mov	r0, r6
 800e0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e102:	89ab      	ldrh	r3, [r5, #12]
 800e104:	2b01      	cmp	r3, #1
 800e106:	d907      	bls.n	800e118 <_fwalk_sglue+0x38>
 800e108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e10c:	3301      	adds	r3, #1
 800e10e:	d003      	beq.n	800e118 <_fwalk_sglue+0x38>
 800e110:	4629      	mov	r1, r5
 800e112:	4638      	mov	r0, r7
 800e114:	47c0      	blx	r8
 800e116:	4306      	orrs	r6, r0
 800e118:	3568      	adds	r5, #104	@ 0x68
 800e11a:	e7e9      	b.n	800e0f0 <_fwalk_sglue+0x10>

0800e11c <sprintf>:
 800e11c:	b40e      	push	{r1, r2, r3}
 800e11e:	b500      	push	{lr}
 800e120:	b09c      	sub	sp, #112	@ 0x70
 800e122:	ab1d      	add	r3, sp, #116	@ 0x74
 800e124:	9002      	str	r0, [sp, #8]
 800e126:	9006      	str	r0, [sp, #24]
 800e128:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e12c:	4809      	ldr	r0, [pc, #36]	@ (800e154 <sprintf+0x38>)
 800e12e:	9107      	str	r1, [sp, #28]
 800e130:	9104      	str	r1, [sp, #16]
 800e132:	4909      	ldr	r1, [pc, #36]	@ (800e158 <sprintf+0x3c>)
 800e134:	f853 2b04 	ldr.w	r2, [r3], #4
 800e138:	9105      	str	r1, [sp, #20]
 800e13a:	6800      	ldr	r0, [r0, #0]
 800e13c:	9301      	str	r3, [sp, #4]
 800e13e:	a902      	add	r1, sp, #8
 800e140:	f000 fc3a 	bl	800e9b8 <_svfprintf_r>
 800e144:	9b02      	ldr	r3, [sp, #8]
 800e146:	2200      	movs	r2, #0
 800e148:	701a      	strb	r2, [r3, #0]
 800e14a:	b01c      	add	sp, #112	@ 0x70
 800e14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e150:	b003      	add	sp, #12
 800e152:	4770      	bx	lr
 800e154:	2400001c 	.word	0x2400001c
 800e158:	ffff0208 	.word	0xffff0208

0800e15c <__sread>:
 800e15c:	b510      	push	{r4, lr}
 800e15e:	460c      	mov	r4, r1
 800e160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e164:	f000 f868 	bl	800e238 <_read_r>
 800e168:	2800      	cmp	r0, #0
 800e16a:	bfab      	itete	ge
 800e16c:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800e16e:	89a3      	ldrhlt	r3, [r4, #12]
 800e170:	181b      	addge	r3, r3, r0
 800e172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e176:	bfac      	ite	ge
 800e178:	6523      	strge	r3, [r4, #80]	@ 0x50
 800e17a:	81a3      	strhlt	r3, [r4, #12]
 800e17c:	bd10      	pop	{r4, pc}

0800e17e <__swrite>:
 800e17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e182:	461f      	mov	r7, r3
 800e184:	898b      	ldrh	r3, [r1, #12]
 800e186:	05db      	lsls	r3, r3, #23
 800e188:	4605      	mov	r5, r0
 800e18a:	460c      	mov	r4, r1
 800e18c:	4616      	mov	r6, r2
 800e18e:	d505      	bpl.n	800e19c <__swrite+0x1e>
 800e190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e194:	2302      	movs	r3, #2
 800e196:	2200      	movs	r2, #0
 800e198:	f000 f83c 	bl	800e214 <_lseek_r>
 800e19c:	89a3      	ldrh	r3, [r4, #12]
 800e19e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e1a6:	81a3      	strh	r3, [r4, #12]
 800e1a8:	4632      	mov	r2, r6
 800e1aa:	463b      	mov	r3, r7
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b2:	f000 b853 	b.w	800e25c <_write_r>

0800e1b6 <__sseek>:
 800e1b6:	b510      	push	{r4, lr}
 800e1b8:	460c      	mov	r4, r1
 800e1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1be:	f000 f829 	bl	800e214 <_lseek_r>
 800e1c2:	1c43      	adds	r3, r0, #1
 800e1c4:	89a3      	ldrh	r3, [r4, #12]
 800e1c6:	bf15      	itete	ne
 800e1c8:	6520      	strne	r0, [r4, #80]	@ 0x50
 800e1ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e1ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e1d2:	81a3      	strheq	r3, [r4, #12]
 800e1d4:	bf18      	it	ne
 800e1d6:	81a3      	strhne	r3, [r4, #12]
 800e1d8:	bd10      	pop	{r4, pc}

0800e1da <__sclose>:
 800e1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1de:	f000 b809 	b.w	800e1f4 <_close_r>

0800e1e2 <memset>:
 800e1e2:	4402      	add	r2, r0
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d100      	bne.n	800e1ec <memset+0xa>
 800e1ea:	4770      	bx	lr
 800e1ec:	f803 1b01 	strb.w	r1, [r3], #1
 800e1f0:	e7f9      	b.n	800e1e6 <memset+0x4>
	...

0800e1f4 <_close_r>:
 800e1f4:	b538      	push	{r3, r4, r5, lr}
 800e1f6:	4d06      	ldr	r5, [pc, #24]	@ (800e210 <_close_r+0x1c>)
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	4608      	mov	r0, r1
 800e1fe:	602b      	str	r3, [r5, #0]
 800e200:	f7f3 ffc6 	bl	8002190 <_close>
 800e204:	1c43      	adds	r3, r0, #1
 800e206:	d102      	bne.n	800e20e <_close_r+0x1a>
 800e208:	682b      	ldr	r3, [r5, #0]
 800e20a:	b103      	cbz	r3, 800e20e <_close_r+0x1a>
 800e20c:	6023      	str	r3, [r4, #0]
 800e20e:	bd38      	pop	{r3, r4, r5, pc}
 800e210:	24014b10 	.word	0x24014b10

0800e214 <_lseek_r>:
 800e214:	b538      	push	{r3, r4, r5, lr}
 800e216:	4d07      	ldr	r5, [pc, #28]	@ (800e234 <_lseek_r+0x20>)
 800e218:	4604      	mov	r4, r0
 800e21a:	4608      	mov	r0, r1
 800e21c:	4611      	mov	r1, r2
 800e21e:	2200      	movs	r2, #0
 800e220:	602a      	str	r2, [r5, #0]
 800e222:	461a      	mov	r2, r3
 800e224:	f7f3 ffdb 	bl	80021de <_lseek>
 800e228:	1c43      	adds	r3, r0, #1
 800e22a:	d102      	bne.n	800e232 <_lseek_r+0x1e>
 800e22c:	682b      	ldr	r3, [r5, #0]
 800e22e:	b103      	cbz	r3, 800e232 <_lseek_r+0x1e>
 800e230:	6023      	str	r3, [r4, #0]
 800e232:	bd38      	pop	{r3, r4, r5, pc}
 800e234:	24014b10 	.word	0x24014b10

0800e238 <_read_r>:
 800e238:	b538      	push	{r3, r4, r5, lr}
 800e23a:	4d07      	ldr	r5, [pc, #28]	@ (800e258 <_read_r+0x20>)
 800e23c:	4604      	mov	r4, r0
 800e23e:	4608      	mov	r0, r1
 800e240:	4611      	mov	r1, r2
 800e242:	2200      	movs	r2, #0
 800e244:	602a      	str	r2, [r5, #0]
 800e246:	461a      	mov	r2, r3
 800e248:	f7f3 ff69 	bl	800211e <_read>
 800e24c:	1c43      	adds	r3, r0, #1
 800e24e:	d102      	bne.n	800e256 <_read_r+0x1e>
 800e250:	682b      	ldr	r3, [r5, #0]
 800e252:	b103      	cbz	r3, 800e256 <_read_r+0x1e>
 800e254:	6023      	str	r3, [r4, #0]
 800e256:	bd38      	pop	{r3, r4, r5, pc}
 800e258:	24014b10 	.word	0x24014b10

0800e25c <_write_r>:
 800e25c:	b538      	push	{r3, r4, r5, lr}
 800e25e:	4d07      	ldr	r5, [pc, #28]	@ (800e27c <_write_r+0x20>)
 800e260:	4604      	mov	r4, r0
 800e262:	4608      	mov	r0, r1
 800e264:	4611      	mov	r1, r2
 800e266:	2200      	movs	r2, #0
 800e268:	602a      	str	r2, [r5, #0]
 800e26a:	461a      	mov	r2, r3
 800e26c:	f7f3 ff74 	bl	8002158 <_write>
 800e270:	1c43      	adds	r3, r0, #1
 800e272:	d102      	bne.n	800e27a <_write_r+0x1e>
 800e274:	682b      	ldr	r3, [r5, #0]
 800e276:	b103      	cbz	r3, 800e27a <_write_r+0x1e>
 800e278:	6023      	str	r3, [r4, #0]
 800e27a:	bd38      	pop	{r3, r4, r5, pc}
 800e27c:	24014b10 	.word	0x24014b10

0800e280 <__errno>:
 800e280:	4b01      	ldr	r3, [pc, #4]	@ (800e288 <__errno+0x8>)
 800e282:	6818      	ldr	r0, [r3, #0]
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	2400001c 	.word	0x2400001c

0800e28c <__libc_init_array>:
 800e28c:	b570      	push	{r4, r5, r6, lr}
 800e28e:	4d0d      	ldr	r5, [pc, #52]	@ (800e2c4 <__libc_init_array+0x38>)
 800e290:	4c0d      	ldr	r4, [pc, #52]	@ (800e2c8 <__libc_init_array+0x3c>)
 800e292:	1b64      	subs	r4, r4, r5
 800e294:	10a4      	asrs	r4, r4, #2
 800e296:	2600      	movs	r6, #0
 800e298:	42a6      	cmp	r6, r4
 800e29a:	d109      	bne.n	800e2b0 <__libc_init_array+0x24>
 800e29c:	4d0b      	ldr	r5, [pc, #44]	@ (800e2cc <__libc_init_array+0x40>)
 800e29e:	4c0c      	ldr	r4, [pc, #48]	@ (800e2d0 <__libc_init_array+0x44>)
 800e2a0:	f005 fdec 	bl	8013e7c <_init>
 800e2a4:	1b64      	subs	r4, r4, r5
 800e2a6:	10a4      	asrs	r4, r4, #2
 800e2a8:	2600      	movs	r6, #0
 800e2aa:	42a6      	cmp	r6, r4
 800e2ac:	d105      	bne.n	800e2ba <__libc_init_array+0x2e>
 800e2ae:	bd70      	pop	{r4, r5, r6, pc}
 800e2b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2b4:	4798      	blx	r3
 800e2b6:	3601      	adds	r6, #1
 800e2b8:	e7ee      	b.n	800e298 <__libc_init_array+0xc>
 800e2ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2be:	4798      	blx	r3
 800e2c0:	3601      	adds	r6, #1
 800e2c2:	e7f2      	b.n	800e2aa <__libc_init_array+0x1e>
 800e2c4:	080166a8 	.word	0x080166a8
 800e2c8:	080166a8 	.word	0x080166a8
 800e2cc:	080166a8 	.word	0x080166a8
 800e2d0:	080166b0 	.word	0x080166b0

0800e2d4 <__retarget_lock_init_recursive>:
 800e2d4:	4770      	bx	lr

0800e2d6 <__retarget_lock_close_recursive>:
 800e2d6:	4770      	bx	lr

0800e2d8 <__retarget_lock_acquire_recursive>:
 800e2d8:	4770      	bx	lr

0800e2da <__retarget_lock_release_recursive>:
 800e2da:	4770      	bx	lr

0800e2dc <register_fini>:
 800e2dc:	4b02      	ldr	r3, [pc, #8]	@ (800e2e8 <register_fini+0xc>)
 800e2de:	b113      	cbz	r3, 800e2e6 <register_fini+0xa>
 800e2e0:	4802      	ldr	r0, [pc, #8]	@ (800e2ec <register_fini+0x10>)
 800e2e2:	f000 b805 	b.w	800e2f0 <atexit>
 800e2e6:	4770      	bx	lr
 800e2e8:	00000000 	.word	0x00000000
 800e2ec:	08010d65 	.word	0x08010d65

0800e2f0 <atexit>:
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	4601      	mov	r1, r0
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f002 bd9a 	b.w	8010e30 <__register_exitproc>

0800e2fc <_malloc_trim_r>:
 800e2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e300:	4606      	mov	r6, r0
 800e302:	2008      	movs	r0, #8
 800e304:	4689      	mov	r9, r1
 800e306:	f002 fd41 	bl	8010d8c <sysconf>
 800e30a:	4f24      	ldr	r7, [pc, #144]	@ (800e39c <_malloc_trim_r+0xa0>)
 800e30c:	4680      	mov	r8, r0
 800e30e:	4630      	mov	r0, r6
 800e310:	f000 fb44 	bl	800e99c <__malloc_lock>
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	685d      	ldr	r5, [r3, #4]
 800e318:	f025 0503 	bic.w	r5, r5, #3
 800e31c:	f1a5 0411 	sub.w	r4, r5, #17
 800e320:	eba4 0409 	sub.w	r4, r4, r9
 800e324:	4444      	add	r4, r8
 800e326:	fbb4 f4f8 	udiv	r4, r4, r8
 800e32a:	3c01      	subs	r4, #1
 800e32c:	fb08 f404 	mul.w	r4, r8, r4
 800e330:	45a0      	cmp	r8, r4
 800e332:	dd05      	ble.n	800e340 <_malloc_trim_r+0x44>
 800e334:	4630      	mov	r0, r6
 800e336:	f000 fb37 	bl	800e9a8 <__malloc_unlock>
 800e33a:	2000      	movs	r0, #0
 800e33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e340:	2100      	movs	r1, #0
 800e342:	4630      	mov	r0, r6
 800e344:	f002 fcfe 	bl	8010d44 <_sbrk_r>
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	442b      	add	r3, r5
 800e34c:	4298      	cmp	r0, r3
 800e34e:	d1f1      	bne.n	800e334 <_malloc_trim_r+0x38>
 800e350:	4261      	negs	r1, r4
 800e352:	4630      	mov	r0, r6
 800e354:	f002 fcf6 	bl	8010d44 <_sbrk_r>
 800e358:	3001      	adds	r0, #1
 800e35a:	d110      	bne.n	800e37e <_malloc_trim_r+0x82>
 800e35c:	2100      	movs	r1, #0
 800e35e:	4630      	mov	r0, r6
 800e360:	f002 fcf0 	bl	8010d44 <_sbrk_r>
 800e364:	68ba      	ldr	r2, [r7, #8]
 800e366:	1a83      	subs	r3, r0, r2
 800e368:	2b0f      	cmp	r3, #15
 800e36a:	dde3      	ble.n	800e334 <_malloc_trim_r+0x38>
 800e36c:	490c      	ldr	r1, [pc, #48]	@ (800e3a0 <_malloc_trim_r+0xa4>)
 800e36e:	6809      	ldr	r1, [r1, #0]
 800e370:	1a40      	subs	r0, r0, r1
 800e372:	490c      	ldr	r1, [pc, #48]	@ (800e3a4 <_malloc_trim_r+0xa8>)
 800e374:	f043 0301 	orr.w	r3, r3, #1
 800e378:	6008      	str	r0, [r1, #0]
 800e37a:	6053      	str	r3, [r2, #4]
 800e37c:	e7da      	b.n	800e334 <_malloc_trim_r+0x38>
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	4a08      	ldr	r2, [pc, #32]	@ (800e3a4 <_malloc_trim_r+0xa8>)
 800e382:	1b2d      	subs	r5, r5, r4
 800e384:	f045 0501 	orr.w	r5, r5, #1
 800e388:	605d      	str	r5, [r3, #4]
 800e38a:	6813      	ldr	r3, [r2, #0]
 800e38c:	4630      	mov	r0, r6
 800e38e:	1b1b      	subs	r3, r3, r4
 800e390:	6013      	str	r3, [r2, #0]
 800e392:	f000 fb09 	bl	800e9a8 <__malloc_unlock>
 800e396:	2001      	movs	r0, #1
 800e398:	e7d0      	b.n	800e33c <_malloc_trim_r+0x40>
 800e39a:	bf00      	nop
 800e39c:	2400014c 	.word	0x2400014c
 800e3a0:	24000144 	.word	0x24000144
 800e3a4:	24014b1c 	.word	0x24014b1c

0800e3a8 <_free_r>:
 800e3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	460f      	mov	r7, r1
 800e3ae:	2900      	cmp	r1, #0
 800e3b0:	f000 80b1 	beq.w	800e516 <_free_r+0x16e>
 800e3b4:	f000 faf2 	bl	800e99c <__malloc_lock>
 800e3b8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e3bc:	4d56      	ldr	r5, [pc, #344]	@ (800e518 <_free_r+0x170>)
 800e3be:	f022 0001 	bic.w	r0, r2, #1
 800e3c2:	f1a7 0308 	sub.w	r3, r7, #8
 800e3c6:	eb03 0c00 	add.w	ip, r3, r0
 800e3ca:	68a9      	ldr	r1, [r5, #8]
 800e3cc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800e3d0:	4561      	cmp	r1, ip
 800e3d2:	f026 0603 	bic.w	r6, r6, #3
 800e3d6:	f002 0201 	and.w	r2, r2, #1
 800e3da:	d11b      	bne.n	800e414 <_free_r+0x6c>
 800e3dc:	4406      	add	r6, r0
 800e3de:	b93a      	cbnz	r2, 800e3f0 <_free_r+0x48>
 800e3e0:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800e3e4:	1a9b      	subs	r3, r3, r2
 800e3e6:	4416      	add	r6, r2
 800e3e8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800e3ec:	60ca      	str	r2, [r1, #12]
 800e3ee:	6091      	str	r1, [r2, #8]
 800e3f0:	f046 0201 	orr.w	r2, r6, #1
 800e3f4:	605a      	str	r2, [r3, #4]
 800e3f6:	60ab      	str	r3, [r5, #8]
 800e3f8:	4b48      	ldr	r3, [pc, #288]	@ (800e51c <_free_r+0x174>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	42b3      	cmp	r3, r6
 800e3fe:	d804      	bhi.n	800e40a <_free_r+0x62>
 800e400:	4b47      	ldr	r3, [pc, #284]	@ (800e520 <_free_r+0x178>)
 800e402:	4620      	mov	r0, r4
 800e404:	6819      	ldr	r1, [r3, #0]
 800e406:	f7ff ff79 	bl	800e2fc <_malloc_trim_r>
 800e40a:	4620      	mov	r0, r4
 800e40c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e410:	f000 baca 	b.w	800e9a8 <__malloc_unlock>
 800e414:	f8cc 6004 	str.w	r6, [ip, #4]
 800e418:	2a00      	cmp	r2, #0
 800e41a:	d138      	bne.n	800e48e <_free_r+0xe6>
 800e41c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800e420:	1a5b      	subs	r3, r3, r1
 800e422:	4408      	add	r0, r1
 800e424:	6899      	ldr	r1, [r3, #8]
 800e426:	f105 0708 	add.w	r7, r5, #8
 800e42a:	42b9      	cmp	r1, r7
 800e42c:	d031      	beq.n	800e492 <_free_r+0xea>
 800e42e:	68df      	ldr	r7, [r3, #12]
 800e430:	60cf      	str	r7, [r1, #12]
 800e432:	60b9      	str	r1, [r7, #8]
 800e434:	eb0c 0106 	add.w	r1, ip, r6
 800e438:	6849      	ldr	r1, [r1, #4]
 800e43a:	07c9      	lsls	r1, r1, #31
 800e43c:	d40b      	bmi.n	800e456 <_free_r+0xae>
 800e43e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800e442:	4430      	add	r0, r6
 800e444:	bb3a      	cbnz	r2, 800e496 <_free_r+0xee>
 800e446:	4e37      	ldr	r6, [pc, #220]	@ (800e524 <_free_r+0x17c>)
 800e448:	42b1      	cmp	r1, r6
 800e44a:	d124      	bne.n	800e496 <_free_r+0xee>
 800e44c:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800e450:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800e454:	2201      	movs	r2, #1
 800e456:	f040 0101 	orr.w	r1, r0, #1
 800e45a:	6059      	str	r1, [r3, #4]
 800e45c:	5018      	str	r0, [r3, r0]
 800e45e:	2a00      	cmp	r2, #0
 800e460:	d1d3      	bne.n	800e40a <_free_r+0x62>
 800e462:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800e466:	d21b      	bcs.n	800e4a0 <_free_r+0xf8>
 800e468:	08c2      	lsrs	r2, r0, #3
 800e46a:	2101      	movs	r1, #1
 800e46c:	0940      	lsrs	r0, r0, #5
 800e46e:	4081      	lsls	r1, r0
 800e470:	6868      	ldr	r0, [r5, #4]
 800e472:	3201      	adds	r2, #1
 800e474:	4301      	orrs	r1, r0
 800e476:	6069      	str	r1, [r5, #4]
 800e478:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800e47c:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800e480:	3908      	subs	r1, #8
 800e482:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e486:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800e48a:	60c3      	str	r3, [r0, #12]
 800e48c:	e7bd      	b.n	800e40a <_free_r+0x62>
 800e48e:	2200      	movs	r2, #0
 800e490:	e7d0      	b.n	800e434 <_free_r+0x8c>
 800e492:	2201      	movs	r2, #1
 800e494:	e7ce      	b.n	800e434 <_free_r+0x8c>
 800e496:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800e49a:	60ce      	str	r6, [r1, #12]
 800e49c:	60b1      	str	r1, [r6, #8]
 800e49e:	e7da      	b.n	800e456 <_free_r+0xae>
 800e4a0:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800e4a4:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800e4a8:	d214      	bcs.n	800e4d4 <_free_r+0x12c>
 800e4aa:	0982      	lsrs	r2, r0, #6
 800e4ac:	3238      	adds	r2, #56	@ 0x38
 800e4ae:	1c51      	adds	r1, r2, #1
 800e4b0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800e4b4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800e4b8:	428e      	cmp	r6, r1
 800e4ba:	d125      	bne.n	800e508 <_free_r+0x160>
 800e4bc:	2001      	movs	r0, #1
 800e4be:	1092      	asrs	r2, r2, #2
 800e4c0:	fa00 f202 	lsl.w	r2, r0, r2
 800e4c4:	6868      	ldr	r0, [r5, #4]
 800e4c6:	4302      	orrs	r2, r0
 800e4c8:	606a      	str	r2, [r5, #4]
 800e4ca:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800e4ce:	60b3      	str	r3, [r6, #8]
 800e4d0:	60cb      	str	r3, [r1, #12]
 800e4d2:	e79a      	b.n	800e40a <_free_r+0x62>
 800e4d4:	2a14      	cmp	r2, #20
 800e4d6:	d801      	bhi.n	800e4dc <_free_r+0x134>
 800e4d8:	325b      	adds	r2, #91	@ 0x5b
 800e4da:	e7e8      	b.n	800e4ae <_free_r+0x106>
 800e4dc:	2a54      	cmp	r2, #84	@ 0x54
 800e4de:	d802      	bhi.n	800e4e6 <_free_r+0x13e>
 800e4e0:	0b02      	lsrs	r2, r0, #12
 800e4e2:	326e      	adds	r2, #110	@ 0x6e
 800e4e4:	e7e3      	b.n	800e4ae <_free_r+0x106>
 800e4e6:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800e4ea:	d802      	bhi.n	800e4f2 <_free_r+0x14a>
 800e4ec:	0bc2      	lsrs	r2, r0, #15
 800e4ee:	3277      	adds	r2, #119	@ 0x77
 800e4f0:	e7dd      	b.n	800e4ae <_free_r+0x106>
 800e4f2:	f240 5154 	movw	r1, #1364	@ 0x554
 800e4f6:	428a      	cmp	r2, r1
 800e4f8:	bf9a      	itte	ls
 800e4fa:	0c82      	lsrls	r2, r0, #18
 800e4fc:	327c      	addls	r2, #124	@ 0x7c
 800e4fe:	227e      	movhi	r2, #126	@ 0x7e
 800e500:	e7d5      	b.n	800e4ae <_free_r+0x106>
 800e502:	6889      	ldr	r1, [r1, #8]
 800e504:	428e      	cmp	r6, r1
 800e506:	d004      	beq.n	800e512 <_free_r+0x16a>
 800e508:	684a      	ldr	r2, [r1, #4]
 800e50a:	f022 0203 	bic.w	r2, r2, #3
 800e50e:	4282      	cmp	r2, r0
 800e510:	d8f7      	bhi.n	800e502 <_free_r+0x15a>
 800e512:	68ce      	ldr	r6, [r1, #12]
 800e514:	e7d9      	b.n	800e4ca <_free_r+0x122>
 800e516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e518:	2400014c 	.word	0x2400014c
 800e51c:	24000148 	.word	0x24000148
 800e520:	24014b4c 	.word	0x24014b4c
 800e524:	24000154 	.word	0x24000154

0800e528 <_malloc_r>:
 800e528:	f101 030b 	add.w	r3, r1, #11
 800e52c:	2b16      	cmp	r3, #22
 800e52e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e532:	4605      	mov	r5, r0
 800e534:	d906      	bls.n	800e544 <_malloc_r+0x1c>
 800e536:	f033 0707 	bics.w	r7, r3, #7
 800e53a:	d504      	bpl.n	800e546 <_malloc_r+0x1e>
 800e53c:	230c      	movs	r3, #12
 800e53e:	602b      	str	r3, [r5, #0]
 800e540:	2400      	movs	r4, #0
 800e542:	e1a3      	b.n	800e88c <_malloc_r+0x364>
 800e544:	2710      	movs	r7, #16
 800e546:	42b9      	cmp	r1, r7
 800e548:	d8f8      	bhi.n	800e53c <_malloc_r+0x14>
 800e54a:	4628      	mov	r0, r5
 800e54c:	f000 fa26 	bl	800e99c <__malloc_lock>
 800e550:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800e554:	4eaf      	ldr	r6, [pc, #700]	@ (800e814 <_malloc_r+0x2ec>)
 800e556:	d237      	bcs.n	800e5c8 <_malloc_r+0xa0>
 800e558:	f107 0208 	add.w	r2, r7, #8
 800e55c:	4432      	add	r2, r6
 800e55e:	f1a2 0108 	sub.w	r1, r2, #8
 800e562:	6854      	ldr	r4, [r2, #4]
 800e564:	428c      	cmp	r4, r1
 800e566:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800e56a:	d102      	bne.n	800e572 <_malloc_r+0x4a>
 800e56c:	68d4      	ldr	r4, [r2, #12]
 800e56e:	42a2      	cmp	r2, r4
 800e570:	d010      	beq.n	800e594 <_malloc_r+0x6c>
 800e572:	6863      	ldr	r3, [r4, #4]
 800e574:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800e578:	f023 0303 	bic.w	r3, r3, #3
 800e57c:	60ca      	str	r2, [r1, #12]
 800e57e:	4423      	add	r3, r4
 800e580:	6091      	str	r1, [r2, #8]
 800e582:	685a      	ldr	r2, [r3, #4]
 800e584:	f042 0201 	orr.w	r2, r2, #1
 800e588:	605a      	str	r2, [r3, #4]
 800e58a:	4628      	mov	r0, r5
 800e58c:	f000 fa0c 	bl	800e9a8 <__malloc_unlock>
 800e590:	3408      	adds	r4, #8
 800e592:	e17b      	b.n	800e88c <_malloc_r+0x364>
 800e594:	3302      	adds	r3, #2
 800e596:	6934      	ldr	r4, [r6, #16]
 800e598:	499f      	ldr	r1, [pc, #636]	@ (800e818 <_malloc_r+0x2f0>)
 800e59a:	428c      	cmp	r4, r1
 800e59c:	d077      	beq.n	800e68e <_malloc_r+0x166>
 800e59e:	6862      	ldr	r2, [r4, #4]
 800e5a0:	f022 0c03 	bic.w	ip, r2, #3
 800e5a4:	ebac 0007 	sub.w	r0, ip, r7
 800e5a8:	280f      	cmp	r0, #15
 800e5aa:	dd48      	ble.n	800e63e <_malloc_r+0x116>
 800e5ac:	19e2      	adds	r2, r4, r7
 800e5ae:	f040 0301 	orr.w	r3, r0, #1
 800e5b2:	f047 0701 	orr.w	r7, r7, #1
 800e5b6:	6067      	str	r7, [r4, #4]
 800e5b8:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800e5bc:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800e5c0:	6053      	str	r3, [r2, #4]
 800e5c2:	f844 000c 	str.w	r0, [r4, ip]
 800e5c6:	e7e0      	b.n	800e58a <_malloc_r+0x62>
 800e5c8:	0a7b      	lsrs	r3, r7, #9
 800e5ca:	d02a      	beq.n	800e622 <_malloc_r+0xfa>
 800e5cc:	2b04      	cmp	r3, #4
 800e5ce:	d812      	bhi.n	800e5f6 <_malloc_r+0xce>
 800e5d0:	09bb      	lsrs	r3, r7, #6
 800e5d2:	3338      	adds	r3, #56	@ 0x38
 800e5d4:	1c5a      	adds	r2, r3, #1
 800e5d6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800e5da:	f1a2 0c08 	sub.w	ip, r2, #8
 800e5de:	6854      	ldr	r4, [r2, #4]
 800e5e0:	4564      	cmp	r4, ip
 800e5e2:	d006      	beq.n	800e5f2 <_malloc_r+0xca>
 800e5e4:	6862      	ldr	r2, [r4, #4]
 800e5e6:	f022 0203 	bic.w	r2, r2, #3
 800e5ea:	1bd0      	subs	r0, r2, r7
 800e5ec:	280f      	cmp	r0, #15
 800e5ee:	dd1c      	ble.n	800e62a <_malloc_r+0x102>
 800e5f0:	3b01      	subs	r3, #1
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	e7cf      	b.n	800e596 <_malloc_r+0x6e>
 800e5f6:	2b14      	cmp	r3, #20
 800e5f8:	d801      	bhi.n	800e5fe <_malloc_r+0xd6>
 800e5fa:	335b      	adds	r3, #91	@ 0x5b
 800e5fc:	e7ea      	b.n	800e5d4 <_malloc_r+0xac>
 800e5fe:	2b54      	cmp	r3, #84	@ 0x54
 800e600:	d802      	bhi.n	800e608 <_malloc_r+0xe0>
 800e602:	0b3b      	lsrs	r3, r7, #12
 800e604:	336e      	adds	r3, #110	@ 0x6e
 800e606:	e7e5      	b.n	800e5d4 <_malloc_r+0xac>
 800e608:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800e60c:	d802      	bhi.n	800e614 <_malloc_r+0xec>
 800e60e:	0bfb      	lsrs	r3, r7, #15
 800e610:	3377      	adds	r3, #119	@ 0x77
 800e612:	e7df      	b.n	800e5d4 <_malloc_r+0xac>
 800e614:	f240 5254 	movw	r2, #1364	@ 0x554
 800e618:	4293      	cmp	r3, r2
 800e61a:	d804      	bhi.n	800e626 <_malloc_r+0xfe>
 800e61c:	0cbb      	lsrs	r3, r7, #18
 800e61e:	337c      	adds	r3, #124	@ 0x7c
 800e620:	e7d8      	b.n	800e5d4 <_malloc_r+0xac>
 800e622:	233f      	movs	r3, #63	@ 0x3f
 800e624:	e7d6      	b.n	800e5d4 <_malloc_r+0xac>
 800e626:	237e      	movs	r3, #126	@ 0x7e
 800e628:	e7d4      	b.n	800e5d4 <_malloc_r+0xac>
 800e62a:	2800      	cmp	r0, #0
 800e62c:	68e1      	ldr	r1, [r4, #12]
 800e62e:	db04      	blt.n	800e63a <_malloc_r+0x112>
 800e630:	68a3      	ldr	r3, [r4, #8]
 800e632:	60d9      	str	r1, [r3, #12]
 800e634:	608b      	str	r3, [r1, #8]
 800e636:	18a3      	adds	r3, r4, r2
 800e638:	e7a3      	b.n	800e582 <_malloc_r+0x5a>
 800e63a:	460c      	mov	r4, r1
 800e63c:	e7d0      	b.n	800e5e0 <_malloc_r+0xb8>
 800e63e:	2800      	cmp	r0, #0
 800e640:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800e644:	db07      	blt.n	800e656 <_malloc_r+0x12e>
 800e646:	44a4      	add	ip, r4
 800e648:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800e64c:	f043 0301 	orr.w	r3, r3, #1
 800e650:	f8cc 3004 	str.w	r3, [ip, #4]
 800e654:	e799      	b.n	800e58a <_malloc_r+0x62>
 800e656:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800e65a:	6870      	ldr	r0, [r6, #4]
 800e65c:	f080 8095 	bcs.w	800e78a <_malloc_r+0x262>
 800e660:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800e664:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800e668:	f04f 0c01 	mov.w	ip, #1
 800e66c:	3201      	adds	r2, #1
 800e66e:	fa0c fc0e 	lsl.w	ip, ip, lr
 800e672:	ea4c 0000 	orr.w	r0, ip, r0
 800e676:	6070      	str	r0, [r6, #4]
 800e678:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800e67c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800e680:	3808      	subs	r0, #8
 800e682:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800e686:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800e68a:	f8cc 400c 	str.w	r4, [ip, #12]
 800e68e:	1098      	asrs	r0, r3, #2
 800e690:	2201      	movs	r2, #1
 800e692:	4082      	lsls	r2, r0
 800e694:	6870      	ldr	r0, [r6, #4]
 800e696:	4290      	cmp	r0, r2
 800e698:	d326      	bcc.n	800e6e8 <_malloc_r+0x1c0>
 800e69a:	4210      	tst	r0, r2
 800e69c:	d106      	bne.n	800e6ac <_malloc_r+0x184>
 800e69e:	f023 0303 	bic.w	r3, r3, #3
 800e6a2:	0052      	lsls	r2, r2, #1
 800e6a4:	4210      	tst	r0, r2
 800e6a6:	f103 0304 	add.w	r3, r3, #4
 800e6aa:	d0fa      	beq.n	800e6a2 <_malloc_r+0x17a>
 800e6ac:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800e6b0:	46c1      	mov	r9, r8
 800e6b2:	469e      	mov	lr, r3
 800e6b4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800e6b8:	454c      	cmp	r4, r9
 800e6ba:	f040 80b9 	bne.w	800e830 <_malloc_r+0x308>
 800e6be:	f10e 0e01 	add.w	lr, lr, #1
 800e6c2:	f01e 0f03 	tst.w	lr, #3
 800e6c6:	f109 0908 	add.w	r9, r9, #8
 800e6ca:	d1f3      	bne.n	800e6b4 <_malloc_r+0x18c>
 800e6cc:	0798      	lsls	r0, r3, #30
 800e6ce:	f040 80e3 	bne.w	800e898 <_malloc_r+0x370>
 800e6d2:	6873      	ldr	r3, [r6, #4]
 800e6d4:	ea23 0302 	bic.w	r3, r3, r2
 800e6d8:	6073      	str	r3, [r6, #4]
 800e6da:	6870      	ldr	r0, [r6, #4]
 800e6dc:	0052      	lsls	r2, r2, #1
 800e6de:	4290      	cmp	r0, r2
 800e6e0:	d302      	bcc.n	800e6e8 <_malloc_r+0x1c0>
 800e6e2:	2a00      	cmp	r2, #0
 800e6e4:	f040 80e5 	bne.w	800e8b2 <_malloc_r+0x38a>
 800e6e8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800e6ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e6f0:	f023 0903 	bic.w	r9, r3, #3
 800e6f4:	45b9      	cmp	r9, r7
 800e6f6:	d304      	bcc.n	800e702 <_malloc_r+0x1da>
 800e6f8:	eba9 0207 	sub.w	r2, r9, r7
 800e6fc:	2a0f      	cmp	r2, #15
 800e6fe:	f300 8141 	bgt.w	800e984 <_malloc_r+0x45c>
 800e702:	4b46      	ldr	r3, [pc, #280]	@ (800e81c <_malloc_r+0x2f4>)
 800e704:	6819      	ldr	r1, [r3, #0]
 800e706:	3110      	adds	r1, #16
 800e708:	4439      	add	r1, r7
 800e70a:	2008      	movs	r0, #8
 800e70c:	9101      	str	r1, [sp, #4]
 800e70e:	f002 fb3d 	bl	8010d8c <sysconf>
 800e712:	4a43      	ldr	r2, [pc, #268]	@ (800e820 <_malloc_r+0x2f8>)
 800e714:	9901      	ldr	r1, [sp, #4]
 800e716:	6813      	ldr	r3, [r2, #0]
 800e718:	3301      	adds	r3, #1
 800e71a:	bf1f      	itttt	ne
 800e71c:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 800e720:	1809      	addne	r1, r1, r0
 800e722:	4243      	negne	r3, r0
 800e724:	4019      	andne	r1, r3
 800e726:	4680      	mov	r8, r0
 800e728:	4628      	mov	r0, r5
 800e72a:	9101      	str	r1, [sp, #4]
 800e72c:	f002 fb0a 	bl	8010d44 <_sbrk_r>
 800e730:	1c42      	adds	r2, r0, #1
 800e732:	eb0a 0b09 	add.w	fp, sl, r9
 800e736:	4604      	mov	r4, r0
 800e738:	f000 80f7 	beq.w	800e92a <_malloc_r+0x402>
 800e73c:	4583      	cmp	fp, r0
 800e73e:	9901      	ldr	r1, [sp, #4]
 800e740:	4a37      	ldr	r2, [pc, #220]	@ (800e820 <_malloc_r+0x2f8>)
 800e742:	d902      	bls.n	800e74a <_malloc_r+0x222>
 800e744:	45b2      	cmp	sl, r6
 800e746:	f040 80f0 	bne.w	800e92a <_malloc_r+0x402>
 800e74a:	4b36      	ldr	r3, [pc, #216]	@ (800e824 <_malloc_r+0x2fc>)
 800e74c:	6818      	ldr	r0, [r3, #0]
 800e74e:	45a3      	cmp	fp, r4
 800e750:	eb00 0e01 	add.w	lr, r0, r1
 800e754:	f8c3 e000 	str.w	lr, [r3]
 800e758:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800e75c:	f040 80ab 	bne.w	800e8b6 <_malloc_r+0x38e>
 800e760:	ea1b 0f0c 	tst.w	fp, ip
 800e764:	f040 80a7 	bne.w	800e8b6 <_malloc_r+0x38e>
 800e768:	68b2      	ldr	r2, [r6, #8]
 800e76a:	4449      	add	r1, r9
 800e76c:	f041 0101 	orr.w	r1, r1, #1
 800e770:	6051      	str	r1, [r2, #4]
 800e772:	4a2d      	ldr	r2, [pc, #180]	@ (800e828 <_malloc_r+0x300>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	6811      	ldr	r1, [r2, #0]
 800e778:	428b      	cmp	r3, r1
 800e77a:	bf88      	it	hi
 800e77c:	6013      	strhi	r3, [r2, #0]
 800e77e:	4a2b      	ldr	r2, [pc, #172]	@ (800e82c <_malloc_r+0x304>)
 800e780:	6811      	ldr	r1, [r2, #0]
 800e782:	428b      	cmp	r3, r1
 800e784:	bf88      	it	hi
 800e786:	6013      	strhi	r3, [r2, #0]
 800e788:	e0cf      	b.n	800e92a <_malloc_r+0x402>
 800e78a:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800e78e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800e792:	d218      	bcs.n	800e7c6 <_malloc_r+0x29e>
 800e794:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800e798:	3238      	adds	r2, #56	@ 0x38
 800e79a:	f102 0e01 	add.w	lr, r2, #1
 800e79e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800e7a2:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800e7a6:	45f0      	cmp	r8, lr
 800e7a8:	d12b      	bne.n	800e802 <_malloc_r+0x2da>
 800e7aa:	1092      	asrs	r2, r2, #2
 800e7ac:	f04f 0c01 	mov.w	ip, #1
 800e7b0:	fa0c f202 	lsl.w	r2, ip, r2
 800e7b4:	4302      	orrs	r2, r0
 800e7b6:	6072      	str	r2, [r6, #4]
 800e7b8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800e7bc:	f8c8 4008 	str.w	r4, [r8, #8]
 800e7c0:	f8ce 400c 	str.w	r4, [lr, #12]
 800e7c4:	e763      	b.n	800e68e <_malloc_r+0x166>
 800e7c6:	2a14      	cmp	r2, #20
 800e7c8:	d801      	bhi.n	800e7ce <_malloc_r+0x2a6>
 800e7ca:	325b      	adds	r2, #91	@ 0x5b
 800e7cc:	e7e5      	b.n	800e79a <_malloc_r+0x272>
 800e7ce:	2a54      	cmp	r2, #84	@ 0x54
 800e7d0:	d803      	bhi.n	800e7da <_malloc_r+0x2b2>
 800e7d2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800e7d6:	326e      	adds	r2, #110	@ 0x6e
 800e7d8:	e7df      	b.n	800e79a <_malloc_r+0x272>
 800e7da:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800e7de:	d803      	bhi.n	800e7e8 <_malloc_r+0x2c0>
 800e7e0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800e7e4:	3277      	adds	r2, #119	@ 0x77
 800e7e6:	e7d8      	b.n	800e79a <_malloc_r+0x272>
 800e7e8:	f240 5e54 	movw	lr, #1364	@ 0x554
 800e7ec:	4572      	cmp	r2, lr
 800e7ee:	bf9a      	itte	ls
 800e7f0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800e7f4:	327c      	addls	r2, #124	@ 0x7c
 800e7f6:	227e      	movhi	r2, #126	@ 0x7e
 800e7f8:	e7cf      	b.n	800e79a <_malloc_r+0x272>
 800e7fa:	f8de e008 	ldr.w	lr, [lr, #8]
 800e7fe:	45f0      	cmp	r8, lr
 800e800:	d005      	beq.n	800e80e <_malloc_r+0x2e6>
 800e802:	f8de 2004 	ldr.w	r2, [lr, #4]
 800e806:	f022 0203 	bic.w	r2, r2, #3
 800e80a:	4562      	cmp	r2, ip
 800e80c:	d8f5      	bhi.n	800e7fa <_malloc_r+0x2d2>
 800e80e:	f8de 800c 	ldr.w	r8, [lr, #12]
 800e812:	e7d1      	b.n	800e7b8 <_malloc_r+0x290>
 800e814:	2400014c 	.word	0x2400014c
 800e818:	24000154 	.word	0x24000154
 800e81c:	24014b4c 	.word	0x24014b4c
 800e820:	24000144 	.word	0x24000144
 800e824:	24014b1c 	.word	0x24014b1c
 800e828:	24014b48 	.word	0x24014b48
 800e82c:	24014b44 	.word	0x24014b44
 800e830:	6860      	ldr	r0, [r4, #4]
 800e832:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800e836:	f020 0003 	bic.w	r0, r0, #3
 800e83a:	eba0 0a07 	sub.w	sl, r0, r7
 800e83e:	f1ba 0f0f 	cmp.w	sl, #15
 800e842:	dd12      	ble.n	800e86a <_malloc_r+0x342>
 800e844:	68a3      	ldr	r3, [r4, #8]
 800e846:	19e2      	adds	r2, r4, r7
 800e848:	f047 0701 	orr.w	r7, r7, #1
 800e84c:	6067      	str	r7, [r4, #4]
 800e84e:	f8c3 c00c 	str.w	ip, [r3, #12]
 800e852:	f8cc 3008 	str.w	r3, [ip, #8]
 800e856:	f04a 0301 	orr.w	r3, sl, #1
 800e85a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800e85e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800e862:	6053      	str	r3, [r2, #4]
 800e864:	f844 a000 	str.w	sl, [r4, r0]
 800e868:	e68f      	b.n	800e58a <_malloc_r+0x62>
 800e86a:	f1ba 0f00 	cmp.w	sl, #0
 800e86e:	db11      	blt.n	800e894 <_malloc_r+0x36c>
 800e870:	4420      	add	r0, r4
 800e872:	6843      	ldr	r3, [r0, #4]
 800e874:	f043 0301 	orr.w	r3, r3, #1
 800e878:	6043      	str	r3, [r0, #4]
 800e87a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800e87e:	4628      	mov	r0, r5
 800e880:	f8c3 c00c 	str.w	ip, [r3, #12]
 800e884:	f8cc 3008 	str.w	r3, [ip, #8]
 800e888:	f000 f88e 	bl	800e9a8 <__malloc_unlock>
 800e88c:	4620      	mov	r0, r4
 800e88e:	b003      	add	sp, #12
 800e890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e894:	4664      	mov	r4, ip
 800e896:	e70f      	b.n	800e6b8 <_malloc_r+0x190>
 800e898:	f858 0908 	ldr.w	r0, [r8], #-8
 800e89c:	4540      	cmp	r0, r8
 800e89e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e8a2:	f43f af13 	beq.w	800e6cc <_malloc_r+0x1a4>
 800e8a6:	e718      	b.n	800e6da <_malloc_r+0x1b2>
 800e8a8:	3304      	adds	r3, #4
 800e8aa:	0052      	lsls	r2, r2, #1
 800e8ac:	4210      	tst	r0, r2
 800e8ae:	d0fb      	beq.n	800e8a8 <_malloc_r+0x380>
 800e8b0:	e6fc      	b.n	800e6ac <_malloc_r+0x184>
 800e8b2:	4673      	mov	r3, lr
 800e8b4:	e7fa      	b.n	800e8ac <_malloc_r+0x384>
 800e8b6:	6810      	ldr	r0, [r2, #0]
 800e8b8:	3001      	adds	r0, #1
 800e8ba:	bf1b      	ittet	ne
 800e8bc:	eba4 0b0b 	subne.w	fp, r4, fp
 800e8c0:	eb0b 020e 	addne.w	r2, fp, lr
 800e8c4:	6014      	streq	r4, [r2, #0]
 800e8c6:	601a      	strne	r2, [r3, #0]
 800e8c8:	f014 0b07 	ands.w	fp, r4, #7
 800e8cc:	bf1a      	itte	ne
 800e8ce:	f1cb 0008 	rsbne	r0, fp, #8
 800e8d2:	1824      	addne	r4, r4, r0
 800e8d4:	4658      	moveq	r0, fp
 800e8d6:	1862      	adds	r2, r4, r1
 800e8d8:	ea02 010c 	and.w	r1, r2, ip
 800e8dc:	4480      	add	r8, r0
 800e8de:	eba8 0801 	sub.w	r8, r8, r1
 800e8e2:	ea08 080c 	and.w	r8, r8, ip
 800e8e6:	4641      	mov	r1, r8
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	9201      	str	r2, [sp, #4]
 800e8ec:	f002 fa2a 	bl	8010d44 <_sbrk_r>
 800e8f0:	1c43      	adds	r3, r0, #1
 800e8f2:	9a01      	ldr	r2, [sp, #4]
 800e8f4:	4b28      	ldr	r3, [pc, #160]	@ (800e998 <_malloc_r+0x470>)
 800e8f6:	d107      	bne.n	800e908 <_malloc_r+0x3e0>
 800e8f8:	f1bb 0f00 	cmp.w	fp, #0
 800e8fc:	d023      	beq.n	800e946 <_malloc_r+0x41e>
 800e8fe:	f1ab 0008 	sub.w	r0, fp, #8
 800e902:	4410      	add	r0, r2
 800e904:	f04f 0800 	mov.w	r8, #0
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	60b4      	str	r4, [r6, #8]
 800e90c:	1b00      	subs	r0, r0, r4
 800e90e:	4440      	add	r0, r8
 800e910:	4442      	add	r2, r8
 800e912:	f040 0001 	orr.w	r0, r0, #1
 800e916:	45b2      	cmp	sl, r6
 800e918:	601a      	str	r2, [r3, #0]
 800e91a:	6060      	str	r0, [r4, #4]
 800e91c:	f43f af29 	beq.w	800e772 <_malloc_r+0x24a>
 800e920:	f1b9 0f0f 	cmp.w	r9, #15
 800e924:	d812      	bhi.n	800e94c <_malloc_r+0x424>
 800e926:	2301      	movs	r3, #1
 800e928:	6063      	str	r3, [r4, #4]
 800e92a:	68b3      	ldr	r3, [r6, #8]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	f023 0303 	bic.w	r3, r3, #3
 800e932:	42bb      	cmp	r3, r7
 800e934:	eba3 0207 	sub.w	r2, r3, r7
 800e938:	d301      	bcc.n	800e93e <_malloc_r+0x416>
 800e93a:	2a0f      	cmp	r2, #15
 800e93c:	dc22      	bgt.n	800e984 <_malloc_r+0x45c>
 800e93e:	4628      	mov	r0, r5
 800e940:	f000 f832 	bl	800e9a8 <__malloc_unlock>
 800e944:	e5fc      	b.n	800e540 <_malloc_r+0x18>
 800e946:	4610      	mov	r0, r2
 800e948:	46d8      	mov	r8, fp
 800e94a:	e7dd      	b.n	800e908 <_malloc_r+0x3e0>
 800e94c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800e950:	f1a9 090c 	sub.w	r9, r9, #12
 800e954:	f029 0907 	bic.w	r9, r9, #7
 800e958:	f002 0201 	and.w	r2, r2, #1
 800e95c:	ea42 0209 	orr.w	r2, r2, r9
 800e960:	f8ca 2004 	str.w	r2, [sl, #4]
 800e964:	2105      	movs	r1, #5
 800e966:	eb0a 0209 	add.w	r2, sl, r9
 800e96a:	f1b9 0f0f 	cmp.w	r9, #15
 800e96e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800e972:	f67f aefe 	bls.w	800e772 <_malloc_r+0x24a>
 800e976:	f10a 0108 	add.w	r1, sl, #8
 800e97a:	4628      	mov	r0, r5
 800e97c:	f7ff fd14 	bl	800e3a8 <_free_r>
 800e980:	4b05      	ldr	r3, [pc, #20]	@ (800e998 <_malloc_r+0x470>)
 800e982:	e6f6      	b.n	800e772 <_malloc_r+0x24a>
 800e984:	68b4      	ldr	r4, [r6, #8]
 800e986:	f047 0301 	orr.w	r3, r7, #1
 800e98a:	4427      	add	r7, r4
 800e98c:	f042 0201 	orr.w	r2, r2, #1
 800e990:	6063      	str	r3, [r4, #4]
 800e992:	60b7      	str	r7, [r6, #8]
 800e994:	607a      	str	r2, [r7, #4]
 800e996:	e5f8      	b.n	800e58a <_malloc_r+0x62>
 800e998:	24014b1c 	.word	0x24014b1c

0800e99c <__malloc_lock>:
 800e99c:	4801      	ldr	r0, [pc, #4]	@ (800e9a4 <__malloc_lock+0x8>)
 800e99e:	f7ff bc9b 	b.w	800e2d8 <__retarget_lock_acquire_recursive>
 800e9a2:	bf00      	nop
 800e9a4:	24014b14 	.word	0x24014b14

0800e9a8 <__malloc_unlock>:
 800e9a8:	4801      	ldr	r0, [pc, #4]	@ (800e9b0 <__malloc_unlock+0x8>)
 800e9aa:	f7ff bc96 	b.w	800e2da <__retarget_lock_release_recursive>
 800e9ae:	bf00      	nop
 800e9b0:	24014b14 	.word	0x24014b14
 800e9b4:	00000000 	.word	0x00000000

0800e9b8 <_svfprintf_r>:
 800e9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9bc:	ed2d 8b04 	vpush	{d8-d9}
 800e9c0:	b0cb      	sub	sp, #300	@ 0x12c
 800e9c2:	468a      	mov	sl, r1
 800e9c4:	4691      	mov	r9, r2
 800e9c6:	461e      	mov	r6, r3
 800e9c8:	9002      	str	r0, [sp, #8]
 800e9ca:	f002 f9b7 	bl	8010d3c <_localeconv_r>
 800e9ce:	6803      	ldr	r3, [r0, #0]
 800e9d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7f1 fcd4 	bl	8000380 <strlen>
 800e9d8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e9dc:	9009      	str	r0, [sp, #36]	@ 0x24
 800e9de:	061c      	lsls	r4, r3, #24
 800e9e0:	d515      	bpl.n	800ea0e <_svfprintf_r+0x56>
 800e9e2:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e9e6:	b993      	cbnz	r3, 800ea0e <_svfprintf_r+0x56>
 800e9e8:	9802      	ldr	r0, [sp, #8]
 800e9ea:	2140      	movs	r1, #64	@ 0x40
 800e9ec:	f7ff fd9c 	bl	800e528 <_malloc_r>
 800e9f0:	f8ca 0000 	str.w	r0, [sl]
 800e9f4:	f8ca 0010 	str.w	r0, [sl, #16]
 800e9f8:	b930      	cbnz	r0, 800ea08 <_svfprintf_r+0x50>
 800e9fa:	9a02      	ldr	r2, [sp, #8]
 800e9fc:	230c      	movs	r3, #12
 800e9fe:	6013      	str	r3, [r2, #0]
 800ea00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea06:	e1e1      	b.n	800edcc <_svfprintf_r+0x414>
 800ea08:	2340      	movs	r3, #64	@ 0x40
 800ea0a:	f8ca 3014 	str.w	r3, [sl, #20]
 800ea0e:	2300      	movs	r3, #0
 800ea10:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
 800ea14:	ed9f 8b96 	vldr	d8, [pc, #600]	@ 800ec70 <_svfprintf_r+0x2b8>
 800ea18:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 800ea1c:	ac21      	add	r4, sp, #132	@ 0x84
 800ea1e:	941e      	str	r4, [sp, #120]	@ 0x78
 800ea20:	9303      	str	r3, [sp, #12]
 800ea22:	9307      	str	r3, [sp, #28]
 800ea24:	930e      	str	r3, [sp, #56]	@ 0x38
 800ea26:	9310      	str	r3, [sp, #64]	@ 0x40
 800ea28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea2a:	464b      	mov	r3, r9
 800ea2c:	461d      	mov	r5, r3
 800ea2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea32:	b10a      	cbz	r2, 800ea38 <_svfprintf_r+0x80>
 800ea34:	2a25      	cmp	r2, #37	@ 0x25
 800ea36:	d1f9      	bne.n	800ea2c <_svfprintf_r+0x74>
 800ea38:	ebb5 0709 	subs.w	r7, r5, r9
 800ea3c:	d00d      	beq.n	800ea5a <_svfprintf_r+0xa2>
 800ea3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ea40:	443b      	add	r3, r7
 800ea42:	9320      	str	r3, [sp, #128]	@ 0x80
 800ea44:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ea46:	3301      	adds	r3, #1
 800ea48:	2b07      	cmp	r3, #7
 800ea4a:	e9c4 9700 	strd	r9, r7, [r4]
 800ea4e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800ea50:	dc75      	bgt.n	800eb3e <_svfprintf_r+0x186>
 800ea52:	3408      	adds	r4, #8
 800ea54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea56:	443b      	add	r3, r7
 800ea58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea5a:	782b      	ldrb	r3, [r5, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f001 80ee 	beq.w	800fc3e <_svfprintf_r+0x1286>
 800ea62:	2200      	movs	r2, #0
 800ea64:	1c6b      	adds	r3, r5, #1
 800ea66:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 800ea6a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800ea6e:	920a      	str	r2, [sp, #40]	@ 0x28
 800ea70:	4615      	mov	r5, r2
 800ea72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea76:	9204      	str	r2, [sp, #16]
 800ea78:	9308      	str	r3, [sp, #32]
 800ea7a:	9b04      	ldr	r3, [sp, #16]
 800ea7c:	3b20      	subs	r3, #32
 800ea7e:	2b5a      	cmp	r3, #90	@ 0x5a
 800ea80:	f200 8564 	bhi.w	800f54c <_svfprintf_r+0xb94>
 800ea84:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ea88:	0562009c 	.word	0x0562009c
 800ea8c:	00a40562 	.word	0x00a40562
 800ea90:	05620562 	.word	0x05620562
 800ea94:	00840562 	.word	0x00840562
 800ea98:	05620562 	.word	0x05620562
 800ea9c:	00b100a7 	.word	0x00b100a7
 800eaa0:	00ae0562 	.word	0x00ae0562
 800eaa4:	056200b3 	.word	0x056200b3
 800eaa8:	00d000cd 	.word	0x00d000cd
 800eaac:	00d000d0 	.word	0x00d000d0
 800eab0:	00d000d0 	.word	0x00d000d0
 800eab4:	00d000d0 	.word	0x00d000d0
 800eab8:	00d000d0 	.word	0x00d000d0
 800eabc:	05620562 	.word	0x05620562
 800eac0:	05620562 	.word	0x05620562
 800eac4:	05620562 	.word	0x05620562
 800eac8:	01460562 	.word	0x01460562
 800eacc:	01070562 	.word	0x01070562
 800ead0:	0146011a 	.word	0x0146011a
 800ead4:	01460146 	.word	0x01460146
 800ead8:	05620562 	.word	0x05620562
 800eadc:	05620562 	.word	0x05620562
 800eae0:	056200e1 	.word	0x056200e1
 800eae4:	045c0562 	.word	0x045c0562
 800eae8:	05620562 	.word	0x05620562
 800eaec:	04a60562 	.word	0x04a60562
 800eaf0:	04c70562 	.word	0x04c70562
 800eaf4:	05620562 	.word	0x05620562
 800eaf8:	056204e9 	.word	0x056204e9
 800eafc:	05620562 	.word	0x05620562
 800eb00:	05620562 	.word	0x05620562
 800eb04:	05620562 	.word	0x05620562
 800eb08:	01460562 	.word	0x01460562
 800eb0c:	01070562 	.word	0x01070562
 800eb10:	0146011c 	.word	0x0146011c
 800eb14:	01460146 	.word	0x01460146
 800eb18:	011c00e4 	.word	0x011c00e4
 800eb1c:	05620101 	.word	0x05620101
 800eb20:	056200fa 	.word	0x056200fa
 800eb24:	045e043d 	.word	0x045e043d
 800eb28:	01010495 	.word	0x01010495
 800eb2c:	04a60562 	.word	0x04a60562
 800eb30:	04c9009a 	.word	0x04c9009a
 800eb34:	05620562 	.word	0x05620562
 800eb38:	05620065 	.word	0x05620065
 800eb3c:	009a      	.short	0x009a
 800eb3e:	9802      	ldr	r0, [sp, #8]
 800eb40:	aa1e      	add	r2, sp, #120	@ 0x78
 800eb42:	4651      	mov	r1, sl
 800eb44:	f003 fc8c 	bl	8012460 <__ssprint_r>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	f040 813a 	bne.w	800edc2 <_svfprintf_r+0x40a>
 800eb4e:	ac21      	add	r4, sp, #132	@ 0x84
 800eb50:	e780      	b.n	800ea54 <_svfprintf_r+0x9c>
 800eb52:	4b49      	ldr	r3, [pc, #292]	@ (800ec78 <_svfprintf_r+0x2c0>)
 800eb54:	9312      	str	r3, [sp, #72]	@ 0x48
 800eb56:	f015 0320 	ands.w	r3, r5, #32
 800eb5a:	f000 8481 	beq.w	800f460 <_svfprintf_r+0xaa8>
 800eb5e:	3607      	adds	r6, #7
 800eb60:	f026 0307 	bic.w	r3, r6, #7
 800eb64:	461a      	mov	r2, r3
 800eb66:	685f      	ldr	r7, [r3, #4]
 800eb68:	f852 6b08 	ldr.w	r6, [r2], #8
 800eb6c:	9205      	str	r2, [sp, #20]
 800eb6e:	07eb      	lsls	r3, r5, #31
 800eb70:	d50a      	bpl.n	800eb88 <_svfprintf_r+0x1d0>
 800eb72:	ea56 0307 	orrs.w	r3, r6, r7
 800eb76:	d007      	beq.n	800eb88 <_svfprintf_r+0x1d0>
 800eb78:	2330      	movs	r3, #48	@ 0x30
 800eb7a:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 800eb7e:	9b04      	ldr	r3, [sp, #16]
 800eb80:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 800eb84:	f045 0502 	orr.w	r5, r5, #2
 800eb88:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800eb8c:	2302      	movs	r3, #2
 800eb8e:	e3e7      	b.n	800f360 <_svfprintf_r+0x9a8>
 800eb90:	9802      	ldr	r0, [sp, #8]
 800eb92:	f002 f8d3 	bl	8010d3c <_localeconv_r>
 800eb96:	6843      	ldr	r3, [r0, #4]
 800eb98:	9310      	str	r3, [sp, #64]	@ 0x40
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7f1 fbf0 	bl	8000380 <strlen>
 800eba0:	900e      	str	r0, [sp, #56]	@ 0x38
 800eba2:	9802      	ldr	r0, [sp, #8]
 800eba4:	f002 f8ca 	bl	8010d3c <_localeconv_r>
 800eba8:	6883      	ldr	r3, [r0, #8]
 800ebaa:	9307      	str	r3, [sp, #28]
 800ebac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebae:	b12b      	cbz	r3, 800ebbc <_svfprintf_r+0x204>
 800ebb0:	9b07      	ldr	r3, [sp, #28]
 800ebb2:	b11b      	cbz	r3, 800ebbc <_svfprintf_r+0x204>
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	b10b      	cbz	r3, 800ebbc <_svfprintf_r+0x204>
 800ebb8:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800ebbc:	9b08      	ldr	r3, [sp, #32]
 800ebbe:	e758      	b.n	800ea72 <_svfprintf_r+0xba>
 800ebc0:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1f9      	bne.n	800ebbc <_svfprintf_r+0x204>
 800ebc8:	2320      	movs	r3, #32
 800ebca:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800ebce:	e7f5      	b.n	800ebbc <_svfprintf_r+0x204>
 800ebd0:	f045 0501 	orr.w	r5, r5, #1
 800ebd4:	e7f2      	b.n	800ebbc <_svfprintf_r+0x204>
 800ebd6:	f856 3b04 	ldr.w	r3, [r6], #4
 800ebda:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	daed      	bge.n	800ebbc <_svfprintf_r+0x204>
 800ebe0:	425b      	negs	r3, r3
 800ebe2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebe4:	f045 0504 	orr.w	r5, r5, #4
 800ebe8:	e7e8      	b.n	800ebbc <_svfprintf_r+0x204>
 800ebea:	232b      	movs	r3, #43	@ 0x2b
 800ebec:	e7ed      	b.n	800ebca <_svfprintf_r+0x212>
 800ebee:	9b08      	ldr	r3, [sp, #32]
 800ebf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebf4:	9204      	str	r2, [sp, #16]
 800ebf6:	2a2a      	cmp	r2, #42	@ 0x2a
 800ebf8:	d10f      	bne.n	800ec1a <_svfprintf_r+0x262>
 800ebfa:	f856 2b04 	ldr.w	r2, [r6], #4
 800ebfe:	9308      	str	r3, [sp, #32]
 800ec00:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800ec04:	e7da      	b.n	800ebbc <_svfprintf_r+0x204>
 800ec06:	fb01 2808 	mla	r8, r1, r8, r2
 800ec0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec0e:	9204      	str	r2, [sp, #16]
 800ec10:	9a04      	ldr	r2, [sp, #16]
 800ec12:	3a30      	subs	r2, #48	@ 0x30
 800ec14:	2a09      	cmp	r2, #9
 800ec16:	d9f6      	bls.n	800ec06 <_svfprintf_r+0x24e>
 800ec18:	e72e      	b.n	800ea78 <_svfprintf_r+0xc0>
 800ec1a:	f04f 0800 	mov.w	r8, #0
 800ec1e:	210a      	movs	r1, #10
 800ec20:	e7f6      	b.n	800ec10 <_svfprintf_r+0x258>
 800ec22:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800ec26:	e7c9      	b.n	800ebbc <_svfprintf_r+0x204>
 800ec28:	2200      	movs	r2, #0
 800ec2a:	9b08      	ldr	r3, [sp, #32]
 800ec2c:	920a      	str	r2, [sp, #40]	@ 0x28
 800ec2e:	210a      	movs	r1, #10
 800ec30:	9a04      	ldr	r2, [sp, #16]
 800ec32:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ec34:	3a30      	subs	r2, #48	@ 0x30
 800ec36:	fb01 2200 	mla	r2, r1, r0, r2
 800ec3a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ec3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec40:	9204      	str	r2, [sp, #16]
 800ec42:	3a30      	subs	r2, #48	@ 0x30
 800ec44:	2a09      	cmp	r2, #9
 800ec46:	d9f3      	bls.n	800ec30 <_svfprintf_r+0x278>
 800ec48:	e716      	b.n	800ea78 <_svfprintf_r+0xc0>
 800ec4a:	f045 0508 	orr.w	r5, r5, #8
 800ec4e:	e7b5      	b.n	800ebbc <_svfprintf_r+0x204>
 800ec50:	9b08      	ldr	r3, [sp, #32]
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2b68      	cmp	r3, #104	@ 0x68
 800ec56:	bf01      	itttt	eq
 800ec58:	9b08      	ldreq	r3, [sp, #32]
 800ec5a:	3301      	addeq	r3, #1
 800ec5c:	9308      	streq	r3, [sp, #32]
 800ec5e:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800ec62:	bf18      	it	ne
 800ec64:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800ec68:	e7a8      	b.n	800ebbc <_svfprintf_r+0x204>
 800ec6a:	bf00      	nop
 800ec6c:	f3af 8000 	nop.w
	...
 800ec78:	08014004 	.word	0x08014004
 800ec7c:	9b08      	ldr	r3, [sp, #32]
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	2b6c      	cmp	r3, #108	@ 0x6c
 800ec82:	d105      	bne.n	800ec90 <_svfprintf_r+0x2d8>
 800ec84:	9b08      	ldr	r3, [sp, #32]
 800ec86:	3301      	adds	r3, #1
 800ec88:	9308      	str	r3, [sp, #32]
 800ec8a:	f045 0520 	orr.w	r5, r5, #32
 800ec8e:	e795      	b.n	800ebbc <_svfprintf_r+0x204>
 800ec90:	f045 0510 	orr.w	r5, r5, #16
 800ec94:	e792      	b.n	800ebbc <_svfprintf_r+0x204>
 800ec96:	4632      	mov	r2, r6
 800ec98:	f852 3b04 	ldr.w	r3, [r2], #4
 800ec9c:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 800eca0:	2300      	movs	r3, #0
 800eca2:	9205      	str	r2, [sp, #20]
 800eca4:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800eca8:	469b      	mov	fp, r3
 800ecaa:	f04f 0801 	mov.w	r8, #1
 800ecae:	930c      	str	r3, [sp, #48]	@ 0x30
 800ecb0:	461f      	mov	r7, r3
 800ecb2:	9306      	str	r3, [sp, #24]
 800ecb4:	461e      	mov	r6, r3
 800ecb6:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 800ecba:	e1a1      	b.n	800f000 <_svfprintf_r+0x648>
 800ecbc:	f045 0510 	orr.w	r5, r5, #16
 800ecc0:	06a8      	lsls	r0, r5, #26
 800ecc2:	d512      	bpl.n	800ecea <_svfprintf_r+0x332>
 800ecc4:	3607      	adds	r6, #7
 800ecc6:	f026 0307 	bic.w	r3, r6, #7
 800ecca:	461a      	mov	r2, r3
 800eccc:	685f      	ldr	r7, [r3, #4]
 800ecce:	f852 6b08 	ldr.w	r6, [r2], #8
 800ecd2:	9205      	str	r2, [sp, #20]
 800ecd4:	2f00      	cmp	r7, #0
 800ecd6:	da06      	bge.n	800ece6 <_svfprintf_r+0x32e>
 800ecd8:	4276      	negs	r6, r6
 800ecda:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800ecde:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800ece2:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800ece6:	2301      	movs	r3, #1
 800ece8:	e33d      	b.n	800f366 <_svfprintf_r+0x9ae>
 800ecea:	4633      	mov	r3, r6
 800ecec:	06e9      	lsls	r1, r5, #27
 800ecee:	f853 7b04 	ldr.w	r7, [r3], #4
 800ecf2:	9305      	str	r3, [sp, #20]
 800ecf4:	d502      	bpl.n	800ecfc <_svfprintf_r+0x344>
 800ecf6:	463e      	mov	r6, r7
 800ecf8:	17ff      	asrs	r7, r7, #31
 800ecfa:	e7eb      	b.n	800ecd4 <_svfprintf_r+0x31c>
 800ecfc:	066a      	lsls	r2, r5, #25
 800ecfe:	d503      	bpl.n	800ed08 <_svfprintf_r+0x350>
 800ed00:	b23e      	sxth	r6, r7
 800ed02:	f347 37c0 	sbfx	r7, r7, #15, #1
 800ed06:	e7e5      	b.n	800ecd4 <_svfprintf_r+0x31c>
 800ed08:	05ab      	lsls	r3, r5, #22
 800ed0a:	d5f4      	bpl.n	800ecf6 <_svfprintf_r+0x33e>
 800ed0c:	b27e      	sxtb	r6, r7
 800ed0e:	f347 17c0 	sbfx	r7, r7, #7, #1
 800ed12:	e7df      	b.n	800ecd4 <_svfprintf_r+0x31c>
 800ed14:	3607      	adds	r6, #7
 800ed16:	f026 0307 	bic.w	r3, r6, #7
 800ed1a:	ecb3 8b02 	vldmia	r3!, {d8}
 800ed1e:	ed9f 7b70 	vldr	d7, [pc, #448]	@ 800eee0 <_svfprintf_r+0x528>
 800ed22:	eeb0 6bc8 	vabs.f64	d6, d8
 800ed26:	eeb4 6b47 	vcmp.f64	d6, d7
 800ed2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed2e:	9305      	str	r3, [sp, #20]
 800ed30:	dd18      	ble.n	800ed64 <_svfprintf_r+0x3ac>
 800ed32:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800ed36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed3a:	d502      	bpl.n	800ed42 <_svfprintf_r+0x38a>
 800ed3c:	232d      	movs	r3, #45	@ 0x2d
 800ed3e:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800ed42:	4a69      	ldr	r2, [pc, #420]	@ (800eee8 <_svfprintf_r+0x530>)
 800ed44:	4b69      	ldr	r3, [pc, #420]	@ (800eeec <_svfprintf_r+0x534>)
 800ed46:	9904      	ldr	r1, [sp, #16]
 800ed48:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800ed4c:	2947      	cmp	r1, #71	@ 0x47
 800ed4e:	bfd4      	ite	le
 800ed50:	4691      	movle	r9, r2
 800ed52:	4699      	movgt	r9, r3
 800ed54:	f04f 0b00 	mov.w	fp, #0
 800ed58:	f04f 0803 	mov.w	r8, #3
 800ed5c:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ed60:	f000 bfa4 	b.w	800fcac <_svfprintf_r+0x12f4>
 800ed64:	eeb4 8b48 	vcmp.f64	d8, d8
 800ed68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6c:	d709      	bvc.n	800ed82 <_svfprintf_r+0x3ca>
 800ed6e:	ee18 3a90 	vmov	r3, s17
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	bfbc      	itt	lt
 800ed76:	232d      	movlt	r3, #45	@ 0x2d
 800ed78:	f88d 305b 	strblt.w	r3, [sp, #91]	@ 0x5b
 800ed7c:	4a5c      	ldr	r2, [pc, #368]	@ (800eef0 <_svfprintf_r+0x538>)
 800ed7e:	4b5d      	ldr	r3, [pc, #372]	@ (800eef4 <_svfprintf_r+0x53c>)
 800ed80:	e7e1      	b.n	800ed46 <_svfprintf_r+0x38e>
 800ed82:	9b04      	ldr	r3, [sp, #16]
 800ed84:	2b61      	cmp	r3, #97	@ 0x61
 800ed86:	d027      	beq.n	800edd8 <_svfprintf_r+0x420>
 800ed88:	2b41      	cmp	r3, #65	@ 0x41
 800ed8a:	d127      	bne.n	800eddc <_svfprintf_r+0x424>
 800ed8c:	2358      	movs	r3, #88	@ 0x58
 800ed8e:	2230      	movs	r2, #48	@ 0x30
 800ed90:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 800ed94:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 800ed98:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 800ed9c:	f045 0502 	orr.w	r5, r5, #2
 800eda0:	f340 8089 	ble.w	800eeb6 <_svfprintf_r+0x4fe>
 800eda4:	9802      	ldr	r0, [sp, #8]
 800eda6:	f108 0101 	add.w	r1, r8, #1
 800edaa:	f7ff fbbd 	bl	800e528 <_malloc_r>
 800edae:	4681      	mov	r9, r0
 800edb0:	2800      	cmp	r0, #0
 800edb2:	f040 8085 	bne.w	800eec0 <_svfprintf_r+0x508>
 800edb6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800edba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edbe:	f8aa 300c 	strh.w	r3, [sl, #12]
 800edc2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800edc6:	065b      	lsls	r3, r3, #25
 800edc8:	f53f ae1a 	bmi.w	800ea00 <_svfprintf_r+0x48>
 800edcc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800edce:	b04b      	add	sp, #300	@ 0x12c
 800edd0:	ecbd 8b04 	vpop	{d8-d9}
 800edd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd8:	2378      	movs	r3, #120	@ 0x78
 800edda:	e7d8      	b.n	800ed8e <_svfprintf_r+0x3d6>
 800eddc:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800ede0:	d070      	beq.n	800eec4 <_svfprintf_r+0x50c>
 800ede2:	9b04      	ldr	r3, [sp, #16]
 800ede4:	f023 0320 	bic.w	r3, r3, #32
 800ede8:	2b47      	cmp	r3, #71	@ 0x47
 800edea:	d170      	bne.n	800eece <_svfprintf_r+0x516>
 800edec:	f1b8 0f00 	cmp.w	r8, #0
 800edf0:	d16d      	bne.n	800eece <_svfprintf_r+0x516>
 800edf2:	46c3      	mov	fp, r8
 800edf4:	f04f 0801 	mov.w	r8, #1
 800edf8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800edfc:	930c      	str	r3, [sp, #48]	@ 0x30
 800edfe:	ee18 3a90 	vmov	r3, s17
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	da66      	bge.n	800eed4 <_svfprintf_r+0x51c>
 800ee06:	eeb1 9b48 	vneg.f64	d9, d8
 800ee0a:	232d      	movs	r3, #45	@ 0x2d
 800ee0c:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee0e:	9b04      	ldr	r3, [sp, #16]
 800ee10:	f023 0720 	bic.w	r7, r3, #32
 800ee14:	2f41      	cmp	r7, #65	@ 0x41
 800ee16:	f040 81c6 	bne.w	800f1a6 <_svfprintf_r+0x7ee>
 800ee1a:	eeb0 0b49 	vmov.f64	d0, d9
 800ee1e:	a818      	add	r0, sp, #96	@ 0x60
 800ee20:	f001 ffce 	bl	8010dc0 <frexp>
 800ee24:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
 800ee28:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ee2c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ee30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee34:	bf08      	it	eq
 800ee36:	2301      	moveq	r3, #1
 800ee38:	9a04      	ldr	r2, [sp, #16]
 800ee3a:	bf08      	it	eq
 800ee3c:	9318      	streq	r3, [sp, #96]	@ 0x60
 800ee3e:	492e      	ldr	r1, [pc, #184]	@ (800eef8 <_svfprintf_r+0x540>)
 800ee40:	4b2e      	ldr	r3, [pc, #184]	@ (800eefc <_svfprintf_r+0x544>)
 800ee42:	eeb3 7b00 	vmov.f64	d7, #48	@ 0x41800000  16.0
 800ee46:	2a61      	cmp	r2, #97	@ 0x61
 800ee48:	bf18      	it	ne
 800ee4a:	4619      	movne	r1, r3
 800ee4c:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800ee50:	464b      	mov	r3, r9
 800ee52:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ee56:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800ee5a:	ee16 0a90 	vmov	r0, s13
 800ee5e:	5c0e      	ldrb	r6, [r1, r0]
 800ee60:	f803 6b01 	strb.w	r6, [r3], #1
 800ee64:	1c56      	adds	r6, r2, #1
 800ee66:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ee6a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ee6e:	d006      	beq.n	800ee7e <_svfprintf_r+0x4c6>
 800ee70:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ee74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee78:	f102 36ff 	add.w	r6, r2, #4294967295	@ 0xffffffff
 800ee7c:	d12e      	bne.n	800eedc <_svfprintf_r+0x524>
 800ee7e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800ee82:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ee86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee8a:	dc39      	bgt.n	800ef00 <_svfprintf_r+0x548>
 800ee8c:	eeb4 0b47 	vcmp.f64	d0, d7
 800ee90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee94:	d101      	bne.n	800ee9a <_svfprintf_r+0x4e2>
 800ee96:	07c6      	lsls	r6, r0, #31
 800ee98:	d432      	bmi.n	800ef00 <_svfprintf_r+0x548>
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	189e      	adds	r6, r3, r2
 800ee9e:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800eea2:	1a70      	subs	r0, r6, r1
 800eea4:	2800      	cmp	r0, #0
 800eea6:	f280 817b 	bge.w	800f1a0 <_svfprintf_r+0x7e8>
 800eeaa:	1c51      	adds	r1, r2, #1
 800eeac:	3201      	adds	r2, #1
 800eeae:	bfb8      	it	lt
 800eeb0:	2100      	movlt	r1, #0
 800eeb2:	440b      	add	r3, r1
 800eeb4:	e037      	b.n	800ef26 <_svfprintf_r+0x56e>
 800eeb6:	f04f 0b00 	mov.w	fp, #0
 800eeba:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 800eebe:	e79b      	b.n	800edf8 <_svfprintf_r+0x440>
 800eec0:	4683      	mov	fp, r0
 800eec2:	e799      	b.n	800edf8 <_svfprintf_r+0x440>
 800eec4:	f04f 0b00 	mov.w	fp, #0
 800eec8:	f04f 0806 	mov.w	r8, #6
 800eecc:	e794      	b.n	800edf8 <_svfprintf_r+0x440>
 800eece:	f04f 0b00 	mov.w	fp, #0
 800eed2:	e791      	b.n	800edf8 <_svfprintf_r+0x440>
 800eed4:	2300      	movs	r3, #0
 800eed6:	eeb0 9b48 	vmov.f64	d9, d8
 800eeda:	e797      	b.n	800ee0c <_svfprintf_r+0x454>
 800eedc:	4632      	mov	r2, r6
 800eede:	e7b8      	b.n	800ee52 <_svfprintf_r+0x49a>
 800eee0:	ffffffff 	.word	0xffffffff
 800eee4:	7fefffff 	.word	0x7fefffff
 800eee8:	08013ff4 	.word	0x08013ff4
 800eeec:	08013ff8 	.word	0x08013ff8
 800eef0:	08013ffc 	.word	0x08013ffc
 800eef4:	08014000 	.word	0x08014000
 800eef8:	08014004 	.word	0x08014004
 800eefc:	08014015 	.word	0x08014015
 800ef00:	7bce      	ldrb	r6, [r1, #15]
 800ef02:	931c      	str	r3, [sp, #112]	@ 0x70
 800ef04:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800ef08:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800ef0a:	1e42      	subs	r2, r0, #1
 800ef0c:	921c      	str	r2, [sp, #112]	@ 0x70
 800ef0e:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800ef12:	42b2      	cmp	r2, r6
 800ef14:	f000 8141 	beq.w	800f19a <_svfprintf_r+0x7e2>
 800ef18:	2a39      	cmp	r2, #57	@ 0x39
 800ef1a:	bf16      	itet	ne
 800ef1c:	3201      	addne	r2, #1
 800ef1e:	7a8a      	ldrbeq	r2, [r1, #10]
 800ef20:	b2d2      	uxtbne	r2, r2
 800ef22:	f800 2c01 	strb.w	r2, [r0, #-1]
 800ef26:	eba3 0309 	sub.w	r3, r3, r9
 800ef2a:	2f47      	cmp	r7, #71	@ 0x47
 800ef2c:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800ef2e:	9303      	str	r3, [sp, #12]
 800ef30:	f040 8179 	bne.w	800f226 <_svfprintf_r+0x86e>
 800ef34:	1cf1      	adds	r1, r6, #3
 800ef36:	db02      	blt.n	800ef3e <_svfprintf_r+0x586>
 800ef38:	4546      	cmp	r6, r8
 800ef3a:	f340 8196 	ble.w	800f26a <_svfprintf_r+0x8b2>
 800ef3e:	9b04      	ldr	r3, [sp, #16]
 800ef40:	3b02      	subs	r3, #2
 800ef42:	9304      	str	r3, [sp, #16]
 800ef44:	9904      	ldr	r1, [sp, #16]
 800ef46:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800ef4a:	f021 0120 	bic.w	r1, r1, #32
 800ef4e:	2941      	cmp	r1, #65	@ 0x41
 800ef50:	bf08      	it	eq
 800ef52:	320f      	addeq	r2, #15
 800ef54:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 800ef58:	bf06      	itte	eq
 800ef5a:	b2d2      	uxtbeq	r2, r2
 800ef5c:	2101      	moveq	r1, #1
 800ef5e:	2100      	movne	r1, #0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	9318      	str	r3, [sp, #96]	@ 0x60
 800ef64:	bfb8      	it	lt
 800ef66:	f1c6 0301 	rsblt	r3, r6, #1
 800ef6a:	f88d 2068 	strb.w	r2, [sp, #104]	@ 0x68
 800ef6e:	bfb4      	ite	lt
 800ef70:	222d      	movlt	r2, #45	@ 0x2d
 800ef72:	222b      	movge	r2, #43	@ 0x2b
 800ef74:	2b09      	cmp	r3, #9
 800ef76:	f88d 2069 	strb.w	r2, [sp, #105]	@ 0x69
 800ef7a:	f340 8169 	ble.w	800f250 <_svfprintf_r+0x898>
 800ef7e:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 800ef82:	270a      	movs	r7, #10
 800ef84:	4602      	mov	r2, r0
 800ef86:	fbb3 f6f7 	udiv	r6, r3, r7
 800ef8a:	fb07 3116 	mls	r1, r7, r6, r3
 800ef8e:	3130      	adds	r1, #48	@ 0x30
 800ef90:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ef94:	4619      	mov	r1, r3
 800ef96:	2963      	cmp	r1, #99	@ 0x63
 800ef98:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 800ef9c:	4633      	mov	r3, r6
 800ef9e:	dcf1      	bgt.n	800ef84 <_svfprintf_r+0x5cc>
 800efa0:	3330      	adds	r3, #48	@ 0x30
 800efa2:	1e91      	subs	r1, r2, #2
 800efa4:	f800 3c01 	strb.w	r3, [r0, #-1]
 800efa8:	f10d 0669 	add.w	r6, sp, #105	@ 0x69
 800efac:	460b      	mov	r3, r1
 800efae:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 800efb2:	4283      	cmp	r3, r0
 800efb4:	f0c0 8147 	bcc.w	800f246 <_svfprintf_r+0x88e>
 800efb8:	f10d 0379 	add.w	r3, sp, #121	@ 0x79
 800efbc:	1a9b      	subs	r3, r3, r2
 800efbe:	4281      	cmp	r1, r0
 800efc0:	bf88      	it	hi
 800efc2:	2300      	movhi	r3, #0
 800efc4:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 800efc8:	441a      	add	r2, r3
 800efca:	ab1a      	add	r3, sp, #104	@ 0x68
 800efcc:	1ad3      	subs	r3, r2, r3
 800efce:	9a03      	ldr	r2, [sp, #12]
 800efd0:	9311      	str	r3, [sp, #68]	@ 0x44
 800efd2:	2a01      	cmp	r2, #1
 800efd4:	eb03 0802 	add.w	r8, r3, r2
 800efd8:	dc01      	bgt.n	800efde <_svfprintf_r+0x626>
 800efda:	07ea      	lsls	r2, r5, #31
 800efdc:	d501      	bpl.n	800efe2 <_svfprintf_r+0x62a>
 800efde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efe0:	4498      	add	r8, r3
 800efe2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800efe6:	2700      	movs	r7, #0
 800efe8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800efec:	930c      	str	r3, [sp, #48]	@ 0x30
 800efee:	9706      	str	r7, [sp, #24]
 800eff0:	463e      	mov	r6, r7
 800eff2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	f040 8180 	bne.w	800f2fa <_svfprintf_r+0x942>
 800effa:	2300      	movs	r3, #0
 800effc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800effe:	930c      	str	r3, [sp, #48]	@ 0x30
 800f000:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f002:	4543      	cmp	r3, r8
 800f004:	bfb8      	it	lt
 800f006:	4643      	movlt	r3, r8
 800f008:	930d      	str	r3, [sp, #52]	@ 0x34
 800f00a:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 800f00e:	b113      	cbz	r3, 800f016 <_svfprintf_r+0x65e>
 800f010:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f012:	3301      	adds	r3, #1
 800f014:	930d      	str	r3, [sp, #52]	@ 0x34
 800f016:	f015 0302 	ands.w	r3, r5, #2
 800f01a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f01c:	bf1e      	ittt	ne
 800f01e:	9b0d      	ldrne	r3, [sp, #52]	@ 0x34
 800f020:	3302      	addne	r3, #2
 800f022:	930d      	strne	r3, [sp, #52]	@ 0x34
 800f024:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800f028:	9314      	str	r3, [sp, #80]	@ 0x50
 800f02a:	d120      	bne.n	800f06e <_svfprintf_r+0x6b6>
 800f02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f02e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f030:	1a9b      	subs	r3, r3, r2
 800f032:	2b00      	cmp	r3, #0
 800f034:	dd1b      	ble.n	800f06e <_svfprintf_r+0x6b6>
 800f036:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 800f03a:	49a5      	ldr	r1, [pc, #660]	@ (800f2d0 <_svfprintf_r+0x918>)
 800f03c:	6021      	str	r1, [r4, #0]
 800f03e:	2b10      	cmp	r3, #16
 800f040:	f102 0201 	add.w	r2, r2, #1
 800f044:	f104 0008 	add.w	r0, r4, #8
 800f048:	f300 828c 	bgt.w	800f564 <_svfprintf_r+0xbac>
 800f04c:	eb0c 0103 	add.w	r1, ip, r3
 800f050:	2a07      	cmp	r2, #7
 800f052:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800f056:	6063      	str	r3, [r4, #4]
 800f058:	f340 8299 	ble.w	800f58e <_svfprintf_r+0xbd6>
 800f05c:	9802      	ldr	r0, [sp, #8]
 800f05e:	aa1e      	add	r2, sp, #120	@ 0x78
 800f060:	4651      	mov	r1, sl
 800f062:	f003 f9fd 	bl	8012460 <__ssprint_r>
 800f066:	2800      	cmp	r0, #0
 800f068:	f040 85c7 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f06c:	ac21      	add	r4, sp, #132	@ 0x84
 800f06e:	f89d 205b 	ldrb.w	r2, [sp, #91]	@ 0x5b
 800f072:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f074:	b16a      	cbz	r2, 800f092 <_svfprintf_r+0x6da>
 800f076:	f10d 025b 	add.w	r2, sp, #91	@ 0x5b
 800f07a:	6022      	str	r2, [r4, #0]
 800f07c:	2201      	movs	r2, #1
 800f07e:	4413      	add	r3, r2
 800f080:	9320      	str	r3, [sp, #128]	@ 0x80
 800f082:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f084:	6062      	str	r2, [r4, #4]
 800f086:	4413      	add	r3, r2
 800f088:	2b07      	cmp	r3, #7
 800f08a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f08c:	f300 8281 	bgt.w	800f592 <_svfprintf_r+0xbda>
 800f090:	3408      	adds	r4, #8
 800f092:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f094:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f096:	b162      	cbz	r2, 800f0b2 <_svfprintf_r+0x6fa>
 800f098:	aa17      	add	r2, sp, #92	@ 0x5c
 800f09a:	6022      	str	r2, [r4, #0]
 800f09c:	2202      	movs	r2, #2
 800f09e:	4413      	add	r3, r2
 800f0a0:	9320      	str	r3, [sp, #128]	@ 0x80
 800f0a2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f0a4:	6062      	str	r2, [r4, #4]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	2b07      	cmp	r3, #7
 800f0aa:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f0ac:	f300 827b 	bgt.w	800f5a6 <_svfprintf_r+0xbee>
 800f0b0:	3408      	adds	r4, #8
 800f0b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f0b4:	2b80      	cmp	r3, #128	@ 0x80
 800f0b6:	d120      	bne.n	800f0fa <_svfprintf_r+0x742>
 800f0b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f0bc:	1a9b      	subs	r3, r3, r2
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	dd1b      	ble.n	800f0fa <_svfprintf_r+0x742>
 800f0c2:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 800f0c6:	4983      	ldr	r1, [pc, #524]	@ (800f2d4 <_svfprintf_r+0x91c>)
 800f0c8:	6021      	str	r1, [r4, #0]
 800f0ca:	2b10      	cmp	r3, #16
 800f0cc:	f102 0201 	add.w	r2, r2, #1
 800f0d0:	f104 0008 	add.w	r0, r4, #8
 800f0d4:	f300 8271 	bgt.w	800f5ba <_svfprintf_r+0xc02>
 800f0d8:	eb0c 0103 	add.w	r1, ip, r3
 800f0dc:	2a07      	cmp	r2, #7
 800f0de:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800f0e2:	6063      	str	r3, [r4, #4]
 800f0e4:	f340 827e 	ble.w	800f5e4 <_svfprintf_r+0xc2c>
 800f0e8:	9802      	ldr	r0, [sp, #8]
 800f0ea:	aa1e      	add	r2, sp, #120	@ 0x78
 800f0ec:	4651      	mov	r1, sl
 800f0ee:	f003 f9b7 	bl	8012460 <__ssprint_r>
 800f0f2:	2800      	cmp	r0, #0
 800f0f4:	f040 8581 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f0f8:	ac21      	add	r4, sp, #132	@ 0x84
 800f0fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0fc:	eba3 0308 	sub.w	r3, r3, r8
 800f100:	2b00      	cmp	r3, #0
 800f102:	930c      	str	r3, [sp, #48]	@ 0x30
 800f104:	dd1c      	ble.n	800f140 <_svfprintf_r+0x788>
 800f106:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800f108:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 800f10c:	2810      	cmp	r0, #16
 800f10e:	4871      	ldr	r0, [pc, #452]	@ (800f2d4 <_svfprintf_r+0x91c>)
 800f110:	6020      	str	r0, [r4, #0]
 800f112:	f102 0201 	add.w	r2, r2, #1
 800f116:	f104 0108 	add.w	r1, r4, #8
 800f11a:	f300 8265 	bgt.w	800f5e8 <_svfprintf_r+0xc30>
 800f11e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800f120:	6060      	str	r0, [r4, #4]
 800f122:	4403      	add	r3, r0
 800f124:	2a07      	cmp	r2, #7
 800f126:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800f12a:	f340 8272 	ble.w	800f612 <_svfprintf_r+0xc5a>
 800f12e:	9802      	ldr	r0, [sp, #8]
 800f130:	aa1e      	add	r2, sp, #120	@ 0x78
 800f132:	4651      	mov	r1, sl
 800f134:	f003 f994 	bl	8012460 <__ssprint_r>
 800f138:	2800      	cmp	r0, #0
 800f13a:	f040 855e 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f13e:	ac21      	add	r4, sp, #132	@ 0x84
 800f140:	05e9      	lsls	r1, r5, #23
 800f142:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f144:	f100 826c 	bmi.w	800f620 <_svfprintf_r+0xc68>
 800f148:	4443      	add	r3, r8
 800f14a:	9320      	str	r3, [sp, #128]	@ 0x80
 800f14c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f14e:	3301      	adds	r3, #1
 800f150:	2b07      	cmp	r3, #7
 800f152:	e9c4 9800 	strd	r9, r8, [r4]
 800f156:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f158:	f300 82a4 	bgt.w	800f6a4 <_svfprintf_r+0xcec>
 800f15c:	3408      	adds	r4, #8
 800f15e:	076a      	lsls	r2, r5, #29
 800f160:	f100 852d 	bmi.w	800fbbe <_svfprintf_r+0x1206>
 800f164:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800f168:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f16a:	428a      	cmp	r2, r1
 800f16c:	bfac      	ite	ge
 800f16e:	189b      	addge	r3, r3, r2
 800f170:	185b      	addlt	r3, r3, r1
 800f172:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f174:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f176:	b13b      	cbz	r3, 800f188 <_svfprintf_r+0x7d0>
 800f178:	9802      	ldr	r0, [sp, #8]
 800f17a:	aa1e      	add	r2, sp, #120	@ 0x78
 800f17c:	4651      	mov	r1, sl
 800f17e:	f003 f96f 	bl	8012460 <__ssprint_r>
 800f182:	2800      	cmp	r0, #0
 800f184:	f040 8539 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f188:	2300      	movs	r3, #0
 800f18a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f18c:	f1bb 0f00 	cmp.w	fp, #0
 800f190:	f040 854f 	bne.w	800fc32 <_svfprintf_r+0x127a>
 800f194:	9e05      	ldr	r6, [sp, #20]
 800f196:	ac21      	add	r4, sp, #132	@ 0x84
 800f198:	e0bc      	b.n	800f314 <_svfprintf_r+0x95c>
 800f19a:	f800 cc01 	strb.w	ip, [r0, #-1]
 800f19e:	e6b3      	b.n	800ef08 <_svfprintf_r+0x550>
 800f1a0:	f801 cb01 	strb.w	ip, [r1], #1
 800f1a4:	e67d      	b.n	800eea2 <_svfprintf_r+0x4ea>
 800f1a6:	2f46      	cmp	r7, #70	@ 0x46
 800f1a8:	d005      	beq.n	800f1b6 <_svfprintf_r+0x7fe>
 800f1aa:	2f45      	cmp	r7, #69	@ 0x45
 800f1ac:	d117      	bne.n	800f1de <_svfprintf_r+0x826>
 800f1ae:	f108 0601 	add.w	r6, r8, #1
 800f1b2:	2102      	movs	r1, #2
 800f1b4:	e001      	b.n	800f1ba <_svfprintf_r+0x802>
 800f1b6:	4646      	mov	r6, r8
 800f1b8:	2103      	movs	r1, #3
 800f1ba:	ab1c      	add	r3, sp, #112	@ 0x70
 800f1bc:	9301      	str	r3, [sp, #4]
 800f1be:	ab19      	add	r3, sp, #100	@ 0x64
 800f1c0:	9300      	str	r3, [sp, #0]
 800f1c2:	9802      	ldr	r0, [sp, #8]
 800f1c4:	eeb0 0b49 	vmov.f64	d0, d9
 800f1c8:	ab18      	add	r3, sp, #96	@ 0x60
 800f1ca:	4632      	mov	r2, r6
 800f1cc:	f001 fef8 	bl	8010fc0 <_dtoa_r>
 800f1d0:	2f47      	cmp	r7, #71	@ 0x47
 800f1d2:	4681      	mov	r9, r0
 800f1d4:	d115      	bne.n	800f202 <_svfprintf_r+0x84a>
 800f1d6:	07e8      	lsls	r0, r5, #31
 800f1d8:	d403      	bmi.n	800f1e2 <_svfprintf_r+0x82a>
 800f1da:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800f1dc:	e6a3      	b.n	800ef26 <_svfprintf_r+0x56e>
 800f1de:	4646      	mov	r6, r8
 800f1e0:	e7e7      	b.n	800f1b2 <_svfprintf_r+0x7fa>
 800f1e2:	eb09 0306 	add.w	r3, r9, r6
 800f1e6:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800f1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ee:	bf08      	it	eq
 800f1f0:	931c      	streq	r3, [sp, #112]	@ 0x70
 800f1f2:	2130      	movs	r1, #48	@ 0x30
 800f1f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d9ef      	bls.n	800f1da <_svfprintf_r+0x822>
 800f1fa:	1c50      	adds	r0, r2, #1
 800f1fc:	901c      	str	r0, [sp, #112]	@ 0x70
 800f1fe:	7011      	strb	r1, [r2, #0]
 800f200:	e7f8      	b.n	800f1f4 <_svfprintf_r+0x83c>
 800f202:	2f46      	cmp	r7, #70	@ 0x46
 800f204:	eb00 0306 	add.w	r3, r0, r6
 800f208:	d1ed      	bne.n	800f1e6 <_svfprintf_r+0x82e>
 800f20a:	7802      	ldrb	r2, [r0, #0]
 800f20c:	2a30      	cmp	r2, #48	@ 0x30
 800f20e:	d107      	bne.n	800f220 <_svfprintf_r+0x868>
 800f210:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800f214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f218:	bf1c      	itt	ne
 800f21a:	f1c6 0601 	rsbne	r6, r6, #1
 800f21e:	9618      	strne	r6, [sp, #96]	@ 0x60
 800f220:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f222:	4413      	add	r3, r2
 800f224:	e7df      	b.n	800f1e6 <_svfprintf_r+0x82e>
 800f226:	2f46      	cmp	r7, #70	@ 0x46
 800f228:	f47f ae8c 	bne.w	800ef44 <_svfprintf_r+0x58c>
 800f22c:	f005 0301 	and.w	r3, r5, #1
 800f230:	2e00      	cmp	r6, #0
 800f232:	ea43 0308 	orr.w	r3, r3, r8
 800f236:	dd25      	ble.n	800f284 <_svfprintf_r+0x8cc>
 800f238:	b37b      	cbz	r3, 800f29a <_svfprintf_r+0x8e2>
 800f23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f23c:	18f3      	adds	r3, r6, r3
 800f23e:	4498      	add	r8, r3
 800f240:	2366      	movs	r3, #102	@ 0x66
 800f242:	9304      	str	r3, [sp, #16]
 800f244:	e02f      	b.n	800f2a6 <_svfprintf_r+0x8ee>
 800f246:	f813 7b01 	ldrb.w	r7, [r3], #1
 800f24a:	f806 7f01 	strb.w	r7, [r6, #1]!
 800f24e:	e6b0      	b.n	800efb2 <_svfprintf_r+0x5fa>
 800f250:	b941      	cbnz	r1, 800f264 <_svfprintf_r+0x8ac>
 800f252:	2230      	movs	r2, #48	@ 0x30
 800f254:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
 800f258:	f10d 026b 	add.w	r2, sp, #107	@ 0x6b
 800f25c:	3330      	adds	r3, #48	@ 0x30
 800f25e:	f802 3b01 	strb.w	r3, [r2], #1
 800f262:	e6b2      	b.n	800efca <_svfprintf_r+0x612>
 800f264:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 800f268:	e7f8      	b.n	800f25c <_svfprintf_r+0x8a4>
 800f26a:	9b03      	ldr	r3, [sp, #12]
 800f26c:	429e      	cmp	r6, r3
 800f26e:	da0d      	bge.n	800f28c <_svfprintf_r+0x8d4>
 800f270:	9b03      	ldr	r3, [sp, #12]
 800f272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f274:	2e00      	cmp	r6, #0
 800f276:	eb03 0802 	add.w	r8, r3, r2
 800f27a:	dc0c      	bgt.n	800f296 <_svfprintf_r+0x8de>
 800f27c:	f1c6 0301 	rsb	r3, r6, #1
 800f280:	4498      	add	r8, r3
 800f282:	e008      	b.n	800f296 <_svfprintf_r+0x8de>
 800f284:	b15b      	cbz	r3, 800f29e <_svfprintf_r+0x8e6>
 800f286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f288:	3301      	adds	r3, #1
 800f28a:	e7d8      	b.n	800f23e <_svfprintf_r+0x886>
 800f28c:	07eb      	lsls	r3, r5, #31
 800f28e:	d51d      	bpl.n	800f2cc <_svfprintf_r+0x914>
 800f290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f292:	eb06 0803 	add.w	r8, r6, r3
 800f296:	2367      	movs	r3, #103	@ 0x67
 800f298:	e7d3      	b.n	800f242 <_svfprintf_r+0x88a>
 800f29a:	46b0      	mov	r8, r6
 800f29c:	e7d0      	b.n	800f240 <_svfprintf_r+0x888>
 800f29e:	2366      	movs	r3, #102	@ 0x66
 800f2a0:	9304      	str	r3, [sp, #16]
 800f2a2:	f04f 0801 	mov.w	r8, #1
 800f2a6:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800f2aa:	9306      	str	r3, [sp, #24]
 800f2ac:	d023      	beq.n	800f2f6 <_svfprintf_r+0x93e>
 800f2ae:	2700      	movs	r7, #0
 800f2b0:	2e00      	cmp	r6, #0
 800f2b2:	9706      	str	r7, [sp, #24]
 800f2b4:	f77f ae9d 	ble.w	800eff2 <_svfprintf_r+0x63a>
 800f2b8:	9b07      	ldr	r3, [sp, #28]
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	2bff      	cmp	r3, #255	@ 0xff
 800f2be:	d10b      	bne.n	800f2d8 <_svfprintf_r+0x920>
 800f2c0:	9b06      	ldr	r3, [sp, #24]
 800f2c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2c4:	443b      	add	r3, r7
 800f2c6:	fb02 8803 	mla	r8, r2, r3, r8
 800f2ca:	e692      	b.n	800eff2 <_svfprintf_r+0x63a>
 800f2cc:	46b0      	mov	r8, r6
 800f2ce:	e7e2      	b.n	800f296 <_svfprintf_r+0x8de>
 800f2d0:	08014038 	.word	0x08014038
 800f2d4:	08014028 	.word	0x08014028
 800f2d8:	42b3      	cmp	r3, r6
 800f2da:	daf1      	bge.n	800f2c0 <_svfprintf_r+0x908>
 800f2dc:	1af6      	subs	r6, r6, r3
 800f2de:	9b07      	ldr	r3, [sp, #28]
 800f2e0:	785b      	ldrb	r3, [r3, #1]
 800f2e2:	b133      	cbz	r3, 800f2f2 <_svfprintf_r+0x93a>
 800f2e4:	9b06      	ldr	r3, [sp, #24]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	9306      	str	r3, [sp, #24]
 800f2ea:	9b07      	ldr	r3, [sp, #28]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	9307      	str	r3, [sp, #28]
 800f2f0:	e7e2      	b.n	800f2b8 <_svfprintf_r+0x900>
 800f2f2:	3701      	adds	r7, #1
 800f2f4:	e7e0      	b.n	800f2b8 <_svfprintf_r+0x900>
 800f2f6:	9f06      	ldr	r7, [sp, #24]
 800f2f8:	e67b      	b.n	800eff2 <_svfprintf_r+0x63a>
 800f2fa:	232d      	movs	r3, #45	@ 0x2d
 800f2fc:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800f300:	e67b      	b.n	800effa <_svfprintf_r+0x642>
 800f302:	06af      	lsls	r7, r5, #26
 800f304:	d50a      	bpl.n	800f31c <_svfprintf_r+0x964>
 800f306:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f308:	6833      	ldr	r3, [r6, #0]
 800f30a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f30c:	17d2      	asrs	r2, r2, #31
 800f30e:	e9c3 1200 	strd	r1, r2, [r3]
 800f312:	3604      	adds	r6, #4
 800f314:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f318:	f7ff bb87 	b.w	800ea2a <_svfprintf_r+0x72>
 800f31c:	06e8      	lsls	r0, r5, #27
 800f31e:	d503      	bpl.n	800f328 <_svfprintf_r+0x970>
 800f320:	6833      	ldr	r3, [r6, #0]
 800f322:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f324:	601a      	str	r2, [r3, #0]
 800f326:	e7f4      	b.n	800f312 <_svfprintf_r+0x95a>
 800f328:	0669      	lsls	r1, r5, #25
 800f32a:	d503      	bpl.n	800f334 <_svfprintf_r+0x97c>
 800f32c:	6833      	ldr	r3, [r6, #0]
 800f32e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f330:	801a      	strh	r2, [r3, #0]
 800f332:	e7ee      	b.n	800f312 <_svfprintf_r+0x95a>
 800f334:	05aa      	lsls	r2, r5, #22
 800f336:	d5f3      	bpl.n	800f320 <_svfprintf_r+0x968>
 800f338:	6833      	ldr	r3, [r6, #0]
 800f33a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f33c:	701a      	strb	r2, [r3, #0]
 800f33e:	e7e8      	b.n	800f312 <_svfprintf_r+0x95a>
 800f340:	f045 0510 	orr.w	r5, r5, #16
 800f344:	f015 0320 	ands.w	r3, r5, #32
 800f348:	d020      	beq.n	800f38c <_svfprintf_r+0x9d4>
 800f34a:	3607      	adds	r6, #7
 800f34c:	f026 0307 	bic.w	r3, r6, #7
 800f350:	461a      	mov	r2, r3
 800f352:	685f      	ldr	r7, [r3, #4]
 800f354:	f852 6b08 	ldr.w	r6, [r2], #8
 800f358:	9205      	str	r2, [sp, #20]
 800f35a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800f35e:	2300      	movs	r3, #0
 800f360:	2200      	movs	r2, #0
 800f362:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 800f366:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800f36a:	f000 8473 	beq.w	800fc54 <_svfprintf_r+0x129c>
 800f36e:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800f372:	9206      	str	r2, [sp, #24]
 800f374:	ea56 0207 	orrs.w	r2, r6, r7
 800f378:	f040 8471 	bne.w	800fc5e <_svfprintf_r+0x12a6>
 800f37c:	f1b8 0f00 	cmp.w	r8, #0
 800f380:	f000 80dc 	beq.w	800f53c <_svfprintf_r+0xb84>
 800f384:	2b01      	cmp	r3, #1
 800f386:	f040 846d 	bne.w	800fc64 <_svfprintf_r+0x12ac>
 800f38a:	e083      	b.n	800f494 <_svfprintf_r+0xadc>
 800f38c:	4632      	mov	r2, r6
 800f38e:	f015 0710 	ands.w	r7, r5, #16
 800f392:	f852 6b04 	ldr.w	r6, [r2], #4
 800f396:	9205      	str	r2, [sp, #20]
 800f398:	d001      	beq.n	800f39e <_svfprintf_r+0x9e6>
 800f39a:	461f      	mov	r7, r3
 800f39c:	e7dd      	b.n	800f35a <_svfprintf_r+0x9a2>
 800f39e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800f3a2:	d001      	beq.n	800f3a8 <_svfprintf_r+0x9f0>
 800f3a4:	b2b6      	uxth	r6, r6
 800f3a6:	e7d8      	b.n	800f35a <_svfprintf_r+0x9a2>
 800f3a8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800f3ac:	d0d5      	beq.n	800f35a <_svfprintf_r+0x9a2>
 800f3ae:	b2f6      	uxtb	r6, r6
 800f3b0:	e7f3      	b.n	800f39a <_svfprintf_r+0x9e2>
 800f3b2:	4633      	mov	r3, r6
 800f3b4:	2278      	movs	r2, #120	@ 0x78
 800f3b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800f3ba:	9305      	str	r3, [sp, #20]
 800f3bc:	f647 0330 	movw	r3, #30768	@ 0x7830
 800f3c0:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
 800f3c4:	4b94      	ldr	r3, [pc, #592]	@ (800f618 <_svfprintf_r+0xc60>)
 800f3c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800f3c8:	2700      	movs	r7, #0
 800f3ca:	f045 0502 	orr.w	r5, r5, #2
 800f3ce:	2302      	movs	r3, #2
 800f3d0:	9204      	str	r2, [sp, #16]
 800f3d2:	e7c5      	b.n	800f360 <_svfprintf_r+0x9a8>
 800f3d4:	4633      	mov	r3, r6
 800f3d6:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800f3da:	f853 9b04 	ldr.w	r9, [r3], #4
 800f3de:	9305      	str	r3, [sp, #20]
 800f3e0:	f04f 0600 	mov.w	r6, #0
 800f3e4:	f88d 605b 	strb.w	r6, [sp, #91]	@ 0x5b
 800f3e8:	d00f      	beq.n	800f40a <_svfprintf_r+0xa52>
 800f3ea:	4642      	mov	r2, r8
 800f3ec:	4631      	mov	r1, r6
 800f3ee:	4648      	mov	r0, r9
 800f3f0:	f7f0 ff76 	bl	80002e0 <memchr>
 800f3f4:	4683      	mov	fp, r0
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	f43f acb0 	beq.w	800ed5c <_svfprintf_r+0x3a4>
 800f3fc:	eba0 0809 	sub.w	r8, r0, r9
 800f400:	46b3      	mov	fp, r6
 800f402:	960c      	str	r6, [sp, #48]	@ 0x30
 800f404:	4637      	mov	r7, r6
 800f406:	9606      	str	r6, [sp, #24]
 800f408:	e5fa      	b.n	800f000 <_svfprintf_r+0x648>
 800f40a:	4648      	mov	r0, r9
 800f40c:	f7f0 ffb8 	bl	8000380 <strlen>
 800f410:	46b3      	mov	fp, r6
 800f412:	4680      	mov	r8, r0
 800f414:	e4a2      	b.n	800ed5c <_svfprintf_r+0x3a4>
 800f416:	f045 0510 	orr.w	r5, r5, #16
 800f41a:	f015 0320 	ands.w	r3, r5, #32
 800f41e:	d009      	beq.n	800f434 <_svfprintf_r+0xa7c>
 800f420:	3607      	adds	r6, #7
 800f422:	f026 0307 	bic.w	r3, r6, #7
 800f426:	461a      	mov	r2, r3
 800f428:	685f      	ldr	r7, [r3, #4]
 800f42a:	f852 6b08 	ldr.w	r6, [r2], #8
 800f42e:	9205      	str	r2, [sp, #20]
 800f430:	2301      	movs	r3, #1
 800f432:	e795      	b.n	800f360 <_svfprintf_r+0x9a8>
 800f434:	4632      	mov	r2, r6
 800f436:	f015 0710 	ands.w	r7, r5, #16
 800f43a:	f852 6b04 	ldr.w	r6, [r2], #4
 800f43e:	9205      	str	r2, [sp, #20]
 800f440:	d001      	beq.n	800f446 <_svfprintf_r+0xa8e>
 800f442:	461f      	mov	r7, r3
 800f444:	e7f4      	b.n	800f430 <_svfprintf_r+0xa78>
 800f446:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800f44a:	d001      	beq.n	800f450 <_svfprintf_r+0xa98>
 800f44c:	b2b6      	uxth	r6, r6
 800f44e:	e7ef      	b.n	800f430 <_svfprintf_r+0xa78>
 800f450:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800f454:	d0ec      	beq.n	800f430 <_svfprintf_r+0xa78>
 800f456:	b2f6      	uxtb	r6, r6
 800f458:	e7f3      	b.n	800f442 <_svfprintf_r+0xa8a>
 800f45a:	4b70      	ldr	r3, [pc, #448]	@ (800f61c <_svfprintf_r+0xc64>)
 800f45c:	f7ff bb7a 	b.w	800eb54 <_svfprintf_r+0x19c>
 800f460:	4632      	mov	r2, r6
 800f462:	f015 0710 	ands.w	r7, r5, #16
 800f466:	f852 6b04 	ldr.w	r6, [r2], #4
 800f46a:	9205      	str	r2, [sp, #20]
 800f46c:	d002      	beq.n	800f474 <_svfprintf_r+0xabc>
 800f46e:	461f      	mov	r7, r3
 800f470:	f7ff bb7d 	b.w	800eb6e <_svfprintf_r+0x1b6>
 800f474:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800f478:	d002      	beq.n	800f480 <_svfprintf_r+0xac8>
 800f47a:	b2b6      	uxth	r6, r6
 800f47c:	f7ff bb77 	b.w	800eb6e <_svfprintf_r+0x1b6>
 800f480:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800f484:	f43f ab73 	beq.w	800eb6e <_svfprintf_r+0x1b6>
 800f488:	b2f6      	uxtb	r6, r6
 800f48a:	e7f0      	b.n	800f46e <_svfprintf_r+0xab6>
 800f48c:	2e0a      	cmp	r6, #10
 800f48e:	f177 0300 	sbcs.w	r3, r7, #0
 800f492:	d206      	bcs.n	800f4a2 <_svfprintf_r+0xaea>
 800f494:	3630      	adds	r6, #48	@ 0x30
 800f496:	b2f6      	uxtb	r6, r6
 800f498:	f88d 6127 	strb.w	r6, [sp, #295]	@ 0x127
 800f49c:	f20d 1927 	addw	r9, sp, #295	@ 0x127
 800f4a0:	e3fc      	b.n	800fc9c <_svfprintf_r+0x12e4>
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	9303      	str	r3, [sp, #12]
 800f4a6:	9b06      	ldr	r3, [sp, #24]
 800f4a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f4ac:	ad4a      	add	r5, sp, #296	@ 0x128
 800f4ae:	930c      	str	r3, [sp, #48]	@ 0x30
 800f4b0:	220a      	movs	r2, #10
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	4639      	mov	r1, r7
 800f4b8:	f7f0 ff6a 	bl	8000390 <__aeabi_uldivmod>
 800f4bc:	3230      	adds	r2, #48	@ 0x30
 800f4be:	f805 2c01 	strb.w	r2, [r5, #-1]
 800f4c2:	9a03      	ldr	r2, [sp, #12]
 800f4c4:	3201      	adds	r2, #1
 800f4c6:	9203      	str	r2, [sp, #12]
 800f4c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	468b      	mov	fp, r1
 800f4ce:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800f4d2:	b1e2      	cbz	r2, 800f50e <_svfprintf_r+0xb56>
 800f4d4:	9a07      	ldr	r2, [sp, #28]
 800f4d6:	9903      	ldr	r1, [sp, #12]
 800f4d8:	7812      	ldrb	r2, [r2, #0]
 800f4da:	4291      	cmp	r1, r2
 800f4dc:	d117      	bne.n	800f50e <_svfprintf_r+0xb56>
 800f4de:	29ff      	cmp	r1, #255	@ 0xff
 800f4e0:	d015      	beq.n	800f50e <_svfprintf_r+0xb56>
 800f4e2:	2e0a      	cmp	r6, #10
 800f4e4:	f177 0200 	sbcs.w	r2, r7, #0
 800f4e8:	d311      	bcc.n	800f50e <_svfprintf_r+0xb56>
 800f4ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4ec:	9003      	str	r0, [sp, #12]
 800f4ee:	eba9 0903 	sub.w	r9, r9, r3
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800f4f6:	4648      	mov	r0, r9
 800f4f8:	f001 fc06 	bl	8010d08 <strncpy>
 800f4fc:	9b07      	ldr	r3, [sp, #28]
 800f4fe:	785a      	ldrb	r2, [r3, #1]
 800f500:	9b03      	ldr	r3, [sp, #12]
 800f502:	b11a      	cbz	r2, 800f50c <_svfprintf_r+0xb54>
 800f504:	9a07      	ldr	r2, [sp, #28]
 800f506:	3201      	adds	r2, #1
 800f508:	9207      	str	r2, [sp, #28]
 800f50a:	2200      	movs	r2, #0
 800f50c:	9203      	str	r2, [sp, #12]
 800f50e:	2e0a      	cmp	r6, #10
 800f510:	f177 0700 	sbcs.w	r7, r7, #0
 800f514:	f0c0 83c2 	bcc.w	800fc9c <_svfprintf_r+0x12e4>
 800f518:	461e      	mov	r6, r3
 800f51a:	465f      	mov	r7, fp
 800f51c:	464d      	mov	r5, r9
 800f51e:	e7c7      	b.n	800f4b0 <_svfprintf_r+0xaf8>
 800f520:	f006 030f 	and.w	r3, r6, #15
 800f524:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f526:	0936      	lsrs	r6, r6, #4
 800f528:	5cd3      	ldrb	r3, [r2, r3]
 800f52a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f52e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800f532:	093f      	lsrs	r7, r7, #4
 800f534:	ea56 0307 	orrs.w	r3, r6, r7
 800f538:	d1f2      	bne.n	800f520 <_svfprintf_r+0xb68>
 800f53a:	e3af      	b.n	800fc9c <_svfprintf_r+0x12e4>
 800f53c:	b91b      	cbnz	r3, 800f546 <_svfprintf_r+0xb8e>
 800f53e:	07e8      	lsls	r0, r5, #31
 800f540:	d501      	bpl.n	800f546 <_svfprintf_r+0xb8e>
 800f542:	2630      	movs	r6, #48	@ 0x30
 800f544:	e7a8      	b.n	800f498 <_svfprintf_r+0xae0>
 800f546:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 800f54a:	e3a7      	b.n	800fc9c <_svfprintf_r+0x12e4>
 800f54c:	9b04      	ldr	r3, [sp, #16]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f000 8375 	beq.w	800fc3e <_svfprintf_r+0x1286>
 800f554:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 800f558:	2300      	movs	r3, #0
 800f55a:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800f55e:	9605      	str	r6, [sp, #20]
 800f560:	f7ff bba2 	b.w	800eca8 <_svfprintf_r+0x2f0>
 800f564:	2110      	movs	r1, #16
 800f566:	6061      	str	r1, [r4, #4]
 800f568:	2a07      	cmp	r2, #7
 800f56a:	4461      	add	r1, ip
 800f56c:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800f570:	dd0a      	ble.n	800f588 <_svfprintf_r+0xbd0>
 800f572:	9802      	ldr	r0, [sp, #8]
 800f574:	9315      	str	r3, [sp, #84]	@ 0x54
 800f576:	aa1e      	add	r2, sp, #120	@ 0x78
 800f578:	4651      	mov	r1, sl
 800f57a:	f002 ff71 	bl	8012460 <__ssprint_r>
 800f57e:	2800      	cmp	r0, #0
 800f580:	f040 833b 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f584:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f586:	a821      	add	r0, sp, #132	@ 0x84
 800f588:	3b10      	subs	r3, #16
 800f58a:	4604      	mov	r4, r0
 800f58c:	e553      	b.n	800f036 <_svfprintf_r+0x67e>
 800f58e:	4604      	mov	r4, r0
 800f590:	e56d      	b.n	800f06e <_svfprintf_r+0x6b6>
 800f592:	9802      	ldr	r0, [sp, #8]
 800f594:	aa1e      	add	r2, sp, #120	@ 0x78
 800f596:	4651      	mov	r1, sl
 800f598:	f002 ff62 	bl	8012460 <__ssprint_r>
 800f59c:	2800      	cmp	r0, #0
 800f59e:	f040 832c 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f5a2:	ac21      	add	r4, sp, #132	@ 0x84
 800f5a4:	e575      	b.n	800f092 <_svfprintf_r+0x6da>
 800f5a6:	9802      	ldr	r0, [sp, #8]
 800f5a8:	aa1e      	add	r2, sp, #120	@ 0x78
 800f5aa:	4651      	mov	r1, sl
 800f5ac:	f002 ff58 	bl	8012460 <__ssprint_r>
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	f040 8322 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f5b6:	ac21      	add	r4, sp, #132	@ 0x84
 800f5b8:	e57b      	b.n	800f0b2 <_svfprintf_r+0x6fa>
 800f5ba:	2110      	movs	r1, #16
 800f5bc:	6061      	str	r1, [r4, #4]
 800f5be:	2a07      	cmp	r2, #7
 800f5c0:	4461      	add	r1, ip
 800f5c2:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800f5c6:	dd0a      	ble.n	800f5de <_svfprintf_r+0xc26>
 800f5c8:	9802      	ldr	r0, [sp, #8]
 800f5ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f5cc:	aa1e      	add	r2, sp, #120	@ 0x78
 800f5ce:	4651      	mov	r1, sl
 800f5d0:	f002 ff46 	bl	8012460 <__ssprint_r>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	f040 8310 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f5da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f5dc:	a821      	add	r0, sp, #132	@ 0x84
 800f5de:	3b10      	subs	r3, #16
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	e56e      	b.n	800f0c2 <_svfprintf_r+0x70a>
 800f5e4:	4604      	mov	r4, r0
 800f5e6:	e588      	b.n	800f0fa <_svfprintf_r+0x742>
 800f5e8:	2010      	movs	r0, #16
 800f5ea:	4403      	add	r3, r0
 800f5ec:	2a07      	cmp	r2, #7
 800f5ee:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800f5f2:	6060      	str	r0, [r4, #4]
 800f5f4:	dd08      	ble.n	800f608 <_svfprintf_r+0xc50>
 800f5f6:	9802      	ldr	r0, [sp, #8]
 800f5f8:	aa1e      	add	r2, sp, #120	@ 0x78
 800f5fa:	4651      	mov	r1, sl
 800f5fc:	f002 ff30 	bl	8012460 <__ssprint_r>
 800f600:	2800      	cmp	r0, #0
 800f602:	f040 82fa 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f606:	a921      	add	r1, sp, #132	@ 0x84
 800f608:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f60a:	3b10      	subs	r3, #16
 800f60c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f60e:	460c      	mov	r4, r1
 800f610:	e579      	b.n	800f106 <_svfprintf_r+0x74e>
 800f612:	460c      	mov	r4, r1
 800f614:	e594      	b.n	800f140 <_svfprintf_r+0x788>
 800f616:	bf00      	nop
 800f618:	08014004 	.word	0x08014004
 800f61c:	08014015 	.word	0x08014015
 800f620:	9a04      	ldr	r2, [sp, #16]
 800f622:	2a65      	cmp	r2, #101	@ 0x65
 800f624:	f340 823e 	ble.w	800faa4 <_svfprintf_r+0x10ec>
 800f628:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f630:	d169      	bne.n	800f706 <_svfprintf_r+0xd4e>
 800f632:	4a72      	ldr	r2, [pc, #456]	@ (800f7fc <_svfprintf_r+0xe44>)
 800f634:	6022      	str	r2, [r4, #0]
 800f636:	2201      	movs	r2, #1
 800f638:	4413      	add	r3, r2
 800f63a:	9320      	str	r3, [sp, #128]	@ 0x80
 800f63c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f63e:	6062      	str	r2, [r4, #4]
 800f640:	4413      	add	r3, r2
 800f642:	2b07      	cmp	r3, #7
 800f644:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f646:	dc37      	bgt.n	800f6b8 <_svfprintf_r+0xd00>
 800f648:	3408      	adds	r4, #8
 800f64a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f64c:	9a03      	ldr	r2, [sp, #12]
 800f64e:	4293      	cmp	r3, r2
 800f650:	db02      	blt.n	800f658 <_svfprintf_r+0xca0>
 800f652:	07ea      	lsls	r2, r5, #31
 800f654:	f57f ad83 	bpl.w	800f15e <_svfprintf_r+0x7a6>
 800f658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f65a:	6023      	str	r3, [r4, #0]
 800f65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f65e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f660:	6063      	str	r3, [r4, #4]
 800f662:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f664:	4413      	add	r3, r2
 800f666:	9320      	str	r3, [sp, #128]	@ 0x80
 800f668:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f66a:	3301      	adds	r3, #1
 800f66c:	2b07      	cmp	r3, #7
 800f66e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f670:	dc2c      	bgt.n	800f6cc <_svfprintf_r+0xd14>
 800f672:	3408      	adds	r4, #8
 800f674:	9b03      	ldr	r3, [sp, #12]
 800f676:	1e5e      	subs	r6, r3, #1
 800f678:	2e00      	cmp	r6, #0
 800f67a:	f77f ad70 	ble.w	800f15e <_svfprintf_r+0x7a6>
 800f67e:	4f60      	ldr	r7, [pc, #384]	@ (800f800 <_svfprintf_r+0xe48>)
 800f680:	f04f 0810 	mov.w	r8, #16
 800f684:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800f688:	2e10      	cmp	r6, #16
 800f68a:	f103 0301 	add.w	r3, r3, #1
 800f68e:	f104 0108 	add.w	r1, r4, #8
 800f692:	6027      	str	r7, [r4, #0]
 800f694:	dc24      	bgt.n	800f6e0 <_svfprintf_r+0xd28>
 800f696:	6066      	str	r6, [r4, #4]
 800f698:	2b07      	cmp	r3, #7
 800f69a:	4416      	add	r6, r2
 800f69c:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 800f6a0:	f340 828a 	ble.w	800fbb8 <_svfprintf_r+0x1200>
 800f6a4:	9802      	ldr	r0, [sp, #8]
 800f6a6:	aa1e      	add	r2, sp, #120	@ 0x78
 800f6a8:	4651      	mov	r1, sl
 800f6aa:	f002 fed9 	bl	8012460 <__ssprint_r>
 800f6ae:	2800      	cmp	r0, #0
 800f6b0:	f040 82a3 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f6b4:	ac21      	add	r4, sp, #132	@ 0x84
 800f6b6:	e552      	b.n	800f15e <_svfprintf_r+0x7a6>
 800f6b8:	9802      	ldr	r0, [sp, #8]
 800f6ba:	aa1e      	add	r2, sp, #120	@ 0x78
 800f6bc:	4651      	mov	r1, sl
 800f6be:	f002 fecf 	bl	8012460 <__ssprint_r>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	f040 8299 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f6c8:	ac21      	add	r4, sp, #132	@ 0x84
 800f6ca:	e7be      	b.n	800f64a <_svfprintf_r+0xc92>
 800f6cc:	9802      	ldr	r0, [sp, #8]
 800f6ce:	aa1e      	add	r2, sp, #120	@ 0x78
 800f6d0:	4651      	mov	r1, sl
 800f6d2:	f002 fec5 	bl	8012460 <__ssprint_r>
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	f040 828f 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f6dc:	ac21      	add	r4, sp, #132	@ 0x84
 800f6de:	e7c9      	b.n	800f674 <_svfprintf_r+0xcbc>
 800f6e0:	3210      	adds	r2, #16
 800f6e2:	2b07      	cmp	r3, #7
 800f6e4:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800f6e8:	f8c4 8004 	str.w	r8, [r4, #4]
 800f6ec:	dd08      	ble.n	800f700 <_svfprintf_r+0xd48>
 800f6ee:	9802      	ldr	r0, [sp, #8]
 800f6f0:	aa1e      	add	r2, sp, #120	@ 0x78
 800f6f2:	4651      	mov	r1, sl
 800f6f4:	f002 feb4 	bl	8012460 <__ssprint_r>
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	f040 827e 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f6fe:	a921      	add	r1, sp, #132	@ 0x84
 800f700:	3e10      	subs	r6, #16
 800f702:	460c      	mov	r4, r1
 800f704:	e7be      	b.n	800f684 <_svfprintf_r+0xccc>
 800f706:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f708:	2a00      	cmp	r2, #0
 800f70a:	dc7b      	bgt.n	800f804 <_svfprintf_r+0xe4c>
 800f70c:	4a3b      	ldr	r2, [pc, #236]	@ (800f7fc <_svfprintf_r+0xe44>)
 800f70e:	6022      	str	r2, [r4, #0]
 800f710:	2201      	movs	r2, #1
 800f712:	4413      	add	r3, r2
 800f714:	9320      	str	r3, [sp, #128]	@ 0x80
 800f716:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f718:	6062      	str	r2, [r4, #4]
 800f71a:	4413      	add	r3, r2
 800f71c:	2b07      	cmp	r3, #7
 800f71e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f720:	dc46      	bgt.n	800f7b0 <_svfprintf_r+0xdf8>
 800f722:	3408      	adds	r4, #8
 800f724:	9903      	ldr	r1, [sp, #12]
 800f726:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f728:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f72a:	430b      	orrs	r3, r1
 800f72c:	f005 0101 	and.w	r1, r5, #1
 800f730:	430b      	orrs	r3, r1
 800f732:	f43f ad14 	beq.w	800f15e <_svfprintf_r+0x7a6>
 800f736:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f738:	6023      	str	r3, [r4, #0]
 800f73a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f73c:	6063      	str	r3, [r4, #4]
 800f73e:	441a      	add	r2, r3
 800f740:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f742:	9220      	str	r2, [sp, #128]	@ 0x80
 800f744:	3301      	adds	r3, #1
 800f746:	2b07      	cmp	r3, #7
 800f748:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f74a:	dc3b      	bgt.n	800f7c4 <_svfprintf_r+0xe0c>
 800f74c:	f104 0308 	add.w	r3, r4, #8
 800f750:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800f752:	2e00      	cmp	r6, #0
 800f754:	da1b      	bge.n	800f78e <_svfprintf_r+0xdd6>
 800f756:	4f2a      	ldr	r7, [pc, #168]	@ (800f800 <_svfprintf_r+0xe48>)
 800f758:	4276      	negs	r6, r6
 800f75a:	461a      	mov	r2, r3
 800f75c:	2410      	movs	r4, #16
 800f75e:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	@ 0x7c
 800f762:	2e10      	cmp	r6, #16
 800f764:	f101 0101 	add.w	r1, r1, #1
 800f768:	f103 0308 	add.w	r3, r3, #8
 800f76c:	6017      	str	r7, [r2, #0]
 800f76e:	dc33      	bgt.n	800f7d8 <_svfprintf_r+0xe20>
 800f770:	6056      	str	r6, [r2, #4]
 800f772:	2907      	cmp	r1, #7
 800f774:	4406      	add	r6, r0
 800f776:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 800f77a:	dd08      	ble.n	800f78e <_svfprintf_r+0xdd6>
 800f77c:	9802      	ldr	r0, [sp, #8]
 800f77e:	aa1e      	add	r2, sp, #120	@ 0x78
 800f780:	4651      	mov	r1, sl
 800f782:	f002 fe6d 	bl	8012460 <__ssprint_r>
 800f786:	2800      	cmp	r0, #0
 800f788:	f040 8237 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f78c:	ab21      	add	r3, sp, #132	@ 0x84
 800f78e:	9a03      	ldr	r2, [sp, #12]
 800f790:	605a      	str	r2, [r3, #4]
 800f792:	9903      	ldr	r1, [sp, #12]
 800f794:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f796:	f8c3 9000 	str.w	r9, [r3]
 800f79a:	440a      	add	r2, r1
 800f79c:	9220      	str	r2, [sp, #128]	@ 0x80
 800f79e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800f7a0:	3201      	adds	r2, #1
 800f7a2:	2a07      	cmp	r2, #7
 800f7a4:	921f      	str	r2, [sp, #124]	@ 0x7c
 800f7a6:	f73f af7d 	bgt.w	800f6a4 <_svfprintf_r+0xcec>
 800f7aa:	f103 0408 	add.w	r4, r3, #8
 800f7ae:	e4d6      	b.n	800f15e <_svfprintf_r+0x7a6>
 800f7b0:	9802      	ldr	r0, [sp, #8]
 800f7b2:	aa1e      	add	r2, sp, #120	@ 0x78
 800f7b4:	4651      	mov	r1, sl
 800f7b6:	f002 fe53 	bl	8012460 <__ssprint_r>
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	f040 821d 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f7c0:	ac21      	add	r4, sp, #132	@ 0x84
 800f7c2:	e7af      	b.n	800f724 <_svfprintf_r+0xd6c>
 800f7c4:	9802      	ldr	r0, [sp, #8]
 800f7c6:	aa1e      	add	r2, sp, #120	@ 0x78
 800f7c8:	4651      	mov	r1, sl
 800f7ca:	f002 fe49 	bl	8012460 <__ssprint_r>
 800f7ce:	2800      	cmp	r0, #0
 800f7d0:	f040 8213 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f7d4:	ab21      	add	r3, sp, #132	@ 0x84
 800f7d6:	e7bb      	b.n	800f750 <_svfprintf_r+0xd98>
 800f7d8:	3010      	adds	r0, #16
 800f7da:	2907      	cmp	r1, #7
 800f7dc:	e9cd 101f 	strd	r1, r0, [sp, #124]	@ 0x7c
 800f7e0:	6054      	str	r4, [r2, #4]
 800f7e2:	dd08      	ble.n	800f7f6 <_svfprintf_r+0xe3e>
 800f7e4:	9802      	ldr	r0, [sp, #8]
 800f7e6:	aa1e      	add	r2, sp, #120	@ 0x78
 800f7e8:	4651      	mov	r1, sl
 800f7ea:	f002 fe39 	bl	8012460 <__ssprint_r>
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	f040 8203 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f7f4:	ab21      	add	r3, sp, #132	@ 0x84
 800f7f6:	3e10      	subs	r6, #16
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	e7b0      	b.n	800f75e <_svfprintf_r+0xda6>
 800f7fc:	08014026 	.word	0x08014026
 800f800:	08014028 	.word	0x08014028
 800f804:	9a03      	ldr	r2, [sp, #12]
 800f806:	444a      	add	r2, r9
 800f808:	9204      	str	r2, [sp, #16]
 800f80a:	9a03      	ldr	r2, [sp, #12]
 800f80c:	42b2      	cmp	r2, r6
 800f80e:	bfa8      	it	ge
 800f810:	4632      	movge	r2, r6
 800f812:	2a00      	cmp	r2, #0
 800f814:	4690      	mov	r8, r2
 800f816:	dd0a      	ble.n	800f82e <_svfprintf_r+0xe76>
 800f818:	4413      	add	r3, r2
 800f81a:	9320      	str	r3, [sp, #128]	@ 0x80
 800f81c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f81e:	3301      	adds	r3, #1
 800f820:	2b07      	cmp	r3, #7
 800f822:	e9c4 9200 	strd	r9, r2, [r4]
 800f826:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f828:	f300 8089 	bgt.w	800f93e <_svfprintf_r+0xf86>
 800f82c:	3408      	adds	r4, #8
 800f82e:	4643      	mov	r3, r8
 800f830:	2b00      	cmp	r3, #0
 800f832:	bfac      	ite	ge
 800f834:	eba6 0808 	subge.w	r8, r6, r8
 800f838:	46b0      	movlt	r8, r6
 800f83a:	f1b8 0f00 	cmp.w	r8, #0
 800f83e:	dd1b      	ble.n	800f878 <_svfprintf_r+0xec0>
 800f840:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 800f844:	4896      	ldr	r0, [pc, #600]	@ (800faa0 <_svfprintf_r+0x10e8>)
 800f846:	6020      	str	r0, [r4, #0]
 800f848:	f1b8 0f10 	cmp.w	r8, #16
 800f84c:	f102 0201 	add.w	r2, r2, #1
 800f850:	f104 0108 	add.w	r1, r4, #8
 800f854:	dc7d      	bgt.n	800f952 <_svfprintf_r+0xf9a>
 800f856:	4443      	add	r3, r8
 800f858:	2a07      	cmp	r2, #7
 800f85a:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800f85e:	f8c4 8004 	str.w	r8, [r4, #4]
 800f862:	f340 808a 	ble.w	800f97a <_svfprintf_r+0xfc2>
 800f866:	9802      	ldr	r0, [sp, #8]
 800f868:	aa1e      	add	r2, sp, #120	@ 0x78
 800f86a:	4651      	mov	r1, sl
 800f86c:	f002 fdf8 	bl	8012460 <__ssprint_r>
 800f870:	2800      	cmp	r0, #0
 800f872:	f040 81c2 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f876:	ac21      	add	r4, sp, #132	@ 0x84
 800f878:	056b      	lsls	r3, r5, #21
 800f87a:	eb09 0806 	add.w	r8, r9, r6
 800f87e:	d508      	bpl.n	800f892 <_svfprintf_r+0xeda>
 800f880:	9b06      	ldr	r3, [sp, #24]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d17b      	bne.n	800f97e <_svfprintf_r+0xfc6>
 800f886:	2f00      	cmp	r7, #0
 800f888:	d17b      	bne.n	800f982 <_svfprintf_r+0xfca>
 800f88a:	9b04      	ldr	r3, [sp, #16]
 800f88c:	4598      	cmp	r8, r3
 800f88e:	bf28      	it	cs
 800f890:	4698      	movcs	r8, r3
 800f892:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f894:	9a03      	ldr	r2, [sp, #12]
 800f896:	4293      	cmp	r3, r2
 800f898:	db01      	blt.n	800f89e <_svfprintf_r+0xee6>
 800f89a:	07ee      	lsls	r6, r5, #31
 800f89c:	d50e      	bpl.n	800f8bc <_svfprintf_r+0xf04>
 800f89e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8a0:	6023      	str	r3, [r4, #0]
 800f8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8a6:	6063      	str	r3, [r4, #4]
 800f8a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f8aa:	4413      	add	r3, r2
 800f8ac:	9320      	str	r3, [sp, #128]	@ 0x80
 800f8ae:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	2b07      	cmp	r3, #7
 800f8b4:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f8b6:	f300 80df 	bgt.w	800fa78 <_svfprintf_r+0x10c0>
 800f8ba:	3408      	adds	r4, #8
 800f8bc:	9b03      	ldr	r3, [sp, #12]
 800f8be:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 800f8c0:	1bdf      	subs	r7, r3, r7
 800f8c2:	9b04      	ldr	r3, [sp, #16]
 800f8c4:	eba3 0308 	sub.w	r3, r3, r8
 800f8c8:	429f      	cmp	r7, r3
 800f8ca:	bfa8      	it	ge
 800f8cc:	461f      	movge	r7, r3
 800f8ce:	2f00      	cmp	r7, #0
 800f8d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f8d2:	dd0a      	ble.n	800f8ea <_svfprintf_r+0xf32>
 800f8d4:	443b      	add	r3, r7
 800f8d6:	9320      	str	r3, [sp, #128]	@ 0x80
 800f8d8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f8da:	3301      	adds	r3, #1
 800f8dc:	2b07      	cmp	r3, #7
 800f8de:	e9c4 8700 	strd	r8, r7, [r4]
 800f8e2:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f8e4:	f300 80d2 	bgt.w	800fa8c <_svfprintf_r+0x10d4>
 800f8e8:	3408      	adds	r4, #8
 800f8ea:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800f8ec:	9b03      	ldr	r3, [sp, #12]
 800f8ee:	2f00      	cmp	r7, #0
 800f8f0:	eba3 0606 	sub.w	r6, r3, r6
 800f8f4:	bfa8      	it	ge
 800f8f6:	1bf6      	subge	r6, r6, r7
 800f8f8:	2e00      	cmp	r6, #0
 800f8fa:	f77f ac30 	ble.w	800f15e <_svfprintf_r+0x7a6>
 800f8fe:	4f68      	ldr	r7, [pc, #416]	@ (800faa0 <_svfprintf_r+0x10e8>)
 800f900:	f04f 0810 	mov.w	r8, #16
 800f904:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800f908:	2e10      	cmp	r6, #16
 800f90a:	f103 0301 	add.w	r3, r3, #1
 800f90e:	f104 0108 	add.w	r1, r4, #8
 800f912:	6027      	str	r7, [r4, #0]
 800f914:	f77f aebf 	ble.w	800f696 <_svfprintf_r+0xcde>
 800f918:	3210      	adds	r2, #16
 800f91a:	2b07      	cmp	r3, #7
 800f91c:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800f920:	f8c4 8004 	str.w	r8, [r4, #4]
 800f924:	dd08      	ble.n	800f938 <_svfprintf_r+0xf80>
 800f926:	9802      	ldr	r0, [sp, #8]
 800f928:	aa1e      	add	r2, sp, #120	@ 0x78
 800f92a:	4651      	mov	r1, sl
 800f92c:	f002 fd98 	bl	8012460 <__ssprint_r>
 800f930:	2800      	cmp	r0, #0
 800f932:	f040 8162 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f936:	a921      	add	r1, sp, #132	@ 0x84
 800f938:	3e10      	subs	r6, #16
 800f93a:	460c      	mov	r4, r1
 800f93c:	e7e2      	b.n	800f904 <_svfprintf_r+0xf4c>
 800f93e:	9802      	ldr	r0, [sp, #8]
 800f940:	aa1e      	add	r2, sp, #120	@ 0x78
 800f942:	4651      	mov	r1, sl
 800f944:	f002 fd8c 	bl	8012460 <__ssprint_r>
 800f948:	2800      	cmp	r0, #0
 800f94a:	f040 8156 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f94e:	ac21      	add	r4, sp, #132	@ 0x84
 800f950:	e76d      	b.n	800f82e <_svfprintf_r+0xe76>
 800f952:	2010      	movs	r0, #16
 800f954:	4403      	add	r3, r0
 800f956:	2a07      	cmp	r2, #7
 800f958:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800f95c:	6060      	str	r0, [r4, #4]
 800f95e:	dd08      	ble.n	800f972 <_svfprintf_r+0xfba>
 800f960:	9802      	ldr	r0, [sp, #8]
 800f962:	aa1e      	add	r2, sp, #120	@ 0x78
 800f964:	4651      	mov	r1, sl
 800f966:	f002 fd7b 	bl	8012460 <__ssprint_r>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	f040 8145 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800f970:	a921      	add	r1, sp, #132	@ 0x84
 800f972:	f1a8 0810 	sub.w	r8, r8, #16
 800f976:	460c      	mov	r4, r1
 800f978:	e762      	b.n	800f840 <_svfprintf_r+0xe88>
 800f97a:	460c      	mov	r4, r1
 800f97c:	e77c      	b.n	800f878 <_svfprintf_r+0xec0>
 800f97e:	2f00      	cmp	r7, #0
 800f980:	d04a      	beq.n	800fa18 <_svfprintf_r+0x1060>
 800f982:	3f01      	subs	r7, #1
 800f984:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f986:	6023      	str	r3, [r4, #0]
 800f988:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f98a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f98c:	6063      	str	r3, [r4, #4]
 800f98e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f990:	4413      	add	r3, r2
 800f992:	9320      	str	r3, [sp, #128]	@ 0x80
 800f994:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f996:	3301      	adds	r3, #1
 800f998:	2b07      	cmp	r3, #7
 800f99a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f99c:	dc43      	bgt.n	800fa26 <_svfprintf_r+0x106e>
 800f99e:	3408      	adds	r4, #8
 800f9a0:	9b07      	ldr	r3, [sp, #28]
 800f9a2:	781a      	ldrb	r2, [r3, #0]
 800f9a4:	9b04      	ldr	r3, [sp, #16]
 800f9a6:	eba3 0308 	sub.w	r3, r3, r8
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	bfa8      	it	ge
 800f9ae:	461a      	movge	r2, r3
 800f9b0:	2a00      	cmp	r2, #0
 800f9b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f9b4:	4691      	mov	r9, r2
 800f9b6:	dd09      	ble.n	800f9cc <_svfprintf_r+0x1014>
 800f9b8:	4413      	add	r3, r2
 800f9ba:	9320      	str	r3, [sp, #128]	@ 0x80
 800f9bc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f9be:	3301      	adds	r3, #1
 800f9c0:	2b07      	cmp	r3, #7
 800f9c2:	e9c4 8200 	strd	r8, r2, [r4]
 800f9c6:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f9c8:	dc37      	bgt.n	800fa3a <_svfprintf_r+0x1082>
 800f9ca:	3408      	adds	r4, #8
 800f9cc:	9b07      	ldr	r3, [sp, #28]
 800f9ce:	781e      	ldrb	r6, [r3, #0]
 800f9d0:	f1b9 0f00 	cmp.w	r9, #0
 800f9d4:	bfa8      	it	ge
 800f9d6:	eba6 0609 	subge.w	r6, r6, r9
 800f9da:	2e00      	cmp	r6, #0
 800f9dc:	dd18      	ble.n	800fa10 <_svfprintf_r+0x1058>
 800f9de:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800f9e2:	482f      	ldr	r0, [pc, #188]	@ (800faa0 <_svfprintf_r+0x10e8>)
 800f9e4:	6020      	str	r0, [r4, #0]
 800f9e6:	2e10      	cmp	r6, #16
 800f9e8:	f103 0301 	add.w	r3, r3, #1
 800f9ec:	f104 0108 	add.w	r1, r4, #8
 800f9f0:	dc2d      	bgt.n	800fa4e <_svfprintf_r+0x1096>
 800f9f2:	6066      	str	r6, [r4, #4]
 800f9f4:	2b07      	cmp	r3, #7
 800f9f6:	4416      	add	r6, r2
 800f9f8:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 800f9fc:	dd3a      	ble.n	800fa74 <_svfprintf_r+0x10bc>
 800f9fe:	9802      	ldr	r0, [sp, #8]
 800fa00:	aa1e      	add	r2, sp, #120	@ 0x78
 800fa02:	4651      	mov	r1, sl
 800fa04:	f002 fd2c 	bl	8012460 <__ssprint_r>
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	f040 80f6 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800fa0e:	ac21      	add	r4, sp, #132	@ 0x84
 800fa10:	9b07      	ldr	r3, [sp, #28]
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	4498      	add	r8, r3
 800fa16:	e733      	b.n	800f880 <_svfprintf_r+0xec8>
 800fa18:	9b07      	ldr	r3, [sp, #28]
 800fa1a:	3b01      	subs	r3, #1
 800fa1c:	9307      	str	r3, [sp, #28]
 800fa1e:	9b06      	ldr	r3, [sp, #24]
 800fa20:	3b01      	subs	r3, #1
 800fa22:	9306      	str	r3, [sp, #24]
 800fa24:	e7ae      	b.n	800f984 <_svfprintf_r+0xfcc>
 800fa26:	9802      	ldr	r0, [sp, #8]
 800fa28:	aa1e      	add	r2, sp, #120	@ 0x78
 800fa2a:	4651      	mov	r1, sl
 800fa2c:	f002 fd18 	bl	8012460 <__ssprint_r>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	f040 80e2 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800fa36:	ac21      	add	r4, sp, #132	@ 0x84
 800fa38:	e7b2      	b.n	800f9a0 <_svfprintf_r+0xfe8>
 800fa3a:	9802      	ldr	r0, [sp, #8]
 800fa3c:	aa1e      	add	r2, sp, #120	@ 0x78
 800fa3e:	4651      	mov	r1, sl
 800fa40:	f002 fd0e 	bl	8012460 <__ssprint_r>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	f040 80d8 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800fa4a:	ac21      	add	r4, sp, #132	@ 0x84
 800fa4c:	e7be      	b.n	800f9cc <_svfprintf_r+0x1014>
 800fa4e:	2010      	movs	r0, #16
 800fa50:	4402      	add	r2, r0
 800fa52:	2b07      	cmp	r3, #7
 800fa54:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800fa58:	6060      	str	r0, [r4, #4]
 800fa5a:	dd08      	ble.n	800fa6e <_svfprintf_r+0x10b6>
 800fa5c:	9802      	ldr	r0, [sp, #8]
 800fa5e:	aa1e      	add	r2, sp, #120	@ 0x78
 800fa60:	4651      	mov	r1, sl
 800fa62:	f002 fcfd 	bl	8012460 <__ssprint_r>
 800fa66:	2800      	cmp	r0, #0
 800fa68:	f040 80c7 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800fa6c:	a921      	add	r1, sp, #132	@ 0x84
 800fa6e:	3e10      	subs	r6, #16
 800fa70:	460c      	mov	r4, r1
 800fa72:	e7b4      	b.n	800f9de <_svfprintf_r+0x1026>
 800fa74:	460c      	mov	r4, r1
 800fa76:	e7cb      	b.n	800fa10 <_svfprintf_r+0x1058>
 800fa78:	9802      	ldr	r0, [sp, #8]
 800fa7a:	aa1e      	add	r2, sp, #120	@ 0x78
 800fa7c:	4651      	mov	r1, sl
 800fa7e:	f002 fcef 	bl	8012460 <__ssprint_r>
 800fa82:	2800      	cmp	r0, #0
 800fa84:	f040 80b9 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800fa88:	ac21      	add	r4, sp, #132	@ 0x84
 800fa8a:	e717      	b.n	800f8bc <_svfprintf_r+0xf04>
 800fa8c:	9802      	ldr	r0, [sp, #8]
 800fa8e:	aa1e      	add	r2, sp, #120	@ 0x78
 800fa90:	4651      	mov	r1, sl
 800fa92:	f002 fce5 	bl	8012460 <__ssprint_r>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	f040 80af 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800fa9c:	ac21      	add	r4, sp, #132	@ 0x84
 800fa9e:	e724      	b.n	800f8ea <_svfprintf_r+0xf32>
 800faa0:	08014028 	.word	0x08014028
 800faa4:	9803      	ldr	r0, [sp, #12]
 800faa6:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800faa8:	2801      	cmp	r0, #1
 800faaa:	f103 0201 	add.w	r2, r3, #1
 800faae:	f101 0101 	add.w	r1, r1, #1
 800fab2:	f104 0308 	add.w	r3, r4, #8
 800fab6:	dc01      	bgt.n	800fabc <_svfprintf_r+0x1104>
 800fab8:	07e8      	lsls	r0, r5, #31
 800faba:	d572      	bpl.n	800fba2 <_svfprintf_r+0x11ea>
 800fabc:	2001      	movs	r0, #1
 800fabe:	2907      	cmp	r1, #7
 800fac0:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 800fac4:	f8c4 9000 	str.w	r9, [r4]
 800fac8:	6060      	str	r0, [r4, #4]
 800faca:	dd08      	ble.n	800fade <_svfprintf_r+0x1126>
 800facc:	9802      	ldr	r0, [sp, #8]
 800face:	aa1e      	add	r2, sp, #120	@ 0x78
 800fad0:	4651      	mov	r1, sl
 800fad2:	f002 fcc5 	bl	8012460 <__ssprint_r>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	f040 808f 	bne.w	800fbfa <_svfprintf_r+0x1242>
 800fadc:	ab21      	add	r3, sp, #132	@ 0x84
 800fade:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fae0:	601a      	str	r2, [r3, #0]
 800fae2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fae4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fae6:	605a      	str	r2, [r3, #4]
 800fae8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800faea:	440a      	add	r2, r1
 800faec:	9220      	str	r2, [sp, #128]	@ 0x80
 800faee:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800faf0:	3201      	adds	r2, #1
 800faf2:	2a07      	cmp	r2, #7
 800faf4:	921f      	str	r2, [sp, #124]	@ 0x7c
 800faf6:	dc25      	bgt.n	800fb44 <_svfprintf_r+0x118c>
 800faf8:	3308      	adds	r3, #8
 800fafa:	9803      	ldr	r0, [sp, #12]
 800fafc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb04:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	@ 0x7c
 800fb08:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800fb0c:	d023      	beq.n	800fb56 <_svfprintf_r+0x119e>
 800fb0e:	f109 0001 	add.w	r0, r9, #1
 800fb12:	e9c3 0400 	strd	r0, r4, [r3]
 800fb16:	9803      	ldr	r0, [sp, #12]
 800fb18:	3101      	adds	r1, #1
 800fb1a:	3a01      	subs	r2, #1
 800fb1c:	4402      	add	r2, r0
 800fb1e:	2907      	cmp	r1, #7
 800fb20:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 800fb24:	dd46      	ble.n	800fbb4 <_svfprintf_r+0x11fc>
 800fb26:	9802      	ldr	r0, [sp, #8]
 800fb28:	aa1e      	add	r2, sp, #120	@ 0x78
 800fb2a:	4651      	mov	r1, sl
 800fb2c:	f002 fc98 	bl	8012460 <__ssprint_r>
 800fb30:	2800      	cmp	r0, #0
 800fb32:	d162      	bne.n	800fbfa <_svfprintf_r+0x1242>
 800fb34:	ab21      	add	r3, sp, #132	@ 0x84
 800fb36:	aa1a      	add	r2, sp, #104	@ 0x68
 800fb38:	601a      	str	r2, [r3, #0]
 800fb3a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fb3c:	605a      	str	r2, [r3, #4]
 800fb3e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800fb40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fb42:	e62a      	b.n	800f79a <_svfprintf_r+0xde2>
 800fb44:	9802      	ldr	r0, [sp, #8]
 800fb46:	aa1e      	add	r2, sp, #120	@ 0x78
 800fb48:	4651      	mov	r1, sl
 800fb4a:	f002 fc89 	bl	8012460 <__ssprint_r>
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	d153      	bne.n	800fbfa <_svfprintf_r+0x1242>
 800fb52:	ab21      	add	r3, sp, #132	@ 0x84
 800fb54:	e7d1      	b.n	800fafa <_svfprintf_r+0x1142>
 800fb56:	9a03      	ldr	r2, [sp, #12]
 800fb58:	2a01      	cmp	r2, #1
 800fb5a:	ddec      	ble.n	800fb36 <_svfprintf_r+0x117e>
 800fb5c:	4e56      	ldr	r6, [pc, #344]	@ (800fcb8 <_svfprintf_r+0x1300>)
 800fb5e:	2710      	movs	r7, #16
 800fb60:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	@ 0x7c
 800fb64:	2c10      	cmp	r4, #16
 800fb66:	f102 0201 	add.w	r2, r2, #1
 800fb6a:	f103 0008 	add.w	r0, r3, #8
 800fb6e:	601e      	str	r6, [r3, #0]
 800fb70:	dc07      	bgt.n	800fb82 <_svfprintf_r+0x11ca>
 800fb72:	605c      	str	r4, [r3, #4]
 800fb74:	2a07      	cmp	r2, #7
 800fb76:	440c      	add	r4, r1
 800fb78:	e9cd 241f 	strd	r2, r4, [sp, #124]	@ 0x7c
 800fb7c:	dcd3      	bgt.n	800fb26 <_svfprintf_r+0x116e>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	e7d9      	b.n	800fb36 <_svfprintf_r+0x117e>
 800fb82:	3110      	adds	r1, #16
 800fb84:	2a07      	cmp	r2, #7
 800fb86:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800fb8a:	605f      	str	r7, [r3, #4]
 800fb8c:	dd06      	ble.n	800fb9c <_svfprintf_r+0x11e4>
 800fb8e:	9802      	ldr	r0, [sp, #8]
 800fb90:	aa1e      	add	r2, sp, #120	@ 0x78
 800fb92:	4651      	mov	r1, sl
 800fb94:	f002 fc64 	bl	8012460 <__ssprint_r>
 800fb98:	bb78      	cbnz	r0, 800fbfa <_svfprintf_r+0x1242>
 800fb9a:	a821      	add	r0, sp, #132	@ 0x84
 800fb9c:	3c10      	subs	r4, #16
 800fb9e:	4603      	mov	r3, r0
 800fba0:	e7de      	b.n	800fb60 <_svfprintf_r+0x11a8>
 800fba2:	2001      	movs	r0, #1
 800fba4:	2907      	cmp	r1, #7
 800fba6:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 800fbaa:	f8c4 9000 	str.w	r9, [r4]
 800fbae:	6060      	str	r0, [r4, #4]
 800fbb0:	ddc1      	ble.n	800fb36 <_svfprintf_r+0x117e>
 800fbb2:	e7b8      	b.n	800fb26 <_svfprintf_r+0x116e>
 800fbb4:	3308      	adds	r3, #8
 800fbb6:	e7be      	b.n	800fb36 <_svfprintf_r+0x117e>
 800fbb8:	460c      	mov	r4, r1
 800fbba:	f7ff bad0 	b.w	800f15e <_svfprintf_r+0x7a6>
 800fbbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fbc2:	1a9d      	subs	r5, r3, r2
 800fbc4:	2d00      	cmp	r5, #0
 800fbc6:	f77f aacd 	ble.w	800f164 <_svfprintf_r+0x7ac>
 800fbca:	4e3c      	ldr	r6, [pc, #240]	@ (800fcbc <_svfprintf_r+0x1304>)
 800fbcc:	2710      	movs	r7, #16
 800fbce:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800fbd2:	2d10      	cmp	r5, #16
 800fbd4:	f103 0301 	add.w	r3, r3, #1
 800fbd8:	6026      	str	r6, [r4, #0]
 800fbda:	dc18      	bgt.n	800fc0e <_svfprintf_r+0x1256>
 800fbdc:	442a      	add	r2, r5
 800fbde:	2b07      	cmp	r3, #7
 800fbe0:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800fbe4:	6065      	str	r5, [r4, #4]
 800fbe6:	f77f aabd 	ble.w	800f164 <_svfprintf_r+0x7ac>
 800fbea:	9802      	ldr	r0, [sp, #8]
 800fbec:	aa1e      	add	r2, sp, #120	@ 0x78
 800fbee:	4651      	mov	r1, sl
 800fbf0:	f002 fc36 	bl	8012460 <__ssprint_r>
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	f43f aab5 	beq.w	800f164 <_svfprintf_r+0x7ac>
 800fbfa:	f1bb 0f00 	cmp.w	fp, #0
 800fbfe:	f43f a8e0 	beq.w	800edc2 <_svfprintf_r+0x40a>
 800fc02:	9802      	ldr	r0, [sp, #8]
 800fc04:	4659      	mov	r1, fp
 800fc06:	f7fe fbcf 	bl	800e3a8 <_free_r>
 800fc0a:	f7ff b8da 	b.w	800edc2 <_svfprintf_r+0x40a>
 800fc0e:	3210      	adds	r2, #16
 800fc10:	2b07      	cmp	r3, #7
 800fc12:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800fc16:	6067      	str	r7, [r4, #4]
 800fc18:	dc02      	bgt.n	800fc20 <_svfprintf_r+0x1268>
 800fc1a:	3408      	adds	r4, #8
 800fc1c:	3d10      	subs	r5, #16
 800fc1e:	e7d6      	b.n	800fbce <_svfprintf_r+0x1216>
 800fc20:	9802      	ldr	r0, [sp, #8]
 800fc22:	aa1e      	add	r2, sp, #120	@ 0x78
 800fc24:	4651      	mov	r1, sl
 800fc26:	f002 fc1b 	bl	8012460 <__ssprint_r>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	d1e5      	bne.n	800fbfa <_svfprintf_r+0x1242>
 800fc2e:	ac21      	add	r4, sp, #132	@ 0x84
 800fc30:	e7f4      	b.n	800fc1c <_svfprintf_r+0x1264>
 800fc32:	9802      	ldr	r0, [sp, #8]
 800fc34:	4659      	mov	r1, fp
 800fc36:	f7fe fbb7 	bl	800e3a8 <_free_r>
 800fc3a:	f7ff baab 	b.w	800f194 <_svfprintf_r+0x7dc>
 800fc3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f43f a8be 	beq.w	800edc2 <_svfprintf_r+0x40a>
 800fc46:	9802      	ldr	r0, [sp, #8]
 800fc48:	aa1e      	add	r2, sp, #120	@ 0x78
 800fc4a:	4651      	mov	r1, sl
 800fc4c:	f002 fc08 	bl	8012460 <__ssprint_r>
 800fc50:	f7ff b8b7 	b.w	800edc2 <_svfprintf_r+0x40a>
 800fc54:	ea56 0207 	orrs.w	r2, r6, r7
 800fc58:	9506      	str	r5, [sp, #24]
 800fc5a:	f43f ab93 	beq.w	800f384 <_svfprintf_r+0x9cc>
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	f43f ac14 	beq.w	800f48c <_svfprintf_r+0xad4>
 800fc64:	2b02      	cmp	r3, #2
 800fc66:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 800fc6a:	f43f ac59 	beq.w	800f520 <_svfprintf_r+0xb68>
 800fc6e:	f006 0307 	and.w	r3, r6, #7
 800fc72:	08f6      	lsrs	r6, r6, #3
 800fc74:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800fc78:	08ff      	lsrs	r7, r7, #3
 800fc7a:	3330      	adds	r3, #48	@ 0x30
 800fc7c:	ea56 0107 	orrs.w	r1, r6, r7
 800fc80:	464a      	mov	r2, r9
 800fc82:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800fc86:	d1f2      	bne.n	800fc6e <_svfprintf_r+0x12b6>
 800fc88:	9906      	ldr	r1, [sp, #24]
 800fc8a:	07cd      	lsls	r5, r1, #31
 800fc8c:	d506      	bpl.n	800fc9c <_svfprintf_r+0x12e4>
 800fc8e:	2b30      	cmp	r3, #48	@ 0x30
 800fc90:	d004      	beq.n	800fc9c <_svfprintf_r+0x12e4>
 800fc92:	2330      	movs	r3, #48	@ 0x30
 800fc94:	f809 3c01 	strb.w	r3, [r9, #-1]
 800fc98:	f1a2 0902 	sub.w	r9, r2, #2
 800fc9c:	ab4a      	add	r3, sp, #296	@ 0x128
 800fc9e:	9d06      	ldr	r5, [sp, #24]
 800fca0:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 800fca4:	f04f 0b00 	mov.w	fp, #0
 800fca8:	eba3 0809 	sub.w	r8, r3, r9
 800fcac:	465f      	mov	r7, fp
 800fcae:	f8cd b018 	str.w	fp, [sp, #24]
 800fcb2:	465e      	mov	r6, fp
 800fcb4:	f7ff b9a4 	b.w	800f000 <_svfprintf_r+0x648>
 800fcb8:	08014028 	.word	0x08014028
 800fcbc:	08014038 	.word	0x08014038

0800fcc0 <__sprint_r>:
 800fcc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc4:	6893      	ldr	r3, [r2, #8]
 800fcc6:	4680      	mov	r8, r0
 800fcc8:	460e      	mov	r6, r1
 800fcca:	4614      	mov	r4, r2
 800fccc:	b343      	cbz	r3, 800fd20 <__sprint_r+0x60>
 800fcce:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800fcd0:	049d      	lsls	r5, r3, #18
 800fcd2:	d522      	bpl.n	800fd1a <__sprint_r+0x5a>
 800fcd4:	6815      	ldr	r5, [r2, #0]
 800fcd6:	68a0      	ldr	r0, [r4, #8]
 800fcd8:	3508      	adds	r5, #8
 800fcda:	b928      	cbnz	r0, 800fce8 <__sprint_r+0x28>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	60a3      	str	r3, [r4, #8]
 800fce0:	2300      	movs	r3, #0
 800fce2:	6063      	str	r3, [r4, #4]
 800fce4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fce8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800fcec:	f04f 0900 	mov.w	r9, #0
 800fcf0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800fcf4:	45ca      	cmp	sl, r9
 800fcf6:	dc05      	bgt.n	800fd04 <__sprint_r+0x44>
 800fcf8:	68a3      	ldr	r3, [r4, #8]
 800fcfa:	f027 0703 	bic.w	r7, r7, #3
 800fcfe:	1bdb      	subs	r3, r3, r7
 800fd00:	60a3      	str	r3, [r4, #8]
 800fd02:	e7e8      	b.n	800fcd6 <__sprint_r+0x16>
 800fd04:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800fd08:	4632      	mov	r2, r6
 800fd0a:	4640      	mov	r0, r8
 800fd0c:	f000 ffb9 	bl	8010c82 <_fputwc_r>
 800fd10:	1c43      	adds	r3, r0, #1
 800fd12:	d0e3      	beq.n	800fcdc <__sprint_r+0x1c>
 800fd14:	f109 0901 	add.w	r9, r9, #1
 800fd18:	e7ec      	b.n	800fcf4 <__sprint_r+0x34>
 800fd1a:	f000 fdcf 	bl	80108bc <__sfvwrite_r>
 800fd1e:	e7dd      	b.n	800fcdc <__sprint_r+0x1c>
 800fd20:	4618      	mov	r0, r3
 800fd22:	e7dd      	b.n	800fce0 <__sprint_r+0x20>

0800fd24 <_vfiprintf_r>:
 800fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd28:	b0bb      	sub	sp, #236	@ 0xec
 800fd2a:	460f      	mov	r7, r1
 800fd2c:	4693      	mov	fp, r2
 800fd2e:	461c      	mov	r4, r3
 800fd30:	461d      	mov	r5, r3
 800fd32:	9000      	str	r0, [sp, #0]
 800fd34:	b118      	cbz	r0, 800fd3e <_vfiprintf_r+0x1a>
 800fd36:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800fd38:	b90b      	cbnz	r3, 800fd3e <_vfiprintf_r+0x1a>
 800fd3a:	f7fe f9b9 	bl	800e0b0 <__sinit>
 800fd3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd40:	07db      	lsls	r3, r3, #31
 800fd42:	d405      	bmi.n	800fd50 <_vfiprintf_r+0x2c>
 800fd44:	89bb      	ldrh	r3, [r7, #12]
 800fd46:	059e      	lsls	r6, r3, #22
 800fd48:	d402      	bmi.n	800fd50 <_vfiprintf_r+0x2c>
 800fd4a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fd4c:	f7fe fac4 	bl	800e2d8 <__retarget_lock_acquire_recursive>
 800fd50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fd54:	0498      	lsls	r0, r3, #18
 800fd56:	d406      	bmi.n	800fd66 <_vfiprintf_r+0x42>
 800fd58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fd5c:	81bb      	strh	r3, [r7, #12]
 800fd5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fd64:	667b      	str	r3, [r7, #100]	@ 0x64
 800fd66:	89bb      	ldrh	r3, [r7, #12]
 800fd68:	0719      	lsls	r1, r3, #28
 800fd6a:	d501      	bpl.n	800fd70 <_vfiprintf_r+0x4c>
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	b9ab      	cbnz	r3, 800fd9c <_vfiprintf_r+0x78>
 800fd70:	9800      	ldr	r0, [sp, #0]
 800fd72:	4639      	mov	r1, r7
 800fd74:	f000 feee 	bl	8010b54 <__swsetup_r>
 800fd78:	b180      	cbz	r0, 800fd9c <_vfiprintf_r+0x78>
 800fd7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd7c:	07da      	lsls	r2, r3, #31
 800fd7e:	d506      	bpl.n	800fd8e <_vfiprintf_r+0x6a>
 800fd80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fd84:	9303      	str	r3, [sp, #12]
 800fd86:	9803      	ldr	r0, [sp, #12]
 800fd88:	b03b      	add	sp, #236	@ 0xec
 800fd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd8e:	89bb      	ldrh	r3, [r7, #12]
 800fd90:	059b      	lsls	r3, r3, #22
 800fd92:	d4f5      	bmi.n	800fd80 <_vfiprintf_r+0x5c>
 800fd94:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fd96:	f7fe faa0 	bl	800e2da <__retarget_lock_release_recursive>
 800fd9a:	e7f1      	b.n	800fd80 <_vfiprintf_r+0x5c>
 800fd9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fda0:	f003 021a 	and.w	r2, r3, #26
 800fda4:	2a0a      	cmp	r2, #10
 800fda6:	d114      	bne.n	800fdd2 <_vfiprintf_r+0xae>
 800fda8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fdac:	2a00      	cmp	r2, #0
 800fdae:	db10      	blt.n	800fdd2 <_vfiprintf_r+0xae>
 800fdb0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fdb2:	07d6      	lsls	r6, r2, #31
 800fdb4:	d404      	bmi.n	800fdc0 <_vfiprintf_r+0x9c>
 800fdb6:	059d      	lsls	r5, r3, #22
 800fdb8:	d402      	bmi.n	800fdc0 <_vfiprintf_r+0x9c>
 800fdba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fdbc:	f7fe fa8d 	bl	800e2da <__retarget_lock_release_recursive>
 800fdc0:	9800      	ldr	r0, [sp, #0]
 800fdc2:	4623      	mov	r3, r4
 800fdc4:	465a      	mov	r2, fp
 800fdc6:	4639      	mov	r1, r7
 800fdc8:	b03b      	add	sp, #236	@ 0xec
 800fdca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdce:	f000 bc31 	b.w	8010634 <__sbprintf>
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800fdd8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800fddc:	ae11      	add	r6, sp, #68	@ 0x44
 800fdde:	960e      	str	r6, [sp, #56]	@ 0x38
 800fde0:	9307      	str	r3, [sp, #28]
 800fde2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fde4:	9303      	str	r3, [sp, #12]
 800fde6:	465b      	mov	r3, fp
 800fde8:	461c      	mov	r4, r3
 800fdea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdee:	b10a      	cbz	r2, 800fdf4 <_vfiprintf_r+0xd0>
 800fdf0:	2a25      	cmp	r2, #37	@ 0x25
 800fdf2:	d1f9      	bne.n	800fde8 <_vfiprintf_r+0xc4>
 800fdf4:	ebb4 080b 	subs.w	r8, r4, fp
 800fdf8:	d00d      	beq.n	800fe16 <_vfiprintf_r+0xf2>
 800fdfa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fdfc:	4443      	add	r3, r8
 800fdfe:	9310      	str	r3, [sp, #64]	@ 0x40
 800fe00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe02:	3301      	adds	r3, #1
 800fe04:	2b07      	cmp	r3, #7
 800fe06:	e9c6 b800 	strd	fp, r8, [r6]
 800fe0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fe0c:	dc75      	bgt.n	800fefa <_vfiprintf_r+0x1d6>
 800fe0e:	3608      	adds	r6, #8
 800fe10:	9b03      	ldr	r3, [sp, #12]
 800fe12:	4443      	add	r3, r8
 800fe14:	9303      	str	r3, [sp, #12]
 800fe16:	7823      	ldrb	r3, [r4, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	f000 83cd 	beq.w	80105b8 <_vfiprintf_r+0x894>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fe24:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800fe28:	3401      	adds	r4, #1
 800fe2a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800fe2e:	469a      	mov	sl, r3
 800fe30:	46a3      	mov	fp, r4
 800fe32:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800fe36:	f1a3 0220 	sub.w	r2, r3, #32
 800fe3a:	2a5a      	cmp	r2, #90	@ 0x5a
 800fe3c:	f200 8316 	bhi.w	801046c <_vfiprintf_r+0x748>
 800fe40:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fe44:	0314009a 	.word	0x0314009a
 800fe48:	00a20314 	.word	0x00a20314
 800fe4c:	03140314 	.word	0x03140314
 800fe50:	00820314 	.word	0x00820314
 800fe54:	03140314 	.word	0x03140314
 800fe58:	00af00a5 	.word	0x00af00a5
 800fe5c:	00ac0314 	.word	0x00ac0314
 800fe60:	031400b1 	.word	0x031400b1
 800fe64:	00d000cd 	.word	0x00d000cd
 800fe68:	00d000d0 	.word	0x00d000d0
 800fe6c:	00d000d0 	.word	0x00d000d0
 800fe70:	00d000d0 	.word	0x00d000d0
 800fe74:	00d000d0 	.word	0x00d000d0
 800fe78:	03140314 	.word	0x03140314
 800fe7c:	03140314 	.word	0x03140314
 800fe80:	03140314 	.word	0x03140314
 800fe84:	03140314 	.word	0x03140314
 800fe88:	00f70314 	.word	0x00f70314
 800fe8c:	03140104 	.word	0x03140104
 800fe90:	03140314 	.word	0x03140314
 800fe94:	03140314 	.word	0x03140314
 800fe98:	03140314 	.word	0x03140314
 800fe9c:	03140314 	.word	0x03140314
 800fea0:	01520314 	.word	0x01520314
 800fea4:	03140314 	.word	0x03140314
 800fea8:	019a0314 	.word	0x019a0314
 800feac:	027a0314 	.word	0x027a0314
 800feb0:	03140314 	.word	0x03140314
 800feb4:	0314029a 	.word	0x0314029a
 800feb8:	03140314 	.word	0x03140314
 800febc:	03140314 	.word	0x03140314
 800fec0:	03140314 	.word	0x03140314
 800fec4:	03140314 	.word	0x03140314
 800fec8:	00f70314 	.word	0x00f70314
 800fecc:	03140106 	.word	0x03140106
 800fed0:	03140314 	.word	0x03140314
 800fed4:	010600e0 	.word	0x010600e0
 800fed8:	031400f1 	.word	0x031400f1
 800fedc:	031400eb 	.word	0x031400eb
 800fee0:	01540132 	.word	0x01540132
 800fee4:	00f10189 	.word	0x00f10189
 800fee8:	019a0314 	.word	0x019a0314
 800feec:	027c0098 	.word	0x027c0098
 800fef0:	03140314 	.word	0x03140314
 800fef4:	03140065 	.word	0x03140065
 800fef8:	0098      	.short	0x0098
 800fefa:	9800      	ldr	r0, [sp, #0]
 800fefc:	aa0e      	add	r2, sp, #56	@ 0x38
 800fefe:	4639      	mov	r1, r7
 800ff00:	f7ff fede 	bl	800fcc0 <__sprint_r>
 800ff04:	2800      	cmp	r0, #0
 800ff06:	f040 8336 	bne.w	8010576 <_vfiprintf_r+0x852>
 800ff0a:	ae11      	add	r6, sp, #68	@ 0x44
 800ff0c:	e780      	b.n	800fe10 <_vfiprintf_r+0xec>
 800ff0e:	4a99      	ldr	r2, [pc, #612]	@ (8010174 <_vfiprintf_r+0x450>)
 800ff10:	9205      	str	r2, [sp, #20]
 800ff12:	f01a 0220 	ands.w	r2, sl, #32
 800ff16:	f000 8231 	beq.w	801037c <_vfiprintf_r+0x658>
 800ff1a:	3507      	adds	r5, #7
 800ff1c:	f025 0507 	bic.w	r5, r5, #7
 800ff20:	46a8      	mov	r8, r5
 800ff22:	686d      	ldr	r5, [r5, #4]
 800ff24:	f858 4b08 	ldr.w	r4, [r8], #8
 800ff28:	f01a 0f01 	tst.w	sl, #1
 800ff2c:	d009      	beq.n	800ff42 <_vfiprintf_r+0x21e>
 800ff2e:	ea54 0205 	orrs.w	r2, r4, r5
 800ff32:	bf1f      	itttt	ne
 800ff34:	2230      	movne	r2, #48	@ 0x30
 800ff36:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800ff3a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800ff3e:	f04a 0a02 	orrne.w	sl, sl, #2
 800ff42:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800ff46:	e112      	b.n	801016e <_vfiprintf_r+0x44a>
 800ff48:	9800      	ldr	r0, [sp, #0]
 800ff4a:	f000 fef7 	bl	8010d3c <_localeconv_r>
 800ff4e:	6843      	ldr	r3, [r0, #4]
 800ff50:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7f0 fa14 	bl	8000380 <strlen>
 800ff58:	9007      	str	r0, [sp, #28]
 800ff5a:	9800      	ldr	r0, [sp, #0]
 800ff5c:	f000 feee 	bl	8010d3c <_localeconv_r>
 800ff60:	6883      	ldr	r3, [r0, #8]
 800ff62:	9306      	str	r3, [sp, #24]
 800ff64:	9b07      	ldr	r3, [sp, #28]
 800ff66:	b12b      	cbz	r3, 800ff74 <_vfiprintf_r+0x250>
 800ff68:	9b06      	ldr	r3, [sp, #24]
 800ff6a:	b11b      	cbz	r3, 800ff74 <_vfiprintf_r+0x250>
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	b10b      	cbz	r3, 800ff74 <_vfiprintf_r+0x250>
 800ff70:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800ff74:	465c      	mov	r4, fp
 800ff76:	e75b      	b.n	800fe30 <_vfiprintf_r+0x10c>
 800ff78:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d1f9      	bne.n	800ff74 <_vfiprintf_r+0x250>
 800ff80:	2320      	movs	r3, #32
 800ff82:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ff86:	e7f5      	b.n	800ff74 <_vfiprintf_r+0x250>
 800ff88:	f04a 0a01 	orr.w	sl, sl, #1
 800ff8c:	e7f2      	b.n	800ff74 <_vfiprintf_r+0x250>
 800ff8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff92:	9302      	str	r3, [sp, #8]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	daed      	bge.n	800ff74 <_vfiprintf_r+0x250>
 800ff98:	425b      	negs	r3, r3
 800ff9a:	9302      	str	r3, [sp, #8]
 800ff9c:	f04a 0a04 	orr.w	sl, sl, #4
 800ffa0:	e7e8      	b.n	800ff74 <_vfiprintf_r+0x250>
 800ffa2:	232b      	movs	r3, #43	@ 0x2b
 800ffa4:	e7ed      	b.n	800ff82 <_vfiprintf_r+0x25e>
 800ffa6:	465a      	mov	r2, fp
 800ffa8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ffac:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffae:	d112      	bne.n	800ffd6 <_vfiprintf_r+0x2b2>
 800ffb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ffb8:	9301      	str	r3, [sp, #4]
 800ffba:	4693      	mov	fp, r2
 800ffbc:	e7da      	b.n	800ff74 <_vfiprintf_r+0x250>
 800ffbe:	9b01      	ldr	r3, [sp, #4]
 800ffc0:	fb00 1303 	mla	r3, r0, r3, r1
 800ffc4:	9301      	str	r3, [sp, #4]
 800ffc6:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ffca:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ffce:	2909      	cmp	r1, #9
 800ffd0:	d9f5      	bls.n	800ffbe <_vfiprintf_r+0x29a>
 800ffd2:	4693      	mov	fp, r2
 800ffd4:	e72f      	b.n	800fe36 <_vfiprintf_r+0x112>
 800ffd6:	2100      	movs	r1, #0
 800ffd8:	9101      	str	r1, [sp, #4]
 800ffda:	200a      	movs	r0, #10
 800ffdc:	e7f5      	b.n	800ffca <_vfiprintf_r+0x2a6>
 800ffde:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800ffe2:	e7c7      	b.n	800ff74 <_vfiprintf_r+0x250>
 800ffe4:	2100      	movs	r1, #0
 800ffe6:	465a      	mov	r2, fp
 800ffe8:	9102      	str	r1, [sp, #8]
 800ffea:	200a      	movs	r0, #10
 800ffec:	9902      	ldr	r1, [sp, #8]
 800ffee:	3b30      	subs	r3, #48	@ 0x30
 800fff0:	fb00 3301 	mla	r3, r0, r1, r3
 800fff4:	9302      	str	r3, [sp, #8]
 800fff6:	f812 3b01 	ldrb.w	r3, [r2], #1
 800fffa:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800fffe:	2909      	cmp	r1, #9
 8010000:	d9f4      	bls.n	800ffec <_vfiprintf_r+0x2c8>
 8010002:	e7e6      	b.n	800ffd2 <_vfiprintf_r+0x2ae>
 8010004:	f89b 3000 	ldrb.w	r3, [fp]
 8010008:	2b68      	cmp	r3, #104	@ 0x68
 801000a:	bf06      	itte	eq
 801000c:	f10b 0b01 	addeq.w	fp, fp, #1
 8010010:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8010014:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8010018:	e7ac      	b.n	800ff74 <_vfiprintf_r+0x250>
 801001a:	f89b 3000 	ldrb.w	r3, [fp]
 801001e:	2b6c      	cmp	r3, #108	@ 0x6c
 8010020:	d104      	bne.n	801002c <_vfiprintf_r+0x308>
 8010022:	f10b 0b01 	add.w	fp, fp, #1
 8010026:	f04a 0a20 	orr.w	sl, sl, #32
 801002a:	e7a3      	b.n	800ff74 <_vfiprintf_r+0x250>
 801002c:	f04a 0a10 	orr.w	sl, sl, #16
 8010030:	e7a0      	b.n	800ff74 <_vfiprintf_r+0x250>
 8010032:	46a8      	mov	r8, r5
 8010034:	2400      	movs	r4, #0
 8010036:	f858 3b04 	ldr.w	r3, [r8], #4
 801003a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 801003e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8010042:	2301      	movs	r3, #1
 8010044:	9301      	str	r3, [sp, #4]
 8010046:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 801004a:	e0ab      	b.n	80101a4 <_vfiprintf_r+0x480>
 801004c:	f04a 0a10 	orr.w	sl, sl, #16
 8010050:	f01a 0f20 	tst.w	sl, #32
 8010054:	d011      	beq.n	801007a <_vfiprintf_r+0x356>
 8010056:	3507      	adds	r5, #7
 8010058:	f025 0507 	bic.w	r5, r5, #7
 801005c:	46a8      	mov	r8, r5
 801005e:	686d      	ldr	r5, [r5, #4]
 8010060:	f858 4b08 	ldr.w	r4, [r8], #8
 8010064:	2d00      	cmp	r5, #0
 8010066:	da06      	bge.n	8010076 <_vfiprintf_r+0x352>
 8010068:	4264      	negs	r4, r4
 801006a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801006e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8010072:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8010076:	2301      	movs	r3, #1
 8010078:	e048      	b.n	801010c <_vfiprintf_r+0x3e8>
 801007a:	46a8      	mov	r8, r5
 801007c:	f01a 0f10 	tst.w	sl, #16
 8010080:	f858 5b04 	ldr.w	r5, [r8], #4
 8010084:	d002      	beq.n	801008c <_vfiprintf_r+0x368>
 8010086:	462c      	mov	r4, r5
 8010088:	17ed      	asrs	r5, r5, #31
 801008a:	e7eb      	b.n	8010064 <_vfiprintf_r+0x340>
 801008c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8010090:	d003      	beq.n	801009a <_vfiprintf_r+0x376>
 8010092:	b22c      	sxth	r4, r5
 8010094:	f345 35c0 	sbfx	r5, r5, #15, #1
 8010098:	e7e4      	b.n	8010064 <_vfiprintf_r+0x340>
 801009a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 801009e:	d0f2      	beq.n	8010086 <_vfiprintf_r+0x362>
 80100a0:	b26c      	sxtb	r4, r5
 80100a2:	f345 15c0 	sbfx	r5, r5, #7, #1
 80100a6:	e7dd      	b.n	8010064 <_vfiprintf_r+0x340>
 80100a8:	f01a 0f20 	tst.w	sl, #32
 80100ac:	d007      	beq.n	80100be <_vfiprintf_r+0x39a>
 80100ae:	9a03      	ldr	r2, [sp, #12]
 80100b0:	682b      	ldr	r3, [r5, #0]
 80100b2:	9903      	ldr	r1, [sp, #12]
 80100b4:	17d2      	asrs	r2, r2, #31
 80100b6:	e9c3 1200 	strd	r1, r2, [r3]
 80100ba:	3504      	adds	r5, #4
 80100bc:	e693      	b.n	800fde6 <_vfiprintf_r+0xc2>
 80100be:	f01a 0f10 	tst.w	sl, #16
 80100c2:	d003      	beq.n	80100cc <_vfiprintf_r+0x3a8>
 80100c4:	682b      	ldr	r3, [r5, #0]
 80100c6:	9a03      	ldr	r2, [sp, #12]
 80100c8:	601a      	str	r2, [r3, #0]
 80100ca:	e7f6      	b.n	80100ba <_vfiprintf_r+0x396>
 80100cc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80100d0:	d003      	beq.n	80100da <_vfiprintf_r+0x3b6>
 80100d2:	682b      	ldr	r3, [r5, #0]
 80100d4:	9a03      	ldr	r2, [sp, #12]
 80100d6:	801a      	strh	r2, [r3, #0]
 80100d8:	e7ef      	b.n	80100ba <_vfiprintf_r+0x396>
 80100da:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80100de:	d0f1      	beq.n	80100c4 <_vfiprintf_r+0x3a0>
 80100e0:	682b      	ldr	r3, [r5, #0]
 80100e2:	9a03      	ldr	r2, [sp, #12]
 80100e4:	701a      	strb	r2, [r3, #0]
 80100e6:	e7e8      	b.n	80100ba <_vfiprintf_r+0x396>
 80100e8:	f04a 0a10 	orr.w	sl, sl, #16
 80100ec:	f01a 0320 	ands.w	r3, sl, #32
 80100f0:	d01f      	beq.n	8010132 <_vfiprintf_r+0x40e>
 80100f2:	3507      	adds	r5, #7
 80100f4:	f025 0507 	bic.w	r5, r5, #7
 80100f8:	46a8      	mov	r8, r5
 80100fa:	686d      	ldr	r5, [r5, #4]
 80100fc:	f858 4b08 	ldr.w	r4, [r8], #8
 8010100:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8010104:	2300      	movs	r3, #0
 8010106:	2200      	movs	r2, #0
 8010108:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 801010c:	9a01      	ldr	r2, [sp, #4]
 801010e:	3201      	adds	r2, #1
 8010110:	f000 825f 	beq.w	80105d2 <_vfiprintf_r+0x8ae>
 8010114:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8010118:	9204      	str	r2, [sp, #16]
 801011a:	ea54 0205 	orrs.w	r2, r4, r5
 801011e:	f040 825e 	bne.w	80105de <_vfiprintf_r+0x8ba>
 8010122:	9a01      	ldr	r2, [sp, #4]
 8010124:	2a00      	cmp	r2, #0
 8010126:	f000 8198 	beq.w	801045a <_vfiprintf_r+0x736>
 801012a:	2b01      	cmp	r3, #1
 801012c:	f040 825a 	bne.w	80105e4 <_vfiprintf_r+0x8c0>
 8010130:	e13b      	b.n	80103aa <_vfiprintf_r+0x686>
 8010132:	46a8      	mov	r8, r5
 8010134:	f01a 0510 	ands.w	r5, sl, #16
 8010138:	f858 4b04 	ldr.w	r4, [r8], #4
 801013c:	d001      	beq.n	8010142 <_vfiprintf_r+0x41e>
 801013e:	461d      	mov	r5, r3
 8010140:	e7de      	b.n	8010100 <_vfiprintf_r+0x3dc>
 8010142:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8010146:	d001      	beq.n	801014c <_vfiprintf_r+0x428>
 8010148:	b2a4      	uxth	r4, r4
 801014a:	e7d9      	b.n	8010100 <_vfiprintf_r+0x3dc>
 801014c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8010150:	d0d6      	beq.n	8010100 <_vfiprintf_r+0x3dc>
 8010152:	b2e4      	uxtb	r4, r4
 8010154:	e7f3      	b.n	801013e <_vfiprintf_r+0x41a>
 8010156:	46a8      	mov	r8, r5
 8010158:	f647 0330 	movw	r3, #30768	@ 0x7830
 801015c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8010160:	f858 4b04 	ldr.w	r4, [r8], #4
 8010164:	4b03      	ldr	r3, [pc, #12]	@ (8010174 <_vfiprintf_r+0x450>)
 8010166:	9305      	str	r3, [sp, #20]
 8010168:	2500      	movs	r5, #0
 801016a:	f04a 0a02 	orr.w	sl, sl, #2
 801016e:	2302      	movs	r3, #2
 8010170:	e7c9      	b.n	8010106 <_vfiprintf_r+0x3e2>
 8010172:	bf00      	nop
 8010174:	08014004 	.word	0x08014004
 8010178:	9b01      	ldr	r3, [sp, #4]
 801017a:	46a8      	mov	r8, r5
 801017c:	1c5c      	adds	r4, r3, #1
 801017e:	f04f 0500 	mov.w	r5, #0
 8010182:	f858 9b04 	ldr.w	r9, [r8], #4
 8010186:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 801018a:	f000 80d0 	beq.w	801032e <_vfiprintf_r+0x60a>
 801018e:	461a      	mov	r2, r3
 8010190:	4629      	mov	r1, r5
 8010192:	4648      	mov	r0, r9
 8010194:	f7f0 f8a4 	bl	80002e0 <memchr>
 8010198:	4604      	mov	r4, r0
 801019a:	b118      	cbz	r0, 80101a4 <_vfiprintf_r+0x480>
 801019c:	eba0 0309 	sub.w	r3, r0, r9
 80101a0:	9301      	str	r3, [sp, #4]
 80101a2:	462c      	mov	r4, r5
 80101a4:	9b01      	ldr	r3, [sp, #4]
 80101a6:	42a3      	cmp	r3, r4
 80101a8:	bfb8      	it	lt
 80101aa:	4623      	movlt	r3, r4
 80101ac:	9304      	str	r3, [sp, #16]
 80101ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80101b2:	b113      	cbz	r3, 80101ba <_vfiprintf_r+0x496>
 80101b4:	9b04      	ldr	r3, [sp, #16]
 80101b6:	3301      	adds	r3, #1
 80101b8:	9304      	str	r3, [sp, #16]
 80101ba:	f01a 0302 	ands.w	r3, sl, #2
 80101be:	9308      	str	r3, [sp, #32]
 80101c0:	bf1e      	ittt	ne
 80101c2:	9b04      	ldrne	r3, [sp, #16]
 80101c4:	3302      	addne	r3, #2
 80101c6:	9304      	strne	r3, [sp, #16]
 80101c8:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 80101cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80101ce:	d11f      	bne.n	8010210 <_vfiprintf_r+0x4ec>
 80101d0:	9b02      	ldr	r3, [sp, #8]
 80101d2:	9a04      	ldr	r2, [sp, #16]
 80101d4:	1a9d      	subs	r5, r3, r2
 80101d6:	2d00      	cmp	r5, #0
 80101d8:	dd1a      	ble.n	8010210 <_vfiprintf_r+0x4ec>
 80101da:	4ba9      	ldr	r3, [pc, #676]	@ (8010480 <_vfiprintf_r+0x75c>)
 80101dc:	6033      	str	r3, [r6, #0]
 80101de:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80101e2:	2d10      	cmp	r5, #16
 80101e4:	f102 0201 	add.w	r2, r2, #1
 80101e8:	f106 0008 	add.w	r0, r6, #8
 80101ec:	f300 814e 	bgt.w	801048c <_vfiprintf_r+0x768>
 80101f0:	6075      	str	r5, [r6, #4]
 80101f2:	2a07      	cmp	r2, #7
 80101f4:	4465      	add	r5, ip
 80101f6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80101fa:	f340 815a 	ble.w	80104b2 <_vfiprintf_r+0x78e>
 80101fe:	9800      	ldr	r0, [sp, #0]
 8010200:	aa0e      	add	r2, sp, #56	@ 0x38
 8010202:	4639      	mov	r1, r7
 8010204:	f7ff fd5c 	bl	800fcc0 <__sprint_r>
 8010208:	2800      	cmp	r0, #0
 801020a:	f040 81b4 	bne.w	8010576 <_vfiprintf_r+0x852>
 801020e:	ae11      	add	r6, sp, #68	@ 0x44
 8010210:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8010214:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8010218:	b161      	cbz	r1, 8010234 <_vfiprintf_r+0x510>
 801021a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 801021e:	3301      	adds	r3, #1
 8010220:	6031      	str	r1, [r6, #0]
 8010222:	2101      	movs	r1, #1
 8010224:	440a      	add	r2, r1
 8010226:	2b07      	cmp	r3, #7
 8010228:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801022c:	6071      	str	r1, [r6, #4]
 801022e:	f300 8142 	bgt.w	80104b6 <_vfiprintf_r+0x792>
 8010232:	3608      	adds	r6, #8
 8010234:	9908      	ldr	r1, [sp, #32]
 8010236:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801023a:	b159      	cbz	r1, 8010254 <_vfiprintf_r+0x530>
 801023c:	a90d      	add	r1, sp, #52	@ 0x34
 801023e:	3301      	adds	r3, #1
 8010240:	6031      	str	r1, [r6, #0]
 8010242:	2102      	movs	r1, #2
 8010244:	440a      	add	r2, r1
 8010246:	2b07      	cmp	r3, #7
 8010248:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801024c:	6071      	str	r1, [r6, #4]
 801024e:	f300 813b 	bgt.w	80104c8 <_vfiprintf_r+0x7a4>
 8010252:	3608      	adds	r6, #8
 8010254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010256:	2b80      	cmp	r3, #128	@ 0x80
 8010258:	d11f      	bne.n	801029a <_vfiprintf_r+0x576>
 801025a:	9b02      	ldr	r3, [sp, #8]
 801025c:	9a04      	ldr	r2, [sp, #16]
 801025e:	1a9d      	subs	r5, r3, r2
 8010260:	2d00      	cmp	r5, #0
 8010262:	dd1a      	ble.n	801029a <_vfiprintf_r+0x576>
 8010264:	4b87      	ldr	r3, [pc, #540]	@ (8010484 <_vfiprintf_r+0x760>)
 8010266:	6033      	str	r3, [r6, #0]
 8010268:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 801026c:	2d10      	cmp	r5, #16
 801026e:	f102 0201 	add.w	r2, r2, #1
 8010272:	f106 0008 	add.w	r0, r6, #8
 8010276:	f300 8130 	bgt.w	80104da <_vfiprintf_r+0x7b6>
 801027a:	6075      	str	r5, [r6, #4]
 801027c:	2a07      	cmp	r2, #7
 801027e:	4465      	add	r5, ip
 8010280:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8010284:	f340 813c 	ble.w	8010500 <_vfiprintf_r+0x7dc>
 8010288:	9800      	ldr	r0, [sp, #0]
 801028a:	aa0e      	add	r2, sp, #56	@ 0x38
 801028c:	4639      	mov	r1, r7
 801028e:	f7ff fd17 	bl	800fcc0 <__sprint_r>
 8010292:	2800      	cmp	r0, #0
 8010294:	f040 816f 	bne.w	8010576 <_vfiprintf_r+0x852>
 8010298:	ae11      	add	r6, sp, #68	@ 0x44
 801029a:	9b01      	ldr	r3, [sp, #4]
 801029c:	1ae4      	subs	r4, r4, r3
 801029e:	2c00      	cmp	r4, #0
 80102a0:	dd1a      	ble.n	80102d8 <_vfiprintf_r+0x5b4>
 80102a2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80102a6:	4877      	ldr	r0, [pc, #476]	@ (8010484 <_vfiprintf_r+0x760>)
 80102a8:	6030      	str	r0, [r6, #0]
 80102aa:	2c10      	cmp	r4, #16
 80102ac:	f103 0301 	add.w	r3, r3, #1
 80102b0:	f106 0108 	add.w	r1, r6, #8
 80102b4:	f300 8126 	bgt.w	8010504 <_vfiprintf_r+0x7e0>
 80102b8:	6074      	str	r4, [r6, #4]
 80102ba:	2b07      	cmp	r3, #7
 80102bc:	4414      	add	r4, r2
 80102be:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 80102c2:	f340 8130 	ble.w	8010526 <_vfiprintf_r+0x802>
 80102c6:	9800      	ldr	r0, [sp, #0]
 80102c8:	aa0e      	add	r2, sp, #56	@ 0x38
 80102ca:	4639      	mov	r1, r7
 80102cc:	f7ff fcf8 	bl	800fcc0 <__sprint_r>
 80102d0:	2800      	cmp	r0, #0
 80102d2:	f040 8150 	bne.w	8010576 <_vfiprintf_r+0x852>
 80102d6:	ae11      	add	r6, sp, #68	@ 0x44
 80102d8:	9b01      	ldr	r3, [sp, #4]
 80102da:	9a01      	ldr	r2, [sp, #4]
 80102dc:	6073      	str	r3, [r6, #4]
 80102de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80102e0:	f8c6 9000 	str.w	r9, [r6]
 80102e4:	4413      	add	r3, r2
 80102e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80102e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102ea:	3301      	adds	r3, #1
 80102ec:	2b07      	cmp	r3, #7
 80102ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80102f0:	f300 811b 	bgt.w	801052a <_vfiprintf_r+0x806>
 80102f4:	f106 0308 	add.w	r3, r6, #8
 80102f8:	f01a 0f04 	tst.w	sl, #4
 80102fc:	f040 811d 	bne.w	801053a <_vfiprintf_r+0x816>
 8010300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010304:	9904      	ldr	r1, [sp, #16]
 8010306:	428a      	cmp	r2, r1
 8010308:	bfac      	ite	ge
 801030a:	189b      	addge	r3, r3, r2
 801030c:	185b      	addlt	r3, r3, r1
 801030e:	9303      	str	r3, [sp, #12]
 8010310:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010312:	b13b      	cbz	r3, 8010324 <_vfiprintf_r+0x600>
 8010314:	9800      	ldr	r0, [sp, #0]
 8010316:	aa0e      	add	r2, sp, #56	@ 0x38
 8010318:	4639      	mov	r1, r7
 801031a:	f7ff fcd1 	bl	800fcc0 <__sprint_r>
 801031e:	2800      	cmp	r0, #0
 8010320:	f040 8129 	bne.w	8010576 <_vfiprintf_r+0x852>
 8010324:	2300      	movs	r3, #0
 8010326:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010328:	4645      	mov	r5, r8
 801032a:	ae11      	add	r6, sp, #68	@ 0x44
 801032c:	e55b      	b.n	800fde6 <_vfiprintf_r+0xc2>
 801032e:	4648      	mov	r0, r9
 8010330:	f7f0 f826 	bl	8000380 <strlen>
 8010334:	9001      	str	r0, [sp, #4]
 8010336:	e734      	b.n	80101a2 <_vfiprintf_r+0x47e>
 8010338:	f04a 0a10 	orr.w	sl, sl, #16
 801033c:	f01a 0320 	ands.w	r3, sl, #32
 8010340:	d008      	beq.n	8010354 <_vfiprintf_r+0x630>
 8010342:	3507      	adds	r5, #7
 8010344:	f025 0507 	bic.w	r5, r5, #7
 8010348:	46a8      	mov	r8, r5
 801034a:	686d      	ldr	r5, [r5, #4]
 801034c:	f858 4b08 	ldr.w	r4, [r8], #8
 8010350:	2301      	movs	r3, #1
 8010352:	e6d8      	b.n	8010106 <_vfiprintf_r+0x3e2>
 8010354:	46a8      	mov	r8, r5
 8010356:	f01a 0510 	ands.w	r5, sl, #16
 801035a:	f858 4b04 	ldr.w	r4, [r8], #4
 801035e:	d001      	beq.n	8010364 <_vfiprintf_r+0x640>
 8010360:	461d      	mov	r5, r3
 8010362:	e7f5      	b.n	8010350 <_vfiprintf_r+0x62c>
 8010364:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8010368:	d001      	beq.n	801036e <_vfiprintf_r+0x64a>
 801036a:	b2a4      	uxth	r4, r4
 801036c:	e7f0      	b.n	8010350 <_vfiprintf_r+0x62c>
 801036e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8010372:	d0ed      	beq.n	8010350 <_vfiprintf_r+0x62c>
 8010374:	b2e4      	uxtb	r4, r4
 8010376:	e7f3      	b.n	8010360 <_vfiprintf_r+0x63c>
 8010378:	4a43      	ldr	r2, [pc, #268]	@ (8010488 <_vfiprintf_r+0x764>)
 801037a:	e5c9      	b.n	800ff10 <_vfiprintf_r+0x1ec>
 801037c:	46a8      	mov	r8, r5
 801037e:	f01a 0510 	ands.w	r5, sl, #16
 8010382:	f858 4b04 	ldr.w	r4, [r8], #4
 8010386:	d001      	beq.n	801038c <_vfiprintf_r+0x668>
 8010388:	4615      	mov	r5, r2
 801038a:	e5cd      	b.n	800ff28 <_vfiprintf_r+0x204>
 801038c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8010390:	d001      	beq.n	8010396 <_vfiprintf_r+0x672>
 8010392:	b2a4      	uxth	r4, r4
 8010394:	e5c8      	b.n	800ff28 <_vfiprintf_r+0x204>
 8010396:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801039a:	f43f adc5 	beq.w	800ff28 <_vfiprintf_r+0x204>
 801039e:	b2e4      	uxtb	r4, r4
 80103a0:	e7f2      	b.n	8010388 <_vfiprintf_r+0x664>
 80103a2:	2c0a      	cmp	r4, #10
 80103a4:	f175 0300 	sbcs.w	r3, r5, #0
 80103a8:	d206      	bcs.n	80103b8 <_vfiprintf_r+0x694>
 80103aa:	3430      	adds	r4, #48	@ 0x30
 80103ac:	b2e4      	uxtb	r4, r4
 80103ae:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 80103b2:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 80103b6:	e131      	b.n	801061c <_vfiprintf_r+0x8f8>
 80103b8:	ab3a      	add	r3, sp, #232	@ 0xe8
 80103ba:	9308      	str	r3, [sp, #32]
 80103bc:	9b04      	ldr	r3, [sp, #16]
 80103be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80103c2:	f04f 0a00 	mov.w	sl, #0
 80103c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80103c8:	220a      	movs	r2, #10
 80103ca:	2300      	movs	r3, #0
 80103cc:	4620      	mov	r0, r4
 80103ce:	4629      	mov	r1, r5
 80103d0:	f7ef ffde 	bl	8000390 <__aeabi_uldivmod>
 80103d4:	460b      	mov	r3, r1
 80103d6:	9908      	ldr	r1, [sp, #32]
 80103d8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80103da:	3230      	adds	r2, #48	@ 0x30
 80103dc:	f801 2c01 	strb.w	r2, [r1, #-1]
 80103e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103e2:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 80103e6:	f10a 0a01 	add.w	sl, sl, #1
 80103ea:	b1e2      	cbz	r2, 8010426 <_vfiprintf_r+0x702>
 80103ec:	9a06      	ldr	r2, [sp, #24]
 80103ee:	7812      	ldrb	r2, [r2, #0]
 80103f0:	4552      	cmp	r2, sl
 80103f2:	d118      	bne.n	8010426 <_vfiprintf_r+0x702>
 80103f4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80103f8:	d015      	beq.n	8010426 <_vfiprintf_r+0x702>
 80103fa:	2c0a      	cmp	r4, #10
 80103fc:	f175 0200 	sbcs.w	r2, r5, #0
 8010400:	d311      	bcc.n	8010426 <_vfiprintf_r+0x702>
 8010402:	9308      	str	r3, [sp, #32]
 8010404:	9b07      	ldr	r3, [sp, #28]
 8010406:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010408:	eba9 0903 	sub.w	r9, r9, r3
 801040c:	461a      	mov	r2, r3
 801040e:	4648      	mov	r0, r9
 8010410:	f000 fc7a 	bl	8010d08 <strncpy>
 8010414:	9b06      	ldr	r3, [sp, #24]
 8010416:	785a      	ldrb	r2, [r3, #1]
 8010418:	9b08      	ldr	r3, [sp, #32]
 801041a:	b172      	cbz	r2, 801043a <_vfiprintf_r+0x716>
 801041c:	9a06      	ldr	r2, [sp, #24]
 801041e:	3201      	adds	r2, #1
 8010420:	9206      	str	r2, [sp, #24]
 8010422:	f04f 0a00 	mov.w	sl, #0
 8010426:	2c0a      	cmp	r4, #10
 8010428:	f175 0500 	sbcs.w	r5, r5, #0
 801042c:	f0c0 80f6 	bcc.w	801061c <_vfiprintf_r+0x8f8>
 8010430:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8010432:	f8cd 9020 	str.w	r9, [sp, #32]
 8010436:	461d      	mov	r5, r3
 8010438:	e7c6      	b.n	80103c8 <_vfiprintf_r+0x6a4>
 801043a:	4692      	mov	sl, r2
 801043c:	e7f3      	b.n	8010426 <_vfiprintf_r+0x702>
 801043e:	f004 030f 	and.w	r3, r4, #15
 8010442:	9a05      	ldr	r2, [sp, #20]
 8010444:	0924      	lsrs	r4, r4, #4
 8010446:	5cd3      	ldrb	r3, [r2, r3]
 8010448:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801044c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8010450:	092d      	lsrs	r5, r5, #4
 8010452:	ea54 0305 	orrs.w	r3, r4, r5
 8010456:	d1f2      	bne.n	801043e <_vfiprintf_r+0x71a>
 8010458:	e0e0      	b.n	801061c <_vfiprintf_r+0x8f8>
 801045a:	b923      	cbnz	r3, 8010466 <_vfiprintf_r+0x742>
 801045c:	f01a 0f01 	tst.w	sl, #1
 8010460:	d001      	beq.n	8010466 <_vfiprintf_r+0x742>
 8010462:	2430      	movs	r4, #48	@ 0x30
 8010464:	e7a3      	b.n	80103ae <_vfiprintf_r+0x68a>
 8010466:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801046a:	e0d7      	b.n	801061c <_vfiprintf_r+0x8f8>
 801046c:	2b00      	cmp	r3, #0
 801046e:	f000 80a3 	beq.w	80105b8 <_vfiprintf_r+0x894>
 8010472:	2400      	movs	r4, #0
 8010474:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8010478:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801047c:	46a8      	mov	r8, r5
 801047e:	e5e0      	b.n	8010042 <_vfiprintf_r+0x31e>
 8010480:	08014058 	.word	0x08014058
 8010484:	08014048 	.word	0x08014048
 8010488:	08014015 	.word	0x08014015
 801048c:	2110      	movs	r1, #16
 801048e:	6071      	str	r1, [r6, #4]
 8010490:	2a07      	cmp	r2, #7
 8010492:	4461      	add	r1, ip
 8010494:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8010498:	dd08      	ble.n	80104ac <_vfiprintf_r+0x788>
 801049a:	9800      	ldr	r0, [sp, #0]
 801049c:	aa0e      	add	r2, sp, #56	@ 0x38
 801049e:	4639      	mov	r1, r7
 80104a0:	f7ff fc0e 	bl	800fcc0 <__sprint_r>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d166      	bne.n	8010576 <_vfiprintf_r+0x852>
 80104a8:	4b60      	ldr	r3, [pc, #384]	@ (801062c <_vfiprintf_r+0x908>)
 80104aa:	a811      	add	r0, sp, #68	@ 0x44
 80104ac:	3d10      	subs	r5, #16
 80104ae:	4606      	mov	r6, r0
 80104b0:	e694      	b.n	80101dc <_vfiprintf_r+0x4b8>
 80104b2:	4606      	mov	r6, r0
 80104b4:	e6ac      	b.n	8010210 <_vfiprintf_r+0x4ec>
 80104b6:	9800      	ldr	r0, [sp, #0]
 80104b8:	aa0e      	add	r2, sp, #56	@ 0x38
 80104ba:	4639      	mov	r1, r7
 80104bc:	f7ff fc00 	bl	800fcc0 <__sprint_r>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d158      	bne.n	8010576 <_vfiprintf_r+0x852>
 80104c4:	ae11      	add	r6, sp, #68	@ 0x44
 80104c6:	e6b5      	b.n	8010234 <_vfiprintf_r+0x510>
 80104c8:	9800      	ldr	r0, [sp, #0]
 80104ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80104cc:	4639      	mov	r1, r7
 80104ce:	f7ff fbf7 	bl	800fcc0 <__sprint_r>
 80104d2:	2800      	cmp	r0, #0
 80104d4:	d14f      	bne.n	8010576 <_vfiprintf_r+0x852>
 80104d6:	ae11      	add	r6, sp, #68	@ 0x44
 80104d8:	e6bc      	b.n	8010254 <_vfiprintf_r+0x530>
 80104da:	2110      	movs	r1, #16
 80104dc:	6071      	str	r1, [r6, #4]
 80104de:	2a07      	cmp	r2, #7
 80104e0:	4461      	add	r1, ip
 80104e2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80104e6:	dd08      	ble.n	80104fa <_vfiprintf_r+0x7d6>
 80104e8:	9800      	ldr	r0, [sp, #0]
 80104ea:	aa0e      	add	r2, sp, #56	@ 0x38
 80104ec:	4639      	mov	r1, r7
 80104ee:	f7ff fbe7 	bl	800fcc0 <__sprint_r>
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d13f      	bne.n	8010576 <_vfiprintf_r+0x852>
 80104f6:	4b4e      	ldr	r3, [pc, #312]	@ (8010630 <_vfiprintf_r+0x90c>)
 80104f8:	a811      	add	r0, sp, #68	@ 0x44
 80104fa:	3d10      	subs	r5, #16
 80104fc:	4606      	mov	r6, r0
 80104fe:	e6b2      	b.n	8010266 <_vfiprintf_r+0x542>
 8010500:	4606      	mov	r6, r0
 8010502:	e6ca      	b.n	801029a <_vfiprintf_r+0x576>
 8010504:	2010      	movs	r0, #16
 8010506:	4402      	add	r2, r0
 8010508:	2b07      	cmp	r3, #7
 801050a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801050e:	6070      	str	r0, [r6, #4]
 8010510:	dd06      	ble.n	8010520 <_vfiprintf_r+0x7fc>
 8010512:	9800      	ldr	r0, [sp, #0]
 8010514:	aa0e      	add	r2, sp, #56	@ 0x38
 8010516:	4639      	mov	r1, r7
 8010518:	f7ff fbd2 	bl	800fcc0 <__sprint_r>
 801051c:	bb58      	cbnz	r0, 8010576 <_vfiprintf_r+0x852>
 801051e:	a911      	add	r1, sp, #68	@ 0x44
 8010520:	3c10      	subs	r4, #16
 8010522:	460e      	mov	r6, r1
 8010524:	e6bd      	b.n	80102a2 <_vfiprintf_r+0x57e>
 8010526:	460e      	mov	r6, r1
 8010528:	e6d6      	b.n	80102d8 <_vfiprintf_r+0x5b4>
 801052a:	9800      	ldr	r0, [sp, #0]
 801052c:	aa0e      	add	r2, sp, #56	@ 0x38
 801052e:	4639      	mov	r1, r7
 8010530:	f7ff fbc6 	bl	800fcc0 <__sprint_r>
 8010534:	b9f8      	cbnz	r0, 8010576 <_vfiprintf_r+0x852>
 8010536:	ab11      	add	r3, sp, #68	@ 0x44
 8010538:	e6de      	b.n	80102f8 <_vfiprintf_r+0x5d4>
 801053a:	9a02      	ldr	r2, [sp, #8]
 801053c:	9904      	ldr	r1, [sp, #16]
 801053e:	1a54      	subs	r4, r2, r1
 8010540:	2c00      	cmp	r4, #0
 8010542:	f77f aedd 	ble.w	8010300 <_vfiprintf_r+0x5dc>
 8010546:	4d39      	ldr	r5, [pc, #228]	@ (801062c <_vfiprintf_r+0x908>)
 8010548:	2610      	movs	r6, #16
 801054a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 801054e:	2c10      	cmp	r4, #16
 8010550:	f102 0201 	add.w	r2, r2, #1
 8010554:	601d      	str	r5, [r3, #0]
 8010556:	dc1d      	bgt.n	8010594 <_vfiprintf_r+0x870>
 8010558:	605c      	str	r4, [r3, #4]
 801055a:	2a07      	cmp	r2, #7
 801055c:	440c      	add	r4, r1
 801055e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8010562:	f77f aecd 	ble.w	8010300 <_vfiprintf_r+0x5dc>
 8010566:	9800      	ldr	r0, [sp, #0]
 8010568:	aa0e      	add	r2, sp, #56	@ 0x38
 801056a:	4639      	mov	r1, r7
 801056c:	f7ff fba8 	bl	800fcc0 <__sprint_r>
 8010570:	2800      	cmp	r0, #0
 8010572:	f43f aec5 	beq.w	8010300 <_vfiprintf_r+0x5dc>
 8010576:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010578:	07d9      	lsls	r1, r3, #31
 801057a:	d405      	bmi.n	8010588 <_vfiprintf_r+0x864>
 801057c:	89bb      	ldrh	r3, [r7, #12]
 801057e:	059a      	lsls	r2, r3, #22
 8010580:	d402      	bmi.n	8010588 <_vfiprintf_r+0x864>
 8010582:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010584:	f7fd fea9 	bl	800e2da <__retarget_lock_release_recursive>
 8010588:	89bb      	ldrh	r3, [r7, #12]
 801058a:	065b      	lsls	r3, r3, #25
 801058c:	f57f abfb 	bpl.w	800fd86 <_vfiprintf_r+0x62>
 8010590:	f7ff bbf6 	b.w	800fd80 <_vfiprintf_r+0x5c>
 8010594:	3110      	adds	r1, #16
 8010596:	2a07      	cmp	r2, #7
 8010598:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801059c:	605e      	str	r6, [r3, #4]
 801059e:	dc02      	bgt.n	80105a6 <_vfiprintf_r+0x882>
 80105a0:	3308      	adds	r3, #8
 80105a2:	3c10      	subs	r4, #16
 80105a4:	e7d1      	b.n	801054a <_vfiprintf_r+0x826>
 80105a6:	9800      	ldr	r0, [sp, #0]
 80105a8:	aa0e      	add	r2, sp, #56	@ 0x38
 80105aa:	4639      	mov	r1, r7
 80105ac:	f7ff fb88 	bl	800fcc0 <__sprint_r>
 80105b0:	2800      	cmp	r0, #0
 80105b2:	d1e0      	bne.n	8010576 <_vfiprintf_r+0x852>
 80105b4:	ab11      	add	r3, sp, #68	@ 0x44
 80105b6:	e7f4      	b.n	80105a2 <_vfiprintf_r+0x87e>
 80105b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80105ba:	b913      	cbnz	r3, 80105c2 <_vfiprintf_r+0x89e>
 80105bc:	2300      	movs	r3, #0
 80105be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80105c0:	e7d9      	b.n	8010576 <_vfiprintf_r+0x852>
 80105c2:	9800      	ldr	r0, [sp, #0]
 80105c4:	aa0e      	add	r2, sp, #56	@ 0x38
 80105c6:	4639      	mov	r1, r7
 80105c8:	f7ff fb7a 	bl	800fcc0 <__sprint_r>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	d0f5      	beq.n	80105bc <_vfiprintf_r+0x898>
 80105d0:	e7d1      	b.n	8010576 <_vfiprintf_r+0x852>
 80105d2:	ea54 0205 	orrs.w	r2, r4, r5
 80105d6:	f8cd a010 	str.w	sl, [sp, #16]
 80105da:	f43f ada6 	beq.w	801012a <_vfiprintf_r+0x406>
 80105de:	2b01      	cmp	r3, #1
 80105e0:	f43f aedf 	beq.w	80103a2 <_vfiprintf_r+0x67e>
 80105e4:	2b02      	cmp	r3, #2
 80105e6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80105ea:	f43f af28 	beq.w	801043e <_vfiprintf_r+0x71a>
 80105ee:	f004 0307 	and.w	r3, r4, #7
 80105f2:	08e4      	lsrs	r4, r4, #3
 80105f4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80105f8:	08ed      	lsrs	r5, r5, #3
 80105fa:	3330      	adds	r3, #48	@ 0x30
 80105fc:	ea54 0105 	orrs.w	r1, r4, r5
 8010600:	464a      	mov	r2, r9
 8010602:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8010606:	d1f2      	bne.n	80105ee <_vfiprintf_r+0x8ca>
 8010608:	9904      	ldr	r1, [sp, #16]
 801060a:	07c8      	lsls	r0, r1, #31
 801060c:	d506      	bpl.n	801061c <_vfiprintf_r+0x8f8>
 801060e:	2b30      	cmp	r3, #48	@ 0x30
 8010610:	d004      	beq.n	801061c <_vfiprintf_r+0x8f8>
 8010612:	2330      	movs	r3, #48	@ 0x30
 8010614:	f809 3c01 	strb.w	r3, [r9, #-1]
 8010618:	f1a2 0902 	sub.w	r9, r2, #2
 801061c:	ab3a      	add	r3, sp, #232	@ 0xe8
 801061e:	eba3 0309 	sub.w	r3, r3, r9
 8010622:	9c01      	ldr	r4, [sp, #4]
 8010624:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010628:	9301      	str	r3, [sp, #4]
 801062a:	e5bb      	b.n	80101a4 <_vfiprintf_r+0x480>
 801062c:	08014058 	.word	0x08014058
 8010630:	08014048 	.word	0x08014048

08010634 <__sbprintf>:
 8010634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010636:	461f      	mov	r7, r3
 8010638:	898b      	ldrh	r3, [r1, #12]
 801063a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 801063e:	f023 0302 	bic.w	r3, r3, #2
 8010642:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010646:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8010648:	9319      	str	r3, [sp, #100]	@ 0x64
 801064a:	89cb      	ldrh	r3, [r1, #14]
 801064c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010650:	69cb      	ldr	r3, [r1, #28]
 8010652:	9307      	str	r3, [sp, #28]
 8010654:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8010656:	9309      	str	r3, [sp, #36]	@ 0x24
 8010658:	ab1a      	add	r3, sp, #104	@ 0x68
 801065a:	9300      	str	r3, [sp, #0]
 801065c:	9304      	str	r3, [sp, #16]
 801065e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010662:	4615      	mov	r5, r2
 8010664:	4606      	mov	r6, r0
 8010666:	9302      	str	r3, [sp, #8]
 8010668:	9305      	str	r3, [sp, #20]
 801066a:	a816      	add	r0, sp, #88	@ 0x58
 801066c:	2300      	movs	r3, #0
 801066e:	460c      	mov	r4, r1
 8010670:	9306      	str	r3, [sp, #24]
 8010672:	f7fd fe2f 	bl	800e2d4 <__retarget_lock_init_recursive>
 8010676:	462a      	mov	r2, r5
 8010678:	463b      	mov	r3, r7
 801067a:	4669      	mov	r1, sp
 801067c:	4630      	mov	r0, r6
 801067e:	f7ff fb51 	bl	800fd24 <_vfiprintf_r>
 8010682:	1e05      	subs	r5, r0, #0
 8010684:	db07      	blt.n	8010696 <__sbprintf+0x62>
 8010686:	4669      	mov	r1, sp
 8010688:	4630      	mov	r0, r6
 801068a:	f000 f8f1 	bl	8010870 <_fflush_r>
 801068e:	2800      	cmp	r0, #0
 8010690:	bf18      	it	ne
 8010692:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8010696:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801069a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801069c:	065b      	lsls	r3, r3, #25
 801069e:	bf42      	ittt	mi
 80106a0:	89a3      	ldrhmi	r3, [r4, #12]
 80106a2:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80106a6:	81a3      	strhmi	r3, [r4, #12]
 80106a8:	f7fd fe15 	bl	800e2d6 <__retarget_lock_close_recursive>
 80106ac:	4628      	mov	r0, r5
 80106ae:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80106b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080106b4 <_fclose_r>:
 80106b4:	b570      	push	{r4, r5, r6, lr}
 80106b6:	4605      	mov	r5, r0
 80106b8:	460c      	mov	r4, r1
 80106ba:	b1b1      	cbz	r1, 80106ea <_fclose_r+0x36>
 80106bc:	b118      	cbz	r0, 80106c6 <_fclose_r+0x12>
 80106be:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80106c0:	b90b      	cbnz	r3, 80106c6 <_fclose_r+0x12>
 80106c2:	f7fd fcf5 	bl	800e0b0 <__sinit>
 80106c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106c8:	07de      	lsls	r6, r3, #31
 80106ca:	d405      	bmi.n	80106d8 <_fclose_r+0x24>
 80106cc:	89a3      	ldrh	r3, [r4, #12]
 80106ce:	0598      	lsls	r0, r3, #22
 80106d0:	d402      	bmi.n	80106d8 <_fclose_r+0x24>
 80106d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106d4:	f7fd fe00 	bl	800e2d8 <__retarget_lock_acquire_recursive>
 80106d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106dc:	b943      	cbnz	r3, 80106f0 <_fclose_r+0x3c>
 80106de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106e0:	07d9      	lsls	r1, r3, #31
 80106e2:	d402      	bmi.n	80106ea <_fclose_r+0x36>
 80106e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106e6:	f7fd fdf8 	bl	800e2da <__retarget_lock_release_recursive>
 80106ea:	2600      	movs	r6, #0
 80106ec:	4630      	mov	r0, r6
 80106ee:	bd70      	pop	{r4, r5, r6, pc}
 80106f0:	4621      	mov	r1, r4
 80106f2:	4628      	mov	r0, r5
 80106f4:	f000 f834 	bl	8010760 <__sflush_r>
 80106f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80106fa:	4606      	mov	r6, r0
 80106fc:	b133      	cbz	r3, 801070c <_fclose_r+0x58>
 80106fe:	69e1      	ldr	r1, [r4, #28]
 8010700:	4628      	mov	r0, r5
 8010702:	4798      	blx	r3
 8010704:	2800      	cmp	r0, #0
 8010706:	bfb8      	it	lt
 8010708:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 801070c:	89a3      	ldrh	r3, [r4, #12]
 801070e:	061a      	lsls	r2, r3, #24
 8010710:	d503      	bpl.n	801071a <_fclose_r+0x66>
 8010712:	6921      	ldr	r1, [r4, #16]
 8010714:	4628      	mov	r0, r5
 8010716:	f7fd fe47 	bl	800e3a8 <_free_r>
 801071a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801071c:	b141      	cbz	r1, 8010730 <_fclose_r+0x7c>
 801071e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8010722:	4299      	cmp	r1, r3
 8010724:	d002      	beq.n	801072c <_fclose_r+0x78>
 8010726:	4628      	mov	r0, r5
 8010728:	f7fd fe3e 	bl	800e3a8 <_free_r>
 801072c:	2300      	movs	r3, #0
 801072e:	6323      	str	r3, [r4, #48]	@ 0x30
 8010730:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010732:	b121      	cbz	r1, 801073e <_fclose_r+0x8a>
 8010734:	4628      	mov	r0, r5
 8010736:	f7fd fe37 	bl	800e3a8 <_free_r>
 801073a:	2300      	movs	r3, #0
 801073c:	6463      	str	r3, [r4, #68]	@ 0x44
 801073e:	f7fd fcab 	bl	800e098 <__sfp_lock_acquire>
 8010742:	2300      	movs	r3, #0
 8010744:	81a3      	strh	r3, [r4, #12]
 8010746:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010748:	07db      	lsls	r3, r3, #31
 801074a:	d402      	bmi.n	8010752 <_fclose_r+0x9e>
 801074c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801074e:	f7fd fdc4 	bl	800e2da <__retarget_lock_release_recursive>
 8010752:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010754:	f7fd fdbf 	bl	800e2d6 <__retarget_lock_close_recursive>
 8010758:	f7fd fca4 	bl	800e0a4 <__sfp_lock_release>
 801075c:	e7c6      	b.n	80106ec <_fclose_r+0x38>
	...

08010760 <__sflush_r>:
 8010760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010764:	4605      	mov	r5, r0
 8010766:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801076a:	0706      	lsls	r6, r0, #28
 801076c:	460c      	mov	r4, r1
 801076e:	d457      	bmi.n	8010820 <__sflush_r+0xc0>
 8010770:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8010774:	818b      	strh	r3, [r1, #12]
 8010776:	684b      	ldr	r3, [r1, #4]
 8010778:	2b00      	cmp	r3, #0
 801077a:	dc02      	bgt.n	8010782 <__sflush_r+0x22>
 801077c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801077e:	2b00      	cmp	r3, #0
 8010780:	dd4c      	ble.n	801081c <__sflush_r+0xbc>
 8010782:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010784:	2e00      	cmp	r6, #0
 8010786:	d049      	beq.n	801081c <__sflush_r+0xbc>
 8010788:	2300      	movs	r3, #0
 801078a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 801078e:	682f      	ldr	r7, [r5, #0]
 8010790:	69e1      	ldr	r1, [r4, #28]
 8010792:	602b      	str	r3, [r5, #0]
 8010794:	d034      	beq.n	8010800 <__sflush_r+0xa0>
 8010796:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8010798:	89a3      	ldrh	r3, [r4, #12]
 801079a:	0759      	lsls	r1, r3, #29
 801079c:	d505      	bpl.n	80107aa <__sflush_r+0x4a>
 801079e:	6863      	ldr	r3, [r4, #4]
 80107a0:	1ad2      	subs	r2, r2, r3
 80107a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80107a4:	b10b      	cbz	r3, 80107aa <__sflush_r+0x4a>
 80107a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80107a8:	1ad2      	subs	r2, r2, r3
 80107aa:	2300      	movs	r3, #0
 80107ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80107ae:	69e1      	ldr	r1, [r4, #28]
 80107b0:	4628      	mov	r0, r5
 80107b2:	47b0      	blx	r6
 80107b4:	1c43      	adds	r3, r0, #1
 80107b6:	d106      	bne.n	80107c6 <__sflush_r+0x66>
 80107b8:	682a      	ldr	r2, [r5, #0]
 80107ba:	2a1d      	cmp	r2, #29
 80107bc:	d848      	bhi.n	8010850 <__sflush_r+0xf0>
 80107be:	4b2b      	ldr	r3, [pc, #172]	@ (801086c <__sflush_r+0x10c>)
 80107c0:	4113      	asrs	r3, r2
 80107c2:	07de      	lsls	r6, r3, #31
 80107c4:	d444      	bmi.n	8010850 <__sflush_r+0xf0>
 80107c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107ca:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80107ce:	81a2      	strh	r2, [r4, #12]
 80107d0:	2200      	movs	r2, #0
 80107d2:	6062      	str	r2, [r4, #4]
 80107d4:	04d9      	lsls	r1, r3, #19
 80107d6:	6922      	ldr	r2, [r4, #16]
 80107d8:	6022      	str	r2, [r4, #0]
 80107da:	d504      	bpl.n	80107e6 <__sflush_r+0x86>
 80107dc:	1c42      	adds	r2, r0, #1
 80107de:	d101      	bne.n	80107e4 <__sflush_r+0x84>
 80107e0:	682b      	ldr	r3, [r5, #0]
 80107e2:	b903      	cbnz	r3, 80107e6 <__sflush_r+0x86>
 80107e4:	6520      	str	r0, [r4, #80]	@ 0x50
 80107e6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80107e8:	602f      	str	r7, [r5, #0]
 80107ea:	b1b9      	cbz	r1, 801081c <__sflush_r+0xbc>
 80107ec:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80107f0:	4299      	cmp	r1, r3
 80107f2:	d002      	beq.n	80107fa <__sflush_r+0x9a>
 80107f4:	4628      	mov	r0, r5
 80107f6:	f7fd fdd7 	bl	800e3a8 <_free_r>
 80107fa:	2300      	movs	r3, #0
 80107fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80107fe:	e00d      	b.n	801081c <__sflush_r+0xbc>
 8010800:	2301      	movs	r3, #1
 8010802:	4628      	mov	r0, r5
 8010804:	47b0      	blx	r6
 8010806:	4602      	mov	r2, r0
 8010808:	1c50      	adds	r0, r2, #1
 801080a:	d1c5      	bne.n	8010798 <__sflush_r+0x38>
 801080c:	682b      	ldr	r3, [r5, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d0c2      	beq.n	8010798 <__sflush_r+0x38>
 8010812:	2b1d      	cmp	r3, #29
 8010814:	d001      	beq.n	801081a <__sflush_r+0xba>
 8010816:	2b16      	cmp	r3, #22
 8010818:	d11a      	bne.n	8010850 <__sflush_r+0xf0>
 801081a:	602f      	str	r7, [r5, #0]
 801081c:	2000      	movs	r0, #0
 801081e:	e01e      	b.n	801085e <__sflush_r+0xfe>
 8010820:	690f      	ldr	r7, [r1, #16]
 8010822:	2f00      	cmp	r7, #0
 8010824:	d0fa      	beq.n	801081c <__sflush_r+0xbc>
 8010826:	0783      	lsls	r3, r0, #30
 8010828:	680e      	ldr	r6, [r1, #0]
 801082a:	bf08      	it	eq
 801082c:	694b      	ldreq	r3, [r1, #20]
 801082e:	600f      	str	r7, [r1, #0]
 8010830:	bf18      	it	ne
 8010832:	2300      	movne	r3, #0
 8010834:	eba6 0807 	sub.w	r8, r6, r7
 8010838:	608b      	str	r3, [r1, #8]
 801083a:	f1b8 0f00 	cmp.w	r8, #0
 801083e:	dded      	ble.n	801081c <__sflush_r+0xbc>
 8010840:	69e1      	ldr	r1, [r4, #28]
 8010842:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8010844:	4643      	mov	r3, r8
 8010846:	463a      	mov	r2, r7
 8010848:	4628      	mov	r0, r5
 801084a:	47b0      	blx	r6
 801084c:	2800      	cmp	r0, #0
 801084e:	dc08      	bgt.n	8010862 <__sflush_r+0x102>
 8010850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010858:	81a3      	strh	r3, [r4, #12]
 801085a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801085e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010862:	4407      	add	r7, r0
 8010864:	eba8 0800 	sub.w	r8, r8, r0
 8010868:	e7e7      	b.n	801083a <__sflush_r+0xda>
 801086a:	bf00      	nop
 801086c:	dfbffffe 	.word	0xdfbffffe

08010870 <_fflush_r>:
 8010870:	b538      	push	{r3, r4, r5, lr}
 8010872:	460c      	mov	r4, r1
 8010874:	4605      	mov	r5, r0
 8010876:	b118      	cbz	r0, 8010880 <_fflush_r+0x10>
 8010878:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801087a:	b90b      	cbnz	r3, 8010880 <_fflush_r+0x10>
 801087c:	f7fd fc18 	bl	800e0b0 <__sinit>
 8010880:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8010884:	b1b8      	cbz	r0, 80108b6 <_fflush_r+0x46>
 8010886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010888:	07db      	lsls	r3, r3, #31
 801088a:	d404      	bmi.n	8010896 <_fflush_r+0x26>
 801088c:	0581      	lsls	r1, r0, #22
 801088e:	d402      	bmi.n	8010896 <_fflush_r+0x26>
 8010890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010892:	f7fd fd21 	bl	800e2d8 <__retarget_lock_acquire_recursive>
 8010896:	4628      	mov	r0, r5
 8010898:	4621      	mov	r1, r4
 801089a:	f7ff ff61 	bl	8010760 <__sflush_r>
 801089e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80108a0:	07da      	lsls	r2, r3, #31
 80108a2:	4605      	mov	r5, r0
 80108a4:	d405      	bmi.n	80108b2 <_fflush_r+0x42>
 80108a6:	89a3      	ldrh	r3, [r4, #12]
 80108a8:	059b      	lsls	r3, r3, #22
 80108aa:	d402      	bmi.n	80108b2 <_fflush_r+0x42>
 80108ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80108ae:	f7fd fd14 	bl	800e2da <__retarget_lock_release_recursive>
 80108b2:	4628      	mov	r0, r5
 80108b4:	bd38      	pop	{r3, r4, r5, pc}
 80108b6:	4605      	mov	r5, r0
 80108b8:	e7fb      	b.n	80108b2 <_fflush_r+0x42>
	...

080108bc <__sfvwrite_r>:
 80108bc:	6893      	ldr	r3, [r2, #8]
 80108be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c2:	4606      	mov	r6, r0
 80108c4:	460c      	mov	r4, r1
 80108c6:	4691      	mov	r9, r2
 80108c8:	b91b      	cbnz	r3, 80108d2 <__sfvwrite_r+0x16>
 80108ca:	2000      	movs	r0, #0
 80108cc:	b003      	add	sp, #12
 80108ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108d2:	898b      	ldrh	r3, [r1, #12]
 80108d4:	0718      	lsls	r0, r3, #28
 80108d6:	d550      	bpl.n	801097a <__sfvwrite_r+0xbe>
 80108d8:	690b      	ldr	r3, [r1, #16]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d04d      	beq.n	801097a <__sfvwrite_r+0xbe>
 80108de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108e2:	f8d9 8000 	ldr.w	r8, [r9]
 80108e6:	f013 0702 	ands.w	r7, r3, #2
 80108ea:	d16b      	bne.n	80109c4 <__sfvwrite_r+0x108>
 80108ec:	f013 0301 	ands.w	r3, r3, #1
 80108f0:	f000 809c 	beq.w	8010a2c <__sfvwrite_r+0x170>
 80108f4:	4638      	mov	r0, r7
 80108f6:	46ba      	mov	sl, r7
 80108f8:	46bb      	mov	fp, r7
 80108fa:	f1bb 0f00 	cmp.w	fp, #0
 80108fe:	f000 8103 	beq.w	8010b08 <__sfvwrite_r+0x24c>
 8010902:	b950      	cbnz	r0, 801091a <__sfvwrite_r+0x5e>
 8010904:	465a      	mov	r2, fp
 8010906:	210a      	movs	r1, #10
 8010908:	4650      	mov	r0, sl
 801090a:	f7ef fce9 	bl	80002e0 <memchr>
 801090e:	2800      	cmp	r0, #0
 8010910:	f000 8100 	beq.w	8010b14 <__sfvwrite_r+0x258>
 8010914:	3001      	adds	r0, #1
 8010916:	eba0 070a 	sub.w	r7, r0, sl
 801091a:	6820      	ldr	r0, [r4, #0]
 801091c:	6921      	ldr	r1, [r4, #16]
 801091e:	68a5      	ldr	r5, [r4, #8]
 8010920:	6963      	ldr	r3, [r4, #20]
 8010922:	455f      	cmp	r7, fp
 8010924:	463a      	mov	r2, r7
 8010926:	bf28      	it	cs
 8010928:	465a      	movcs	r2, fp
 801092a:	4288      	cmp	r0, r1
 801092c:	f240 80f5 	bls.w	8010b1a <__sfvwrite_r+0x25e>
 8010930:	441d      	add	r5, r3
 8010932:	42aa      	cmp	r2, r5
 8010934:	f340 80f1 	ble.w	8010b1a <__sfvwrite_r+0x25e>
 8010938:	4651      	mov	r1, sl
 801093a:	462a      	mov	r2, r5
 801093c:	f000 f9ca 	bl	8010cd4 <memmove>
 8010940:	6823      	ldr	r3, [r4, #0]
 8010942:	442b      	add	r3, r5
 8010944:	6023      	str	r3, [r4, #0]
 8010946:	4621      	mov	r1, r4
 8010948:	4630      	mov	r0, r6
 801094a:	f7ff ff91 	bl	8010870 <_fflush_r>
 801094e:	2800      	cmp	r0, #0
 8010950:	d167      	bne.n	8010a22 <__sfvwrite_r+0x166>
 8010952:	1b7f      	subs	r7, r7, r5
 8010954:	f040 80f9 	bne.w	8010b4a <__sfvwrite_r+0x28e>
 8010958:	4621      	mov	r1, r4
 801095a:	4630      	mov	r0, r6
 801095c:	f7ff ff88 	bl	8010870 <_fflush_r>
 8010960:	2800      	cmp	r0, #0
 8010962:	d15e      	bne.n	8010a22 <__sfvwrite_r+0x166>
 8010964:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010968:	1b5b      	subs	r3, r3, r5
 801096a:	44aa      	add	sl, r5
 801096c:	ebab 0b05 	sub.w	fp, fp, r5
 8010970:	f8c9 3008 	str.w	r3, [r9, #8]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d1c0      	bne.n	80108fa <__sfvwrite_r+0x3e>
 8010978:	e7a7      	b.n	80108ca <__sfvwrite_r+0xe>
 801097a:	4621      	mov	r1, r4
 801097c:	4630      	mov	r0, r6
 801097e:	f000 f8e9 	bl	8010b54 <__swsetup_r>
 8010982:	2800      	cmp	r0, #0
 8010984:	d0ab      	beq.n	80108de <__sfvwrite_r+0x22>
 8010986:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801098a:	e79f      	b.n	80108cc <__sfvwrite_r+0x10>
 801098c:	e9d8 a500 	ldrd	sl, r5, [r8]
 8010990:	f108 0808 	add.w	r8, r8, #8
 8010994:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8010998:	69e1      	ldr	r1, [r4, #28]
 801099a:	2d00      	cmp	r5, #0
 801099c:	d0f6      	beq.n	801098c <__sfvwrite_r+0xd0>
 801099e:	42bd      	cmp	r5, r7
 80109a0:	462b      	mov	r3, r5
 80109a2:	4652      	mov	r2, sl
 80109a4:	bf28      	it	cs
 80109a6:	463b      	movcs	r3, r7
 80109a8:	4630      	mov	r0, r6
 80109aa:	47d8      	blx	fp
 80109ac:	2800      	cmp	r0, #0
 80109ae:	dd38      	ble.n	8010a22 <__sfvwrite_r+0x166>
 80109b0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80109b4:	1a1b      	subs	r3, r3, r0
 80109b6:	4482      	add	sl, r0
 80109b8:	1a2d      	subs	r5, r5, r0
 80109ba:	f8c9 3008 	str.w	r3, [r9, #8]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d1e8      	bne.n	8010994 <__sfvwrite_r+0xd8>
 80109c2:	e782      	b.n	80108ca <__sfvwrite_r+0xe>
 80109c4:	f04f 0a00 	mov.w	sl, #0
 80109c8:	4f61      	ldr	r7, [pc, #388]	@ (8010b50 <__sfvwrite_r+0x294>)
 80109ca:	4655      	mov	r5, sl
 80109cc:	e7e2      	b.n	8010994 <__sfvwrite_r+0xd8>
 80109ce:	e9d8 7a00 	ldrd	r7, sl, [r8]
 80109d2:	f108 0808 	add.w	r8, r8, #8
 80109d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109da:	6820      	ldr	r0, [r4, #0]
 80109dc:	68a2      	ldr	r2, [r4, #8]
 80109de:	f1ba 0f00 	cmp.w	sl, #0
 80109e2:	d0f4      	beq.n	80109ce <__sfvwrite_r+0x112>
 80109e4:	0599      	lsls	r1, r3, #22
 80109e6:	d563      	bpl.n	8010ab0 <__sfvwrite_r+0x1f4>
 80109e8:	4552      	cmp	r2, sl
 80109ea:	d836      	bhi.n	8010a5a <__sfvwrite_r+0x19e>
 80109ec:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 80109f0:	d033      	beq.n	8010a5a <__sfvwrite_r+0x19e>
 80109f2:	6921      	ldr	r1, [r4, #16]
 80109f4:	6965      	ldr	r5, [r4, #20]
 80109f6:	eba0 0b01 	sub.w	fp, r0, r1
 80109fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a02:	f10b 0201 	add.w	r2, fp, #1
 8010a06:	106d      	asrs	r5, r5, #1
 8010a08:	4452      	add	r2, sl
 8010a0a:	4295      	cmp	r5, r2
 8010a0c:	bf38      	it	cc
 8010a0e:	4615      	movcc	r5, r2
 8010a10:	055b      	lsls	r3, r3, #21
 8010a12:	d53d      	bpl.n	8010a90 <__sfvwrite_r+0x1d4>
 8010a14:	4629      	mov	r1, r5
 8010a16:	4630      	mov	r0, r6
 8010a18:	f7fd fd86 	bl	800e528 <_malloc_r>
 8010a1c:	b948      	cbnz	r0, 8010a32 <__sfvwrite_r+0x176>
 8010a1e:	230c      	movs	r3, #12
 8010a20:	6033      	str	r3, [r6, #0]
 8010a22:	89a3      	ldrh	r3, [r4, #12]
 8010a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a28:	81a3      	strh	r3, [r4, #12]
 8010a2a:	e7ac      	b.n	8010986 <__sfvwrite_r+0xca>
 8010a2c:	461f      	mov	r7, r3
 8010a2e:	469a      	mov	sl, r3
 8010a30:	e7d1      	b.n	80109d6 <__sfvwrite_r+0x11a>
 8010a32:	465a      	mov	r2, fp
 8010a34:	6921      	ldr	r1, [r4, #16]
 8010a36:	9001      	str	r0, [sp, #4]
 8010a38:	f000 f9b4 	bl	8010da4 <memcpy>
 8010a3c:	89a2      	ldrh	r2, [r4, #12]
 8010a3e:	9b01      	ldr	r3, [sp, #4]
 8010a40:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8010a44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8010a48:	81a2      	strh	r2, [r4, #12]
 8010a4a:	6123      	str	r3, [r4, #16]
 8010a4c:	6165      	str	r5, [r4, #20]
 8010a4e:	445b      	add	r3, fp
 8010a50:	eba5 050b 	sub.w	r5, r5, fp
 8010a54:	6023      	str	r3, [r4, #0]
 8010a56:	4652      	mov	r2, sl
 8010a58:	60a5      	str	r5, [r4, #8]
 8010a5a:	4552      	cmp	r2, sl
 8010a5c:	bf28      	it	cs
 8010a5e:	4652      	movcs	r2, sl
 8010a60:	6820      	ldr	r0, [r4, #0]
 8010a62:	9201      	str	r2, [sp, #4]
 8010a64:	4639      	mov	r1, r7
 8010a66:	f000 f935 	bl	8010cd4 <memmove>
 8010a6a:	68a3      	ldr	r3, [r4, #8]
 8010a6c:	9a01      	ldr	r2, [sp, #4]
 8010a6e:	1a9b      	subs	r3, r3, r2
 8010a70:	60a3      	str	r3, [r4, #8]
 8010a72:	6823      	ldr	r3, [r4, #0]
 8010a74:	4413      	add	r3, r2
 8010a76:	4655      	mov	r5, sl
 8010a78:	6023      	str	r3, [r4, #0]
 8010a7a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010a7e:	1b5b      	subs	r3, r3, r5
 8010a80:	442f      	add	r7, r5
 8010a82:	ebaa 0a05 	sub.w	sl, sl, r5
 8010a86:	f8c9 3008 	str.w	r3, [r9, #8]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d1a3      	bne.n	80109d6 <__sfvwrite_r+0x11a>
 8010a8e:	e71c      	b.n	80108ca <__sfvwrite_r+0xe>
 8010a90:	462a      	mov	r2, r5
 8010a92:	4630      	mov	r0, r6
 8010a94:	f001 fb18 	bl	80120c8 <_realloc_r>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	2800      	cmp	r0, #0
 8010a9c:	d1d5      	bne.n	8010a4a <__sfvwrite_r+0x18e>
 8010a9e:	6921      	ldr	r1, [r4, #16]
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	f7fd fc81 	bl	800e3a8 <_free_r>
 8010aa6:	89a3      	ldrh	r3, [r4, #12]
 8010aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010aac:	81a3      	strh	r3, [r4, #12]
 8010aae:	e7b6      	b.n	8010a1e <__sfvwrite_r+0x162>
 8010ab0:	6923      	ldr	r3, [r4, #16]
 8010ab2:	4283      	cmp	r3, r0
 8010ab4:	d302      	bcc.n	8010abc <__sfvwrite_r+0x200>
 8010ab6:	6961      	ldr	r1, [r4, #20]
 8010ab8:	4551      	cmp	r1, sl
 8010aba:	d915      	bls.n	8010ae8 <__sfvwrite_r+0x22c>
 8010abc:	4552      	cmp	r2, sl
 8010abe:	bf28      	it	cs
 8010ac0:	4652      	movcs	r2, sl
 8010ac2:	4639      	mov	r1, r7
 8010ac4:	4615      	mov	r5, r2
 8010ac6:	f000 f905 	bl	8010cd4 <memmove>
 8010aca:	68a3      	ldr	r3, [r4, #8]
 8010acc:	6822      	ldr	r2, [r4, #0]
 8010ace:	1b5b      	subs	r3, r3, r5
 8010ad0:	442a      	add	r2, r5
 8010ad2:	60a3      	str	r3, [r4, #8]
 8010ad4:	6022      	str	r2, [r4, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d1cf      	bne.n	8010a7a <__sfvwrite_r+0x1be>
 8010ada:	4621      	mov	r1, r4
 8010adc:	4630      	mov	r0, r6
 8010ade:	f7ff fec7 	bl	8010870 <_fflush_r>
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	d0c9      	beq.n	8010a7a <__sfvwrite_r+0x1be>
 8010ae6:	e79c      	b.n	8010a22 <__sfvwrite_r+0x166>
 8010ae8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010aec:	4553      	cmp	r3, sl
 8010aee:	bf28      	it	cs
 8010af0:	4653      	movcs	r3, sl
 8010af2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8010af4:	fb93 f3f1 	sdiv	r3, r3, r1
 8010af8:	463a      	mov	r2, r7
 8010afa:	434b      	muls	r3, r1
 8010afc:	4630      	mov	r0, r6
 8010afe:	69e1      	ldr	r1, [r4, #28]
 8010b00:	47a8      	blx	r5
 8010b02:	1e05      	subs	r5, r0, #0
 8010b04:	dcb9      	bgt.n	8010a7a <__sfvwrite_r+0x1be>
 8010b06:	e78c      	b.n	8010a22 <__sfvwrite_r+0x166>
 8010b08:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	f108 0808 	add.w	r8, r8, #8
 8010b12:	e6f2      	b.n	80108fa <__sfvwrite_r+0x3e>
 8010b14:	f10b 0701 	add.w	r7, fp, #1
 8010b18:	e6ff      	b.n	801091a <__sfvwrite_r+0x5e>
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	dc08      	bgt.n	8010b30 <__sfvwrite_r+0x274>
 8010b1e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8010b20:	69e1      	ldr	r1, [r4, #28]
 8010b22:	4652      	mov	r2, sl
 8010b24:	4630      	mov	r0, r6
 8010b26:	47a8      	blx	r5
 8010b28:	1e05      	subs	r5, r0, #0
 8010b2a:	f73f af12 	bgt.w	8010952 <__sfvwrite_r+0x96>
 8010b2e:	e778      	b.n	8010a22 <__sfvwrite_r+0x166>
 8010b30:	4651      	mov	r1, sl
 8010b32:	9201      	str	r2, [sp, #4]
 8010b34:	f000 f8ce 	bl	8010cd4 <memmove>
 8010b38:	9a01      	ldr	r2, [sp, #4]
 8010b3a:	68a3      	ldr	r3, [r4, #8]
 8010b3c:	1a9b      	subs	r3, r3, r2
 8010b3e:	60a3      	str	r3, [r4, #8]
 8010b40:	6823      	ldr	r3, [r4, #0]
 8010b42:	4413      	add	r3, r2
 8010b44:	6023      	str	r3, [r4, #0]
 8010b46:	4615      	mov	r5, r2
 8010b48:	e703      	b.n	8010952 <__sfvwrite_r+0x96>
 8010b4a:	2001      	movs	r0, #1
 8010b4c:	e70a      	b.n	8010964 <__sfvwrite_r+0xa8>
 8010b4e:	bf00      	nop
 8010b50:	7ffffc00 	.word	0x7ffffc00

08010b54 <__swsetup_r>:
 8010b54:	b538      	push	{r3, r4, r5, lr}
 8010b56:	4b29      	ldr	r3, [pc, #164]	@ (8010bfc <__swsetup_r+0xa8>)
 8010b58:	4605      	mov	r5, r0
 8010b5a:	6818      	ldr	r0, [r3, #0]
 8010b5c:	460c      	mov	r4, r1
 8010b5e:	b118      	cbz	r0, 8010b68 <__swsetup_r+0x14>
 8010b60:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010b62:	b90b      	cbnz	r3, 8010b68 <__swsetup_r+0x14>
 8010b64:	f7fd faa4 	bl	800e0b0 <__sinit>
 8010b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b6c:	0719      	lsls	r1, r3, #28
 8010b6e:	d422      	bmi.n	8010bb6 <__swsetup_r+0x62>
 8010b70:	06da      	lsls	r2, r3, #27
 8010b72:	d407      	bmi.n	8010b84 <__swsetup_r+0x30>
 8010b74:	2209      	movs	r2, #9
 8010b76:	602a      	str	r2, [r5, #0]
 8010b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b7c:	81a3      	strh	r3, [r4, #12]
 8010b7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b82:	e033      	b.n	8010bec <__swsetup_r+0x98>
 8010b84:	0758      	lsls	r0, r3, #29
 8010b86:	d512      	bpl.n	8010bae <__swsetup_r+0x5a>
 8010b88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010b8a:	b141      	cbz	r1, 8010b9e <__swsetup_r+0x4a>
 8010b8c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8010b90:	4299      	cmp	r1, r3
 8010b92:	d002      	beq.n	8010b9a <__swsetup_r+0x46>
 8010b94:	4628      	mov	r0, r5
 8010b96:	f7fd fc07 	bl	800e3a8 <_free_r>
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8010b9e:	89a3      	ldrh	r3, [r4, #12]
 8010ba0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010ba4:	81a3      	strh	r3, [r4, #12]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	6063      	str	r3, [r4, #4]
 8010baa:	6923      	ldr	r3, [r4, #16]
 8010bac:	6023      	str	r3, [r4, #0]
 8010bae:	89a3      	ldrh	r3, [r4, #12]
 8010bb0:	f043 0308 	orr.w	r3, r3, #8
 8010bb4:	81a3      	strh	r3, [r4, #12]
 8010bb6:	6923      	ldr	r3, [r4, #16]
 8010bb8:	b94b      	cbnz	r3, 8010bce <__swsetup_r+0x7a>
 8010bba:	89a3      	ldrh	r3, [r4, #12]
 8010bbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010bc4:	d003      	beq.n	8010bce <__swsetup_r+0x7a>
 8010bc6:	4621      	mov	r1, r4
 8010bc8:	4628      	mov	r0, r5
 8010bca:	f001 fcee 	bl	80125aa <__smakebuf_r>
 8010bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bd2:	f013 0201 	ands.w	r2, r3, #1
 8010bd6:	d00a      	beq.n	8010bee <__swsetup_r+0x9a>
 8010bd8:	2200      	movs	r2, #0
 8010bda:	60a2      	str	r2, [r4, #8]
 8010bdc:	6962      	ldr	r2, [r4, #20]
 8010bde:	4252      	negs	r2, r2
 8010be0:	61a2      	str	r2, [r4, #24]
 8010be2:	6922      	ldr	r2, [r4, #16]
 8010be4:	b942      	cbnz	r2, 8010bf8 <__swsetup_r+0xa4>
 8010be6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010bea:	d1c5      	bne.n	8010b78 <__swsetup_r+0x24>
 8010bec:	bd38      	pop	{r3, r4, r5, pc}
 8010bee:	0799      	lsls	r1, r3, #30
 8010bf0:	bf58      	it	pl
 8010bf2:	6962      	ldrpl	r2, [r4, #20]
 8010bf4:	60a2      	str	r2, [r4, #8]
 8010bf6:	e7f4      	b.n	8010be2 <__swsetup_r+0x8e>
 8010bf8:	2000      	movs	r0, #0
 8010bfa:	e7f7      	b.n	8010bec <__swsetup_r+0x98>
 8010bfc:	2400001c 	.word	0x2400001c

08010c00 <__fputwc>:
 8010c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c04:	4680      	mov	r8, r0
 8010c06:	460f      	mov	r7, r1
 8010c08:	4614      	mov	r4, r2
 8010c0a:	f000 f891 	bl	8010d30 <__locale_mb_cur_max>
 8010c0e:	2801      	cmp	r0, #1
 8010c10:	4605      	mov	r5, r0
 8010c12:	d11b      	bne.n	8010c4c <__fputwc+0x4c>
 8010c14:	1e7b      	subs	r3, r7, #1
 8010c16:	2bfe      	cmp	r3, #254	@ 0xfe
 8010c18:	d818      	bhi.n	8010c4c <__fputwc+0x4c>
 8010c1a:	f88d 7004 	strb.w	r7, [sp, #4]
 8010c1e:	2600      	movs	r6, #0
 8010c20:	f10d 0904 	add.w	r9, sp, #4
 8010c24:	42ae      	cmp	r6, r5
 8010c26:	d021      	beq.n	8010c6c <__fputwc+0x6c>
 8010c28:	68a3      	ldr	r3, [r4, #8]
 8010c2a:	f816 1009 	ldrb.w	r1, [r6, r9]
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	60a3      	str	r3, [r4, #8]
 8010c34:	da04      	bge.n	8010c40 <__fputwc+0x40>
 8010c36:	69a2      	ldr	r2, [r4, #24]
 8010c38:	4293      	cmp	r3, r2
 8010c3a:	db1b      	blt.n	8010c74 <__fputwc+0x74>
 8010c3c:	290a      	cmp	r1, #10
 8010c3e:	d019      	beq.n	8010c74 <__fputwc+0x74>
 8010c40:	6823      	ldr	r3, [r4, #0]
 8010c42:	1c5a      	adds	r2, r3, #1
 8010c44:	6022      	str	r2, [r4, #0]
 8010c46:	7019      	strb	r1, [r3, #0]
 8010c48:	3601      	adds	r6, #1
 8010c4a:	e7eb      	b.n	8010c24 <__fputwc+0x24>
 8010c4c:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8010c50:	463a      	mov	r2, r7
 8010c52:	a901      	add	r1, sp, #4
 8010c54:	4640      	mov	r0, r8
 8010c56:	f001 fbed 	bl	8012434 <_wcrtomb_r>
 8010c5a:	1c43      	adds	r3, r0, #1
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	d1de      	bne.n	8010c1e <__fputwc+0x1e>
 8010c60:	89a3      	ldrh	r3, [r4, #12]
 8010c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c66:	81a3      	strh	r3, [r4, #12]
 8010c68:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010c6c:	4638      	mov	r0, r7
 8010c6e:	b003      	add	sp, #12
 8010c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c74:	4622      	mov	r2, r4
 8010c76:	4640      	mov	r0, r8
 8010c78:	f001 fcd3 	bl	8012622 <__swbuf_r>
 8010c7c:	3001      	adds	r0, #1
 8010c7e:	d1e3      	bne.n	8010c48 <__fputwc+0x48>
 8010c80:	e7f2      	b.n	8010c68 <__fputwc+0x68>

08010c82 <_fputwc_r>:
 8010c82:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8010c84:	07db      	lsls	r3, r3, #31
 8010c86:	b570      	push	{r4, r5, r6, lr}
 8010c88:	4605      	mov	r5, r0
 8010c8a:	460e      	mov	r6, r1
 8010c8c:	4614      	mov	r4, r2
 8010c8e:	d405      	bmi.n	8010c9c <_fputwc_r+0x1a>
 8010c90:	8993      	ldrh	r3, [r2, #12]
 8010c92:	0598      	lsls	r0, r3, #22
 8010c94:	d402      	bmi.n	8010c9c <_fputwc_r+0x1a>
 8010c96:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8010c98:	f7fd fb1e 	bl	800e2d8 <__retarget_lock_acquire_recursive>
 8010c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ca0:	0499      	lsls	r1, r3, #18
 8010ca2:	d406      	bmi.n	8010cb2 <_fputwc_r+0x30>
 8010ca4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010ca8:	81a3      	strh	r3, [r4, #12]
 8010caa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010cb0:	6663      	str	r3, [r4, #100]	@ 0x64
 8010cb2:	4622      	mov	r2, r4
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	4631      	mov	r1, r6
 8010cb8:	f7ff ffa2 	bl	8010c00 <__fputwc>
 8010cbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cbe:	07da      	lsls	r2, r3, #31
 8010cc0:	4605      	mov	r5, r0
 8010cc2:	d405      	bmi.n	8010cd0 <_fputwc_r+0x4e>
 8010cc4:	89a3      	ldrh	r3, [r4, #12]
 8010cc6:	059b      	lsls	r3, r3, #22
 8010cc8:	d402      	bmi.n	8010cd0 <_fputwc_r+0x4e>
 8010cca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ccc:	f7fd fb05 	bl	800e2da <__retarget_lock_release_recursive>
 8010cd0:	4628      	mov	r0, r5
 8010cd2:	bd70      	pop	{r4, r5, r6, pc}

08010cd4 <memmove>:
 8010cd4:	4288      	cmp	r0, r1
 8010cd6:	b510      	push	{r4, lr}
 8010cd8:	eb01 0402 	add.w	r4, r1, r2
 8010cdc:	d902      	bls.n	8010ce4 <memmove+0x10>
 8010cde:	4284      	cmp	r4, r0
 8010ce0:	4623      	mov	r3, r4
 8010ce2:	d807      	bhi.n	8010cf4 <memmove+0x20>
 8010ce4:	1e43      	subs	r3, r0, #1
 8010ce6:	42a1      	cmp	r1, r4
 8010ce8:	d008      	beq.n	8010cfc <memmove+0x28>
 8010cea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010cf2:	e7f8      	b.n	8010ce6 <memmove+0x12>
 8010cf4:	4402      	add	r2, r0
 8010cf6:	4601      	mov	r1, r0
 8010cf8:	428a      	cmp	r2, r1
 8010cfa:	d100      	bne.n	8010cfe <memmove+0x2a>
 8010cfc:	bd10      	pop	{r4, pc}
 8010cfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d06:	e7f7      	b.n	8010cf8 <memmove+0x24>

08010d08 <strncpy>:
 8010d08:	b510      	push	{r4, lr}
 8010d0a:	3901      	subs	r1, #1
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	b132      	cbz	r2, 8010d1e <strncpy+0x16>
 8010d10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010d14:	f803 4b01 	strb.w	r4, [r3], #1
 8010d18:	3a01      	subs	r2, #1
 8010d1a:	2c00      	cmp	r4, #0
 8010d1c:	d1f7      	bne.n	8010d0e <strncpy+0x6>
 8010d1e:	441a      	add	r2, r3
 8010d20:	2100      	movs	r1, #0
 8010d22:	4293      	cmp	r3, r2
 8010d24:	d100      	bne.n	8010d28 <strncpy+0x20>
 8010d26:	bd10      	pop	{r4, pc}
 8010d28:	f803 1b01 	strb.w	r1, [r3], #1
 8010d2c:	e7f9      	b.n	8010d22 <strncpy+0x1a>
	...

08010d30 <__locale_mb_cur_max>:
 8010d30:	4b01      	ldr	r3, [pc, #4]	@ (8010d38 <__locale_mb_cur_max+0x8>)
 8010d32:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8010d36:	4770      	bx	lr
 8010d38:	24000554 	.word	0x24000554

08010d3c <_localeconv_r>:
 8010d3c:	4800      	ldr	r0, [pc, #0]	@ (8010d40 <_localeconv_r+0x4>)
 8010d3e:	4770      	bx	lr
 8010d40:	24000644 	.word	0x24000644

08010d44 <_sbrk_r>:
 8010d44:	b538      	push	{r3, r4, r5, lr}
 8010d46:	4d06      	ldr	r5, [pc, #24]	@ (8010d60 <_sbrk_r+0x1c>)
 8010d48:	2300      	movs	r3, #0
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	4608      	mov	r0, r1
 8010d4e:	602b      	str	r3, [r5, #0]
 8010d50:	f7f1 fa52 	bl	80021f8 <_sbrk>
 8010d54:	1c43      	adds	r3, r0, #1
 8010d56:	d102      	bne.n	8010d5e <_sbrk_r+0x1a>
 8010d58:	682b      	ldr	r3, [r5, #0]
 8010d5a:	b103      	cbz	r3, 8010d5e <_sbrk_r+0x1a>
 8010d5c:	6023      	str	r3, [r4, #0]
 8010d5e:	bd38      	pop	{r3, r4, r5, pc}
 8010d60:	24014b10 	.word	0x24014b10

08010d64 <__libc_fini_array>:
 8010d64:	b538      	push	{r3, r4, r5, lr}
 8010d66:	4d07      	ldr	r5, [pc, #28]	@ (8010d84 <__libc_fini_array+0x20>)
 8010d68:	4c07      	ldr	r4, [pc, #28]	@ (8010d88 <__libc_fini_array+0x24>)
 8010d6a:	1b64      	subs	r4, r4, r5
 8010d6c:	10a4      	asrs	r4, r4, #2
 8010d6e:	b91c      	cbnz	r4, 8010d78 <__libc_fini_array+0x14>
 8010d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d74:	f003 b888 	b.w	8013e88 <_fini>
 8010d78:	3c01      	subs	r4, #1
 8010d7a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8010d7e:	4798      	blx	r3
 8010d80:	e7f5      	b.n	8010d6e <__libc_fini_array+0xa>
 8010d82:	bf00      	nop
 8010d84:	080166b0 	.word	0x080166b0
 8010d88:	080166b4 	.word	0x080166b4

08010d8c <sysconf>:
 8010d8c:	2808      	cmp	r0, #8
 8010d8e:	b508      	push	{r3, lr}
 8010d90:	d006      	beq.n	8010da0 <sysconf+0x14>
 8010d92:	f7fd fa75 	bl	800e280 <__errno>
 8010d96:	2316      	movs	r3, #22
 8010d98:	6003      	str	r3, [r0, #0]
 8010d9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d9e:	bd08      	pop	{r3, pc}
 8010da0:	2080      	movs	r0, #128	@ 0x80
 8010da2:	e7fc      	b.n	8010d9e <sysconf+0x12>

08010da4 <memcpy>:
 8010da4:	440a      	add	r2, r1
 8010da6:	4291      	cmp	r1, r2
 8010da8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010dac:	d100      	bne.n	8010db0 <memcpy+0xc>
 8010dae:	4770      	bx	lr
 8010db0:	b510      	push	{r4, lr}
 8010db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010dba:	4291      	cmp	r1, r2
 8010dbc:	d1f9      	bne.n	8010db2 <memcpy+0xe>
 8010dbe:	bd10      	pop	{r4, pc}

08010dc0 <frexp>:
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	ee10 1a90 	vmov	r1, s1
 8010dc6:	6002      	str	r2, [r0, #0]
 8010dc8:	4a17      	ldr	r2, [pc, #92]	@ (8010e28 <frexp+0x68>)
 8010dca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d823      	bhi.n	8010e1a <frexp+0x5a>
 8010dd2:	ee10 2a10 	vmov	r2, s0
 8010dd6:	431a      	orrs	r2, r3
 8010dd8:	d01f      	beq.n	8010e1a <frexp+0x5a>
 8010dda:	4a14      	ldr	r2, [pc, #80]	@ (8010e2c <frexp+0x6c>)
 8010ddc:	400a      	ands	r2, r1
 8010dde:	b952      	cbnz	r2, 8010df6 <frexp+0x36>
 8010de0:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8010e20 <frexp+0x60>
 8010de4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010de8:	ee10 1a90 	vmov	r1, s1
 8010dec:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8010df0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010df4:	6002      	str	r2, [r0, #0]
 8010df6:	6802      	ldr	r2, [r0, #0]
 8010df8:	151b      	asrs	r3, r3, #20
 8010dfa:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8010dfe:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8010e02:	441a      	add	r2, r3
 8010e04:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8010e08:	6002      	str	r2, [r0, #0]
 8010e0a:	ec53 2b10 	vmov	r2, r3, d0
 8010e0e:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
 8010e12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010e16:	ec43 2b10 	vmov	d0, r2, r3
 8010e1a:	4770      	bx	lr
 8010e1c:	f3af 8000 	nop.w
 8010e20:	00000000 	.word	0x00000000
 8010e24:	43500000 	.word	0x43500000
 8010e28:	7fefffff 	.word	0x7fefffff
 8010e2c:	7ff00000 	.word	0x7ff00000

08010e30 <__register_exitproc>:
 8010e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e34:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8010eac <__register_exitproc+0x7c>
 8010e38:	4606      	mov	r6, r0
 8010e3a:	f8da 0000 	ldr.w	r0, [sl]
 8010e3e:	4698      	mov	r8, r3
 8010e40:	460f      	mov	r7, r1
 8010e42:	4691      	mov	r9, r2
 8010e44:	f7fd fa48 	bl	800e2d8 <__retarget_lock_acquire_recursive>
 8010e48:	4b16      	ldr	r3, [pc, #88]	@ (8010ea4 <__register_exitproc+0x74>)
 8010e4a:	681c      	ldr	r4, [r3, #0]
 8010e4c:	b90c      	cbnz	r4, 8010e52 <__register_exitproc+0x22>
 8010e4e:	4c16      	ldr	r4, [pc, #88]	@ (8010ea8 <__register_exitproc+0x78>)
 8010e50:	601c      	str	r4, [r3, #0]
 8010e52:	6865      	ldr	r5, [r4, #4]
 8010e54:	f8da 0000 	ldr.w	r0, [sl]
 8010e58:	2d1f      	cmp	r5, #31
 8010e5a:	dd05      	ble.n	8010e68 <__register_exitproc+0x38>
 8010e5c:	f7fd fa3d 	bl	800e2da <__retarget_lock_release_recursive>
 8010e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e68:	b19e      	cbz	r6, 8010e92 <__register_exitproc+0x62>
 8010e6a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8010e6e:	2201      	movs	r2, #1
 8010e70:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8010e74:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8010e78:	40aa      	lsls	r2, r5
 8010e7a:	4313      	orrs	r3, r2
 8010e7c:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8010e80:	2e02      	cmp	r6, #2
 8010e82:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8010e86:	bf02      	ittt	eq
 8010e88:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8010e8c:	4313      	orreq	r3, r2
 8010e8e:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8010e92:	1c6b      	adds	r3, r5, #1
 8010e94:	3502      	adds	r5, #2
 8010e96:	6063      	str	r3, [r4, #4]
 8010e98:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8010e9c:	f7fd fa1d 	bl	800e2da <__retarget_lock_release_recursive>
 8010ea0:	2000      	movs	r0, #0
 8010ea2:	e7df      	b.n	8010e64 <__register_exitproc+0x34>
 8010ea4:	24014b18 	.word	0x24014b18
 8010ea8:	24014b50 	.word	0x24014b50
 8010eac:	24000140 	.word	0x24000140

08010eb0 <quorem>:
 8010eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb4:	6903      	ldr	r3, [r0, #16]
 8010eb6:	690c      	ldr	r4, [r1, #16]
 8010eb8:	42a3      	cmp	r3, r4
 8010eba:	4607      	mov	r7, r0
 8010ebc:	db7e      	blt.n	8010fbc <quorem+0x10c>
 8010ebe:	3c01      	subs	r4, #1
 8010ec0:	f101 0814 	add.w	r8, r1, #20
 8010ec4:	00a3      	lsls	r3, r4, #2
 8010ec6:	f100 0514 	add.w	r5, r0, #20
 8010eca:	9300      	str	r3, [sp, #0]
 8010ecc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ed0:	9301      	str	r3, [sp, #4]
 8010ed2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010ed6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010eda:	3301      	adds	r3, #1
 8010edc:	429a      	cmp	r2, r3
 8010ede:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010ee2:	fbb2 f6f3 	udiv	r6, r2, r3
 8010ee6:	d32e      	bcc.n	8010f46 <quorem+0x96>
 8010ee8:	f04f 0a00 	mov.w	sl, #0
 8010eec:	46c4      	mov	ip, r8
 8010eee:	46ae      	mov	lr, r5
 8010ef0:	46d3      	mov	fp, sl
 8010ef2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010ef6:	b298      	uxth	r0, r3
 8010ef8:	fb06 a000 	mla	r0, r6, r0, sl
 8010efc:	0c02      	lsrs	r2, r0, #16
 8010efe:	0c1b      	lsrs	r3, r3, #16
 8010f00:	fb06 2303 	mla	r3, r6, r3, r2
 8010f04:	f8de 2000 	ldr.w	r2, [lr]
 8010f08:	b280      	uxth	r0, r0
 8010f0a:	b292      	uxth	r2, r2
 8010f0c:	1a12      	subs	r2, r2, r0
 8010f0e:	445a      	add	r2, fp
 8010f10:	f8de 0000 	ldr.w	r0, [lr]
 8010f14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010f1e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010f22:	b292      	uxth	r2, r2
 8010f24:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010f28:	45e1      	cmp	r9, ip
 8010f2a:	f84e 2b04 	str.w	r2, [lr], #4
 8010f2e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010f32:	d2de      	bcs.n	8010ef2 <quorem+0x42>
 8010f34:	9b00      	ldr	r3, [sp, #0]
 8010f36:	58eb      	ldr	r3, [r5, r3]
 8010f38:	b92b      	cbnz	r3, 8010f46 <quorem+0x96>
 8010f3a:	9b01      	ldr	r3, [sp, #4]
 8010f3c:	3b04      	subs	r3, #4
 8010f3e:	429d      	cmp	r5, r3
 8010f40:	461a      	mov	r2, r3
 8010f42:	d32f      	bcc.n	8010fa4 <quorem+0xf4>
 8010f44:	613c      	str	r4, [r7, #16]
 8010f46:	4638      	mov	r0, r7
 8010f48:	f000 ffb6 	bl	8011eb8 <__mcmp>
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	db25      	blt.n	8010f9c <quorem+0xec>
 8010f50:	4629      	mov	r1, r5
 8010f52:	2000      	movs	r0, #0
 8010f54:	f858 2b04 	ldr.w	r2, [r8], #4
 8010f58:	f8d1 c000 	ldr.w	ip, [r1]
 8010f5c:	fa1f fe82 	uxth.w	lr, r2
 8010f60:	fa1f f38c 	uxth.w	r3, ip
 8010f64:	eba3 030e 	sub.w	r3, r3, lr
 8010f68:	4403      	add	r3, r0
 8010f6a:	0c12      	lsrs	r2, r2, #16
 8010f6c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010f70:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010f74:	b29b      	uxth	r3, r3
 8010f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f7a:	45c1      	cmp	r9, r8
 8010f7c:	f841 3b04 	str.w	r3, [r1], #4
 8010f80:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010f84:	d2e6      	bcs.n	8010f54 <quorem+0xa4>
 8010f86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f8e:	b922      	cbnz	r2, 8010f9a <quorem+0xea>
 8010f90:	3b04      	subs	r3, #4
 8010f92:	429d      	cmp	r5, r3
 8010f94:	461a      	mov	r2, r3
 8010f96:	d30b      	bcc.n	8010fb0 <quorem+0x100>
 8010f98:	613c      	str	r4, [r7, #16]
 8010f9a:	3601      	adds	r6, #1
 8010f9c:	4630      	mov	r0, r6
 8010f9e:	b003      	add	sp, #12
 8010fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fa4:	6812      	ldr	r2, [r2, #0]
 8010fa6:	3b04      	subs	r3, #4
 8010fa8:	2a00      	cmp	r2, #0
 8010faa:	d1cb      	bne.n	8010f44 <quorem+0x94>
 8010fac:	3c01      	subs	r4, #1
 8010fae:	e7c6      	b.n	8010f3e <quorem+0x8e>
 8010fb0:	6812      	ldr	r2, [r2, #0]
 8010fb2:	3b04      	subs	r3, #4
 8010fb4:	2a00      	cmp	r2, #0
 8010fb6:	d1ef      	bne.n	8010f98 <quorem+0xe8>
 8010fb8:	3c01      	subs	r4, #1
 8010fba:	e7ea      	b.n	8010f92 <quorem+0xe2>
 8010fbc:	2000      	movs	r0, #0
 8010fbe:	e7ee      	b.n	8010f9e <quorem+0xee>

08010fc0 <_dtoa_r>:
 8010fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc4:	ed2d 8b02 	vpush	{d8}
 8010fc8:	b091      	sub	sp, #68	@ 0x44
 8010fca:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010fce:	9107      	str	r1, [sp, #28]
 8010fd0:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8010fd2:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010fd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8010fd6:	ec55 4b10 	vmov	r4, r5, d0
 8010fda:	4681      	mov	r9, r0
 8010fdc:	930d      	str	r3, [sp, #52]	@ 0x34
 8010fde:	b149      	cbz	r1, 8010ff4 <_dtoa_r+0x34>
 8010fe0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010fe2:	604a      	str	r2, [r1, #4]
 8010fe4:	2301      	movs	r3, #1
 8010fe6:	4093      	lsls	r3, r2
 8010fe8:	608b      	str	r3, [r1, #8]
 8010fea:	f000 fd5e 	bl	8011aaa <_Bfree>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 8010ff4:	1e2b      	subs	r3, r5, #0
 8010ff6:	bfbb      	ittet	lt
 8010ff8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010ffc:	9303      	strlt	r3, [sp, #12]
 8010ffe:	2300      	movge	r3, #0
 8011000:	2201      	movlt	r2, #1
 8011002:	bfac      	ite	ge
 8011004:	6033      	strge	r3, [r6, #0]
 8011006:	6032      	strlt	r2, [r6, #0]
 8011008:	4b91      	ldr	r3, [pc, #580]	@ (8011250 <_dtoa_r+0x290>)
 801100a:	9e03      	ldr	r6, [sp, #12]
 801100c:	43b3      	bics	r3, r6
 801100e:	d114      	bne.n	801103a <_dtoa_r+0x7a>
 8011010:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011012:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011016:	6013      	str	r3, [r2, #0]
 8011018:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801101c:	4323      	orrs	r3, r4
 801101e:	f000 84df 	beq.w	80119e0 <_dtoa_r+0xa20>
 8011022:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011024:	4f8b      	ldr	r7, [pc, #556]	@ (8011254 <_dtoa_r+0x294>)
 8011026:	b113      	cbz	r3, 801102e <_dtoa_r+0x6e>
 8011028:	1cfb      	adds	r3, r7, #3
 801102a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801102c:	6013      	str	r3, [r2, #0]
 801102e:	4638      	mov	r0, r7
 8011030:	b011      	add	sp, #68	@ 0x44
 8011032:	ecbd 8b02 	vpop	{d8}
 8011036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801103a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801103e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011046:	d109      	bne.n	801105c <_dtoa_r+0x9c>
 8011048:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801104a:	2301      	movs	r3, #1
 801104c:	6013      	str	r3, [r2, #0]
 801104e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011050:	b113      	cbz	r3, 8011058 <_dtoa_r+0x98>
 8011052:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011054:	4b80      	ldr	r3, [pc, #512]	@ (8011258 <_dtoa_r+0x298>)
 8011056:	6013      	str	r3, [r2, #0]
 8011058:	4f80      	ldr	r7, [pc, #512]	@ (801125c <_dtoa_r+0x29c>)
 801105a:	e7e8      	b.n	801102e <_dtoa_r+0x6e>
 801105c:	aa0e      	add	r2, sp, #56	@ 0x38
 801105e:	a90f      	add	r1, sp, #60	@ 0x3c
 8011060:	4648      	mov	r0, r9
 8011062:	eeb0 0b48 	vmov.f64	d0, d8
 8011066:	f000 ffd7 	bl	8012018 <__d2b>
 801106a:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801106e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011070:	9001      	str	r0, [sp, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d045      	beq.n	8011102 <_dtoa_r+0x142>
 8011076:	eeb0 7b48 	vmov.f64	d7, d8
 801107a:	ee18 1a90 	vmov	r1, s17
 801107e:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011082:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8011086:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801108a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801108e:	2500      	movs	r5, #0
 8011090:	ee07 1a90 	vmov	s15, r1
 8011094:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8011098:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 8011238 <_dtoa_r+0x278>
 801109c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110a0:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8011240 <_dtoa_r+0x280>
 80110a4:	eea7 6b05 	vfma.f64	d6, d7, d5
 80110a8:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 8011248 <_dtoa_r+0x288>
 80110ac:	ee07 3a90 	vmov	s15, r3
 80110b0:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80110b4:	eeb0 7b46 	vmov.f64	d7, d6
 80110b8:	eea4 7b05 	vfma.f64	d7, d4, d5
 80110bc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80110c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80110c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c8:	ee16 8a90 	vmov	r8, s13
 80110cc:	d508      	bpl.n	80110e0 <_dtoa_r+0x120>
 80110ce:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80110d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80110d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110da:	bf18      	it	ne
 80110dc:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 80110e0:	f1b8 0f16 	cmp.w	r8, #22
 80110e4:	d82b      	bhi.n	801113e <_dtoa_r+0x17e>
 80110e6:	495e      	ldr	r1, [pc, #376]	@ (8011260 <_dtoa_r+0x2a0>)
 80110e8:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80110ec:	ed91 7b00 	vldr	d7, [r1]
 80110f0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80110f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f8:	d501      	bpl.n	80110fe <_dtoa_r+0x13e>
 80110fa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80110fe:	2100      	movs	r1, #0
 8011100:	e01e      	b.n	8011140 <_dtoa_r+0x180>
 8011102:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011104:	4413      	add	r3, r2
 8011106:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801110a:	2920      	cmp	r1, #32
 801110c:	bfc1      	itttt	gt
 801110e:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011112:	408e      	lslgt	r6, r1
 8011114:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8011118:	fa24 f101 	lsrgt.w	r1, r4, r1
 801111c:	bfd6      	itet	le
 801111e:	f1c1 0120 	rsble	r1, r1, #32
 8011122:	4331      	orrgt	r1, r6
 8011124:	fa04 f101 	lslle.w	r1, r4, r1
 8011128:	ee07 1a90 	vmov	s15, r1
 801112c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011130:	3b01      	subs	r3, #1
 8011132:	ee17 1a90 	vmov	r1, s15
 8011136:	2501      	movs	r5, #1
 8011138:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801113c:	e7a8      	b.n	8011090 <_dtoa_r+0xd0>
 801113e:	2101      	movs	r1, #1
 8011140:	1ad2      	subs	r2, r2, r3
 8011142:	1e53      	subs	r3, r2, #1
 8011144:	9306      	str	r3, [sp, #24]
 8011146:	bf45      	ittet	mi
 8011148:	f1c2 0301 	rsbmi	r3, r2, #1
 801114c:	9305      	strmi	r3, [sp, #20]
 801114e:	2300      	movpl	r3, #0
 8011150:	2300      	movmi	r3, #0
 8011152:	bf4c      	ite	mi
 8011154:	9306      	strmi	r3, [sp, #24]
 8011156:	9305      	strpl	r3, [sp, #20]
 8011158:	f1b8 0f00 	cmp.w	r8, #0
 801115c:	910c      	str	r1, [sp, #48]	@ 0x30
 801115e:	db18      	blt.n	8011192 <_dtoa_r+0x1d2>
 8011160:	9b06      	ldr	r3, [sp, #24]
 8011162:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8011166:	4443      	add	r3, r8
 8011168:	9306      	str	r3, [sp, #24]
 801116a:	2300      	movs	r3, #0
 801116c:	9a07      	ldr	r2, [sp, #28]
 801116e:	2a09      	cmp	r2, #9
 8011170:	d84a      	bhi.n	8011208 <_dtoa_r+0x248>
 8011172:	2a05      	cmp	r2, #5
 8011174:	bfc4      	itt	gt
 8011176:	3a04      	subgt	r2, #4
 8011178:	9207      	strgt	r2, [sp, #28]
 801117a:	9a07      	ldr	r2, [sp, #28]
 801117c:	f1a2 0202 	sub.w	r2, r2, #2
 8011180:	bfcc      	ite	gt
 8011182:	2400      	movgt	r4, #0
 8011184:	2401      	movle	r4, #1
 8011186:	2a03      	cmp	r2, #3
 8011188:	d849      	bhi.n	801121e <_dtoa_r+0x25e>
 801118a:	e8df f002 	tbb	[pc, r2]
 801118e:	2f0b      	.short	0x2f0b
 8011190:	3b2d      	.short	0x3b2d
 8011192:	9b05      	ldr	r3, [sp, #20]
 8011194:	2200      	movs	r2, #0
 8011196:	eba3 0308 	sub.w	r3, r3, r8
 801119a:	9305      	str	r3, [sp, #20]
 801119c:	920a      	str	r2, [sp, #40]	@ 0x28
 801119e:	f1c8 0300 	rsb	r3, r8, #0
 80111a2:	e7e3      	b.n	801116c <_dtoa_r+0x1ac>
 80111a4:	2200      	movs	r2, #0
 80111a6:	9208      	str	r2, [sp, #32]
 80111a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111aa:	2a00      	cmp	r2, #0
 80111ac:	dc3a      	bgt.n	8011224 <_dtoa_r+0x264>
 80111ae:	f04f 0b01 	mov.w	fp, #1
 80111b2:	46da      	mov	sl, fp
 80111b4:	465a      	mov	r2, fp
 80111b6:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80111ba:	2100      	movs	r1, #0
 80111bc:	2004      	movs	r0, #4
 80111be:	f100 0614 	add.w	r6, r0, #20
 80111c2:	4296      	cmp	r6, r2
 80111c4:	d933      	bls.n	801122e <_dtoa_r+0x26e>
 80111c6:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 80111ca:	4648      	mov	r0, r9
 80111cc:	9304      	str	r3, [sp, #16]
 80111ce:	f000 fc47 	bl	8011a60 <_Balloc>
 80111d2:	9b04      	ldr	r3, [sp, #16]
 80111d4:	4607      	mov	r7, r0
 80111d6:	2800      	cmp	r0, #0
 80111d8:	d148      	bne.n	801126c <_dtoa_r+0x2ac>
 80111da:	4b22      	ldr	r3, [pc, #136]	@ (8011264 <_dtoa_r+0x2a4>)
 80111dc:	4602      	mov	r2, r0
 80111de:	f240 11af 	movw	r1, #431	@ 0x1af
 80111e2:	4821      	ldr	r0, [pc, #132]	@ (8011268 <_dtoa_r+0x2a8>)
 80111e4:	f001 fa88 	bl	80126f8 <__assert_func>
 80111e8:	2201      	movs	r2, #1
 80111ea:	e7dc      	b.n	80111a6 <_dtoa_r+0x1e6>
 80111ec:	2200      	movs	r2, #0
 80111ee:	9208      	str	r2, [sp, #32]
 80111f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111f2:	eb08 0b02 	add.w	fp, r8, r2
 80111f6:	f10b 0a01 	add.w	sl, fp, #1
 80111fa:	4652      	mov	r2, sl
 80111fc:	2a01      	cmp	r2, #1
 80111fe:	bfb8      	it	lt
 8011200:	2201      	movlt	r2, #1
 8011202:	e7da      	b.n	80111ba <_dtoa_r+0x1fa>
 8011204:	2201      	movs	r2, #1
 8011206:	e7f2      	b.n	80111ee <_dtoa_r+0x22e>
 8011208:	2401      	movs	r4, #1
 801120a:	2200      	movs	r2, #0
 801120c:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011210:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011214:	2100      	movs	r1, #0
 8011216:	46da      	mov	sl, fp
 8011218:	2212      	movs	r2, #18
 801121a:	9109      	str	r1, [sp, #36]	@ 0x24
 801121c:	e7cd      	b.n	80111ba <_dtoa_r+0x1fa>
 801121e:	2201      	movs	r2, #1
 8011220:	9208      	str	r2, [sp, #32]
 8011222:	e7f5      	b.n	8011210 <_dtoa_r+0x250>
 8011224:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8011228:	46da      	mov	sl, fp
 801122a:	465a      	mov	r2, fp
 801122c:	e7c5      	b.n	80111ba <_dtoa_r+0x1fa>
 801122e:	3101      	adds	r1, #1
 8011230:	0040      	lsls	r0, r0, #1
 8011232:	e7c4      	b.n	80111be <_dtoa_r+0x1fe>
 8011234:	f3af 8000 	nop.w
 8011238:	636f4361 	.word	0x636f4361
 801123c:	3fd287a7 	.word	0x3fd287a7
 8011240:	8b60c8b3 	.word	0x8b60c8b3
 8011244:	3fc68a28 	.word	0x3fc68a28
 8011248:	509f79fb 	.word	0x509f79fb
 801124c:	3fd34413 	.word	0x3fd34413
 8011250:	7ff00000 	.word	0x7ff00000
 8011254:	0801407b 	.word	0x0801407b
 8011258:	08014027 	.word	0x08014027
 801125c:	08014026 	.word	0x08014026
 8011260:	08014178 	.word	0x08014178
 8011264:	0801407f 	.word	0x0801407f
 8011268:	08014090 	.word	0x08014090
 801126c:	f1ba 0f0e 	cmp.w	sl, #14
 8011270:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 8011274:	d86f      	bhi.n	8011356 <_dtoa_r+0x396>
 8011276:	2c00      	cmp	r4, #0
 8011278:	d06d      	beq.n	8011356 <_dtoa_r+0x396>
 801127a:	f1b8 0f00 	cmp.w	r8, #0
 801127e:	f340 80c2 	ble.w	8011406 <_dtoa_r+0x446>
 8011282:	4aca      	ldr	r2, [pc, #808]	@ (80115ac <_dtoa_r+0x5ec>)
 8011284:	f008 010f 	and.w	r1, r8, #15
 8011288:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801128c:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8011290:	ed92 7b00 	vldr	d7, [r2]
 8011294:	ea4f 1128 	mov.w	r1, r8, asr #4
 8011298:	f000 80a9 	beq.w	80113ee <_dtoa_r+0x42e>
 801129c:	4ac4      	ldr	r2, [pc, #784]	@ (80115b0 <_dtoa_r+0x5f0>)
 801129e:	ed92 6b08 	vldr	d6, [r2, #32]
 80112a2:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80112a6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80112aa:	f001 010f 	and.w	r1, r1, #15
 80112ae:	2203      	movs	r2, #3
 80112b0:	48bf      	ldr	r0, [pc, #764]	@ (80115b0 <_dtoa_r+0x5f0>)
 80112b2:	2900      	cmp	r1, #0
 80112b4:	f040 809d 	bne.w	80113f2 <_dtoa_r+0x432>
 80112b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80112bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80112c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80112c4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80112c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80112ca:	2900      	cmp	r1, #0
 80112cc:	f000 80c1 	beq.w	8011452 <_dtoa_r+0x492>
 80112d0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80112d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80112d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112dc:	f140 80b9 	bpl.w	8011452 <_dtoa_r+0x492>
 80112e0:	f1ba 0f00 	cmp.w	sl, #0
 80112e4:	f000 80b5 	beq.w	8011452 <_dtoa_r+0x492>
 80112e8:	f1bb 0f00 	cmp.w	fp, #0
 80112ec:	dd31      	ble.n	8011352 <_dtoa_r+0x392>
 80112ee:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80112f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80112f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80112fa:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80112fe:	9104      	str	r1, [sp, #16]
 8011300:	3201      	adds	r2, #1
 8011302:	465c      	mov	r4, fp
 8011304:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011308:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801130c:	ee07 2a90 	vmov	s15, r2
 8011310:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011314:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011318:	ee15 2a90 	vmov	r2, s11
 801131c:	ec51 0b15 	vmov	r0, r1, d5
 8011320:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8011324:	2c00      	cmp	r4, #0
 8011326:	f040 8098 	bne.w	801145a <_dtoa_r+0x49a>
 801132a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801132e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011332:	ec41 0b17 	vmov	d7, r0, r1
 8011336:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133e:	f300 8260 	bgt.w	8011802 <_dtoa_r+0x842>
 8011342:	eeb1 7b47 	vneg.f64	d7, d7
 8011346:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801134e:	f100 80f5 	bmi.w	801153c <_dtoa_r+0x57c>
 8011352:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011356:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011358:	2a00      	cmp	r2, #0
 801135a:	f2c0 812b 	blt.w	80115b4 <_dtoa_r+0x5f4>
 801135e:	f1b8 0f0e 	cmp.w	r8, #14
 8011362:	f300 8127 	bgt.w	80115b4 <_dtoa_r+0x5f4>
 8011366:	4b91      	ldr	r3, [pc, #580]	@ (80115ac <_dtoa_r+0x5ec>)
 8011368:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801136c:	ed93 6b00 	vldr	d6, [r3]
 8011370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011372:	2b00      	cmp	r3, #0
 8011374:	da03      	bge.n	801137e <_dtoa_r+0x3be>
 8011376:	f1ba 0f00 	cmp.w	sl, #0
 801137a:	f340 80d2 	ble.w	8011522 <_dtoa_r+0x562>
 801137e:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8011382:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011386:	463e      	mov	r6, r7
 8011388:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801138c:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011390:	ee15 3a10 	vmov	r3, s10
 8011394:	3330      	adds	r3, #48	@ 0x30
 8011396:	f806 3b01 	strb.w	r3, [r6], #1
 801139a:	1bf3      	subs	r3, r6, r7
 801139c:	459a      	cmp	sl, r3
 801139e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80113a2:	eea3 7b46 	vfms.f64	d7, d3, d6
 80113a6:	f040 80f8 	bne.w	801159a <_dtoa_r+0x5da>
 80113aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80113ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80113b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b6:	f300 80dd 	bgt.w	8011574 <_dtoa_r+0x5b4>
 80113ba:	eeb4 7b46 	vcmp.f64	d7, d6
 80113be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c2:	d104      	bne.n	80113ce <_dtoa_r+0x40e>
 80113c4:	ee15 3a10 	vmov	r3, s10
 80113c8:	07db      	lsls	r3, r3, #31
 80113ca:	f100 80d3 	bmi.w	8011574 <_dtoa_r+0x5b4>
 80113ce:	9901      	ldr	r1, [sp, #4]
 80113d0:	4648      	mov	r0, r9
 80113d2:	f000 fb6a 	bl	8011aaa <_Bfree>
 80113d6:	2300      	movs	r3, #0
 80113d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80113da:	7033      	strb	r3, [r6, #0]
 80113dc:	f108 0301 	add.w	r3, r8, #1
 80113e0:	6013      	str	r3, [r2, #0]
 80113e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	f43f ae22 	beq.w	801102e <_dtoa_r+0x6e>
 80113ea:	601e      	str	r6, [r3, #0]
 80113ec:	e61f      	b.n	801102e <_dtoa_r+0x6e>
 80113ee:	2202      	movs	r2, #2
 80113f0:	e75e      	b.n	80112b0 <_dtoa_r+0x2f0>
 80113f2:	07cc      	lsls	r4, r1, #31
 80113f4:	d504      	bpl.n	8011400 <_dtoa_r+0x440>
 80113f6:	ed90 6b00 	vldr	d6, [r0]
 80113fa:	3201      	adds	r2, #1
 80113fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011400:	1049      	asrs	r1, r1, #1
 8011402:	3008      	adds	r0, #8
 8011404:	e755      	b.n	80112b2 <_dtoa_r+0x2f2>
 8011406:	d022      	beq.n	801144e <_dtoa_r+0x48e>
 8011408:	f1c8 0100 	rsb	r1, r8, #0
 801140c:	4a67      	ldr	r2, [pc, #412]	@ (80115ac <_dtoa_r+0x5ec>)
 801140e:	f001 000f 	and.w	r0, r1, #15
 8011412:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011416:	ed92 7b00 	vldr	d7, [r2]
 801141a:	ee28 7b07 	vmul.f64	d7, d8, d7
 801141e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011422:	4863      	ldr	r0, [pc, #396]	@ (80115b0 <_dtoa_r+0x5f0>)
 8011424:	1109      	asrs	r1, r1, #4
 8011426:	2400      	movs	r4, #0
 8011428:	2202      	movs	r2, #2
 801142a:	b929      	cbnz	r1, 8011438 <_dtoa_r+0x478>
 801142c:	2c00      	cmp	r4, #0
 801142e:	f43f af49 	beq.w	80112c4 <_dtoa_r+0x304>
 8011432:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011436:	e745      	b.n	80112c4 <_dtoa_r+0x304>
 8011438:	07ce      	lsls	r6, r1, #31
 801143a:	d505      	bpl.n	8011448 <_dtoa_r+0x488>
 801143c:	ed90 6b00 	vldr	d6, [r0]
 8011440:	3201      	adds	r2, #1
 8011442:	2401      	movs	r4, #1
 8011444:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011448:	1049      	asrs	r1, r1, #1
 801144a:	3008      	adds	r0, #8
 801144c:	e7ed      	b.n	801142a <_dtoa_r+0x46a>
 801144e:	2202      	movs	r2, #2
 8011450:	e738      	b.n	80112c4 <_dtoa_r+0x304>
 8011452:	f8cd 8010 	str.w	r8, [sp, #16]
 8011456:	4654      	mov	r4, sl
 8011458:	e754      	b.n	8011304 <_dtoa_r+0x344>
 801145a:	4a54      	ldr	r2, [pc, #336]	@ (80115ac <_dtoa_r+0x5ec>)
 801145c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8011460:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011464:	9a08      	ldr	r2, [sp, #32]
 8011466:	ec41 0b17 	vmov	d7, r0, r1
 801146a:	443c      	add	r4, r7
 801146c:	b34a      	cbz	r2, 80114c2 <_dtoa_r+0x502>
 801146e:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8011472:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8011476:	463e      	mov	r6, r7
 8011478:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801147c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8011480:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011484:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011488:	ee14 2a90 	vmov	r2, s9
 801148c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011490:	3230      	adds	r2, #48	@ 0x30
 8011492:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011496:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801149e:	f806 2b01 	strb.w	r2, [r6], #1
 80114a2:	d438      	bmi.n	8011516 <_dtoa_r+0x556>
 80114a4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80114a8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80114ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114b0:	d462      	bmi.n	8011578 <_dtoa_r+0x5b8>
 80114b2:	42a6      	cmp	r6, r4
 80114b4:	f43f af4d 	beq.w	8011352 <_dtoa_r+0x392>
 80114b8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80114bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80114c0:	e7e0      	b.n	8011484 <_dtoa_r+0x4c4>
 80114c2:	4621      	mov	r1, r4
 80114c4:	463e      	mov	r6, r7
 80114c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80114ca:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80114ce:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80114d2:	ee14 2a90 	vmov	r2, s9
 80114d6:	3230      	adds	r2, #48	@ 0x30
 80114d8:	f806 2b01 	strb.w	r2, [r6], #1
 80114dc:	42a6      	cmp	r6, r4
 80114de:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80114e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80114e6:	d119      	bne.n	801151c <_dtoa_r+0x55c>
 80114e8:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80114ec:	ee37 4b05 	vadd.f64	d4, d7, d5
 80114f0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80114f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f8:	dc3e      	bgt.n	8011578 <_dtoa_r+0x5b8>
 80114fa:	ee35 5b47 	vsub.f64	d5, d5, d7
 80114fe:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011506:	f57f af24 	bpl.w	8011352 <_dtoa_r+0x392>
 801150a:	460e      	mov	r6, r1
 801150c:	3901      	subs	r1, #1
 801150e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011512:	2b30      	cmp	r3, #48	@ 0x30
 8011514:	d0f9      	beq.n	801150a <_dtoa_r+0x54a>
 8011516:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801151a:	e758      	b.n	80113ce <_dtoa_r+0x40e>
 801151c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011520:	e7d5      	b.n	80114ce <_dtoa_r+0x50e>
 8011522:	d10b      	bne.n	801153c <_dtoa_r+0x57c>
 8011524:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011528:	ee26 6b07 	vmul.f64	d6, d6, d7
 801152c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011530:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011538:	f2c0 8160 	blt.w	80117fc <_dtoa_r+0x83c>
 801153c:	2400      	movs	r4, #0
 801153e:	4625      	mov	r5, r4
 8011540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011542:	43db      	mvns	r3, r3
 8011544:	9304      	str	r3, [sp, #16]
 8011546:	463e      	mov	r6, r7
 8011548:	f04f 0800 	mov.w	r8, #0
 801154c:	4621      	mov	r1, r4
 801154e:	4648      	mov	r0, r9
 8011550:	f000 faab 	bl	8011aaa <_Bfree>
 8011554:	2d00      	cmp	r5, #0
 8011556:	d0de      	beq.n	8011516 <_dtoa_r+0x556>
 8011558:	f1b8 0f00 	cmp.w	r8, #0
 801155c:	d005      	beq.n	801156a <_dtoa_r+0x5aa>
 801155e:	45a8      	cmp	r8, r5
 8011560:	d003      	beq.n	801156a <_dtoa_r+0x5aa>
 8011562:	4641      	mov	r1, r8
 8011564:	4648      	mov	r0, r9
 8011566:	f000 faa0 	bl	8011aaa <_Bfree>
 801156a:	4629      	mov	r1, r5
 801156c:	4648      	mov	r0, r9
 801156e:	f000 fa9c 	bl	8011aaa <_Bfree>
 8011572:	e7d0      	b.n	8011516 <_dtoa_r+0x556>
 8011574:	f8cd 8010 	str.w	r8, [sp, #16]
 8011578:	4633      	mov	r3, r6
 801157a:	461e      	mov	r6, r3
 801157c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011580:	2a39      	cmp	r2, #57	@ 0x39
 8011582:	d106      	bne.n	8011592 <_dtoa_r+0x5d2>
 8011584:	429f      	cmp	r7, r3
 8011586:	d1f8      	bne.n	801157a <_dtoa_r+0x5ba>
 8011588:	9a04      	ldr	r2, [sp, #16]
 801158a:	3201      	adds	r2, #1
 801158c:	9204      	str	r2, [sp, #16]
 801158e:	2230      	movs	r2, #48	@ 0x30
 8011590:	703a      	strb	r2, [r7, #0]
 8011592:	781a      	ldrb	r2, [r3, #0]
 8011594:	3201      	adds	r2, #1
 8011596:	701a      	strb	r2, [r3, #0]
 8011598:	e7bd      	b.n	8011516 <_dtoa_r+0x556>
 801159a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801159e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80115a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115a6:	f47f aeef 	bne.w	8011388 <_dtoa_r+0x3c8>
 80115aa:	e710      	b.n	80113ce <_dtoa_r+0x40e>
 80115ac:	08014178 	.word	0x08014178
 80115b0:	08014150 	.word	0x08014150
 80115b4:	9908      	ldr	r1, [sp, #32]
 80115b6:	2900      	cmp	r1, #0
 80115b8:	f000 80e3 	beq.w	8011782 <_dtoa_r+0x7c2>
 80115bc:	9907      	ldr	r1, [sp, #28]
 80115be:	2901      	cmp	r1, #1
 80115c0:	f300 80c8 	bgt.w	8011754 <_dtoa_r+0x794>
 80115c4:	2d00      	cmp	r5, #0
 80115c6:	f000 80c1 	beq.w	801174c <_dtoa_r+0x78c>
 80115ca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80115ce:	9e05      	ldr	r6, [sp, #20]
 80115d0:	461c      	mov	r4, r3
 80115d2:	9304      	str	r3, [sp, #16]
 80115d4:	9b05      	ldr	r3, [sp, #20]
 80115d6:	4413      	add	r3, r2
 80115d8:	9305      	str	r3, [sp, #20]
 80115da:	9b06      	ldr	r3, [sp, #24]
 80115dc:	2101      	movs	r1, #1
 80115de:	4413      	add	r3, r2
 80115e0:	4648      	mov	r0, r9
 80115e2:	9306      	str	r3, [sp, #24]
 80115e4:	f000 fafc 	bl	8011be0 <__i2b>
 80115e8:	9b04      	ldr	r3, [sp, #16]
 80115ea:	4605      	mov	r5, r0
 80115ec:	b166      	cbz	r6, 8011608 <_dtoa_r+0x648>
 80115ee:	9a06      	ldr	r2, [sp, #24]
 80115f0:	2a00      	cmp	r2, #0
 80115f2:	dd09      	ble.n	8011608 <_dtoa_r+0x648>
 80115f4:	42b2      	cmp	r2, r6
 80115f6:	9905      	ldr	r1, [sp, #20]
 80115f8:	bfa8      	it	ge
 80115fa:	4632      	movge	r2, r6
 80115fc:	1a89      	subs	r1, r1, r2
 80115fe:	9105      	str	r1, [sp, #20]
 8011600:	9906      	ldr	r1, [sp, #24]
 8011602:	1ab6      	subs	r6, r6, r2
 8011604:	1a8a      	subs	r2, r1, r2
 8011606:	9206      	str	r2, [sp, #24]
 8011608:	b1fb      	cbz	r3, 801164a <_dtoa_r+0x68a>
 801160a:	9a08      	ldr	r2, [sp, #32]
 801160c:	2a00      	cmp	r2, #0
 801160e:	f000 80bc 	beq.w	801178a <_dtoa_r+0x7ca>
 8011612:	b19c      	cbz	r4, 801163c <_dtoa_r+0x67c>
 8011614:	4629      	mov	r1, r5
 8011616:	4622      	mov	r2, r4
 8011618:	4648      	mov	r0, r9
 801161a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801161c:	f000 fba0 	bl	8011d60 <__pow5mult>
 8011620:	9a01      	ldr	r2, [sp, #4]
 8011622:	4601      	mov	r1, r0
 8011624:	4605      	mov	r5, r0
 8011626:	4648      	mov	r0, r9
 8011628:	f000 faf0 	bl	8011c0c <__multiply>
 801162c:	9901      	ldr	r1, [sp, #4]
 801162e:	9004      	str	r0, [sp, #16]
 8011630:	4648      	mov	r0, r9
 8011632:	f000 fa3a 	bl	8011aaa <_Bfree>
 8011636:	9a04      	ldr	r2, [sp, #16]
 8011638:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801163a:	9201      	str	r2, [sp, #4]
 801163c:	1b1a      	subs	r2, r3, r4
 801163e:	d004      	beq.n	801164a <_dtoa_r+0x68a>
 8011640:	9901      	ldr	r1, [sp, #4]
 8011642:	4648      	mov	r0, r9
 8011644:	f000 fb8c 	bl	8011d60 <__pow5mult>
 8011648:	9001      	str	r0, [sp, #4]
 801164a:	2101      	movs	r1, #1
 801164c:	4648      	mov	r0, r9
 801164e:	f000 fac7 	bl	8011be0 <__i2b>
 8011652:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011654:	4604      	mov	r4, r0
 8011656:	2b00      	cmp	r3, #0
 8011658:	f000 81cb 	beq.w	80119f2 <_dtoa_r+0xa32>
 801165c:	461a      	mov	r2, r3
 801165e:	4601      	mov	r1, r0
 8011660:	4648      	mov	r0, r9
 8011662:	f000 fb7d 	bl	8011d60 <__pow5mult>
 8011666:	9b07      	ldr	r3, [sp, #28]
 8011668:	2b01      	cmp	r3, #1
 801166a:	4604      	mov	r4, r0
 801166c:	f300 8095 	bgt.w	801179a <_dtoa_r+0x7da>
 8011670:	9b02      	ldr	r3, [sp, #8]
 8011672:	2b00      	cmp	r3, #0
 8011674:	f040 808b 	bne.w	801178e <_dtoa_r+0x7ce>
 8011678:	9b03      	ldr	r3, [sp, #12]
 801167a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801167e:	2a00      	cmp	r2, #0
 8011680:	f040 8087 	bne.w	8011792 <_dtoa_r+0x7d2>
 8011684:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011688:	0d12      	lsrs	r2, r2, #20
 801168a:	0512      	lsls	r2, r2, #20
 801168c:	2a00      	cmp	r2, #0
 801168e:	f000 8082 	beq.w	8011796 <_dtoa_r+0x7d6>
 8011692:	9b05      	ldr	r3, [sp, #20]
 8011694:	3301      	adds	r3, #1
 8011696:	9305      	str	r3, [sp, #20]
 8011698:	9b06      	ldr	r3, [sp, #24]
 801169a:	3301      	adds	r3, #1
 801169c:	9306      	str	r3, [sp, #24]
 801169e:	2301      	movs	r3, #1
 80116a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80116a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f000 81aa 	beq.w	80119fe <_dtoa_r+0xa3e>
 80116aa:	6922      	ldr	r2, [r4, #16]
 80116ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80116b0:	6910      	ldr	r0, [r2, #16]
 80116b2:	f000 fa49 	bl	8011b48 <__hi0bits>
 80116b6:	f1c0 0020 	rsb	r0, r0, #32
 80116ba:	9b06      	ldr	r3, [sp, #24]
 80116bc:	4418      	add	r0, r3
 80116be:	f010 001f 	ands.w	r0, r0, #31
 80116c2:	d076      	beq.n	80117b2 <_dtoa_r+0x7f2>
 80116c4:	f1c0 0220 	rsb	r2, r0, #32
 80116c8:	2a04      	cmp	r2, #4
 80116ca:	dd69      	ble.n	80117a0 <_dtoa_r+0x7e0>
 80116cc:	9b05      	ldr	r3, [sp, #20]
 80116ce:	f1c0 001c 	rsb	r0, r0, #28
 80116d2:	4403      	add	r3, r0
 80116d4:	9305      	str	r3, [sp, #20]
 80116d6:	9b06      	ldr	r3, [sp, #24]
 80116d8:	4406      	add	r6, r0
 80116da:	4403      	add	r3, r0
 80116dc:	9306      	str	r3, [sp, #24]
 80116de:	9b05      	ldr	r3, [sp, #20]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	dd05      	ble.n	80116f0 <_dtoa_r+0x730>
 80116e4:	9901      	ldr	r1, [sp, #4]
 80116e6:	461a      	mov	r2, r3
 80116e8:	4648      	mov	r0, r9
 80116ea:	f000 fb79 	bl	8011de0 <__lshift>
 80116ee:	9001      	str	r0, [sp, #4]
 80116f0:	9b06      	ldr	r3, [sp, #24]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	dd05      	ble.n	8011702 <_dtoa_r+0x742>
 80116f6:	4621      	mov	r1, r4
 80116f8:	461a      	mov	r2, r3
 80116fa:	4648      	mov	r0, r9
 80116fc:	f000 fb70 	bl	8011de0 <__lshift>
 8011700:	4604      	mov	r4, r0
 8011702:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011704:	2b00      	cmp	r3, #0
 8011706:	d056      	beq.n	80117b6 <_dtoa_r+0x7f6>
 8011708:	9801      	ldr	r0, [sp, #4]
 801170a:	4621      	mov	r1, r4
 801170c:	f000 fbd4 	bl	8011eb8 <__mcmp>
 8011710:	2800      	cmp	r0, #0
 8011712:	da50      	bge.n	80117b6 <_dtoa_r+0x7f6>
 8011714:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011718:	9304      	str	r3, [sp, #16]
 801171a:	9901      	ldr	r1, [sp, #4]
 801171c:	2300      	movs	r3, #0
 801171e:	220a      	movs	r2, #10
 8011720:	4648      	mov	r0, r9
 8011722:	f000 f9cb 	bl	8011abc <__multadd>
 8011726:	9b08      	ldr	r3, [sp, #32]
 8011728:	9001      	str	r0, [sp, #4]
 801172a:	2b00      	cmp	r3, #0
 801172c:	f000 8169 	beq.w	8011a02 <_dtoa_r+0xa42>
 8011730:	4629      	mov	r1, r5
 8011732:	2300      	movs	r3, #0
 8011734:	220a      	movs	r2, #10
 8011736:	4648      	mov	r0, r9
 8011738:	f000 f9c0 	bl	8011abc <__multadd>
 801173c:	f1bb 0f00 	cmp.w	fp, #0
 8011740:	4605      	mov	r5, r0
 8011742:	dc64      	bgt.n	801180e <_dtoa_r+0x84e>
 8011744:	9b07      	ldr	r3, [sp, #28]
 8011746:	2b02      	cmp	r3, #2
 8011748:	dc3e      	bgt.n	80117c8 <_dtoa_r+0x808>
 801174a:	e060      	b.n	801180e <_dtoa_r+0x84e>
 801174c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801174e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011752:	e73c      	b.n	80115ce <_dtoa_r+0x60e>
 8011754:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8011758:	42a3      	cmp	r3, r4
 801175a:	bfbf      	itttt	lt
 801175c:	1ae2      	sublt	r2, r4, r3
 801175e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011760:	189b      	addlt	r3, r3, r2
 8011762:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8011764:	bfae      	itee	ge
 8011766:	1b1c      	subge	r4, r3, r4
 8011768:	4623      	movlt	r3, r4
 801176a:	2400      	movlt	r4, #0
 801176c:	f1ba 0f00 	cmp.w	sl, #0
 8011770:	bfb5      	itete	lt
 8011772:	9a05      	ldrlt	r2, [sp, #20]
 8011774:	9e05      	ldrge	r6, [sp, #20]
 8011776:	eba2 060a 	sublt.w	r6, r2, sl
 801177a:	4652      	movge	r2, sl
 801177c:	bfb8      	it	lt
 801177e:	2200      	movlt	r2, #0
 8011780:	e727      	b.n	80115d2 <_dtoa_r+0x612>
 8011782:	9e05      	ldr	r6, [sp, #20]
 8011784:	9d08      	ldr	r5, [sp, #32]
 8011786:	461c      	mov	r4, r3
 8011788:	e730      	b.n	80115ec <_dtoa_r+0x62c>
 801178a:	461a      	mov	r2, r3
 801178c:	e758      	b.n	8011640 <_dtoa_r+0x680>
 801178e:	2300      	movs	r3, #0
 8011790:	e786      	b.n	80116a0 <_dtoa_r+0x6e0>
 8011792:	9b02      	ldr	r3, [sp, #8]
 8011794:	e784      	b.n	80116a0 <_dtoa_r+0x6e0>
 8011796:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011798:	e783      	b.n	80116a2 <_dtoa_r+0x6e2>
 801179a:	2300      	movs	r3, #0
 801179c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801179e:	e784      	b.n	80116aa <_dtoa_r+0x6ea>
 80117a0:	d09d      	beq.n	80116de <_dtoa_r+0x71e>
 80117a2:	9b05      	ldr	r3, [sp, #20]
 80117a4:	321c      	adds	r2, #28
 80117a6:	4413      	add	r3, r2
 80117a8:	9305      	str	r3, [sp, #20]
 80117aa:	9b06      	ldr	r3, [sp, #24]
 80117ac:	4416      	add	r6, r2
 80117ae:	4413      	add	r3, r2
 80117b0:	e794      	b.n	80116dc <_dtoa_r+0x71c>
 80117b2:	4602      	mov	r2, r0
 80117b4:	e7f5      	b.n	80117a2 <_dtoa_r+0x7e2>
 80117b6:	f1ba 0f00 	cmp.w	sl, #0
 80117ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80117be:	46d3      	mov	fp, sl
 80117c0:	dc21      	bgt.n	8011806 <_dtoa_r+0x846>
 80117c2:	9b07      	ldr	r3, [sp, #28]
 80117c4:	2b02      	cmp	r3, #2
 80117c6:	dd1e      	ble.n	8011806 <_dtoa_r+0x846>
 80117c8:	f1bb 0f00 	cmp.w	fp, #0
 80117cc:	f47f aeb8 	bne.w	8011540 <_dtoa_r+0x580>
 80117d0:	4621      	mov	r1, r4
 80117d2:	465b      	mov	r3, fp
 80117d4:	2205      	movs	r2, #5
 80117d6:	4648      	mov	r0, r9
 80117d8:	f000 f970 	bl	8011abc <__multadd>
 80117dc:	4601      	mov	r1, r0
 80117de:	4604      	mov	r4, r0
 80117e0:	9801      	ldr	r0, [sp, #4]
 80117e2:	f000 fb69 	bl	8011eb8 <__mcmp>
 80117e6:	2800      	cmp	r0, #0
 80117e8:	f77f aeaa 	ble.w	8011540 <_dtoa_r+0x580>
 80117ec:	463e      	mov	r6, r7
 80117ee:	2331      	movs	r3, #49	@ 0x31
 80117f0:	f806 3b01 	strb.w	r3, [r6], #1
 80117f4:	9b04      	ldr	r3, [sp, #16]
 80117f6:	3301      	adds	r3, #1
 80117f8:	9304      	str	r3, [sp, #16]
 80117fa:	e6a5      	b.n	8011548 <_dtoa_r+0x588>
 80117fc:	f8cd 8010 	str.w	r8, [sp, #16]
 8011800:	4654      	mov	r4, sl
 8011802:	4625      	mov	r5, r4
 8011804:	e7f2      	b.n	80117ec <_dtoa_r+0x82c>
 8011806:	9b08      	ldr	r3, [sp, #32]
 8011808:	2b00      	cmp	r3, #0
 801180a:	f000 80fe 	beq.w	8011a0a <_dtoa_r+0xa4a>
 801180e:	2e00      	cmp	r6, #0
 8011810:	dd05      	ble.n	801181e <_dtoa_r+0x85e>
 8011812:	4629      	mov	r1, r5
 8011814:	4632      	mov	r2, r6
 8011816:	4648      	mov	r0, r9
 8011818:	f000 fae2 	bl	8011de0 <__lshift>
 801181c:	4605      	mov	r5, r0
 801181e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011820:	2b00      	cmp	r3, #0
 8011822:	d057      	beq.n	80118d4 <_dtoa_r+0x914>
 8011824:	6869      	ldr	r1, [r5, #4]
 8011826:	4648      	mov	r0, r9
 8011828:	f000 f91a 	bl	8011a60 <_Balloc>
 801182c:	4606      	mov	r6, r0
 801182e:	b920      	cbnz	r0, 801183a <_dtoa_r+0x87a>
 8011830:	4b80      	ldr	r3, [pc, #512]	@ (8011a34 <_dtoa_r+0xa74>)
 8011832:	4602      	mov	r2, r0
 8011834:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011838:	e4d3      	b.n	80111e2 <_dtoa_r+0x222>
 801183a:	692a      	ldr	r2, [r5, #16]
 801183c:	3202      	adds	r2, #2
 801183e:	0092      	lsls	r2, r2, #2
 8011840:	f105 010c 	add.w	r1, r5, #12
 8011844:	300c      	adds	r0, #12
 8011846:	f7ff faad 	bl	8010da4 <memcpy>
 801184a:	2201      	movs	r2, #1
 801184c:	4631      	mov	r1, r6
 801184e:	4648      	mov	r0, r9
 8011850:	f000 fac6 	bl	8011de0 <__lshift>
 8011854:	1c7b      	adds	r3, r7, #1
 8011856:	9305      	str	r3, [sp, #20]
 8011858:	eb07 030b 	add.w	r3, r7, fp
 801185c:	9309      	str	r3, [sp, #36]	@ 0x24
 801185e:	9b02      	ldr	r3, [sp, #8]
 8011860:	f003 0301 	and.w	r3, r3, #1
 8011864:	46a8      	mov	r8, r5
 8011866:	9308      	str	r3, [sp, #32]
 8011868:	4605      	mov	r5, r0
 801186a:	9b05      	ldr	r3, [sp, #20]
 801186c:	9801      	ldr	r0, [sp, #4]
 801186e:	4621      	mov	r1, r4
 8011870:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8011874:	f7ff fb1c 	bl	8010eb0 <quorem>
 8011878:	4641      	mov	r1, r8
 801187a:	9002      	str	r0, [sp, #8]
 801187c:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011880:	9801      	ldr	r0, [sp, #4]
 8011882:	f000 fb19 	bl	8011eb8 <__mcmp>
 8011886:	462a      	mov	r2, r5
 8011888:	9006      	str	r0, [sp, #24]
 801188a:	4621      	mov	r1, r4
 801188c:	4648      	mov	r0, r9
 801188e:	f000 fb2f 	bl	8011ef0 <__mdiff>
 8011892:	68c2      	ldr	r2, [r0, #12]
 8011894:	4606      	mov	r6, r0
 8011896:	b9fa      	cbnz	r2, 80118d8 <_dtoa_r+0x918>
 8011898:	4601      	mov	r1, r0
 801189a:	9801      	ldr	r0, [sp, #4]
 801189c:	f000 fb0c 	bl	8011eb8 <__mcmp>
 80118a0:	4602      	mov	r2, r0
 80118a2:	4631      	mov	r1, r6
 80118a4:	4648      	mov	r0, r9
 80118a6:	920a      	str	r2, [sp, #40]	@ 0x28
 80118a8:	f000 f8ff 	bl	8011aaa <_Bfree>
 80118ac:	9b07      	ldr	r3, [sp, #28]
 80118ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118b0:	9e05      	ldr	r6, [sp, #20]
 80118b2:	ea43 0102 	orr.w	r1, r3, r2
 80118b6:	9b08      	ldr	r3, [sp, #32]
 80118b8:	4319      	orrs	r1, r3
 80118ba:	d10f      	bne.n	80118dc <_dtoa_r+0x91c>
 80118bc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80118c0:	d028      	beq.n	8011914 <_dtoa_r+0x954>
 80118c2:	9b06      	ldr	r3, [sp, #24]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	dd02      	ble.n	80118ce <_dtoa_r+0x90e>
 80118c8:	9b02      	ldr	r3, [sp, #8]
 80118ca:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80118ce:	f88b a000 	strb.w	sl, [fp]
 80118d2:	e63b      	b.n	801154c <_dtoa_r+0x58c>
 80118d4:	4628      	mov	r0, r5
 80118d6:	e7bd      	b.n	8011854 <_dtoa_r+0x894>
 80118d8:	2201      	movs	r2, #1
 80118da:	e7e2      	b.n	80118a2 <_dtoa_r+0x8e2>
 80118dc:	9b06      	ldr	r3, [sp, #24]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	db04      	blt.n	80118ec <_dtoa_r+0x92c>
 80118e2:	9907      	ldr	r1, [sp, #28]
 80118e4:	430b      	orrs	r3, r1
 80118e6:	9908      	ldr	r1, [sp, #32]
 80118e8:	430b      	orrs	r3, r1
 80118ea:	d120      	bne.n	801192e <_dtoa_r+0x96e>
 80118ec:	2a00      	cmp	r2, #0
 80118ee:	ddee      	ble.n	80118ce <_dtoa_r+0x90e>
 80118f0:	9901      	ldr	r1, [sp, #4]
 80118f2:	2201      	movs	r2, #1
 80118f4:	4648      	mov	r0, r9
 80118f6:	f000 fa73 	bl	8011de0 <__lshift>
 80118fa:	4621      	mov	r1, r4
 80118fc:	9001      	str	r0, [sp, #4]
 80118fe:	f000 fadb 	bl	8011eb8 <__mcmp>
 8011902:	2800      	cmp	r0, #0
 8011904:	dc03      	bgt.n	801190e <_dtoa_r+0x94e>
 8011906:	d1e2      	bne.n	80118ce <_dtoa_r+0x90e>
 8011908:	f01a 0f01 	tst.w	sl, #1
 801190c:	d0df      	beq.n	80118ce <_dtoa_r+0x90e>
 801190e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011912:	d1d9      	bne.n	80118c8 <_dtoa_r+0x908>
 8011914:	2339      	movs	r3, #57	@ 0x39
 8011916:	f88b 3000 	strb.w	r3, [fp]
 801191a:	4633      	mov	r3, r6
 801191c:	461e      	mov	r6, r3
 801191e:	3b01      	subs	r3, #1
 8011920:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011924:	2a39      	cmp	r2, #57	@ 0x39
 8011926:	d053      	beq.n	80119d0 <_dtoa_r+0xa10>
 8011928:	3201      	adds	r2, #1
 801192a:	701a      	strb	r2, [r3, #0]
 801192c:	e60e      	b.n	801154c <_dtoa_r+0x58c>
 801192e:	2a00      	cmp	r2, #0
 8011930:	dd07      	ble.n	8011942 <_dtoa_r+0x982>
 8011932:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011936:	d0ed      	beq.n	8011914 <_dtoa_r+0x954>
 8011938:	f10a 0301 	add.w	r3, sl, #1
 801193c:	f88b 3000 	strb.w	r3, [fp]
 8011940:	e604      	b.n	801154c <_dtoa_r+0x58c>
 8011942:	9b05      	ldr	r3, [sp, #20]
 8011944:	9a05      	ldr	r2, [sp, #20]
 8011946:	f803 ac01 	strb.w	sl, [r3, #-1]
 801194a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801194c:	4293      	cmp	r3, r2
 801194e:	d029      	beq.n	80119a4 <_dtoa_r+0x9e4>
 8011950:	9901      	ldr	r1, [sp, #4]
 8011952:	2300      	movs	r3, #0
 8011954:	220a      	movs	r2, #10
 8011956:	4648      	mov	r0, r9
 8011958:	f000 f8b0 	bl	8011abc <__multadd>
 801195c:	45a8      	cmp	r8, r5
 801195e:	9001      	str	r0, [sp, #4]
 8011960:	f04f 0300 	mov.w	r3, #0
 8011964:	f04f 020a 	mov.w	r2, #10
 8011968:	4641      	mov	r1, r8
 801196a:	4648      	mov	r0, r9
 801196c:	d107      	bne.n	801197e <_dtoa_r+0x9be>
 801196e:	f000 f8a5 	bl	8011abc <__multadd>
 8011972:	4680      	mov	r8, r0
 8011974:	4605      	mov	r5, r0
 8011976:	9b05      	ldr	r3, [sp, #20]
 8011978:	3301      	adds	r3, #1
 801197a:	9305      	str	r3, [sp, #20]
 801197c:	e775      	b.n	801186a <_dtoa_r+0x8aa>
 801197e:	f000 f89d 	bl	8011abc <__multadd>
 8011982:	4629      	mov	r1, r5
 8011984:	4680      	mov	r8, r0
 8011986:	2300      	movs	r3, #0
 8011988:	220a      	movs	r2, #10
 801198a:	4648      	mov	r0, r9
 801198c:	f000 f896 	bl	8011abc <__multadd>
 8011990:	4605      	mov	r5, r0
 8011992:	e7f0      	b.n	8011976 <_dtoa_r+0x9b6>
 8011994:	f1bb 0f00 	cmp.w	fp, #0
 8011998:	bfcc      	ite	gt
 801199a:	465e      	movgt	r6, fp
 801199c:	2601      	movle	r6, #1
 801199e:	443e      	add	r6, r7
 80119a0:	f04f 0800 	mov.w	r8, #0
 80119a4:	9901      	ldr	r1, [sp, #4]
 80119a6:	2201      	movs	r2, #1
 80119a8:	4648      	mov	r0, r9
 80119aa:	f000 fa19 	bl	8011de0 <__lshift>
 80119ae:	4621      	mov	r1, r4
 80119b0:	9001      	str	r0, [sp, #4]
 80119b2:	f000 fa81 	bl	8011eb8 <__mcmp>
 80119b6:	2800      	cmp	r0, #0
 80119b8:	dcaf      	bgt.n	801191a <_dtoa_r+0x95a>
 80119ba:	d102      	bne.n	80119c2 <_dtoa_r+0xa02>
 80119bc:	f01a 0f01 	tst.w	sl, #1
 80119c0:	d1ab      	bne.n	801191a <_dtoa_r+0x95a>
 80119c2:	4633      	mov	r3, r6
 80119c4:	461e      	mov	r6, r3
 80119c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80119ca:	2a30      	cmp	r2, #48	@ 0x30
 80119cc:	d0fa      	beq.n	80119c4 <_dtoa_r+0xa04>
 80119ce:	e5bd      	b.n	801154c <_dtoa_r+0x58c>
 80119d0:	429f      	cmp	r7, r3
 80119d2:	d1a3      	bne.n	801191c <_dtoa_r+0x95c>
 80119d4:	9b04      	ldr	r3, [sp, #16]
 80119d6:	3301      	adds	r3, #1
 80119d8:	9304      	str	r3, [sp, #16]
 80119da:	2331      	movs	r3, #49	@ 0x31
 80119dc:	703b      	strb	r3, [r7, #0]
 80119de:	e5b5      	b.n	801154c <_dtoa_r+0x58c>
 80119e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80119e2:	4f15      	ldr	r7, [pc, #84]	@ (8011a38 <_dtoa_r+0xa78>)
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	f43f ab22 	beq.w	801102e <_dtoa_r+0x6e>
 80119ea:	f107 0308 	add.w	r3, r7, #8
 80119ee:	f7ff bb1c 	b.w	801102a <_dtoa_r+0x6a>
 80119f2:	9b07      	ldr	r3, [sp, #28]
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	f77f ae3b 	ble.w	8011670 <_dtoa_r+0x6b0>
 80119fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80119fe:	2001      	movs	r0, #1
 8011a00:	e65b      	b.n	80116ba <_dtoa_r+0x6fa>
 8011a02:	f1bb 0f00 	cmp.w	fp, #0
 8011a06:	f77f aedc 	ble.w	80117c2 <_dtoa_r+0x802>
 8011a0a:	463e      	mov	r6, r7
 8011a0c:	9801      	ldr	r0, [sp, #4]
 8011a0e:	4621      	mov	r1, r4
 8011a10:	f7ff fa4e 	bl	8010eb0 <quorem>
 8011a14:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011a18:	f806 ab01 	strb.w	sl, [r6], #1
 8011a1c:	1bf2      	subs	r2, r6, r7
 8011a1e:	4593      	cmp	fp, r2
 8011a20:	ddb8      	ble.n	8011994 <_dtoa_r+0x9d4>
 8011a22:	9901      	ldr	r1, [sp, #4]
 8011a24:	2300      	movs	r3, #0
 8011a26:	220a      	movs	r2, #10
 8011a28:	4648      	mov	r0, r9
 8011a2a:	f000 f847 	bl	8011abc <__multadd>
 8011a2e:	9001      	str	r0, [sp, #4]
 8011a30:	e7ec      	b.n	8011a0c <_dtoa_r+0xa4c>
 8011a32:	bf00      	nop
 8011a34:	0801407f 	.word	0x0801407f
 8011a38:	08014072 	.word	0x08014072

08011a3c <__ascii_mbtowc>:
 8011a3c:	b082      	sub	sp, #8
 8011a3e:	b901      	cbnz	r1, 8011a42 <__ascii_mbtowc+0x6>
 8011a40:	a901      	add	r1, sp, #4
 8011a42:	b142      	cbz	r2, 8011a56 <__ascii_mbtowc+0x1a>
 8011a44:	b14b      	cbz	r3, 8011a5a <__ascii_mbtowc+0x1e>
 8011a46:	7813      	ldrb	r3, [r2, #0]
 8011a48:	600b      	str	r3, [r1, #0]
 8011a4a:	7812      	ldrb	r2, [r2, #0]
 8011a4c:	1e10      	subs	r0, r2, #0
 8011a4e:	bf18      	it	ne
 8011a50:	2001      	movne	r0, #1
 8011a52:	b002      	add	sp, #8
 8011a54:	4770      	bx	lr
 8011a56:	4610      	mov	r0, r2
 8011a58:	e7fb      	b.n	8011a52 <__ascii_mbtowc+0x16>
 8011a5a:	f06f 0001 	mvn.w	r0, #1
 8011a5e:	e7f8      	b.n	8011a52 <__ascii_mbtowc+0x16>

08011a60 <_Balloc>:
 8011a60:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8011a62:	b570      	push	{r4, r5, r6, lr}
 8011a64:	4605      	mov	r5, r0
 8011a66:	460c      	mov	r4, r1
 8011a68:	b17b      	cbz	r3, 8011a8a <_Balloc+0x2a>
 8011a6a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8011a6c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011a70:	b9a0      	cbnz	r0, 8011a9c <_Balloc+0x3c>
 8011a72:	2101      	movs	r1, #1
 8011a74:	fa01 f604 	lsl.w	r6, r1, r4
 8011a78:	1d72      	adds	r2, r6, #5
 8011a7a:	0092      	lsls	r2, r2, #2
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	f000 fe59 	bl	8012734 <_calloc_r>
 8011a82:	b148      	cbz	r0, 8011a98 <_Balloc+0x38>
 8011a84:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8011a88:	e00b      	b.n	8011aa2 <_Balloc+0x42>
 8011a8a:	2221      	movs	r2, #33	@ 0x21
 8011a8c:	2104      	movs	r1, #4
 8011a8e:	f000 fe51 	bl	8012734 <_calloc_r>
 8011a92:	6468      	str	r0, [r5, #68]	@ 0x44
 8011a94:	2800      	cmp	r0, #0
 8011a96:	d1e8      	bne.n	8011a6a <_Balloc+0xa>
 8011a98:	2000      	movs	r0, #0
 8011a9a:	bd70      	pop	{r4, r5, r6, pc}
 8011a9c:	6802      	ldr	r2, [r0, #0]
 8011a9e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011aa8:	e7f7      	b.n	8011a9a <_Balloc+0x3a>

08011aaa <_Bfree>:
 8011aaa:	b131      	cbz	r1, 8011aba <_Bfree+0x10>
 8011aac:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8011aae:	684a      	ldr	r2, [r1, #4]
 8011ab0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011ab4:	6008      	str	r0, [r1, #0]
 8011ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011aba:	4770      	bx	lr

08011abc <__multadd>:
 8011abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac0:	690d      	ldr	r5, [r1, #16]
 8011ac2:	4607      	mov	r7, r0
 8011ac4:	460c      	mov	r4, r1
 8011ac6:	461e      	mov	r6, r3
 8011ac8:	f101 0c14 	add.w	ip, r1, #20
 8011acc:	2000      	movs	r0, #0
 8011ace:	f8dc 3000 	ldr.w	r3, [ip]
 8011ad2:	b299      	uxth	r1, r3
 8011ad4:	fb02 6101 	mla	r1, r2, r1, r6
 8011ad8:	0c1e      	lsrs	r6, r3, #16
 8011ada:	0c0b      	lsrs	r3, r1, #16
 8011adc:	fb02 3306 	mla	r3, r2, r6, r3
 8011ae0:	b289      	uxth	r1, r1
 8011ae2:	3001      	adds	r0, #1
 8011ae4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011ae8:	4285      	cmp	r5, r0
 8011aea:	f84c 1b04 	str.w	r1, [ip], #4
 8011aee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011af2:	dcec      	bgt.n	8011ace <__multadd+0x12>
 8011af4:	b30e      	cbz	r6, 8011b3a <__multadd+0x7e>
 8011af6:	68a3      	ldr	r3, [r4, #8]
 8011af8:	42ab      	cmp	r3, r5
 8011afa:	dc19      	bgt.n	8011b30 <__multadd+0x74>
 8011afc:	6861      	ldr	r1, [r4, #4]
 8011afe:	4638      	mov	r0, r7
 8011b00:	3101      	adds	r1, #1
 8011b02:	f7ff ffad 	bl	8011a60 <_Balloc>
 8011b06:	4680      	mov	r8, r0
 8011b08:	b928      	cbnz	r0, 8011b16 <__multadd+0x5a>
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8011b40 <__multadd+0x84>)
 8011b0e:	480d      	ldr	r0, [pc, #52]	@ (8011b44 <__multadd+0x88>)
 8011b10:	21ba      	movs	r1, #186	@ 0xba
 8011b12:	f000 fdf1 	bl	80126f8 <__assert_func>
 8011b16:	6922      	ldr	r2, [r4, #16]
 8011b18:	3202      	adds	r2, #2
 8011b1a:	f104 010c 	add.w	r1, r4, #12
 8011b1e:	0092      	lsls	r2, r2, #2
 8011b20:	300c      	adds	r0, #12
 8011b22:	f7ff f93f 	bl	8010da4 <memcpy>
 8011b26:	4621      	mov	r1, r4
 8011b28:	4638      	mov	r0, r7
 8011b2a:	f7ff ffbe 	bl	8011aaa <_Bfree>
 8011b2e:	4644      	mov	r4, r8
 8011b30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011b34:	3501      	adds	r5, #1
 8011b36:	615e      	str	r6, [r3, #20]
 8011b38:	6125      	str	r5, [r4, #16]
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b40:	0801407f 	.word	0x0801407f
 8011b44:	080140e8 	.word	0x080140e8

08011b48 <__hi0bits>:
 8011b48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	bf36      	itet	cc
 8011b50:	0403      	lslcc	r3, r0, #16
 8011b52:	2000      	movcs	r0, #0
 8011b54:	2010      	movcc	r0, #16
 8011b56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011b5a:	bf3c      	itt	cc
 8011b5c:	021b      	lslcc	r3, r3, #8
 8011b5e:	3008      	addcc	r0, #8
 8011b60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011b64:	bf3c      	itt	cc
 8011b66:	011b      	lslcc	r3, r3, #4
 8011b68:	3004      	addcc	r0, #4
 8011b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011b6e:	bf3c      	itt	cc
 8011b70:	009b      	lslcc	r3, r3, #2
 8011b72:	3002      	addcc	r0, #2
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	db05      	blt.n	8011b84 <__hi0bits+0x3c>
 8011b78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011b7c:	f100 0001 	add.w	r0, r0, #1
 8011b80:	bf08      	it	eq
 8011b82:	2020      	moveq	r0, #32
 8011b84:	4770      	bx	lr

08011b86 <__lo0bits>:
 8011b86:	6803      	ldr	r3, [r0, #0]
 8011b88:	4602      	mov	r2, r0
 8011b8a:	f013 0007 	ands.w	r0, r3, #7
 8011b8e:	d00b      	beq.n	8011ba8 <__lo0bits+0x22>
 8011b90:	07d9      	lsls	r1, r3, #31
 8011b92:	d421      	bmi.n	8011bd8 <__lo0bits+0x52>
 8011b94:	0798      	lsls	r0, r3, #30
 8011b96:	bf49      	itett	mi
 8011b98:	085b      	lsrmi	r3, r3, #1
 8011b9a:	089b      	lsrpl	r3, r3, #2
 8011b9c:	2001      	movmi	r0, #1
 8011b9e:	6013      	strmi	r3, [r2, #0]
 8011ba0:	bf5c      	itt	pl
 8011ba2:	6013      	strpl	r3, [r2, #0]
 8011ba4:	2002      	movpl	r0, #2
 8011ba6:	4770      	bx	lr
 8011ba8:	b299      	uxth	r1, r3
 8011baa:	b909      	cbnz	r1, 8011bb0 <__lo0bits+0x2a>
 8011bac:	0c1b      	lsrs	r3, r3, #16
 8011bae:	2010      	movs	r0, #16
 8011bb0:	b2d9      	uxtb	r1, r3
 8011bb2:	b909      	cbnz	r1, 8011bb8 <__lo0bits+0x32>
 8011bb4:	3008      	adds	r0, #8
 8011bb6:	0a1b      	lsrs	r3, r3, #8
 8011bb8:	0719      	lsls	r1, r3, #28
 8011bba:	bf04      	itt	eq
 8011bbc:	091b      	lsreq	r3, r3, #4
 8011bbe:	3004      	addeq	r0, #4
 8011bc0:	0799      	lsls	r1, r3, #30
 8011bc2:	bf04      	itt	eq
 8011bc4:	089b      	lsreq	r3, r3, #2
 8011bc6:	3002      	addeq	r0, #2
 8011bc8:	07d9      	lsls	r1, r3, #31
 8011bca:	d403      	bmi.n	8011bd4 <__lo0bits+0x4e>
 8011bcc:	085b      	lsrs	r3, r3, #1
 8011bce:	f100 0001 	add.w	r0, r0, #1
 8011bd2:	d003      	beq.n	8011bdc <__lo0bits+0x56>
 8011bd4:	6013      	str	r3, [r2, #0]
 8011bd6:	4770      	bx	lr
 8011bd8:	2000      	movs	r0, #0
 8011bda:	4770      	bx	lr
 8011bdc:	2020      	movs	r0, #32
 8011bde:	4770      	bx	lr

08011be0 <__i2b>:
 8011be0:	b510      	push	{r4, lr}
 8011be2:	460c      	mov	r4, r1
 8011be4:	2101      	movs	r1, #1
 8011be6:	f7ff ff3b 	bl	8011a60 <_Balloc>
 8011bea:	4602      	mov	r2, r0
 8011bec:	b928      	cbnz	r0, 8011bfa <__i2b+0x1a>
 8011bee:	4b05      	ldr	r3, [pc, #20]	@ (8011c04 <__i2b+0x24>)
 8011bf0:	4805      	ldr	r0, [pc, #20]	@ (8011c08 <__i2b+0x28>)
 8011bf2:	f240 1145 	movw	r1, #325	@ 0x145
 8011bf6:	f000 fd7f 	bl	80126f8 <__assert_func>
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	6144      	str	r4, [r0, #20]
 8011bfe:	6103      	str	r3, [r0, #16]
 8011c00:	bd10      	pop	{r4, pc}
 8011c02:	bf00      	nop
 8011c04:	0801407f 	.word	0x0801407f
 8011c08:	080140e8 	.word	0x080140e8

08011c0c <__multiply>:
 8011c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c10:	4614      	mov	r4, r2
 8011c12:	690a      	ldr	r2, [r1, #16]
 8011c14:	6923      	ldr	r3, [r4, #16]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	bfa8      	it	ge
 8011c1a:	4623      	movge	r3, r4
 8011c1c:	460f      	mov	r7, r1
 8011c1e:	bfa4      	itt	ge
 8011c20:	460c      	movge	r4, r1
 8011c22:	461f      	movge	r7, r3
 8011c24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011c28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011c2c:	68a3      	ldr	r3, [r4, #8]
 8011c2e:	6861      	ldr	r1, [r4, #4]
 8011c30:	eb0a 0609 	add.w	r6, sl, r9
 8011c34:	42b3      	cmp	r3, r6
 8011c36:	b085      	sub	sp, #20
 8011c38:	bfb8      	it	lt
 8011c3a:	3101      	addlt	r1, #1
 8011c3c:	f7ff ff10 	bl	8011a60 <_Balloc>
 8011c40:	b930      	cbnz	r0, 8011c50 <__multiply+0x44>
 8011c42:	4602      	mov	r2, r0
 8011c44:	4b44      	ldr	r3, [pc, #272]	@ (8011d58 <__multiply+0x14c>)
 8011c46:	4845      	ldr	r0, [pc, #276]	@ (8011d5c <__multiply+0x150>)
 8011c48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011c4c:	f000 fd54 	bl	80126f8 <__assert_func>
 8011c50:	f100 0514 	add.w	r5, r0, #20
 8011c54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011c58:	462b      	mov	r3, r5
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	4543      	cmp	r3, r8
 8011c5e:	d321      	bcc.n	8011ca4 <__multiply+0x98>
 8011c60:	f107 0114 	add.w	r1, r7, #20
 8011c64:	f104 0214 	add.w	r2, r4, #20
 8011c68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011c6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011c70:	9302      	str	r3, [sp, #8]
 8011c72:	1b13      	subs	r3, r2, r4
 8011c74:	3b15      	subs	r3, #21
 8011c76:	f023 0303 	bic.w	r3, r3, #3
 8011c7a:	3304      	adds	r3, #4
 8011c7c:	f104 0715 	add.w	r7, r4, #21
 8011c80:	42ba      	cmp	r2, r7
 8011c82:	bf38      	it	cc
 8011c84:	2304      	movcc	r3, #4
 8011c86:	9301      	str	r3, [sp, #4]
 8011c88:	9b02      	ldr	r3, [sp, #8]
 8011c8a:	9103      	str	r1, [sp, #12]
 8011c8c:	428b      	cmp	r3, r1
 8011c8e:	d80c      	bhi.n	8011caa <__multiply+0x9e>
 8011c90:	2e00      	cmp	r6, #0
 8011c92:	dd03      	ble.n	8011c9c <__multiply+0x90>
 8011c94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d05b      	beq.n	8011d54 <__multiply+0x148>
 8011c9c:	6106      	str	r6, [r0, #16]
 8011c9e:	b005      	add	sp, #20
 8011ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ca4:	f843 2b04 	str.w	r2, [r3], #4
 8011ca8:	e7d8      	b.n	8011c5c <__multiply+0x50>
 8011caa:	f8b1 a000 	ldrh.w	sl, [r1]
 8011cae:	f1ba 0f00 	cmp.w	sl, #0
 8011cb2:	d024      	beq.n	8011cfe <__multiply+0xf2>
 8011cb4:	f104 0e14 	add.w	lr, r4, #20
 8011cb8:	46a9      	mov	r9, r5
 8011cba:	f04f 0c00 	mov.w	ip, #0
 8011cbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011cc2:	f8d9 3000 	ldr.w	r3, [r9]
 8011cc6:	fa1f fb87 	uxth.w	fp, r7
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	fb0a 330b 	mla	r3, sl, fp, r3
 8011cd0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011cd4:	f8d9 7000 	ldr.w	r7, [r9]
 8011cd8:	4463      	add	r3, ip
 8011cda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011cde:	fb0a c70b 	mla	r7, sl, fp, ip
 8011ce2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011cec:	4572      	cmp	r2, lr
 8011cee:	f849 3b04 	str.w	r3, [r9], #4
 8011cf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011cf6:	d8e2      	bhi.n	8011cbe <__multiply+0xb2>
 8011cf8:	9b01      	ldr	r3, [sp, #4]
 8011cfa:	f845 c003 	str.w	ip, [r5, r3]
 8011cfe:	9b03      	ldr	r3, [sp, #12]
 8011d00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011d04:	3104      	adds	r1, #4
 8011d06:	f1b9 0f00 	cmp.w	r9, #0
 8011d0a:	d021      	beq.n	8011d50 <__multiply+0x144>
 8011d0c:	682b      	ldr	r3, [r5, #0]
 8011d0e:	f104 0c14 	add.w	ip, r4, #20
 8011d12:	46ae      	mov	lr, r5
 8011d14:	f04f 0a00 	mov.w	sl, #0
 8011d18:	f8bc b000 	ldrh.w	fp, [ip]
 8011d1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011d20:	fb09 770b 	mla	r7, r9, fp, r7
 8011d24:	4457      	add	r7, sl
 8011d26:	b29b      	uxth	r3, r3
 8011d28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011d2c:	f84e 3b04 	str.w	r3, [lr], #4
 8011d30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011d34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011d38:	f8be 3000 	ldrh.w	r3, [lr]
 8011d3c:	fb09 330a 	mla	r3, r9, sl, r3
 8011d40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011d44:	4562      	cmp	r2, ip
 8011d46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011d4a:	d8e5      	bhi.n	8011d18 <__multiply+0x10c>
 8011d4c:	9f01      	ldr	r7, [sp, #4]
 8011d4e:	51eb      	str	r3, [r5, r7]
 8011d50:	3504      	adds	r5, #4
 8011d52:	e799      	b.n	8011c88 <__multiply+0x7c>
 8011d54:	3e01      	subs	r6, #1
 8011d56:	e79b      	b.n	8011c90 <__multiply+0x84>
 8011d58:	0801407f 	.word	0x0801407f
 8011d5c:	080140e8 	.word	0x080140e8

08011d60 <__pow5mult>:
 8011d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d64:	4615      	mov	r5, r2
 8011d66:	f012 0203 	ands.w	r2, r2, #3
 8011d6a:	4607      	mov	r7, r0
 8011d6c:	460e      	mov	r6, r1
 8011d6e:	d007      	beq.n	8011d80 <__pow5mult+0x20>
 8011d70:	4c1a      	ldr	r4, [pc, #104]	@ (8011ddc <__pow5mult+0x7c>)
 8011d72:	3a01      	subs	r2, #1
 8011d74:	2300      	movs	r3, #0
 8011d76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d7a:	f7ff fe9f 	bl	8011abc <__multadd>
 8011d7e:	4606      	mov	r6, r0
 8011d80:	10ad      	asrs	r5, r5, #2
 8011d82:	d027      	beq.n	8011dd4 <__pow5mult+0x74>
 8011d84:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8011d86:	b944      	cbnz	r4, 8011d9a <__pow5mult+0x3a>
 8011d88:	f240 2171 	movw	r1, #625	@ 0x271
 8011d8c:	4638      	mov	r0, r7
 8011d8e:	f7ff ff27 	bl	8011be0 <__i2b>
 8011d92:	2300      	movs	r3, #0
 8011d94:	6438      	str	r0, [r7, #64]	@ 0x40
 8011d96:	4604      	mov	r4, r0
 8011d98:	6003      	str	r3, [r0, #0]
 8011d9a:	f04f 0900 	mov.w	r9, #0
 8011d9e:	07eb      	lsls	r3, r5, #31
 8011da0:	d50a      	bpl.n	8011db8 <__pow5mult+0x58>
 8011da2:	4631      	mov	r1, r6
 8011da4:	4622      	mov	r2, r4
 8011da6:	4638      	mov	r0, r7
 8011da8:	f7ff ff30 	bl	8011c0c <__multiply>
 8011dac:	4631      	mov	r1, r6
 8011dae:	4680      	mov	r8, r0
 8011db0:	4638      	mov	r0, r7
 8011db2:	f7ff fe7a 	bl	8011aaa <_Bfree>
 8011db6:	4646      	mov	r6, r8
 8011db8:	106d      	asrs	r5, r5, #1
 8011dba:	d00b      	beq.n	8011dd4 <__pow5mult+0x74>
 8011dbc:	6820      	ldr	r0, [r4, #0]
 8011dbe:	b938      	cbnz	r0, 8011dd0 <__pow5mult+0x70>
 8011dc0:	4622      	mov	r2, r4
 8011dc2:	4621      	mov	r1, r4
 8011dc4:	4638      	mov	r0, r7
 8011dc6:	f7ff ff21 	bl	8011c0c <__multiply>
 8011dca:	6020      	str	r0, [r4, #0]
 8011dcc:	f8c0 9000 	str.w	r9, [r0]
 8011dd0:	4604      	mov	r4, r0
 8011dd2:	e7e4      	b.n	8011d9e <__pow5mult+0x3e>
 8011dd4:	4630      	mov	r0, r6
 8011dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dda:	bf00      	nop
 8011ddc:	08014144 	.word	0x08014144

08011de0 <__lshift>:
 8011de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011de4:	460c      	mov	r4, r1
 8011de6:	6849      	ldr	r1, [r1, #4]
 8011de8:	6923      	ldr	r3, [r4, #16]
 8011dea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011dee:	68a3      	ldr	r3, [r4, #8]
 8011df0:	4607      	mov	r7, r0
 8011df2:	4691      	mov	r9, r2
 8011df4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011df8:	f108 0601 	add.w	r6, r8, #1
 8011dfc:	42b3      	cmp	r3, r6
 8011dfe:	db0b      	blt.n	8011e18 <__lshift+0x38>
 8011e00:	4638      	mov	r0, r7
 8011e02:	f7ff fe2d 	bl	8011a60 <_Balloc>
 8011e06:	4605      	mov	r5, r0
 8011e08:	b948      	cbnz	r0, 8011e1e <__lshift+0x3e>
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	4b28      	ldr	r3, [pc, #160]	@ (8011eb0 <__lshift+0xd0>)
 8011e0e:	4829      	ldr	r0, [pc, #164]	@ (8011eb4 <__lshift+0xd4>)
 8011e10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011e14:	f000 fc70 	bl	80126f8 <__assert_func>
 8011e18:	3101      	adds	r1, #1
 8011e1a:	005b      	lsls	r3, r3, #1
 8011e1c:	e7ee      	b.n	8011dfc <__lshift+0x1c>
 8011e1e:	2300      	movs	r3, #0
 8011e20:	f100 0114 	add.w	r1, r0, #20
 8011e24:	f100 0210 	add.w	r2, r0, #16
 8011e28:	4618      	mov	r0, r3
 8011e2a:	4553      	cmp	r3, sl
 8011e2c:	db33      	blt.n	8011e96 <__lshift+0xb6>
 8011e2e:	6920      	ldr	r0, [r4, #16]
 8011e30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011e34:	f104 0314 	add.w	r3, r4, #20
 8011e38:	f019 091f 	ands.w	r9, r9, #31
 8011e3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011e44:	d02b      	beq.n	8011e9e <__lshift+0xbe>
 8011e46:	f1c9 0e20 	rsb	lr, r9, #32
 8011e4a:	468a      	mov	sl, r1
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	6818      	ldr	r0, [r3, #0]
 8011e50:	fa00 f009 	lsl.w	r0, r0, r9
 8011e54:	4310      	orrs	r0, r2
 8011e56:	f84a 0b04 	str.w	r0, [sl], #4
 8011e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e5e:	459c      	cmp	ip, r3
 8011e60:	fa22 f20e 	lsr.w	r2, r2, lr
 8011e64:	d8f3      	bhi.n	8011e4e <__lshift+0x6e>
 8011e66:	ebac 0304 	sub.w	r3, ip, r4
 8011e6a:	3b15      	subs	r3, #21
 8011e6c:	f023 0303 	bic.w	r3, r3, #3
 8011e70:	3304      	adds	r3, #4
 8011e72:	f104 0015 	add.w	r0, r4, #21
 8011e76:	4584      	cmp	ip, r0
 8011e78:	bf38      	it	cc
 8011e7a:	2304      	movcc	r3, #4
 8011e7c:	50ca      	str	r2, [r1, r3]
 8011e7e:	b10a      	cbz	r2, 8011e84 <__lshift+0xa4>
 8011e80:	f108 0602 	add.w	r6, r8, #2
 8011e84:	3e01      	subs	r6, #1
 8011e86:	4638      	mov	r0, r7
 8011e88:	612e      	str	r6, [r5, #16]
 8011e8a:	4621      	mov	r1, r4
 8011e8c:	f7ff fe0d 	bl	8011aaa <_Bfree>
 8011e90:	4628      	mov	r0, r5
 8011e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e96:	f842 0f04 	str.w	r0, [r2, #4]!
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	e7c5      	b.n	8011e2a <__lshift+0x4a>
 8011e9e:	3904      	subs	r1, #4
 8011ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ea4:	f841 2f04 	str.w	r2, [r1, #4]!
 8011ea8:	459c      	cmp	ip, r3
 8011eaa:	d8f9      	bhi.n	8011ea0 <__lshift+0xc0>
 8011eac:	e7ea      	b.n	8011e84 <__lshift+0xa4>
 8011eae:	bf00      	nop
 8011eb0:	0801407f 	.word	0x0801407f
 8011eb4:	080140e8 	.word	0x080140e8

08011eb8 <__mcmp>:
 8011eb8:	690a      	ldr	r2, [r1, #16]
 8011eba:	4603      	mov	r3, r0
 8011ebc:	6900      	ldr	r0, [r0, #16]
 8011ebe:	1a80      	subs	r0, r0, r2
 8011ec0:	b530      	push	{r4, r5, lr}
 8011ec2:	d10e      	bne.n	8011ee2 <__mcmp+0x2a>
 8011ec4:	3314      	adds	r3, #20
 8011ec6:	3114      	adds	r1, #20
 8011ec8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011ecc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011ed0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011ed4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011ed8:	4295      	cmp	r5, r2
 8011eda:	d003      	beq.n	8011ee4 <__mcmp+0x2c>
 8011edc:	d205      	bcs.n	8011eea <__mcmp+0x32>
 8011ede:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ee2:	bd30      	pop	{r4, r5, pc}
 8011ee4:	42a3      	cmp	r3, r4
 8011ee6:	d3f3      	bcc.n	8011ed0 <__mcmp+0x18>
 8011ee8:	e7fb      	b.n	8011ee2 <__mcmp+0x2a>
 8011eea:	2001      	movs	r0, #1
 8011eec:	e7f9      	b.n	8011ee2 <__mcmp+0x2a>
	...

08011ef0 <__mdiff>:
 8011ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef4:	4689      	mov	r9, r1
 8011ef6:	4606      	mov	r6, r0
 8011ef8:	4611      	mov	r1, r2
 8011efa:	4648      	mov	r0, r9
 8011efc:	4614      	mov	r4, r2
 8011efe:	f7ff ffdb 	bl	8011eb8 <__mcmp>
 8011f02:	1e05      	subs	r5, r0, #0
 8011f04:	d112      	bne.n	8011f2c <__mdiff+0x3c>
 8011f06:	4629      	mov	r1, r5
 8011f08:	4630      	mov	r0, r6
 8011f0a:	f7ff fda9 	bl	8011a60 <_Balloc>
 8011f0e:	4602      	mov	r2, r0
 8011f10:	b928      	cbnz	r0, 8011f1e <__mdiff+0x2e>
 8011f12:	4b3f      	ldr	r3, [pc, #252]	@ (8012010 <__mdiff+0x120>)
 8011f14:	f240 2137 	movw	r1, #567	@ 0x237
 8011f18:	483e      	ldr	r0, [pc, #248]	@ (8012014 <__mdiff+0x124>)
 8011f1a:	f000 fbed 	bl	80126f8 <__assert_func>
 8011f1e:	2301      	movs	r3, #1
 8011f20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011f24:	4610      	mov	r0, r2
 8011f26:	b003      	add	sp, #12
 8011f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f2c:	bfbc      	itt	lt
 8011f2e:	464b      	movlt	r3, r9
 8011f30:	46a1      	movlt	r9, r4
 8011f32:	4630      	mov	r0, r6
 8011f34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011f38:	bfba      	itte	lt
 8011f3a:	461c      	movlt	r4, r3
 8011f3c:	2501      	movlt	r5, #1
 8011f3e:	2500      	movge	r5, #0
 8011f40:	f7ff fd8e 	bl	8011a60 <_Balloc>
 8011f44:	4602      	mov	r2, r0
 8011f46:	b918      	cbnz	r0, 8011f50 <__mdiff+0x60>
 8011f48:	4b31      	ldr	r3, [pc, #196]	@ (8012010 <__mdiff+0x120>)
 8011f4a:	f240 2145 	movw	r1, #581	@ 0x245
 8011f4e:	e7e3      	b.n	8011f18 <__mdiff+0x28>
 8011f50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011f54:	6926      	ldr	r6, [r4, #16]
 8011f56:	60c5      	str	r5, [r0, #12]
 8011f58:	f109 0310 	add.w	r3, r9, #16
 8011f5c:	f109 0514 	add.w	r5, r9, #20
 8011f60:	f104 0e14 	add.w	lr, r4, #20
 8011f64:	f100 0b14 	add.w	fp, r0, #20
 8011f68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011f6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011f70:	9301      	str	r3, [sp, #4]
 8011f72:	46d9      	mov	r9, fp
 8011f74:	f04f 0c00 	mov.w	ip, #0
 8011f78:	9b01      	ldr	r3, [sp, #4]
 8011f7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011f7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011f82:	9301      	str	r3, [sp, #4]
 8011f84:	fa1f f38a 	uxth.w	r3, sl
 8011f88:	4619      	mov	r1, r3
 8011f8a:	b283      	uxth	r3, r0
 8011f8c:	1acb      	subs	r3, r1, r3
 8011f8e:	0c00      	lsrs	r0, r0, #16
 8011f90:	4463      	add	r3, ip
 8011f92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011f96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011f9a:	b29b      	uxth	r3, r3
 8011f9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011fa0:	4576      	cmp	r6, lr
 8011fa2:	f849 3b04 	str.w	r3, [r9], #4
 8011fa6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011faa:	d8e5      	bhi.n	8011f78 <__mdiff+0x88>
 8011fac:	1b33      	subs	r3, r6, r4
 8011fae:	3b15      	subs	r3, #21
 8011fb0:	f023 0303 	bic.w	r3, r3, #3
 8011fb4:	3415      	adds	r4, #21
 8011fb6:	3304      	adds	r3, #4
 8011fb8:	42a6      	cmp	r6, r4
 8011fba:	bf38      	it	cc
 8011fbc:	2304      	movcc	r3, #4
 8011fbe:	441d      	add	r5, r3
 8011fc0:	445b      	add	r3, fp
 8011fc2:	461e      	mov	r6, r3
 8011fc4:	462c      	mov	r4, r5
 8011fc6:	4544      	cmp	r4, r8
 8011fc8:	d30e      	bcc.n	8011fe8 <__mdiff+0xf8>
 8011fca:	f108 0103 	add.w	r1, r8, #3
 8011fce:	1b49      	subs	r1, r1, r5
 8011fd0:	f021 0103 	bic.w	r1, r1, #3
 8011fd4:	3d03      	subs	r5, #3
 8011fd6:	45a8      	cmp	r8, r5
 8011fd8:	bf38      	it	cc
 8011fda:	2100      	movcc	r1, #0
 8011fdc:	440b      	add	r3, r1
 8011fde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011fe2:	b191      	cbz	r1, 801200a <__mdiff+0x11a>
 8011fe4:	6117      	str	r7, [r2, #16]
 8011fe6:	e79d      	b.n	8011f24 <__mdiff+0x34>
 8011fe8:	f854 1b04 	ldr.w	r1, [r4], #4
 8011fec:	46e6      	mov	lr, ip
 8011fee:	0c08      	lsrs	r0, r1, #16
 8011ff0:	fa1c fc81 	uxtah	ip, ip, r1
 8011ff4:	4471      	add	r1, lr
 8011ff6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011ffa:	b289      	uxth	r1, r1
 8011ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012000:	f846 1b04 	str.w	r1, [r6], #4
 8012004:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012008:	e7dd      	b.n	8011fc6 <__mdiff+0xd6>
 801200a:	3f01      	subs	r7, #1
 801200c:	e7e7      	b.n	8011fde <__mdiff+0xee>
 801200e:	bf00      	nop
 8012010:	0801407f 	.word	0x0801407f
 8012014:	080140e8 	.word	0x080140e8

08012018 <__d2b>:
 8012018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801201c:	460f      	mov	r7, r1
 801201e:	2101      	movs	r1, #1
 8012020:	ec59 8b10 	vmov	r8, r9, d0
 8012024:	4616      	mov	r6, r2
 8012026:	f7ff fd1b 	bl	8011a60 <_Balloc>
 801202a:	4604      	mov	r4, r0
 801202c:	b930      	cbnz	r0, 801203c <__d2b+0x24>
 801202e:	4602      	mov	r2, r0
 8012030:	4b23      	ldr	r3, [pc, #140]	@ (80120c0 <__d2b+0xa8>)
 8012032:	4824      	ldr	r0, [pc, #144]	@ (80120c4 <__d2b+0xac>)
 8012034:	f240 310f 	movw	r1, #783	@ 0x30f
 8012038:	f000 fb5e 	bl	80126f8 <__assert_func>
 801203c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012044:	b10d      	cbz	r5, 801204a <__d2b+0x32>
 8012046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801204a:	9301      	str	r3, [sp, #4]
 801204c:	f1b8 0300 	subs.w	r3, r8, #0
 8012050:	d023      	beq.n	801209a <__d2b+0x82>
 8012052:	4668      	mov	r0, sp
 8012054:	9300      	str	r3, [sp, #0]
 8012056:	f7ff fd96 	bl	8011b86 <__lo0bits>
 801205a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801205e:	b1d0      	cbz	r0, 8012096 <__d2b+0x7e>
 8012060:	f1c0 0320 	rsb	r3, r0, #32
 8012064:	fa02 f303 	lsl.w	r3, r2, r3
 8012068:	430b      	orrs	r3, r1
 801206a:	40c2      	lsrs	r2, r0
 801206c:	6163      	str	r3, [r4, #20]
 801206e:	9201      	str	r2, [sp, #4]
 8012070:	9b01      	ldr	r3, [sp, #4]
 8012072:	61a3      	str	r3, [r4, #24]
 8012074:	2b00      	cmp	r3, #0
 8012076:	bf0c      	ite	eq
 8012078:	2201      	moveq	r2, #1
 801207a:	2202      	movne	r2, #2
 801207c:	6122      	str	r2, [r4, #16]
 801207e:	b1a5      	cbz	r5, 80120aa <__d2b+0x92>
 8012080:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012084:	4405      	add	r5, r0
 8012086:	603d      	str	r5, [r7, #0]
 8012088:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801208c:	6030      	str	r0, [r6, #0]
 801208e:	4620      	mov	r0, r4
 8012090:	b003      	add	sp, #12
 8012092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012096:	6161      	str	r1, [r4, #20]
 8012098:	e7ea      	b.n	8012070 <__d2b+0x58>
 801209a:	a801      	add	r0, sp, #4
 801209c:	f7ff fd73 	bl	8011b86 <__lo0bits>
 80120a0:	9b01      	ldr	r3, [sp, #4]
 80120a2:	6163      	str	r3, [r4, #20]
 80120a4:	3020      	adds	r0, #32
 80120a6:	2201      	movs	r2, #1
 80120a8:	e7e8      	b.n	801207c <__d2b+0x64>
 80120aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80120ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80120b2:	6038      	str	r0, [r7, #0]
 80120b4:	6918      	ldr	r0, [r3, #16]
 80120b6:	f7ff fd47 	bl	8011b48 <__hi0bits>
 80120ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80120be:	e7e5      	b.n	801208c <__d2b+0x74>
 80120c0:	0801407f 	.word	0x0801407f
 80120c4:	080140e8 	.word	0x080140e8

080120c8 <_realloc_r>:
 80120c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120cc:	4682      	mov	sl, r0
 80120ce:	4693      	mov	fp, r2
 80120d0:	460c      	mov	r4, r1
 80120d2:	b929      	cbnz	r1, 80120e0 <_realloc_r+0x18>
 80120d4:	4611      	mov	r1, r2
 80120d6:	b003      	add	sp, #12
 80120d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120dc:	f7fc ba24 	b.w	800e528 <_malloc_r>
 80120e0:	f7fc fc5c 	bl	800e99c <__malloc_lock>
 80120e4:	f10b 080b 	add.w	r8, fp, #11
 80120e8:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80120ec:	f1b8 0f16 	cmp.w	r8, #22
 80120f0:	f1a4 0908 	sub.w	r9, r4, #8
 80120f4:	f025 0603 	bic.w	r6, r5, #3
 80120f8:	d908      	bls.n	801210c <_realloc_r+0x44>
 80120fa:	f038 0807 	bics.w	r8, r8, #7
 80120fe:	d507      	bpl.n	8012110 <_realloc_r+0x48>
 8012100:	230c      	movs	r3, #12
 8012102:	f8ca 3000 	str.w	r3, [sl]
 8012106:	f04f 0b00 	mov.w	fp, #0
 801210a:	e032      	b.n	8012172 <_realloc_r+0xaa>
 801210c:	f04f 0810 	mov.w	r8, #16
 8012110:	45c3      	cmp	fp, r8
 8012112:	d8f5      	bhi.n	8012100 <_realloc_r+0x38>
 8012114:	4546      	cmp	r6, r8
 8012116:	f280 8174 	bge.w	8012402 <_realloc_r+0x33a>
 801211a:	4b9e      	ldr	r3, [pc, #632]	@ (8012394 <_realloc_r+0x2cc>)
 801211c:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8012120:	eb09 0106 	add.w	r1, r9, r6
 8012124:	458c      	cmp	ip, r1
 8012126:	6848      	ldr	r0, [r1, #4]
 8012128:	d005      	beq.n	8012136 <_realloc_r+0x6e>
 801212a:	f020 0201 	bic.w	r2, r0, #1
 801212e:	440a      	add	r2, r1
 8012130:	6852      	ldr	r2, [r2, #4]
 8012132:	07d7      	lsls	r7, r2, #31
 8012134:	d449      	bmi.n	80121ca <_realloc_r+0x102>
 8012136:	f020 0003 	bic.w	r0, r0, #3
 801213a:	458c      	cmp	ip, r1
 801213c:	eb06 0700 	add.w	r7, r6, r0
 8012140:	d11b      	bne.n	801217a <_realloc_r+0xb2>
 8012142:	f108 0210 	add.w	r2, r8, #16
 8012146:	42ba      	cmp	r2, r7
 8012148:	dc41      	bgt.n	80121ce <_realloc_r+0x106>
 801214a:	eb09 0208 	add.w	r2, r9, r8
 801214e:	eba7 0708 	sub.w	r7, r7, r8
 8012152:	f047 0701 	orr.w	r7, r7, #1
 8012156:	609a      	str	r2, [r3, #8]
 8012158:	6057      	str	r7, [r2, #4]
 801215a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801215e:	f003 0301 	and.w	r3, r3, #1
 8012162:	ea43 0308 	orr.w	r3, r3, r8
 8012166:	f844 3c04 	str.w	r3, [r4, #-4]
 801216a:	4650      	mov	r0, sl
 801216c:	f7fc fc1c 	bl	800e9a8 <__malloc_unlock>
 8012170:	46a3      	mov	fp, r4
 8012172:	4658      	mov	r0, fp
 8012174:	b003      	add	sp, #12
 8012176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801217a:	45b8      	cmp	r8, r7
 801217c:	dc27      	bgt.n	80121ce <_realloc_r+0x106>
 801217e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012182:	60d3      	str	r3, [r2, #12]
 8012184:	609a      	str	r2, [r3, #8]
 8012186:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801218a:	eba7 0008 	sub.w	r0, r7, r8
 801218e:	280f      	cmp	r0, #15
 8012190:	f003 0301 	and.w	r3, r3, #1
 8012194:	eb09 0207 	add.w	r2, r9, r7
 8012198:	f240 8135 	bls.w	8012406 <_realloc_r+0x33e>
 801219c:	eb09 0108 	add.w	r1, r9, r8
 80121a0:	ea48 0303 	orr.w	r3, r8, r3
 80121a4:	f040 0001 	orr.w	r0, r0, #1
 80121a8:	f8c9 3004 	str.w	r3, [r9, #4]
 80121ac:	6048      	str	r0, [r1, #4]
 80121ae:	6853      	ldr	r3, [r2, #4]
 80121b0:	f043 0301 	orr.w	r3, r3, #1
 80121b4:	6053      	str	r3, [r2, #4]
 80121b6:	3108      	adds	r1, #8
 80121b8:	4650      	mov	r0, sl
 80121ba:	f7fc f8f5 	bl	800e3a8 <_free_r>
 80121be:	4650      	mov	r0, sl
 80121c0:	f7fc fbf2 	bl	800e9a8 <__malloc_unlock>
 80121c4:	f109 0b08 	add.w	fp, r9, #8
 80121c8:	e7d3      	b.n	8012172 <_realloc_r+0xaa>
 80121ca:	2000      	movs	r0, #0
 80121cc:	4601      	mov	r1, r0
 80121ce:	07ea      	lsls	r2, r5, #31
 80121d0:	f100 80c7 	bmi.w	8012362 <_realloc_r+0x29a>
 80121d4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80121d8:	eba9 0505 	sub.w	r5, r9, r5
 80121dc:	686a      	ldr	r2, [r5, #4]
 80121de:	f022 0203 	bic.w	r2, r2, #3
 80121e2:	4432      	add	r2, r6
 80121e4:	9201      	str	r2, [sp, #4]
 80121e6:	2900      	cmp	r1, #0
 80121e8:	f000 8086 	beq.w	80122f8 <_realloc_r+0x230>
 80121ec:	458c      	cmp	ip, r1
 80121ee:	eb00 0702 	add.w	r7, r0, r2
 80121f2:	d149      	bne.n	8012288 <_realloc_r+0x1c0>
 80121f4:	f108 0210 	add.w	r2, r8, #16
 80121f8:	42ba      	cmp	r2, r7
 80121fa:	dc7d      	bgt.n	80122f8 <_realloc_r+0x230>
 80121fc:	46ab      	mov	fp, r5
 80121fe:	68ea      	ldr	r2, [r5, #12]
 8012200:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8012204:	60ca      	str	r2, [r1, #12]
 8012206:	6091      	str	r1, [r2, #8]
 8012208:	1f32      	subs	r2, r6, #4
 801220a:	2a24      	cmp	r2, #36	@ 0x24
 801220c:	d836      	bhi.n	801227c <_realloc_r+0x1b4>
 801220e:	2a13      	cmp	r2, #19
 8012210:	d932      	bls.n	8012278 <_realloc_r+0x1b0>
 8012212:	6821      	ldr	r1, [r4, #0]
 8012214:	60a9      	str	r1, [r5, #8]
 8012216:	6861      	ldr	r1, [r4, #4]
 8012218:	60e9      	str	r1, [r5, #12]
 801221a:	2a1b      	cmp	r2, #27
 801221c:	d81a      	bhi.n	8012254 <_realloc_r+0x18c>
 801221e:	3408      	adds	r4, #8
 8012220:	f105 0210 	add.w	r2, r5, #16
 8012224:	6821      	ldr	r1, [r4, #0]
 8012226:	6011      	str	r1, [r2, #0]
 8012228:	6861      	ldr	r1, [r4, #4]
 801222a:	6051      	str	r1, [r2, #4]
 801222c:	68a1      	ldr	r1, [r4, #8]
 801222e:	6091      	str	r1, [r2, #8]
 8012230:	eb05 0208 	add.w	r2, r5, r8
 8012234:	eba7 0708 	sub.w	r7, r7, r8
 8012238:	f047 0701 	orr.w	r7, r7, #1
 801223c:	609a      	str	r2, [r3, #8]
 801223e:	6057      	str	r7, [r2, #4]
 8012240:	686b      	ldr	r3, [r5, #4]
 8012242:	f003 0301 	and.w	r3, r3, #1
 8012246:	ea43 0308 	orr.w	r3, r3, r8
 801224a:	606b      	str	r3, [r5, #4]
 801224c:	4650      	mov	r0, sl
 801224e:	f7fc fbab 	bl	800e9a8 <__malloc_unlock>
 8012252:	e78e      	b.n	8012172 <_realloc_r+0xaa>
 8012254:	68a1      	ldr	r1, [r4, #8]
 8012256:	6129      	str	r1, [r5, #16]
 8012258:	68e1      	ldr	r1, [r4, #12]
 801225a:	6169      	str	r1, [r5, #20]
 801225c:	2a24      	cmp	r2, #36	@ 0x24
 801225e:	bf01      	itttt	eq
 8012260:	6922      	ldreq	r2, [r4, #16]
 8012262:	61aa      	streq	r2, [r5, #24]
 8012264:	6961      	ldreq	r1, [r4, #20]
 8012266:	61e9      	streq	r1, [r5, #28]
 8012268:	bf19      	ittee	ne
 801226a:	3410      	addne	r4, #16
 801226c:	f105 0218 	addne.w	r2, r5, #24
 8012270:	f105 0220 	addeq.w	r2, r5, #32
 8012274:	3418      	addeq	r4, #24
 8012276:	e7d5      	b.n	8012224 <_realloc_r+0x15c>
 8012278:	465a      	mov	r2, fp
 801227a:	e7d3      	b.n	8012224 <_realloc_r+0x15c>
 801227c:	4621      	mov	r1, r4
 801227e:	4658      	mov	r0, fp
 8012280:	f7fe fd28 	bl	8010cd4 <memmove>
 8012284:	4b43      	ldr	r3, [pc, #268]	@ (8012394 <_realloc_r+0x2cc>)
 8012286:	e7d3      	b.n	8012230 <_realloc_r+0x168>
 8012288:	45b8      	cmp	r8, r7
 801228a:	dc35      	bgt.n	80122f8 <_realloc_r+0x230>
 801228c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012290:	4628      	mov	r0, r5
 8012292:	60d3      	str	r3, [r2, #12]
 8012294:	609a      	str	r2, [r3, #8]
 8012296:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801229a:	68eb      	ldr	r3, [r5, #12]
 801229c:	60d3      	str	r3, [r2, #12]
 801229e:	609a      	str	r2, [r3, #8]
 80122a0:	1f32      	subs	r2, r6, #4
 80122a2:	2a24      	cmp	r2, #36	@ 0x24
 80122a4:	d824      	bhi.n	80122f0 <_realloc_r+0x228>
 80122a6:	2a13      	cmp	r2, #19
 80122a8:	d908      	bls.n	80122bc <_realloc_r+0x1f4>
 80122aa:	6823      	ldr	r3, [r4, #0]
 80122ac:	60ab      	str	r3, [r5, #8]
 80122ae:	6863      	ldr	r3, [r4, #4]
 80122b0:	60eb      	str	r3, [r5, #12]
 80122b2:	2a1b      	cmp	r2, #27
 80122b4:	d80a      	bhi.n	80122cc <_realloc_r+0x204>
 80122b6:	3408      	adds	r4, #8
 80122b8:	f105 0010 	add.w	r0, r5, #16
 80122bc:	6823      	ldr	r3, [r4, #0]
 80122be:	6003      	str	r3, [r0, #0]
 80122c0:	6863      	ldr	r3, [r4, #4]
 80122c2:	6043      	str	r3, [r0, #4]
 80122c4:	68a3      	ldr	r3, [r4, #8]
 80122c6:	6083      	str	r3, [r0, #8]
 80122c8:	46a9      	mov	r9, r5
 80122ca:	e75c      	b.n	8012186 <_realloc_r+0xbe>
 80122cc:	68a3      	ldr	r3, [r4, #8]
 80122ce:	612b      	str	r3, [r5, #16]
 80122d0:	68e3      	ldr	r3, [r4, #12]
 80122d2:	616b      	str	r3, [r5, #20]
 80122d4:	2a24      	cmp	r2, #36	@ 0x24
 80122d6:	bf01      	itttt	eq
 80122d8:	6923      	ldreq	r3, [r4, #16]
 80122da:	61ab      	streq	r3, [r5, #24]
 80122dc:	6963      	ldreq	r3, [r4, #20]
 80122de:	61eb      	streq	r3, [r5, #28]
 80122e0:	bf19      	ittee	ne
 80122e2:	3410      	addne	r4, #16
 80122e4:	f105 0018 	addne.w	r0, r5, #24
 80122e8:	f105 0020 	addeq.w	r0, r5, #32
 80122ec:	3418      	addeq	r4, #24
 80122ee:	e7e5      	b.n	80122bc <_realloc_r+0x1f4>
 80122f0:	4621      	mov	r1, r4
 80122f2:	f7fe fcef 	bl	8010cd4 <memmove>
 80122f6:	e7e7      	b.n	80122c8 <_realloc_r+0x200>
 80122f8:	9b01      	ldr	r3, [sp, #4]
 80122fa:	4598      	cmp	r8, r3
 80122fc:	dc31      	bgt.n	8012362 <_realloc_r+0x29a>
 80122fe:	4628      	mov	r0, r5
 8012300:	68eb      	ldr	r3, [r5, #12]
 8012302:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8012306:	60d3      	str	r3, [r2, #12]
 8012308:	609a      	str	r2, [r3, #8]
 801230a:	1f32      	subs	r2, r6, #4
 801230c:	2a24      	cmp	r2, #36	@ 0x24
 801230e:	d824      	bhi.n	801235a <_realloc_r+0x292>
 8012310:	2a13      	cmp	r2, #19
 8012312:	d908      	bls.n	8012326 <_realloc_r+0x25e>
 8012314:	6823      	ldr	r3, [r4, #0]
 8012316:	60ab      	str	r3, [r5, #8]
 8012318:	6863      	ldr	r3, [r4, #4]
 801231a:	60eb      	str	r3, [r5, #12]
 801231c:	2a1b      	cmp	r2, #27
 801231e:	d80a      	bhi.n	8012336 <_realloc_r+0x26e>
 8012320:	3408      	adds	r4, #8
 8012322:	f105 0010 	add.w	r0, r5, #16
 8012326:	6823      	ldr	r3, [r4, #0]
 8012328:	6003      	str	r3, [r0, #0]
 801232a:	6863      	ldr	r3, [r4, #4]
 801232c:	6043      	str	r3, [r0, #4]
 801232e:	68a3      	ldr	r3, [r4, #8]
 8012330:	6083      	str	r3, [r0, #8]
 8012332:	9f01      	ldr	r7, [sp, #4]
 8012334:	e7c8      	b.n	80122c8 <_realloc_r+0x200>
 8012336:	68a3      	ldr	r3, [r4, #8]
 8012338:	612b      	str	r3, [r5, #16]
 801233a:	68e3      	ldr	r3, [r4, #12]
 801233c:	616b      	str	r3, [r5, #20]
 801233e:	2a24      	cmp	r2, #36	@ 0x24
 8012340:	bf01      	itttt	eq
 8012342:	6923      	ldreq	r3, [r4, #16]
 8012344:	61ab      	streq	r3, [r5, #24]
 8012346:	6963      	ldreq	r3, [r4, #20]
 8012348:	61eb      	streq	r3, [r5, #28]
 801234a:	bf19      	ittee	ne
 801234c:	3410      	addne	r4, #16
 801234e:	f105 0018 	addne.w	r0, r5, #24
 8012352:	f105 0020 	addeq.w	r0, r5, #32
 8012356:	3418      	addeq	r4, #24
 8012358:	e7e5      	b.n	8012326 <_realloc_r+0x25e>
 801235a:	4621      	mov	r1, r4
 801235c:	f7fe fcba 	bl	8010cd4 <memmove>
 8012360:	e7e7      	b.n	8012332 <_realloc_r+0x26a>
 8012362:	4659      	mov	r1, fp
 8012364:	4650      	mov	r0, sl
 8012366:	f7fc f8df 	bl	800e528 <_malloc_r>
 801236a:	4683      	mov	fp, r0
 801236c:	b918      	cbnz	r0, 8012376 <_realloc_r+0x2ae>
 801236e:	4650      	mov	r0, sl
 8012370:	f7fc fb1a 	bl	800e9a8 <__malloc_unlock>
 8012374:	e6c7      	b.n	8012106 <_realloc_r+0x3e>
 8012376:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801237a:	f023 0301 	bic.w	r3, r3, #1
 801237e:	444b      	add	r3, r9
 8012380:	f1a0 0208 	sub.w	r2, r0, #8
 8012384:	4293      	cmp	r3, r2
 8012386:	d107      	bne.n	8012398 <_realloc_r+0x2d0>
 8012388:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801238c:	f027 0703 	bic.w	r7, r7, #3
 8012390:	4437      	add	r7, r6
 8012392:	e6f8      	b.n	8012186 <_realloc_r+0xbe>
 8012394:	2400014c 	.word	0x2400014c
 8012398:	1f32      	subs	r2, r6, #4
 801239a:	2a24      	cmp	r2, #36	@ 0x24
 801239c:	d82d      	bhi.n	80123fa <_realloc_r+0x332>
 801239e:	2a13      	cmp	r2, #19
 80123a0:	d928      	bls.n	80123f4 <_realloc_r+0x32c>
 80123a2:	6823      	ldr	r3, [r4, #0]
 80123a4:	6003      	str	r3, [r0, #0]
 80123a6:	6863      	ldr	r3, [r4, #4]
 80123a8:	6043      	str	r3, [r0, #4]
 80123aa:	2a1b      	cmp	r2, #27
 80123ac:	d80e      	bhi.n	80123cc <_realloc_r+0x304>
 80123ae:	f104 0208 	add.w	r2, r4, #8
 80123b2:	f100 0308 	add.w	r3, r0, #8
 80123b6:	6811      	ldr	r1, [r2, #0]
 80123b8:	6019      	str	r1, [r3, #0]
 80123ba:	6851      	ldr	r1, [r2, #4]
 80123bc:	6059      	str	r1, [r3, #4]
 80123be:	6892      	ldr	r2, [r2, #8]
 80123c0:	609a      	str	r2, [r3, #8]
 80123c2:	4621      	mov	r1, r4
 80123c4:	4650      	mov	r0, sl
 80123c6:	f7fb ffef 	bl	800e3a8 <_free_r>
 80123ca:	e73f      	b.n	801224c <_realloc_r+0x184>
 80123cc:	68a3      	ldr	r3, [r4, #8]
 80123ce:	6083      	str	r3, [r0, #8]
 80123d0:	68e3      	ldr	r3, [r4, #12]
 80123d2:	60c3      	str	r3, [r0, #12]
 80123d4:	2a24      	cmp	r2, #36	@ 0x24
 80123d6:	bf01      	itttt	eq
 80123d8:	6923      	ldreq	r3, [r4, #16]
 80123da:	6103      	streq	r3, [r0, #16]
 80123dc:	6961      	ldreq	r1, [r4, #20]
 80123de:	6141      	streq	r1, [r0, #20]
 80123e0:	bf19      	ittee	ne
 80123e2:	f104 0210 	addne.w	r2, r4, #16
 80123e6:	f100 0310 	addne.w	r3, r0, #16
 80123ea:	f104 0218 	addeq.w	r2, r4, #24
 80123ee:	f100 0318 	addeq.w	r3, r0, #24
 80123f2:	e7e0      	b.n	80123b6 <_realloc_r+0x2ee>
 80123f4:	4603      	mov	r3, r0
 80123f6:	4622      	mov	r2, r4
 80123f8:	e7dd      	b.n	80123b6 <_realloc_r+0x2ee>
 80123fa:	4621      	mov	r1, r4
 80123fc:	f7fe fc6a 	bl	8010cd4 <memmove>
 8012400:	e7df      	b.n	80123c2 <_realloc_r+0x2fa>
 8012402:	4637      	mov	r7, r6
 8012404:	e6bf      	b.n	8012186 <_realloc_r+0xbe>
 8012406:	431f      	orrs	r7, r3
 8012408:	f8c9 7004 	str.w	r7, [r9, #4]
 801240c:	6853      	ldr	r3, [r2, #4]
 801240e:	f043 0301 	orr.w	r3, r3, #1
 8012412:	6053      	str	r3, [r2, #4]
 8012414:	e6d3      	b.n	80121be <_realloc_r+0xf6>
 8012416:	bf00      	nop

08012418 <__ascii_wctomb>:
 8012418:	4603      	mov	r3, r0
 801241a:	4608      	mov	r0, r1
 801241c:	b141      	cbz	r1, 8012430 <__ascii_wctomb+0x18>
 801241e:	2aff      	cmp	r2, #255	@ 0xff
 8012420:	d904      	bls.n	801242c <__ascii_wctomb+0x14>
 8012422:	228a      	movs	r2, #138	@ 0x8a
 8012424:	601a      	str	r2, [r3, #0]
 8012426:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801242a:	4770      	bx	lr
 801242c:	700a      	strb	r2, [r1, #0]
 801242e:	2001      	movs	r0, #1
 8012430:	4770      	bx	lr
	...

08012434 <_wcrtomb_r>:
 8012434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012436:	4c09      	ldr	r4, [pc, #36]	@ (801245c <_wcrtomb_r+0x28>)
 8012438:	b085      	sub	sp, #20
 801243a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 801243e:	4605      	mov	r5, r0
 8012440:	461e      	mov	r6, r3
 8012442:	b909      	cbnz	r1, 8012448 <_wcrtomb_r+0x14>
 8012444:	460a      	mov	r2, r1
 8012446:	a901      	add	r1, sp, #4
 8012448:	47b8      	blx	r7
 801244a:	1c43      	adds	r3, r0, #1
 801244c:	bf01      	itttt	eq
 801244e:	2300      	moveq	r3, #0
 8012450:	6033      	streq	r3, [r6, #0]
 8012452:	238a      	moveq	r3, #138	@ 0x8a
 8012454:	602b      	streq	r3, [r5, #0]
 8012456:	b005      	add	sp, #20
 8012458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801245a:	bf00      	nop
 801245c:	24000554 	.word	0x24000554

08012460 <__ssprint_r>:
 8012460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012464:	6893      	ldr	r3, [r2, #8]
 8012466:	f8d2 b000 	ldr.w	fp, [r2]
 801246a:	9001      	str	r0, [sp, #4]
 801246c:	460c      	mov	r4, r1
 801246e:	4617      	mov	r7, r2
 8012470:	2b00      	cmp	r3, #0
 8012472:	d157      	bne.n	8012524 <__ssprint_r+0xc4>
 8012474:	2000      	movs	r0, #0
 8012476:	2300      	movs	r3, #0
 8012478:	607b      	str	r3, [r7, #4]
 801247a:	b003      	add	sp, #12
 801247c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012480:	e9db a800 	ldrd	sl, r8, [fp]
 8012484:	f10b 0b08 	add.w	fp, fp, #8
 8012488:	68a6      	ldr	r6, [r4, #8]
 801248a:	6820      	ldr	r0, [r4, #0]
 801248c:	f1b8 0f00 	cmp.w	r8, #0
 8012490:	d0f6      	beq.n	8012480 <__ssprint_r+0x20>
 8012492:	45b0      	cmp	r8, r6
 8012494:	d32e      	bcc.n	80124f4 <__ssprint_r+0x94>
 8012496:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801249a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801249e:	d029      	beq.n	80124f4 <__ssprint_r+0x94>
 80124a0:	6921      	ldr	r1, [r4, #16]
 80124a2:	6965      	ldr	r5, [r4, #20]
 80124a4:	eba0 0901 	sub.w	r9, r0, r1
 80124a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80124ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80124b0:	f109 0001 	add.w	r0, r9, #1
 80124b4:	106d      	asrs	r5, r5, #1
 80124b6:	4440      	add	r0, r8
 80124b8:	4285      	cmp	r5, r0
 80124ba:	bf38      	it	cc
 80124bc:	4605      	movcc	r5, r0
 80124be:	0553      	lsls	r3, r2, #21
 80124c0:	d534      	bpl.n	801252c <__ssprint_r+0xcc>
 80124c2:	9801      	ldr	r0, [sp, #4]
 80124c4:	4629      	mov	r1, r5
 80124c6:	f7fc f82f 	bl	800e528 <_malloc_r>
 80124ca:	4606      	mov	r6, r0
 80124cc:	2800      	cmp	r0, #0
 80124ce:	d038      	beq.n	8012542 <__ssprint_r+0xe2>
 80124d0:	464a      	mov	r2, r9
 80124d2:	6921      	ldr	r1, [r4, #16]
 80124d4:	f7fe fc66 	bl	8010da4 <memcpy>
 80124d8:	89a2      	ldrh	r2, [r4, #12]
 80124da:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80124de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80124e2:	81a2      	strh	r2, [r4, #12]
 80124e4:	6126      	str	r6, [r4, #16]
 80124e6:	6165      	str	r5, [r4, #20]
 80124e8:	444e      	add	r6, r9
 80124ea:	eba5 0509 	sub.w	r5, r5, r9
 80124ee:	6026      	str	r6, [r4, #0]
 80124f0:	60a5      	str	r5, [r4, #8]
 80124f2:	4646      	mov	r6, r8
 80124f4:	4546      	cmp	r6, r8
 80124f6:	bf28      	it	cs
 80124f8:	4646      	movcs	r6, r8
 80124fa:	4632      	mov	r2, r6
 80124fc:	4651      	mov	r1, sl
 80124fe:	6820      	ldr	r0, [r4, #0]
 8012500:	f7fe fbe8 	bl	8010cd4 <memmove>
 8012504:	68a2      	ldr	r2, [r4, #8]
 8012506:	1b92      	subs	r2, r2, r6
 8012508:	60a2      	str	r2, [r4, #8]
 801250a:	6822      	ldr	r2, [r4, #0]
 801250c:	4432      	add	r2, r6
 801250e:	6022      	str	r2, [r4, #0]
 8012510:	68ba      	ldr	r2, [r7, #8]
 8012512:	eba2 0308 	sub.w	r3, r2, r8
 8012516:	44c2      	add	sl, r8
 8012518:	60bb      	str	r3, [r7, #8]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d0aa      	beq.n	8012474 <__ssprint_r+0x14>
 801251e:	f04f 0800 	mov.w	r8, #0
 8012522:	e7b1      	b.n	8012488 <__ssprint_r+0x28>
 8012524:	f04f 0a00 	mov.w	sl, #0
 8012528:	46d0      	mov	r8, sl
 801252a:	e7ad      	b.n	8012488 <__ssprint_r+0x28>
 801252c:	9801      	ldr	r0, [sp, #4]
 801252e:	462a      	mov	r2, r5
 8012530:	f7ff fdca 	bl	80120c8 <_realloc_r>
 8012534:	4606      	mov	r6, r0
 8012536:	2800      	cmp	r0, #0
 8012538:	d1d4      	bne.n	80124e4 <__ssprint_r+0x84>
 801253a:	6921      	ldr	r1, [r4, #16]
 801253c:	9801      	ldr	r0, [sp, #4]
 801253e:	f7fb ff33 	bl	800e3a8 <_free_r>
 8012542:	9a01      	ldr	r2, [sp, #4]
 8012544:	230c      	movs	r3, #12
 8012546:	6013      	str	r3, [r2, #0]
 8012548:	89a3      	ldrh	r3, [r4, #12]
 801254a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801254e:	81a3      	strh	r3, [r4, #12]
 8012550:	2300      	movs	r3, #0
 8012552:	60bb      	str	r3, [r7, #8]
 8012554:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012558:	e78d      	b.n	8012476 <__ssprint_r+0x16>

0801255a <__swhatbuf_r>:
 801255a:	b570      	push	{r4, r5, r6, lr}
 801255c:	460c      	mov	r4, r1
 801255e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012562:	2900      	cmp	r1, #0
 8012564:	b096      	sub	sp, #88	@ 0x58
 8012566:	4615      	mov	r5, r2
 8012568:	461e      	mov	r6, r3
 801256a:	da07      	bge.n	801257c <__swhatbuf_r+0x22>
 801256c:	89a1      	ldrh	r1, [r4, #12]
 801256e:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8012572:	d117      	bne.n	80125a4 <__swhatbuf_r+0x4a>
 8012574:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012578:	4608      	mov	r0, r1
 801257a:	e00f      	b.n	801259c <__swhatbuf_r+0x42>
 801257c:	466a      	mov	r2, sp
 801257e:	f000 f899 	bl	80126b4 <_fstat_r>
 8012582:	2800      	cmp	r0, #0
 8012584:	dbf2      	blt.n	801256c <__swhatbuf_r+0x12>
 8012586:	9901      	ldr	r1, [sp, #4]
 8012588:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801258c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012590:	4259      	negs	r1, r3
 8012592:	4159      	adcs	r1, r3
 8012594:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8012598:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801259c:	6031      	str	r1, [r6, #0]
 801259e:	602b      	str	r3, [r5, #0]
 80125a0:	b016      	add	sp, #88	@ 0x58
 80125a2:	bd70      	pop	{r4, r5, r6, pc}
 80125a4:	2100      	movs	r1, #0
 80125a6:	2340      	movs	r3, #64	@ 0x40
 80125a8:	e7e6      	b.n	8012578 <__swhatbuf_r+0x1e>

080125aa <__smakebuf_r>:
 80125aa:	898b      	ldrh	r3, [r1, #12]
 80125ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125ae:	079d      	lsls	r5, r3, #30
 80125b0:	4606      	mov	r6, r0
 80125b2:	460c      	mov	r4, r1
 80125b4:	d507      	bpl.n	80125c6 <__smakebuf_r+0x1c>
 80125b6:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80125ba:	6023      	str	r3, [r4, #0]
 80125bc:	6123      	str	r3, [r4, #16]
 80125be:	2301      	movs	r3, #1
 80125c0:	6163      	str	r3, [r4, #20]
 80125c2:	b003      	add	sp, #12
 80125c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125c6:	ab01      	add	r3, sp, #4
 80125c8:	466a      	mov	r2, sp
 80125ca:	f7ff ffc6 	bl	801255a <__swhatbuf_r>
 80125ce:	9f00      	ldr	r7, [sp, #0]
 80125d0:	4605      	mov	r5, r0
 80125d2:	4639      	mov	r1, r7
 80125d4:	4630      	mov	r0, r6
 80125d6:	f7fb ffa7 	bl	800e528 <_malloc_r>
 80125da:	b948      	cbnz	r0, 80125f0 <__smakebuf_r+0x46>
 80125dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125e0:	059a      	lsls	r2, r3, #22
 80125e2:	d4ee      	bmi.n	80125c2 <__smakebuf_r+0x18>
 80125e4:	f023 0303 	bic.w	r3, r3, #3
 80125e8:	f043 0302 	orr.w	r3, r3, #2
 80125ec:	81a3      	strh	r3, [r4, #12]
 80125ee:	e7e2      	b.n	80125b6 <__smakebuf_r+0xc>
 80125f0:	89a3      	ldrh	r3, [r4, #12]
 80125f2:	6020      	str	r0, [r4, #0]
 80125f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125f8:	81a3      	strh	r3, [r4, #12]
 80125fa:	9b01      	ldr	r3, [sp, #4]
 80125fc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012600:	b15b      	cbz	r3, 801261a <__smakebuf_r+0x70>
 8012602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012606:	4630      	mov	r0, r6
 8012608:	f000 f866 	bl	80126d8 <_isatty_r>
 801260c:	b128      	cbz	r0, 801261a <__smakebuf_r+0x70>
 801260e:	89a3      	ldrh	r3, [r4, #12]
 8012610:	f023 0303 	bic.w	r3, r3, #3
 8012614:	f043 0301 	orr.w	r3, r3, #1
 8012618:	81a3      	strh	r3, [r4, #12]
 801261a:	89a3      	ldrh	r3, [r4, #12]
 801261c:	431d      	orrs	r5, r3
 801261e:	81a5      	strh	r5, [r4, #12]
 8012620:	e7cf      	b.n	80125c2 <__smakebuf_r+0x18>

08012622 <__swbuf_r>:
 8012622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012624:	460e      	mov	r6, r1
 8012626:	4614      	mov	r4, r2
 8012628:	4605      	mov	r5, r0
 801262a:	b118      	cbz	r0, 8012634 <__swbuf_r+0x12>
 801262c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801262e:	b90b      	cbnz	r3, 8012634 <__swbuf_r+0x12>
 8012630:	f7fb fd3e 	bl	800e0b0 <__sinit>
 8012634:	69a3      	ldr	r3, [r4, #24]
 8012636:	60a3      	str	r3, [r4, #8]
 8012638:	89a3      	ldrh	r3, [r4, #12]
 801263a:	0719      	lsls	r1, r3, #28
 801263c:	d501      	bpl.n	8012642 <__swbuf_r+0x20>
 801263e:	6923      	ldr	r3, [r4, #16]
 8012640:	b943      	cbnz	r3, 8012654 <__swbuf_r+0x32>
 8012642:	4621      	mov	r1, r4
 8012644:	4628      	mov	r0, r5
 8012646:	f7fe fa85 	bl	8010b54 <__swsetup_r>
 801264a:	b118      	cbz	r0, 8012654 <__swbuf_r+0x32>
 801264c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012650:	4638      	mov	r0, r7
 8012652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012658:	b2f6      	uxtb	r6, r6
 801265a:	049a      	lsls	r2, r3, #18
 801265c:	4637      	mov	r7, r6
 801265e:	d406      	bmi.n	801266e <__swbuf_r+0x4c>
 8012660:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012664:	81a3      	strh	r3, [r4, #12]
 8012666:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012668:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801266c:	6663      	str	r3, [r4, #100]	@ 0x64
 801266e:	6823      	ldr	r3, [r4, #0]
 8012670:	6922      	ldr	r2, [r4, #16]
 8012672:	1a98      	subs	r0, r3, r2
 8012674:	6963      	ldr	r3, [r4, #20]
 8012676:	4283      	cmp	r3, r0
 8012678:	dc05      	bgt.n	8012686 <__swbuf_r+0x64>
 801267a:	4621      	mov	r1, r4
 801267c:	4628      	mov	r0, r5
 801267e:	f7fe f8f7 	bl	8010870 <_fflush_r>
 8012682:	2800      	cmp	r0, #0
 8012684:	d1e2      	bne.n	801264c <__swbuf_r+0x2a>
 8012686:	68a3      	ldr	r3, [r4, #8]
 8012688:	3b01      	subs	r3, #1
 801268a:	60a3      	str	r3, [r4, #8]
 801268c:	6823      	ldr	r3, [r4, #0]
 801268e:	1c5a      	adds	r2, r3, #1
 8012690:	6022      	str	r2, [r4, #0]
 8012692:	701e      	strb	r6, [r3, #0]
 8012694:	6962      	ldr	r2, [r4, #20]
 8012696:	1c43      	adds	r3, r0, #1
 8012698:	429a      	cmp	r2, r3
 801269a:	d004      	beq.n	80126a6 <__swbuf_r+0x84>
 801269c:	89a3      	ldrh	r3, [r4, #12]
 801269e:	07db      	lsls	r3, r3, #31
 80126a0:	d5d6      	bpl.n	8012650 <__swbuf_r+0x2e>
 80126a2:	2e0a      	cmp	r6, #10
 80126a4:	d1d4      	bne.n	8012650 <__swbuf_r+0x2e>
 80126a6:	4621      	mov	r1, r4
 80126a8:	4628      	mov	r0, r5
 80126aa:	f7fe f8e1 	bl	8010870 <_fflush_r>
 80126ae:	2800      	cmp	r0, #0
 80126b0:	d0ce      	beq.n	8012650 <__swbuf_r+0x2e>
 80126b2:	e7cb      	b.n	801264c <__swbuf_r+0x2a>

080126b4 <_fstat_r>:
 80126b4:	b538      	push	{r3, r4, r5, lr}
 80126b6:	4d07      	ldr	r5, [pc, #28]	@ (80126d4 <_fstat_r+0x20>)
 80126b8:	2300      	movs	r3, #0
 80126ba:	4604      	mov	r4, r0
 80126bc:	4608      	mov	r0, r1
 80126be:	4611      	mov	r1, r2
 80126c0:	602b      	str	r3, [r5, #0]
 80126c2:	f7ef fd71 	bl	80021a8 <_fstat>
 80126c6:	1c43      	adds	r3, r0, #1
 80126c8:	d102      	bne.n	80126d0 <_fstat_r+0x1c>
 80126ca:	682b      	ldr	r3, [r5, #0]
 80126cc:	b103      	cbz	r3, 80126d0 <_fstat_r+0x1c>
 80126ce:	6023      	str	r3, [r4, #0]
 80126d0:	bd38      	pop	{r3, r4, r5, pc}
 80126d2:	bf00      	nop
 80126d4:	24014b10 	.word	0x24014b10

080126d8 <_isatty_r>:
 80126d8:	b538      	push	{r3, r4, r5, lr}
 80126da:	4d06      	ldr	r5, [pc, #24]	@ (80126f4 <_isatty_r+0x1c>)
 80126dc:	2300      	movs	r3, #0
 80126de:	4604      	mov	r4, r0
 80126e0:	4608      	mov	r0, r1
 80126e2:	602b      	str	r3, [r5, #0]
 80126e4:	f7ef fd70 	bl	80021c8 <_isatty>
 80126e8:	1c43      	adds	r3, r0, #1
 80126ea:	d102      	bne.n	80126f2 <_isatty_r+0x1a>
 80126ec:	682b      	ldr	r3, [r5, #0]
 80126ee:	b103      	cbz	r3, 80126f2 <_isatty_r+0x1a>
 80126f0:	6023      	str	r3, [r4, #0]
 80126f2:	bd38      	pop	{r3, r4, r5, pc}
 80126f4:	24014b10 	.word	0x24014b10

080126f8 <__assert_func>:
 80126f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80126fa:	4614      	mov	r4, r2
 80126fc:	461a      	mov	r2, r3
 80126fe:	4b09      	ldr	r3, [pc, #36]	@ (8012724 <__assert_func+0x2c>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	4605      	mov	r5, r0
 8012704:	68d8      	ldr	r0, [r3, #12]
 8012706:	b954      	cbnz	r4, 801271e <__assert_func+0x26>
 8012708:	4b07      	ldr	r3, [pc, #28]	@ (8012728 <__assert_func+0x30>)
 801270a:	461c      	mov	r4, r3
 801270c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012710:	9100      	str	r1, [sp, #0]
 8012712:	462b      	mov	r3, r5
 8012714:	4905      	ldr	r1, [pc, #20]	@ (801272c <__assert_func+0x34>)
 8012716:	f000 f843 	bl	80127a0 <fiprintf>
 801271a:	f000 f853 	bl	80127c4 <abort>
 801271e:	4b04      	ldr	r3, [pc, #16]	@ (8012730 <__assert_func+0x38>)
 8012720:	e7f4      	b.n	801270c <__assert_func+0x14>
 8012722:	bf00      	nop
 8012724:	2400001c 	.word	0x2400001c
 8012728:	0801437c 	.word	0x0801437c
 801272c:	0801434e 	.word	0x0801434e
 8012730:	08014341 	.word	0x08014341

08012734 <_calloc_r>:
 8012734:	b538      	push	{r3, r4, r5, lr}
 8012736:	fba1 1502 	umull	r1, r5, r1, r2
 801273a:	b935      	cbnz	r5, 801274a <_calloc_r+0x16>
 801273c:	f7fb fef4 	bl	800e528 <_malloc_r>
 8012740:	4604      	mov	r4, r0
 8012742:	b938      	cbnz	r0, 8012754 <_calloc_r+0x20>
 8012744:	2400      	movs	r4, #0
 8012746:	4620      	mov	r0, r4
 8012748:	bd38      	pop	{r3, r4, r5, pc}
 801274a:	f7fb fd99 	bl	800e280 <__errno>
 801274e:	230c      	movs	r3, #12
 8012750:	6003      	str	r3, [r0, #0]
 8012752:	e7f7      	b.n	8012744 <_calloc_r+0x10>
 8012754:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8012758:	f022 0203 	bic.w	r2, r2, #3
 801275c:	3a04      	subs	r2, #4
 801275e:	2a24      	cmp	r2, #36	@ 0x24
 8012760:	d819      	bhi.n	8012796 <_calloc_r+0x62>
 8012762:	2a13      	cmp	r2, #19
 8012764:	d915      	bls.n	8012792 <_calloc_r+0x5e>
 8012766:	2a1b      	cmp	r2, #27
 8012768:	e9c0 5500 	strd	r5, r5, [r0]
 801276c:	d806      	bhi.n	801277c <_calloc_r+0x48>
 801276e:	f100 0308 	add.w	r3, r0, #8
 8012772:	2200      	movs	r2, #0
 8012774:	e9c3 2200 	strd	r2, r2, [r3]
 8012778:	609a      	str	r2, [r3, #8]
 801277a:	e7e4      	b.n	8012746 <_calloc_r+0x12>
 801277c:	2a24      	cmp	r2, #36	@ 0x24
 801277e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8012782:	bf11      	iteee	ne
 8012784:	f100 0310 	addne.w	r3, r0, #16
 8012788:	6105      	streq	r5, [r0, #16]
 801278a:	f100 0318 	addeq.w	r3, r0, #24
 801278e:	6145      	streq	r5, [r0, #20]
 8012790:	e7ef      	b.n	8012772 <_calloc_r+0x3e>
 8012792:	4603      	mov	r3, r0
 8012794:	e7ed      	b.n	8012772 <_calloc_r+0x3e>
 8012796:	4629      	mov	r1, r5
 8012798:	f7fb fd23 	bl	800e1e2 <memset>
 801279c:	e7d3      	b.n	8012746 <_calloc_r+0x12>
	...

080127a0 <fiprintf>:
 80127a0:	b40e      	push	{r1, r2, r3}
 80127a2:	b503      	push	{r0, r1, lr}
 80127a4:	4601      	mov	r1, r0
 80127a6:	ab03      	add	r3, sp, #12
 80127a8:	4805      	ldr	r0, [pc, #20]	@ (80127c0 <fiprintf+0x20>)
 80127aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80127ae:	6800      	ldr	r0, [r0, #0]
 80127b0:	9301      	str	r3, [sp, #4]
 80127b2:	f7fd fab7 	bl	800fd24 <_vfiprintf_r>
 80127b6:	b002      	add	sp, #8
 80127b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80127bc:	b003      	add	sp, #12
 80127be:	4770      	bx	lr
 80127c0:	2400001c 	.word	0x2400001c

080127c4 <abort>:
 80127c4:	b508      	push	{r3, lr}
 80127c6:	2006      	movs	r0, #6
 80127c8:	f000 f82c 	bl	8012824 <raise>
 80127cc:	2001      	movs	r0, #1
 80127ce:	f7ef fc9b 	bl	8002108 <_exit>

080127d2 <_raise_r>:
 80127d2:	291f      	cmp	r1, #31
 80127d4:	b538      	push	{r3, r4, r5, lr}
 80127d6:	4605      	mov	r5, r0
 80127d8:	460c      	mov	r4, r1
 80127da:	d904      	bls.n	80127e6 <_raise_r+0x14>
 80127dc:	2316      	movs	r3, #22
 80127de:	6003      	str	r3, [r0, #0]
 80127e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80127e4:	bd38      	pop	{r3, r4, r5, pc}
 80127e6:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 80127ea:	b112      	cbz	r2, 80127f2 <_raise_r+0x20>
 80127ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80127f0:	b94b      	cbnz	r3, 8012806 <_raise_r+0x34>
 80127f2:	4628      	mov	r0, r5
 80127f4:	f000 f830 	bl	8012858 <_getpid_r>
 80127f8:	4622      	mov	r2, r4
 80127fa:	4601      	mov	r1, r0
 80127fc:	4628      	mov	r0, r5
 80127fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012802:	f000 b817 	b.w	8012834 <_kill_r>
 8012806:	2b01      	cmp	r3, #1
 8012808:	d00a      	beq.n	8012820 <_raise_r+0x4e>
 801280a:	1c59      	adds	r1, r3, #1
 801280c:	d103      	bne.n	8012816 <_raise_r+0x44>
 801280e:	2316      	movs	r3, #22
 8012810:	6003      	str	r3, [r0, #0]
 8012812:	2001      	movs	r0, #1
 8012814:	e7e6      	b.n	80127e4 <_raise_r+0x12>
 8012816:	2100      	movs	r1, #0
 8012818:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801281c:	4620      	mov	r0, r4
 801281e:	4798      	blx	r3
 8012820:	2000      	movs	r0, #0
 8012822:	e7df      	b.n	80127e4 <_raise_r+0x12>

08012824 <raise>:
 8012824:	4b02      	ldr	r3, [pc, #8]	@ (8012830 <raise+0xc>)
 8012826:	4601      	mov	r1, r0
 8012828:	6818      	ldr	r0, [r3, #0]
 801282a:	f7ff bfd2 	b.w	80127d2 <_raise_r>
 801282e:	bf00      	nop
 8012830:	2400001c 	.word	0x2400001c

08012834 <_kill_r>:
 8012834:	b538      	push	{r3, r4, r5, lr}
 8012836:	4d07      	ldr	r5, [pc, #28]	@ (8012854 <_kill_r+0x20>)
 8012838:	2300      	movs	r3, #0
 801283a:	4604      	mov	r4, r0
 801283c:	4608      	mov	r0, r1
 801283e:	4611      	mov	r1, r2
 8012840:	602b      	str	r3, [r5, #0]
 8012842:	f7ef fc51 	bl	80020e8 <_kill>
 8012846:	1c43      	adds	r3, r0, #1
 8012848:	d102      	bne.n	8012850 <_kill_r+0x1c>
 801284a:	682b      	ldr	r3, [r5, #0]
 801284c:	b103      	cbz	r3, 8012850 <_kill_r+0x1c>
 801284e:	6023      	str	r3, [r4, #0]
 8012850:	bd38      	pop	{r3, r4, r5, pc}
 8012852:	bf00      	nop
 8012854:	24014b10 	.word	0x24014b10

08012858 <_getpid_r>:
 8012858:	f7ef bc3e 	b.w	80020d8 <_getpid>
 801285c:	0000      	movs	r0, r0
	...

08012860 <cos>:
 8012860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012862:	eeb0 7b40 	vmov.f64	d7, d0
 8012866:	ee17 3a90 	vmov	r3, s15
 801286a:	4a21      	ldr	r2, [pc, #132]	@ (80128f0 <cos+0x90>)
 801286c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012870:	4293      	cmp	r3, r2
 8012872:	d806      	bhi.n	8012882 <cos+0x22>
 8012874:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80128e8 <cos+0x88>
 8012878:	b005      	add	sp, #20
 801287a:	f85d eb04 	ldr.w	lr, [sp], #4
 801287e:	f000 bc97 	b.w	80131b0 <__kernel_cos>
 8012882:	4a1c      	ldr	r2, [pc, #112]	@ (80128f4 <cos+0x94>)
 8012884:	4293      	cmp	r3, r2
 8012886:	d904      	bls.n	8012892 <cos+0x32>
 8012888:	ee30 0b40 	vsub.f64	d0, d0, d0
 801288c:	b005      	add	sp, #20
 801288e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012892:	4668      	mov	r0, sp
 8012894:	f000 fd4c 	bl	8013330 <__ieee754_rem_pio2>
 8012898:	f000 0003 	and.w	r0, r0, #3
 801289c:	2801      	cmp	r0, #1
 801289e:	d009      	beq.n	80128b4 <cos+0x54>
 80128a0:	2802      	cmp	r0, #2
 80128a2:	d010      	beq.n	80128c6 <cos+0x66>
 80128a4:	b9b0      	cbnz	r0, 80128d4 <cos+0x74>
 80128a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128aa:	ed9d 0b00 	vldr	d0, [sp]
 80128ae:	f000 fc7f 	bl	80131b0 <__kernel_cos>
 80128b2:	e7eb      	b.n	801288c <cos+0x2c>
 80128b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128b8:	ed9d 0b00 	vldr	d0, [sp]
 80128bc:	f000 fce0 	bl	8013280 <__kernel_sin>
 80128c0:	eeb1 0b40 	vneg.f64	d0, d0
 80128c4:	e7e2      	b.n	801288c <cos+0x2c>
 80128c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128ca:	ed9d 0b00 	vldr	d0, [sp]
 80128ce:	f000 fc6f 	bl	80131b0 <__kernel_cos>
 80128d2:	e7f5      	b.n	80128c0 <cos+0x60>
 80128d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128d8:	ed9d 0b00 	vldr	d0, [sp]
 80128dc:	2001      	movs	r0, #1
 80128de:	f000 fccf 	bl	8013280 <__kernel_sin>
 80128e2:	e7d3      	b.n	801288c <cos+0x2c>
 80128e4:	f3af 8000 	nop.w
	...
 80128f0:	3fe921fb 	.word	0x3fe921fb
 80128f4:	7fefffff 	.word	0x7fefffff

080128f8 <sin>:
 80128f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80128fa:	eeb0 7b40 	vmov.f64	d7, d0
 80128fe:	ee17 3a90 	vmov	r3, s15
 8012902:	4a21      	ldr	r2, [pc, #132]	@ (8012988 <sin+0x90>)
 8012904:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012908:	4293      	cmp	r3, r2
 801290a:	d807      	bhi.n	801291c <sin+0x24>
 801290c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8012980 <sin+0x88>
 8012910:	2000      	movs	r0, #0
 8012912:	b005      	add	sp, #20
 8012914:	f85d eb04 	ldr.w	lr, [sp], #4
 8012918:	f000 bcb2 	b.w	8013280 <__kernel_sin>
 801291c:	4a1b      	ldr	r2, [pc, #108]	@ (801298c <sin+0x94>)
 801291e:	4293      	cmp	r3, r2
 8012920:	d904      	bls.n	801292c <sin+0x34>
 8012922:	ee30 0b40 	vsub.f64	d0, d0, d0
 8012926:	b005      	add	sp, #20
 8012928:	f85d fb04 	ldr.w	pc, [sp], #4
 801292c:	4668      	mov	r0, sp
 801292e:	f000 fcff 	bl	8013330 <__ieee754_rem_pio2>
 8012932:	f000 0003 	and.w	r0, r0, #3
 8012936:	2801      	cmp	r0, #1
 8012938:	d00a      	beq.n	8012950 <sin+0x58>
 801293a:	2802      	cmp	r0, #2
 801293c:	d00f      	beq.n	801295e <sin+0x66>
 801293e:	b9c0      	cbnz	r0, 8012972 <sin+0x7a>
 8012940:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012944:	ed9d 0b00 	vldr	d0, [sp]
 8012948:	2001      	movs	r0, #1
 801294a:	f000 fc99 	bl	8013280 <__kernel_sin>
 801294e:	e7ea      	b.n	8012926 <sin+0x2e>
 8012950:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012954:	ed9d 0b00 	vldr	d0, [sp]
 8012958:	f000 fc2a 	bl	80131b0 <__kernel_cos>
 801295c:	e7e3      	b.n	8012926 <sin+0x2e>
 801295e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012962:	ed9d 0b00 	vldr	d0, [sp]
 8012966:	2001      	movs	r0, #1
 8012968:	f000 fc8a 	bl	8013280 <__kernel_sin>
 801296c:	eeb1 0b40 	vneg.f64	d0, d0
 8012970:	e7d9      	b.n	8012926 <sin+0x2e>
 8012972:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012976:	ed9d 0b00 	vldr	d0, [sp]
 801297a:	f000 fc19 	bl	80131b0 <__kernel_cos>
 801297e:	e7f5      	b.n	801296c <sin+0x74>
	...
 8012988:	3fe921fb 	.word	0x3fe921fb
 801298c:	7fefffff 	.word	0x7fefffff

08012990 <log>:
 8012990:	b4f0      	push	{r4, r5, r6, r7}
 8012992:	ee10 0a90 	vmov	r0, s1
 8012996:	ee10 3a10 	vmov	r3, s0
 801299a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801299e:	429c      	cmp	r4, r3
 80129a0:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 80129a4:	4c70      	ldr	r4, [pc, #448]	@ (8012b68 <log+0x1d8>)
 80129a6:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 80129aa:	418c      	sbcs	r4, r1
 80129ac:	ed2d 8b02 	vpush	{d8}
 80129b0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80129b4:	d35a      	bcc.n	8012a6c <log+0xdc>
 80129b6:	4a6d      	ldr	r2, [pc, #436]	@ (8012b6c <log+0x1dc>)
 80129b8:	4290      	cmp	r0, r2
 80129ba:	bf08      	it	eq
 80129bc:	2b00      	cmpeq	r3, #0
 80129be:	f000 80c4 	beq.w	8012b4a <log+0x1ba>
 80129c2:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80129c6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80129ca:	4b69      	ldr	r3, [pc, #420]	@ (8012b70 <log+0x1e0>)
 80129cc:	ee20 2b00 	vmul.f64	d2, d0, d0
 80129d0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80129d4:	ee20 4b02 	vmul.f64	d4, d0, d2
 80129d8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80129dc:	eea6 7b00 	vfma.f64	d7, d6, d0
 80129e0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80129e4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80129e8:	eea6 7b02 	vfma.f64	d7, d6, d2
 80129ec:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80129f0:	eea5 6b00 	vfma.f64	d6, d5, d0
 80129f4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80129f8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80129fc:	eea5 6b02 	vfma.f64	d6, d5, d2
 8012a00:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8012a04:	eea3 5b00 	vfma.f64	d5, d3, d0
 8012a08:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8012a0c:	eea3 5b02 	vfma.f64	d5, d3, d2
 8012a10:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8012a14:	eea3 5b04 	vfma.f64	d5, d3, d4
 8012a18:	eea5 6b04 	vfma.f64	d6, d5, d4
 8012a1c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8012a20:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012a24:	eeb0 2b47 	vmov.f64	d2, d7
 8012a28:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8012b50 <log+0x1c0>
 8012a2c:	eeb0 6b40 	vmov.f64	d6, d0
 8012a30:	eeb0 3b40 	vmov.f64	d3, d0
 8012a34:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012a38:	eea0 6b47 	vfms.f64	d6, d0, d7
 8012a3c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8012a40:	ee26 1b06 	vmul.f64	d1, d6, d6
 8012a44:	eea1 3b05 	vfma.f64	d3, d1, d5
 8012a48:	ee30 7b43 	vsub.f64	d7, d0, d3
 8012a4c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8012a50:	eea1 7b05 	vfma.f64	d7, d1, d5
 8012a54:	ee25 5b08 	vmul.f64	d5, d5, d8
 8012a58:	eea5 7b00 	vfma.f64	d7, d5, d0
 8012a5c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8012a60:	ee33 0b07 	vadd.f64	d0, d3, d7
 8012a64:	ecbd 8b02 	vpop	{d8}
 8012a68:	bcf0      	pop	{r4, r5, r6, r7}
 8012a6a:	4770      	bx	lr
 8012a6c:	f1a2 0410 	sub.w	r4, r2, #16
 8012a70:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8012a74:	428c      	cmp	r4, r1
 8012a76:	d923      	bls.n	8012ac0 <log+0x130>
 8012a78:	18d9      	adds	r1, r3, r3
 8012a7a:	eb40 0400 	adc.w	r4, r0, r0
 8012a7e:	4321      	orrs	r1, r4
 8012a80:	d105      	bne.n	8012a8e <log+0xfe>
 8012a82:	ecbd 8b02 	vpop	{d8}
 8012a86:	2001      	movs	r0, #1
 8012a88:	bcf0      	pop	{r4, r5, r6, r7}
 8012a8a:	f000 be01 	b.w	8013690 <__math_divzero>
 8012a8e:	4939      	ldr	r1, [pc, #228]	@ (8012b74 <log+0x1e4>)
 8012a90:	4288      	cmp	r0, r1
 8012a92:	bf08      	it	eq
 8012a94:	2b00      	cmpeq	r3, #0
 8012a96:	d0e5      	beq.n	8012a64 <log+0xd4>
 8012a98:	0413      	lsls	r3, r2, #16
 8012a9a:	d403      	bmi.n	8012aa4 <log+0x114>
 8012a9c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8012aa0:	4393      	bics	r3, r2
 8012aa2:	d104      	bne.n	8012aae <log+0x11e>
 8012aa4:	ecbd 8b02 	vpop	{d8}
 8012aa8:	bcf0      	pop	{r4, r5, r6, r7}
 8012aaa:	f000 be09 	b.w	80136c0 <__math_invalid>
 8012aae:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012b58 <log+0x1c8>
 8012ab2:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012ab6:	ec53 2b17 	vmov	r2, r3, d7
 8012aba:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8012abe:	4613      	mov	r3, r2
 8012ac0:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8012ac4:	492a      	ldr	r1, [pc, #168]	@ (8012b70 <log+0x1e0>)
 8012ac6:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8012aca:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8012ace:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8012ad2:	0d15      	lsrs	r5, r2, #20
 8012ad4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8012ad8:	052d      	lsls	r5, r5, #20
 8012ada:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8012ade:	1e1e      	subs	r6, r3, #0
 8012ae0:	1b47      	subs	r7, r0, r5
 8012ae2:	ec47 6b16 	vmov	d6, r6, r7
 8012ae6:	1512      	asrs	r2, r2, #20
 8012ae8:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012aec:	ee07 2a90 	vmov	s15, r2
 8012af0:	ee25 2b05 	vmul.f64	d2, d5, d5
 8012af4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012af8:	ed91 4b00 	vldr	d4, [r1]
 8012afc:	ee25 1b02 	vmul.f64	d1, d5, d2
 8012b00:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8012b04:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012b08:	ee35 4b07 	vadd.f64	d4, d5, d7
 8012b0c:	ee37 0b44 	vsub.f64	d0, d7, d4
 8012b10:	ed91 7b02 	vldr	d7, [r1, #8]
 8012b14:	ee30 0b05 	vadd.f64	d0, d0, d5
 8012b18:	eea7 0b06 	vfma.f64	d0, d7, d6
 8012b1c:	ed91 7b04 	vldr	d7, [r1, #16]
 8012b20:	ed91 6b08 	vldr	d6, [r1, #32]
 8012b24:	eea7 0b02 	vfma.f64	d0, d7, d2
 8012b28:	ed91 7b06 	vldr	d7, [r1, #24]
 8012b2c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8012b30:	eea6 7b05 	vfma.f64	d7, d6, d5
 8012b34:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8012b38:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012b3c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012b40:	eea1 0b07 	vfma.f64	d0, d1, d7
 8012b44:	ee30 0b04 	vadd.f64	d0, d0, d4
 8012b48:	e78c      	b.n	8012a64 <log+0xd4>
 8012b4a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8012b60 <log+0x1d0>
 8012b4e:	e789      	b.n	8012a64 <log+0xd4>
 8012b50:	00000000 	.word	0x00000000
 8012b54:	41a00000 	.word	0x41a00000
 8012b58:	00000000 	.word	0x00000000
 8012b5c:	43300000 	.word	0x43300000
	...
 8012b68:	000308ff 	.word	0x000308ff
 8012b6c:	3ff00000 	.word	0x3ff00000
 8012b70:	08014380 	.word	0x08014380
 8012b74:	7ff00000 	.word	0x7ff00000

08012b78 <checkint>:
 8012b78:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012b7c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8012b80:	429a      	cmp	r2, r3
 8012b82:	b570      	push	{r4, r5, r6, lr}
 8012b84:	dd2a      	ble.n	8012bdc <checkint+0x64>
 8012b86:	f240 4333 	movw	r3, #1075	@ 0x433
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	dc24      	bgt.n	8012bd8 <checkint+0x60>
 8012b8e:	1a9b      	subs	r3, r3, r2
 8012b90:	f1a3 0620 	sub.w	r6, r3, #32
 8012b94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012b98:	fa02 f403 	lsl.w	r4, r2, r3
 8012b9c:	fa02 f606 	lsl.w	r6, r2, r6
 8012ba0:	f1c3 0520 	rsb	r5, r3, #32
 8012ba4:	fa22 f505 	lsr.w	r5, r2, r5
 8012ba8:	4334      	orrs	r4, r6
 8012baa:	432c      	orrs	r4, r5
 8012bac:	409a      	lsls	r2, r3
 8012bae:	ea20 0202 	bic.w	r2, r0, r2
 8012bb2:	ea21 0404 	bic.w	r4, r1, r4
 8012bb6:	4322      	orrs	r2, r4
 8012bb8:	f1a3 0420 	sub.w	r4, r3, #32
 8012bbc:	f1c3 0220 	rsb	r2, r3, #32
 8012bc0:	d10c      	bne.n	8012bdc <checkint+0x64>
 8012bc2:	40d8      	lsrs	r0, r3
 8012bc4:	fa01 f302 	lsl.w	r3, r1, r2
 8012bc8:	4318      	orrs	r0, r3
 8012bca:	40e1      	lsrs	r1, r4
 8012bcc:	4308      	orrs	r0, r1
 8012bce:	f000 0001 	and.w	r0, r0, #1
 8012bd2:	f1d0 0002 	rsbs	r0, r0, #2
 8012bd6:	bd70      	pop	{r4, r5, r6, pc}
 8012bd8:	2002      	movs	r0, #2
 8012bda:	e7fc      	b.n	8012bd6 <checkint+0x5e>
 8012bdc:	2000      	movs	r0, #0
 8012bde:	e7fa      	b.n	8012bd6 <checkint+0x5e>

08012be0 <pow>:
 8012be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be4:	ee10 4a90 	vmov	r4, s1
 8012be8:	ed2d 8b0a 	vpush	{d8-d12}
 8012bec:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8012bf0:	ee11 aa90 	vmov	sl, s3
 8012bf4:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8012bf8:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	ee10 5a10 	vmov	r5, s0
 8012c02:	ee11 0a10 	vmov	r0, s2
 8012c06:	b087      	sub	sp, #28
 8012c08:	46c4      	mov	ip, r8
 8012c0a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8012c0e:	d806      	bhi.n	8012c1e <pow+0x3e>
 8012c10:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8012c14:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8012c18:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c1a:	f240 8157 	bls.w	8012ecc <pow+0x2ec>
 8012c1e:	1802      	adds	r2, r0, r0
 8012c20:	eb4a 010a 	adc.w	r1, sl, sl
 8012c24:	f06f 0b01 	mvn.w	fp, #1
 8012c28:	1e57      	subs	r7, r2, #1
 8012c2a:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 8012c2e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8012c32:	45bb      	cmp	fp, r7
 8012c34:	eb7e 0303 	sbcs.w	r3, lr, r3
 8012c38:	d242      	bcs.n	8012cc0 <pow+0xe0>
 8012c3a:	ea52 0301 	orrs.w	r3, r2, r1
 8012c3e:	f04f 0300 	mov.w	r3, #0
 8012c42:	d10c      	bne.n	8012c5e <pow+0x7e>
 8012c44:	196d      	adds	r5, r5, r5
 8012c46:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8012c4a:	4164      	adcs	r4, r4
 8012c4c:	42ab      	cmp	r3, r5
 8012c4e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012c52:	41a3      	sbcs	r3, r4
 8012c54:	f0c0 808f 	bcc.w	8012d76 <pow+0x196>
 8012c58:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012c5c:	e02b      	b.n	8012cb6 <pow+0xd6>
 8012c5e:	4ed4      	ldr	r6, [pc, #848]	@ (8012fb0 <pow+0x3d0>)
 8012c60:	42b4      	cmp	r4, r6
 8012c62:	bf08      	it	eq
 8012c64:	429d      	cmpeq	r5, r3
 8012c66:	d109      	bne.n	8012c7c <pow+0x9c>
 8012c68:	1800      	adds	r0, r0, r0
 8012c6a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8012c6e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8012c72:	4283      	cmp	r3, r0
 8012c74:	4bcf      	ldr	r3, [pc, #828]	@ (8012fb4 <pow+0x3d4>)
 8012c76:	eb73 030a 	sbcs.w	r3, r3, sl
 8012c7a:	e7eb      	b.n	8012c54 <pow+0x74>
 8012c7c:	196d      	adds	r5, r5, r5
 8012c7e:	48ce      	ldr	r0, [pc, #824]	@ (8012fb8 <pow+0x3d8>)
 8012c80:	4164      	adcs	r4, r4
 8012c82:	42ab      	cmp	r3, r5
 8012c84:	eb70 0604 	sbcs.w	r6, r0, r4
 8012c88:	d375      	bcc.n	8012d76 <pow+0x196>
 8012c8a:	4281      	cmp	r1, r0
 8012c8c:	bf08      	it	eq
 8012c8e:	429a      	cmpeq	r2, r3
 8012c90:	d171      	bne.n	8012d76 <pow+0x196>
 8012c92:	4aca      	ldr	r2, [pc, #808]	@ (8012fbc <pow+0x3dc>)
 8012c94:	4294      	cmp	r4, r2
 8012c96:	bf08      	it	eq
 8012c98:	429d      	cmpeq	r5, r3
 8012c9a:	d0dd      	beq.n	8012c58 <pow+0x78>
 8012c9c:	4294      	cmp	r4, r2
 8012c9e:	ea6f 0a0a 	mvn.w	sl, sl
 8012ca2:	bf34      	ite	cc
 8012ca4:	2400      	movcc	r4, #0
 8012ca6:	2401      	movcs	r4, #1
 8012ca8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8012cac:	4554      	cmp	r4, sl
 8012cae:	f040 81dc 	bne.w	801306a <pow+0x48a>
 8012cb2:	ee21 0b01 	vmul.f64	d0, d1, d1
 8012cb6:	b007      	add	sp, #28
 8012cb8:	ecbd 8b0a 	vpop	{d8-d12}
 8012cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cc0:	196f      	adds	r7, r5, r5
 8012cc2:	eb44 0904 	adc.w	r9, r4, r4
 8012cc6:	1e7a      	subs	r2, r7, #1
 8012cc8:	f169 0300 	sbc.w	r3, r9, #0
 8012ccc:	4593      	cmp	fp, r2
 8012cce:	eb7e 0303 	sbcs.w	r3, lr, r3
 8012cd2:	d225      	bcs.n	8012d20 <pow+0x140>
 8012cd4:	ee20 0b00 	vmul.f64	d0, d0, d0
 8012cd8:	2c00      	cmp	r4, #0
 8012cda:	da13      	bge.n	8012d04 <pow+0x124>
 8012cdc:	4651      	mov	r1, sl
 8012cde:	f7ff ff4b 	bl	8012b78 <checkint>
 8012ce2:	2801      	cmp	r0, #1
 8012ce4:	d10e      	bne.n	8012d04 <pow+0x124>
 8012ce6:	eeb1 0b40 	vneg.f64	d0, d0
 8012cea:	ea57 0909 	orrs.w	r9, r7, r9
 8012cee:	d10b      	bne.n	8012d08 <pow+0x128>
 8012cf0:	f1ba 0f00 	cmp.w	sl, #0
 8012cf4:	dadf      	bge.n	8012cb6 <pow+0xd6>
 8012cf6:	b007      	add	sp, #28
 8012cf8:	ecbd 8b0a 	vpop	{d8-d12}
 8012cfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d00:	f000 bcc6 	b.w	8013690 <__math_divzero>
 8012d04:	2000      	movs	r0, #0
 8012d06:	e7f0      	b.n	8012cea <pow+0x10a>
 8012d08:	f1ba 0f00 	cmp.w	sl, #0
 8012d0c:	dad3      	bge.n	8012cb6 <pow+0xd6>
 8012d0e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012d12:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012d16:	ed8d 7b00 	vstr	d7, [sp]
 8012d1a:	ed9d 0b00 	vldr	d0, [sp]
 8012d1e:	e7ca      	b.n	8012cb6 <pow+0xd6>
 8012d20:	2c00      	cmp	r4, #0
 8012d22:	da2b      	bge.n	8012d7c <pow+0x19c>
 8012d24:	4651      	mov	r1, sl
 8012d26:	f7ff ff27 	bl	8012b78 <checkint>
 8012d2a:	b930      	cbnz	r0, 8012d3a <pow+0x15a>
 8012d2c:	b007      	add	sp, #28
 8012d2e:	ecbd 8b0a 	vpop	{d8-d12}
 8012d32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d36:	f000 bcc3 	b.w	80136c0 <__math_invalid>
 8012d3a:	1e41      	subs	r1, r0, #1
 8012d3c:	4248      	negs	r0, r1
 8012d3e:	4148      	adcs	r0, r1
 8012d40:	0480      	lsls	r0, r0, #18
 8012d42:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8012d46:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8012d4a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8012d4e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8012d52:	2b7f      	cmp	r3, #127	@ 0x7f
 8012d54:	d92d      	bls.n	8012db2 <pow+0x1d2>
 8012d56:	4b96      	ldr	r3, [pc, #600]	@ (8012fb0 <pow+0x3d0>)
 8012d58:	2000      	movs	r0, #0
 8012d5a:	429c      	cmp	r4, r3
 8012d5c:	bf08      	it	eq
 8012d5e:	4285      	cmpeq	r5, r0
 8012d60:	f43f af7a 	beq.w	8012c58 <pow+0x78>
 8012d64:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8012d68:	428a      	cmp	r2, r1
 8012d6a:	d80c      	bhi.n	8012d86 <pow+0x1a6>
 8012d6c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012d70:	42a8      	cmp	r0, r5
 8012d72:	41a3      	sbcs	r3, r4
 8012d74:	d204      	bcs.n	8012d80 <pow+0x1a0>
 8012d76:	ee31 0b00 	vadd.f64	d0, d1, d0
 8012d7a:	e79c      	b.n	8012cb6 <pow+0xd6>
 8012d7c:	2000      	movs	r0, #0
 8012d7e:	e7e4      	b.n	8012d4a <pow+0x16a>
 8012d80:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012d84:	e797      	b.n	8012cb6 <pow+0xd6>
 8012d86:	2d01      	cmp	r5, #1
 8012d88:	eb74 0303 	sbcs.w	r3, r4, r3
 8012d8c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012d90:	bf34      	ite	cc
 8012d92:	2301      	movcc	r3, #1
 8012d94:	2300      	movcs	r3, #0
 8012d96:	4296      	cmp	r6, r2
 8012d98:	bf8c      	ite	hi
 8012d9a:	2600      	movhi	r6, #0
 8012d9c:	2601      	movls	r6, #1
 8012d9e:	42b3      	cmp	r3, r6
 8012da0:	f000 809c 	beq.w	8012edc <pow+0x2fc>
 8012da4:	b007      	add	sp, #28
 8012da6:	ecbd 8b0a 	vpop	{d8-d12}
 8012daa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dae:	f000 bc67 	b.w	8013680 <__math_oflow>
 8012db2:	f1bc 0f00 	cmp.w	ip, #0
 8012db6:	d10a      	bne.n	8012dce <pow+0x1ee>
 8012db8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8012fa0 <pow+0x3c0>
 8012dbc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012dc0:	ec53 2b17 	vmov	r2, r3, d7
 8012dc4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8012dc8:	4615      	mov	r5, r2
 8012dca:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8012dce:	4a7c      	ldr	r2, [pc, #496]	@ (8012fc0 <pow+0x3e0>)
 8012dd0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8012dd4:	4422      	add	r2, r4
 8012dd6:	1513      	asrs	r3, r2, #20
 8012dd8:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8012ddc:	ee03 3a10 	vmov	s6, r3
 8012de0:	0d12      	lsrs	r2, r2, #20
 8012de2:	4b78      	ldr	r3, [pc, #480]	@ (8012fc4 <pow+0x3e4>)
 8012de4:	0512      	lsls	r2, r2, #20
 8012de6:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8012dea:	1aa7      	subs	r7, r4, r2
 8012dec:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8012df0:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8012df4:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8012df8:	1e2e      	subs	r6, r5, #0
 8012dfa:	ec47 6b14 	vmov	d4, r6, r7
 8012dfe:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8012e02:	eea4 6b05 	vfma.f64	d6, d4, d5
 8012e06:	ed93 5b00 	vldr	d5, [r3]
 8012e0a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8012e0e:	eea3 2b05 	vfma.f64	d2, d3, d5
 8012e12:	ed93 5b02 	vldr	d5, [r3, #8]
 8012e16:	ee36 4b02 	vadd.f64	d4, d6, d2
 8012e1a:	ee32 2b44 	vsub.f64	d2, d2, d4
 8012e1e:	eea3 7b05 	vfma.f64	d7, d3, d5
 8012e22:	ed93 5b04 	vldr	d5, [r3, #16]
 8012e26:	ee32 2b06 	vadd.f64	d2, d2, d6
 8012e2a:	ee37 7b02 	vadd.f64	d7, d7, d2
 8012e2e:	ee26 5b05 	vmul.f64	d5, d6, d5
 8012e32:	ee26 0b05 	vmul.f64	d0, d6, d5
 8012e36:	ee34 8b00 	vadd.f64	d8, d4, d0
 8012e3a:	eeb0 9b40 	vmov.f64	d9, d0
 8012e3e:	ee34 4b48 	vsub.f64	d4, d4, d8
 8012e42:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8012e46:	ee34 ab00 	vadd.f64	d10, d4, d0
 8012e4a:	ed93 5b06 	vldr	d5, [r3, #24]
 8012e4e:	ee26 bb00 	vmul.f64	d11, d6, d0
 8012e52:	ee37 7b09 	vadd.f64	d7, d7, d9
 8012e56:	ed93 4b08 	vldr	d4, [r3, #32]
 8012e5a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8012e5e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8012e62:	eea6 5b04 	vfma.f64	d5, d6, d4
 8012e66:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8012e6a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8012e6e:	eea6 4b03 	vfma.f64	d4, d6, d3
 8012e72:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8012e76:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8012e7a:	eea0 4b03 	vfma.f64	d4, d0, d3
 8012e7e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8012e82:	eeab 7b05 	vfma.f64	d7, d11, d5
 8012e86:	ee38 4b07 	vadd.f64	d4, d8, d7
 8012e8a:	ee21 6b04 	vmul.f64	d6, d1, d4
 8012e8e:	ee16 3a90 	vmov	r3, s13
 8012e92:	eeb0 5b46 	vmov.f64	d5, d6
 8012e96:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8012e9a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8012e9e:	18b2      	adds	r2, r6, r2
 8012ea0:	2a3e      	cmp	r2, #62	@ 0x3e
 8012ea2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8012ea6:	ee38 8b44 	vsub.f64	d8, d8, d4
 8012eaa:	ee38 8b07 	vadd.f64	d8, d8, d7
 8012eae:	eea1 5b08 	vfma.f64	d5, d1, d8
 8012eb2:	d91b      	bls.n	8012eec <pow+0x30c>
 8012eb4:	2a00      	cmp	r2, #0
 8012eb6:	da0b      	bge.n	8012ed0 <pow+0x2f0>
 8012eb8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012ebc:	ee36 0b00 	vadd.f64	d0, d6, d0
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	f43f aef8 	beq.w	8012cb6 <pow+0xd6>
 8012ec6:	eeb1 0b40 	vneg.f64	d0, d0
 8012eca:	e6f4      	b.n	8012cb6 <pow+0xd6>
 8012ecc:	2000      	movs	r0, #0
 8012ece:	e77e      	b.n	8012dce <pow+0x1ee>
 8012ed0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8012ed4:	d909      	bls.n	8012eea <pow+0x30a>
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	f6bf af64 	bge.w	8012da4 <pow+0x1c4>
 8012edc:	b007      	add	sp, #28
 8012ede:	ecbd 8b0a 	vpop	{d8-d12}
 8012ee2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ee6:	f000 bbc3 	b.w	8013670 <__math_uflow>
 8012eea:	2600      	movs	r6, #0
 8012eec:	4936      	ldr	r1, [pc, #216]	@ (8012fc8 <pow+0x3e8>)
 8012eee:	ed91 4b02 	vldr	d4, [r1, #8]
 8012ef2:	ed91 3b00 	vldr	d3, [r1]
 8012ef6:	eeb0 7b44 	vmov.f64	d7, d4
 8012efa:	eea6 7b03 	vfma.f64	d7, d6, d3
 8012efe:	ee17 5a10 	vmov	r5, s14
 8012f02:	ee37 7b44 	vsub.f64	d7, d7, d4
 8012f06:	ed91 4b04 	vldr	d4, [r1, #16]
 8012f0a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8012f0e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012f12:	ed91 4b06 	vldr	d4, [r1, #24]
 8012f16:	18dc      	adds	r4, r3, r3
 8012f18:	f104 030f 	add.w	r3, r4, #15
 8012f1c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8012f20:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012f24:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8012f28:	ee35 5b06 	vadd.f64	d5, d5, d6
 8012f2c:	ee25 6b05 	vmul.f64	d6, d5, d5
 8012f30:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8012f34:	ed91 4b08 	vldr	d4, [r1, #32]
 8012f38:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012f3c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8012f40:	eea5 4b03 	vfma.f64	d4, d5, d3
 8012f44:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8012f48:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012f4c:	ee26 6b06 	vmul.f64	d6, d6, d6
 8012f50:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8012f54:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8012f58:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8012f5c:	eea5 4b03 	vfma.f64	d4, d5, d3
 8012f60:	1940      	adds	r0, r0, r5
 8012f62:	2700      	movs	r7, #0
 8012f64:	eb17 020c 	adds.w	r2, r7, ip
 8012f68:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8012f6c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012f70:	2e00      	cmp	r6, #0
 8012f72:	d175      	bne.n	8013060 <pow+0x480>
 8012f74:	42bd      	cmp	r5, r7
 8012f76:	db29      	blt.n	8012fcc <pow+0x3ec>
 8012f78:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8012f7c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8012f80:	4610      	mov	r0, r2
 8012f82:	ec41 0b10 	vmov	d0, r0, r1
 8012f86:	eea7 0b00 	vfma.f64	d0, d7, d0
 8012f8a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8012fa8 <pow+0x3c8>
 8012f8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012f92:	b007      	add	sp, #28
 8012f94:	ecbd 8b0a 	vpop	{d8-d12}
 8012f98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f9c:	f000 bba8 	b.w	80136f0 <__math_check_oflow>
 8012fa0:	00000000 	.word	0x00000000
 8012fa4:	43300000 	.word	0x43300000
 8012fa8:	00000000 	.word	0x00000000
 8012fac:	7f000000 	.word	0x7f000000
 8012fb0:	3ff00000 	.word	0x3ff00000
 8012fb4:	fff00000 	.word	0xfff00000
 8012fb8:	ffe00000 	.word	0xffe00000
 8012fbc:	7fe00000 	.word	0x7fe00000
 8012fc0:	c0196aab 	.word	0xc0196aab
 8012fc4:	08014c10 	.word	0x08014c10
 8012fc8:	08015de0 	.word	0x08015de0
 8012fcc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012fd0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8012fd4:	4610      	mov	r0, r2
 8012fd6:	ec41 0b15 	vmov	d5, r0, r1
 8012fda:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8012fde:	ee27 6b05 	vmul.f64	d6, d7, d5
 8012fe2:	ee35 7b06 	vadd.f64	d7, d5, d6
 8012fe6:	eeb0 4bc7 	vabs.f64	d4, d7
 8012fea:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8012fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8013070 <pow+0x490>
 8012ff6:	d52a      	bpl.n	801304e <pow+0x46e>
 8012ff8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012ffc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013004:	ee35 5b06 	vadd.f64	d5, d5, d6
 8013008:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801300c:	bf58      	it	pl
 801300e:	eeb0 4b43 	vmovpl.f64	d4, d3
 8013012:	ee37 3b04 	vadd.f64	d3, d7, d4
 8013016:	ee34 6b43 	vsub.f64	d6, d4, d3
 801301a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801301e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8013022:	ee36 6b03 	vadd.f64	d6, d6, d3
 8013026:	ee36 7b44 	vsub.f64	d7, d6, d4
 801302a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801302e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013032:	d104      	bne.n	801303e <pow+0x45e>
 8013034:	4632      	mov	r2, r6
 8013036:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801303a:	ec43 2b17 	vmov	d7, r2, r3
 801303e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013042:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013046:	ee26 6b00 	vmul.f64	d6, d6, d0
 801304a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801304e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8013052:	b007      	add	sp, #28
 8013054:	ecbd 8b0a 	vpop	{d8-d12}
 8013058:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801305c:	f000 bb3f 	b.w	80136de <__math_check_uflow>
 8013060:	ec43 2b10 	vmov	d0, r2, r3
 8013064:	eea7 0b00 	vfma.f64	d0, d7, d0
 8013068:	e625      	b.n	8012cb6 <pow+0xd6>
 801306a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8013078 <pow+0x498>
 801306e:	e622      	b.n	8012cb6 <pow+0xd6>
 8013070:	00000000 	.word	0x00000000
 8013074:	00100000 	.word	0x00100000
	...

08013080 <cabs>:
 8013080:	b508      	push	{r3, lr}
 8013082:	ed2d 8b06 	vpush	{d8-d10}
 8013086:	eeb0 ab40 	vmov.f64	d10, d0
 801308a:	eeb0 9b41 	vmov.f64	d9, d1
 801308e:	f000 f815 	bl	80130bc <creal>
 8013092:	eeb0 1b49 	vmov.f64	d1, d9
 8013096:	eeb0 8b40 	vmov.f64	d8, d0
 801309a:	eeb0 0b4a 	vmov.f64	d0, d10
 801309e:	f000 f80a 	bl	80130b6 <cimag>
 80130a2:	eeb0 1b40 	vmov.f64	d1, d0
 80130a6:	eeb0 0b48 	vmov.f64	d0, d8
 80130aa:	ecbd 8b06 	vpop	{d8-d10}
 80130ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80130b2:	f000 ba81 	b.w	80135b8 <hypot>

080130b6 <cimag>:
 80130b6:	eeb0 0b41 	vmov.f64	d0, d1
 80130ba:	4770      	bx	lr

080130bc <creal>:
 80130bc:	4770      	bx	lr
	...

080130c0 <floor>:
 80130c0:	ee10 3a90 	vmov	r3, s1
 80130c4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80130c8:	ee10 2a10 	vmov	r2, s0
 80130cc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80130d0:	2913      	cmp	r1, #19
 80130d2:	b530      	push	{r4, r5, lr}
 80130d4:	4615      	mov	r5, r2
 80130d6:	dc33      	bgt.n	8013140 <floor+0x80>
 80130d8:	2900      	cmp	r1, #0
 80130da:	da18      	bge.n	801310e <floor+0x4e>
 80130dc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80131a0 <floor+0xe0>
 80130e0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80130e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80130e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ec:	dd0a      	ble.n	8013104 <floor+0x44>
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	da50      	bge.n	8013194 <floor+0xd4>
 80130f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80130f6:	4313      	orrs	r3, r2
 80130f8:	2200      	movs	r2, #0
 80130fa:	4293      	cmp	r3, r2
 80130fc:	4b2a      	ldr	r3, [pc, #168]	@ (80131a8 <floor+0xe8>)
 80130fe:	bf08      	it	eq
 8013100:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013104:	4619      	mov	r1, r3
 8013106:	4610      	mov	r0, r2
 8013108:	ec41 0b10 	vmov	d0, r0, r1
 801310c:	e01f      	b.n	801314e <floor+0x8e>
 801310e:	4827      	ldr	r0, [pc, #156]	@ (80131ac <floor+0xec>)
 8013110:	4108      	asrs	r0, r1
 8013112:	ea03 0400 	and.w	r4, r3, r0
 8013116:	4314      	orrs	r4, r2
 8013118:	d019      	beq.n	801314e <floor+0x8e>
 801311a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80131a0 <floor+0xe0>
 801311e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013122:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801312a:	ddeb      	ble.n	8013104 <floor+0x44>
 801312c:	2b00      	cmp	r3, #0
 801312e:	bfbe      	ittt	lt
 8013130:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8013134:	410a      	asrlt	r2, r1
 8013136:	189b      	addlt	r3, r3, r2
 8013138:	ea23 0300 	bic.w	r3, r3, r0
 801313c:	2200      	movs	r2, #0
 801313e:	e7e1      	b.n	8013104 <floor+0x44>
 8013140:	2933      	cmp	r1, #51	@ 0x33
 8013142:	dd05      	ble.n	8013150 <floor+0x90>
 8013144:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013148:	d101      	bne.n	801314e <floor+0x8e>
 801314a:	ee30 0b00 	vadd.f64	d0, d0, d0
 801314e:	bd30      	pop	{r4, r5, pc}
 8013150:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8013154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013158:	40e0      	lsrs	r0, r4
 801315a:	4210      	tst	r0, r2
 801315c:	d0f7      	beq.n	801314e <floor+0x8e>
 801315e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80131a0 <floor+0xe0>
 8013162:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013166:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801316e:	ddc9      	ble.n	8013104 <floor+0x44>
 8013170:	2b00      	cmp	r3, #0
 8013172:	da02      	bge.n	801317a <floor+0xba>
 8013174:	2914      	cmp	r1, #20
 8013176:	d103      	bne.n	8013180 <floor+0xc0>
 8013178:	3301      	adds	r3, #1
 801317a:	ea22 0200 	bic.w	r2, r2, r0
 801317e:	e7c1      	b.n	8013104 <floor+0x44>
 8013180:	2401      	movs	r4, #1
 8013182:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8013186:	fa04 f101 	lsl.w	r1, r4, r1
 801318a:	440a      	add	r2, r1
 801318c:	42aa      	cmp	r2, r5
 801318e:	bf38      	it	cc
 8013190:	191b      	addcc	r3, r3, r4
 8013192:	e7f2      	b.n	801317a <floor+0xba>
 8013194:	2200      	movs	r2, #0
 8013196:	4613      	mov	r3, r2
 8013198:	e7b4      	b.n	8013104 <floor+0x44>
 801319a:	bf00      	nop
 801319c:	f3af 8000 	nop.w
 80131a0:	8800759c 	.word	0x8800759c
 80131a4:	7e37e43c 	.word	0x7e37e43c
 80131a8:	bff00000 	.word	0xbff00000
 80131ac:	000fffff 	.word	0x000fffff

080131b0 <__kernel_cos>:
 80131b0:	eeb0 5b40 	vmov.f64	d5, d0
 80131b4:	ee15 1a90 	vmov	r1, s11
 80131b8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80131bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80131c0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 80131c4:	d204      	bcs.n	80131d0 <__kernel_cos+0x20>
 80131c6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 80131ca:	ee17 3a90 	vmov	r3, s15
 80131ce:	b343      	cbz	r3, 8013222 <__kernel_cos+0x72>
 80131d0:	ee25 6b05 	vmul.f64	d6, d5, d5
 80131d4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 80131d8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8013248 <__kernel_cos+0x98>
 80131dc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8013250 <__kernel_cos+0xa0>
 80131e0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80131e4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8013258 <__kernel_cos+0xa8>
 80131e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80131ec:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8013260 <__kernel_cos+0xb0>
 80131f0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80131f4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8013268 <__kernel_cos+0xb8>
 80131f8:	4b1f      	ldr	r3, [pc, #124]	@ (8013278 <__kernel_cos+0xc8>)
 80131fa:	eea4 7b06 	vfma.f64	d7, d4, d6
 80131fe:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8013270 <__kernel_cos+0xc0>
 8013202:	4299      	cmp	r1, r3
 8013204:	eea7 4b06 	vfma.f64	d4, d7, d6
 8013208:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801320c:	ee24 4b06 	vmul.f64	d4, d4, d6
 8013210:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013214:	eea6 1b04 	vfma.f64	d1, d6, d4
 8013218:	d804      	bhi.n	8013224 <__kernel_cos+0x74>
 801321a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801321e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013222:	4770      	bx	lr
 8013224:	4b15      	ldr	r3, [pc, #84]	@ (801327c <__kernel_cos+0xcc>)
 8013226:	4299      	cmp	r1, r3
 8013228:	d809      	bhi.n	801323e <__kernel_cos+0x8e>
 801322a:	2200      	movs	r2, #0
 801322c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8013230:	ec43 2b16 	vmov	d6, r2, r3
 8013234:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013238:	ee37 7b46 	vsub.f64	d7, d7, d6
 801323c:	e7ed      	b.n	801321a <__kernel_cos+0x6a>
 801323e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8013242:	e7f7      	b.n	8013234 <__kernel_cos+0x84>
 8013244:	f3af 8000 	nop.w
 8013248:	be8838d4 	.word	0xbe8838d4
 801324c:	bda8fae9 	.word	0xbda8fae9
 8013250:	bdb4b1c4 	.word	0xbdb4b1c4
 8013254:	3e21ee9e 	.word	0x3e21ee9e
 8013258:	809c52ad 	.word	0x809c52ad
 801325c:	be927e4f 	.word	0xbe927e4f
 8013260:	19cb1590 	.word	0x19cb1590
 8013264:	3efa01a0 	.word	0x3efa01a0
 8013268:	16c15177 	.word	0x16c15177
 801326c:	bf56c16c 	.word	0xbf56c16c
 8013270:	5555554c 	.word	0x5555554c
 8013274:	3fa55555 	.word	0x3fa55555
 8013278:	3fd33332 	.word	0x3fd33332
 801327c:	3fe90000 	.word	0x3fe90000

08013280 <__kernel_sin>:
 8013280:	ee10 3a90 	vmov	r3, s1
 8013284:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013288:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801328c:	d204      	bcs.n	8013298 <__kernel_sin+0x18>
 801328e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8013292:	ee17 3a90 	vmov	r3, s15
 8013296:	b35b      	cbz	r3, 80132f0 <__kernel_sin+0x70>
 8013298:	ee20 6b00 	vmul.f64	d6, d0, d0
 801329c:	ee20 5b06 	vmul.f64	d5, d0, d6
 80132a0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80132f8 <__kernel_sin+0x78>
 80132a4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8013300 <__kernel_sin+0x80>
 80132a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80132ac:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013308 <__kernel_sin+0x88>
 80132b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80132b4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8013310 <__kernel_sin+0x90>
 80132b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80132bc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013318 <__kernel_sin+0x98>
 80132c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80132c4:	b930      	cbnz	r0, 80132d4 <__kernel_sin+0x54>
 80132c6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8013320 <__kernel_sin+0xa0>
 80132ca:	eea6 4b07 	vfma.f64	d4, d6, d7
 80132ce:	eea4 0b05 	vfma.f64	d0, d4, d5
 80132d2:	4770      	bx	lr
 80132d4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80132d8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 80132dc:	eea1 7b04 	vfma.f64	d7, d1, d4
 80132e0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80132e4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8013328 <__kernel_sin+0xa8>
 80132e8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80132ec:	ee30 0b41 	vsub.f64	d0, d0, d1
 80132f0:	4770      	bx	lr
 80132f2:	bf00      	nop
 80132f4:	f3af 8000 	nop.w
 80132f8:	5acfd57c 	.word	0x5acfd57c
 80132fc:	3de5d93a 	.word	0x3de5d93a
 8013300:	8a2b9ceb 	.word	0x8a2b9ceb
 8013304:	be5ae5e6 	.word	0xbe5ae5e6
 8013308:	57b1fe7d 	.word	0x57b1fe7d
 801330c:	3ec71de3 	.word	0x3ec71de3
 8013310:	19c161d5 	.word	0x19c161d5
 8013314:	bf2a01a0 	.word	0xbf2a01a0
 8013318:	1110f8a6 	.word	0x1110f8a6
 801331c:	3f811111 	.word	0x3f811111
 8013320:	55555549 	.word	0x55555549
 8013324:	bfc55555 	.word	0xbfc55555
 8013328:	55555549 	.word	0x55555549
 801332c:	3fc55555 	.word	0x3fc55555

08013330 <__ieee754_rem_pio2>:
 8013330:	b570      	push	{r4, r5, r6, lr}
 8013332:	eeb0 7b40 	vmov.f64	d7, d0
 8013336:	ee17 5a90 	vmov	r5, s15
 801333a:	4b99      	ldr	r3, [pc, #612]	@ (80135a0 <__ieee754_rem_pio2+0x270>)
 801333c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013340:	429e      	cmp	r6, r3
 8013342:	b088      	sub	sp, #32
 8013344:	4604      	mov	r4, r0
 8013346:	d807      	bhi.n	8013358 <__ieee754_rem_pio2+0x28>
 8013348:	2200      	movs	r2, #0
 801334a:	2300      	movs	r3, #0
 801334c:	ed84 0b00 	vstr	d0, [r4]
 8013350:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013354:	2000      	movs	r0, #0
 8013356:	e01b      	b.n	8013390 <__ieee754_rem_pio2+0x60>
 8013358:	4b92      	ldr	r3, [pc, #584]	@ (80135a4 <__ieee754_rem_pio2+0x274>)
 801335a:	429e      	cmp	r6, r3
 801335c:	d83b      	bhi.n	80133d6 <__ieee754_rem_pio2+0xa6>
 801335e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8013362:	2d00      	cmp	r5, #0
 8013364:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8013560 <__ieee754_rem_pio2+0x230>
 8013368:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801336c:	dd19      	ble.n	80133a2 <__ieee754_rem_pio2+0x72>
 801336e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013372:	429e      	cmp	r6, r3
 8013374:	d00e      	beq.n	8013394 <__ieee754_rem_pio2+0x64>
 8013376:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8013568 <__ieee754_rem_pio2+0x238>
 801337a:	ee37 6b45 	vsub.f64	d6, d7, d5
 801337e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013382:	ed84 6b00 	vstr	d6, [r4]
 8013386:	ee37 7b45 	vsub.f64	d7, d7, d5
 801338a:	ed84 7b02 	vstr	d7, [r4, #8]
 801338e:	2001      	movs	r0, #1
 8013390:	b008      	add	sp, #32
 8013392:	bd70      	pop	{r4, r5, r6, pc}
 8013394:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8013570 <__ieee754_rem_pio2+0x240>
 8013398:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8013578 <__ieee754_rem_pio2+0x248>
 801339c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80133a0:	e7eb      	b.n	801337a <__ieee754_rem_pio2+0x4a>
 80133a2:	429e      	cmp	r6, r3
 80133a4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80133a8:	d00e      	beq.n	80133c8 <__ieee754_rem_pio2+0x98>
 80133aa:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8013568 <__ieee754_rem_pio2+0x238>
 80133ae:	ee37 6b05 	vadd.f64	d6, d7, d5
 80133b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80133b6:	ed84 6b00 	vstr	d6, [r4]
 80133ba:	ee37 7b05 	vadd.f64	d7, d7, d5
 80133be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80133c2:	ed84 7b02 	vstr	d7, [r4, #8]
 80133c6:	e7e3      	b.n	8013390 <__ieee754_rem_pio2+0x60>
 80133c8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8013570 <__ieee754_rem_pio2+0x240>
 80133cc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8013578 <__ieee754_rem_pio2+0x248>
 80133d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80133d4:	e7eb      	b.n	80133ae <__ieee754_rem_pio2+0x7e>
 80133d6:	4b74      	ldr	r3, [pc, #464]	@ (80135a8 <__ieee754_rem_pio2+0x278>)
 80133d8:	429e      	cmp	r6, r3
 80133da:	d870      	bhi.n	80134be <__ieee754_rem_pio2+0x18e>
 80133dc:	f000 f914 	bl	8013608 <fabs>
 80133e0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80133e4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013580 <__ieee754_rem_pio2+0x250>
 80133e8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80133ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80133f0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80133f4:	ee17 0a90 	vmov	r0, s15
 80133f8:	eeb1 4b45 	vneg.f64	d4, d5
 80133fc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8013560 <__ieee754_rem_pio2+0x230>
 8013400:	eea5 0b47 	vfms.f64	d0, d5, d7
 8013404:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8013568 <__ieee754_rem_pio2+0x238>
 8013408:	281f      	cmp	r0, #31
 801340a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801340e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013412:	dc05      	bgt.n	8013420 <__ieee754_rem_pio2+0xf0>
 8013414:	4b65      	ldr	r3, [pc, #404]	@ (80135ac <__ieee754_rem_pio2+0x27c>)
 8013416:	1e42      	subs	r2, r0, #1
 8013418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801341c:	42b3      	cmp	r3, r6
 801341e:	d109      	bne.n	8013434 <__ieee754_rem_pio2+0x104>
 8013420:	ee16 3a90 	vmov	r3, s13
 8013424:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013428:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801342c:	2b10      	cmp	r3, #16
 801342e:	ea4f 5226 	mov.w	r2, r6, asr #20
 8013432:	dc02      	bgt.n	801343a <__ieee754_rem_pio2+0x10a>
 8013434:	ed84 6b00 	vstr	d6, [r4]
 8013438:	e01a      	b.n	8013470 <__ieee754_rem_pio2+0x140>
 801343a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8013570 <__ieee754_rem_pio2+0x240>
 801343e:	eeb0 6b40 	vmov.f64	d6, d0
 8013442:	eea4 6b03 	vfma.f64	d6, d4, d3
 8013446:	ee30 7b46 	vsub.f64	d7, d0, d6
 801344a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801344e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8013578 <__ieee754_rem_pio2+0x248>
 8013452:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8013456:	ee36 3b47 	vsub.f64	d3, d6, d7
 801345a:	ee13 3a90 	vmov	r3, s7
 801345e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013462:	1ad3      	subs	r3, r2, r3
 8013464:	2b31      	cmp	r3, #49	@ 0x31
 8013466:	dc17      	bgt.n	8013498 <__ieee754_rem_pio2+0x168>
 8013468:	eeb0 0b46 	vmov.f64	d0, d6
 801346c:	ed84 3b00 	vstr	d3, [r4]
 8013470:	ed94 6b00 	vldr	d6, [r4]
 8013474:	2d00      	cmp	r5, #0
 8013476:	ee30 0b46 	vsub.f64	d0, d0, d6
 801347a:	ee30 0b47 	vsub.f64	d0, d0, d7
 801347e:	ed84 0b02 	vstr	d0, [r4, #8]
 8013482:	da85      	bge.n	8013390 <__ieee754_rem_pio2+0x60>
 8013484:	eeb1 6b46 	vneg.f64	d6, d6
 8013488:	eeb1 0b40 	vneg.f64	d0, d0
 801348c:	ed84 6b00 	vstr	d6, [r4]
 8013490:	ed84 0b02 	vstr	d0, [r4, #8]
 8013494:	4240      	negs	r0, r0
 8013496:	e77b      	b.n	8013390 <__ieee754_rem_pio2+0x60>
 8013498:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8013588 <__ieee754_rem_pio2+0x258>
 801349c:	eeb0 0b46 	vmov.f64	d0, d6
 80134a0:	eea4 0b07 	vfma.f64	d0, d4, d7
 80134a4:	ee36 6b40 	vsub.f64	d6, d6, d0
 80134a8:	eea4 6b07 	vfma.f64	d6, d4, d7
 80134ac:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8013590 <__ieee754_rem_pio2+0x260>
 80134b0:	eeb0 7b46 	vmov.f64	d7, d6
 80134b4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80134b8:	ee30 6b47 	vsub.f64	d6, d0, d7
 80134bc:	e7ba      	b.n	8013434 <__ieee754_rem_pio2+0x104>
 80134be:	4b3c      	ldr	r3, [pc, #240]	@ (80135b0 <__ieee754_rem_pio2+0x280>)
 80134c0:	429e      	cmp	r6, r3
 80134c2:	d906      	bls.n	80134d2 <__ieee754_rem_pio2+0x1a2>
 80134c4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80134c8:	ed80 7b02 	vstr	d7, [r0, #8]
 80134cc:	ed80 7b00 	vstr	d7, [r0]
 80134d0:	e740      	b.n	8013354 <__ieee754_rem_pio2+0x24>
 80134d2:	ee10 3a10 	vmov	r3, s0
 80134d6:	1532      	asrs	r2, r6, #20
 80134d8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80134dc:	4618      	mov	r0, r3
 80134de:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80134e2:	ec41 0b17 	vmov	d7, r0, r1
 80134e6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80134ea:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8013598 <__ieee754_rem_pio2+0x268>
 80134ee:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80134f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80134f6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80134fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80134fe:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013502:	a808      	add	r0, sp, #32
 8013504:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013508:	ee37 7b46 	vsub.f64	d7, d7, d6
 801350c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013510:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013514:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013518:	2103      	movs	r1, #3
 801351a:	ed30 7b02 	vldmdb	r0!, {d7}
 801351e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013526:	460b      	mov	r3, r1
 8013528:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 801352c:	d0f5      	beq.n	801351a <__ieee754_rem_pio2+0x1ea>
 801352e:	4921      	ldr	r1, [pc, #132]	@ (80135b4 <__ieee754_rem_pio2+0x284>)
 8013530:	9101      	str	r1, [sp, #4]
 8013532:	2102      	movs	r1, #2
 8013534:	9100      	str	r1, [sp, #0]
 8013536:	a802      	add	r0, sp, #8
 8013538:	4621      	mov	r1, r4
 801353a:	f000 f8ed 	bl	8013718 <__kernel_rem_pio2>
 801353e:	2d00      	cmp	r5, #0
 8013540:	f6bf af26 	bge.w	8013390 <__ieee754_rem_pio2+0x60>
 8013544:	ed94 7b00 	vldr	d7, [r4]
 8013548:	eeb1 7b47 	vneg.f64	d7, d7
 801354c:	ed84 7b00 	vstr	d7, [r4]
 8013550:	ed94 7b02 	vldr	d7, [r4, #8]
 8013554:	eeb1 7b47 	vneg.f64	d7, d7
 8013558:	ed84 7b02 	vstr	d7, [r4, #8]
 801355c:	e79a      	b.n	8013494 <__ieee754_rem_pio2+0x164>
 801355e:	bf00      	nop
 8013560:	54400000 	.word	0x54400000
 8013564:	3ff921fb 	.word	0x3ff921fb
 8013568:	1a626331 	.word	0x1a626331
 801356c:	3dd0b461 	.word	0x3dd0b461
 8013570:	1a600000 	.word	0x1a600000
 8013574:	3dd0b461 	.word	0x3dd0b461
 8013578:	2e037073 	.word	0x2e037073
 801357c:	3ba3198a 	.word	0x3ba3198a
 8013580:	6dc9c883 	.word	0x6dc9c883
 8013584:	3fe45f30 	.word	0x3fe45f30
 8013588:	2e000000 	.word	0x2e000000
 801358c:	3ba3198a 	.word	0x3ba3198a
 8013590:	252049c1 	.word	0x252049c1
 8013594:	397b839a 	.word	0x397b839a
 8013598:	00000000 	.word	0x00000000
 801359c:	41700000 	.word	0x41700000
 80135a0:	3fe921fb 	.word	0x3fe921fb
 80135a4:	4002d97b 	.word	0x4002d97b
 80135a8:	413921fb 	.word	0x413921fb
 80135ac:	08015c58 	.word	0x08015c58
 80135b0:	7fefffff 	.word	0x7fefffff
 80135b4:	08015cd8 	.word	0x08015cd8

080135b8 <hypot>:
 80135b8:	b508      	push	{r3, lr}
 80135ba:	ed2d 8b06 	vpush	{d8-d10}
 80135be:	eeb0 ab40 	vmov.f64	d10, d0
 80135c2:	eeb0 9b41 	vmov.f64	d9, d1
 80135c6:	f000 fb23 	bl	8013c10 <__ieee754_hypot>
 80135ca:	eeb0 8b40 	vmov.f64	d8, d0
 80135ce:	f000 f823 	bl	8013618 <finite>
 80135d2:	b978      	cbnz	r0, 80135f4 <hypot+0x3c>
 80135d4:	eeb0 0b4a 	vmov.f64	d0, d10
 80135d8:	f000 f81e 	bl	8013618 <finite>
 80135dc:	b150      	cbz	r0, 80135f4 <hypot+0x3c>
 80135de:	eeb0 0b49 	vmov.f64	d0, d9
 80135e2:	f000 f819 	bl	8013618 <finite>
 80135e6:	b128      	cbz	r0, 80135f4 <hypot+0x3c>
 80135e8:	f7fa fe4a 	bl	800e280 <__errno>
 80135ec:	ed9f 8b04 	vldr	d8, [pc, #16]	@ 8013600 <hypot+0x48>
 80135f0:	2322      	movs	r3, #34	@ 0x22
 80135f2:	6003      	str	r3, [r0, #0]
 80135f4:	eeb0 0b48 	vmov.f64	d0, d8
 80135f8:	ecbd 8b06 	vpop	{d8-d10}
 80135fc:	bd08      	pop	{r3, pc}
 80135fe:	bf00      	nop
 8013600:	00000000 	.word	0x00000000
 8013604:	7ff00000 	.word	0x7ff00000

08013608 <fabs>:
 8013608:	ec51 0b10 	vmov	r0, r1, d0
 801360c:	4602      	mov	r2, r0
 801360e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013612:	ec43 2b10 	vmov	d0, r2, r3
 8013616:	4770      	bx	lr

08013618 <finite>:
 8013618:	b082      	sub	sp, #8
 801361a:	ed8d 0b00 	vstr	d0, [sp]
 801361e:	9801      	ldr	r0, [sp, #4]
 8013620:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8013624:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8013628:	0fc0      	lsrs	r0, r0, #31
 801362a:	b002      	add	sp, #8
 801362c:	4770      	bx	lr

0801362e <with_errno>:
 801362e:	b510      	push	{r4, lr}
 8013630:	ed2d 8b02 	vpush	{d8}
 8013634:	eeb0 8b40 	vmov.f64	d8, d0
 8013638:	4604      	mov	r4, r0
 801363a:	f7fa fe21 	bl	800e280 <__errno>
 801363e:	eeb0 0b48 	vmov.f64	d0, d8
 8013642:	ecbd 8b02 	vpop	{d8}
 8013646:	6004      	str	r4, [r0, #0]
 8013648:	bd10      	pop	{r4, pc}

0801364a <xflow>:
 801364a:	b082      	sub	sp, #8
 801364c:	b158      	cbz	r0, 8013666 <xflow+0x1c>
 801364e:	eeb1 7b40 	vneg.f64	d7, d0
 8013652:	ed8d 7b00 	vstr	d7, [sp]
 8013656:	ed9d 7b00 	vldr	d7, [sp]
 801365a:	2022      	movs	r0, #34	@ 0x22
 801365c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013660:	b002      	add	sp, #8
 8013662:	f7ff bfe4 	b.w	801362e <with_errno>
 8013666:	eeb0 7b40 	vmov.f64	d7, d0
 801366a:	e7f2      	b.n	8013652 <xflow+0x8>
 801366c:	0000      	movs	r0, r0
	...

08013670 <__math_uflow>:
 8013670:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013678 <__math_uflow+0x8>
 8013674:	f7ff bfe9 	b.w	801364a <xflow>
 8013678:	00000000 	.word	0x00000000
 801367c:	10000000 	.word	0x10000000

08013680 <__math_oflow>:
 8013680:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013688 <__math_oflow+0x8>
 8013684:	f7ff bfe1 	b.w	801364a <xflow>
 8013688:	00000000 	.word	0x00000000
 801368c:	70000000 	.word	0x70000000

08013690 <__math_divzero>:
 8013690:	b082      	sub	sp, #8
 8013692:	2800      	cmp	r0, #0
 8013694:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8013698:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801369c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80136a0:	ed8d 7b00 	vstr	d7, [sp]
 80136a4:	ed9d 0b00 	vldr	d0, [sp]
 80136a8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80136b8 <__math_divzero+0x28>
 80136ac:	2022      	movs	r0, #34	@ 0x22
 80136ae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80136b2:	b002      	add	sp, #8
 80136b4:	f7ff bfbb 	b.w	801362e <with_errno>
	...

080136c0 <__math_invalid>:
 80136c0:	eeb0 7b40 	vmov.f64	d7, d0
 80136c4:	eeb4 7b47 	vcmp.f64	d7, d7
 80136c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136cc:	ee30 6b40 	vsub.f64	d6, d0, d0
 80136d0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80136d4:	d602      	bvs.n	80136dc <__math_invalid+0x1c>
 80136d6:	2021      	movs	r0, #33	@ 0x21
 80136d8:	f7ff bfa9 	b.w	801362e <with_errno>
 80136dc:	4770      	bx	lr

080136de <__math_check_uflow>:
 80136de:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80136e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136e6:	d102      	bne.n	80136ee <__math_check_uflow+0x10>
 80136e8:	2022      	movs	r0, #34	@ 0x22
 80136ea:	f7ff bfa0 	b.w	801362e <with_errno>
 80136ee:	4770      	bx	lr

080136f0 <__math_check_oflow>:
 80136f0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8013710 <__math_check_oflow+0x20>
 80136f4:	eeb0 7bc0 	vabs.f64	d7, d0
 80136f8:	eeb4 7b46 	vcmp.f64	d7, d6
 80136fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013700:	dd02      	ble.n	8013708 <__math_check_oflow+0x18>
 8013702:	2022      	movs	r0, #34	@ 0x22
 8013704:	f7ff bf93 	b.w	801362e <with_errno>
 8013708:	4770      	bx	lr
 801370a:	bf00      	nop
 801370c:	f3af 8000 	nop.w
 8013710:	ffffffff 	.word	0xffffffff
 8013714:	7fefffff 	.word	0x7fefffff

08013718 <__kernel_rem_pio2>:
 8013718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801371c:	ed2d 8b06 	vpush	{d8-d10}
 8013720:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8013724:	469b      	mov	fp, r3
 8013726:	9001      	str	r0, [sp, #4]
 8013728:	4bbb      	ldr	r3, [pc, #748]	@ (8013a18 <__kernel_rem_pio2+0x300>)
 801372a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801372c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8013730:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8013734:	f112 0f14 	cmn.w	r2, #20
 8013738:	bfa8      	it	ge
 801373a:	1ed3      	subge	r3, r2, #3
 801373c:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 8013740:	bfb8      	it	lt
 8013742:	2300      	movlt	r3, #0
 8013744:	f06f 0517 	mvn.w	r5, #23
 8013748:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8013a00 <__kernel_rem_pio2+0x2e8>
 801374c:	bfa4      	itt	ge
 801374e:	2018      	movge	r0, #24
 8013750:	fb93 f3f0 	sdivge	r3, r3, r0
 8013754:	fb03 5505 	mla	r5, r3, r5, r5
 8013758:	eba3 040a 	sub.w	r4, r3, sl
 801375c:	4415      	add	r5, r2
 801375e:	460f      	mov	r7, r1
 8013760:	eb09 060a 	add.w	r6, r9, sl
 8013764:	a81a      	add	r0, sp, #104	@ 0x68
 8013766:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801376a:	2200      	movs	r2, #0
 801376c:	42b2      	cmp	r2, r6
 801376e:	dd0e      	ble.n	801378e <__kernel_rem_pio2+0x76>
 8013770:	aa1a      	add	r2, sp, #104	@ 0x68
 8013772:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8013776:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801377a:	2600      	movs	r6, #0
 801377c:	454e      	cmp	r6, r9
 801377e:	dc25      	bgt.n	80137cc <__kernel_rem_pio2+0xb4>
 8013780:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8013a00 <__kernel_rem_pio2+0x2e8>
 8013784:	f8dd c004 	ldr.w	ip, [sp, #4]
 8013788:	4614      	mov	r4, r2
 801378a:	2000      	movs	r0, #0
 801378c:	e015      	b.n	80137ba <__kernel_rem_pio2+0xa2>
 801378e:	42d4      	cmn	r4, r2
 8013790:	d409      	bmi.n	80137a6 <__kernel_rem_pio2+0x8e>
 8013792:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8013796:	ee07 1a90 	vmov	s15, r1
 801379a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801379e:	eca0 7b02 	vstmia	r0!, {d7}
 80137a2:	3201      	adds	r2, #1
 80137a4:	e7e2      	b.n	801376c <__kernel_rem_pio2+0x54>
 80137a6:	eeb0 7b46 	vmov.f64	d7, d6
 80137aa:	e7f8      	b.n	801379e <__kernel_rem_pio2+0x86>
 80137ac:	ecbc 5b02 	vldmia	ip!, {d5}
 80137b0:	ed94 6b00 	vldr	d6, [r4]
 80137b4:	3001      	adds	r0, #1
 80137b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80137ba:	4550      	cmp	r0, sl
 80137bc:	f1a4 0408 	sub.w	r4, r4, #8
 80137c0:	ddf4      	ble.n	80137ac <__kernel_rem_pio2+0x94>
 80137c2:	ecae 7b02 	vstmia	lr!, {d7}
 80137c6:	3601      	adds	r6, #1
 80137c8:	3208      	adds	r2, #8
 80137ca:	e7d7      	b.n	801377c <__kernel_rem_pio2+0x64>
 80137cc:	aa06      	add	r2, sp, #24
 80137ce:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8013a08 <__kernel_rem_pio2+0x2f0>
 80137d2:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8013a10 <__kernel_rem_pio2+0x2f8>
 80137d6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80137da:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80137de:	9203      	str	r2, [sp, #12]
 80137e0:	9302      	str	r3, [sp, #8]
 80137e2:	464c      	mov	r4, r9
 80137e4:	00e3      	lsls	r3, r4, #3
 80137e6:	9304      	str	r3, [sp, #16]
 80137e8:	ab92      	add	r3, sp, #584	@ 0x248
 80137ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80137ee:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80137f2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80137f4:	ab06      	add	r3, sp, #24
 80137f6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80137fa:	461e      	mov	r6, r3
 80137fc:	4620      	mov	r0, r4
 80137fe:	2800      	cmp	r0, #0
 8013800:	f1a2 0208 	sub.w	r2, r2, #8
 8013804:	dc4a      	bgt.n	801389c <__kernel_rem_pio2+0x184>
 8013806:	4628      	mov	r0, r5
 8013808:	9305      	str	r3, [sp, #20]
 801380a:	f000 fab5 	bl	8013d78 <scalbn>
 801380e:	eeb0 8b40 	vmov.f64	d8, d0
 8013812:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8013816:	ee28 0b00 	vmul.f64	d0, d8, d0
 801381a:	f7ff fc51 	bl	80130c0 <floor>
 801381e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8013822:	eea0 8b47 	vfms.f64	d8, d0, d7
 8013826:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801382a:	2d00      	cmp	r5, #0
 801382c:	ee17 8a90 	vmov	r8, s15
 8013830:	9b05      	ldr	r3, [sp, #20]
 8013832:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013836:	ee38 8b47 	vsub.f64	d8, d8, d7
 801383a:	dd41      	ble.n	80138c0 <__kernel_rem_pio2+0x1a8>
 801383c:	1e60      	subs	r0, r4, #1
 801383e:	aa06      	add	r2, sp, #24
 8013840:	f1c5 0c18 	rsb	ip, r5, #24
 8013844:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8013848:	fa46 f20c 	asr.w	r2, r6, ip
 801384c:	4490      	add	r8, r2
 801384e:	fa02 f20c 	lsl.w	r2, r2, ip
 8013852:	1ab6      	subs	r6, r6, r2
 8013854:	aa06      	add	r2, sp, #24
 8013856:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801385a:	f1c5 0217 	rsb	r2, r5, #23
 801385e:	4116      	asrs	r6, r2
 8013860:	2e00      	cmp	r6, #0
 8013862:	dd3c      	ble.n	80138de <__kernel_rem_pio2+0x1c6>
 8013864:	f04f 0c00 	mov.w	ip, #0
 8013868:	f108 0801 	add.w	r8, r8, #1
 801386c:	4660      	mov	r0, ip
 801386e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8013872:	4564      	cmp	r4, ip
 8013874:	dc66      	bgt.n	8013944 <__kernel_rem_pio2+0x22c>
 8013876:	2d00      	cmp	r5, #0
 8013878:	dd03      	ble.n	8013882 <__kernel_rem_pio2+0x16a>
 801387a:	2d01      	cmp	r5, #1
 801387c:	d072      	beq.n	8013964 <__kernel_rem_pio2+0x24c>
 801387e:	2d02      	cmp	r5, #2
 8013880:	d07a      	beq.n	8013978 <__kernel_rem_pio2+0x260>
 8013882:	2e02      	cmp	r6, #2
 8013884:	d12b      	bne.n	80138de <__kernel_rem_pio2+0x1c6>
 8013886:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801388a:	ee30 8b48 	vsub.f64	d8, d0, d8
 801388e:	b330      	cbz	r0, 80138de <__kernel_rem_pio2+0x1c6>
 8013890:	4628      	mov	r0, r5
 8013892:	f000 fa71 	bl	8013d78 <scalbn>
 8013896:	ee38 8b40 	vsub.f64	d8, d8, d0
 801389a:	e020      	b.n	80138de <__kernel_rem_pio2+0x1c6>
 801389c:	ee20 7b09 	vmul.f64	d7, d0, d9
 80138a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80138a4:	3801      	subs	r0, #1
 80138a6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80138aa:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80138ae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80138b2:	eca6 0a01 	vstmia	r6!, {s0}
 80138b6:	ed92 0b00 	vldr	d0, [r2]
 80138ba:	ee37 0b00 	vadd.f64	d0, d7, d0
 80138be:	e79e      	b.n	80137fe <__kernel_rem_pio2+0xe6>
 80138c0:	d105      	bne.n	80138ce <__kernel_rem_pio2+0x1b6>
 80138c2:	1e62      	subs	r2, r4, #1
 80138c4:	a906      	add	r1, sp, #24
 80138c6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80138ca:	15f6      	asrs	r6, r6, #23
 80138cc:	e7c8      	b.n	8013860 <__kernel_rem_pio2+0x148>
 80138ce:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80138d2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80138d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138da:	da31      	bge.n	8013940 <__kernel_rem_pio2+0x228>
 80138dc:	2600      	movs	r6, #0
 80138de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80138e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138e6:	f040 809b 	bne.w	8013a20 <__kernel_rem_pio2+0x308>
 80138ea:	1e62      	subs	r2, r4, #1
 80138ec:	2000      	movs	r0, #0
 80138ee:	454a      	cmp	r2, r9
 80138f0:	da49      	bge.n	8013986 <__kernel_rem_pio2+0x26e>
 80138f2:	2800      	cmp	r0, #0
 80138f4:	d062      	beq.n	80139bc <__kernel_rem_pio2+0x2a4>
 80138f6:	3c01      	subs	r4, #1
 80138f8:	ab06      	add	r3, sp, #24
 80138fa:	3d18      	subs	r5, #24
 80138fc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d0f8      	beq.n	80138f6 <__kernel_rem_pio2+0x1de>
 8013904:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013908:	4628      	mov	r0, r5
 801390a:	f000 fa35 	bl	8013d78 <scalbn>
 801390e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8013a08 <__kernel_rem_pio2+0x2f0>
 8013912:	1c62      	adds	r2, r4, #1
 8013914:	a96a      	add	r1, sp, #424	@ 0x1a8
 8013916:	00d3      	lsls	r3, r2, #3
 8013918:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801391c:	4622      	mov	r2, r4
 801391e:	2a00      	cmp	r2, #0
 8013920:	f280 80a8 	bge.w	8013a74 <__kernel_rem_pio2+0x35c>
 8013924:	4622      	mov	r2, r4
 8013926:	2a00      	cmp	r2, #0
 8013928:	f2c0 80c6 	blt.w	8013ab8 <__kernel_rem_pio2+0x3a0>
 801392c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801392e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8013932:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8013a00 <__kernel_rem_pio2+0x2e8>
 8013936:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8013a1c <__kernel_rem_pio2+0x304>
 801393a:	2000      	movs	r0, #0
 801393c:	1aa1      	subs	r1, r4, r2
 801393e:	e0b0      	b.n	8013aa2 <__kernel_rem_pio2+0x38a>
 8013940:	2602      	movs	r6, #2
 8013942:	e78f      	b.n	8013864 <__kernel_rem_pio2+0x14c>
 8013944:	f853 2b04 	ldr.w	r2, [r3], #4
 8013948:	b948      	cbnz	r0, 801395e <__kernel_rem_pio2+0x246>
 801394a:	b122      	cbz	r2, 8013956 <__kernel_rem_pio2+0x23e>
 801394c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8013950:	f843 2c04 	str.w	r2, [r3, #-4]
 8013954:	2201      	movs	r2, #1
 8013956:	f10c 0c01 	add.w	ip, ip, #1
 801395a:	4610      	mov	r0, r2
 801395c:	e789      	b.n	8013872 <__kernel_rem_pio2+0x15a>
 801395e:	ebae 0202 	sub.w	r2, lr, r2
 8013962:	e7f5      	b.n	8013950 <__kernel_rem_pio2+0x238>
 8013964:	1e62      	subs	r2, r4, #1
 8013966:	ab06      	add	r3, sp, #24
 8013968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801396c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013970:	a906      	add	r1, sp, #24
 8013972:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013976:	e784      	b.n	8013882 <__kernel_rem_pio2+0x16a>
 8013978:	1e62      	subs	r2, r4, #1
 801397a:	ab06      	add	r3, sp, #24
 801397c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013980:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013984:	e7f4      	b.n	8013970 <__kernel_rem_pio2+0x258>
 8013986:	ab06      	add	r3, sp, #24
 8013988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801398c:	3a01      	subs	r2, #1
 801398e:	4318      	orrs	r0, r3
 8013990:	e7ad      	b.n	80138ee <__kernel_rem_pio2+0x1d6>
 8013992:	3301      	adds	r3, #1
 8013994:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8013998:	2800      	cmp	r0, #0
 801399a:	d0fa      	beq.n	8013992 <__kernel_rem_pio2+0x27a>
 801399c:	9a04      	ldr	r2, [sp, #16]
 801399e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 80139a2:	446a      	add	r2, sp
 80139a4:	eb04 000b 	add.w	r0, r4, fp
 80139a8:	a91a      	add	r1, sp, #104	@ 0x68
 80139aa:	1c66      	adds	r6, r4, #1
 80139ac:	3a98      	subs	r2, #152	@ 0x98
 80139ae:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80139b2:	4423      	add	r3, r4
 80139b4:	42b3      	cmp	r3, r6
 80139b6:	da04      	bge.n	80139c2 <__kernel_rem_pio2+0x2aa>
 80139b8:	461c      	mov	r4, r3
 80139ba:	e713      	b.n	80137e4 <__kernel_rem_pio2+0xcc>
 80139bc:	9a03      	ldr	r2, [sp, #12]
 80139be:	2301      	movs	r3, #1
 80139c0:	e7e8      	b.n	8013994 <__kernel_rem_pio2+0x27c>
 80139c2:	9902      	ldr	r1, [sp, #8]
 80139c4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80139c8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80139cc:	9104      	str	r1, [sp, #16]
 80139ce:	ee07 1a90 	vmov	s15, r1
 80139d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80139d6:	2400      	movs	r4, #0
 80139d8:	eca0 7b02 	vstmia	r0!, {d7}
 80139dc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8013a00 <__kernel_rem_pio2+0x2e8>
 80139e0:	4686      	mov	lr, r0
 80139e2:	4554      	cmp	r4, sl
 80139e4:	dd03      	ble.n	80139ee <__kernel_rem_pio2+0x2d6>
 80139e6:	eca2 7b02 	vstmia	r2!, {d7}
 80139ea:	3601      	adds	r6, #1
 80139ec:	e7e2      	b.n	80139b4 <__kernel_rem_pio2+0x29c>
 80139ee:	ecbc 5b02 	vldmia	ip!, {d5}
 80139f2:	ed3e 6b02 	vldmdb	lr!, {d6}
 80139f6:	3401      	adds	r4, #1
 80139f8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80139fc:	e7f1      	b.n	80139e2 <__kernel_rem_pio2+0x2ca>
 80139fe:	bf00      	nop
	...
 8013a0c:	3e700000 	.word	0x3e700000
 8013a10:	00000000 	.word	0x00000000
 8013a14:	41700000 	.word	0x41700000
 8013a18:	08016690 	.word	0x08016690
 8013a1c:	08016650 	.word	0x08016650
 8013a20:	4268      	negs	r0, r5
 8013a22:	eeb0 0b48 	vmov.f64	d0, d8
 8013a26:	f000 f9a7 	bl	8013d78 <scalbn>
 8013a2a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8013bf8 <__kernel_rem_pio2+0x4e0>
 8013a2e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8013a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a36:	db17      	blt.n	8013a68 <__kernel_rem_pio2+0x350>
 8013a38:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8013c00 <__kernel_rem_pio2+0x4e8>
 8013a3c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013a40:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8013a44:	aa06      	add	r2, sp, #24
 8013a46:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8013a4a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8013a4e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013a52:	3518      	adds	r5, #24
 8013a54:	ee10 3a10 	vmov	r3, s0
 8013a58:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013a5c:	ee17 3a10 	vmov	r3, s14
 8013a60:	3401      	adds	r4, #1
 8013a62:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013a66:	e74d      	b.n	8013904 <__kernel_rem_pio2+0x1ec>
 8013a68:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013a6c:	aa06      	add	r2, sp, #24
 8013a6e:	ee10 3a10 	vmov	r3, s0
 8013a72:	e7f6      	b.n	8013a62 <__kernel_rem_pio2+0x34a>
 8013a74:	a806      	add	r0, sp, #24
 8013a76:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013a7a:	9001      	str	r0, [sp, #4]
 8013a7c:	ee07 0a90 	vmov	s15, r0
 8013a80:	3a01      	subs	r2, #1
 8013a82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013a86:	ee27 7b00 	vmul.f64	d7, d7, d0
 8013a8a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8013a8e:	ed21 7b02 	vstmdb	r1!, {d7}
 8013a92:	e744      	b.n	801391e <__kernel_rem_pio2+0x206>
 8013a94:	ecbc 5b02 	vldmia	ip!, {d5}
 8013a98:	ecb5 6b02 	vldmia	r5!, {d6}
 8013a9c:	3001      	adds	r0, #1
 8013a9e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013aa2:	4548      	cmp	r0, r9
 8013aa4:	dc01      	bgt.n	8013aaa <__kernel_rem_pio2+0x392>
 8013aa6:	4281      	cmp	r1, r0
 8013aa8:	daf4      	bge.n	8013a94 <__kernel_rem_pio2+0x37c>
 8013aaa:	a842      	add	r0, sp, #264	@ 0x108
 8013aac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013ab0:	ed81 7b00 	vstr	d7, [r1]
 8013ab4:	3a01      	subs	r2, #1
 8013ab6:	e736      	b.n	8013926 <__kernel_rem_pio2+0x20e>
 8013ab8:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8013aba:	2a02      	cmp	r2, #2
 8013abc:	dc0a      	bgt.n	8013ad4 <__kernel_rem_pio2+0x3bc>
 8013abe:	2a00      	cmp	r2, #0
 8013ac0:	dc2d      	bgt.n	8013b1e <__kernel_rem_pio2+0x406>
 8013ac2:	d046      	beq.n	8013b52 <__kernel_rem_pio2+0x43a>
 8013ac4:	f008 0007 	and.w	r0, r8, #7
 8013ac8:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8013acc:	ecbd 8b06 	vpop	{d8-d10}
 8013ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ad4:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8013ad6:	2a03      	cmp	r2, #3
 8013ad8:	d1f4      	bne.n	8013ac4 <__kernel_rem_pio2+0x3ac>
 8013ada:	a942      	add	r1, sp, #264	@ 0x108
 8013adc:	f1a3 0208 	sub.w	r2, r3, #8
 8013ae0:	440a      	add	r2, r1
 8013ae2:	4611      	mov	r1, r2
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	2800      	cmp	r0, #0
 8013ae8:	f1a1 0108 	sub.w	r1, r1, #8
 8013aec:	dc52      	bgt.n	8013b94 <__kernel_rem_pio2+0x47c>
 8013aee:	4621      	mov	r1, r4
 8013af0:	2901      	cmp	r1, #1
 8013af2:	f1a2 0208 	sub.w	r2, r2, #8
 8013af6:	dc5d      	bgt.n	8013bb4 <__kernel_rem_pio2+0x49c>
 8013af8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8013c08 <__kernel_rem_pio2+0x4f0>
 8013afc:	aa42      	add	r2, sp, #264	@ 0x108
 8013afe:	4413      	add	r3, r2
 8013b00:	2c01      	cmp	r4, #1
 8013b02:	dc67      	bgt.n	8013bd4 <__kernel_rem_pio2+0x4bc>
 8013b04:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8013b08:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8013b0c:	2e00      	cmp	r6, #0
 8013b0e:	d167      	bne.n	8013be0 <__kernel_rem_pio2+0x4c8>
 8013b10:	ed87 5b00 	vstr	d5, [r7]
 8013b14:	ed87 6b02 	vstr	d6, [r7, #8]
 8013b18:	ed87 7b04 	vstr	d7, [r7, #16]
 8013b1c:	e7d2      	b.n	8013ac4 <__kernel_rem_pio2+0x3ac>
 8013b1e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8013c08 <__kernel_rem_pio2+0x4f0>
 8013b22:	aa42      	add	r2, sp, #264	@ 0x108
 8013b24:	4413      	add	r3, r2
 8013b26:	4622      	mov	r2, r4
 8013b28:	2a00      	cmp	r2, #0
 8013b2a:	da24      	bge.n	8013b76 <__kernel_rem_pio2+0x45e>
 8013b2c:	b34e      	cbz	r6, 8013b82 <__kernel_rem_pio2+0x46a>
 8013b2e:	eeb1 7b46 	vneg.f64	d7, d6
 8013b32:	ed87 7b00 	vstr	d7, [r7]
 8013b36:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8013b3a:	aa44      	add	r2, sp, #272	@ 0x110
 8013b3c:	2301      	movs	r3, #1
 8013b3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013b42:	429c      	cmp	r4, r3
 8013b44:	da20      	bge.n	8013b88 <__kernel_rem_pio2+0x470>
 8013b46:	b10e      	cbz	r6, 8013b4c <__kernel_rem_pio2+0x434>
 8013b48:	eeb1 7b47 	vneg.f64	d7, d7
 8013b4c:	ed87 7b02 	vstr	d7, [r7, #8]
 8013b50:	e7b8      	b.n	8013ac4 <__kernel_rem_pio2+0x3ac>
 8013b52:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8013c08 <__kernel_rem_pio2+0x4f0>
 8013b56:	aa42      	add	r2, sp, #264	@ 0x108
 8013b58:	4413      	add	r3, r2
 8013b5a:	2c00      	cmp	r4, #0
 8013b5c:	da05      	bge.n	8013b6a <__kernel_rem_pio2+0x452>
 8013b5e:	b10e      	cbz	r6, 8013b64 <__kernel_rem_pio2+0x44c>
 8013b60:	eeb1 7b47 	vneg.f64	d7, d7
 8013b64:	ed87 7b00 	vstr	d7, [r7]
 8013b68:	e7ac      	b.n	8013ac4 <__kernel_rem_pio2+0x3ac>
 8013b6a:	ed33 6b02 	vldmdb	r3!, {d6}
 8013b6e:	3c01      	subs	r4, #1
 8013b70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013b74:	e7f1      	b.n	8013b5a <__kernel_rem_pio2+0x442>
 8013b76:	ed33 7b02 	vldmdb	r3!, {d7}
 8013b7a:	3a01      	subs	r2, #1
 8013b7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8013b80:	e7d2      	b.n	8013b28 <__kernel_rem_pio2+0x410>
 8013b82:	eeb0 7b46 	vmov.f64	d7, d6
 8013b86:	e7d4      	b.n	8013b32 <__kernel_rem_pio2+0x41a>
 8013b88:	ecb2 6b02 	vldmia	r2!, {d6}
 8013b8c:	3301      	adds	r3, #1
 8013b8e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013b92:	e7d6      	b.n	8013b42 <__kernel_rem_pio2+0x42a>
 8013b94:	ed91 7b00 	vldr	d7, [r1]
 8013b98:	ed91 5b02 	vldr	d5, [r1, #8]
 8013b9c:	3801      	subs	r0, #1
 8013b9e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8013ba2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013ba6:	ed81 6b00 	vstr	d6, [r1]
 8013baa:	ee37 7b05 	vadd.f64	d7, d7, d5
 8013bae:	ed81 7b02 	vstr	d7, [r1, #8]
 8013bb2:	e798      	b.n	8013ae6 <__kernel_rem_pio2+0x3ce>
 8013bb4:	ed92 7b00 	vldr	d7, [r2]
 8013bb8:	ed92 5b02 	vldr	d5, [r2, #8]
 8013bbc:	3901      	subs	r1, #1
 8013bbe:	ee37 6b05 	vadd.f64	d6, d7, d5
 8013bc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013bc6:	ed82 6b00 	vstr	d6, [r2]
 8013bca:	ee37 7b05 	vadd.f64	d7, d7, d5
 8013bce:	ed82 7b02 	vstr	d7, [r2, #8]
 8013bd2:	e78d      	b.n	8013af0 <__kernel_rem_pio2+0x3d8>
 8013bd4:	ed33 6b02 	vldmdb	r3!, {d6}
 8013bd8:	3c01      	subs	r4, #1
 8013bda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013bde:	e78f      	b.n	8013b00 <__kernel_rem_pio2+0x3e8>
 8013be0:	eeb1 5b45 	vneg.f64	d5, d5
 8013be4:	eeb1 6b46 	vneg.f64	d6, d6
 8013be8:	ed87 5b00 	vstr	d5, [r7]
 8013bec:	eeb1 7b47 	vneg.f64	d7, d7
 8013bf0:	ed87 6b02 	vstr	d6, [r7, #8]
 8013bf4:	e790      	b.n	8013b18 <__kernel_rem_pio2+0x400>
 8013bf6:	bf00      	nop
 8013bf8:	00000000 	.word	0x00000000
 8013bfc:	41700000 	.word	0x41700000
 8013c00:	00000000 	.word	0x00000000
 8013c04:	3e700000 	.word	0x3e700000
	...

08013c10 <__ieee754_hypot>:
 8013c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c12:	ec51 0b10 	vmov	r0, r1, d0
 8013c16:	ec53 2b11 	vmov	r2, r3, d1
 8013c1a:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8013c1e:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8013c22:	42a5      	cmp	r5, r4
 8013c24:	da05      	bge.n	8013c32 <__ieee754_hypot+0x22>
 8013c26:	462e      	mov	r6, r5
 8013c28:	4625      	mov	r5, r4
 8013c2a:	4634      	mov	r4, r6
 8013c2c:	4606      	mov	r6, r0
 8013c2e:	4610      	mov	r0, r2
 8013c30:	4632      	mov	r2, r6
 8013c32:	4623      	mov	r3, r4
 8013c34:	ec43 2b14 	vmov	d4, r2, r3
 8013c38:	1b2b      	subs	r3, r5, r4
 8013c3a:	4629      	mov	r1, r5
 8013c3c:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8013c40:	ec41 0b10 	vmov	d0, r0, r1
 8013c44:	dd02      	ble.n	8013c4c <__ieee754_hypot+0x3c>
 8013c46:	ee30 0b04 	vadd.f64	d0, d0, d4
 8013c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c4c:	4b46      	ldr	r3, [pc, #280]	@ (8013d68 <__ieee754_hypot+0x158>)
 8013c4e:	429d      	cmp	r5, r3
 8013c50:	dd58      	ble.n	8013d04 <__ieee754_hypot+0xf4>
 8013c52:	4b46      	ldr	r3, [pc, #280]	@ (8013d6c <__ieee754_hypot+0x15c>)
 8013c54:	429d      	cmp	r5, r3
 8013c56:	dd0f      	ble.n	8013c78 <__ieee754_hypot+0x68>
 8013c58:	ee14 3a10 	vmov	r3, s8
 8013c5c:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 8013c60:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013c64:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8013c68:	4305      	orrs	r5, r0
 8013c6a:	bf18      	it	ne
 8013c6c:	ee30 0b04 	vaddne.f64	d0, d0, d4
 8013c70:	431c      	orrs	r4, r3
 8013c72:	fe04 0b00 	vseleq.f64	d0, d4, d0
 8013c76:	e7e8      	b.n	8013c4a <__ieee754_hypot+0x3a>
 8013c78:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 8013c7c:	4602      	mov	r2, r0
 8013c7e:	462b      	mov	r3, r5
 8013c80:	ec43 2b10 	vmov	d0, r2, r3
 8013c84:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 8013c88:	ec53 2b14 	vmov	r2, r3, d4
 8013c8c:	4623      	mov	r3, r4
 8013c8e:	ec43 2b14 	vmov	d4, r2, r3
 8013c92:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8013c96:	4b36      	ldr	r3, [pc, #216]	@ (8013d70 <__ieee754_hypot+0x160>)
 8013c98:	429c      	cmp	r4, r3
 8013c9a:	dc0e      	bgt.n	8013cba <__ieee754_hypot+0xaa>
 8013c9c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8013ca0:	da32      	bge.n	8013d08 <__ieee754_hypot+0xf8>
 8013ca2:	ee14 3a10 	vmov	r3, s8
 8013ca6:	4323      	orrs	r3, r4
 8013ca8:	d0cf      	beq.n	8013c4a <__ieee754_hypot+0x3a>
 8013caa:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8013d60 <__ieee754_hypot+0x150>
 8013cae:	f2a6 36fe 	subw	r6, r6, #1022	@ 0x3fe
 8013cb2:	ee24 4b07 	vmul.f64	d4, d4, d7
 8013cb6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013cba:	ee30 5b44 	vsub.f64	d5, d0, d4
 8013cbe:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8013cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cc6:	f04f 0200 	mov.w	r2, #0
 8013cca:	d52e      	bpl.n	8013d2a <__ieee754_hypot+0x11a>
 8013ccc:	462b      	mov	r3, r5
 8013cce:	ec43 2b17 	vmov	d7, r2, r3
 8013cd2:	ee30 6b07 	vadd.f64	d6, d0, d7
 8013cd6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013cda:	ee26 0b00 	vmul.f64	d0, d6, d0
 8013cde:	eea4 0b04 	vfma.f64	d0, d4, d4
 8013ce2:	eea7 0b07 	vfma.f64	d0, d7, d7
 8013ce6:	f000 f8c5 	bl	8013e74 <__ieee754_sqrt>
 8013cea:	2e00      	cmp	r6, #0
 8013cec:	d0ad      	beq.n	8013c4a <__ieee754_hypot+0x3a>
 8013cee:	0533      	lsls	r3, r6, #20
 8013cf0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8013cf4:	2000      	movs	r0, #0
 8013cf6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8013cfa:	ec41 0b17 	vmov	d7, r0, r1
 8013cfe:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013d02:	e7a2      	b.n	8013c4a <__ieee754_hypot+0x3a>
 8013d04:	2600      	movs	r6, #0
 8013d06:	e7c6      	b.n	8013c96 <__ieee754_hypot+0x86>
 8013d08:	ec53 2b10 	vmov	r2, r3, d0
 8013d0c:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 8013d10:	462b      	mov	r3, r5
 8013d12:	ec43 2b10 	vmov	d0, r2, r3
 8013d16:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 8013d1a:	ec53 2b14 	vmov	r2, r3, d4
 8013d1e:	4623      	mov	r3, r4
 8013d20:	ec43 2b14 	vmov	d4, r2, r3
 8013d24:	f5a6 7616 	sub.w	r6, r6, #600	@ 0x258
 8013d28:	e7c7      	b.n	8013cba <__ieee754_hypot+0xaa>
 8013d2a:	4623      	mov	r3, r4
 8013d2c:	ec43 2b16 	vmov	d6, r2, r3
 8013d30:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 8013d34:	2200      	movs	r2, #0
 8013d36:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 8013d3a:	ec43 2b17 	vmov	d7, r2, r3
 8013d3e:	ee34 3b46 	vsub.f64	d3, d4, d6
 8013d42:	eeb0 2b47 	vmov.f64	d2, d7
 8013d46:	ee90 2b01 	vfnms.f64	d2, d0, d1
 8013d4a:	ee24 0b02 	vmul.f64	d0, d4, d2
 8013d4e:	eea3 0b07 	vfma.f64	d0, d3, d7
 8013d52:	eea5 0b05 	vfma.f64	d0, d5, d5
 8013d56:	eea6 0b07 	vfma.f64	d0, d6, d7
 8013d5a:	e7c4      	b.n	8013ce6 <__ieee754_hypot+0xd6>
 8013d5c:	f3af 8000 	nop.w
 8013d60:	00000000 	.word	0x00000000
 8013d64:	7fd00000 	.word	0x7fd00000
 8013d68:	5f300000 	.word	0x5f300000
 8013d6c:	7fefffff 	.word	0x7fefffff
 8013d70:	20afffff 	.word	0x20afffff
 8013d74:	00000000 	.word	0x00000000

08013d78 <scalbn>:
 8013d78:	ee10 1a90 	vmov	r1, s1
 8013d7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013d80:	b98b      	cbnz	r3, 8013da6 <scalbn+0x2e>
 8013d82:	ee10 3a10 	vmov	r3, s0
 8013d86:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8013d8a:	4319      	orrs	r1, r3
 8013d8c:	d00a      	beq.n	8013da4 <scalbn+0x2c>
 8013d8e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013e40 <scalbn+0xc8>
 8013d92:	4b37      	ldr	r3, [pc, #220]	@ (8013e70 <scalbn+0xf8>)
 8013d94:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013d98:	4298      	cmp	r0, r3
 8013d9a:	da0b      	bge.n	8013db4 <scalbn+0x3c>
 8013d9c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013e48 <scalbn+0xd0>
 8013da0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013da4:	4770      	bx	lr
 8013da6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013daa:	4293      	cmp	r3, r2
 8013dac:	d107      	bne.n	8013dbe <scalbn+0x46>
 8013dae:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013db2:	4770      	bx	lr
 8013db4:	ee10 1a90 	vmov	r1, s1
 8013db8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013dbc:	3b36      	subs	r3, #54	@ 0x36
 8013dbe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013dc2:	4290      	cmp	r0, r2
 8013dc4:	dd0d      	ble.n	8013de2 <scalbn+0x6a>
 8013dc6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8013e50 <scalbn+0xd8>
 8013dca:	ee10 3a90 	vmov	r3, s1
 8013dce:	eeb0 6b47 	vmov.f64	d6, d7
 8013dd2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8013e58 <scalbn+0xe0>
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	fe27 7b05 	vselge.f64	d7, d7, d5
 8013ddc:	ee27 0b06 	vmul.f64	d0, d7, d6
 8013de0:	4770      	bx	lr
 8013de2:	4418      	add	r0, r3
 8013de4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8013de8:	4298      	cmp	r0, r3
 8013dea:	dcec      	bgt.n	8013dc6 <scalbn+0x4e>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	dd0a      	ble.n	8013e06 <scalbn+0x8e>
 8013df0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8013df4:	ec53 2b10 	vmov	r2, r3, d0
 8013df8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8013dfc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8013e00:	ec43 2b10 	vmov	d0, r2, r3
 8013e04:	4770      	bx	lr
 8013e06:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8013e0a:	da09      	bge.n	8013e20 <scalbn+0xa8>
 8013e0c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8013e48 <scalbn+0xd0>
 8013e10:	ee10 3a90 	vmov	r3, s1
 8013e14:	eeb0 6b47 	vmov.f64	d6, d7
 8013e18:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8013e60 <scalbn+0xe8>
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	e7db      	b.n	8013dd8 <scalbn+0x60>
 8013e20:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8013e24:	ec53 2b10 	vmov	r2, r3, d0
 8013e28:	3036      	adds	r0, #54	@ 0x36
 8013e2a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8013e2e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8013e32:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013e68 <scalbn+0xf0>
 8013e36:	ec43 2b10 	vmov	d0, r2, r3
 8013e3a:	e7b1      	b.n	8013da0 <scalbn+0x28>
 8013e3c:	f3af 8000 	nop.w
 8013e40:	00000000 	.word	0x00000000
 8013e44:	43500000 	.word	0x43500000
 8013e48:	c2f8f359 	.word	0xc2f8f359
 8013e4c:	01a56e1f 	.word	0x01a56e1f
 8013e50:	8800759c 	.word	0x8800759c
 8013e54:	7e37e43c 	.word	0x7e37e43c
 8013e58:	8800759c 	.word	0x8800759c
 8013e5c:	fe37e43c 	.word	0xfe37e43c
 8013e60:	c2f8f359 	.word	0xc2f8f359
 8013e64:	81a56e1f 	.word	0x81a56e1f
 8013e68:	00000000 	.word	0x00000000
 8013e6c:	3c900000 	.word	0x3c900000
 8013e70:	ffff3cb0 	.word	0xffff3cb0

08013e74 <__ieee754_sqrt>:
 8013e74:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8013e78:	4770      	bx	lr
	...

08013e7c <_init>:
 8013e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e7e:	bf00      	nop
 8013e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e82:	bc08      	pop	{r3}
 8013e84:	469e      	mov	lr, r3
 8013e86:	4770      	bx	lr

08013e88 <_fini>:
 8013e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e8a:	bf00      	nop
 8013e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e8e:	bc08      	pop	{r3}
 8013e90:	469e      	mov	lr, r3
 8013e92:	4770      	bx	lr
