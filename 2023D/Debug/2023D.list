
2023D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001584c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002850  08015af0  08015af0  00016af0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018340  08018340  00019340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08018348  08018348  00019348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018350  08018350  00019350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000006c4  24000000  08018354  0001a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ARM.__at_0x30000000 00004000  240006e0  08018a18  0001a6e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ARM.__at_0x38000000 00000190  240046e0  0801ca18  0001e6e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000206bc  24004870  0801cba8  0001e870  2**3
                  ALLOC
 10 ._user_heap_stack 00004004  24024f2c  0801cba8  0001ef2c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001e870  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025549  00000000  00000000  0001e89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047c4  00000000  00000000  00043de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  000485b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001515  00000000  00000000  0004a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d622  00000000  00000000  0004b5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026fdb  00000000  00000000  00088c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017bc6b  00000000  00000000  000afbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0022b84d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ae0  00000000  00000000  0022b8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  002343b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004870 	.word	0x24004870
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015ad4 	.word	0x08015ad4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004874 	.word	0x24004874
 80002dc:	08015ad4 	.word	0x08015ad4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 bac6 	b.w	8000934 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f962 	bl	8000678 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__muldc3>:
 80003c0:	ee20 5b02 	vmul.f64	d5, d0, d2
 80003c4:	ee21 4b03 	vmul.f64	d4, d1, d3
 80003c8:	ee35 7b44 	vsub.f64	d7, d5, d4
 80003cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80003d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d4:	ed2d 8b0a 	vpush	{d8-d12}
 80003d8:	ee20 9b03 	vmul.f64	d9, d0, d3
 80003dc:	ee22 8b01 	vmul.f64	d8, d2, d1
 80003e0:	ee39 6b08 	vadd.f64	d6, d9, d8
 80003e4:	d606      	bvs.n	80003f4 <__muldc3+0x34>
 80003e6:	eeb0 0b47 	vmov.f64	d0, d7
 80003ea:	eeb0 1b46 	vmov.f64	d1, d6
 80003ee:	ecbd 8b0a 	vpop	{d8-d12}
 80003f2:	4770      	bx	lr
 80003f4:	eeb4 6b46 	vcmp.f64	d6, d6
 80003f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003fc:	d7f3      	bvc.n	80003e6 <__muldc3+0x26>
 80003fe:	eeb0 bbc0 	vabs.f64	d11, d0
 8000402:	eeb0 cbc1 	vabs.f64	d12, d1
 8000406:	ed9f ab94 	vldr	d10, [pc, #592]	@ 8000658 <__muldc3+0x298>
 800040a:	eeb4 bb4a 	vcmp.f64	d11, d10
 800040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000412:	f300 809d 	bgt.w	8000550 <__muldc3+0x190>
 8000416:	eeb4 cb4a 	vcmp.f64	d12, d10
 800041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041e:	f300 8097 	bgt.w	8000550 <__muldc3+0x190>
 8000422:	2300      	movs	r3, #0
 8000424:	ed9f ab8c 	vldr	d10, [pc, #560]	@ 8000658 <__muldc3+0x298>
 8000428:	eeb0 bbc2 	vabs.f64	d11, d2
 800042c:	eeb0 cbc3 	vabs.f64	d12, d3
 8000430:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000438:	dc48      	bgt.n	80004cc <__muldc3+0x10c>
 800043a:	eeb4 cb4a 	vcmp.f64	d12, d10
 800043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000442:	dc43      	bgt.n	80004cc <__muldc3+0x10c>
 8000444:	bb9b      	cbnz	r3, 80004ae <__muldc3+0xee>
 8000446:	eeb0 5bc5 	vabs.f64	d5, d5
 800044a:	eeb4 5b4a 	vcmp.f64	d5, d10
 800044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000452:	dc14      	bgt.n	800047e <__muldc3+0xbe>
 8000454:	eeb0 4bc4 	vabs.f64	d4, d4
 8000458:	eeb4 4b4a 	vcmp.f64	d4, d10
 800045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000460:	dc0d      	bgt.n	800047e <__muldc3+0xbe>
 8000462:	eeb0 9bc9 	vabs.f64	d9, d9
 8000466:	eeb4 9b4a 	vcmp.f64	d9, d10
 800046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046e:	dc06      	bgt.n	800047e <__muldc3+0xbe>
 8000470:	eeb0 8bc8 	vabs.f64	d8, d8
 8000474:	eeb4 8b4a 	vcmp.f64	d8, d10
 8000478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047c:	ddb3      	ble.n	80003e6 <__muldc3+0x26>
 800047e:	eeb4 0b40 	vcmp.f64	d0, d0
 8000482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000486:	f180 80dc 	bvs.w	8000642 <__muldc3+0x282>
 800048a:	eeb4 1b41 	vcmp.f64	d1, d1
 800048e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000492:	f180 80cc 	bvs.w	800062e <__muldc3+0x26e>
 8000496:	eeb4 2b42 	vcmp.f64	d2, d2
 800049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049e:	f180 80bc 	bvs.w	800061a <__muldc3+0x25a>
 80004a2:	eeb4 3b43 	vcmp.f64	d3, d3
 80004a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004aa:	f180 80ac 	bvs.w	8000606 <__muldc3+0x246>
 80004ae:	ee23 7b41 	vnmul.f64	d7, d3, d1
 80004b2:	ee21 1b02 	vmul.f64	d1, d1, d2
 80004b6:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000660 <__muldc3+0x2a0>
 80004ba:	eea0 7b02 	vfma.f64	d7, d0, d2
 80004be:	eea0 1b03 	vfma.f64	d1, d0, d3
 80004c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80004c6:	ee21 6b06 	vmul.f64	d6, d1, d6
 80004ca:	e78c      	b.n	80003e6 <__muldc3+0x26>
 80004cc:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8000658 <__muldc3+0x298>
 80004d0:	eeb4 bb47 	vcmp.f64	d11, d7
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	bfcc      	ite	gt
 80004da:	2301      	movgt	r3, #1
 80004dc:	2300      	movle	r3, #0
 80004de:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000658 <__muldc3+0x298>
 80004e2:	ee07 3a10 	vmov	s14, r3
 80004e6:	eeb4 cb46 	vcmp.f64	d12, d6
 80004ea:	ee12 3a90 	vmov	r3, s5
 80004ee:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80004f8:	bfb8      	it	lt
 80004fa:	eeb1 7b47 	vneglt.f64	d7, d7
 80004fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000502:	bfcc      	ite	gt
 8000504:	2301      	movgt	r3, #1
 8000506:	2300      	movle	r3, #0
 8000508:	eeb0 2b47 	vmov.f64	d2, d7
 800050c:	ee07 3a10 	vmov	s14, r3
 8000510:	eeb4 0b40 	vcmp.f64	d0, d0
 8000514:	ee13 3a90 	vmov	r3, s7
 8000518:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800051c:	2b00      	cmp	r3, #0
 800051e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000522:	bfb8      	it	lt
 8000524:	eeb1 7b47 	vneglt.f64	d7, d7
 8000528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052c:	eeb0 3b47 	vmov.f64	d3, d7
 8000530:	d655      	bvs.n	80005de <__muldc3+0x21e>
 8000532:	eeb4 1b41 	vcmp.f64	d1, d1
 8000536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053a:	d7b8      	bvc.n	80004ae <__muldc3+0xee>
 800053c:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000668 <__muldc3+0x2a8>
 8000540:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 8000670 <__muldc3+0x2b0>
 8000544:	ee11 3a90 	vmov	r3, s3
 8000548:	2b00      	cmp	r3, #0
 800054a:	fe26 1b07 	vselge.f64	d1, d6, d7
 800054e:	e7ae      	b.n	80004ae <__muldc3+0xee>
 8000550:	ed9f ab41 	vldr	d10, [pc, #260]	@ 8000658 <__muldc3+0x298>
 8000554:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055c:	bfcc      	ite	gt
 800055e:	2301      	movgt	r3, #1
 8000560:	2300      	movle	r3, #0
 8000562:	ee0a 3a10 	vmov	s20, r3
 8000566:	ee10 3a90 	vmov	r3, s1
 800056a:	eeb8 abca 	vcvt.f64.s32	d10, s20
 800056e:	2b00      	cmp	r3, #0
 8000570:	eeb0 abca 	vabs.f64	d10, d10
 8000574:	bfb8      	it	lt
 8000576:	eeb1 ab4a 	vneglt.f64	d10, d10
 800057a:	eeb0 0b4a 	vmov.f64	d0, d10
 800057e:	ed9f ab36 	vldr	d10, [pc, #216]	@ 8000658 <__muldc3+0x298>
 8000582:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	bfcc      	ite	gt
 800058c:	2301      	movgt	r3, #1
 800058e:	2300      	movle	r3, #0
 8000590:	ee0a 3a10 	vmov	s20, r3
 8000594:	eeb4 2b42 	vcmp.f64	d2, d2
 8000598:	ee11 3a90 	vmov	r3, s3
 800059c:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	eeb0 abca 	vabs.f64	d10, d10
 80005a6:	bfb8      	it	lt
 80005a8:	eeb1 ab4a 	vneglt.f64	d10, d10
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	eeb0 1b4a 	vmov.f64	d1, d10
 80005b4:	d61d      	bvs.n	80005f2 <__muldc3+0x232>
 80005b6:	eeb4 3b43 	vcmp.f64	d3, d3
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	bf78      	it	vc
 80005c0:	2301      	movvc	r3, #1
 80005c2:	f5ff af2f 	bvc.w	8000424 <__muldc3+0x64>
 80005c6:	ee13 3a90 	vmov	r3, s7
 80005ca:	ed9f ab29 	vldr	d10, [pc, #164]	@ 8000670 <__muldc3+0x2b0>
 80005ce:	ed9f 3b26 	vldr	d3, [pc, #152]	@ 8000668 <__muldc3+0x2a8>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f04f 0301 	mov.w	r3, #1
 80005d8:	fe23 3b0a 	vselge.f64	d3, d3, d10
 80005dc:	e722      	b.n	8000424 <__muldc3+0x64>
 80005de:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8000668 <__muldc3+0x2a8>
 80005e2:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8000670 <__muldc3+0x2b0>
 80005e6:	ee10 3a90 	vmov	r3, s1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	fe26 0b07 	vselge.f64	d0, d6, d7
 80005f0:	e79f      	b.n	8000532 <__muldc3+0x172>
 80005f2:	ee12 3a90 	vmov	r3, s5
 80005f6:	ed9f ab1e 	vldr	d10, [pc, #120]	@ 8000670 <__muldc3+0x2b0>
 80005fa:	ed9f 2b1b 	vldr	d2, [pc, #108]	@ 8000668 <__muldc3+0x2a8>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	fe22 2b0a 	vselge.f64	d2, d2, d10
 8000604:	e7d7      	b.n	80005b6 <__muldc3+0x1f6>
 8000606:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000668 <__muldc3+0x2a8>
 800060a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8000670 <__muldc3+0x2b0>
 800060e:	ee13 3a90 	vmov	r3, s7
 8000612:	2b00      	cmp	r3, #0
 8000614:	fe26 3b07 	vselge.f64	d3, d6, d7
 8000618:	e749      	b.n	80004ae <__muldc3+0xee>
 800061a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000668 <__muldc3+0x2a8>
 800061e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000670 <__muldc3+0x2b0>
 8000622:	ee12 3a90 	vmov	r3, s5
 8000626:	2b00      	cmp	r3, #0
 8000628:	fe26 2b07 	vselge.f64	d2, d6, d7
 800062c:	e739      	b.n	80004a2 <__muldc3+0xe2>
 800062e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000668 <__muldc3+0x2a8>
 8000632:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8000670 <__muldc3+0x2b0>
 8000636:	ee11 3a90 	vmov	r3, s3
 800063a:	2b00      	cmp	r3, #0
 800063c:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000640:	e729      	b.n	8000496 <__muldc3+0xd6>
 8000642:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000668 <__muldc3+0x2a8>
 8000646:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8000670 <__muldc3+0x2b0>
 800064a:	ee10 3a90 	vmov	r3, s1
 800064e:	2b00      	cmp	r3, #0
 8000650:	fe26 0b07 	vselge.f64	d0, d6, d7
 8000654:	e719      	b.n	800048a <__muldc3+0xca>
 8000656:	bf00      	nop
 8000658:	ffffffff 	.word	0xffffffff
 800065c:	7fefffff 	.word	0x7fefffff
 8000660:	00000000 	.word	0x00000000
 8000664:	7ff00000 	.word	0x7ff00000
	...
 8000674:	80000000 	.word	0x80000000

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	460c      	mov	r4, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d14e      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000684:	4694      	mov	ip, r2
 8000686:	458c      	cmp	ip, r1
 8000688:	4686      	mov	lr, r0
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	d962      	bls.n	8000756 <__udivmoddi4+0xde>
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	4091      	lsls	r1, r2
 8000698:	fa20 f303 	lsr.w	r3, r0, r3
 800069c:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a0:	4319      	orrs	r1, r3
 80006a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006aa:	fa1f f68c 	uxth.w	r6, ip
 80006ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80006b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006b6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006be:	fb04 f106 	mul.w	r1, r4, r6
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80006ce:	f080 8112 	bcs.w	80008f6 <__udivmoddi4+0x27e>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 810f 	bls.w	80008f6 <__udivmoddi4+0x27e>
 80006d8:	3c02      	subs	r4, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a59      	subs	r1, r3, r1
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006e6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ee:	fb00 f606 	mul.w	r6, r0, r6
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x94>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80006fe:	f080 80fc 	bcs.w	80008fa <__udivmoddi4+0x282>
 8000702:	429e      	cmp	r6, r3
 8000704:	f240 80f9 	bls.w	80008fa <__udivmoddi4+0x282>
 8000708:	4463      	add	r3, ip
 800070a:	3802      	subs	r0, #2
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000712:	2100      	movs	r1, #0
 8000714:	b11d      	cbz	r5, 800071e <__udivmoddi4+0xa6>
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	e9c5 3200 	strd	r3, r2, [r5]
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d905      	bls.n	8000732 <__udivmoddi4+0xba>
 8000726:	b10d      	cbz	r5, 800072c <__udivmoddi4+0xb4>
 8000728:	e9c5 0100 	strd	r0, r1, [r5]
 800072c:	2100      	movs	r1, #0
 800072e:	4608      	mov	r0, r1
 8000730:	e7f5      	b.n	800071e <__udivmoddi4+0xa6>
 8000732:	fab3 f183 	clz	r1, r3
 8000736:	2900      	cmp	r1, #0
 8000738:	d146      	bne.n	80007c8 <__udivmoddi4+0x150>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xcc>
 800073e:	4290      	cmp	r0, r2
 8000740:	f0c0 80f0 	bcc.w	8000924 <__udivmoddi4+0x2ac>
 8000744:	1a86      	subs	r6, r0, r2
 8000746:	eb64 0303 	sbc.w	r3, r4, r3
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0e6      	beq.n	800071e <__udivmoddi4+0xa6>
 8000750:	e9c5 6300 	strd	r6, r3, [r5]
 8000754:	e7e3      	b.n	800071e <__udivmoddi4+0xa6>
 8000756:	2a00      	cmp	r2, #0
 8000758:	f040 8090 	bne.w	800087c <__udivmoddi4+0x204>
 800075c:	eba1 040c 	sub.w	r4, r1, ip
 8000760:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000764:	fa1f f78c 	uxth.w	r7, ip
 8000768:	2101      	movs	r1, #1
 800076a:	fbb4 f6f8 	udiv	r6, r4, r8
 800076e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000772:	fb08 4416 	mls	r4, r8, r6, r4
 8000776:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077a:	fb07 f006 	mul.w	r0, r7, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x11c>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x11a>
 800078c:	4298      	cmp	r0, r3
 800078e:	f200 80cd 	bhi.w	800092c <__udivmoddi4+0x2b4>
 8000792:	4626      	mov	r6, r4
 8000794:	1a1c      	subs	r4, r3, r0
 8000796:	fa1f f38e 	uxth.w	r3, lr
 800079a:	fbb4 f0f8 	udiv	r0, r4, r8
 800079e:	fb08 4410 	mls	r4, r8, r0, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb00 f707 	mul.w	r7, r0, r7
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x148>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x146>
 80007b8:	429f      	cmp	r7, r3
 80007ba:	f200 80b0 	bhi.w	800091e <__udivmoddi4+0x2a6>
 80007be:	4620      	mov	r0, r4
 80007c0:	1bdb      	subs	r3, r3, r7
 80007c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c6:	e7a5      	b.n	8000714 <__udivmoddi4+0x9c>
 80007c8:	f1c1 0620 	rsb	r6, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 f706 	lsr.w	r7, r2, r6
 80007d2:	431f      	orrs	r7, r3
 80007d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007d8:	fa04 f301 	lsl.w	r3, r4, r1
 80007dc:	ea43 030c 	orr.w	r3, r3, ip
 80007e0:	40f4      	lsrs	r4, r6
 80007e2:	fa00 f801 	lsl.w	r8, r0, r1
 80007e6:	0c38      	lsrs	r0, r7, #16
 80007e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ec:	fbb4 fef0 	udiv	lr, r4, r0
 80007f0:	fa1f fc87 	uxth.w	ip, r7
 80007f4:	fb00 441e 	mls	r4, r0, lr, r4
 80007f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000800:	45a1      	cmp	r9, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90a      	bls.n	800081e <__udivmoddi4+0x1a6>
 8000808:	193c      	adds	r4, r7, r4
 800080a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800080e:	f080 8084 	bcs.w	800091a <__udivmoddi4+0x2a2>
 8000812:	45a1      	cmp	r9, r4
 8000814:	f240 8081 	bls.w	800091a <__udivmoddi4+0x2a2>
 8000818:	f1ae 0e02 	sub.w	lr, lr, #2
 800081c:	443c      	add	r4, r7
 800081e:	eba4 0409 	sub.w	r4, r4, r9
 8000822:	fa1f f983 	uxth.w	r9, r3
 8000826:	fbb4 f3f0 	udiv	r3, r4, r0
 800082a:	fb00 4413 	mls	r4, r0, r3, r4
 800082e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000832:	fb03 fc0c 	mul.w	ip, r3, ip
 8000836:	45a4      	cmp	ip, r4
 8000838:	d907      	bls.n	800084a <__udivmoddi4+0x1d2>
 800083a:	193c      	adds	r4, r7, r4
 800083c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000840:	d267      	bcs.n	8000912 <__udivmoddi4+0x29a>
 8000842:	45a4      	cmp	ip, r4
 8000844:	d965      	bls.n	8000912 <__udivmoddi4+0x29a>
 8000846:	3b02      	subs	r3, #2
 8000848:	443c      	add	r4, r7
 800084a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800084e:	fba0 9302 	umull	r9, r3, r0, r2
 8000852:	eba4 040c 	sub.w	r4, r4, ip
 8000856:	429c      	cmp	r4, r3
 8000858:	46ce      	mov	lr, r9
 800085a:	469c      	mov	ip, r3
 800085c:	d351      	bcc.n	8000902 <__udivmoddi4+0x28a>
 800085e:	d04e      	beq.n	80008fe <__udivmoddi4+0x286>
 8000860:	b155      	cbz	r5, 8000878 <__udivmoddi4+0x200>
 8000862:	ebb8 030e 	subs.w	r3, r8, lr
 8000866:	eb64 040c 	sbc.w	r4, r4, ip
 800086a:	fa04 f606 	lsl.w	r6, r4, r6
 800086e:	40cb      	lsrs	r3, r1
 8000870:	431e      	orrs	r6, r3
 8000872:	40cc      	lsrs	r4, r1
 8000874:	e9c5 6400 	strd	r6, r4, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	e750      	b.n	800071e <__udivmoddi4+0xa6>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f103 	lsr.w	r1, r0, r3
 8000884:	fa0c fc02 	lsl.w	ip, ip, r2
 8000888:	fa24 f303 	lsr.w	r3, r4, r3
 800088c:	4094      	lsls	r4, r2
 800088e:	430c      	orrs	r4, r1
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa00 fe02 	lsl.w	lr, r0, r2
 8000898:	fa1f f78c 	uxth.w	r7, ip
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3110 	mls	r1, r8, r0, r3
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb00 f107 	mul.w	r1, r0, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x24c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80008ba:	d22c      	bcs.n	8000916 <__udivmoddi4+0x29e>
 80008bc:	4299      	cmp	r1, r3
 80008be:	d92a      	bls.n	8000916 <__udivmoddi4+0x29e>
 80008c0:	3802      	subs	r0, #2
 80008c2:	4463      	add	r3, ip
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008cc:	fb08 3311 	mls	r3, r8, r1, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb01 f307 	mul.w	r3, r1, r7
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x276>
 80008dc:	eb1c 0404 	adds.w	r4, ip, r4
 80008e0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80008e4:	d213      	bcs.n	800090e <__udivmoddi4+0x296>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d911      	bls.n	800090e <__udivmoddi4+0x296>
 80008ea:	3902      	subs	r1, #2
 80008ec:	4464      	add	r4, ip
 80008ee:	1ae4      	subs	r4, r4, r3
 80008f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008f4:	e739      	b.n	800076a <__udivmoddi4+0xf2>
 80008f6:	4604      	mov	r4, r0
 80008f8:	e6f0      	b.n	80006dc <__udivmoddi4+0x64>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e706      	b.n	800070c <__udivmoddi4+0x94>
 80008fe:	45c8      	cmp	r8, r9
 8000900:	d2ae      	bcs.n	8000860 <__udivmoddi4+0x1e8>
 8000902:	ebb9 0e02 	subs.w	lr, r9, r2
 8000906:	eb63 0c07 	sbc.w	ip, r3, r7
 800090a:	3801      	subs	r0, #1
 800090c:	e7a8      	b.n	8000860 <__udivmoddi4+0x1e8>
 800090e:	4631      	mov	r1, r6
 8000910:	e7ed      	b.n	80008ee <__udivmoddi4+0x276>
 8000912:	4603      	mov	r3, r0
 8000914:	e799      	b.n	800084a <__udivmoddi4+0x1d2>
 8000916:	4630      	mov	r0, r6
 8000918:	e7d4      	b.n	80008c4 <__udivmoddi4+0x24c>
 800091a:	46d6      	mov	lr, sl
 800091c:	e77f      	b.n	800081e <__udivmoddi4+0x1a6>
 800091e:	4463      	add	r3, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e74d      	b.n	80007c0 <__udivmoddi4+0x148>
 8000924:	4606      	mov	r6, r0
 8000926:	4623      	mov	r3, r4
 8000928:	4608      	mov	r0, r1
 800092a:	e70f      	b.n	800074c <__udivmoddi4+0xd4>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	e730      	b.n	8000794 <__udivmoddi4+0x11c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <rev>:
    }
    return A;
}

int rev(int size , int index)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	ed2d 8b02 	vpush	{d8}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
    int k = floor(log2(size)) , reg = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000950:	eeb0 0b47 	vmov.f64	d0, d7
 8000954:	f013 fdcc 	bl	80144f0 <log>
 8000958:	eeb0 6b40 	vmov.f64	d6, d0
 800095c:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000a18 <rev+0xe0>
 8000960:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000964:	eeb0 0b47 	vmov.f64	d0, d7
 8000968:	f014 f9d6 	bl	8014d18 <floor>
 800096c:	eeb0 7b40 	vmov.f64	d7, d0
 8000970:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000974:	ee17 3a90 	vmov	r3, s15
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
    int ans = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
    for (int i =size/2 ; i>0 ; i/=2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da00      	bge.n	800098a <rev+0x52>
 8000988:	3301      	adds	r3, #1
 800098a:	105b      	asrs	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e036      	b.n	80009fe <rev+0xc6>
    {
        reg = index%2;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	60bb      	str	r3, [r7, #8]
        ans += reg * pow(2 , k - 1) ;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009b4:	eeb0 1b47 	vmov.f64	d1, d7
 80009b8:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 80009bc:	f013 fec0 	bl	8014740 <pow>
 80009c0:	eeb0 7b40 	vmov.f64	d7, d0
 80009c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	ee07 3a90 	vmov	s15, r3
 80009ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009da:	ee17 3a90 	vmov	r3, s15
 80009de:	613b      	str	r3, [r7, #16]
        k--;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
        index/= 2;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	da00      	bge.n	80009ee <rev+0xb6>
 80009ec:	3301      	adds	r3, #1
 80009ee:	105b      	asrs	r3, r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
    for (int i =size/2 ; i>0 ; i/=2)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	da00      	bge.n	80009fa <rev+0xc2>
 80009f8:	3301      	adds	r3, #1
 80009fa:	105b      	asrs	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dcc5      	bgt.n	8000990 <rev+0x58>
    }
    return ans;
 8000a04:	693b      	ldr	r3, [r7, #16]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	ecbd 8b02 	vpop	{d8}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	f3af 8000 	nop.w
 8000a18:	fefa39ef 	.word	0xfefa39ef
 8000a1c:	3fe62e42 	.word	0x3fe62e42

08000a20 <FFT>:
    }
    return X;
}

double complex* FFT(int size , double x[])
{
 8000a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	ed2d 8b02 	vpush	{d8}
 8000a28:	b0a9      	sub	sp, #164	@ 0xa4
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	466b      	mov	r3, sp
 8000a32:	461e      	mov	r6, r3
    double complex W[size/2];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <FFT+0x1c>
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	105b      	asrs	r3, r3, #1
 8000a3e:	4619      	mov	r1, r3
 8000a40:	1e4b      	subs	r3, r1, #1
 8000a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a46:	460a      	mov	r2, r1
 8000a48:	2300      	movs	r3, #0
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	01c3      	lsls	r3, r0, #7
 8000a5a:	6838      	ldr	r0, [r7, #0]
 8000a5c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	01c2      	lsls	r2, r0, #7
 8000a64:	460a      	mov	r2, r1
 8000a66:	2300      	movs	r3, #0
 8000a68:	4692      	mov	sl, r2
 8000a6a:	469b      	mov	fp, r3
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8000a78:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8000a7c:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8000a80:	460b      	mov	r3, r1
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	3307      	adds	r3, #7
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8e:	466b      	mov	r3, sp
 8000a90:	3307      	adds	r3, #7
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    for (int i = 0 ; i < size/2 ; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000aa0:	e049      	b.n	8000b36 <FFT+0x116>
    {
        W[i] = cos(2*M_PI*i/size) + I*sin(2*M_PI*i/size);
 8000aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aae:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8000c50 <FFT+0x230>
 8000ab2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ac0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ac4:	eeb0 0b45 	vmov.f64	d0, d5
 8000ac8:	f014 f8d6 	bl	8014c78 <sin>
 8000acc:	eeb0 8b40 	vmov.f64	d8, d0
 8000ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000adc:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 8000c50 <FFT+0x230>
 8000ae0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000af2:	eeb0 0b45 	vmov.f64	d0, d5
 8000af6:	f014 f873 	bl	8014be0 <cos>
 8000afa:	eeb0 6b40 	vmov.f64	d6, d0
 8000afe:	ed9f 7b56 	vldr	d7, [pc, #344]	@ 8000c58 <FFT+0x238>
 8000b02:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	4413      	add	r3, r2
 8000b16:	ed83 7b00 	vstr	d7, [r3]
 8000b1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	4413      	add	r3, r2
 8000b26:	3308      	adds	r3, #8
 8000b28:	ed83 8b00 	vstr	d8, [r3]
    for (int i = 0 ; i < size/2 ; i++)
 8000b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da00      	bge.n	8000b3e <FFT+0x11e>
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	105b      	asrs	r3, r3, #1
 8000b40:	461a      	mov	r2, r3
 8000b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b46:	4293      	cmp	r3, r2
 8000b48:	dbab      	blt.n	8000aa2 <FFT+0x82>
    }

    double complex A[size];
 8000b4a:	68f9      	ldr	r1, [r7, #12]
 8000b4c:	1e4b      	subs	r3, r1, #1
 8000b4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b52:	460a      	mov	r2, r1
 8000b54:	2300      	movs	r3, #0
 8000b56:	4690      	mov	r8, r2
 8000b58:	4699      	mov	r9, r3
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000b66:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000b6a:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000b6e:	460a      	mov	r2, r1
 8000b70:	2300      	movs	r3, #0
 8000b72:	4614      	mov	r4, r2
 8000b74:	461d      	mov	r5, r3
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	01eb      	lsls	r3, r5, #7
 8000b80:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000b84:	01e2      	lsls	r2, r4, #7
 8000b86:	460b      	mov	r3, r1
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	3307      	adds	r3, #7
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	ebad 0d03 	sub.w	sp, sp, r3
 8000b94:	466b      	mov	r3, sp
 8000b96:	3307      	adds	r3, #7
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    double complex *X = A;
 8000b9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0;i < size ; i ++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ba8:	e027      	b.n	8000bfa <FFT+0x1da>
    {
    	A[i] = x[rev(size,i)] + 0*I;
 8000baa:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff fec2 	bl	8000938 <rev>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	4413      	add	r3, r2
 8000bbc:	ed93 7b00 	vldr	d7, [r3]
 8000bc0:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8000c58 <FFT+0x238>
 8000bc4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bc8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	ed83 7b00 	vstr	d7, [r3]
 8000bd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	4413      	add	r3, r2
 8000be0:	f103 0108 	add.w	r1, r3, #8
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0;i < size ; i ++)
 8000bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbd2      	blt.n	8000baa <FFT+0x18a>
    }
    
    int s ,m ,k ,j;
    double complex omega , t, u;

    for(s = 1 ; s <size ; s*=2)
 8000c04:	2301      	movs	r3, #1
 8000c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000c0a:	e0f6      	b.n	8000dfa <FFT+0x3da>
    {
        m = s * 2;
 8000c0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	677b      	str	r3, [r7, #116]	@ 0x74
        for ( k = 0 ; k< size ; k += m)
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000c1a:	e0e3      	b.n	8000de4 <FFT+0x3c4>
        {
            omega = 1;
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <FFT+0x240>)
 8000c22:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
            for (j = 0; j < m/2; j++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <FFT+0x240>)
 8000c4a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000c4e:	e0b8      	b.n	8000dc2 <FFT+0x3a2>
 8000c50:	54442d18 	.word	0x54442d18
 8000c54:	401921fb 	.word	0x401921fb
	...
 8000c60:	3ff00000 	.word	0x3ff00000
            {
                t = omega * A[k+j+m/2];
 8000c64:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c6c:	441a      	add	r2, r3
 8000c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	da00      	bge.n	8000c76 <FFT+0x256>
 8000c74:	3301      	adds	r3, #1
 8000c76:	105b      	asrs	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000c7c:	011a      	lsls	r2, r3, #4
 8000c7e:	440a      	add	r2, r1
 8000c80:	ed92 7b00 	vldr	d7, [r2]
 8000c84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	4413      	add	r3, r2
 8000c8a:	ed93 6b02 	vldr	d6, [r3, #8]
 8000c8e:	eeb0 3b46 	vmov.f64	d3, d6
 8000c92:	eeb0 2b47 	vmov.f64	d2, d7
 8000c96:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000c9a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000c9e:	f7ff fb8f 	bl	80003c0 <__muldc3>
 8000ca2:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
 8000ca6:	ed87 1b16 	vstr	d1, [r7, #88]	@ 0x58
 8000caa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000cae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000cb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
                u = A[k+j];
 8000cba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cc2:	18d1      	adds	r1, r2, r3
 8000cc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cc6:	010b      	lsls	r3, r1, #4
 8000cc8:	4413      	add	r3, r2
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cd2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cd4:	010b      	lsls	r3, r1, #4
 8000cd6:	4413      	add	r3, r2
 8000cd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ce4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ce8:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8000cec:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
                A[k+j] = u + t;
 8000cf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cf8:	4413      	add	r3, r2
 8000cfa:	ed97 6b06 	vldr	d6, [r7, #24]
 8000cfe:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d02:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d06:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d0a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d0e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d14:	011a      	lsls	r2, r3, #4
 8000d16:	440a      	add	r2, r1
 8000d18:	ed82 6b00 	vstr	d6, [r2]
 8000d1c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4413      	add	r3, r2
 8000d22:	3308      	adds	r3, #8
 8000d24:	ed83 7b00 	vstr	d7, [r3]
                A[k+j+m/2] = u - t;
 8000d28:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d30:	441a      	add	r2, r3
 8000d32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da00      	bge.n	8000d3a <FFT+0x31a>
 8000d38:	3301      	adds	r3, #1
 8000d3a:	105b      	asrs	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d42:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d4a:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d4e:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d58:	011a      	lsls	r2, r3, #4
 8000d5a:	440a      	add	r2, r1
 8000d5c:	ed82 6b00 	vstr	d6, [r2]
 8000d60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	4413      	add	r3, r2
 8000d66:	3308      	adds	r3, #8
 8000d68:	ed83 7b00 	vstr	d7, [r3]
                omega = omega * W[size/m];
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d74:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000d78:	011a      	lsls	r2, r3, #4
 8000d7a:	440a      	add	r2, r1
 8000d7c:	ed92 7b00 	vldr	d7, [r2]
 8000d80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	4413      	add	r3, r2
 8000d88:	ed93 6b02 	vldr	d6, [r3, #8]
 8000d8c:	eeb0 3b46 	vmov.f64	d3, d6
 8000d90:	eeb0 2b47 	vmov.f64	d2, d7
 8000d94:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000d98:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000d9c:	f7ff fb10 	bl	80003c0 <__muldc3>
 8000da0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 8000da4:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8000da8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000dac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000db0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000db4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            for (j = 0; j < m/2; j++)
 8000db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da00      	bge.n	8000dca <FFT+0x3aa>
 8000dc8:	3301      	adds	r3, #1
 8000dca:	105b      	asrs	r3, r3, #1
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f6ff af46 	blt.w	8000c64 <FFT+0x244>
        for ( k = 0 ; k< size ; k += m)
 8000dd8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000ddc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dde:	4413      	add	r3, r2
 8000de0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000de4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	f6ff af16 	blt.w	8000c1c <FFT+0x1fc>
    for(s = 1 ; s <size ; s*=2)
 8000df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f6ff af03 	blt.w	8000c0c <FFT+0x1ec>
            } 
        }
    }
    return X;
 8000e06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e08:	46b5      	mov	sp, r6

}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	37a4      	adds	r7, #164	@ 0xa4
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	ecbd 8b02 	vpop	{d8}
 8000e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e18 <FFT_Mag_sqrt>:
    }
}


void FFT_Mag_sqrt(int size , double x[])
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    double complex* X = FFT(size , x);
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fdfb 	bl	8000a20 <FFT>
 8000e2a:	60b8      	str	r0, [r7, #8]
    for (int i = 0 ; i < size ; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	e01c      	b.n	8000e6c <FFT_Mag_sqrt+0x54>
    {
        x[i] = cabs(X[i]);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	4413      	add	r3, r2
 8000e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e42:	68fc      	ldr	r4, [r7, #12]
 8000e44:	00e4      	lsls	r4, r4, #3
 8000e46:	683d      	ldr	r5, [r7, #0]
 8000e48:	442c      	add	r4, r5
 8000e4a:	ec41 0b16 	vmov	d6, r0, r1
 8000e4e:	ec43 2b17 	vmov	d7, r2, r3
 8000e52:	eeb0 0b46 	vmov.f64	d0, d6
 8000e56:	eeb0 1b47 	vmov.f64	d1, d7
 8000e5a:	f013 fb2d 	bl	80144b8 <cabs>
 8000e5e:	eeb0 7b40 	vmov.f64	d7, d0
 8000e62:	ed84 7b00 	vstr	d7, [r4]
    for (int i = 0 ; i < size ; i++)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbde      	blt.n	8000e32 <FFT_Mag_sqrt+0x1a>
    }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e80 <Blackman>:




void Blackman(int size , int left , int right , double x[])
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	ed2d 8b04 	vpush	{d8-d9}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]

    for (int i = 0 ; i < size ; i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e06b      	b.n	8000f70 <Blackman+0xf0>
    {
    	if (i < right && i >=  left)
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	da5a      	bge.n	8000f56 <Blackman+0xd6>
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	db56      	blt.n	8000f56 <Blackman+0xd6>
    	{
    		x[i] = 10* x[i] * ( 0.42 + 0.08* cos(4*M_PI*(i - left )/(right - left - 1)) - 0.5*cos(2*M_PI*(i - left )/(right - left - 1)));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	ed93 7b00 	vldr	d7, [r3]
 8000eb4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000eb8:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000eca:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8000f88 <Blackman+0x108>
 8000ece:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ee2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ee6:	eeb0 0b45 	vmov.f64	d0, d5
 8000eea:	f013 fe79 	bl	8014be0 <cos>
 8000eee:	eeb0 7b40 	vmov.f64	d7, d0
 8000ef2:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8000f90 <Blackman+0x110>
 8000ef6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000efa:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8000f98 <Blackman+0x118>
 8000efe:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	ee07 3a90 	vmov	s15, r3
 8000f0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f10:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8000fa0 <Blackman+0x120>
 8000f14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f28:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000f2c:	eeb0 0b45 	vmov.f64	d0, d5
 8000f30:	f013 fe56 	bl	8014be0 <cos>
 8000f34:	eeb0 7b40 	vmov.f64	d7, d0
 8000f38:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000f3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f40:	ee39 7b47 	vsub.f64	d7, d9, d7
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000f50:	ed83 7b00 	vstr	d7, [r3]
 8000f54:	e009      	b.n	8000f6a <Blackman+0xea>
    	}
    	else
    	{
    		x[i] = 0;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	18d1      	adds	r1, r2, r3
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0 ; i < size ; i++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	db8f      	blt.n	8000e98 <Blackman+0x18>
    	}
    }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	ecbd 8b04 	vpop	{d8-d9}
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	54442d18 	.word	0x54442d18
 8000f8c:	402921fb 	.word	0x402921fb
 8000f90:	47ae147b 	.word	0x47ae147b
 8000f94:	3fb47ae1 	.word	0x3fb47ae1
 8000f98:	ae147ae1 	.word	0xae147ae1
 8000f9c:	3fdae147 	.word	0x3fdae147
 8000fa0:	54442d18 	.word	0x54442d18
 8000fa4:	401921fb 	.word	0x401921fb

08000fa8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fcc:	4b30      	ldr	r3, [pc, #192]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fce:	4a31      	ldr	r2, [pc, #196]	@ (8001094 <MX_ADC1_Init+0xec>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fde:	4b2c      	ldr	r3, [pc, #176]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fea:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ff0:	4b27      	ldr	r3, [pc, #156]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001002:	4b23      	ldr	r3, [pc, #140]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001004:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800100a:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <MX_ADC1_Init+0xe8>)
 800100c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001010:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001012:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001014:	2203      	movs	r2, #3
 8001016:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001018:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <MX_ADC1_Init+0xe8>)
 800101a:	2200      	movs	r2, #0
 800101c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001020:	2200      	movs	r2, #0
 8001022:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	4818      	ldr	r0, [pc, #96]	@ (8001090 <MX_ADC1_Init+0xe8>)
 800102e:	f002 fe3d 	bl	8003cac <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001038:	f001 fea6 	bl	8002d88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4812      	ldr	r0, [pc, #72]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001048:	f004 f97e 	bl	8005348 <HAL_ADCEx_MultiModeConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001052:	f001 fe99 	bl	8002d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <MX_ADC1_Init+0xf0>)
 8001058:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105a:	2306      	movs	r3, #6
 800105c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800105e:	2306      	movs	r3, #6
 8001060:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001062:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001066:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001068:	2304      	movs	r3, #4
 800106a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	@ (8001090 <MX_ADC1_Init+0xe8>)
 800107a:	f003 fa11 	bl	80044a0 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001084:	f001 fe80 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	@ 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2400488c 	.word	0x2400488c
 8001094:	40022000 	.word	0x40022000
 8001098:	0c900008 	.word	0x0c900008

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0ba      	sub	sp, #232	@ 0xe8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	22c0      	movs	r2, #192	@ 0xc0
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f00f fe4b 	bl	8010d58 <memset>
  if(adcHandle->Instance==ADC1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a43      	ldr	r2, [pc, #268]	@ (80011d4 <HAL_ADC_MspInit+0x138>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d17f      	bne.n	80011cc <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010cc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 10;
 80010d8:	230a      	movs	r3, #10
 80010da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 384;
 80010dc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80010e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 12;
 80010e2:	230c      	movs	r3, #12
 80010e4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80010ee:	2340      	movs	r3, #64	@ 0x40
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4618      	mov	r0, r3
 8001106:	f009 fa6d 	bl	800a5e4 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001110:	f001 fe3a 	bl	8002d88 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001114:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <HAL_ADC_MspInit+0x13c>)
 8001116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800111a:	4a2f      	ldr	r2, [pc, #188]	@ (80011d8 <HAL_ADC_MspInit+0x13c>)
 800111c:	f043 0320 	orr.w	r3, r3, #32
 8001120:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001124:	4b2c      	ldr	r3, [pc, #176]	@ (80011d8 <HAL_ADC_MspInit+0x13c>)
 8001126:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <HAL_ADC_MspInit+0x13c>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001138:	4a27      	ldr	r2, [pc, #156]	@ (80011d8 <HAL_ADC_MspInit+0x13c>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001142:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <HAL_ADC_MspInit+0x13c>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001150:	2340      	movs	r3, #64	@ 0x40
 8001152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001156:	2303      	movs	r3, #3
 8001158:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001166:	4619      	mov	r1, r3
 8001168:	481c      	ldr	r0, [pc, #112]	@ (80011dc <HAL_ADC_MspInit+0x140>)
 800116a:	f007 fe1d 	bl	8008da8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 8001170:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <HAL_ADC_MspInit+0x148>)
 8001172:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 8001176:	2209      	movs	r2, #9
 8001178:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 8001188:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800118c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 8001190:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001194:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 8001198:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800119c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011b0:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 80011b2:	f004 fe07 	bl	8005dc4 <HAL_DMA_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 80011bc:	f001 fde4 	bl	8002d88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 80011c4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011c6:	4a06      	ldr	r2, [pc, #24]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011cc:	bf00      	nop
 80011ce:	37e8      	adds	r7, #232	@ 0xe8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40022000 	.word	0x40022000
 80011d8:	58024400 	.word	0x58024400
 80011dc:	58020000 	.word	0x58020000
 80011e0:	240048f0 	.word	0x240048f0
 80011e4:	40020010 	.word	0x40020010

080011e8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <HAL_ADC_MspDeInit+0x3c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d110      	bne.n	800121c <HAL_ADC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 80011fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <HAL_ADC_MspDeInit+0x40>)
 80011fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001200:	4a09      	ldr	r2, [pc, #36]	@ (8001228 <HAL_ADC_MspDeInit+0x40>)
 8001202:	f023 0320 	bic.w	r3, r3, #32
 8001206:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 800120a:	2140      	movs	r1, #64	@ 0x40
 800120c:	4807      	ldr	r0, [pc, #28]	@ (800122c <HAL_ADC_MspDeInit+0x44>)
 800120e:	f007 ff7b 	bl	8009108 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	4618      	mov	r0, r3
 8001218:	f005 f930 	bl	800647c <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40022000 	.word	0x40022000
 8001228:	58024400 	.word	0x58024400
 800122c:	58020000 	.word	0x58020000

08001230 <MX_ADC1ForSampling_Init>:

/* USER CODE BEGIN 1 */

void MX_ADC1ForSampling_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001254:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 8001256:	4a31      	ldr	r2, [pc, #196]	@ (800131c <MX_ADC1ForSampling_Init+0xec>)
 8001258:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800125a:	4b2f      	ldr	r3, [pc, #188]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001260:	4b2d      	ldr	r3, [pc, #180]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001266:	4b2c      	ldr	r3, [pc, #176]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126c:	4b2a      	ldr	r3, [pc, #168]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 800126e:	2204      	movs	r2, #4
 8001270:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001272:	4b29      	ldr	r3, [pc, #164]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 8001274:	2200      	movs	r2, #0
 8001276:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001278:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 800127a:	2201      	movs	r2, #1
 800127c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800127e:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 8001280:	2201      	movs	r2, #1
 8001282:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001284:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 8001286:	2200      	movs	r2, #0
 8001288:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 800128a:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 800128c:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001290:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001292:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 8001294:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001298:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800129a:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 800129c:	2203      	movs	r2, #3
 800129e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b4:	4818      	ldr	r0, [pc, #96]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 80012b6:	f002 fcf9 	bl	8003cac <HAL_ADC_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1ForSampling_Init+0x94>
  {
    Error_Handler();
 80012c0:	f001 fd62 	bl	8002d88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4812      	ldr	r0, [pc, #72]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 80012d0:	f004 f83a 	bl	8005348 <HAL_ADCEx_MultiModeConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1ForSampling_Init+0xae>
  {
    Error_Handler();
 80012da:	f001 fd55 	bl	8002d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <MX_ADC1ForSampling_Init+0xf0>)
 80012e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e2:	2306      	movs	r3, #6
 80012e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80012e6:	2304      	movs	r3, #4
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ea:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80012ee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012f0:	2304      	movs	r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_ADC1ForSampling_Init+0xe8>)
 8001302:	f003 f8cd 	bl	80044a0 <HAL_ADC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1ForSampling_Init+0xe0>
  {
    Error_Handler();
 800130c:	f001 fd3c 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2400488c 	.word	0x2400488c
 800131c:	40022000 	.word	0x40022000
 8001320:	0c900008 	.word	0x0c900008

08001324 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2224      	movs	r2, #36	@ 0x24
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f00f fd11 	bl	8010d58 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <MX_DAC1_Init+0x5c>)
 8001338:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <MX_DAC1_Init+0x60>)
 800133a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800133c:	4810      	ldr	r0, [pc, #64]	@ (8001380 <MX_DAC1_Init+0x5c>)
 800133e:	f004 fa6d 	bl	800581c <HAL_DAC_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001348:	f001 fd1e 	bl	8002d88 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001350:	2316      	movs	r3, #22
 8001352:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001354:	2302      	movs	r3, #2
 8001356:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001358:	2301      	movs	r3, #1
 800135a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2210      	movs	r2, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <MX_DAC1_Init+0x5c>)
 8001368:	f004 fb64 	bl	8005a34 <HAL_DAC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001372:	f001 fd09 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	@ 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	24004968 	.word	0x24004968
 8001384:	40007400 	.word	0x40007400

08001388 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a30      	ldr	r2, [pc, #192]	@ (8001468 <HAL_DAC_MspInit+0xe0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d159      	bne.n	800145e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80013aa:	4b30      	ldr	r3, [pc, #192]	@ (800146c <HAL_DAC_MspInit+0xe4>)
 80013ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b0:	4a2e      	ldr	r2, [pc, #184]	@ (800146c <HAL_DAC_MspInit+0xe4>)
 80013b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013ba:	4b2c      	ldr	r3, [pc, #176]	@ (800146c <HAL_DAC_MspInit+0xe4>)
 80013bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b28      	ldr	r3, [pc, #160]	@ (800146c <HAL_DAC_MspInit+0xe4>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ce:	4a27      	ldr	r2, [pc, #156]	@ (800146c <HAL_DAC_MspInit+0xe4>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d8:	4b24      	ldr	r3, [pc, #144]	@ (800146c <HAL_DAC_MspInit+0xe4>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013e6:	2320      	movs	r3, #32
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ea:	2303      	movs	r3, #3
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	481d      	ldr	r0, [pc, #116]	@ (8001470 <HAL_DAC_MspInit+0xe8>)
 80013fa:	f007 fcd5 	bl	8008da8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 80013fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 8001400:	4a1d      	ldr	r2, [pc, #116]	@ (8001478 <HAL_DAC_MspInit+0xf0>)
 8001402:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 8001406:	2244      	movs	r2, #68	@ 0x44
 8001408:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 800140c:	2240      	movs	r2, #64	@ 0x40
 800140e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001416:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 8001418:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800141c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 8001420:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001424:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 8001428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800142c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 8001430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001434:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800143c:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001442:	480c      	ldr	r0, [pc, #48]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 8001444:	f004 fcbe 	bl	8005dc4 <HAL_DMA_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800144e:	f001 fc9b 	bl	8002d88 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a07      	ldr	r2, [pc, #28]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	4a06      	ldr	r2, [pc, #24]	@ (8001474 <HAL_DAC_MspInit+0xec>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	@ 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40007400 	.word	0x40007400
 800146c:	58024400 	.word	0x58024400
 8001470:	58020000 	.word	0x58020000
 8001474:	2400497c 	.word	0x2400497c
 8001478:	40020028 	.word	0x40020028

0800147c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001482:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <MX_DMA_Init+0x4c>)
 8001484:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001488:	4a0f      	ldr	r2, [pc, #60]	@ (80014c8 <MX_DMA_Init+0x4c>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <MX_DMA_Init+0x4c>)
 8001494:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	200b      	movs	r0, #11
 80014a6:	f004 f908 	bl	80056ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014aa:	200b      	movs	r0, #11
 80014ac:	f004 f91f 	bl	80056ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	200c      	movs	r0, #12
 80014b6:	f004 f900 	bl	80056ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014ba:	200c      	movs	r0, #12
 80014bc:	f004 f917 	bl	80056ee <HAL_NVIC_EnableIRQ>

}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	58024400 	.word	0x58024400

080014cc <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	@ 0x28
 80014d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	4b34      	ldr	r3, [pc, #208]	@ (80015b4 <MX_GPIO_Init+0xe8>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e8:	4a32      	ldr	r2, [pc, #200]	@ (80015b4 <MX_GPIO_Init+0xe8>)
 80014ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f2:	4b30      	ldr	r3, [pc, #192]	@ (80015b4 <MX_GPIO_Init+0xe8>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b2c      	ldr	r3, [pc, #176]	@ (80015b4 <MX_GPIO_Init+0xe8>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001506:	4a2b      	ldr	r2, [pc, #172]	@ (80015b4 <MX_GPIO_Init+0xe8>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001510:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <MX_GPIO_Init+0xe8>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <MX_GPIO_Init+0xe8>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001524:	4a23      	ldr	r2, [pc, #140]	@ (80015b4 <MX_GPIO_Init+0xe8>)
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152e:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <MX_GPIO_Init+0xe8>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <MX_GPIO_Init+0xe8>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001542:	4a1c      	ldr	r2, [pc, #112]	@ (80015b4 <MX_GPIO_Init+0xe8>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <MX_GPIO_Init+0xe8>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2110      	movs	r1, #16
 800155e:	4816      	ldr	r0, [pc, #88]	@ (80015b8 <MX_GPIO_Init+0xec>)
 8001560:	f007 fedc 	bl	800931c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800156a:	4814      	ldr	r0, [pc, #80]	@ (80015bc <MX_GPIO_Init+0xf0>)
 800156c:	f007 fed6 	bl	800931c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001570:	2310      	movs	r3, #16
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <MX_GPIO_Init+0xec>)
 8001588:	f007 fc0e 	bl	8008da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800158c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_GPIO_Init+0xf0>)
 80015a6:	f007 fbff 	bl	8008da8 <HAL_GPIO_Init>

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	@ 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	58024400 	.word	0x58024400
 80015b8:	58020000 	.word	0x58020000
 80015bc:	58020c00 	.word	0x58020c00

080015c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <MX_I2C1_Init+0x74>)
 80015c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <MX_I2C1_Init+0x78>)
 80015c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <MX_I2C1_Init+0x74>)
 80015cc:	4a1b      	ldr	r2, [pc, #108]	@ (800163c <MX_I2C1_Init+0x7c>)
 80015ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015d0:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <MX_I2C1_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d6:	4b17      	ldr	r3, [pc, #92]	@ (8001634 <MX_I2C1_Init+0x74>)
 80015d8:	2201      	movs	r2, #1
 80015da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015dc:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <MX_I2C1_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015e2:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <MX_I2C1_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <MX_I2C1_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <MX_I2C1_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <MX_I2C1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015fa:	480e      	ldr	r0, [pc, #56]	@ (8001634 <MX_I2C1_Init+0x74>)
 80015fc:	f007 fea8 	bl	8009350 <HAL_I2C_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001606:	f001 fbbf 	bl	8002d88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800160a:	2100      	movs	r1, #0
 800160c:	4809      	ldr	r0, [pc, #36]	@ (8001634 <MX_I2C1_Init+0x74>)
 800160e:	f007 ff2f 	bl	8009470 <HAL_I2CEx_ConfigAnalogFilter>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001618:	f001 fbb6 	bl	8002d88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800161c:	2100      	movs	r1, #0
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <MX_I2C1_Init+0x74>)
 8001620:	f007 ff71 	bl	8009506 <HAL_I2CEx_ConfigDigitalFilter>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800162a:	f001 fbad 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	240049f4 	.word	0x240049f4
 8001638:	40005400 	.word	0x40005400
 800163c:	00b03fdb 	.word	0x00b03fdb

08001640 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b0ba      	sub	sp, #232	@ 0xe8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	22c0      	movs	r2, #192	@ 0xc0
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f00f fb79 	bl	8010d58 <memset>
  if(i2cHandle->Instance==I2C1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a26      	ldr	r2, [pc, #152]	@ (8001704 <HAL_I2C_MspInit+0xc4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d145      	bne.n	80016fc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001670:	f04f 0208 	mov.w	r2, #8
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	4618      	mov	r0, r3
 8001688:	f008 ffac 	bl	800a5e4 <HAL_RCCEx_PeriphCLKConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001692:	f001 fb79 	bl	8002d88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <HAL_I2C_MspInit+0xc8>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169c:	4a1a      	ldr	r2, [pc, #104]	@ (8001708 <HAL_I2C_MspInit+0xc8>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <HAL_I2C_MspInit+0xc8>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016b4:	23c0      	movs	r3, #192	@ 0xc0
 80016b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ba:	2312      	movs	r3, #18
 80016bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016cc:	2304      	movs	r3, #4
 80016ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016d6:	4619      	mov	r1, r3
 80016d8:	480c      	ldr	r0, [pc, #48]	@ (800170c <HAL_I2C_MspInit+0xcc>)
 80016da:	f007 fb65 	bl	8008da8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_I2C_MspInit+0xc8>)
 80016e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016e4:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <HAL_I2C_MspInit+0xc8>)
 80016e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_I2C_MspInit+0xc8>)
 80016f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016fc:	bf00      	nop
 80016fe:	37e8      	adds	r7, #232	@ 0xe8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40005400 	.word	0x40005400
 8001708:	58024400 	.word	0x58024400
 800170c:	58020400 	.word	0x58020400

08001710 <Analog_Judge>:
#include "tim.h"
#include "usart.h"
#include "gpio.h"

int Analog_Judge(double x[], double v[])
{
 8001710:	b580      	push	{r7, lr}
 8001712:	f5ad 5dc4 	sub.w	sp, sp, #6272	@ 0x1880
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 800171e:	f6a3 0384 	subw	r3, r3, #2180	@ 0x884
 8001722:	6018      	str	r0, [r3, #0]
 8001724:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8001728:	f6a3 0388 	subw	r3, r3, #2184	@ 0x888
 800172c:	6019      	str	r1, [r3, #0]
    double bands[FO_LENGTH / 16];
    int bands_idx[FO_LENGTH / 16];
    double bands_sum = 0;
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	f507 51c4 	add.w	r1, r7, #6272	@ 0x1880
 800173a:	e9c1 2300 	strd	r2, r3, [r1]
    int n_bands = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	f641 027c 	movw	r2, #6268	@ 0x187c
 8001744:	443a      	add	r2, r7
 8001746:	6013      	str	r3, [r2, #0]
    int bands_gap = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	f641 024c 	movw	r2, #6220	@ 0x184c
 800174e:	443a      	add	r2, r7
 8001750:	6013      	str	r3, [r2, #0]
    int is_symmetric = 1;
 8001752:	2301      	movs	r3, #1
 8001754:	f641 0278 	movw	r2, #6264	@ 0x1878
 8001758:	443a      	add	r2, r7
 800175a:	6013      	str	r3, [r2, #0]
    int center_idx = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	f641 0274 	movw	r2, #6260	@ 0x1874
 8001762:	443a      	add	r2, r7
 8001764:	6013      	str	r3, [r2, #0]
    char str[50];


    // This can be optimized with specific threshold
    double main_band = 0;
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	f641 0168 	movw	r1, #6248	@ 0x1868
 8001772:	4439      	add	r1, r7
 8001774:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 100; i < FO_LENGTH / 2 - 100; i++)
 8001778:	2364      	movs	r3, #100	@ 0x64
 800177a:	f641 0264 	movw	r2, #6244	@ 0x1864
 800177e:	443a      	add	r2, r7
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e031      	b.n	80017e8 <Analog_Judge+0xd8>
    {
        if (x[i] > main_band)
 8001784:	f641 0364 	movw	r3, #6244	@ 0x1864
 8001788:	443b      	add	r3, r7
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	f607 0288 	addw	r2, r7, #2184	@ 0x888
 8001792:	f6a2 0284 	subw	r2, r2, #2180	@ 0x884
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	4413      	add	r3, r2
 800179a:	ed93 7b00 	vldr	d7, [r3]
 800179e:	f641 0368 	movw	r3, #6248	@ 0x1868
 80017a2:	443b      	add	r3, r7
 80017a4:	ed93 6b00 	vldr	d6, [r3]
 80017a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	d511      	bpl.n	80017d6 <Analog_Judge+0xc6>
        {
            main_band = x[i];
 80017b2:	f641 0364 	movw	r3, #6244	@ 0x1864
 80017b6:	443b      	add	r3, r7
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	f607 0288 	addw	r2, r7, #2184	@ 0x888
 80017c0:	f6a2 0284 	subw	r2, r2, #2180	@ 0x884
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f641 0168 	movw	r1, #6248	@ 0x1868
 80017d0:	4439      	add	r1, r7
 80017d2:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 100; i < FO_LENGTH / 2 - 100; i++)
 80017d6:	f641 0364 	movw	r3, #6244	@ 0x1864
 80017da:	443b      	add	r3, r7
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	f641 0264 	movw	r2, #6244	@ 0x1864
 80017e4:	443a      	add	r2, r7
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	f641 0364 	movw	r3, #6244	@ 0x1864
 80017ec:	443b      	add	r3, r7
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f640 729b 	movw	r2, #3995	@ 0xf9b
 80017f4:	4293      	cmp	r3, r2
 80017f6:	ddc5      	ble.n	8001784 <Analog_Judge+0x74>
        }
    }
    double threshold = main_band * 0.1;
 80017f8:	f641 0368 	movw	r3, #6248	@ 0x1868
 80017fc:	443b      	add	r3, r7
 80017fe:	ed93 7b00 	vldr	d7, [r3]
 8001802:	ed9f 6ba1 	vldr	d6, [pc, #644]	@ 8001a88 <Analog_Judge+0x378>
 8001806:	ee27 7b06 	vmul.f64	d7, d7, d6
 800180a:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 800180e:	ed83 7b00 	vstr	d7, [r3]
    
    for(int i = 1640 - FO_LENGTH / 8; i < 1640 +  FO_LENGTH / 8 ; i++)
 8001812:	f44f 731a 	mov.w	r3, #616	@ 0x268
 8001816:	f507 52c3 	add.w	r2, r7, #6240	@ 0x1860
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e0be      	b.n	800199c <Analog_Judge+0x28c>
    {
        if(x[i] > threshold && x[i] > 50)
 800181e:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	f607 0288 	addw	r2, r7, #2184	@ 0x888
 800182a:	f6a2 0284 	subw	r2, r2, #2180	@ 0x884
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	4413      	add	r3, r2
 8001832:	ed93 7b00 	vldr	d7, [r3]
 8001836:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 800183a:	ed93 6b00 	vldr	d6, [r3]
 800183e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001846:	f140 80a2 	bpl.w	800198e <Analog_Judge+0x27e>
 800184a:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	f607 0288 	addw	r2, r7, #2184	@ 0x888
 8001856:	f6a2 0284 	subw	r2, r2, #2180	@ 0x884
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	4413      	add	r3, r2
 800185e:	ed93 7b00 	vldr	d7, [r3]
 8001862:	ed9f 6b8b 	vldr	d6, [pc, #556]	@ 8001a90 <Analog_Judge+0x380>
 8001866:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	f340 808e 	ble.w	800198e <Analog_Judge+0x27e>
        {
        	int flag = 1 ;
 8001872:	2301      	movs	r3, #1
 8001874:	f641 025c 	movw	r2, #6236	@ 0x185c
 8001878:	443a      	add	r2, r7
 800187a:	6013      	str	r3, [r2, #0]
        	for (int j = i - 2 ; j < i + 2 ; j++)
 800187c:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3b02      	subs	r3, #2
 8001884:	f641 0258 	movw	r2, #6232	@ 0x1858
 8001888:	443a      	add	r2, r7
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	e02b      	b.n	80018e6 <Analog_Judge+0x1d6>
        	{
        		if (x[j] > x[i])flag = 0;
 800188e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001892:	443b      	add	r3, r7
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	f607 0288 	addw	r2, r7, #2184	@ 0x888
 800189c:	f6a2 0284 	subw	r2, r2, #2180	@ 0x884
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	ed93 6b00 	vldr	d6, [r3]
 80018a8:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	f607 0288 	addw	r2, r7, #2184	@ 0x888
 80018b4:	f6a2 0284 	subw	r2, r2, #2180	@ 0x884
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	ed93 7b00 	vldr	d7, [r3]
 80018c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	dd04      	ble.n	80018d4 <Analog_Judge+0x1c4>
 80018ca:	2300      	movs	r3, #0
 80018cc:	f641 025c 	movw	r2, #6236	@ 0x185c
 80018d0:	443a      	add	r2, r7
 80018d2:	6013      	str	r3, [r2, #0]
        	for (int j = i - 2 ; j < i + 2 ; j++)
 80018d4:	f641 0358 	movw	r3, #6232	@ 0x1858
 80018d8:	443b      	add	r3, r7
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	f641 0258 	movw	r2, #6232	@ 0x1858
 80018e2:	443a      	add	r2, r7
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	f641 0258 	movw	r2, #6232	@ 0x1858
 80018f2:	443a      	add	r2, r7
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	ddc9      	ble.n	800188e <Analog_Judge+0x17e>
        	}
        	if (flag == 1)
 80018fa:	f641 035c 	movw	r3, #6236	@ 0x185c
 80018fe:	443b      	add	r3, r7
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d143      	bne.n	800198e <Analog_Judge+0x27e>
        	{
        		bands_sum += x[i];
 8001906:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	f607 0288 	addw	r2, r7, #2184	@ 0x888
 8001912:	f6a2 0284 	subw	r2, r2, #2180	@ 0x884
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	4413      	add	r3, r2
 800191a:	ed93 7b00 	vldr	d7, [r3]
 800191e:	f507 53c4 	add.w	r3, r7, #6272	@ 0x1880
 8001922:	ed93 6b00 	vldr	d6, [r3]
 8001926:	ee36 7b07 	vadd.f64	d7, d6, d7
 800192a:	f507 53c4 	add.w	r3, r7, #6272	@ 0x1880
 800192e:	ed83 7b00 	vstr	d7, [r3]
        		bands[n_bands] = x[i];
 8001932:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	f607 0288 	addw	r2, r7, #2184	@ 0x888
 800193e:	f6a2 0284 	subw	r2, r2, #2180	@ 0x884
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	4413      	add	r3, r2
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f607 0188 	addw	r1, r7, #2184	@ 0x888
 800194e:	4608      	mov	r0, r1
 8001950:	f641 017c 	movw	r1, #6268	@ 0x187c
 8001954:	4439      	add	r1, r7
 8001956:	6809      	ldr	r1, [r1, #0]
 8001958:	00c9      	lsls	r1, r1, #3
 800195a:	4401      	add	r1, r0
 800195c:	3948      	subs	r1, #72	@ 0x48
 800195e:	e9c1 2300 	strd	r2, r3, [r1]
        		bands_idx[n_bands] = i;
 8001962:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8001966:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 800196a:	f641 027c 	movw	r2, #6268	@ 0x187c
 800196e:	443a      	add	r2, r7
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	f507 51c3 	add.w	r1, r7, #6240	@ 0x1860
 8001976:	6809      	ldr	r1, [r1, #0]
 8001978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        		n_bands++;
 800197c:	f641 037c 	movw	r3, #6268	@ 0x187c
 8001980:	443b      	add	r3, r7
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	f641 027c 	movw	r2, #6268	@ 0x187c
 800198a:	443a      	add	r2, r7
 800198c:	6013      	str	r3, [r2, #0]
    for(int i = 1640 - FO_LENGTH / 8; i < 1640 +  FO_LENGTH / 8 ; i++)
 800198e:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	f507 52c3 	add.w	r2, r7, #6240	@ 0x1860
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f640 2267 	movw	r2, #2663	@ 0xa67
 80019a6:	4293      	cmp	r3, r2
 80019a8:	f77f af39 	ble.w	800181e <Analog_Judge+0x10e>
        	}
        }
    }


    bands_gap = bands_idx[n_bands / 2 + 1] - bands_idx[n_bands / 2];
 80019ac:	f641 037c 	movw	r3, #6268	@ 0x187c
 80019b0:	443b      	add	r3, r7
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	da00      	bge.n	80019ba <Analog_Judge+0x2aa>
 80019b8:	3301      	adds	r3, #1
 80019ba:	105b      	asrs	r3, r3, #1
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 80019c2:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 80019c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019ca:	f641 037c 	movw	r3, #6268	@ 0x187c
 80019ce:	443b      	add	r3, r7
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da00      	bge.n	80019d8 <Analog_Judge+0x2c8>
 80019d6:	3301      	adds	r3, #1
 80019d8:	105b      	asrs	r3, r3, #1
 80019da:	4619      	mov	r1, r3
 80019dc:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 80019e0:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 80019e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f641 024c 	movw	r2, #6220	@ 0x184c
 80019ee:	443a      	add	r2, r7
 80019f0:	6013      	str	r3, [r2, #0]
//	sprintf(str , "number of separated bands: %d." , n_bands);
//	HAL_UART_Transmit(&huart1,(uint8_t *)str , 30   ,HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);

	for (int i = 0; i < n_bands; i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	f641 0254 	movw	r2, #6228	@ 0x1854
 80019f8:	443a      	add	r2, r7
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e032      	b.n	8001a64 <Analog_Judge+0x354>
	{
		center_idx = (abs(bands_idx[i] - 1640) < 20) ? i : center_idx;
 80019fe:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8001a02:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 8001a06:	f641 0254 	movw	r2, #6228	@ 0x1854
 8001a0a:	443a      	add	r2, r7
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a12:	f5a3 63cd 	sub.w	r3, r3, #1640	@ 0x668
 8001a16:	f113 0f13 	cmn.w	r3, #19
 8001a1a:	db12      	blt.n	8001a42 <Analog_Judge+0x332>
 8001a1c:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8001a20:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 8001a24:	f641 0254 	movw	r2, #6228	@ 0x1854
 8001a28:	443a      	add	r2, r7
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a30:	f5a3 63cd 	sub.w	r3, r3, #1640	@ 0x668
 8001a34:	2b13      	cmp	r3, #19
 8001a36:	dc04      	bgt.n	8001a42 <Analog_Judge+0x332>
 8001a38:	f641 0354 	movw	r3, #6228	@ 0x1854
 8001a3c:	443b      	add	r3, r7
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	e003      	b.n	8001a4a <Analog_Judge+0x33a>
 8001a42:	f641 0374 	movw	r3, #6260	@ 0x1874
 8001a46:	443b      	add	r3, r7
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f641 0274 	movw	r2, #6260	@ 0x1874
 8001a4e:	443a      	add	r2, r7
 8001a50:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < n_bands; i++)
 8001a52:	f641 0354 	movw	r3, #6228	@ 0x1854
 8001a56:	443b      	add	r3, r7
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f641 0254 	movw	r2, #6228	@ 0x1854
 8001a60:	443a      	add	r2, r7
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	f641 0354 	movw	r3, #6228	@ 0x1854
 8001a68:	443b      	add	r3, r7
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f641 037c 	movw	r3, #6268	@ 0x187c
 8001a70:	443b      	add	r3, r7
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbc2      	blt.n	80019fe <Analog_Judge+0x2ee>
	}
	for (int i = 0 ; i < n_bands / 2; i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f641 0250 	movw	r2, #6224	@ 0x1850
 8001a7e:	443a      	add	r2, r7
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e042      	b.n	8001b0a <Analog_Judge+0x3fa>
 8001a84:	f3af 8000 	nop.w
 8001a88:	9999999a 	.word	0x9999999a
 8001a8c:	3fb99999 	.word	0x3fb99999
 8001a90:	00000000 	.word	0x00000000
 8001a94:	40490000 	.word	0x40490000
	{
		if (abs(bands[center_idx - i] - bands[center_idx + i]) > 50)
 8001a98:	f641 0374 	movw	r3, #6260	@ 0x1874
 8001a9c:	443b      	add	r3, r7
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	f641 0350 	movw	r3, #6224	@ 0x1850
 8001aa4:	443b      	add	r3, r7
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f607 0288 	addw	r2, r7, #2184	@ 0x888
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3b48      	subs	r3, #72	@ 0x48
 8001ab4:	ed93 6b00 	vldr	d6, [r3]
 8001ab8:	f641 0374 	movw	r3, #6260	@ 0x1874
 8001abc:	443b      	add	r3, r7
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	f641 0350 	movw	r3, #6224	@ 0x1850
 8001ac4:	443b      	add	r3, r7
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f607 0288 	addw	r2, r7, #2184	@ 0x888
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3b48      	subs	r3, #72	@ 0x48
 8001ad4:	ed93 7b00 	vldr	d7, [r3]
 8001ad8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001adc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ae0:	ee17 3a90 	vmov	r3, s15
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bfb8      	it	lt
 8001ae8:	425b      	neglt	r3, r3
 8001aea:	2b32      	cmp	r3, #50	@ 0x32
 8001aec:	dd04      	ble.n	8001af8 <Analog_Judge+0x3e8>
		{
			is_symmetric = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f641 0278 	movw	r2, #6264	@ 0x1878
 8001af4:	443a      	add	r2, r7
 8001af6:	6013      	str	r3, [r2, #0]
	for (int i = 0 ; i < n_bands / 2; i++)
 8001af8:	f641 0350 	movw	r3, #6224	@ 0x1850
 8001afc:	443b      	add	r3, r7
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	f641 0250 	movw	r2, #6224	@ 0x1850
 8001b06:	443a      	add	r2, r7
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	f641 037c 	movw	r3, #6268	@ 0x187c
 8001b0e:	443b      	add	r3, r7
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	da00      	bge.n	8001b18 <Analog_Judge+0x408>
 8001b16:	3301      	adds	r3, #1
 8001b18:	105b      	asrs	r3, r3, #1
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f641 0350 	movw	r3, #6224	@ 0x1850
 8001b20:	443b      	add	r3, r7
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4293      	cmp	r3, r2
 8001b26:	dbb7      	blt.n	8001a98 <Analog_Judge+0x388>
		}
	}


	if (n_bands == 0)
 8001b28:	f641 037c 	movw	r3, #6268	@ 0x187c
 8001b2c:	443b      	add	r3, r7
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <Analog_Judge+0x42a>
	{
		return -1;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b38:	e133      	b.n	8001da2 <Analog_Judge+0x692>
	}
	else if (n_bands == 1)
 8001b3a:	f641 037c 	movw	r3, #6268	@ 0x187c
 8001b3e:	443b      	add	r3, r7
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <Analog_Judge+0x43a>
    {
        return 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e12b      	b.n	8001da2 <Analog_Judge+0x692>
    }
    else if (n_bands <= 3 && is_symmetric)
 8001b4a:	f641 037c 	movw	r3, #6268	@ 0x187c
 8001b4e:	443b      	add	r3, r7
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	f300 8093 	bgt.w	8001c7e <Analog_Judge+0x56e>
 8001b58:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001b5c:	443b      	add	r3, r7
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 808c 	beq.w	8001c7e <Analog_Judge+0x56e>
    {
    	sprintf(str , "bands' gap: %d." , bands_gap);
 8001b66:	4b98      	ldr	r3, [pc, #608]	@ (8001dc8 <Analog_Judge+0x6b8>)
 8001b68:	f503 53c4 	add.w	r3, r3, #6272	@ 0x1880
 8001b6c:	f103 0308 	add.w	r3, r3, #8
 8001b70:	443b      	add	r3, r7
 8001b72:	f641 024c 	movw	r2, #6220	@ 0x184c
 8001b76:	443a      	add	r2, r7
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	4994      	ldr	r1, [pc, #592]	@ (8001dcc <Analog_Judge+0x6bc>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00e fde3 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 15   ,HAL_MAX_DELAY);
 8001b82:	4991      	ldr	r1, [pc, #580]	@ (8001dc8 <Analog_Judge+0x6b8>)
 8001b84:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001b88:	440b      	add	r3, r1
 8001b8a:	19d9      	adds	r1, r3, r7
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b90:	220f      	movs	r2, #15
 8001b92:	488f      	ldr	r0, [pc, #572]	@ (8001dd0 <Analog_Judge+0x6c0>)
 8001b94:	f00c fae4 	bl	800e160 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	498d      	ldr	r1, [pc, #564]	@ (8001dd4 <Analog_Judge+0x6c4>)
 8001ba0:	488b      	ldr	r0, [pc, #556]	@ (8001dd0 <Analog_Judge+0x6c0>)
 8001ba2:	f00c fadd 	bl	800e160 <HAL_UART_Transmit>

    	sprintf(str , "frequency: %.2lf kHz." , (double)bands_gap / 81.000);
 8001ba6:	f641 034c 	movw	r3, #6220	@ 0x184c
 8001baa:	443b      	add	r3, r7
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001bb6:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8001db0 <Analog_Judge+0x6a0>
 8001bba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001bbe:	4882      	ldr	r0, [pc, #520]	@ (8001dc8 <Analog_Judge+0x6b8>)
 8001bc0:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001bc4:	4403      	add	r3, r0
 8001bc6:	19d8      	adds	r0, r3, r7
 8001bc8:	ec53 2b15 	vmov	r2, r3, d5
 8001bcc:	4982      	ldr	r1, [pc, #520]	@ (8001dd8 <Analog_Judge+0x6c8>)
 8001bce:	f00e fdbb 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 8001bd2:	497d      	ldr	r1, [pc, #500]	@ (8001dc8 <Analog_Judge+0x6b8>)
 8001bd4:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001bd8:	440b      	add	r3, r1
 8001bda:	19d9      	adds	r1, r3, r7
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001be0:	2214      	movs	r2, #20
 8001be2:	487b      	ldr	r0, [pc, #492]	@ (8001dd0 <Analog_Judge+0x6c0>)
 8001be4:	f00c fabc 	bl	800e160 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bec:	2201      	movs	r2, #1
 8001bee:	4979      	ldr	r1, [pc, #484]	@ (8001dd4 <Analog_Judge+0x6c4>)
 8001bf0:	4877      	ldr	r0, [pc, #476]	@ (8001dd0 <Analog_Judge+0x6c0>)
 8001bf2:	f00c fab5 	bl	800e160 <HAL_UART_Transmit>

    	sprintf(str , "degree of moderation: %.2lf" ,(bands_sum - bands[n_bands / 2]) / bands[n_bands / 2]);
 8001bf6:	f641 037c 	movw	r3, #6268	@ 0x187c
 8001bfa:	443b      	add	r3, r7
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da00      	bge.n	8001c04 <Analog_Judge+0x4f4>
 8001c02:	3301      	adds	r3, #1
 8001c04:	105b      	asrs	r3, r3, #1
 8001c06:	f607 0288 	addw	r2, r7, #2184	@ 0x888
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b48      	subs	r3, #72	@ 0x48
 8001c10:	ed93 7b00 	vldr	d7, [r3]
 8001c14:	f507 53c4 	add.w	r3, r7, #6272	@ 0x1880
 8001c18:	ed93 6b00 	vldr	d6, [r3]
 8001c1c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001c20:	f641 037c 	movw	r3, #6268	@ 0x187c
 8001c24:	443b      	add	r3, r7
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da00      	bge.n	8001c2e <Analog_Judge+0x51e>
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	105b      	asrs	r3, r3, #1
 8001c30:	f607 0288 	addw	r2, r7, #2184	@ 0x888
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	3b48      	subs	r3, #72	@ 0x48
 8001c3a:	ed93 7b00 	vldr	d7, [r3]
 8001c3e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001c42:	4861      	ldr	r0, [pc, #388]	@ (8001dc8 <Analog_Judge+0x6b8>)
 8001c44:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001c48:	4403      	add	r3, r0
 8001c4a:	19d8      	adds	r0, r3, r7
 8001c4c:	ec53 2b15 	vmov	r2, r3, d5
 8001c50:	4962      	ldr	r1, [pc, #392]	@ (8001ddc <Analog_Judge+0x6cc>)
 8001c52:	f00e fd79 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 26   ,HAL_MAX_DELAY);
 8001c56:	495c      	ldr	r1, [pc, #368]	@ (8001dc8 <Analog_Judge+0x6b8>)
 8001c58:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001c5c:	440b      	add	r3, r1
 8001c5e:	19d9      	adds	r1, r3, r7
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c64:	221a      	movs	r2, #26
 8001c66:	485a      	ldr	r0, [pc, #360]	@ (8001dd0 <Analog_Judge+0x6c0>)
 8001c68:	f00c fa7a 	bl	800e160 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c70:	2201      	movs	r2, #1
 8001c72:	4958      	ldr	r1, [pc, #352]	@ (8001dd4 <Analog_Judge+0x6c4>)
 8001c74:	4856      	ldr	r0, [pc, #344]	@ (8001dd0 <Analog_Judge+0x6c0>)
 8001c76:	f00c fa73 	bl	800e160 <HAL_UART_Transmit>
        return 1; 
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e091      	b.n	8001da2 <Analog_Judge+0x692>
    } 
    else if (n_bands > 3 && is_symmetric)
 8001c7e:	f641 037c 	movw	r3, #6268	@ 0x187c
 8001c82:	443b      	add	r3, r7
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	dd7e      	ble.n	8001d88 <Analog_Judge+0x678>
 8001c8a:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001c8e:	443b      	add	r3, r7
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d078      	beq.n	8001d88 <Analog_Judge+0x678>
    {
    	sprintf(str , "bands' gap: %d." , bands_gap);
 8001c96:	4b4c      	ldr	r3, [pc, #304]	@ (8001dc8 <Analog_Judge+0x6b8>)
 8001c98:	f503 53c4 	add.w	r3, r3, #6272	@ 0x1880
 8001c9c:	f103 0308 	add.w	r3, r3, #8
 8001ca0:	443b      	add	r3, r7
 8001ca2:	f641 024c 	movw	r2, #6220	@ 0x184c
 8001ca6:	443a      	add	r2, r7
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	4948      	ldr	r1, [pc, #288]	@ (8001dcc <Analog_Judge+0x6bc>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f00e fd4b 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 15   ,HAL_MAX_DELAY);
 8001cb2:	4945      	ldr	r1, [pc, #276]	@ (8001dc8 <Analog_Judge+0x6b8>)
 8001cb4:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001cb8:	440b      	add	r3, r1
 8001cba:	19d9      	adds	r1, r3, r7
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	4843      	ldr	r0, [pc, #268]	@ (8001dd0 <Analog_Judge+0x6c0>)
 8001cc4:	f00c fa4c 	bl	800e160 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4941      	ldr	r1, [pc, #260]	@ (8001dd4 <Analog_Judge+0x6c4>)
 8001cd0:	483f      	ldr	r0, [pc, #252]	@ (8001dd0 <Analog_Judge+0x6c0>)
 8001cd2:	f00c fa45 	bl	800e160 <HAL_UART_Transmit>

    	sprintf(str , "frequency: %.2lf kHz." , (double)bands_gap / 81.000);
 8001cd6:	f641 034c 	movw	r3, #6220	@ 0x184c
 8001cda:	443b      	add	r3, r7
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ce6:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8001db0 <Analog_Judge+0x6a0>
 8001cea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001cee:	4836      	ldr	r0, [pc, #216]	@ (8001dc8 <Analog_Judge+0x6b8>)
 8001cf0:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001cf4:	4403      	add	r3, r0
 8001cf6:	19d8      	adds	r0, r3, r7
 8001cf8:	ec53 2b15 	vmov	r2, r3, d5
 8001cfc:	4936      	ldr	r1, [pc, #216]	@ (8001dd8 <Analog_Judge+0x6c8>)
 8001cfe:	f00e fd23 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 8001d02:	4931      	ldr	r1, [pc, #196]	@ (8001dc8 <Analog_Judge+0x6b8>)
 8001d04:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001d08:	440b      	add	r3, r1
 8001d0a:	19d9      	adds	r1, r3, r7
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d10:	2214      	movs	r2, #20
 8001d12:	482f      	ldr	r0, [pc, #188]	@ (8001dd0 <Analog_Judge+0x6c0>)
 8001d14:	f00c fa24 	bl	800e160 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	492d      	ldr	r1, [pc, #180]	@ (8001dd4 <Analog_Judge+0x6c4>)
 8001d20:	482b      	ldr	r0, [pc, #172]	@ (8001dd0 <Analog_Judge+0x6c0>)
 8001d22:	f00c fa1d 	bl	800e160 <HAL_UART_Transmit>
    	// This params come from LR with maximum error about 1.0(often non-int modulation degree). So this should be optimized.
    	sprintf(str , "degree of modulation: %.3lf." ,(bands_sum / main_band - 1.119) / 1.479);
 8001d26:	f507 53c4 	add.w	r3, r7, #6272	@ 0x1880
 8001d2a:	ed93 5b00 	vldr	d5, [r3]
 8001d2e:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001d32:	443b      	add	r3, r7
 8001d34:	ed93 6b00 	vldr	d6, [r3]
 8001d38:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d3c:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8001db8 <Analog_Judge+0x6a8>
 8001d40:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d44:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8001dc0 <Analog_Judge+0x6b0>
 8001d48:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001d4c:	481e      	ldr	r0, [pc, #120]	@ (8001dc8 <Analog_Judge+0x6b8>)
 8001d4e:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001d52:	4403      	add	r3, r0
 8001d54:	19d8      	adds	r0, r3, r7
 8001d56:	ec53 2b15 	vmov	r2, r3, d5
 8001d5a:	4921      	ldr	r1, [pc, #132]	@ (8001de0 <Analog_Judge+0x6d0>)
 8001d5c:	f00e fcf4 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 29   ,HAL_MAX_DELAY);
 8001d60:	4919      	ldr	r1, [pc, #100]	@ (8001dc8 <Analog_Judge+0x6b8>)
 8001d62:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001d66:	440b      	add	r3, r1
 8001d68:	19d9      	adds	r1, r3, r7
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d6e:	221d      	movs	r2, #29
 8001d70:	4817      	ldr	r0, [pc, #92]	@ (8001dd0 <Analog_Judge+0x6c0>)
 8001d72:	f00c f9f5 	bl	800e160 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4915      	ldr	r1, [pc, #84]	@ (8001dd4 <Analog_Judge+0x6c4>)
 8001d7e:	4814      	ldr	r0, [pc, #80]	@ (8001dd0 <Analog_Judge+0x6c0>)
 8001d80:	f00c f9ee 	bl	800e160 <HAL_UART_Transmit>
        return 2; 
 8001d84:	2302      	movs	r3, #2
 8001d86:	e00c      	b.n	8001da2 <Analog_Judge+0x692>
    }
    else
    {
        return Digital_Judge(x, v);
 8001d88:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8001d8c:	f6a3 0288 	subw	r2, r3, #2184	@ 0x888
 8001d90:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8001d94:	f6a3 0384 	subw	r3, r3, #2180	@ 0x884
 8001d98:	6811      	ldr	r1, [r2, #0]
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	f000 f824 	bl	8001de8 <Digital_Judge>
 8001da0:	4603      	mov	r3, r0
    }
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	f507 57c4 	add.w	r7, r7, #6272	@ 0x1880
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	00000000 	.word	0x00000000
 8001db4:	40544000 	.word	0x40544000
 8001db8:	8b439581 	.word	0x8b439581
 8001dbc:	3ff1e76c 	.word	0x3ff1e76c
 8001dc0:	e76c8b44 	.word	0xe76c8b44
 8001dc4:	3ff7a9fb 	.word	0x3ff7a9fb
 8001dc8:	ffffe784 	.word	0xffffe784
 8001dcc:	08015af0 	.word	0x08015af0
 8001dd0:	24024b88 	.word	0x24024b88
 8001dd4:	08015b00 	.word	0x08015b00
 8001dd8:	08015b04 	.word	0x08015b04
 8001ddc:	08015b1c 	.word	0x08015b1c
 8001de0:	08015b38 	.word	0x08015b38
 8001de4:	00000000 	.word	0x00000000

08001de8 <Digital_Judge>:
    

int Digital_Judge(double x[], double v[])
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	f5ad 5dbf 	sub.w	sp, sp, #6112	@ 0x17e0
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8001df6:	f2a3 73f4 	subw	r3, r3, #2036	@ 0x7f4
 8001dfa:	6018      	str	r0, [r3, #0]
 8001dfc:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8001e00:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8001e04:	6019      	str	r1, [r3, #0]
    double main_band = 0;
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	f241 71f0 	movw	r1, #6128	@ 0x17f0
 8001e12:	4439      	add	r1, r7
 8001e14:	e9c1 2300 	strd	r2, r3, [r1]
    int center_idx = 1640;
 8001e18:	f44f 63cd 	mov.w	r3, #1640	@ 0x668
 8001e1c:	f241 72ec 	movw	r2, #6124	@ 0x17ec
 8001e20:	443a      	add	r2, r7
 8001e22:	6013      	str	r3, [r2, #0]
    double bands[500];
    int bands_idx[500];
    int bands_gap = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f241 72b8 	movw	r2, #6072	@ 0x17b8
 8001e2a:	443a      	add	r2, r7
 8001e2c:	6013      	str	r3, [r2, #0]
    int is_centered = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f241 72e8 	movw	r2, #6120	@ 0x17e8
 8001e34:	443a      	add	r2, r7
 8001e36:	6013      	str	r3, [r2, #0]
    int is_adjoint = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f241 72e4 	movw	r2, #6116	@ 0x17e4
 8001e3e:	443a      	add	r2, r7
 8001e40:	6013      	str	r3, [r2, #0]
    int adjoint_count = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 8001e48:	6013      	str	r3, [r2, #0]
    char str[50];

    for (int i = 100; i < FO_LENGTH / 2 - 50; i++)
 8001e4a:	2364      	movs	r3, #100	@ 0x64
 8001e4c:	f241 72dc 	movw	r2, #6108	@ 0x17dc
 8001e50:	443a      	add	r2, r7
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e031      	b.n	8001eba <Digital_Judge+0xd2>
    {
        if (x[i] > main_band)
 8001e56:	f241 73dc 	movw	r3, #6108	@ 0x17dc
 8001e5a:	443b      	add	r3, r7
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 8001e64:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	ed93 7b00 	vldr	d7, [r3]
 8001e70:	f241 73f0 	movw	r3, #6128	@ 0x17f0
 8001e74:	443b      	add	r3, r7
 8001e76:	ed93 6b00 	vldr	d6, [r3]
 8001e7a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	d511      	bpl.n	8001ea8 <Digital_Judge+0xc0>
        {
            main_band = x[i];
 8001e84:	f241 73dc 	movw	r3, #6108	@ 0x17dc
 8001e88:	443b      	add	r3, r7
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 8001e92:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f241 71f0 	movw	r1, #6128	@ 0x17f0
 8001ea2:	4439      	add	r1, r7
 8001ea4:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 100; i < FO_LENGTH / 2 - 50; i++)
 8001ea8:	f241 73dc 	movw	r3, #6108	@ 0x17dc
 8001eac:	443b      	add	r3, r7
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f241 72dc 	movw	r2, #6108	@ 0x17dc
 8001eb6:	443a      	add	r2, r7
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	f241 73dc 	movw	r3, #6108	@ 0x17dc
 8001ebe:	443b      	add	r3, r7
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f640 72cd 	movw	r2, #4045	@ 0xfcd
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	ddc5      	ble.n	8001e56 <Digital_Judge+0x6e>
        }
    }

    double threshold = main_band * 0.2;
 8001eca:	f241 73f0 	movw	r3, #6128	@ 0x17f0
 8001ece:	443b      	add	r3, r7
 8001ed0:	ed93 7b00 	vldr	d7, [r3]
 8001ed4:	ed9f 6b9a 	vldr	d6, [pc, #616]	@ 8002140 <Digital_Judge+0x358>
 8001ed8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001edc:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 8001ee0:	443b      	add	r3, r7
 8001ee2:	ed83 7b00 	vstr	d7, [r3]
    int significant_bands = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f241 72d8 	movw	r2, #6104	@ 0x17d8
 8001eec:	443a      	add	r2, r7
 8001eee:	6013      	str	r3, [r2, #0]
    double band_sum = 0;
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	f241 71d0 	movw	r1, #6096	@ 0x17d0
 8001efc:	4439      	add	r1, r7
 8001efe:	e9c1 2300 	strd	r2, r3, [r1]

    for (int i = center_idx - FO_LENGTH / 8; i <= center_idx + FO_LENGTH / 8; i++)
 8001f02:	f241 73ec 	movw	r3, #6124	@ 0x17ec
 8001f06:	443b      	add	r3, r7
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001f0e:	f241 72cc 	movw	r2, #6092	@ 0x17cc
 8001f12:	443a      	add	r2, r7
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e0b7      	b.n	8002088 <Digital_Judge+0x2a0>
    {
        if (x[i] > threshold)
 8001f18:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 8001f1c:	443b      	add	r3, r7
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 8001f26:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	ed93 7b00 	vldr	d7, [r3]
 8001f32:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 8001f36:	443b      	add	r3, r7
 8001f38:	ed93 6b00 	vldr	d6, [r3]
 8001f3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	f140 8097 	bpl.w	8002076 <Digital_Judge+0x28e>
        {
            int flag = 1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f241 72c8 	movw	r2, #6088	@ 0x17c8
 8001f4e:	443a      	add	r2, r7
 8001f50:	6013      	str	r3, [r2, #0]
            for (int j = i - 2; j < i + 2; j++)
 8001f52:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 8001f56:	443b      	add	r3, r7
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	3b02      	subs	r3, #2
 8001f5c:	f241 72c4 	movw	r2, #6084	@ 0x17c4
 8001f60:	443a      	add	r2, r7
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e02c      	b.n	8001fc0 <Digital_Judge+0x1d8>
            {
                if (x[j] > x[i])
 8001f66:	f241 73c4 	movw	r3, #6084	@ 0x17c4
 8001f6a:	443b      	add	r3, r7
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 8001f74:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	ed93 6b00 	vldr	d6, [r3]
 8001f80:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 8001f84:	443b      	add	r3, r7
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 8001f8e:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	4413      	add	r3, r2
 8001f96:	ed93 7b00 	vldr	d7, [r3]
 8001f9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa2:	dd04      	ble.n	8001fae <Digital_Judge+0x1c6>
                    flag = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f241 72c8 	movw	r2, #6088	@ 0x17c8
 8001faa:	443a      	add	r2, r7
 8001fac:	6013      	str	r3, [r2, #0]
            for (int j = i - 2; j < i + 2; j++)
 8001fae:	f241 73c4 	movw	r3, #6084	@ 0x17c4
 8001fb2:	443b      	add	r3, r7
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f241 72c4 	movw	r2, #6084	@ 0x17c4
 8001fbc:	443a      	add	r2, r7
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 8001fc4:	443b      	add	r3, r7
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f241 72c4 	movw	r2, #6084	@ 0x17c4
 8001fce:	443a      	add	r2, r7
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	ddc7      	ble.n	8001f66 <Digital_Judge+0x17e>
            }
            if (flag == 1)
 8001fd6:	f241 73c8 	movw	r3, #6088	@ 0x17c8
 8001fda:	443b      	add	r3, r7
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d149      	bne.n	8002076 <Digital_Judge+0x28e>
            {
                bands[significant_bands] = x[i];
 8001fe2:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 8001fe6:	443b      	add	r3, r7
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 8001ff0:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	f241 71f8 	movw	r1, #6136	@ 0x17f8
 8002000:	4439      	add	r1, r7
 8002002:	f6a1 70e8 	subw	r0, r1, #4072	@ 0xfe8
 8002006:	f241 71d8 	movw	r1, #6104	@ 0x17d8
 800200a:	4439      	add	r1, r7
 800200c:	6809      	ldr	r1, [r1, #0]
 800200e:	00c9      	lsls	r1, r1, #3
 8002010:	4401      	add	r1, r0
 8002012:	e9c1 2300 	strd	r2, r3, [r1]
                bands_idx[significant_bands] = i;
 8002016:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 800201a:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 800201e:	f241 72d8 	movw	r2, #6104	@ 0x17d8
 8002022:	443a      	add	r2, r7
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	f241 71cc 	movw	r1, #6092	@ 0x17cc
 800202a:	4439      	add	r1, r7
 800202c:	6809      	ldr	r1, [r1, #0]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                significant_bands++;
 8002032:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 8002036:	443b      	add	r3, r7
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	f241 72d8 	movw	r2, #6104	@ 0x17d8
 8002040:	443a      	add	r2, r7
 8002042:	6013      	str	r3, [r2, #0]
                band_sum += x[i];
 8002044:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 8002048:	443b      	add	r3, r7
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 8002052:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4413      	add	r3, r2
 800205a:	ed93 7b00 	vldr	d7, [r3]
 800205e:	f241 73d0 	movw	r3, #6096	@ 0x17d0
 8002062:	443b      	add	r3, r7
 8002064:	ed93 6b00 	vldr	d6, [r3]
 8002068:	ee36 7b07 	vadd.f64	d7, d6, d7
 800206c:	f241 73d0 	movw	r3, #6096	@ 0x17d0
 8002070:	443b      	add	r3, r7
 8002072:	ed83 7b00 	vstr	d7, [r3]
    for (int i = center_idx - FO_LENGTH / 8; i <= center_idx + FO_LENGTH / 8; i++)
 8002076:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 800207a:	443b      	add	r3, r7
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	f241 72cc 	movw	r2, #6092	@ 0x17cc
 8002084:	443a      	add	r2, r7
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	f241 73ec 	movw	r3, #6124	@ 0x17ec
 800208c:	443b      	add	r3, r7
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002094:	f241 72cc 	movw	r2, #6092	@ 0x17cc
 8002098:	443a      	add	r2, r7
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	f77f af3b 	ble.w	8001f18 <Digital_Judge+0x130>

            }
        }
    }

	for (int i = 0; i < significant_bands; i++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	f507 52be 	add.w	r2, r7, #6080	@ 0x17c0
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e039      	b.n	8002120 <Digital_Judge+0x338>
	{
		if(abs(center_idx - bands_idx[i]) < 10)
 80020ac:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 80020b0:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 80020b4:	f507 52be 	add.w	r2, r7, #6080	@ 0x17c0
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020be:	f241 72ec 	movw	r2, #6124	@ 0x17ec
 80020c2:	443a      	add	r2, r7
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f113 0f09 	cmn.w	r3, #9
 80020cc:	db21      	blt.n	8002112 <Digital_Judge+0x32a>
 80020ce:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 80020d2:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 80020d6:	f507 52be 	add.w	r2, r7, #6080	@ 0x17c0
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e0:	f241 72ec 	movw	r2, #6124	@ 0x17ec
 80020e4:	443a      	add	r2, r7
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b09      	cmp	r3, #9
 80020ec:	dc11      	bgt.n	8002112 <Digital_Judge+0x32a>
			{
				center_idx = bands_idx[i];
 80020ee:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 80020f2:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 80020f6:	f507 52be 	add.w	r2, r7, #6080	@ 0x17c0
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002100:	f241 72ec 	movw	r2, #6124	@ 0x17ec
 8002104:	443a      	add	r2, r7
 8002106:	6013      	str	r3, [r2, #0]
				is_centered = 1;
 8002108:	2301      	movs	r3, #1
 800210a:	f241 72e8 	movw	r2, #6120	@ 0x17e8
 800210e:	443a      	add	r2, r7
 8002110:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < significant_bands; i++)
 8002112:	f507 53be 	add.w	r3, r7, #6080	@ 0x17c0
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	f507 52be 	add.w	r2, r7, #6080	@ 0x17c0
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	f507 53be 	add.w	r3, r7, #6080	@ 0x17c0
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 800212a:	443b      	add	r3, r7
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	dbbc      	blt.n	80020ac <Digital_Judge+0x2c4>
			}
	}
	for (int i = 1; i < significant_bands - 1; i++)
 8002132:	2301      	movs	r3, #1
 8002134:	f241 72bc 	movw	r2, #6076	@ 0x17bc
 8002138:	443a      	add	r2, r7
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	e0b2      	b.n	80022a4 <Digital_Judge+0x4bc>
 800213e:	bf00      	nop
 8002140:	9999999a 	.word	0x9999999a
 8002144:	3fc99999 	.word	0x3fc99999
 8002148:	00000000 	.word	0x00000000
 800214c:	40444000 	.word	0x40444000
	{
		if ((abs(bands[i] - bands[i - 1]) < 50) || (abs(bands[i] - bands[i + 1]) < 50))
 8002150:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 8002154:	443b      	add	r3, r7
 8002156:	f6a3 72e8 	subw	r2, r3, #4072	@ 0xfe8
 800215a:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 800215e:	443b      	add	r3, r7
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	ed93 6b00 	vldr	d6, [r3]
 800216a:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 800216e:	443b      	add	r3, r7
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3b01      	subs	r3, #1
 8002174:	f241 72f8 	movw	r2, #6136	@ 0x17f8
 8002178:	443a      	add	r2, r7
 800217a:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	ed93 7b00 	vldr	d7, [r3]
 8002186:	ee36 7b47 	vsub.f64	d7, d6, d7
 800218a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800218e:	ee17 3a90 	vmov	r3, s15
 8002192:	f113 0f31 	cmn.w	r3, #49	@ 0x31
 8002196:	db22      	blt.n	80021de <Digital_Judge+0x3f6>
 8002198:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 800219c:	443b      	add	r3, r7
 800219e:	f6a3 72e8 	subw	r2, r3, #4072	@ 0xfe8
 80021a2:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 80021a6:	443b      	add	r3, r7
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	ed93 6b00 	vldr	d6, [r3]
 80021b2:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 80021b6:	443b      	add	r3, r7
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f241 72f8 	movw	r2, #6136	@ 0x17f8
 80021c0:	443a      	add	r2, r7
 80021c2:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	ed93 7b00 	vldr	d7, [r3]
 80021ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021d2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80021d6:	ee17 3a90 	vmov	r3, s15
 80021da:	2b31      	cmp	r3, #49	@ 0x31
 80021dc:	dd46      	ble.n	800226c <Digital_Judge+0x484>
 80021de:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 80021e2:	443b      	add	r3, r7
 80021e4:	f6a3 72e8 	subw	r2, r3, #4072	@ 0xfe8
 80021e8:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 80021ec:	443b      	add	r3, r7
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	ed93 6b00 	vldr	d6, [r3]
 80021f8:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 80021fc:	443b      	add	r3, r7
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	f241 72f8 	movw	r2, #6136	@ 0x17f8
 8002206:	443a      	add	r2, r7
 8002208:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	ed93 7b00 	vldr	d7, [r3]
 8002214:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002218:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800221c:	ee17 3a90 	vmov	r3, s15
 8002220:	f113 0f31 	cmn.w	r3, #49	@ 0x31
 8002224:	db29      	blt.n	800227a <Digital_Judge+0x492>
 8002226:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 800222a:	443b      	add	r3, r7
 800222c:	f6a3 72e8 	subw	r2, r3, #4072	@ 0xfe8
 8002230:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 8002234:	443b      	add	r3, r7
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	ed93 6b00 	vldr	d6, [r3]
 8002240:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 8002244:	443b      	add	r3, r7
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	f241 72f8 	movw	r2, #6136	@ 0x17f8
 800224e:	443a      	add	r2, r7
 8002250:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	ed93 7b00 	vldr	d7, [r3]
 800225c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002260:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002264:	ee17 3a90 	vmov	r3, s15
 8002268:	2b31      	cmp	r3, #49	@ 0x31
 800226a:	dc06      	bgt.n	800227a <Digital_Judge+0x492>
		{
			adjoint_count ++;
 800226c:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 8002278:	6013      	str	r3, [r2, #0]
		}
		is_adjoint = (adjoint_count < 3) ? 0 : 1;
 800227a:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b02      	cmp	r3, #2
 8002282:	bfcc      	ite	gt
 8002284:	2301      	movgt	r3, #1
 8002286:	2300      	movle	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f241 72e4 	movw	r2, #6116	@ 0x17e4
 800228e:	443a      	add	r2, r7
 8002290:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < significant_bands - 1; i++)
 8002292:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 8002296:	443b      	add	r3, r7
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3301      	adds	r3, #1
 800229c:	f241 72bc 	movw	r2, #6076	@ 0x17bc
 80022a0:	443a      	add	r2, r7
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 80022a8:	443b      	add	r3, r7
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	f241 72bc 	movw	r2, #6076	@ 0x17bc
 80022b2:	443a      	add	r2, r7
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	f6ff af4a 	blt.w	8002150 <Digital_Judge+0x368>

//	sprintf(str , "number of significant bands: %d." , significant_bands);
//	HAL_UART_Transmit(&huart1,(uint8_t *)str , 31   ,HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);

    if (is_adjoint)
 80022bc:	f241 73e4 	movw	r3, #6116	@ 0x17e4
 80022c0:	443b      	add	r3, r7
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d050      	beq.n	800236a <Digital_Judge+0x582>
    {
    	bands_gap = bands_idx[significant_bands / 2 + 1] - bands_idx[significant_bands / 2 - 1];
 80022c8:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 80022cc:	443b      	add	r3, r7
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	da00      	bge.n	80022d6 <Digital_Judge+0x4ee>
 80022d4:	3301      	adds	r3, #1
 80022d6:	105b      	asrs	r3, r3, #1
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 80022de:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 80022e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022e6:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 80022ea:	443b      	add	r3, r7
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da00      	bge.n	80022f4 <Digital_Judge+0x50c>
 80022f2:	3301      	adds	r3, #1
 80022f4:	105b      	asrs	r3, r3, #1
 80022f6:	1e59      	subs	r1, r3, #1
 80022f8:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 80022fc:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 8002300:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 72b8 	movw	r2, #6072	@ 0x17b8
 800230a:	443a      	add	r2, r7
 800230c:	6013      	str	r3, [r2, #0]
    	sprintf(str , "bit rate: %.2lf kbps." , (double)bands_gap / 40.500 / 2);
 800230e:	f241 73b8 	movw	r3, #6072	@ 0x17b8
 8002312:	443b      	add	r3, r7
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800231e:	ed1f 5b76 	vldr	d5, [pc, #-472]	@ 8002148 <Digital_Judge+0x360>
 8002322:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002326:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 800232a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800232e:	4872      	ldr	r0, [pc, #456]	@ (80024f8 <Digital_Judge+0x710>)
 8002330:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 8002334:	4403      	add	r3, r0
 8002336:	19d8      	adds	r0, r3, r7
 8002338:	ec53 2b15 	vmov	r2, r3, d5
 800233c:	496f      	ldr	r1, [pc, #444]	@ (80024fc <Digital_Judge+0x714>)
 800233e:	f00e fa03 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 8002342:	496d      	ldr	r1, [pc, #436]	@ (80024f8 <Digital_Judge+0x710>)
 8002344:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 8002348:	440b      	add	r3, r1
 800234a:	19d9      	adds	r1, r3, r7
 800234c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002350:	2214      	movs	r2, #20
 8002352:	486b      	ldr	r0, [pc, #428]	@ (8002500 <Digital_Judge+0x718>)
 8002354:	f00b ff04 	bl	800e160 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8002358:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800235c:	2201      	movs	r2, #1
 800235e:	4969      	ldr	r1, [pc, #420]	@ (8002504 <Digital_Judge+0x71c>)
 8002360:	4867      	ldr	r0, [pc, #412]	@ (8002500 <Digital_Judge+0x718>)
 8002362:	f00b fefd 	bl	800e160 <HAL_UART_Transmit>
        return 4;
 8002366:	2304      	movs	r3, #4
 8002368:	e0ba      	b.n	80024e0 <Digital_Judge+0x6f8>
    }
    else if (!is_adjoint && is_centered)
 800236a:	f241 73e4 	movw	r3, #6116	@ 0x17e4
 800236e:	443b      	add	r3, r7
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d156      	bne.n	8002424 <Digital_Judge+0x63c>
 8002376:	f241 73e8 	movw	r3, #6120	@ 0x17e8
 800237a:	443b      	add	r3, r7
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d050      	beq.n	8002424 <Digital_Judge+0x63c>
    {
    	bands_gap = bands_idx[significant_bands / 2 + 1] - bands_idx[significant_bands / 2];
 8002382:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 8002386:	443b      	add	r3, r7
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	da00      	bge.n	8002390 <Digital_Judge+0x5a8>
 800238e:	3301      	adds	r3, #1
 8002390:	105b      	asrs	r3, r3, #1
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8002398:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 800239c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023a0:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 80023a4:	443b      	add	r3, r7
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	da00      	bge.n	80023ae <Digital_Judge+0x5c6>
 80023ac:	3301      	adds	r3, #1
 80023ae:	105b      	asrs	r3, r3, #1
 80023b0:	4619      	mov	r1, r3
 80023b2:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 80023b6:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 80023ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f241 72b8 	movw	r2, #6072	@ 0x17b8
 80023c4:	443a      	add	r2, r7
 80023c6:	6013      	str	r3, [r2, #0]
    	sprintf(str , "bit rate: %.2lf kbps." , (double)bands_gap / 40.500 / 2);
 80023c8:	f241 73b8 	movw	r3, #6072	@ 0x17b8
 80023cc:	443b      	add	r3, r7
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	ee07 3a90 	vmov	s15, r3
 80023d4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023d8:	ed9f 5b45 	vldr	d5, [pc, #276]	@ 80024f0 <Digital_Judge+0x708>
 80023dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023e0:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 80023e4:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80023e8:	4843      	ldr	r0, [pc, #268]	@ (80024f8 <Digital_Judge+0x710>)
 80023ea:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 80023ee:	4403      	add	r3, r0
 80023f0:	19d8      	adds	r0, r3, r7
 80023f2:	ec53 2b15 	vmov	r2, r3, d5
 80023f6:	4941      	ldr	r1, [pc, #260]	@ (80024fc <Digital_Judge+0x714>)
 80023f8:	f00e f9a6 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 80023fc:	493e      	ldr	r1, [pc, #248]	@ (80024f8 <Digital_Judge+0x710>)
 80023fe:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 8002402:	440b      	add	r3, r1
 8002404:	19d9      	adds	r1, r3, r7
 8002406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800240a:	2214      	movs	r2, #20
 800240c:	483c      	ldr	r0, [pc, #240]	@ (8002500 <Digital_Judge+0x718>)
 800240e:	f00b fea7 	bl	800e160 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8002412:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002416:	2201      	movs	r2, #1
 8002418:	493a      	ldr	r1, [pc, #232]	@ (8002504 <Digital_Judge+0x71c>)
 800241a:	4839      	ldr	r0, [pc, #228]	@ (8002500 <Digital_Judge+0x718>)
 800241c:	f00b fea0 	bl	800e160 <HAL_UART_Transmit>
        return 3;
 8002420:	2303      	movs	r3, #3
 8002422:	e05d      	b.n	80024e0 <Digital_Judge+0x6f8>
    }
    else if (!is_adjoint && !is_centered)
 8002424:	f241 73e4 	movw	r3, #6116	@ 0x17e4
 8002428:	443b      	add	r3, r7
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d156      	bne.n	80024de <Digital_Judge+0x6f6>
 8002430:	f241 73e8 	movw	r3, #6120	@ 0x17e8
 8002434:	443b      	add	r3, r7
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d150      	bne.n	80024de <Digital_Judge+0x6f6>
    {
    	bands_gap = bands_idx[significant_bands / 2 + 1] - bands_idx[significant_bands / 2];
 800243c:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 8002440:	443b      	add	r3, r7
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	da00      	bge.n	800244a <Digital_Judge+0x662>
 8002448:	3301      	adds	r3, #1
 800244a:	105b      	asrs	r3, r3, #1
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8002452:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 8002456:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800245a:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 800245e:	443b      	add	r3, r7
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	da00      	bge.n	8002468 <Digital_Judge+0x680>
 8002466:	3301      	adds	r3, #1
 8002468:	105b      	asrs	r3, r3, #1
 800246a:	4619      	mov	r1, r3
 800246c:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8002470:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 8002474:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 72b8 	movw	r2, #6072	@ 0x17b8
 800247e:	443a      	add	r2, r7
 8002480:	6013      	str	r3, [r2, #0]
    	sprintf(str , "bit rate: %.2lf kbps." , (double)bands_gap / 40.500 / 4);
 8002482:	f241 73b8 	movw	r3, #6072	@ 0x17b8
 8002486:	443b      	add	r3, r7
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002492:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 80024f0 <Digital_Judge+0x708>
 8002496:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800249a:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 800249e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80024a2:	4815      	ldr	r0, [pc, #84]	@ (80024f8 <Digital_Judge+0x710>)
 80024a4:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 80024a8:	4403      	add	r3, r0
 80024aa:	19d8      	adds	r0, r3, r7
 80024ac:	ec53 2b15 	vmov	r2, r3, d5
 80024b0:	4912      	ldr	r1, [pc, #72]	@ (80024fc <Digital_Judge+0x714>)
 80024b2:	f00e f949 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 80024b6:	4910      	ldr	r1, [pc, #64]	@ (80024f8 <Digital_Judge+0x710>)
 80024b8:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 80024bc:	440b      	add	r3, r1
 80024be:	19d9      	adds	r1, r3, r7
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024c4:	2214      	movs	r2, #20
 80024c6:	480e      	ldr	r0, [pc, #56]	@ (8002500 <Digital_Judge+0x718>)
 80024c8:	f00b fe4a 	bl	800e160 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024d0:	2201      	movs	r2, #1
 80024d2:	490c      	ldr	r1, [pc, #48]	@ (8002504 <Digital_Judge+0x71c>)
 80024d4:	480a      	ldr	r0, [pc, #40]	@ (8002500 <Digital_Judge+0x718>)
 80024d6:	f00b fe43 	bl	800e160 <HAL_UART_Transmit>

    	return 5;
 80024da:	2305      	movs	r3, #5
 80024dc:	e000      	b.n	80024e0 <Digital_Judge+0x6f8>
    }
    else {
    	return 6;
 80024de:	2306      	movs	r3, #6
    }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	f507 57bf 	add.w	r7, r7, #6112	@ 0x17e0
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	f3af 8000 	nop.w
 80024f0:	00000000 	.word	0x00000000
 80024f4:	40444000 	.word	0x40444000
 80024f8:	ffffe814 	.word	0xffffe814
 80024fc:	08015b58 	.word	0x08015b58
 8002500:	24024b88 	.word	0x24024b88
 8002504:	08015b00 	.word	0x08015b00

08002508 <Judger>:

 


void Judger(int value)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0b4      	sub	sp, #208	@ 0xd0
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	char str[200];

	if (value == -1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002516:	d10e      	bne.n	8002536 <Judger+0x2e>
	{
    	sprintf(str , "No signal.\n");
 8002518:	f107 0308 	add.w	r3, r7, #8
 800251c:	4945      	ldr	r1, [pc, #276]	@ (8002634 <Judger+0x12c>)
 800251e:	4618      	mov	r0, r3
 8002520:	f00e f912 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 12   ,HAL_MAX_DELAY);
 8002524:	f107 0108 	add.w	r1, r7, #8
 8002528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800252c:	220c      	movs	r2, #12
 800252e:	4842      	ldr	r0, [pc, #264]	@ (8002638 <Judger+0x130>)
 8002530:	f00b fe16 	bl	800e160 <HAL_UART_Transmit>
    else
    {
    	sprintf(str , "Unknown signal.\n");
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
	}
}
 8002534:	e079      	b.n	800262a <Judger+0x122>
	else if (value == 0)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10e      	bne.n	800255a <Judger+0x52>
    	sprintf(str , "CW signal.\n");
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	493e      	ldr	r1, [pc, #248]	@ (800263c <Judger+0x134>)
 8002542:	4618      	mov	r0, r3
 8002544:	f00e f900 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 12   ,HAL_MAX_DELAY);
 8002548:	f107 0108 	add.w	r1, r7, #8
 800254c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002550:	220c      	movs	r2, #12
 8002552:	4839      	ldr	r0, [pc, #228]	@ (8002638 <Judger+0x130>)
 8002554:	f00b fe04 	bl	800e160 <HAL_UART_Transmit>
}
 8002558:	e067      	b.n	800262a <Judger+0x122>
    else if (value == 1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d10e      	bne.n	800257e <Judger+0x76>
    	sprintf(str , "AM signal.\n");
 8002560:	f107 0308 	add.w	r3, r7, #8
 8002564:	4936      	ldr	r1, [pc, #216]	@ (8002640 <Judger+0x138>)
 8002566:	4618      	mov	r0, r3
 8002568:	f00e f8ee 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 11   ,HAL_MAX_DELAY);
 800256c:	f107 0108 	add.w	r1, r7, #8
 8002570:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002574:	220b      	movs	r2, #11
 8002576:	4830      	ldr	r0, [pc, #192]	@ (8002638 <Judger+0x130>)
 8002578:	f00b fdf2 	bl	800e160 <HAL_UART_Transmit>
}
 800257c:	e055      	b.n	800262a <Judger+0x122>
    else if (value == 2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d10e      	bne.n	80025a2 <Judger+0x9a>
    	sprintf(str , "FM signal.\n");
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	492e      	ldr	r1, [pc, #184]	@ (8002644 <Judger+0x13c>)
 800258a:	4618      	mov	r0, r3
 800258c:	f00e f8dc 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 11   ,HAL_MAX_DELAY);
 8002590:	f107 0108 	add.w	r1, r7, #8
 8002594:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002598:	220b      	movs	r2, #11
 800259a:	4827      	ldr	r0, [pc, #156]	@ (8002638 <Judger+0x130>)
 800259c:	f00b fde0 	bl	800e160 <HAL_UART_Transmit>
}
 80025a0:	e043      	b.n	800262a <Judger+0x122>
    else if (value == 3)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d10e      	bne.n	80025c6 <Judger+0xbe>
    	sprintf(str , "ASK signal.\n");
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	4926      	ldr	r1, [pc, #152]	@ (8002648 <Judger+0x140>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	f00e f8ca 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 80025b4:	f107 0108 	add.w	r1, r7, #8
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025bc:	221c      	movs	r2, #28
 80025be:	481e      	ldr	r0, [pc, #120]	@ (8002638 <Judger+0x130>)
 80025c0:	f00b fdce 	bl	800e160 <HAL_UART_Transmit>
}
 80025c4:	e031      	b.n	800262a <Judger+0x122>
    else if (value == 4)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d10e      	bne.n	80025ea <Judger+0xe2>
    	sprintf(str , "FSK signal.\n");
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	491e      	ldr	r1, [pc, #120]	@ (800264c <Judger+0x144>)
 80025d2:	4618      	mov	r0, r3
 80025d4:	f00e f8b8 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 80025d8:	f107 0108 	add.w	r1, r7, #8
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025e0:	221c      	movs	r2, #28
 80025e2:	4815      	ldr	r0, [pc, #84]	@ (8002638 <Judger+0x130>)
 80025e4:	f00b fdbc 	bl	800e160 <HAL_UART_Transmit>
}
 80025e8:	e01f      	b.n	800262a <Judger+0x122>
    else if (value == 5)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d10e      	bne.n	800260e <Judger+0x106>
    	sprintf(str, "PSK signal.\n");
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	4916      	ldr	r1, [pc, #88]	@ (8002650 <Judger+0x148>)
 80025f6:	4618      	mov	r0, r3
 80025f8:	f00e f8a6 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 80025fc:	f107 0108 	add.w	r1, r7, #8
 8002600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002604:	221c      	movs	r2, #28
 8002606:	480c      	ldr	r0, [pc, #48]	@ (8002638 <Judger+0x130>)
 8002608:	f00b fdaa 	bl	800e160 <HAL_UART_Transmit>
}
 800260c:	e00d      	b.n	800262a <Judger+0x122>
    	sprintf(str , "Unknown signal.\n");
 800260e:	f107 0308 	add.w	r3, r7, #8
 8002612:	4910      	ldr	r1, [pc, #64]	@ (8002654 <Judger+0x14c>)
 8002614:	4618      	mov	r0, r3
 8002616:	f00e f897 	bl	8010748 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 800261a:	f107 0108 	add.w	r1, r7, #8
 800261e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002622:	221c      	movs	r2, #28
 8002624:	4804      	ldr	r0, [pc, #16]	@ (8002638 <Judger+0x130>)
 8002626:	f00b fd9b 	bl	800e160 <HAL_UART_Transmit>
}
 800262a:	bf00      	nop
 800262c:	37d0      	adds	r7, #208	@ 0xd0
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	08015b70 	.word	0x08015b70
 8002638:	24024b88 	.word	0x24024b88
 800263c:	08015b7c 	.word	0x08015b7c
 8002640:	08015b88 	.word	0x08015b88
 8002644:	08015b94 	.word	0x08015b94
 8002648:	08015ba0 	.word	0x08015ba0
 800264c:	08015bb0 	.word	0x08015bb0
 8002650:	08015bc0 	.word	0x08015bc0
 8002654:	08015bd0 	.word	0x08015bd0

08002658 <adc_init>:
double v[FO_LENGTH];
double demodulated_signal[FO_LENGTH];
int value = 0;

void adc_init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
 800265c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002660:	220b      	movs	r2, #11
 8002662:	4924      	ldr	r1, [pc, #144]	@ (80026f4 <adc_init+0x9c>)
 8002664:	4824      	ldr	r0, [pc, #144]	@ (80026f8 <adc_init+0xa0>)
 8002666:	f00b fd7b 	bl	800e160 <HAL_UART_Transmit>
	if (value == 5)
 800266a:	4b24      	ldr	r3, [pc, #144]	@ (80026fc <adc_init+0xa4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b05      	cmp	r3, #5
 8002670:	d102      	bne.n	8002678 <adc_init+0x20>
	{
		MX_ADC1ForSampling_Init();
 8002672:	f7fe fddd 	bl	8001230 <MX_ADC1ForSampling_Init>
 8002676:	e001      	b.n	800267c <adc_init+0x24>
	}
	else
	{
		MX_ADC1_Init();
 8002678:	f7fe fc96 	bl	8000fa8 <MX_ADC1_Init>
	}
	HAL_Delay(1);
 800267c:	2001      	movs	r0, #1
 800267e:	f001 f8ad 	bl	80037dc <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8002682:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002686:	2100      	movs	r1, #0
 8002688:	481d      	ldr	r0, [pc, #116]	@ (8002700 <adc_init+0xa8>)
 800268a:	f002 fdf9 	bl	8005280 <HAL_ADCEx_Calibration_Start>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <adc_init+0x4e>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 8002694:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002698:	222f      	movs	r2, #47	@ 0x2f
 800269a:	491a      	ldr	r1, [pc, #104]	@ (8002704 <adc_init+0xac>)
 800269c:	4816      	ldr	r0, [pc, #88]	@ (80026f8 <adc_init+0xa0>)
 800269e:	f00b fd5f 	bl	800e160 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 80026a2:	f000 fb71 	bl	8002d88 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data, FO_LENGTH) != HAL_OK)
 80026a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026aa:	4917      	ldr	r1, [pc, #92]	@ (8002708 <adc_init+0xb0>)
 80026ac:	4814      	ldr	r0, [pc, #80]	@ (8002700 <adc_init+0xa8>)
 80026ae:	f001 fe1f 	bl	80042f0 <HAL_ADC_Start_DMA>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <adc_init+0x72>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026bc:	2225      	movs	r2, #37	@ 0x25
 80026be:	4913      	ldr	r1, [pc, #76]	@ (800270c <adc_init+0xb4>)
 80026c0:	480d      	ldr	r0, [pc, #52]	@ (80026f8 <adc_init+0xa0>)
 80026c2:	f00b fd4d 	bl	800e160 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 80026c6:	f000 fb5f 	bl	8002d88 <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 80026ca:	4811      	ldr	r0, [pc, #68]	@ (8002710 <adc_init+0xb8>)
 80026cc:	f00a fce0 	bl	800d090 <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 80026d0:	bf00      	nop
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <adc_init+0xbc>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0fa      	beq.n	80026d2 <adc_init+0x7a>
	AdcConvEnd = 0;
 80026dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002714 <adc_init+0xbc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 80026e2:	4807      	ldr	r0, [pc, #28]	@ (8002700 <adc_init+0xa8>)
 80026e4:	f001 fc84 	bl	8003ff0 <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 80026e8:	4809      	ldr	r0, [pc, #36]	@ (8002710 <adc_init+0xb8>)
 80026ea:	f00a fd41 	bl	800d170 <HAL_TIM_Base_Stop>
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	08015be4 	.word	0x08015be4
 80026f8:	24024b88 	.word	0x24024b88
 80026fc:	24024a50 	.word	0x24024a50
 8002700:	2400488c 	.word	0x2400488c
 8002704:	08015bf0 	.word	0x08015bf0
 8002708:	240006e0 	.word	0x240006e0
 800270c:	08015c20 	.word	0x08015c20
 8002710:	24024b3c 	.word	0x24024b3c
 8002714:	24004a48 	.word	0x24004a48

08002718 <ADC_Get>:


void ADC_Get(double arr[])
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	adc_init();
 8002720:	f7ff ff9a 	bl	8002658 <adc_init>
	double voltage;
//	char str[50];

	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 8002724:	2300      	movs	r3, #0
 8002726:	82fb      	strh	r3, [r7, #22]
 8002728:	e020      	b.n	800276c <ADC_Get+0x54>
		voltage = ((double)adc1_data[temp]*3.3)/65535 *3;
 800272a:	8afb      	ldrh	r3, [r7, #22]
 800272c:	4a18      	ldr	r2, [pc, #96]	@ (8002790 <ADC_Get+0x78>)
 800272e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800273a:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8002780 <ADC_Get+0x68>
 800273e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002742:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8002788 <ADC_Get+0x70>
 8002746:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800274a:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 800274e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002752:	ed87 7b02 	vstr	d7, [r7, #8]

		arr[temp] = voltage;
 8002756:	8afb      	ldrh	r3, [r7, #22]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	18d1      	adds	r1, r2, r3
 800275e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002762:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 8002766:	8afb      	ldrh	r3, [r7, #22]
 8002768:	3301      	adds	r3, #1
 800276a:	82fb      	strh	r3, [r7, #22]
 800276c:	8afb      	ldrh	r3, [r7, #22]
 800276e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002772:	d3da      	bcc.n	800272a <ADC_Get+0x12>
//		sprintf(str , "%.5f" , v[temp]);
//		HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
//		HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
	}
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	66666666 	.word	0x66666666
 8002784:	400a6666 	.word	0x400a6666
 8002788:	00000000 	.word	0x00000000
 800278c:	40efffe0 	.word	0x40efffe0
 8002790:	240006e0 	.word	0x240006e0

08002794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	f5ad 3d80 	sub.w	sp, sp, #65536	@ 0x10000
 800279a:	b096      	sub	sp, #88	@ 0x58
 800279c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800279e:	f000 fa95 	bl	8002ccc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80027a2:	4bac      	ldr	r3, [pc, #688]	@ (8002a54 <main+0x2c0>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d11b      	bne.n	80027e6 <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027ae:	f3bf 8f4f 	dsb	sy
}
 80027b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027b4:	f3bf 8f6f 	isb	sy
}
 80027b8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80027ba:	4ba6      	ldr	r3, [pc, #664]	@ (8002a54 <main+0x2c0>)
 80027bc:	2200      	movs	r2, #0
 80027be:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80027c2:	f3bf 8f4f 	dsb	sy
}
 80027c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027c8:	f3bf 8f6f 	isb	sy
}
 80027cc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80027ce:	4ba1      	ldr	r3, [pc, #644]	@ (8002a54 <main+0x2c0>)
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	4aa0      	ldr	r2, [pc, #640]	@ (8002a54 <main+0x2c0>)
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80027da:	f3bf 8f4f 	dsb	sy
}
 80027de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027e0:	f3bf 8f6f 	isb	sy
}
 80027e4:	e000      	b.n	80027e8 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80027e6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80027e8:	4b9a      	ldr	r3, [pc, #616]	@ (8002a54 <main+0x2c0>)
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d14e      	bne.n	8002892 <main+0xfe>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80027f4:	4b97      	ldr	r3, [pc, #604]	@ (8002a54 <main+0x2c0>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80027fc:	f3bf 8f4f 	dsb	sy
}
 8002800:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002802:	4b94      	ldr	r3, [pc, #592]	@ (8002a54 <main+0x2c0>)
 8002804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002808:	4a93      	ldr	r2, [pc, #588]	@ (8002a58 <main+0x2c4>)
 800280a:	443a      	add	r2, r7
 800280c:	6013      	str	r3, [r2, #0]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800280e:	4b92      	ldr	r3, [pc, #584]	@ (8002a58 <main+0x2c4>)
 8002810:	443b      	add	r3, r7
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0b5b      	lsrs	r3, r3, #13
 8002816:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800281a:	4a90      	ldr	r2, [pc, #576]	@ (8002a5c <main+0x2c8>)
 800281c:	443a      	add	r2, r7
 800281e:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002820:	4b8d      	ldr	r3, [pc, #564]	@ (8002a58 <main+0x2c4>)
 8002822:	443b      	add	r3, r7
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	08db      	lsrs	r3, r3, #3
 8002828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800282c:	4a8c      	ldr	r2, [pc, #560]	@ (8002a60 <main+0x2cc>)
 800282e:	443a      	add	r2, r7
 8002830:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002832:	4b8a      	ldr	r3, [pc, #552]	@ (8002a5c <main+0x2c8>)
 8002834:	443b      	add	r3, r7
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800283e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002840:	4a87      	ldr	r2, [pc, #540]	@ (8002a60 <main+0x2cc>)
 8002842:	443a      	add	r2, r7
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002848:	4982      	ldr	r1, [pc, #520]	@ (8002a54 <main+0x2c0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002850:	4b83      	ldr	r3, [pc, #524]	@ (8002a60 <main+0x2cc>)
 8002852:	443b      	add	r3, r7
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	1e5a      	subs	r2, r3, #1
 8002858:	4981      	ldr	r1, [pc, #516]	@ (8002a60 <main+0x2cc>)
 800285a:	4439      	add	r1, r7
 800285c:	600a      	str	r2, [r1, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1e7      	bne.n	8002832 <main+0x9e>
    } while(sets-- != 0U);
 8002862:	4b7e      	ldr	r3, [pc, #504]	@ (8002a5c <main+0x2c8>)
 8002864:	443b      	add	r3, r7
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	1e5a      	subs	r2, r3, #1
 800286a:	497c      	ldr	r1, [pc, #496]	@ (8002a5c <main+0x2c8>)
 800286c:	4439      	add	r1, r7
 800286e:	600a      	str	r2, [r1, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1d5      	bne.n	8002820 <main+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002874:	f3bf 8f4f 	dsb	sy
}
 8002878:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800287a:	4b76      	ldr	r3, [pc, #472]	@ (8002a54 <main+0x2c0>)
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	4a75      	ldr	r2, [pc, #468]	@ (8002a54 <main+0x2c0>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002884:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002886:	f3bf 8f4f 	dsb	sy
}
 800288a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800288c:	f3bf 8f6f 	isb	sy
}
 8002890:	e000      	b.n	8002894 <main+0x100>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002892:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002894:	f000 ff10 	bl	80036b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002898:	f000 f952 	bl	8002b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800289c:	f7fe fe16 	bl	80014cc <MX_GPIO_Init>
  MX_DMA_Init();
 80028a0:	f7fe fdec 	bl	800147c <MX_DMA_Init>
  MX_I2C1_Init();
 80028a4:	f7fe fe8c 	bl	80015c0 <MX_I2C1_Init>
  MX_TIM15_Init();
 80028a8:	f000 fd2c 	bl	8003304 <MX_TIM15_Init>
  MX_DAC1_Init();
 80028ac:	f7fe fd3a 	bl	8001324 <MX_DAC1_Init>
  MX_TIM7_Init();
 80028b0:	f000 fcf2 	bl	8003298 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80028b4:	f000 fe18 	bl	80034e8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80028b8:	f7fe fb76 	bl	8000fa8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80028bc:	f000 fcb6 	bl	800322c <MX_TIM6_Init>
  MX_TIM4_Init();
 80028c0:	f000 fc28 	bl	8003114 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  char str[50];
  double v_cpy[FO_LENGTH];
  ADC_Get(v);
 80028c4:	4867      	ldr	r0, [pc, #412]	@ (8002a64 <main+0x2d0>)
 80028c6:	f7ff ff27 	bl	8002718 <ADC_Get>
//  {
//	  sprintf(str , "%.5f" , v[i]);
//	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
//	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
//  }
  memcpy(v_cpy, v, FO_LENGTH);
 80028ca:	4b67      	ldr	r3, [pc, #412]	@ (8002a68 <main+0x2d4>)
 80028cc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80028d0:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80028d4:	443b      	add	r3, r7
 80028d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028da:	4962      	ldr	r1, [pc, #392]	@ (8002a64 <main+0x2d0>)
 80028dc:	4618      	mov	r0, r3
 80028de:	f00e fa8f 	bl	8010e00 <memcpy>

  Blackman(FO_LENGTH, (1640 - FO_LENGTH/ 4), (1640 + FO_LENGTH / 4), v);
 80028e2:	4b60      	ldr	r3, [pc, #384]	@ (8002a64 <main+0x2d0>)
 80028e4:	f640 6268 	movw	r2, #3688	@ 0xe68
 80028e8:	4960      	ldr	r1, [pc, #384]	@ (8002a6c <main+0x2d8>)
 80028ea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028ee:	f7fe fac7 	bl	8000e80 <Blackman>
  FFT_Mag_sqrt(FO_LENGTH, v);
 80028f2:	495c      	ldr	r1, [pc, #368]	@ (8002a64 <main+0x2d0>)
 80028f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028f8:	f7fe fa8e 	bl	8000e18 <FFT_Mag_sqrt>

  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002a70 <main+0x2dc>)
 8002900:	443a      	add	r2, r7
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e022      	b.n	800294c <main+0x1b8>
  {
	  sprintf(str , "%.5f" , v[i]);
 8002906:	4a57      	ldr	r2, [pc, #348]	@ (8002a64 <main+0x2d0>)
 8002908:	4b59      	ldr	r3, [pc, #356]	@ (8002a70 <main+0x2dc>)
 800290a:	443b      	add	r3, r7
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	f507 3080 	add.w	r0, r7, #65536	@ 0x10000
 800291a:	4956      	ldr	r1, [pc, #344]	@ (8002a74 <main+0x2e0>)
 800291c:	f00d ff14 	bl	8010748 <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 8002920:	f507 3180 	add.w	r1, r7, #65536	@ 0x10000
 8002924:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002928:	2207      	movs	r2, #7
 800292a:	4853      	ldr	r0, [pc, #332]	@ (8002a78 <main+0x2e4>)
 800292c:	f00b fc18 	bl	800e160 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8002930:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002934:	2201      	movs	r2, #1
 8002936:	4951      	ldr	r1, [pc, #324]	@ (8002a7c <main+0x2e8>)
 8002938:	484f      	ldr	r0, [pc, #316]	@ (8002a78 <main+0x2e4>)
 800293a:	f00b fc11 	bl	800e160 <HAL_UART_Transmit>
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 800293e:	4b4c      	ldr	r3, [pc, #304]	@ (8002a70 <main+0x2dc>)
 8002940:	443b      	add	r3, r7
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	4a4a      	ldr	r2, [pc, #296]	@ (8002a70 <main+0x2dc>)
 8002948:	443a      	add	r2, r7
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b48      	ldr	r3, [pc, #288]	@ (8002a70 <main+0x2dc>)
 800294e:	443b      	add	r3, r7
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002956:	dbd6      	blt.n	8002906 <main+0x172>
  }
  value = Analog_Judge(v, v_cpy);
 8002958:	4b43      	ldr	r3, [pc, #268]	@ (8002a68 <main+0x2d4>)
 800295a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800295e:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8002962:	443b      	add	r3, r7
 8002964:	4619      	mov	r1, r3
 8002966:	483f      	ldr	r0, [pc, #252]	@ (8002a64 <main+0x2d0>)
 8002968:	f7fe fed2 	bl	8001710 <Analog_Judge>
 800296c:	4603      	mov	r3, r0
 800296e:	4a44      	ldr	r2, [pc, #272]	@ (8002a80 <main+0x2ec>)
 8002970:	6013      	str	r3, [r2, #0]
  Judger(value);
 8002972:	4b43      	ldr	r3, [pc, #268]	@ (8002a80 <main+0x2ec>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fdc6 	bl	8002508 <Judger>
//	  Dat[i] = (uint16_t)(demodulated_signal[i] * 4095 + 2048);
//  }
//  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2,(uint32_t *)Dat,200,DAC_ALIGN_12B_R);
//  HAL_TIM_Base_Start(&htim6);

  if (value == 5)
 800297c:	4b40      	ldr	r3, [pc, #256]	@ (8002a80 <main+0x2ec>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b05      	cmp	r3, #5
 8002982:	d133      	bne.n	80029ec <main+0x258>
  {
	  PSK_Demodulate(demodulated_signal);
 8002984:	483f      	ldr	r0, [pc, #252]	@ (8002a84 <main+0x2f0>)
 8002986:	f000 fda5 	bl	80034d4 <PSK_Demodulate>
	  ADC_Get(demodulated_signal);
 800298a:	483e      	ldr	r0, [pc, #248]	@ (8002a84 <main+0x2f0>)
 800298c:	f7ff fec4 	bl	8002718 <ADC_Get>
	  for (int i = 1 ;i < FO_LENGTH	; i++)
 8002990:	2301      	movs	r3, #1
 8002992:	4a3d      	ldr	r2, [pc, #244]	@ (8002a88 <main+0x2f4>)
 8002994:	443a      	add	r2, r7
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	e022      	b.n	80029e0 <main+0x24c>
	  {
		  sprintf(str , "%.5f" , demodulated_signal[i]);
 800299a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a84 <main+0x2f0>)
 800299c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a88 <main+0x2f4>)
 800299e:	443b      	add	r3, r7
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f507 3080 	add.w	r0, r7, #65536	@ 0x10000
 80029ae:	4931      	ldr	r1, [pc, #196]	@ (8002a74 <main+0x2e0>)
 80029b0:	f00d feca 	bl	8010748 <sprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 80029b4:	f507 3180 	add.w	r1, r7, #65536	@ 0x10000
 80029b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029bc:	2207      	movs	r2, #7
 80029be:	482e      	ldr	r0, [pc, #184]	@ (8002a78 <main+0x2e4>)
 80029c0:	f00b fbce 	bl	800e160 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029c8:	2201      	movs	r2, #1
 80029ca:	492c      	ldr	r1, [pc, #176]	@ (8002a7c <main+0x2e8>)
 80029cc:	482a      	ldr	r0, [pc, #168]	@ (8002a78 <main+0x2e4>)
 80029ce:	f00b fbc7 	bl	800e160 <HAL_UART_Transmit>
	  for (int i = 1 ;i < FO_LENGTH	; i++)
 80029d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a88 <main+0x2f4>)
 80029d4:	443b      	add	r3, r7
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	4a2b      	ldr	r2, [pc, #172]	@ (8002a88 <main+0x2f4>)
 80029dc:	443a      	add	r2, r7
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b29      	ldr	r3, [pc, #164]	@ (8002a88 <main+0x2f4>)
 80029e2:	443b      	add	r3, r7
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ea:	dbd6      	blt.n	800299a <main+0x206>
	  }

  }

  int cnt = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	4a27      	ldr	r2, [pc, #156]	@ (8002a8c <main+0x2f8>)
 80029f0:	443a      	add	r2, r7
 80029f2:	6013      	str	r3, [r2, #0]

  for (int i = 0 ; i < FO_LENGTH - 1; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	4a26      	ldr	r2, [pc, #152]	@ (8002a90 <main+0x2fc>)
 80029f8:	443a      	add	r2, r7
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	e07c      	b.n	8002af8 <main+0x364>
  {
	  if ((demodulated_signal[i] - demodulated_signal[i + 1]) > 1)
 80029fe:	4a21      	ldr	r2, [pc, #132]	@ (8002a84 <main+0x2f0>)
 8002a00:	4b23      	ldr	r3, [pc, #140]	@ (8002a90 <main+0x2fc>)
 8002a02:	443b      	add	r3, r7
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	ed93 6b00 	vldr	d6, [r3]
 8002a0e:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <main+0x2fc>)
 8002a10:	443b      	add	r3, r7
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	4a1b      	ldr	r2, [pc, #108]	@ (8002a84 <main+0x2f0>)
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	ed93 7b00 	vldr	d7, [r3]
 8002a20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a24:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002a28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a30:	dd32      	ble.n	8002a98 <main+0x304>
	  {
		  Dat[cnt] = (uint16_t)(2048);
 8002a32:	4a18      	ldr	r2, [pc, #96]	@ (8002a94 <main+0x300>)
 8002a34:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <main+0x2f8>)
 8002a36:	443b      	add	r3, r7
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  cnt++;
 8002a42:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <main+0x2f8>)
 8002a44:	443b      	add	r3, r7
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4a10      	ldr	r2, [pc, #64]	@ (8002a8c <main+0x2f8>)
 8002a4c:	443a      	add	r2, r7
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	e04b      	b.n	8002aea <main+0x356>
 8002a52:	bf00      	nop
 8002a54:	e000ed00 	.word	0xe000ed00
 8002a58:	0001003c 	.word	0x0001003c
 8002a5c:	00010038 	.word	0x00010038
 8002a60:	00010034 	.word	0x00010034
 8002a64:	24004a50 	.word	0x24004a50
 8002a68:	fffeffb0 	.word	0xfffeffb0
 8002a6c:	fffffe68 	.word	0xfffffe68
 8002a70:	0001004c 	.word	0x0001004c
 8002a74:	08015c48 	.word	0x08015c48
 8002a78:	24024b88 	.word	0x24024b88
 8002a7c:	08015c50 	.word	0x08015c50
 8002a80:	24024a50 	.word	0x24024a50
 8002a84:	24014a50 	.word	0x24014a50
 8002a88:	00010048 	.word	0x00010048
 8002a8c:	00010044 	.word	0x00010044
 8002a90:	00010040 	.word	0x00010040
 8002a94:	240046e0 	.word	0x240046e0
	  }
	  else if ((demodulated_signal[i] - demodulated_signal[i + 1]) < -1)
 8002a98:	4a23      	ldr	r2, [pc, #140]	@ (8002b28 <main+0x394>)
 8002a9a:	4b24      	ldr	r3, [pc, #144]	@ (8002b2c <main+0x398>)
 8002a9c:	443b      	add	r3, r7
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	ed93 6b00 	vldr	d6, [r3]
 8002aa8:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <main+0x398>)
 8002aaa:	443b      	add	r3, r7
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b28 <main+0x394>)
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	ed93 7b00 	vldr	d7, [r3]
 8002aba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002abe:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8002ac2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aca:	d50e      	bpl.n	8002aea <main+0x356>
	  {
		  Dat[cnt] = (uint16_t)(4095);
 8002acc:	4a18      	ldr	r2, [pc, #96]	@ (8002b30 <main+0x39c>)
 8002ace:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <main+0x3a0>)
 8002ad0:	443b      	add	r3, r7
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8002ad8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  cnt++;
 8002adc:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <main+0x3a0>)
 8002ade:	443b      	add	r3, r7
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	4a13      	ldr	r2, [pc, #76]	@ (8002b34 <main+0x3a0>)
 8002ae6:	443a      	add	r2, r7
 8002ae8:	6013      	str	r3, [r2, #0]
  for (int i = 0 ; i < FO_LENGTH - 1; i++)
 8002aea:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <main+0x398>)
 8002aec:	443b      	add	r3, r7
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	4a0e      	ldr	r2, [pc, #56]	@ (8002b2c <main+0x398>)
 8002af4:	443a      	add	r2, r7
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <main+0x398>)
 8002afa:	443b      	add	r3, r7
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 8002b02:	4293      	cmp	r3, r2
 8002b04:	f77f af7b 	ble.w	80029fe <main+0x26a>
	  }
  }

  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2,(uint32_t *)Dat,cnt,DAC_ALIGN_12B_R);
 8002b08:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <main+0x3a0>)
 8002b0a:	443b      	add	r3, r7
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	9200      	str	r2, [sp, #0]
 8002b12:	4a07      	ldr	r2, [pc, #28]	@ (8002b30 <main+0x39c>)
 8002b14:	2110      	movs	r1, #16
 8002b16:	4808      	ldr	r0, [pc, #32]	@ (8002b38 <main+0x3a4>)
 8002b18:	f002 fea2 	bl	8005860 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8002b1c:	4807      	ldr	r0, [pc, #28]	@ (8002b3c <main+0x3a8>)
 8002b1e:	f00a fab7 	bl	800d090 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b22:	bf00      	nop
 8002b24:	e7fd      	b.n	8002b22 <main+0x38e>
 8002b26:	bf00      	nop
 8002b28:	24014a50 	.word	0x24014a50
 8002b2c:	00010040 	.word	0x00010040
 8002b30:	240046e0 	.word	0x240046e0
 8002b34:	00010044 	.word	0x00010044
 8002b38:	24004968 	.word	0x24004968
 8002b3c:	24024aa4 	.word	0x24024aa4

08002b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b09e      	sub	sp, #120	@ 0x78
 8002b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b4a:	224c      	movs	r2, #76	@ 0x4c
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f00e f902 	bl	8010d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	2220      	movs	r2, #32
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f00e f8fb 	bl	8010d58 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002b62:	2002      	movs	r0, #2
 8002b64:	f006 fd1c 	bl	80095a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca0 <SystemClock_Config+0x160>)
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	4a4b      	ldr	r2, [pc, #300]	@ (8002ca0 <SystemClock_Config+0x160>)
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002b78:	4b49      	ldr	r3, [pc, #292]	@ (8002ca0 <SystemClock_Config+0x160>)
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b48      	ldr	r3, [pc, #288]	@ (8002ca4 <SystemClock_Config+0x164>)
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	4a47      	ldr	r2, [pc, #284]	@ (8002ca4 <SystemClock_Config+0x164>)
 8002b88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b8c:	6193      	str	r3, [r2, #24]
 8002b8e:	4b45      	ldr	r3, [pc, #276]	@ (8002ca4 <SystemClock_Config+0x164>)
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002b9a:	bf00      	nop
 8002b9c:	4b41      	ldr	r3, [pc, #260]	@ (8002ca4 <SystemClock_Config+0x164>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ba8:	d1f8      	bne.n	8002b9c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002baa:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca8 <SystemClock_Config+0x168>)
 8002bac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bb0:	4a3d      	ldr	r2, [pc, #244]	@ (8002ca8 <SystemClock_Config+0x168>)
 8002bb2:	f043 0302 	orr.w	r3, r3, #2
 8002bb6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002bba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca8 <SystemClock_Config+0x168>)
 8002bbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	4b35      	ldr	r3, [pc, #212]	@ (8002ca4 <SystemClock_Config+0x164>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	4a34      	ldr	r2, [pc, #208]	@ (8002ca4 <SystemClock_Config+0x164>)
 8002bd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bd6:	6193      	str	r3, [r2, #24]
 8002bd8:	4b32      	ldr	r3, [pc, #200]	@ (8002ca4 <SystemClock_Config+0x164>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca0 <SystemClock_Config+0x160>)
 8002be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be6:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca0 <SystemClock_Config+0x160>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002bee:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca0 <SystemClock_Config+0x160>)
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002bfa:	bf00      	nop
 8002bfc:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <SystemClock_Config+0x164>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c08:	d1f8      	bne.n	8002bfc <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002c0a:	4b27      	ldr	r3, [pc, #156]	@ (8002ca8 <SystemClock_Config+0x168>)
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	4a25      	ldr	r2, [pc, #148]	@ (8002ca8 <SystemClock_Config+0x168>)
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c24:	2302      	movs	r3, #2
 8002c26:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002c2c:	2305      	movs	r3, #5
 8002c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002c30:	23c0      	movs	r3, #192	@ 0xc0
 8002c32:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002c34:	2302      	movs	r3, #2
 8002c36:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002c40:	2308      	movs	r3, #8
 8002c42:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c50:	4618      	mov	r0, r3
 8002c52:	f006 fcdf 	bl	8009614 <HAL_RCC_OscConfig>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8002c5c:	f000 f894 	bl	8002d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c60:	233f      	movs	r3, #63	@ 0x3f
 8002c62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c64:	2303      	movs	r3, #3
 8002c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002c70:	2340      	movs	r3, #64	@ 0x40
 8002c72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002c74:	2340      	movs	r3, #64	@ 0x40
 8002c76:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002c78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002c7e:	2340      	movs	r3, #64	@ 0x40
 8002c80:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	2104      	movs	r1, #4
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f007 f91f 	bl	8009ecc <HAL_RCC_ClockConfig>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8002c94:	f000 f878 	bl	8002d88 <Error_Handler>
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3778      	adds	r7, #120	@ 0x78
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	58000400 	.word	0x58000400
 8002ca4:	58024800 	.word	0x58024800
 8002ca8:	58024400 	.word	0x58024400

08002cac <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
   if(hadc->Instance == ADC1)
	{
      //SCB_InvalidateDCache_by_Addr((uint32_t *) &adc1_data[0], ADC1_BUFFER_SIZE);
   }
	 AdcConvEnd = 1;
 8002cb4:	4b04      	ldr	r3, [pc, #16]	@ (8002cc8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	24004a48 	.word	0x24004a48

08002ccc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002cde:	f002 fd21 	bl	8005724 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8002cea:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8002cee:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002cf0:	2312      	movs	r3, #18
 8002cf2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d10:	463b      	mov	r3, r7
 8002d12:	4618      	mov	r0, r3
 8002d14:	f002 fd3e 	bl	8005794 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002d1c:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002d20:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002d22:	2310      	movs	r3, #16
 8002d24:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d2e:	463b      	mov	r3, r7
 8002d30:	4618      	mov	r0, r3
 8002d32:	f002 fd2f 	bl	8005794 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002d36:	2302      	movs	r3, #2
 8002d38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <MPU_Config+0xb4>)
 8002d3c:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d3e:	463b      	mov	r3, r7
 8002d40:	4618      	mov	r0, r3
 8002d42:	f002 fd27 	bl	8005794 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8002d46:	2303      	movs	r3, #3
 8002d48:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <MPU_Config+0xb8>)
 8002d4c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8002d4e:	230e      	movs	r3, #14
 8002d50:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d52:	463b      	mov	r3, r7
 8002d54:	4618      	mov	r0, r3
 8002d56:	f002 fd1d 	bl	8005794 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8002d5e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8002d62:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002d64:	230f      	movs	r3, #15
 8002d66:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d68:	463b      	mov	r3, r7
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 fd12 	bl	8005794 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002d70:	2004      	movs	r0, #4
 8002d72:	f002 fcef 	bl	8005754 <HAL_MPU_Enable>

}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	30020000 	.word	0x30020000
 8002d84:	30040000 	.word	0x30040000

08002d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d8c:	b672      	cpsid	i
}
 8002d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <Error_Handler+0x8>

08002d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_MspInit+0x30>)
 8002d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002da0:	4a08      	ldr	r2, [pc, #32]	@ (8002dc4 <HAL_MspInit+0x30>)
 8002da2:	f043 0302 	orr.w	r3, r3, #2
 8002da6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002daa:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <HAL_MspInit+0x30>)
 8002dac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	58024400 	.word	0x58024400

08002dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <NMI_Handler+0x4>

08002dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <HardFault_Handler+0x4>

08002dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ddc:	bf00      	nop
 8002dde:	e7fd      	b.n	8002ddc <MemManage_Handler+0x4>

08002de0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <BusFault_Handler+0x4>

08002de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dec:	bf00      	nop
 8002dee:	e7fd      	b.n	8002dec <UsageFault_Handler+0x4>

08002df0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e1e:	f000 fcbd 	bl	800379c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e2c:	4802      	ldr	r0, [pc, #8]	@ (8002e38 <DMA1_Stream0_IRQHandler+0x10>)
 8002e2e:	f004 fca9 	bl	8007784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	240048f0 	.word	0x240048f0

08002e3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002e40:	4802      	ldr	r0, [pc, #8]	@ (8002e4c <DMA1_Stream1_IRQHandler+0x10>)
 8002e42:	f004 fc9f 	bl	8007784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2400497c 	.word	0x2400497c

08002e50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e54:	4802      	ldr	r0, [pc, #8]	@ (8002e60 <TIM4_IRQHandler+0x10>)
 8002e56:	f00a fa13 	bl	800d280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	24024a58 	.word	0x24024a58

08002e64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e68:	4802      	ldr	r0, [pc, #8]	@ (8002e74 <USART1_IRQHandler+0x10>)
 8002e6a:	f00b fa07 	bl	800e27c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	24024b88 	.word	0x24024b88

08002e78 <_getpid>:
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_kill>:
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	f00d ff87 	bl	8010da4 <__errno>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2216      	movs	r2, #22
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_exit>:
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ffe7 	bl	8002e88 <_kill>
 8002eba:	bf00      	nop
 8002ebc:	e7fd      	b.n	8002eba <_exit+0x12>

08002ebe <_read>:
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	e00a      	b.n	8002ee6 <_read+0x28>
 8002ed0:	f3af 8000 	nop.w
 8002ed4:	4601      	mov	r1, r0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	60ba      	str	r2, [r7, #8]
 8002edc:	b2ca      	uxtb	r2, r1
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	dbf0      	blt.n	8002ed0 <_read+0x12>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <_write>:
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e009      	b.n	8002f1e <_write+0x26>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	60ba      	str	r2, [r7, #8]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f3af 8000 	nop.w
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	dbf1      	blt.n	8002f0a <_write+0x12>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <_close>:
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <_fstat>:
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <_isatty>:
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	2301      	movs	r3, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <_lseek>:
 8002f7e:	b480      	push	{r7}
 8002f80:	b085      	sub	sp, #20
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <_sbrk>:
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	4a14      	ldr	r2, [pc, #80]	@ (8002ff4 <_sbrk+0x5c>)
 8002fa2:	4b15      	ldr	r3, [pc, #84]	@ (8002ff8 <_sbrk+0x60>)
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	4b13      	ldr	r3, [pc, #76]	@ (8002ffc <_sbrk+0x64>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d102      	bne.n	8002fba <_sbrk+0x22>
 8002fb4:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <_sbrk+0x64>)
 8002fb6:	4a12      	ldr	r2, [pc, #72]	@ (8003000 <_sbrk+0x68>)
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <_sbrk+0x64>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d207      	bcs.n	8002fd8 <_sbrk+0x40>
 8002fc8:	f00d feec 	bl	8010da4 <__errno>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	220c      	movs	r2, #12
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fd6:	e009      	b.n	8002fec <_sbrk+0x54>
 8002fd8:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <_sbrk+0x64>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	4b07      	ldr	r3, [pc, #28]	@ (8002ffc <_sbrk+0x64>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	4a05      	ldr	r2, [pc, #20]	@ (8002ffc <_sbrk+0x64>)
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	24080000 	.word	0x24080000
 8002ff8:	00001000 	.word	0x00001000
 8002ffc:	24024a54 	.word	0x24024a54
 8003000:	24024f30 	.word	0x24024f30

08003004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003008:	4b37      	ldr	r3, [pc, #220]	@ (80030e8 <SystemInit+0xe4>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300e:	4a36      	ldr	r2, [pc, #216]	@ (80030e8 <SystemInit+0xe4>)
 8003010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003018:	4b34      	ldr	r3, [pc, #208]	@ (80030ec <SystemInit+0xe8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	2b06      	cmp	r3, #6
 8003022:	d807      	bhi.n	8003034 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003024:	4b31      	ldr	r3, [pc, #196]	@ (80030ec <SystemInit+0xe8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 030f 	bic.w	r3, r3, #15
 800302c:	4a2f      	ldr	r2, [pc, #188]	@ (80030ec <SystemInit+0xe8>)
 800302e:	f043 0307 	orr.w	r3, r3, #7
 8003032:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003034:	4b2e      	ldr	r3, [pc, #184]	@ (80030f0 <SystemInit+0xec>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2d      	ldr	r2, [pc, #180]	@ (80030f0 <SystemInit+0xec>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003040:	4b2b      	ldr	r3, [pc, #172]	@ (80030f0 <SystemInit+0xec>)
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003046:	4b2a      	ldr	r3, [pc, #168]	@ (80030f0 <SystemInit+0xec>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4929      	ldr	r1, [pc, #164]	@ (80030f0 <SystemInit+0xec>)
 800304c:	4b29      	ldr	r3, [pc, #164]	@ (80030f4 <SystemInit+0xf0>)
 800304e:	4013      	ands	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003052:	4b26      	ldr	r3, [pc, #152]	@ (80030ec <SystemInit+0xe8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800305e:	4b23      	ldr	r3, [pc, #140]	@ (80030ec <SystemInit+0xe8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 030f 	bic.w	r3, r3, #15
 8003066:	4a21      	ldr	r2, [pc, #132]	@ (80030ec <SystemInit+0xe8>)
 8003068:	f043 0307 	orr.w	r3, r3, #7
 800306c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800306e:	4b20      	ldr	r3, [pc, #128]	@ (80030f0 <SystemInit+0xec>)
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003074:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <SystemInit+0xec>)
 8003076:	2200      	movs	r2, #0
 8003078:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800307a:	4b1d      	ldr	r3, [pc, #116]	@ (80030f0 <SystemInit+0xec>)
 800307c:	2200      	movs	r2, #0
 800307e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003080:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <SystemInit+0xec>)
 8003082:	4a1d      	ldr	r2, [pc, #116]	@ (80030f8 <SystemInit+0xf4>)
 8003084:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003086:	4b1a      	ldr	r3, [pc, #104]	@ (80030f0 <SystemInit+0xec>)
 8003088:	4a1c      	ldr	r2, [pc, #112]	@ (80030fc <SystemInit+0xf8>)
 800308a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800308c:	4b18      	ldr	r3, [pc, #96]	@ (80030f0 <SystemInit+0xec>)
 800308e:	4a1c      	ldr	r2, [pc, #112]	@ (8003100 <SystemInit+0xfc>)
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003092:	4b17      	ldr	r3, [pc, #92]	@ (80030f0 <SystemInit+0xec>)
 8003094:	2200      	movs	r2, #0
 8003096:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003098:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <SystemInit+0xec>)
 800309a:	4a19      	ldr	r2, [pc, #100]	@ (8003100 <SystemInit+0xfc>)
 800309c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800309e:	4b14      	ldr	r3, [pc, #80]	@ (80030f0 <SystemInit+0xec>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80030a4:	4b12      	ldr	r3, [pc, #72]	@ (80030f0 <SystemInit+0xec>)
 80030a6:	4a16      	ldr	r2, [pc, #88]	@ (8003100 <SystemInit+0xfc>)
 80030a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80030aa:	4b11      	ldr	r3, [pc, #68]	@ (80030f0 <SystemInit+0xec>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030b0:	4b0f      	ldr	r3, [pc, #60]	@ (80030f0 <SystemInit+0xec>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0e      	ldr	r2, [pc, #56]	@ (80030f0 <SystemInit+0xec>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80030bc:	4b0c      	ldr	r3, [pc, #48]	@ (80030f0 <SystemInit+0xec>)
 80030be:	2200      	movs	r2, #0
 80030c0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80030c2:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <SystemInit+0x100>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4b10      	ldr	r3, [pc, #64]	@ (8003108 <SystemInit+0x104>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030ce:	d202      	bcs.n	80030d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80030d0:	4b0e      	ldr	r3, [pc, #56]	@ (800310c <SystemInit+0x108>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80030d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003110 <SystemInit+0x10c>)
 80030d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80030dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00
 80030ec:	52002000 	.word	0x52002000
 80030f0:	58024400 	.word	0x58024400
 80030f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80030f8:	02020200 	.word	0x02020200
 80030fc:	01ff0000 	.word	0x01ff0000
 8003100:	01010280 	.word	0x01010280
 8003104:	5c001000 	.word	0x5c001000
 8003108:	ffff0000 	.word	0xffff0000
 800310c:	51008108 	.word	0x51008108
 8003110:	52004000 	.word	0x52004000

08003114 <MX_TIM4_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b090      	sub	sp, #64	@ 0x40
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800311a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003138:	f107 0310 	add.w	r3, r7, #16
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003144:	463b      	mov	r3, r7
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003150:	4b34      	ldr	r3, [pc, #208]	@ (8003224 <MX_TIM4_Init+0x110>)
 8003152:	4a35      	ldr	r2, [pc, #212]	@ (8003228 <MX_TIM4_Init+0x114>)
 8003154:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240 - 1;
 8003156:	4b33      	ldr	r3, [pc, #204]	@ (8003224 <MX_TIM4_Init+0x110>)
 8003158:	22ef      	movs	r2, #239	@ 0xef
 800315a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800315c:	4b31      	ldr	r3, [pc, #196]	@ (8003224 <MX_TIM4_Init+0x110>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 -1;
 8003162:	4b30      	ldr	r3, [pc, #192]	@ (8003224 <MX_TIM4_Init+0x110>)
 8003164:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003168:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800316a:	4b2e      	ldr	r3, [pc, #184]	@ (8003224 <MX_TIM4_Init+0x110>)
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003170:	4b2c      	ldr	r3, [pc, #176]	@ (8003224 <MX_TIM4_Init+0x110>)
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003176:	482b      	ldr	r0, [pc, #172]	@ (8003224 <MX_TIM4_Init+0x110>)
 8003178:	f009 ff32 	bl	800cfe0 <HAL_TIM_Base_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8003182:	f7ff fe01 	bl	8002d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003186:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800318a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800318c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003190:	4619      	mov	r1, r3
 8003192:	4824      	ldr	r0, [pc, #144]	@ (8003224 <MX_TIM4_Init+0x110>)
 8003194:	f00a fa30 	bl	800d5f8 <HAL_TIM_ConfigClockSource>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800319e:	f7ff fdf3 	bl	8002d88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80031a2:	4820      	ldr	r0, [pc, #128]	@ (8003224 <MX_TIM4_Init+0x110>)
 80031a4:	f00a f80b 	bl	800d1be <HAL_TIM_IC_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80031ae:	f7ff fdeb 	bl	8002d88 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80031b2:	2304      	movs	r3, #4
 80031b4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80031b6:	2350      	movs	r3, #80	@ 0x50
 80031b8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031ba:	2300      	movs	r3, #0
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80031c2:	f107 031c 	add.w	r3, r7, #28
 80031c6:	4619      	mov	r1, r3
 80031c8:	4816      	ldr	r0, [pc, #88]	@ (8003224 <MX_TIM4_Init+0x110>)
 80031ca:	f00a fb0d 	bl	800d7e8 <HAL_TIM_SlaveConfigSynchro>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 80031d4:	f7ff fdd8 	bl	8002d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031e0:	f107 0310 	add.w	r3, r7, #16
 80031e4:	4619      	mov	r1, r3
 80031e6:	480f      	ldr	r0, [pc, #60]	@ (8003224 <MX_TIM4_Init+0x110>)
 80031e8:	f00a febe 	bl	800df68 <HAL_TIMEx_MasterConfigSynchronization>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 80031f2:	f7ff fdc9 	bl	8002d88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031f6:	2300      	movs	r3, #0
 80031f8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031fa:	2301      	movs	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003206:	463b      	mov	r3, r7
 8003208:	2200      	movs	r2, #0
 800320a:	4619      	mov	r1, r3
 800320c:	4805      	ldr	r0, [pc, #20]	@ (8003224 <MX_TIM4_Init+0x110>)
 800320e:	f00a f956 	bl	800d4be <HAL_TIM_IC_ConfigChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8003218:	f7ff fdb6 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800321c:	bf00      	nop
 800321e:	3740      	adds	r7, #64	@ 0x40
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	24024a58 	.word	0x24024a58
 8003228:	40000800 	.word	0x40000800

0800322c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800323c:	4b14      	ldr	r3, [pc, #80]	@ (8003290 <MX_TIM6_Init+0x64>)
 800323e:	4a15      	ldr	r2, [pc, #84]	@ (8003294 <MX_TIM6_Init+0x68>)
 8003240:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 120 - 1;
 8003242:	4b13      	ldr	r3, [pc, #76]	@ (8003290 <MX_TIM6_Init+0x64>)
 8003244:	2277      	movs	r2, #119	@ 0x77
 8003246:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003248:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <MX_TIM6_Init+0x64>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200 - 1;
 800324e:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <MX_TIM6_Init+0x64>)
 8003250:	22c7      	movs	r2, #199	@ 0xc7
 8003252:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003254:	4b0e      	ldr	r3, [pc, #56]	@ (8003290 <MX_TIM6_Init+0x64>)
 8003256:	2280      	movs	r2, #128	@ 0x80
 8003258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800325a:	480d      	ldr	r0, [pc, #52]	@ (8003290 <MX_TIM6_Init+0x64>)
 800325c:	f009 fec0 	bl	800cfe0 <HAL_TIM_Base_Init>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003266:	f7ff fd8f 	bl	8002d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800326a:	2320      	movs	r3, #32
 800326c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4806      	ldr	r0, [pc, #24]	@ (8003290 <MX_TIM6_Init+0x64>)
 8003278:	f00a fe76 	bl	800df68 <HAL_TIMEx_MasterConfigSynchronization>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003282:	f7ff fd81 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	24024aa4 	.word	0x24024aa4
 8003294:	40001000 	.word	0x40001000

08003298 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80032a8:	4b14      	ldr	r3, [pc, #80]	@ (80032fc <MX_TIM7_Init+0x64>)
 80032aa:	4a15      	ldr	r2, [pc, #84]	@ (8003300 <MX_TIM7_Init+0x68>)
 80032ac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 80032ae:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <MX_TIM7_Init+0x64>)
 80032b0:	22ef      	movs	r2, #239	@ 0xef
 80032b2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b4:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <MX_TIM7_Init+0x64>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <MX_TIM7_Init+0x64>)
 80032bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c2:	4b0e      	ldr	r3, [pc, #56]	@ (80032fc <MX_TIM7_Init+0x64>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80032c8:	480c      	ldr	r0, [pc, #48]	@ (80032fc <MX_TIM7_Init+0x64>)
 80032ca:	f009 fe89 	bl	800cfe0 <HAL_TIM_Base_Init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80032d4:	f7ff fd58 	bl	8002d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d8:	2300      	movs	r3, #0
 80032da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	4805      	ldr	r0, [pc, #20]	@ (80032fc <MX_TIM7_Init+0x64>)
 80032e6:	f00a fe3f 	bl	800df68 <HAL_TIMEx_MasterConfigSynchronization>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80032f0:	f7ff fd4a 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	24024af0 	.word	0x24024af0
 8003300:	40001400 	.word	0x40001400

08003304 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800330a:	f107 0310 	add.w	r3, r7, #16
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003322:	4b1e      	ldr	r3, [pc, #120]	@ (800339c <MX_TIM15_Init+0x98>)
 8003324:	4a1e      	ldr	r2, [pc, #120]	@ (80033a0 <MX_TIM15_Init+0x9c>)
 8003326:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2-1;
 8003328:	4b1c      	ldr	r3, [pc, #112]	@ (800339c <MX_TIM15_Init+0x98>)
 800332a:	2201      	movs	r2, #1
 800332c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800332e:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <MX_TIM15_Init+0x98>)
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2-1;
 8003334:	4b19      	ldr	r3, [pc, #100]	@ (800339c <MX_TIM15_Init+0x98>)
 8003336:	2201      	movs	r2, #1
 8003338:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800333a:	4b18      	ldr	r3, [pc, #96]	@ (800339c <MX_TIM15_Init+0x98>)
 800333c:	2200      	movs	r2, #0
 800333e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003340:	4b16      	ldr	r3, [pc, #88]	@ (800339c <MX_TIM15_Init+0x98>)
 8003342:	2200      	movs	r2, #0
 8003344:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003346:	4b15      	ldr	r3, [pc, #84]	@ (800339c <MX_TIM15_Init+0x98>)
 8003348:	2280      	movs	r2, #128	@ 0x80
 800334a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800334c:	4813      	ldr	r0, [pc, #76]	@ (800339c <MX_TIM15_Init+0x98>)
 800334e:	f009 fe47 	bl	800cfe0 <HAL_TIM_Base_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8003358:	f7ff fd16 	bl	8002d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800335c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003360:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003362:	f107 0310 	add.w	r3, r7, #16
 8003366:	4619      	mov	r1, r3
 8003368:	480c      	ldr	r0, [pc, #48]	@ (800339c <MX_TIM15_Init+0x98>)
 800336a:	f00a f945 	bl	800d5f8 <HAL_TIM_ConfigClockSource>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8003374:	f7ff fd08 	bl	8002d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003378:	2320      	movs	r3, #32
 800337a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003380:	1d3b      	adds	r3, r7, #4
 8003382:	4619      	mov	r1, r3
 8003384:	4805      	ldr	r0, [pc, #20]	@ (800339c <MX_TIM15_Init+0x98>)
 8003386:	f00a fdef 	bl	800df68 <HAL_TIMEx_MasterConfigSynchronization>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8003390:	f7ff fcfa 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003394:	bf00      	nop
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	24024b3c 	.word	0x24024b3c
 80033a0:	40014000 	.word	0x40014000

080033a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	@ 0x30
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM4)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a3e      	ldr	r2, [pc, #248]	@ (80034bc <HAL_TIM_Base_MspInit+0x118>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d137      	bne.n	8003436 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033c6:	4b3e      	ldr	r3, [pc, #248]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 80033c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033cc:	4a3c      	ldr	r2, [pc, #240]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033d6:	4b3a      	ldr	r3, [pc, #232]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 80033d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033e4:	4b36      	ldr	r3, [pc, #216]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 80033e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ea:	4a35      	ldr	r2, [pc, #212]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 80033ec:	f043 0308 	orr.w	r3, r3, #8
 80033f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033f4:	4b32      	ldr	r3, [pc, #200]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 80033f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003402:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003408:	2302      	movs	r3, #2
 800340a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003410:	2300      	movs	r3, #0
 8003412:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003414:	2302      	movs	r3, #2
 8003416:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003418:	f107 031c 	add.w	r3, r7, #28
 800341c:	4619      	mov	r1, r3
 800341e:	4829      	ldr	r0, [pc, #164]	@ (80034c4 <HAL_TIM_Base_MspInit+0x120>)
 8003420:	f005 fcc2 	bl	8008da8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003424:	2200      	movs	r2, #0
 8003426:	2100      	movs	r1, #0
 8003428:	201e      	movs	r0, #30
 800342a:	f002 f946 	bl	80056ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800342e:	201e      	movs	r0, #30
 8003430:	f002 f95d 	bl	80056ee <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003434:	e03d      	b.n	80034b2 <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM6)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a23      	ldr	r2, [pc, #140]	@ (80034c8 <HAL_TIM_Base_MspInit+0x124>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10f      	bne.n	8003460 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003440:	4b1f      	ldr	r3, [pc, #124]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 8003442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003446:	4a1e      	ldr	r2, [pc, #120]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 8003448:	f043 0310 	orr.w	r3, r3, #16
 800344c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003450:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 8003452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
}
 800345e:	e028      	b.n	80034b2 <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM7)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a19      	ldr	r2, [pc, #100]	@ (80034cc <HAL_TIM_Base_MspInit+0x128>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d10f      	bne.n	800348a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800346a:	4b15      	ldr	r3, [pc, #84]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 800346c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003470:	4a13      	ldr	r2, [pc, #76]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 8003472:	f043 0320 	orr.w	r3, r3, #32
 8003476:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800347a:	4b11      	ldr	r3, [pc, #68]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 800347c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
}
 8003488:	e013      	b.n	80034b2 <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM15)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a10      	ldr	r2, [pc, #64]	@ (80034d0 <HAL_TIM_Base_MspInit+0x12c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10e      	bne.n	80034b2 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003494:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 8003496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800349a:	4a09      	ldr	r2, [pc, #36]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034a4:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <HAL_TIM_Base_MspInit+0x11c>)
 80034a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
}
 80034b2:	bf00      	nop
 80034b4:	3730      	adds	r7, #48	@ 0x30
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40000800 	.word	0x40000800
 80034c0:	58024400 	.word	0x58024400
 80034c4:	58020c00 	.word	0x58020c00
 80034c8:	40001000 	.word	0x40001000
 80034cc:	40001400 	.word	0x40001400
 80034d0:	40014000 	.word	0x40014000

080034d4 <PSK_Demodulate>:
}

/* USER CODE BEGIN 1 */

void PSK_Demodulate(double x[])
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	MX_ADC1ForSampling_Init();
 80034dc:	f7fd fea8 	bl	8001230 <MX_ADC1ForSampling_Init>
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034ec:	4b22      	ldr	r3, [pc, #136]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 80034ee:	4a23      	ldr	r2, [pc, #140]	@ (800357c <MX_USART1_UART_Init+0x94>)
 80034f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034f2:	4b21      	ldr	r3, [pc, #132]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 80034f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003500:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003506:	4b1c      	ldr	r3, [pc, #112]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800350c:	4b1a      	ldr	r3, [pc, #104]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 800350e:	220c      	movs	r2, #12
 8003510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003512:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 8003514:	2200      	movs	r2, #0
 8003516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003518:	4b17      	ldr	r3, [pc, #92]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800351e:	4b16      	ldr	r3, [pc, #88]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 8003520:	2200      	movs	r2, #0
 8003522:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003524:	4b14      	ldr	r3, [pc, #80]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 8003526:	2200      	movs	r2, #0
 8003528:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800352a:	4b13      	ldr	r3, [pc, #76]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 800352c:	2200      	movs	r2, #0
 800352e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003530:	4811      	ldr	r0, [pc, #68]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 8003532:	f00a fdc5 	bl	800e0c0 <HAL_UART_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800353c:	f7ff fc24 	bl	8002d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003540:	2100      	movs	r1, #0
 8003542:	480d      	ldr	r0, [pc, #52]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 8003544:	f00c fa8e 	bl	800fa64 <HAL_UARTEx_SetTxFifoThreshold>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800354e:	f7ff fc1b 	bl	8002d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003552:	2100      	movs	r1, #0
 8003554:	4808      	ldr	r0, [pc, #32]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 8003556:	f00c fac3 	bl	800fae0 <HAL_UARTEx_SetRxFifoThreshold>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003560:	f7ff fc12 	bl	8002d88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003564:	4804      	ldr	r0, [pc, #16]	@ (8003578 <MX_USART1_UART_Init+0x90>)
 8003566:	f00c fa44 	bl	800f9f2 <HAL_UARTEx_DisableFifoMode>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003570:	f7ff fc0a 	bl	8002d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003574:	bf00      	nop
 8003576:	bd80      	pop	{r7, pc}
 8003578:	24024b88 	.word	0x24024b88
 800357c:	40011000 	.word	0x40011000

08003580 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b0ba      	sub	sp, #232	@ 0xe8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003588:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003598:	f107 0310 	add.w	r3, r7, #16
 800359c:	22c0      	movs	r2, #192	@ 0xc0
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f00d fbd9 	bl	8010d58 <memset>
  if(uartHandle->Instance==USART1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003658 <HAL_UART_MspInit+0xd8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d14e      	bne.n	800364e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035b0:	f04f 0201 	mov.w	r2, #1
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80035bc:	2300      	movs	r3, #0
 80035be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035c2:	f107 0310 	add.w	r3, r7, #16
 80035c6:	4618      	mov	r0, r3
 80035c8:	f007 f80c 	bl	800a5e4 <HAL_RCCEx_PeriphCLKConfig>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80035d2:	f7ff fbd9 	bl	8002d88 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035d6:	4b21      	ldr	r3, [pc, #132]	@ (800365c <HAL_UART_MspInit+0xdc>)
 80035d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035dc:	4a1f      	ldr	r2, [pc, #124]	@ (800365c <HAL_UART_MspInit+0xdc>)
 80035de:	f043 0310 	orr.w	r3, r3, #16
 80035e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80035e6:	4b1d      	ldr	r3, [pc, #116]	@ (800365c <HAL_UART_MspInit+0xdc>)
 80035e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f4:	4b19      	ldr	r3, [pc, #100]	@ (800365c <HAL_UART_MspInit+0xdc>)
 80035f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035fa:	4a18      	ldr	r2, [pc, #96]	@ (800365c <HAL_UART_MspInit+0xdc>)
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003604:	4b15      	ldr	r3, [pc, #84]	@ (800365c <HAL_UART_MspInit+0xdc>)
 8003606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003612:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003626:	2300      	movs	r3, #0
 8003628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800362c:	2304      	movs	r3, #4
 800362e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003632:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003636:	4619      	mov	r1, r3
 8003638:	4809      	ldr	r0, [pc, #36]	@ (8003660 <HAL_UART_MspInit+0xe0>)
 800363a:	f005 fbb5 	bl	8008da8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800363e:	2200      	movs	r2, #0
 8003640:	2100      	movs	r1, #0
 8003642:	2025      	movs	r0, #37	@ 0x25
 8003644:	f002 f839 	bl	80056ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003648:	2025      	movs	r0, #37	@ 0x25
 800364a:	f002 f850 	bl	80056ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800364e:	bf00      	nop
 8003650:	37e8      	adds	r7, #232	@ 0xe8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40011000 	.word	0x40011000
 800365c:	58024400 	.word	0x58024400
 8003660:	58020400 	.word	0x58020400

08003664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800369c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003668:	f7ff fccc 	bl	8003004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800366c:	480c      	ldr	r0, [pc, #48]	@ (80036a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800366e:	490d      	ldr	r1, [pc, #52]	@ (80036a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003670:	4a0d      	ldr	r2, [pc, #52]	@ (80036a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003674:	e002      	b.n	800367c <LoopCopyDataInit>

08003676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367a:	3304      	adds	r3, #4

0800367c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800367c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800367e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003680:	d3f9      	bcc.n	8003676 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003682:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003684:	4c0a      	ldr	r4, [pc, #40]	@ (80036b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003688:	e001      	b.n	800368e <LoopFillZerobss>

0800368a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800368c:	3204      	adds	r2, #4

0800368e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800368e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003690:	d3fb      	bcc.n	800368a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003692:	f00d fb8d 	bl	8010db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003696:	f7ff f87d 	bl	8002794 <main>
  bx  lr
 800369a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800369c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80036a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80036a4:	240006c4 	.word	0x240006c4
  ldr r2, =_sidata
 80036a8:	08018354 	.word	0x08018354
  ldr r2, =_sbss
 80036ac:	24004870 	.word	0x24004870
  ldr r4, =_ebss
 80036b0:	24024f2c 	.word	0x24024f2c

080036b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036b4:	e7fe      	b.n	80036b4 <ADC3_IRQHandler>
	...

080036b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036be:	2003      	movs	r0, #3
 80036c0:	f001 fff0 	bl	80056a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036c4:	f006 fdb8 	bl	800a238 <HAL_RCC_GetSysClockFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b15      	ldr	r3, [pc, #84]	@ (8003720 <HAL_Init+0x68>)
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	4913      	ldr	r1, [pc, #76]	@ (8003724 <HAL_Init+0x6c>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003720 <HAL_Init+0x68>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003724 <HAL_Init+0x6c>)
 80036ec:	5cd3      	ldrb	r3, [r2, r3]
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
 80036f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003728 <HAL_Init+0x70>)
 80036fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036fc:	4a0b      	ldr	r2, [pc, #44]	@ (800372c <HAL_Init+0x74>)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003702:	200f      	movs	r0, #15
 8003704:	f000 f814 	bl	8003730 <HAL_InitTick>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e002      	b.n	8003718 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003712:	f7ff fb3f 	bl	8002d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	58024400 	.word	0x58024400
 8003724:	08015c54 	.word	0x08015c54
 8003728:	24000004 	.word	0x24000004
 800372c:	24000000 	.word	0x24000000

08003730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003738:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <HAL_InitTick+0x60>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e021      	b.n	8003788 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003744:	4b13      	ldr	r3, [pc, #76]	@ (8003794 <HAL_InitTick+0x64>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b11      	ldr	r3, [pc, #68]	@ (8003790 <HAL_InitTick+0x60>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	4619      	mov	r1, r3
 800374e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003752:	fbb3 f3f1 	udiv	r3, r3, r1
 8003756:	fbb2 f3f3 	udiv	r3, r2, r3
 800375a:	4618      	mov	r0, r3
 800375c:	f001 ffd5 	bl	800570a <HAL_SYSTICK_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e00e      	b.n	8003788 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b0f      	cmp	r3, #15
 800376e:	d80a      	bhi.n	8003786 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003770:	2200      	movs	r2, #0
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003778:	f001 ff9f 	bl	80056ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800377c:	4a06      	ldr	r2, [pc, #24]	@ (8003798 <HAL_InitTick+0x68>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e000      	b.n	8003788 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	2400000c 	.word	0x2400000c
 8003794:	24000000 	.word	0x24000000
 8003798:	24000008 	.word	0x24000008

0800379c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037a0:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_IncTick+0x20>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <HAL_IncTick+0x24>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4413      	add	r3, r2
 80037ac:	4a04      	ldr	r2, [pc, #16]	@ (80037c0 <HAL_IncTick+0x24>)
 80037ae:	6013      	str	r3, [r2, #0]
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	2400000c 	.word	0x2400000c
 80037c0:	24024c1c 	.word	0x24024c1c

080037c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return uwTick;
 80037c8:	4b03      	ldr	r3, [pc, #12]	@ (80037d8 <HAL_GetTick+0x14>)
 80037ca:	681b      	ldr	r3, [r3, #0]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	24024c1c 	.word	0x24024c1c

080037dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037e4:	f7ff ffee 	bl	80037c4 <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037f4:	d005      	beq.n	8003802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003820 <HAL_Delay+0x44>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003802:	bf00      	nop
 8003804:	f7ff ffde 	bl	80037c4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	429a      	cmp	r2, r3
 8003812:	d8f7      	bhi.n	8003804 <HAL_Delay+0x28>
  {
  }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	2400000c 	.word	0x2400000c

08003824 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003828:	4b03      	ldr	r3, [pc, #12]	@ (8003838 <HAL_GetREVID+0x14>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	0c1b      	lsrs	r3, r3, #16
}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	5c001000 	.word	0x5c001000

0800383c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	609a      	str	r2, [r3, #8]
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	609a      	str	r2, [r3, #8]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3360      	adds	r3, #96	@ 0x60
 80038b6:	461a      	mov	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	431a      	orrs	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f003 031f 	and.w	r3, r3, #31
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	fa01 f303 	lsl.w	r3, r1, r3
 8003904:	431a      	orrs	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	611a      	str	r2, [r3, #16]
}
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003916:	b480      	push	{r7}
 8003918:	b087      	sub	sp, #28
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3360      	adds	r3, #96	@ 0x60
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	431a      	orrs	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	601a      	str	r2, [r3, #0]
  }
}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003972:	b480      	push	{r7}
 8003974:	b087      	sub	sp, #28
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3330      	adds	r3, #48	@ 0x30
 8003982:	461a      	mov	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	4413      	add	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	211f      	movs	r1, #31
 800399e:	fa01 f303 	lsl.w	r3, r1, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	401a      	ands	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	0e9b      	lsrs	r3, r3, #26
 80039aa:	f003 011f 	and.w	r1, r3, #31
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	fa01 f303 	lsl.w	r3, r1, r3
 80039b8:	431a      	orrs	r2, r3
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f023 0203 	bic.w	r2, r3, #3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	3314      	adds	r3, #20
 8003a00:	461a      	mov	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	0e5b      	lsrs	r3, r3, #25
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	4413      	add	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	0d1b      	lsrs	r3, r3, #20
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	2107      	movs	r1, #7
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	401a      	ands	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	0d1b      	lsrs	r3, r3, #20
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	431a      	orrs	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a60:	43db      	mvns	r3, r3
 8003a62:	401a      	ands	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f003 0318 	and.w	r3, r3, #24
 8003a6a:	4908      	ldr	r1, [pc, #32]	@ (8003a8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a6c:	40d9      	lsrs	r1, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	400b      	ands	r3, r1
 8003a72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a76:	431a      	orrs	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	000fffff 	.word	0x000fffff

08003a90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 031f 	and.w	r3, r3, #31
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <LL_ADC_DisableDeepPowerDown+0x20>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6093      	str	r3, [r2, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	5fffffc0 	.word	0x5fffffc0

08003ad0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ae4:	d101      	bne.n	8003aea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <LL_ADC_EnableInternalRegulator+0x24>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	6fffffc0 	.word	0x6fffffc0

08003b20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b34:	d101      	bne.n	8003b3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <LL_ADC_Enable+0x24>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	f043 0201 	orr.w	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	7fffffc0 	.word	0x7fffffc0

08003b70 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <LL_ADC_Disable+0x24>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	f043 0202 	orr.w	r2, r3, #2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	7fffffc0 	.word	0x7fffffc0

08003b98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <LL_ADC_IsEnabled+0x18>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <LL_ADC_IsEnabled+0x1a>
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d101      	bne.n	8003bd6 <LL_ADC_IsDisableOngoing+0x18>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <LL_ADC_IsDisableOngoing+0x1a>
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <LL_ADC_REG_StartConversion+0x24>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	f043 0204 	orr.w	r2, r3, #4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	7fffffc0 	.word	0x7fffffc0

08003c0c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <LL_ADC_REG_StopConversion+0x24>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	f043 0210 	orr.w	r2, r3, #16
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	7fffffc0 	.word	0x7fffffc0

08003c34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d101      	bne.n	8003c4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
	...

08003c5c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <LL_ADC_INJ_StopConversion+0x24>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	7fffffc0 	.word	0x7fffffc0

08003c84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d101      	bne.n	8003c9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b089      	sub	sp, #36	@ 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e18f      	b.n	8003fe6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7fd f9e1 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff feef 	bl	8003ad0 <LL_ADC_IsDeepPowerDownEnabled>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fed5 	bl	8003aac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ff0a 	bl	8003b20 <LL_ADC_IsInternalRegulatorEnabled>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d114      	bne.n	8003d3c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff feee 	bl	8003af8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d1c:	4b87      	ldr	r3, [pc, #540]	@ (8003f3c <HAL_ADC_Init+0x290>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	4a87      	ldr	r2, [pc, #540]	@ (8003f40 <HAL_ADC_Init+0x294>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d2e:	e002      	b.n	8003d36 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f9      	bne.n	8003d30 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff feed 	bl	8003b20 <LL_ADC_IsInternalRegulatorEnabled>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10d      	bne.n	8003d68 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d50:	f043 0210 	orr.w	r2, r3, #16
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	f043 0201 	orr.w	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff61 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 8003d72:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f040 8129 	bne.w	8003fd4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f040 8125 	bne.w	8003fd4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff fefa 	bl	8003b98 <LL_ADC_IsEnabled>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d136      	bne.n	8003e18 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a65      	ldr	r2, [pc, #404]	@ (8003f44 <HAL_ADC_Init+0x298>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d004      	beq.n	8003dbe <HAL_ADC_Init+0x112>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a63      	ldr	r2, [pc, #396]	@ (8003f48 <HAL_ADC_Init+0x29c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10e      	bne.n	8003ddc <HAL_ADC_Init+0x130>
 8003dbe:	4861      	ldr	r0, [pc, #388]	@ (8003f44 <HAL_ADC_Init+0x298>)
 8003dc0:	f7ff feea 	bl	8003b98 <LL_ADC_IsEnabled>
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	4860      	ldr	r0, [pc, #384]	@ (8003f48 <HAL_ADC_Init+0x29c>)
 8003dc8:	f7ff fee6 	bl	8003b98 <LL_ADC_IsEnabled>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4323      	orrs	r3, r4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e008      	b.n	8003dee <HAL_ADC_Init+0x142>
 8003ddc:	485b      	ldr	r0, [pc, #364]	@ (8003f4c <HAL_ADC_Init+0x2a0>)
 8003dde:	f7ff fedb 	bl	8003b98 <LL_ADC_IsEnabled>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d012      	beq.n	8003e18 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a53      	ldr	r2, [pc, #332]	@ (8003f44 <HAL_ADC_Init+0x298>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_ADC_Init+0x15a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a51      	ldr	r2, [pc, #324]	@ (8003f48 <HAL_ADC_Init+0x29c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_Init+0x15e>
 8003e06:	4a52      	ldr	r2, [pc, #328]	@ (8003f50 <HAL_ADC_Init+0x2a4>)
 8003e08:	e000      	b.n	8003e0c <HAL_ADC_Init+0x160>
 8003e0a:	4a52      	ldr	r2, [pc, #328]	@ (8003f54 <HAL_ADC_Init+0x2a8>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f7ff fd12 	bl	800383c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003e18:	f7ff fd04 	bl	8003824 <HAL_GetREVID>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d914      	bls.n	8003e50 <HAL_ADC_Init+0x1a4>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d110      	bne.n	8003e50 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7d5b      	ldrb	r3, [r3, #21]
 8003e32:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e38:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003e3e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	7f1b      	ldrb	r3, [r3, #28]
 8003e44:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003e46:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e48:	f043 030c 	orr.w	r3, r3, #12
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	e00d      	b.n	8003e6c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	7d5b      	ldrb	r3, [r3, #21]
 8003e54:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e5a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003e60:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	7f1b      	ldrb	r3, [r3, #28]
 8003e66:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7f1b      	ldrb	r3, [r3, #28]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d106      	bne.n	8003e82 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	045b      	lsls	r3, r3, #17
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8003f58 <HAL_ADC_Init+0x2ac>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	69b9      	ldr	r1, [r7, #24]
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff febc 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 8003ebc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fede 	bl	8003c84 <LL_ADC_INJ_IsConversionOngoing>
 8003ec8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d15f      	bne.n	8003f90 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d15c      	bne.n	8003f90 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7d1b      	ldrb	r3, [r3, #20]
 8003eda:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	4b1c      	ldr	r3, [pc, #112]	@ (8003f5c <HAL_ADC_Init+0x2b0>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	69b9      	ldr	r1, [r7, #24]
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d130      	bne.n	8003f64 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <HAL_ADC_Init+0x2b4>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f16:	3a01      	subs	r2, #1
 8003f18:	0411      	lsls	r1, r2, #16
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f1e:	4311      	orrs	r1, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003f24:	4311      	orrs	r1, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	611a      	str	r2, [r3, #16]
 8003f38:	e01c      	b.n	8003f74 <HAL_ADC_Init+0x2c8>
 8003f3a:	bf00      	nop
 8003f3c:	24000000 	.word	0x24000000
 8003f40:	053e2d63 	.word	0x053e2d63
 8003f44:	40022000 	.word	0x40022000
 8003f48:	40022100 	.word	0x40022100
 8003f4c:	58026000 	.word	0x58026000
 8003f50:	40022300 	.word	0x40022300
 8003f54:	58026300 	.word	0x58026300
 8003f58:	fff0c003 	.word	0xfff0c003
 8003f5c:	ffffbffc 	.word	0xffffbffc
 8003f60:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f001 f812 	bl	8004fb4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d10c      	bne.n	8003fb2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	f023 010f 	bic.w	r1, r3, #15
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	1e5a      	subs	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fb0:	e007      	b.n	8003fc2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 020f 	bic.w	r2, r2, #15
 8003fc0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc6:	f023 0303 	bic.w	r3, r3, #3
 8003fca:	f043 0201 	orr.w	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	655a      	str	r2, [r3, #84]	@ 0x54
 8003fd2:	e007      	b.n	8003fe4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd8:	f043 0210 	orr.w	r2, r3, #16
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3724      	adds	r7, #36	@ 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd90      	pop	{r4, r7, pc}
 8003fee:	bf00      	nop

08003ff0 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e16e      	b.n	80042e0 <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004006:	f043 0202 	orr.w	r2, r3, #2
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800400e:	2103      	movs	r1, #3
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fd95 	bl	8004b40 <ADC_ConversionStop>
 8004016:	4603      	mov	r3, r0
 8004018:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8004028:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fecb 	bl	8004dcc <ADC_Disable>
 8004036:	4603      	mov	r3, r0
 8004038:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b8c      	ldr	r3, [pc, #560]	@ (8004284 <HAL_ADC_DeInit+0x294>)
 8004052:	400b      	ands	r3, r1
 8004054:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800405e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 800406e:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800407e:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 800408e:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800409e:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6919      	ldr	r1, [r3, #16]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b77      	ldr	r3, [pc, #476]	@ (8004288 <HAL_ADC_DeInit+0x298>)
 80040ac:	400b      	ands	r3, r1
 80040ae:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80040be:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 80040ce:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6a1a      	ldr	r2, [r3, #32]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80040de:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80040ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004100:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004114:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004128:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 800413c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b50      	ldr	r3, [pc, #320]	@ (800428c <HAL_ADC_DeInit+0x29c>)
 800414c:	400b      	ands	r3, r1
 800414e:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b4d      	ldr	r3, [pc, #308]	@ (8004290 <HAL_ADC_DeInit+0x2a0>)
 800415c:	400b      	ands	r3, r1
 800415e:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4b49      	ldr	r3, [pc, #292]	@ (8004290 <HAL_ADC_DeInit+0x2a0>)
 800416c:	400b      	ands	r3, r1
 800416e:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b46      	ldr	r3, [pc, #280]	@ (8004294 <HAL_ADC_DeInit+0x2a4>)
 800417c:	400b      	ands	r3, r1
 800417e:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2200      	movs	r2, #0
 800418c:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2200      	movs	r2, #0
 800419a:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2200      	movs	r2, #0
 80041a8:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2200      	movs	r2, #0
 80041b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b34      	ldr	r3, [pc, #208]	@ (8004298 <HAL_ADC_DeInit+0x2a8>)
 80041c6:	400b      	ands	r3, r1
 80041c8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004298 <HAL_ADC_DeInit+0x2a8>)
 80041da:	400b      	ands	r3, r1
 80041dc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004298 <HAL_ADC_DeInit+0x2a8>)
 80041ee:	400b      	ands	r3, r1
 80041f0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 8004204:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a23      	ldr	r2, [pc, #140]	@ (800429c <HAL_ADC_DeInit+0x2ac>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_ADC_DeInit+0x22c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a22      	ldr	r2, [pc, #136]	@ (80042a0 <HAL_ADC_DeInit+0x2b0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d10e      	bne.n	800423a <HAL_ADC_DeInit+0x24a>
 800421c:	481f      	ldr	r0, [pc, #124]	@ (800429c <HAL_ADC_DeInit+0x2ac>)
 800421e:	f7ff fcbb 	bl	8003b98 <LL_ADC_IsEnabled>
 8004222:	4604      	mov	r4, r0
 8004224:	481e      	ldr	r0, [pc, #120]	@ (80042a0 <HAL_ADC_DeInit+0x2b0>)
 8004226:	f7ff fcb7 	bl	8003b98 <LL_ADC_IsEnabled>
 800422a:	4603      	mov	r3, r0
 800422c:	4323      	orrs	r3, r4
 800422e:	2b00      	cmp	r3, #0
 8004230:	bf0c      	ite	eq
 8004232:	2301      	moveq	r3, #1
 8004234:	2300      	movne	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	e008      	b.n	800424c <HAL_ADC_DeInit+0x25c>
 800423a:	481a      	ldr	r0, [pc, #104]	@ (80042a4 <HAL_ADC_DeInit+0x2b4>)
 800423c:	f7ff fcac 	bl	8003b98 <LL_ADC_IsEnabled>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	bf0c      	ite	eq
 8004246:	2301      	moveq	r3, #1
 8004248:	2300      	movne	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d036      	beq.n	80042be <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a11      	ldr	r2, [pc, #68]	@ (800429c <HAL_ADC_DeInit+0x2ac>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_ADC_DeInit+0x274>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a10      	ldr	r2, [pc, #64]	@ (80042a0 <HAL_ADC_DeInit+0x2b0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d101      	bne.n	8004268 <HAL_ADC_DeInit+0x278>
 8004264:	4b10      	ldr	r3, [pc, #64]	@ (80042a8 <HAL_ADC_DeInit+0x2b8>)
 8004266:	e000      	b.n	800426a <HAL_ADC_DeInit+0x27a>
 8004268:	4b10      	ldr	r3, [pc, #64]	@ (80042ac <HAL_ADC_DeInit+0x2bc>)
 800426a:	6899      	ldr	r1, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0a      	ldr	r2, [pc, #40]	@ (800429c <HAL_ADC_DeInit+0x2ac>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d004      	beq.n	8004280 <HAL_ADC_DeInit+0x290>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a09      	ldr	r2, [pc, #36]	@ (80042a0 <HAL_ADC_DeInit+0x2b0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d117      	bne.n	80042b0 <HAL_ADC_DeInit+0x2c0>
 8004280:	4a09      	ldr	r2, [pc, #36]	@ (80042a8 <HAL_ADC_DeInit+0x2b8>)
 8004282:	e016      	b.n	80042b2 <HAL_ADC_DeInit+0x2c2>
 8004284:	fffff800 	.word	0xfffff800
 8004288:	fc00f81c 	.word	0xfc00f81c
 800428c:	e0820830 	.word	0xe0820830
 8004290:	e0820820 	.word	0xe0820820
 8004294:	fffff820 	.word	0xfffff820
 8004298:	fff00000 	.word	0xfff00000
 800429c:	40022000 	.word	0x40022000
 80042a0:	40022100 	.word	0x40022100
 80042a4:	58026000 	.word	0x58026000
 80042a8:	40022300 	.word	0x40022300
 80042ac:	58026300 	.word	0x58026300
 80042b0:	4a0d      	ldr	r2, [pc, #52]	@ (80042e8 <HAL_ADC_DeInit+0x2f8>)
 80042b2:	4b0e      	ldr	r3, [pc, #56]	@ (80042ec <HAL_ADC_DeInit+0x2fc>)
 80042b4:	400b      	ands	r3, r1
 80042b6:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fc ff95 	bl	80011e8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd90      	pop	{r4, r7, pc}
 80042e8:	58026300 	.word	0x58026300
 80042ec:	fe0030e0 	.word	0xfe0030e0

080042f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a55      	ldr	r2, [pc, #340]	@ (8004458 <HAL_ADC_Start_DMA+0x168>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_ADC_Start_DMA+0x20>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a54      	ldr	r2, [pc, #336]	@ (800445c <HAL_ADC_Start_DMA+0x16c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d101      	bne.n	8004314 <HAL_ADC_Start_DMA+0x24>
 8004310:	4b53      	ldr	r3, [pc, #332]	@ (8004460 <HAL_ADC_Start_DMA+0x170>)
 8004312:	e000      	b.n	8004316 <HAL_ADC_Start_DMA+0x26>
 8004314:	4b53      	ldr	r3, [pc, #332]	@ (8004464 <HAL_ADC_Start_DMA+0x174>)
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fbba 	bl	8003a90 <LL_ADC_GetMultimode>
 800431c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fc86 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	f040 808c 	bne.w	8004448 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_ADC_Start_DMA+0x4e>
 800433a:	2302      	movs	r3, #2
 800433c:	e087      	b.n	800444e <HAL_ADC_Start_DMA+0x15e>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b05      	cmp	r3, #5
 8004350:	d002      	beq.n	8004358 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b09      	cmp	r3, #9
 8004356:	d170      	bne.n	800443a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fcad 	bl	8004cb8 <ADC_Enable>
 800435e:	4603      	mov	r3, r0
 8004360:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004362:	7dfb      	ldrb	r3, [r7, #23]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d163      	bne.n	8004430 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800436c:	4b3e      	ldr	r3, [pc, #248]	@ (8004468 <HAL_ADC_Start_DMA+0x178>)
 800436e:	4013      	ands	r3, r2
 8004370:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a37      	ldr	r2, [pc, #220]	@ (800445c <HAL_ADC_Start_DMA+0x16c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d002      	beq.n	8004388 <HAL_ADC_Start_DMA+0x98>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	e000      	b.n	800438a <HAL_ADC_Start_DMA+0x9a>
 8004388:	4b33      	ldr	r3, [pc, #204]	@ (8004458 <HAL_ADC_Start_DMA+0x168>)
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	4293      	cmp	r3, r2
 8004390:	d002      	beq.n	8004398 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d105      	bne.n	80043a4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b4:	f023 0206 	bic.w	r2, r3, #6
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80043bc:	e002      	b.n	80043c4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c8:	4a28      	ldr	r2, [pc, #160]	@ (800446c <HAL_ADC_Start_DMA+0x17c>)
 80043ca:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d0:	4a27      	ldr	r2, [pc, #156]	@ (8004470 <HAL_ADC_Start_DMA+0x180>)
 80043d2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d8:	4a26      	ldr	r2, [pc, #152]	@ (8004474 <HAL_ADC_Start_DMA+0x184>)
 80043da:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	221c      	movs	r2, #28
 80043e2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0210 	orr.w	r2, r2, #16
 80043fa:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f7ff fadf 	bl	80039ca <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3340      	adds	r3, #64	@ 0x40
 8004416:	4619      	mov	r1, r3
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f002 f9e4 	bl	80067e8 <HAL_DMA_Start_IT>
 8004420:	4603      	mov	r3, r0
 8004422:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fbdb 	bl	8003be4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800442e:	e00d      	b.n	800444c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8004438:	e008      	b.n	800444c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004446:	e001      	b.n	800444c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004448:	2302      	movs	r3, #2
 800444a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800444c:	7dfb      	ldrb	r3, [r7, #23]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40022000 	.word	0x40022000
 800445c:	40022100 	.word	0x40022100
 8004460:	40022300 	.word	0x40022300
 8004464:	58026300 	.word	0x58026300
 8004468:	fffff0fe 	.word	0xfffff0fe
 800446c:	08004e8b 	.word	0x08004e8b
 8004470:	08004f63 	.word	0x08004f63
 8004474:	08004f7f 	.word	0x08004f7f

08004478 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b0a1      	sub	sp, #132	@ 0x84
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4a9d      	ldr	r2, [pc, #628]	@ (8004730 <HAL_ADC_ConfigChannel+0x290>)
 80044ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x2a>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e321      	b.n	8004b0e <HAL_ADC_ConfigChannel+0x66e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fbac 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 8306 	bne.w	8004af0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d108      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x62>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	0e9b      	lsrs	r3, r3, #26
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	2201      	movs	r2, #1
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	e016      	b.n	8004530 <HAL_ADC_ConfigChannel+0x90>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800450a:	fa93 f3a3 	rbit	r3, r3
 800450e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004510:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004512:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004514:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800451a:	2320      	movs	r3, #32
 800451c:	e003      	b.n	8004526 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800451e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004520:	fab3 f383 	clz	r3, r3
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	2201      	movs	r2, #1
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	69d1      	ldr	r1, [r2, #28]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	430b      	orrs	r3, r1
 800453c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6859      	ldr	r1, [r3, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	f7ff fa11 	bl	8003972 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fb6d 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 800455a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fb8f 	bl	8003c84 <LL_ADC_INJ_IsConversionOngoing>
 8004566:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800456a:	2b00      	cmp	r3, #0
 800456c:	f040 80b3 	bne.w	80046d6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004570:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004572:	2b00      	cmp	r3, #0
 8004574:	f040 80af 	bne.w	80046d6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6819      	ldr	r1, [r3, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	461a      	mov	r2, r3
 8004586:	f7ff fa33 	bl	80039f0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800458a:	4b6a      	ldr	r3, [pc, #424]	@ (8004734 <HAL_ADC_ConfigChannel+0x294>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004596:	d10b      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x110>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	e01d      	b.n	80045ec <HAL_ADC_ConfigChannel+0x14c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_ADC_ConfigChannel+0x136>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	089b      	lsrs	r3, r3, #2
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	e00a      	b.n	80045ec <HAL_ADC_ConfigChannel+0x14c>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d027      	beq.n	8004646 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6919      	ldr	r1, [r3, #16]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004604:	f7ff f94e 	bl	80038a4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6919      	ldr	r1, [r3, #16]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	7e5b      	ldrb	r3, [r3, #25]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d102      	bne.n	800461e <HAL_ADC_ConfigChannel+0x17e>
 8004618:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800461c:	e000      	b.n	8004620 <HAL_ADC_ConfigChannel+0x180>
 800461e:	2300      	movs	r3, #0
 8004620:	461a      	mov	r2, r3
 8004622:	f7ff f978 	bl	8003916 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6919      	ldr	r1, [r3, #16]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	7e1b      	ldrb	r3, [r3, #24]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d102      	bne.n	800463c <HAL_ADC_ConfigChannel+0x19c>
 8004636:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800463a:	e000      	b.n	800463e <HAL_ADC_ConfigChannel+0x19e>
 800463c:	2300      	movs	r3, #0
 800463e:	461a      	mov	r2, r3
 8004640:	f7ff f950 	bl	80038e4 <LL_ADC_SetDataRightShift>
 8004644:	e047      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800464c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	069b      	lsls	r3, r3, #26
 8004656:	429a      	cmp	r2, r3
 8004658:	d107      	bne.n	800466a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004668:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004670:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	069b      	lsls	r3, r3, #26
 800467a:	429a      	cmp	r2, r3
 800467c:	d107      	bne.n	800468e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800468c:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004694:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	069b      	lsls	r3, r3, #26
 800469e:	429a      	cmp	r2, r3
 80046a0:	d107      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80046b0:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	069b      	lsls	r3, r3, #26
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d107      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80046d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fa5c 	bl	8003b98 <LL_ADC_IsEnabled>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 820d 	bne.w	8004b02 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	6819      	ldr	r1, [r3, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	461a      	mov	r2, r3
 80046f6:	f7ff f9a7 	bl	8003a48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004730 <HAL_ADC_ConfigChannel+0x290>)
 8004700:	4293      	cmp	r3, r2
 8004702:	f040 8133 	bne.w	800496c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004712:	2b00      	cmp	r3, #0
 8004714:	d110      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x298>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	0e9b      	lsrs	r3, r3, #26
 800471c:	3301      	adds	r3, #1
 800471e:	f003 031f 	and.w	r3, r3, #31
 8004722:	2b09      	cmp	r3, #9
 8004724:	bf94      	ite	ls
 8004726:	2301      	movls	r3, #1
 8004728:	2300      	movhi	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	e01e      	b.n	800476c <HAL_ADC_ConfigChannel+0x2cc>
 800472e:	bf00      	nop
 8004730:	47ff0000 	.word	0x47ff0000
 8004734:	5c001000 	.word	0x5c001000
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004740:	fa93 f3a3 	rbit	r3, r3
 8004744:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004748:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800474a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004750:	2320      	movs	r3, #32
 8004752:	e003      	b.n	800475c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004754:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004756:	fab3 f383 	clz	r3, r3
 800475a:	b2db      	uxtb	r3, r3
 800475c:	3301      	adds	r3, #1
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	2b09      	cmp	r3, #9
 8004764:	bf94      	ite	ls
 8004766:	2301      	movls	r3, #1
 8004768:	2300      	movhi	r3, #0
 800476a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800476c:	2b00      	cmp	r3, #0
 800476e:	d079      	beq.n	8004864 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004778:	2b00      	cmp	r3, #0
 800477a:	d107      	bne.n	800478c <HAL_ADC_ConfigChannel+0x2ec>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	0e9b      	lsrs	r3, r3, #26
 8004782:	3301      	adds	r3, #1
 8004784:	069b      	lsls	r3, r3, #26
 8004786:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800478a:	e015      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x318>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004794:	fa93 f3a3 	rbit	r3, r3
 8004798:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800479a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800479c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800479e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80047a4:	2320      	movs	r3, #32
 80047a6:	e003      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80047a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	3301      	adds	r3, #1
 80047b2:	069b      	lsls	r3, r3, #26
 80047b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x338>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	0e9b      	lsrs	r3, r3, #26
 80047ca:	3301      	adds	r3, #1
 80047cc:	f003 031f 	and.w	r3, r3, #31
 80047d0:	2101      	movs	r1, #1
 80047d2:	fa01 f303 	lsl.w	r3, r1, r3
 80047d6:	e017      	b.n	8004808 <HAL_ADC_ConfigChannel+0x368>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047e0:	fa93 f3a3 	rbit	r3, r3
 80047e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80047e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80047ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80047f0:	2320      	movs	r3, #32
 80047f2:	e003      	b.n	80047fc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80047f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047f6:	fab3 f383 	clz	r3, r3
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	3301      	adds	r3, #1
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	2101      	movs	r1, #1
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	ea42 0103 	orr.w	r1, r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <HAL_ADC_ConfigChannel+0x38e>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	0e9b      	lsrs	r3, r3, #26
 800481e:	3301      	adds	r3, #1
 8004820:	f003 021f 	and.w	r2, r3, #31
 8004824:	4613      	mov	r3, r2
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	4413      	add	r3, r2
 800482a:	051b      	lsls	r3, r3, #20
 800482c:	e018      	b.n	8004860 <HAL_ADC_ConfigChannel+0x3c0>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800483c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004846:	2320      	movs	r3, #32
 8004848:	e003      	b.n	8004852 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800484a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484c:	fab3 f383 	clz	r3, r3
 8004850:	b2db      	uxtb	r3, r3
 8004852:	3301      	adds	r3, #1
 8004854:	f003 021f 	and.w	r2, r3, #31
 8004858:	4613      	mov	r3, r2
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	4413      	add	r3, r2
 800485e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004860:	430b      	orrs	r3, r1
 8004862:	e07e      	b.n	8004962 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x3e0>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	0e9b      	lsrs	r3, r3, #26
 8004876:	3301      	adds	r3, #1
 8004878:	069b      	lsls	r3, r3, #26
 800487a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800487e:	e015      	b.n	80048ac <HAL_ADC_ConfigChannel+0x40c>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004898:	2320      	movs	r3, #32
 800489a:	e003      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800489c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489e:	fab3 f383 	clz	r3, r3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	3301      	adds	r3, #1
 80048a6:	069b      	lsls	r3, r3, #26
 80048a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x42c>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	0e9b      	lsrs	r3, r3, #26
 80048be:	3301      	adds	r3, #1
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	2101      	movs	r1, #1
 80048c6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ca:	e017      	b.n	80048fc <HAL_ADC_ConfigChannel+0x45c>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	fa93 f3a3 	rbit	r3, r3
 80048d8:	61bb      	str	r3, [r7, #24]
  return result;
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80048e4:	2320      	movs	r3, #32
 80048e6:	e003      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	fab3 f383 	clz	r3, r3
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	3301      	adds	r3, #1
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2101      	movs	r1, #1
 80048f8:	fa01 f303 	lsl.w	r3, r1, r3
 80048fc:	ea42 0103 	orr.w	r1, r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10d      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x488>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	0e9b      	lsrs	r3, r3, #26
 8004912:	3301      	adds	r3, #1
 8004914:	f003 021f 	and.w	r2, r3, #31
 8004918:	4613      	mov	r3, r2
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	4413      	add	r3, r2
 800491e:	3b1e      	subs	r3, #30
 8004920:	051b      	lsls	r3, r3, #20
 8004922:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004926:	e01b      	b.n	8004960 <HAL_ADC_ConfigChannel+0x4c0>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	fa93 f3a3 	rbit	r3, r3
 8004934:	60fb      	str	r3, [r7, #12]
  return result;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004940:	2320      	movs	r3, #32
 8004942:	e003      	b.n	800494c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	fab3 f383 	clz	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	3301      	adds	r3, #1
 800494e:	f003 021f 	and.w	r2, r3, #31
 8004952:	4613      	mov	r3, r2
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4413      	add	r3, r2
 8004958:	3b1e      	subs	r3, #30
 800495a:	051b      	lsls	r3, r3, #20
 800495c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004960:	430b      	orrs	r3, r1
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	6892      	ldr	r2, [r2, #8]
 8004966:	4619      	mov	r1, r3
 8004968:	f7ff f842 	bl	80039f0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f280 80c6 	bge.w	8004b02 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a67      	ldr	r2, [pc, #412]	@ (8004b18 <HAL_ADC_ConfigChannel+0x678>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_ADC_ConfigChannel+0x4ea>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a65      	ldr	r2, [pc, #404]	@ (8004b1c <HAL_ADC_ConfigChannel+0x67c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d101      	bne.n	800498e <HAL_ADC_ConfigChannel+0x4ee>
 800498a:	4b65      	ldr	r3, [pc, #404]	@ (8004b20 <HAL_ADC_ConfigChannel+0x680>)
 800498c:	e000      	b.n	8004990 <HAL_ADC_ConfigChannel+0x4f0>
 800498e:	4b65      	ldr	r3, [pc, #404]	@ (8004b24 <HAL_ADC_ConfigChannel+0x684>)
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe ff79 	bl	8003888 <LL_ADC_GetCommonPathInternalCh>
 8004996:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a5e      	ldr	r2, [pc, #376]	@ (8004b18 <HAL_ADC_ConfigChannel+0x678>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_ADC_ConfigChannel+0x50c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a5d      	ldr	r2, [pc, #372]	@ (8004b1c <HAL_ADC_ConfigChannel+0x67c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d10e      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x52a>
 80049ac:	485a      	ldr	r0, [pc, #360]	@ (8004b18 <HAL_ADC_ConfigChannel+0x678>)
 80049ae:	f7ff f8f3 	bl	8003b98 <LL_ADC_IsEnabled>
 80049b2:	4604      	mov	r4, r0
 80049b4:	4859      	ldr	r0, [pc, #356]	@ (8004b1c <HAL_ADC_ConfigChannel+0x67c>)
 80049b6:	f7ff f8ef 	bl	8003b98 <LL_ADC_IsEnabled>
 80049ba:	4603      	mov	r3, r0
 80049bc:	4323      	orrs	r3, r4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	bf0c      	ite	eq
 80049c2:	2301      	moveq	r3, #1
 80049c4:	2300      	movne	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	e008      	b.n	80049dc <HAL_ADC_ConfigChannel+0x53c>
 80049ca:	4857      	ldr	r0, [pc, #348]	@ (8004b28 <HAL_ADC_ConfigChannel+0x688>)
 80049cc:	f7ff f8e4 	bl	8003b98 <LL_ADC_IsEnabled>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	bf0c      	ite	eq
 80049d6:	2301      	moveq	r3, #1
 80049d8:	2300      	movne	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d07d      	beq.n	8004adc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a51      	ldr	r2, [pc, #324]	@ (8004b2c <HAL_ADC_ConfigChannel+0x68c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d130      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x5ac>
 80049ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d12b      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004b28 <HAL_ADC_ConfigChannel+0x688>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	f040 8081 	bne.w	8004b02 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a44      	ldr	r2, [pc, #272]	@ (8004b18 <HAL_ADC_ConfigChannel+0x678>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_ADC_ConfigChannel+0x574>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a43      	ldr	r2, [pc, #268]	@ (8004b1c <HAL_ADC_ConfigChannel+0x67c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d101      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x578>
 8004a14:	4a42      	ldr	r2, [pc, #264]	@ (8004b20 <HAL_ADC_ConfigChannel+0x680>)
 8004a16:	e000      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x57a>
 8004a18:	4a42      	ldr	r2, [pc, #264]	@ (8004b24 <HAL_ADC_ConfigChannel+0x684>)
 8004a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a20:	4619      	mov	r1, r3
 8004a22:	4610      	mov	r0, r2
 8004a24:	f7fe ff1d 	bl	8003862 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a28:	4b41      	ldr	r3, [pc, #260]	@ (8004b30 <HAL_ADC_ConfigChannel+0x690>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	099b      	lsrs	r3, r3, #6
 8004a2e:	4a41      	ldr	r2, [pc, #260]	@ (8004b34 <HAL_ADC_ConfigChannel+0x694>)
 8004a30:	fba2 2303 	umull	r2, r3, r2, r3
 8004a34:	099b      	lsrs	r3, r3, #6
 8004a36:	3301      	adds	r3, #1
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a3c:	e002      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f9      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a4a:	e05a      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a39      	ldr	r2, [pc, #228]	@ (8004b38 <HAL_ADC_ConfigChannel+0x698>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d11e      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x5f4>
 8004a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d119      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a30      	ldr	r2, [pc, #192]	@ (8004b28 <HAL_ADC_ConfigChannel+0x688>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d14b      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004b18 <HAL_ADC_ConfigChannel+0x678>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d004      	beq.n	8004a7e <HAL_ADC_ConfigChannel+0x5de>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a28      	ldr	r2, [pc, #160]	@ (8004b1c <HAL_ADC_ConfigChannel+0x67c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d101      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x5e2>
 8004a7e:	4a28      	ldr	r2, [pc, #160]	@ (8004b20 <HAL_ADC_ConfigChannel+0x680>)
 8004a80:	e000      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x5e4>
 8004a82:	4a28      	ldr	r2, [pc, #160]	@ (8004b24 <HAL_ADC_ConfigChannel+0x684>)
 8004a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f7fe fee8 	bl	8003862 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a92:	e036      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a28      	ldr	r2, [pc, #160]	@ (8004b3c <HAL_ADC_ConfigChannel+0x69c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d131      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x662>
 8004a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d12c      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1e      	ldr	r2, [pc, #120]	@ (8004b28 <HAL_ADC_ConfigChannel+0x688>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d127      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a18      	ldr	r2, [pc, #96]	@ (8004b18 <HAL_ADC_ConfigChannel+0x678>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_ADC_ConfigChannel+0x626>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a16      	ldr	r2, [pc, #88]	@ (8004b1c <HAL_ADC_ConfigChannel+0x67c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d101      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x62a>
 8004ac6:	4a16      	ldr	r2, [pc, #88]	@ (8004b20 <HAL_ADC_ConfigChannel+0x680>)
 8004ac8:	e000      	b.n	8004acc <HAL_ADC_ConfigChannel+0x62c>
 8004aca:	4a16      	ldr	r2, [pc, #88]	@ (8004b24 <HAL_ADC_ConfigChannel+0x684>)
 8004acc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ace:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f7fe fec4 	bl	8003862 <LL_ADC_SetCommonPathInternalCh>
 8004ada:	e012      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae0:	f043 0220 	orr.w	r2, r3, #32
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004aee:	e008      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b0a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3784      	adds	r7, #132	@ 0x84
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd90      	pop	{r4, r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40022000 	.word	0x40022000
 8004b1c:	40022100 	.word	0x40022100
 8004b20:	40022300 	.word	0x40022300
 8004b24:	58026300 	.word	0x58026300
 8004b28:	58026000 	.word	0x58026000
 8004b2c:	cb840000 	.word	0xcb840000
 8004b30:	24000000 	.word	0x24000000
 8004b34:	053e2d63 	.word	0x053e2d63
 8004b38:	c7520000 	.word	0xc7520000
 8004b3c:	cfb80000 	.word	0xcfb80000

08004b40 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff f86c 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 8004b5c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff f88e 	bl	8003c84 <LL_ADC_INJ_IsConversionOngoing>
 8004b68:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d103      	bne.n	8004b78 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8098 	beq.w	8004ca8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d02a      	beq.n	8004bdc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	7d5b      	ldrb	r3, [r3, #21]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d126      	bne.n	8004bdc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	7d1b      	ldrb	r3, [r3, #20]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d122      	bne.n	8004bdc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004b96:	2301      	movs	r3, #1
 8004b98:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b9a:	e014      	b.n	8004bc6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	4a45      	ldr	r2, [pc, #276]	@ (8004cb4 <ADC_ConversionStop+0x174>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d90d      	bls.n	8004bc0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba8:	f043 0210 	orr.w	r2, r3, #16
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb4:	f043 0201 	orr.w	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e074      	b.n	8004caa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd0:	2b40      	cmp	r3, #64	@ 0x40
 8004bd2:	d1e3      	bne.n	8004b9c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2240      	movs	r2, #64	@ 0x40
 8004bda:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d014      	beq.n	8004c0c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff f824 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00c      	beq.n	8004c0c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe ffe1 	bl	8003bbe <LL_ADC_IsDisableOngoing>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d104      	bne.n	8004c0c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff f800 	bl	8003c0c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d014      	beq.n	8004c3c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff f834 	bl	8003c84 <LL_ADC_INJ_IsConversionOngoing>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe ffc9 	bl	8003bbe <LL_ADC_IsDisableOngoing>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d104      	bne.n	8004c3c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff f810 	bl	8003c5c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d005      	beq.n	8004c4e <ADC_ConversionStop+0x10e>
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d105      	bne.n	8004c54 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004c48:	230c      	movs	r3, #12
 8004c4a:	617b      	str	r3, [r7, #20]
        break;
 8004c4c:	e005      	b.n	8004c5a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004c4e:	2308      	movs	r3, #8
 8004c50:	617b      	str	r3, [r7, #20]
        break;
 8004c52:	e002      	b.n	8004c5a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004c54:	2304      	movs	r3, #4
 8004c56:	617b      	str	r3, [r7, #20]
        break;
 8004c58:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004c5a:	f7fe fdb3 	bl	80037c4 <HAL_GetTick>
 8004c5e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c60:	e01b      	b.n	8004c9a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004c62:	f7fe fdaf 	bl	80037c4 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b05      	cmp	r3, #5
 8004c6e:	d914      	bls.n	8004c9a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00d      	beq.n	8004c9a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c82:	f043 0210 	orr.w	r2, r3, #16
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8e:	f043 0201 	orr.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e007      	b.n	8004caa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1dc      	bne.n	8004c62 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3720      	adds	r7, #32
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	000cdbff 	.word	0x000cdbff

08004cb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fe ff67 	bl	8003b98 <LL_ADC_IsEnabled>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d16e      	bne.n	8004dae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	4b38      	ldr	r3, [pc, #224]	@ (8004db8 <ADC_Enable+0x100>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00d      	beq.n	8004cfa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce2:	f043 0210 	orr.w	r2, r3, #16
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cee:	f043 0201 	orr.w	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e05a      	b.n	8004db0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fe ff22 	bl	8003b48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d04:	f7fe fd5e 	bl	80037c4 <HAL_GetTick>
 8004d08:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8004dbc <ADC_Enable+0x104>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <ADC_Enable+0x66>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a29      	ldr	r2, [pc, #164]	@ (8004dc0 <ADC_Enable+0x108>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <ADC_Enable+0x6a>
 8004d1e:	4b29      	ldr	r3, [pc, #164]	@ (8004dc4 <ADC_Enable+0x10c>)
 8004d20:	e000      	b.n	8004d24 <ADC_Enable+0x6c>
 8004d22:	4b29      	ldr	r3, [pc, #164]	@ (8004dc8 <ADC_Enable+0x110>)
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe feb3 	bl	8003a90 <LL_ADC_GetMultimode>
 8004d2a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a23      	ldr	r2, [pc, #140]	@ (8004dc0 <ADC_Enable+0x108>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d002      	beq.n	8004d3c <ADC_Enable+0x84>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	e000      	b.n	8004d3e <ADC_Enable+0x86>
 8004d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dbc <ADC_Enable+0x104>)
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d02c      	beq.n	8004da0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d130      	bne.n	8004dae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d4c:	e028      	b.n	8004da0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe ff20 	bl	8003b98 <LL_ADC_IsEnabled>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fef0 	bl	8003b48 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d68:	f7fe fd2c 	bl	80037c4 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d914      	bls.n	8004da0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d00d      	beq.n	8004da0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d88:	f043 0210 	orr.w	r2, r3, #16
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d94:	f043 0201 	orr.w	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e007      	b.n	8004db0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d1cf      	bne.n	8004d4e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	8000003f 	.word	0x8000003f
 8004dbc:	40022000 	.word	0x40022000
 8004dc0:	40022100 	.word	0x40022100
 8004dc4:	40022300 	.word	0x40022300
 8004dc8:	58026300 	.word	0x58026300

08004dcc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fe fef0 	bl	8003bbe <LL_ADC_IsDisableOngoing>
 8004dde:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fe fed7 	bl	8003b98 <LL_ADC_IsEnabled>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d047      	beq.n	8004e80 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d144      	bne.n	8004e80 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 030d 	and.w	r3, r3, #13
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d10c      	bne.n	8004e1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fe feb1 	bl	8003b70 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2203      	movs	r2, #3
 8004e14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e16:	f7fe fcd5 	bl	80037c4 <HAL_GetTick>
 8004e1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e1c:	e029      	b.n	8004e72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e22:	f043 0210 	orr.w	r2, r3, #16
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2e:	f043 0201 	orr.w	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e023      	b.n	8004e82 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e3a:	f7fe fcc3 	bl	80037c4 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d914      	bls.n	8004e72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e5a:	f043 0210 	orr.w	r2, r3, #16
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e66:	f043 0201 	orr.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e007      	b.n	8004e82 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1dc      	bne.n	8004e3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d14b      	bne.n	8004f3c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d021      	beq.n	8004f02 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fd42 	bl	800394c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d032      	beq.n	8004f34 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d12b      	bne.n	8004f34 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d11f      	bne.n	8004f34 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef8:	f043 0201 	orr.w	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f00:	e018      	b.n	8004f34 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d111      	bne.n	8004f34 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d105      	bne.n	8004f34 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2c:	f043 0201 	orr.w	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7fd feb9 	bl	8002cac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f3a:	e00e      	b.n	8004f5a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7ff fa9f 	bl	800448c <HAL_ADC_ErrorCallback>
}
 8004f4e:	e004      	b.n	8004f5a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff fa81 	bl	8004478 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9c:	f043 0204 	orr.w	r2, r3, #4
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff fa71 	bl	800448c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a7a      	ldr	r2, [pc, #488]	@ (80051ac <ADC_ConfigureBoostMode+0x1f8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <ADC_ConfigureBoostMode+0x1c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a79      	ldr	r2, [pc, #484]	@ (80051b0 <ADC_ConfigureBoostMode+0x1fc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d109      	bne.n	8004fe4 <ADC_ConfigureBoostMode+0x30>
 8004fd0:	4b78      	ldr	r3, [pc, #480]	@ (80051b4 <ADC_ConfigureBoostMode+0x200>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bf14      	ite	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	2300      	moveq	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	e008      	b.n	8004ff6 <ADC_ConfigureBoostMode+0x42>
 8004fe4:	4b74      	ldr	r3, [pc, #464]	@ (80051b8 <ADC_ConfigureBoostMode+0x204>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf14      	ite	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2300      	moveq	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01c      	beq.n	8005034 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004ffa:	f005 fa97 	bl	800a52c <HAL_RCC_GetHCLKFreq>
 8004ffe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005008:	d010      	beq.n	800502c <ADC_ConfigureBoostMode+0x78>
 800500a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800500e:	d873      	bhi.n	80050f8 <ADC_ConfigureBoostMode+0x144>
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005014:	d002      	beq.n	800501c <ADC_ConfigureBoostMode+0x68>
 8005016:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800501a:	d16d      	bne.n	80050f8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	0c1b      	lsrs	r3, r3, #16
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	60fb      	str	r3, [r7, #12]
        break;
 800502a:	e068      	b.n	80050fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	089b      	lsrs	r3, r3, #2
 8005030:	60fb      	str	r3, [r7, #12]
        break;
 8005032:	e064      	b.n	80050fe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005034:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005038:	f04f 0100 	mov.w	r1, #0
 800503c:	f006 fcdc 	bl	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005040:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800504a:	d051      	beq.n	80050f0 <ADC_ConfigureBoostMode+0x13c>
 800504c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005050:	d854      	bhi.n	80050fc <ADC_ConfigureBoostMode+0x148>
 8005052:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005056:	d047      	beq.n	80050e8 <ADC_ConfigureBoostMode+0x134>
 8005058:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800505c:	d84e      	bhi.n	80050fc <ADC_ConfigureBoostMode+0x148>
 800505e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005062:	d03d      	beq.n	80050e0 <ADC_ConfigureBoostMode+0x12c>
 8005064:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005068:	d848      	bhi.n	80050fc <ADC_ConfigureBoostMode+0x148>
 800506a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800506e:	d033      	beq.n	80050d8 <ADC_ConfigureBoostMode+0x124>
 8005070:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005074:	d842      	bhi.n	80050fc <ADC_ConfigureBoostMode+0x148>
 8005076:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800507a:	d029      	beq.n	80050d0 <ADC_ConfigureBoostMode+0x11c>
 800507c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005080:	d83c      	bhi.n	80050fc <ADC_ConfigureBoostMode+0x148>
 8005082:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005086:	d01a      	beq.n	80050be <ADC_ConfigureBoostMode+0x10a>
 8005088:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800508c:	d836      	bhi.n	80050fc <ADC_ConfigureBoostMode+0x148>
 800508e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005092:	d014      	beq.n	80050be <ADC_ConfigureBoostMode+0x10a>
 8005094:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005098:	d830      	bhi.n	80050fc <ADC_ConfigureBoostMode+0x148>
 800509a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800509e:	d00e      	beq.n	80050be <ADC_ConfigureBoostMode+0x10a>
 80050a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050a4:	d82a      	bhi.n	80050fc <ADC_ConfigureBoostMode+0x148>
 80050a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050aa:	d008      	beq.n	80050be <ADC_ConfigureBoostMode+0x10a>
 80050ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050b0:	d824      	bhi.n	80050fc <ADC_ConfigureBoostMode+0x148>
 80050b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050b6:	d002      	beq.n	80050be <ADC_ConfigureBoostMode+0x10a>
 80050b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050bc:	d11e      	bne.n	80050fc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	0c9b      	lsrs	r3, r3, #18
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050cc:	60fb      	str	r3, [r7, #12]
        break;
 80050ce:	e016      	b.n	80050fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	091b      	lsrs	r3, r3, #4
 80050d4:	60fb      	str	r3, [r7, #12]
        break;
 80050d6:	e012      	b.n	80050fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	60fb      	str	r3, [r7, #12]
        break;
 80050de:	e00e      	b.n	80050fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	099b      	lsrs	r3, r3, #6
 80050e4:	60fb      	str	r3, [r7, #12]
        break;
 80050e6:	e00a      	b.n	80050fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	09db      	lsrs	r3, r3, #7
 80050ec:	60fb      	str	r3, [r7, #12]
        break;
 80050ee:	e006      	b.n	80050fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	60fb      	str	r3, [r7, #12]
        break;
 80050f6:	e002      	b.n	80050fe <ADC_ConfigureBoostMode+0x14a>
        break;
 80050f8:	bf00      	nop
 80050fa:	e000      	b.n	80050fe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80050fc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80050fe:	f7fe fb91 	bl	8003824 <HAL_GetREVID>
 8005102:	4603      	mov	r3, r0
 8005104:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005108:	4293      	cmp	r3, r2
 800510a:	d815      	bhi.n	8005138 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a2b      	ldr	r2, [pc, #172]	@ (80051bc <ADC_ConfigureBoostMode+0x208>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d908      	bls.n	8005126 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005122:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005124:	e03e      	b.n	80051a4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005134:	609a      	str	r2, [r3, #8]
}
 8005136:	e035      	b.n	80051a4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4a1f      	ldr	r2, [pc, #124]	@ (80051c0 <ADC_ConfigureBoostMode+0x20c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d808      	bhi.n	8005158 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005154:	609a      	str	r2, [r3, #8]
}
 8005156:	e025      	b.n	80051a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a1a      	ldr	r2, [pc, #104]	@ (80051c4 <ADC_ConfigureBoostMode+0x210>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d80a      	bhi.n	8005176 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005172:	609a      	str	r2, [r3, #8]
}
 8005174:	e016      	b.n	80051a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a13      	ldr	r2, [pc, #76]	@ (80051c8 <ADC_ConfigureBoostMode+0x214>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d80a      	bhi.n	8005194 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005190:	609a      	str	r2, [r3, #8]
}
 8005192:	e007      	b.n	80051a4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80051a2:	609a      	str	r2, [r3, #8]
}
 80051a4:	bf00      	nop
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40022000 	.word	0x40022000
 80051b0:	40022100 	.word	0x40022100
 80051b4:	40022300 	.word	0x40022300
 80051b8:	58026300 	.word	0x58026300
 80051bc:	01312d00 	.word	0x01312d00
 80051c0:	005f5e10 	.word	0x005f5e10
 80051c4:	00bebc20 	.word	0x00bebc20
 80051c8:	017d7840 	.word	0x017d7840

080051cc <LL_ADC_IsEnabled>:
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <LL_ADC_IsEnabled+0x18>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <LL_ADC_IsEnabled+0x1a>
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
	...

080051f4 <LL_ADC_StartCalibration>:
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	4b09      	ldr	r3, [pc, #36]	@ (800522c <LL_ADC_StartCalibration+0x38>)
 8005206:	4013      	ands	r3, r2
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005214:	430a      	orrs	r2, r1
 8005216:	4313      	orrs	r3, r2
 8005218:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	609a      	str	r2, [r3, #8]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	3ffeffc0 	.word	0x3ffeffc0

08005230 <LL_ADC_IsCalibrationOnGoing>:
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005244:	d101      	bne.n	800524a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_ADC_REG_IsConversionOngoing>:
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b04      	cmp	r3, #4
 800526a:	d101      	bne.n	8005270 <LL_ADC_REG_IsConversionOngoing+0x18>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
	...

08005280 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <HAL_ADCEx_Calibration_Start+0x1e>
 800529a:	2302      	movs	r3, #2
 800529c:	e04c      	b.n	8005338 <HAL_ADCEx_Calibration_Start+0xb8>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7ff fd90 	bl	8004dcc <ADC_Disable>
 80052ac:	4603      	mov	r3, r0
 80052ae:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d135      	bne.n	8005322 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052ba:	4b21      	ldr	r3, [pc, #132]	@ (8005340 <HAL_ADCEx_Calibration_Start+0xc0>)
 80052bc:	4013      	ands	r3, r2
 80052be:	f043 0202 	orr.w	r2, r3, #2
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff ff90 	bl	80051f4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80052d4:	e014      	b.n	8005300 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	3301      	adds	r3, #1
 80052da:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4a19      	ldr	r2, [pc, #100]	@ (8005344 <HAL_ADCEx_Calibration_Start+0xc4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d30d      	bcc.n	8005300 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e8:	f023 0312 	bic.w	r3, r3, #18
 80052ec:	f043 0210 	orr.w	r2, r3, #16
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e01b      	b.n	8005338 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff ff93 	bl	8005230 <LL_ADC_IsCalibrationOnGoing>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e2      	bne.n	80052d6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005314:	f023 0303 	bic.w	r3, r3, #3
 8005318:	f043 0201 	orr.w	r2, r3, #1
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005320:	e005      	b.n	800532e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005326:	f043 0210 	orr.w	r2, r3, #16
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005336:	7dfb      	ldrb	r3, [r7, #23]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	ffffeefd 	.word	0xffffeefd
 8005344:	25c3f800 	.word	0x25c3f800

08005348 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b09f      	sub	sp, #124	@ 0x7c
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005362:	2302      	movs	r3, #2
 8005364:	e0be      	b.n	80054e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800536e:	2300      	movs	r3, #0
 8005370:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005372:	2300      	movs	r3, #0
 8005374:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a5c      	ldr	r2, [pc, #368]	@ (80054ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d102      	bne.n	8005386 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005380:	4b5b      	ldr	r3, [pc, #364]	@ (80054f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005382:	60bb      	str	r3, [r7, #8]
 8005384:	e001      	b.n	800538a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10b      	bne.n	80053a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005394:	f043 0220 	orr.w	r2, r3, #32
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e09d      	b.n	80054e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff ff54 	bl	8005258 <LL_ADC_REG_IsConversionOngoing>
 80053b0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff ff4e 	bl	8005258 <LL_ADC_REG_IsConversionOngoing>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d17f      	bne.n	80054c2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80053c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d17c      	bne.n	80054c2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a47      	ldr	r2, [pc, #284]	@ (80054ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a46      	ldr	r2, [pc, #280]	@ (80054f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d101      	bne.n	80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80053dc:	4b45      	ldr	r3, [pc, #276]	@ (80054f4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053de:	e000      	b.n	80053e2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80053e0:	4b45      	ldr	r3, [pc, #276]	@ (80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053e2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d039      	beq.n	8005460 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80053ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	431a      	orrs	r2, r3
 80053fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053fc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a3a      	ldr	r2, [pc, #232]	@ (80054ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a38      	ldr	r2, [pc, #224]	@ (80054f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d10e      	bne.n	8005430 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005412:	4836      	ldr	r0, [pc, #216]	@ (80054ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005414:	f7ff feda 	bl	80051cc <LL_ADC_IsEnabled>
 8005418:	4604      	mov	r4, r0
 800541a:	4835      	ldr	r0, [pc, #212]	@ (80054f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800541c:	f7ff fed6 	bl	80051cc <LL_ADC_IsEnabled>
 8005420:	4603      	mov	r3, r0
 8005422:	4323      	orrs	r3, r4
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e008      	b.n	8005442 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005430:	4832      	ldr	r0, [pc, #200]	@ (80054fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005432:	f7ff fecb 	bl	80051cc <LL_ADC_IsEnabled>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf0c      	ite	eq
 800543c:	2301      	moveq	r3, #1
 800543e:	2300      	movne	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d047      	beq.n	80054d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	4b2d      	ldr	r3, [pc, #180]	@ (8005500 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800544c:	4013      	ands	r3, r2
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	6811      	ldr	r1, [r2, #0]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	6892      	ldr	r2, [r2, #8]
 8005456:	430a      	orrs	r2, r1
 8005458:	431a      	orrs	r2, r3
 800545a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800545c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800545e:	e03a      	b.n	80054d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800546a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1e      	ldr	r2, [pc, #120]	@ (80054ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d004      	beq.n	8005480 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1d      	ldr	r2, [pc, #116]	@ (80054f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d10e      	bne.n	800549e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005480:	481a      	ldr	r0, [pc, #104]	@ (80054ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005482:	f7ff fea3 	bl	80051cc <LL_ADC_IsEnabled>
 8005486:	4604      	mov	r4, r0
 8005488:	4819      	ldr	r0, [pc, #100]	@ (80054f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800548a:	f7ff fe9f 	bl	80051cc <LL_ADC_IsEnabled>
 800548e:	4603      	mov	r3, r0
 8005490:	4323      	orrs	r3, r4
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	e008      	b.n	80054b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800549e:	4817      	ldr	r0, [pc, #92]	@ (80054fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80054a0:	f7ff fe94 	bl	80051cc <LL_ADC_IsEnabled>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bf0c      	ite	eq
 80054aa:	2301      	moveq	r3, #1
 80054ac:	2300      	movne	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d010      	beq.n	80054d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	4b11      	ldr	r3, [pc, #68]	@ (8005500 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054be:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054c0:	e009      	b.n	80054d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c6:	f043 0220 	orr.w	r2, r3, #32
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80054d4:	e000      	b.n	80054d8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054d6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80054e0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	377c      	adds	r7, #124	@ 0x7c
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd90      	pop	{r4, r7, pc}
 80054ec:	40022000 	.word	0x40022000
 80054f0:	40022100 	.word	0x40022100
 80054f4:	40022300 	.word	0x40022300
 80054f8:	58026300 	.word	0x58026300
 80054fc:	58026000 	.word	0x58026000
 8005500:	fffff0e0 	.word	0xfffff0e0

08005504 <__NVIC_SetPriorityGrouping>:
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005514:	4b0b      	ldr	r3, [pc, #44]	@ (8005544 <__NVIC_SetPriorityGrouping+0x40>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005520:	4013      	ands	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800552c:	4b06      	ldr	r3, [pc, #24]	@ (8005548 <__NVIC_SetPriorityGrouping+0x44>)
 800552e:	4313      	orrs	r3, r2
 8005530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005532:	4a04      	ldr	r2, [pc, #16]	@ (8005544 <__NVIC_SetPriorityGrouping+0x40>)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	60d3      	str	r3, [r2, #12]
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	e000ed00 	.word	0xe000ed00
 8005548:	05fa0000 	.word	0x05fa0000

0800554c <__NVIC_GetPriorityGrouping>:
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005550:	4b04      	ldr	r3, [pc, #16]	@ (8005564 <__NVIC_GetPriorityGrouping+0x18>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	0a1b      	lsrs	r3, r3, #8
 8005556:	f003 0307 	and.w	r3, r3, #7
}
 800555a:	4618      	mov	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	e000ed00 	.word	0xe000ed00

08005568 <__NVIC_EnableIRQ>:
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	4603      	mov	r3, r0
 8005570:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005576:	2b00      	cmp	r3, #0
 8005578:	db0b      	blt.n	8005592 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	f003 021f 	and.w	r2, r3, #31
 8005580:	4907      	ldr	r1, [pc, #28]	@ (80055a0 <__NVIC_EnableIRQ+0x38>)
 8005582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	2001      	movs	r0, #1
 800558a:	fa00 f202 	lsl.w	r2, r0, r2
 800558e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	e000e100 	.word	0xe000e100

080055a4 <__NVIC_SetPriority>:
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	6039      	str	r1, [r7, #0]
 80055ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80055b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	db0a      	blt.n	80055ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	490c      	ldr	r1, [pc, #48]	@ (80055f0 <__NVIC_SetPriority+0x4c>)
 80055be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055c2:	0112      	lsls	r2, r2, #4
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	440b      	add	r3, r1
 80055c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80055cc:	e00a      	b.n	80055e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	4908      	ldr	r1, [pc, #32]	@ (80055f4 <__NVIC_SetPriority+0x50>)
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	3b04      	subs	r3, #4
 80055dc:	0112      	lsls	r2, r2, #4
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	440b      	add	r3, r1
 80055e2:	761a      	strb	r2, [r3, #24]
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	e000e100 	.word	0xe000e100
 80055f4:	e000ed00 	.word	0xe000ed00

080055f8 <NVIC_EncodePriority>:
{
 80055f8:	b480      	push	{r7}
 80055fa:	b089      	sub	sp, #36	@ 0x24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f1c3 0307 	rsb	r3, r3, #7
 8005612:	2b04      	cmp	r3, #4
 8005614:	bf28      	it	cs
 8005616:	2304      	movcs	r3, #4
 8005618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	3304      	adds	r3, #4
 800561e:	2b06      	cmp	r3, #6
 8005620:	d902      	bls.n	8005628 <NVIC_EncodePriority+0x30>
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	3b03      	subs	r3, #3
 8005626:	e000      	b.n	800562a <NVIC_EncodePriority+0x32>
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800562c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43da      	mvns	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	401a      	ands	r2, r3
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005640:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	43d9      	mvns	r1, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005650:	4313      	orrs	r3, r2
}
 8005652:	4618      	mov	r0, r3
 8005654:	3724      	adds	r7, #36	@ 0x24
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3b01      	subs	r3, #1
 800566c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005670:	d301      	bcc.n	8005676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005672:	2301      	movs	r3, #1
 8005674:	e00f      	b.n	8005696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005676:	4a0a      	ldr	r2, [pc, #40]	@ (80056a0 <SysTick_Config+0x40>)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3b01      	subs	r3, #1
 800567c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800567e:	210f      	movs	r1, #15
 8005680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005684:	f7ff ff8e 	bl	80055a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005688:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <SysTick_Config+0x40>)
 800568a:	2200      	movs	r2, #0
 800568c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800568e:	4b04      	ldr	r3, [pc, #16]	@ (80056a0 <SysTick_Config+0x40>)
 8005690:	2207      	movs	r2, #7
 8005692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	e000e010 	.word	0xe000e010

080056a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff ff29 	bl	8005504 <__NVIC_SetPriorityGrouping>
}
 80056b2:	bf00      	nop
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b086      	sub	sp, #24
 80056be:	af00      	add	r7, sp, #0
 80056c0:	4603      	mov	r3, r0
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056c8:	f7ff ff40 	bl	800554c <__NVIC_GetPriorityGrouping>
 80056cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	6978      	ldr	r0, [r7, #20]
 80056d4:	f7ff ff90 	bl	80055f8 <NVIC_EncodePriority>
 80056d8:	4602      	mov	r2, r0
 80056da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056de:	4611      	mov	r1, r2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff ff5f 	bl	80055a4 <__NVIC_SetPriority>
}
 80056e6:	bf00      	nop
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	4603      	mov	r3, r0
 80056f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff ff33 	bl	8005568 <__NVIC_EnableIRQ>
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff ffa4 	bl	8005660 <SysTick_Config>
 8005718:	4603      	mov	r3, r0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005728:	f3bf 8f5f 	dmb	sy
}
 800572c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800572e:	4b07      	ldr	r3, [pc, #28]	@ (800574c <HAL_MPU_Disable+0x28>)
 8005730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005732:	4a06      	ldr	r2, [pc, #24]	@ (800574c <HAL_MPU_Disable+0x28>)
 8005734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005738:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800573a:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <HAL_MPU_Disable+0x2c>)
 800573c:	2200      	movs	r2, #0
 800573e:	605a      	str	r2, [r3, #4]
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	e000ed00 	.word	0xe000ed00
 8005750:	e000ed90 	.word	0xe000ed90

08005754 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800575c:	4a0b      	ldr	r2, [pc, #44]	@ (800578c <HAL_MPU_Enable+0x38>)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005766:	4b0a      	ldr	r3, [pc, #40]	@ (8005790 <HAL_MPU_Enable+0x3c>)
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	4a09      	ldr	r2, [pc, #36]	@ (8005790 <HAL_MPU_Enable+0x3c>)
 800576c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005770:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005772:	f3bf 8f4f 	dsb	sy
}
 8005776:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005778:	f3bf 8f6f 	isb	sy
}
 800577c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	e000ed90 	.word	0xe000ed90
 8005790:	e000ed00 	.word	0xe000ed00

08005794 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	785a      	ldrb	r2, [r3, #1]
 80057a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005818 <HAL_MPU_ConfigRegion+0x84>)
 80057a2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d029      	beq.n	8005800 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80057ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005818 <HAL_MPU_ConfigRegion+0x84>)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	7b1b      	ldrb	r3, [r3, #12]
 80057b8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	7adb      	ldrb	r3, [r3, #11]
 80057be:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80057c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	7a9b      	ldrb	r3, [r3, #10]
 80057c6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80057c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	7b5b      	ldrb	r3, [r3, #13]
 80057ce:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80057d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	7b9b      	ldrb	r3, [r3, #14]
 80057d6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80057d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	7bdb      	ldrb	r3, [r3, #15]
 80057de:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80057e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	7a5b      	ldrb	r3, [r3, #9]
 80057e6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80057e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	7a1b      	ldrb	r3, [r3, #8]
 80057ee:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80057f0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	7812      	ldrb	r2, [r2, #0]
 80057f6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80057f8:	4a07      	ldr	r2, [pc, #28]	@ (8005818 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80057fa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80057fc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80057fe:	e005      	b.n	800580c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005800:	4b05      	ldr	r3, [pc, #20]	@ (8005818 <HAL_MPU_ConfigRegion+0x84>)
 8005802:	2200      	movs	r2, #0
 8005804:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005806:	4b04      	ldr	r3, [pc, #16]	@ (8005818 <HAL_MPU_ConfigRegion+0x84>)
 8005808:	2200      	movs	r2, #0
 800580a:	611a      	str	r2, [r3, #16]
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	e000ed90 	.word	0xe000ed90

0800581c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e014      	b.n	8005858 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	791b      	ldrb	r3, [r3, #4]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d105      	bne.n	8005844 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fb fda2 	bl	8001388 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	795b      	ldrb	r3, [r3, #5]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_DAC_Start_DMA+0x1e>
 800587a:	2302      	movs	r3, #2
 800587c:	e0ab      	b.n	80059d6 <HAL_DAC_Start_DMA+0x176>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2202      	movs	r2, #2
 8005888:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d12f      	bne.n	80058f0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4a52      	ldr	r2, [pc, #328]	@ (80059e0 <HAL_DAC_Start_DMA+0x180>)
 8005896:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	4a51      	ldr	r2, [pc, #324]	@ (80059e4 <HAL_DAC_Start_DMA+0x184>)
 800589e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4a50      	ldr	r2, [pc, #320]	@ (80059e8 <HAL_DAC_Start_DMA+0x188>)
 80058a6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058b6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d013      	beq.n	80058e6 <HAL_DAC_Start_DMA+0x86>
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d845      	bhi.n	8005950 <HAL_DAC_Start_DMA+0xf0>
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_DAC_Start_DMA+0x72>
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d005      	beq.n	80058dc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80058d0:	e03e      	b.n	8005950 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	613b      	str	r3, [r7, #16]
        break;
 80058da:	e03c      	b.n	8005956 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	330c      	adds	r3, #12
 80058e2:	613b      	str	r3, [r7, #16]
        break;
 80058e4:	e037      	b.n	8005956 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3310      	adds	r3, #16
 80058ec:	613b      	str	r3, [r7, #16]
        break;
 80058ee:	e032      	b.n	8005956 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4a3d      	ldr	r2, [pc, #244]	@ (80059ec <HAL_DAC_Start_DMA+0x18c>)
 80058f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4a3c      	ldr	r2, [pc, #240]	@ (80059f0 <HAL_DAC_Start_DMA+0x190>)
 80058fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	4a3b      	ldr	r2, [pc, #236]	@ (80059f4 <HAL_DAC_Start_DMA+0x194>)
 8005906:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005916:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	2b08      	cmp	r3, #8
 800591c:	d013      	beq.n	8005946 <HAL_DAC_Start_DMA+0xe6>
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	2b08      	cmp	r3, #8
 8005922:	d817      	bhi.n	8005954 <HAL_DAC_Start_DMA+0xf4>
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_DAC_Start_DMA+0xd2>
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	2b04      	cmp	r3, #4
 800592e:	d005      	beq.n	800593c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8005930:	e010      	b.n	8005954 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3314      	adds	r3, #20
 8005938:	613b      	str	r3, [r7, #16]
        break;
 800593a:	e00c      	b.n	8005956 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3318      	adds	r3, #24
 8005942:	613b      	str	r3, [r7, #16]
        break;
 8005944:	e007      	b.n	8005956 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	331c      	adds	r3, #28
 800594c:	613b      	str	r3, [r7, #16]
        break;
 800594e:	e002      	b.n	8005956 <HAL_DAC_Start_DMA+0xf6>
        break;
 8005950:	bf00      	nop
 8005952:	e000      	b.n	8005956 <HAL_DAC_Start_DMA+0xf6>
        break;
 8005954:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d111      	bne.n	8005980 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800596a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6898      	ldr	r0, [r3, #8]
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	f000 ff37 	bl	80067e8 <HAL_DMA_Start_IT>
 800597a:	4603      	mov	r3, r0
 800597c:	75fb      	strb	r3, [r7, #23]
 800597e:	e010      	b.n	80059a2 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800598e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68d8      	ldr	r0, [r3, #12]
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	f000 ff25 	bl	80067e8 <HAL_DMA_Start_IT>
 800599e:	4603      	mov	r3, r0
 80059a0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10c      	bne.n	80059c8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6819      	ldr	r1, [r3, #0]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2201      	movs	r2, #1
 80059bc:	409a      	lsls	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	e005      	b.n	80059d4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f043 0204 	orr.w	r2, r3, #4
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	08005cb1 	.word	0x08005cb1
 80059e4:	08005cd3 	.word	0x08005cd3
 80059e8:	08005cef 	.word	0x08005cef
 80059ec:	08005d59 	.word	0x08005d59
 80059f0:	08005d7b 	.word	0x08005d7b
 80059f4:	08005d97 	.word	0x08005d97

080059f8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	795b      	ldrb	r3, [r3, #5]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_DAC_ConfigChannel+0x18>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e12a      	b.n	8005ca2 <HAL_DAC_ConfigChannel+0x26e>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2202      	movs	r2, #2
 8005a56:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	f040 8081 	bne.w	8005b64 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005a62:	f7fd feaf 	bl	80037c4 <HAL_GetTick>
 8005a66:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d140      	bne.n	8005af0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a6e:	e018      	b.n	8005aa2 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a70:	f7fd fea8 	bl	80037c4 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d911      	bls.n	8005aa2 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a84:	4b89      	ldr	r3, [pc, #548]	@ (8005cac <HAL_DAC_ConfigChannel+0x278>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f043 0208 	orr.w	r2, r3, #8
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e0ff      	b.n	8005ca2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aa8:	4b80      	ldr	r3, [pc, #512]	@ (8005cac <HAL_DAC_ConfigChannel+0x278>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1df      	bne.n	8005a70 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	f7fd fe93 	bl	80037dc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	6992      	ldr	r2, [r2, #24]
 8005abe:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ac0:	e023      	b.n	8005b0a <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005ac2:	f7fd fe7f 	bl	80037c4 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d90f      	bls.n	8005af0 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da0a      	bge.n	8005af0 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f043 0208 	orr.w	r2, r3, #8
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2203      	movs	r2, #3
 8005aea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e0d8      	b.n	8005ca2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	dbe3      	blt.n	8005ac2 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8005afa:	2001      	movs	r0, #1
 8005afc:	f7fd fe6e 	bl	80037dc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	6992      	ldr	r2, [r2, #24]
 8005b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	ea02 0103 	and.w	r1, r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	21ff      	movs	r1, #255	@ 0xff
 8005b46:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	ea02 0103 	and.w	r1, r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6a1a      	ldr	r2, [r3, #32]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	409a      	lsls	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d11d      	bne.n	8005ba8 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	221f      	movs	r2, #31
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	43db      	mvns	r3, r3
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4013      	ands	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bae:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f003 0310 	and.w	r3, r3, #16
 8005bb6:	2207      	movs	r2, #7
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d102      	bne.n	8005bd2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	e00f      	b.n	8005bf2 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d102      	bne.n	8005be0 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	61fb      	str	r3, [r7, #28]
 8005bde:	e008      	b.n	8005bf2 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005be8:	2301      	movs	r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	e001      	b.n	8005bf2 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6819      	ldr	r1, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	43da      	mvns	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	400a      	ands	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4013      	ands	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f003 0310 	and.w	r3, r3, #16
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6819      	ldr	r1, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	22c0      	movs	r2, #192	@ 0xc0
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	43da      	mvns	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	400a      	ands	r2, r1
 8005c92:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20008000 	.word	0x20008000

08005cb0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff fe9a 	bl	80059f8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	711a      	strb	r2, [r3, #4]
}
 8005cca:	bf00      	nop
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cde:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff fe93 	bl	8005a0c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f043 0204 	orr.w	r2, r3, #4
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff fe89 	bl	8005a20 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	711a      	strb	r2, [r3, #4]
}
 8005d14:	bf00      	nop
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d64:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f7ff ffd8 	bl	8005d1c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	711a      	strb	r2, [r3, #4]
}
 8005d72:	bf00      	nop
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d86:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7ff ffd1 	bl	8005d30 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005d8e:	bf00      	nop
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f043 0204 	orr.w	r2, r3, #4
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f7ff ffc7 	bl	8005d44 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	711a      	strb	r2, [r3, #4]
}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005dcc:	f7fd fcfa 	bl	80037c4 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e316      	b.n	800640a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a66      	ldr	r2, [pc, #408]	@ (8005f7c <HAL_DMA_Init+0x1b8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d04a      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a65      	ldr	r2, [pc, #404]	@ (8005f80 <HAL_DMA_Init+0x1bc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d045      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a63      	ldr	r2, [pc, #396]	@ (8005f84 <HAL_DMA_Init+0x1c0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d040      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a62      	ldr	r2, [pc, #392]	@ (8005f88 <HAL_DMA_Init+0x1c4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d03b      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a60      	ldr	r2, [pc, #384]	@ (8005f8c <HAL_DMA_Init+0x1c8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d036      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a5f      	ldr	r2, [pc, #380]	@ (8005f90 <HAL_DMA_Init+0x1cc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d031      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a5d      	ldr	r2, [pc, #372]	@ (8005f94 <HAL_DMA_Init+0x1d0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d02c      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a5c      	ldr	r2, [pc, #368]	@ (8005f98 <HAL_DMA_Init+0x1d4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d027      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a5a      	ldr	r2, [pc, #360]	@ (8005f9c <HAL_DMA_Init+0x1d8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d022      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a59      	ldr	r2, [pc, #356]	@ (8005fa0 <HAL_DMA_Init+0x1dc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d01d      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a57      	ldr	r2, [pc, #348]	@ (8005fa4 <HAL_DMA_Init+0x1e0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d018      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a56      	ldr	r2, [pc, #344]	@ (8005fa8 <HAL_DMA_Init+0x1e4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d013      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a54      	ldr	r2, [pc, #336]	@ (8005fac <HAL_DMA_Init+0x1e8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00e      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a53      	ldr	r2, [pc, #332]	@ (8005fb0 <HAL_DMA_Init+0x1ec>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d009      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a51      	ldr	r2, [pc, #324]	@ (8005fb4 <HAL_DMA_Init+0x1f0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d004      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a50      	ldr	r2, [pc, #320]	@ (8005fb8 <HAL_DMA_Init+0x1f4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d101      	bne.n	8005e80 <HAL_DMA_Init+0xbc>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <HAL_DMA_Init+0xbe>
 8005e80:	2300      	movs	r3, #0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 813b 	beq.w	80060fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a37      	ldr	r2, [pc, #220]	@ (8005f7c <HAL_DMA_Init+0x1b8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d04a      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a36      	ldr	r2, [pc, #216]	@ (8005f80 <HAL_DMA_Init+0x1bc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d045      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a34      	ldr	r2, [pc, #208]	@ (8005f84 <HAL_DMA_Init+0x1c0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d040      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a33      	ldr	r2, [pc, #204]	@ (8005f88 <HAL_DMA_Init+0x1c4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d03b      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a31      	ldr	r2, [pc, #196]	@ (8005f8c <HAL_DMA_Init+0x1c8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d036      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a30      	ldr	r2, [pc, #192]	@ (8005f90 <HAL_DMA_Init+0x1cc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d031      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8005f94 <HAL_DMA_Init+0x1d0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d02c      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8005f98 <HAL_DMA_Init+0x1d4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d027      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2b      	ldr	r2, [pc, #172]	@ (8005f9c <HAL_DMA_Init+0x1d8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d022      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa0 <HAL_DMA_Init+0x1dc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d01d      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a28      	ldr	r2, [pc, #160]	@ (8005fa4 <HAL_DMA_Init+0x1e0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d018      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a27      	ldr	r2, [pc, #156]	@ (8005fa8 <HAL_DMA_Init+0x1e4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a25      	ldr	r2, [pc, #148]	@ (8005fac <HAL_DMA_Init+0x1e8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00e      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a24      	ldr	r2, [pc, #144]	@ (8005fb0 <HAL_DMA_Init+0x1ec>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d009      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a22      	ldr	r2, [pc, #136]	@ (8005fb4 <HAL_DMA_Init+0x1f0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a21      	ldr	r2, [pc, #132]	@ (8005fb8 <HAL_DMA_Init+0x1f4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d108      	bne.n	8005f4a <HAL_DMA_Init+0x186>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	e007      	b.n	8005f5a <HAL_DMA_Init+0x196>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f5a:	e02f      	b.n	8005fbc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f5c:	f7fd fc32 	bl	80037c4 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d928      	bls.n	8005fbc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2203      	movs	r2, #3
 8005f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e246      	b.n	800640a <HAL_DMA_Init+0x646>
 8005f7c:	40020010 	.word	0x40020010
 8005f80:	40020028 	.word	0x40020028
 8005f84:	40020040 	.word	0x40020040
 8005f88:	40020058 	.word	0x40020058
 8005f8c:	40020070 	.word	0x40020070
 8005f90:	40020088 	.word	0x40020088
 8005f94:	400200a0 	.word	0x400200a0
 8005f98:	400200b8 	.word	0x400200b8
 8005f9c:	40020410 	.word	0x40020410
 8005fa0:	40020428 	.word	0x40020428
 8005fa4:	40020440 	.word	0x40020440
 8005fa8:	40020458 	.word	0x40020458
 8005fac:	40020470 	.word	0x40020470
 8005fb0:	40020488 	.word	0x40020488
 8005fb4:	400204a0 	.word	0x400204a0
 8005fb8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1c8      	bne.n	8005f5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4b83      	ldr	r3, [pc, #524]	@ (80061e4 <HAL_DMA_Init+0x420>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005fe2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ffa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	2b04      	cmp	r3, #4
 800600e:	d107      	bne.n	8006020 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006018:	4313      	orrs	r3, r2
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006020:	4b71      	ldr	r3, [pc, #452]	@ (80061e8 <HAL_DMA_Init+0x424>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	4b71      	ldr	r3, [pc, #452]	@ (80061ec <HAL_DMA_Init+0x428>)
 8006026:	4013      	ands	r3, r2
 8006028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800602c:	d328      	bcc.n	8006080 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b28      	cmp	r3, #40	@ 0x28
 8006034:	d903      	bls.n	800603e <HAL_DMA_Init+0x27a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b2e      	cmp	r3, #46	@ 0x2e
 800603c:	d917      	bls.n	800606e <HAL_DMA_Init+0x2aa>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b3e      	cmp	r3, #62	@ 0x3e
 8006044:	d903      	bls.n	800604e <HAL_DMA_Init+0x28a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b42      	cmp	r3, #66	@ 0x42
 800604c:	d90f      	bls.n	800606e <HAL_DMA_Init+0x2aa>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b46      	cmp	r3, #70	@ 0x46
 8006054:	d903      	bls.n	800605e <HAL_DMA_Init+0x29a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b48      	cmp	r3, #72	@ 0x48
 800605c:	d907      	bls.n	800606e <HAL_DMA_Init+0x2aa>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b4e      	cmp	r3, #78	@ 0x4e
 8006064:	d905      	bls.n	8006072 <HAL_DMA_Init+0x2ae>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b52      	cmp	r3, #82	@ 0x52
 800606c:	d801      	bhi.n	8006072 <HAL_DMA_Init+0x2ae>
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <HAL_DMA_Init+0x2b0>
 8006072:	2300      	movs	r3, #0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800607e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f023 0307 	bic.w	r3, r3, #7
 8006096:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d117      	bne.n	80060da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00e      	beq.n	80060da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f002 fce9 	bl	8008a94 <DMA_CheckFifoParam>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2240      	movs	r2, #64	@ 0x40
 80060cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e197      	b.n	800640a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f002 fc24 	bl	8008930 <DMA_CalcBaseAndBitshift>
 80060e8:	4603      	mov	r3, r0
 80060ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	223f      	movs	r2, #63	@ 0x3f
 80060f6:	409a      	lsls	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	609a      	str	r2, [r3, #8]
 80060fc:	e0cd      	b.n	800629a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a3b      	ldr	r2, [pc, #236]	@ (80061f0 <HAL_DMA_Init+0x42c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d022      	beq.n	800614e <HAL_DMA_Init+0x38a>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a39      	ldr	r2, [pc, #228]	@ (80061f4 <HAL_DMA_Init+0x430>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d01d      	beq.n	800614e <HAL_DMA_Init+0x38a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a38      	ldr	r2, [pc, #224]	@ (80061f8 <HAL_DMA_Init+0x434>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d018      	beq.n	800614e <HAL_DMA_Init+0x38a>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a36      	ldr	r2, [pc, #216]	@ (80061fc <HAL_DMA_Init+0x438>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d013      	beq.n	800614e <HAL_DMA_Init+0x38a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a35      	ldr	r2, [pc, #212]	@ (8006200 <HAL_DMA_Init+0x43c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00e      	beq.n	800614e <HAL_DMA_Init+0x38a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a33      	ldr	r2, [pc, #204]	@ (8006204 <HAL_DMA_Init+0x440>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d009      	beq.n	800614e <HAL_DMA_Init+0x38a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a32      	ldr	r2, [pc, #200]	@ (8006208 <HAL_DMA_Init+0x444>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d004      	beq.n	800614e <HAL_DMA_Init+0x38a>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a30      	ldr	r2, [pc, #192]	@ (800620c <HAL_DMA_Init+0x448>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d101      	bne.n	8006152 <HAL_DMA_Init+0x38e>
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <HAL_DMA_Init+0x390>
 8006152:	2300      	movs	r3, #0
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8097 	beq.w	8006288 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a24      	ldr	r2, [pc, #144]	@ (80061f0 <HAL_DMA_Init+0x42c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d021      	beq.n	80061a8 <HAL_DMA_Init+0x3e4>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a22      	ldr	r2, [pc, #136]	@ (80061f4 <HAL_DMA_Init+0x430>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d01c      	beq.n	80061a8 <HAL_DMA_Init+0x3e4>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a21      	ldr	r2, [pc, #132]	@ (80061f8 <HAL_DMA_Init+0x434>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d017      	beq.n	80061a8 <HAL_DMA_Init+0x3e4>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a1f      	ldr	r2, [pc, #124]	@ (80061fc <HAL_DMA_Init+0x438>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d012      	beq.n	80061a8 <HAL_DMA_Init+0x3e4>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1e      	ldr	r2, [pc, #120]	@ (8006200 <HAL_DMA_Init+0x43c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00d      	beq.n	80061a8 <HAL_DMA_Init+0x3e4>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1c      	ldr	r2, [pc, #112]	@ (8006204 <HAL_DMA_Init+0x440>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d008      	beq.n	80061a8 <HAL_DMA_Init+0x3e4>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1b      	ldr	r2, [pc, #108]	@ (8006208 <HAL_DMA_Init+0x444>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <HAL_DMA_Init+0x3e4>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a19      	ldr	r2, [pc, #100]	@ (800620c <HAL_DMA_Init+0x448>)
 80061a6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4b13      	ldr	r3, [pc, #76]	@ (8006210 <HAL_DMA_Init+0x44c>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	2b40      	cmp	r3, #64	@ 0x40
 80061ce:	d021      	beq.n	8006214 <HAL_DMA_Init+0x450>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b80      	cmp	r3, #128	@ 0x80
 80061d6:	d102      	bne.n	80061de <HAL_DMA_Init+0x41a>
 80061d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80061dc:	e01b      	b.n	8006216 <HAL_DMA_Init+0x452>
 80061de:	2300      	movs	r3, #0
 80061e0:	e019      	b.n	8006216 <HAL_DMA_Init+0x452>
 80061e2:	bf00      	nop
 80061e4:	fe10803f 	.word	0xfe10803f
 80061e8:	5c001000 	.word	0x5c001000
 80061ec:	ffff0000 	.word	0xffff0000
 80061f0:	58025408 	.word	0x58025408
 80061f4:	5802541c 	.word	0x5802541c
 80061f8:	58025430 	.word	0x58025430
 80061fc:	58025444 	.word	0x58025444
 8006200:	58025458 	.word	0x58025458
 8006204:	5802546c 	.word	0x5802546c
 8006208:	58025480 	.word	0x58025480
 800620c:	58025494 	.word	0x58025494
 8006210:	fffe000f 	.word	0xfffe000f
 8006214:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	68d2      	ldr	r2, [r2, #12]
 800621a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800621c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006224:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800622c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006234:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800623c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006244:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	461a      	mov	r2, r3
 800625a:	4b6e      	ldr	r3, [pc, #440]	@ (8006414 <HAL_DMA_Init+0x650>)
 800625c:	4413      	add	r3, r2
 800625e:	4a6e      	ldr	r2, [pc, #440]	@ (8006418 <HAL_DMA_Init+0x654>)
 8006260:	fba2 2303 	umull	r2, r3, r2, r3
 8006264:	091b      	lsrs	r3, r3, #4
 8006266:	009a      	lsls	r2, r3, #2
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f002 fb5f 	bl	8008930 <DMA_CalcBaseAndBitshift>
 8006272:	4603      	mov	r3, r0
 8006274:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2201      	movs	r2, #1
 8006280:	409a      	lsls	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	605a      	str	r2, [r3, #4]
 8006286:	e008      	b.n	800629a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2240      	movs	r2, #64	@ 0x40
 800628c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2203      	movs	r2, #3
 8006292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e0b7      	b.n	800640a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a5f      	ldr	r2, [pc, #380]	@ (800641c <HAL_DMA_Init+0x658>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d072      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006420 <HAL_DMA_Init+0x65c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d06d      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a5c      	ldr	r2, [pc, #368]	@ (8006424 <HAL_DMA_Init+0x660>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d068      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a5a      	ldr	r2, [pc, #360]	@ (8006428 <HAL_DMA_Init+0x664>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d063      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a59      	ldr	r2, [pc, #356]	@ (800642c <HAL_DMA_Init+0x668>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d05e      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a57      	ldr	r2, [pc, #348]	@ (8006430 <HAL_DMA_Init+0x66c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d059      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a56      	ldr	r2, [pc, #344]	@ (8006434 <HAL_DMA_Init+0x670>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d054      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a54      	ldr	r2, [pc, #336]	@ (8006438 <HAL_DMA_Init+0x674>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d04f      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a53      	ldr	r2, [pc, #332]	@ (800643c <HAL_DMA_Init+0x678>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d04a      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a51      	ldr	r2, [pc, #324]	@ (8006440 <HAL_DMA_Init+0x67c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d045      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a50      	ldr	r2, [pc, #320]	@ (8006444 <HAL_DMA_Init+0x680>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d040      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a4e      	ldr	r2, [pc, #312]	@ (8006448 <HAL_DMA_Init+0x684>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d03b      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a4d      	ldr	r2, [pc, #308]	@ (800644c <HAL_DMA_Init+0x688>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d036      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a4b      	ldr	r2, [pc, #300]	@ (8006450 <HAL_DMA_Init+0x68c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d031      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a4a      	ldr	r2, [pc, #296]	@ (8006454 <HAL_DMA_Init+0x690>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d02c      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a48      	ldr	r2, [pc, #288]	@ (8006458 <HAL_DMA_Init+0x694>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d027      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a47      	ldr	r2, [pc, #284]	@ (800645c <HAL_DMA_Init+0x698>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d022      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a45      	ldr	r2, [pc, #276]	@ (8006460 <HAL_DMA_Init+0x69c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01d      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a44      	ldr	r2, [pc, #272]	@ (8006464 <HAL_DMA_Init+0x6a0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d018      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a42      	ldr	r2, [pc, #264]	@ (8006468 <HAL_DMA_Init+0x6a4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a41      	ldr	r2, [pc, #260]	@ (800646c <HAL_DMA_Init+0x6a8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00e      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a3f      	ldr	r2, [pc, #252]	@ (8006470 <HAL_DMA_Init+0x6ac>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d009      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a3e      	ldr	r2, [pc, #248]	@ (8006474 <HAL_DMA_Init+0x6b0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d004      	beq.n	800638a <HAL_DMA_Init+0x5c6>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a3c      	ldr	r2, [pc, #240]	@ (8006478 <HAL_DMA_Init+0x6b4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d101      	bne.n	800638e <HAL_DMA_Init+0x5ca>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <HAL_DMA_Init+0x5cc>
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d032      	beq.n	80063fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f002 fbf9 	bl	8008b8c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b80      	cmp	r3, #128	@ 0x80
 80063a0:	d102      	bne.n	80063a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80063bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d010      	beq.n	80063e8 <HAL_DMA_Init+0x624>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d80c      	bhi.n	80063e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f002 fc76 	bl	8008cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80063e4:	605a      	str	r2, [r3, #4]
 80063e6:	e008      	b.n	80063fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	a7fdabf8 	.word	0xa7fdabf8
 8006418:	cccccccd 	.word	0xcccccccd
 800641c:	40020010 	.word	0x40020010
 8006420:	40020028 	.word	0x40020028
 8006424:	40020040 	.word	0x40020040
 8006428:	40020058 	.word	0x40020058
 800642c:	40020070 	.word	0x40020070
 8006430:	40020088 	.word	0x40020088
 8006434:	400200a0 	.word	0x400200a0
 8006438:	400200b8 	.word	0x400200b8
 800643c:	40020410 	.word	0x40020410
 8006440:	40020428 	.word	0x40020428
 8006444:	40020440 	.word	0x40020440
 8006448:	40020458 	.word	0x40020458
 800644c:	40020470 	.word	0x40020470
 8006450:	40020488 	.word	0x40020488
 8006454:	400204a0 	.word	0x400204a0
 8006458:	400204b8 	.word	0x400204b8
 800645c:	58025408 	.word	0x58025408
 8006460:	5802541c 	.word	0x5802541c
 8006464:	58025430 	.word	0x58025430
 8006468:	58025444 	.word	0x58025444
 800646c:	58025458 	.word	0x58025458
 8006470:	5802546c 	.word	0x5802546c
 8006474:	58025480 	.word	0x58025480
 8006478:	58025494 	.word	0x58025494

0800647c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e1a8      	b.n	80067e0 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a82      	ldr	r2, [pc, #520]	@ (800669c <HAL_DMA_DeInit+0x220>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d04a      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a80      	ldr	r2, [pc, #512]	@ (80066a0 <HAL_DMA_DeInit+0x224>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d045      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a7f      	ldr	r2, [pc, #508]	@ (80066a4 <HAL_DMA_DeInit+0x228>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d040      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a7d      	ldr	r2, [pc, #500]	@ (80066a8 <HAL_DMA_DeInit+0x22c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d03b      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a7c      	ldr	r2, [pc, #496]	@ (80066ac <HAL_DMA_DeInit+0x230>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d036      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a7a      	ldr	r2, [pc, #488]	@ (80066b0 <HAL_DMA_DeInit+0x234>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d031      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a79      	ldr	r2, [pc, #484]	@ (80066b4 <HAL_DMA_DeInit+0x238>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d02c      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a77      	ldr	r2, [pc, #476]	@ (80066b8 <HAL_DMA_DeInit+0x23c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d027      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a76      	ldr	r2, [pc, #472]	@ (80066bc <HAL_DMA_DeInit+0x240>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d022      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a74      	ldr	r2, [pc, #464]	@ (80066c0 <HAL_DMA_DeInit+0x244>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d01d      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a73      	ldr	r2, [pc, #460]	@ (80066c4 <HAL_DMA_DeInit+0x248>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d018      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a71      	ldr	r2, [pc, #452]	@ (80066c8 <HAL_DMA_DeInit+0x24c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a70      	ldr	r2, [pc, #448]	@ (80066cc <HAL_DMA_DeInit+0x250>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00e      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a6e      	ldr	r2, [pc, #440]	@ (80066d0 <HAL_DMA_DeInit+0x254>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d009      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a6d      	ldr	r2, [pc, #436]	@ (80066d4 <HAL_DMA_DeInit+0x258>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d004      	beq.n	800652e <HAL_DMA_DeInit+0xb2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a6b      	ldr	r2, [pc, #428]	@ (80066d8 <HAL_DMA_DeInit+0x25c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d108      	bne.n	8006540 <HAL_DMA_DeInit+0xc4>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0201 	bic.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e007      	b.n	8006550 <HAL_DMA_DeInit+0xd4>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a51      	ldr	r2, [pc, #324]	@ (800669c <HAL_DMA_DeInit+0x220>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d04a      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a50      	ldr	r2, [pc, #320]	@ (80066a0 <HAL_DMA_DeInit+0x224>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d045      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a4e      	ldr	r2, [pc, #312]	@ (80066a4 <HAL_DMA_DeInit+0x228>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d040      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a4d      	ldr	r2, [pc, #308]	@ (80066a8 <HAL_DMA_DeInit+0x22c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d03b      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a4b      	ldr	r2, [pc, #300]	@ (80066ac <HAL_DMA_DeInit+0x230>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d036      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a4a      	ldr	r2, [pc, #296]	@ (80066b0 <HAL_DMA_DeInit+0x234>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d031      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a48      	ldr	r2, [pc, #288]	@ (80066b4 <HAL_DMA_DeInit+0x238>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d02c      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a47      	ldr	r2, [pc, #284]	@ (80066b8 <HAL_DMA_DeInit+0x23c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d027      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a45      	ldr	r2, [pc, #276]	@ (80066bc <HAL_DMA_DeInit+0x240>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d022      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a44      	ldr	r2, [pc, #272]	@ (80066c0 <HAL_DMA_DeInit+0x244>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d01d      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a42      	ldr	r2, [pc, #264]	@ (80066c4 <HAL_DMA_DeInit+0x248>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d018      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a41      	ldr	r2, [pc, #260]	@ (80066c8 <HAL_DMA_DeInit+0x24c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a3f      	ldr	r2, [pc, #252]	@ (80066cc <HAL_DMA_DeInit+0x250>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00e      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a3e      	ldr	r2, [pc, #248]	@ (80066d0 <HAL_DMA_DeInit+0x254>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d009      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a3c      	ldr	r2, [pc, #240]	@ (80066d4 <HAL_DMA_DeInit+0x258>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d004      	beq.n	80065f0 <HAL_DMA_DeInit+0x174>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a3b      	ldr	r2, [pc, #236]	@ (80066d8 <HAL_DMA_DeInit+0x25c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d101      	bne.n	80065f4 <HAL_DMA_DeInit+0x178>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <HAL_DMA_DeInit+0x17a>
 80065f4:	2300      	movs	r3, #0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d025      	beq.n	8006646 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2200      	movs	r2, #0
 8006608:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2200      	movs	r2, #0
 8006618:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2200      	movs	r2, #0
 8006620:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2221      	movs	r2, #33	@ 0x21
 8006628:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f002 f980 	bl	8008930 <DMA_CalcBaseAndBitshift>
 8006630:	4603      	mov	r3, r0
 8006632:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	223f      	movs	r2, #63	@ 0x3f
 800663e:	409a      	lsls	r2, r3
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	609a      	str	r2, [r3, #8]
 8006644:	e081      	b.n	800674a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a24      	ldr	r2, [pc, #144]	@ (80066dc <HAL_DMA_DeInit+0x260>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d022      	beq.n	8006696 <HAL_DMA_DeInit+0x21a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a22      	ldr	r2, [pc, #136]	@ (80066e0 <HAL_DMA_DeInit+0x264>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d01d      	beq.n	8006696 <HAL_DMA_DeInit+0x21a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a21      	ldr	r2, [pc, #132]	@ (80066e4 <HAL_DMA_DeInit+0x268>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d018      	beq.n	8006696 <HAL_DMA_DeInit+0x21a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1f      	ldr	r2, [pc, #124]	@ (80066e8 <HAL_DMA_DeInit+0x26c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <HAL_DMA_DeInit+0x21a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1e      	ldr	r2, [pc, #120]	@ (80066ec <HAL_DMA_DeInit+0x270>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00e      	beq.n	8006696 <HAL_DMA_DeInit+0x21a>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1c      	ldr	r2, [pc, #112]	@ (80066f0 <HAL_DMA_DeInit+0x274>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_DMA_DeInit+0x21a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1b      	ldr	r2, [pc, #108]	@ (80066f4 <HAL_DMA_DeInit+0x278>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_DMA_DeInit+0x21a>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a19      	ldr	r2, [pc, #100]	@ (80066f8 <HAL_DMA_DeInit+0x27c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d132      	bne.n	80066fc <HAL_DMA_DeInit+0x280>
 8006696:	2301      	movs	r3, #1
 8006698:	e031      	b.n	80066fe <HAL_DMA_DeInit+0x282>
 800669a:	bf00      	nop
 800669c:	40020010 	.word	0x40020010
 80066a0:	40020028 	.word	0x40020028
 80066a4:	40020040 	.word	0x40020040
 80066a8:	40020058 	.word	0x40020058
 80066ac:	40020070 	.word	0x40020070
 80066b0:	40020088 	.word	0x40020088
 80066b4:	400200a0 	.word	0x400200a0
 80066b8:	400200b8 	.word	0x400200b8
 80066bc:	40020410 	.word	0x40020410
 80066c0:	40020428 	.word	0x40020428
 80066c4:	40020440 	.word	0x40020440
 80066c8:	40020458 	.word	0x40020458
 80066cc:	40020470 	.word	0x40020470
 80066d0:	40020488 	.word	0x40020488
 80066d4:	400204a0 	.word	0x400204a0
 80066d8:	400204b8 	.word	0x400204b8
 80066dc:	58025408 	.word	0x58025408
 80066e0:	5802541c 	.word	0x5802541c
 80066e4:	58025430 	.word	0x58025430
 80066e8:	58025444 	.word	0x58025444
 80066ec:	58025458 	.word	0x58025458
 80066f0:	5802546c 	.word	0x5802546c
 80066f4:	58025480 	.word	0x58025480
 80066f8:	58025494 	.word	0x58025494
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d021      	beq.n	8006746 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2200      	movs	r2, #0
 8006710:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2200      	movs	r2, #0
 8006718:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2200      	movs	r2, #0
 8006728:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f002 f900 	bl	8008930 <DMA_CalcBaseAndBitshift>
 8006730:	4603      	mov	r3, r0
 8006732:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	2201      	movs	r2, #1
 800673e:	409a      	lsls	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	605a      	str	r2, [r3, #4]
 8006744:	e001      	b.n	800674a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e04a      	b.n	80067e0 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f002 fa1e 	bl	8008b8c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006754:	2b00      	cmp	r3, #0
 8006756:	d008      	beq.n	800676a <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006768:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00f      	beq.n	8006792 <HAL_DMA_DeInit+0x316>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b08      	cmp	r3, #8
 8006778:	d80b      	bhi.n	8006792 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f002 faa0 	bl	8008cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006790:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e226      	b.n	8006c52 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_DMA_Start_IT+0x2a>
 800680e:	2302      	movs	r3, #2
 8006810:	e21f      	b.n	8006c52 <HAL_DMA_Start_IT+0x46a>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b01      	cmp	r3, #1
 8006824:	f040 820a 	bne.w	8006c3c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a68      	ldr	r2, [pc, #416]	@ (80069dc <HAL_DMA_Start_IT+0x1f4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d04a      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a66      	ldr	r2, [pc, #408]	@ (80069e0 <HAL_DMA_Start_IT+0x1f8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d045      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a65      	ldr	r2, [pc, #404]	@ (80069e4 <HAL_DMA_Start_IT+0x1fc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d040      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a63      	ldr	r2, [pc, #396]	@ (80069e8 <HAL_DMA_Start_IT+0x200>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d03b      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a62      	ldr	r2, [pc, #392]	@ (80069ec <HAL_DMA_Start_IT+0x204>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d036      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a60      	ldr	r2, [pc, #384]	@ (80069f0 <HAL_DMA_Start_IT+0x208>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d031      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a5f      	ldr	r2, [pc, #380]	@ (80069f4 <HAL_DMA_Start_IT+0x20c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d02c      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a5d      	ldr	r2, [pc, #372]	@ (80069f8 <HAL_DMA_Start_IT+0x210>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d027      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a5c      	ldr	r2, [pc, #368]	@ (80069fc <HAL_DMA_Start_IT+0x214>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d022      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a5a      	ldr	r2, [pc, #360]	@ (8006a00 <HAL_DMA_Start_IT+0x218>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d01d      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a59      	ldr	r2, [pc, #356]	@ (8006a04 <HAL_DMA_Start_IT+0x21c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d018      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a57      	ldr	r2, [pc, #348]	@ (8006a08 <HAL_DMA_Start_IT+0x220>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a56      	ldr	r2, [pc, #344]	@ (8006a0c <HAL_DMA_Start_IT+0x224>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00e      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a54      	ldr	r2, [pc, #336]	@ (8006a10 <HAL_DMA_Start_IT+0x228>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d009      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a53      	ldr	r2, [pc, #332]	@ (8006a14 <HAL_DMA_Start_IT+0x22c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d004      	beq.n	80068d6 <HAL_DMA_Start_IT+0xee>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a51      	ldr	r2, [pc, #324]	@ (8006a18 <HAL_DMA_Start_IT+0x230>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d108      	bne.n	80068e8 <HAL_DMA_Start_IT+0x100>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0201 	bic.w	r2, r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	e007      	b.n	80068f8 <HAL_DMA_Start_IT+0x110>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0201 	bic.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f001 fe6a 	bl	80085d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a34      	ldr	r2, [pc, #208]	@ (80069dc <HAL_DMA_Start_IT+0x1f4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d04a      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a33      	ldr	r2, [pc, #204]	@ (80069e0 <HAL_DMA_Start_IT+0x1f8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d045      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a31      	ldr	r2, [pc, #196]	@ (80069e4 <HAL_DMA_Start_IT+0x1fc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d040      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a30      	ldr	r2, [pc, #192]	@ (80069e8 <HAL_DMA_Start_IT+0x200>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d03b      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a2e      	ldr	r2, [pc, #184]	@ (80069ec <HAL_DMA_Start_IT+0x204>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d036      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a2d      	ldr	r2, [pc, #180]	@ (80069f0 <HAL_DMA_Start_IT+0x208>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d031      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a2b      	ldr	r2, [pc, #172]	@ (80069f4 <HAL_DMA_Start_IT+0x20c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d02c      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a2a      	ldr	r2, [pc, #168]	@ (80069f8 <HAL_DMA_Start_IT+0x210>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d027      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a28      	ldr	r2, [pc, #160]	@ (80069fc <HAL_DMA_Start_IT+0x214>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d022      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a27      	ldr	r2, [pc, #156]	@ (8006a00 <HAL_DMA_Start_IT+0x218>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d01d      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a25      	ldr	r2, [pc, #148]	@ (8006a04 <HAL_DMA_Start_IT+0x21c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d018      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a24      	ldr	r2, [pc, #144]	@ (8006a08 <HAL_DMA_Start_IT+0x220>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a22      	ldr	r2, [pc, #136]	@ (8006a0c <HAL_DMA_Start_IT+0x224>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00e      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a21      	ldr	r2, [pc, #132]	@ (8006a10 <HAL_DMA_Start_IT+0x228>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1f      	ldr	r2, [pc, #124]	@ (8006a14 <HAL_DMA_Start_IT+0x22c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <HAL_DMA_Start_IT+0x1bc>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1e      	ldr	r2, [pc, #120]	@ (8006a18 <HAL_DMA_Start_IT+0x230>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d101      	bne.n	80069a8 <HAL_DMA_Start_IT+0x1c0>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <HAL_DMA_Start_IT+0x1c2>
 80069a8:	2300      	movs	r3, #0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d036      	beq.n	8006a1c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f023 021e 	bic.w	r2, r3, #30
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0216 	orr.w	r2, r2, #22
 80069c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d03e      	beq.n	8006a48 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f042 0208 	orr.w	r2, r2, #8
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	e035      	b.n	8006a48 <HAL_DMA_Start_IT+0x260>
 80069dc:	40020010 	.word	0x40020010
 80069e0:	40020028 	.word	0x40020028
 80069e4:	40020040 	.word	0x40020040
 80069e8:	40020058 	.word	0x40020058
 80069ec:	40020070 	.word	0x40020070
 80069f0:	40020088 	.word	0x40020088
 80069f4:	400200a0 	.word	0x400200a0
 80069f8:	400200b8 	.word	0x400200b8
 80069fc:	40020410 	.word	0x40020410
 8006a00:	40020428 	.word	0x40020428
 8006a04:	40020440 	.word	0x40020440
 8006a08:	40020458 	.word	0x40020458
 8006a0c:	40020470 	.word	0x40020470
 8006a10:	40020488 	.word	0x40020488
 8006a14:	400204a0 	.word	0x400204a0
 8006a18:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f023 020e 	bic.w	r2, r3, #14
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 020a 	orr.w	r2, r2, #10
 8006a2e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d007      	beq.n	8006a48 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0204 	orr.w	r2, r2, #4
 8006a46:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a83      	ldr	r2, [pc, #524]	@ (8006c5c <HAL_DMA_Start_IT+0x474>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d072      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a82      	ldr	r2, [pc, #520]	@ (8006c60 <HAL_DMA_Start_IT+0x478>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d06d      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a80      	ldr	r2, [pc, #512]	@ (8006c64 <HAL_DMA_Start_IT+0x47c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d068      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a7f      	ldr	r2, [pc, #508]	@ (8006c68 <HAL_DMA_Start_IT+0x480>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d063      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a7d      	ldr	r2, [pc, #500]	@ (8006c6c <HAL_DMA_Start_IT+0x484>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d05e      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a7c      	ldr	r2, [pc, #496]	@ (8006c70 <HAL_DMA_Start_IT+0x488>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d059      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a7a      	ldr	r2, [pc, #488]	@ (8006c74 <HAL_DMA_Start_IT+0x48c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d054      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a79      	ldr	r2, [pc, #484]	@ (8006c78 <HAL_DMA_Start_IT+0x490>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d04f      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a77      	ldr	r2, [pc, #476]	@ (8006c7c <HAL_DMA_Start_IT+0x494>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d04a      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a76      	ldr	r2, [pc, #472]	@ (8006c80 <HAL_DMA_Start_IT+0x498>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d045      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a74      	ldr	r2, [pc, #464]	@ (8006c84 <HAL_DMA_Start_IT+0x49c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d040      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a73      	ldr	r2, [pc, #460]	@ (8006c88 <HAL_DMA_Start_IT+0x4a0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d03b      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a71      	ldr	r2, [pc, #452]	@ (8006c8c <HAL_DMA_Start_IT+0x4a4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d036      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a70      	ldr	r2, [pc, #448]	@ (8006c90 <HAL_DMA_Start_IT+0x4a8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d031      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a6e      	ldr	r2, [pc, #440]	@ (8006c94 <HAL_DMA_Start_IT+0x4ac>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d02c      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a6d      	ldr	r2, [pc, #436]	@ (8006c98 <HAL_DMA_Start_IT+0x4b0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d027      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a6b      	ldr	r2, [pc, #428]	@ (8006c9c <HAL_DMA_Start_IT+0x4b4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d022      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a6a      	ldr	r2, [pc, #424]	@ (8006ca0 <HAL_DMA_Start_IT+0x4b8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d01d      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a68      	ldr	r2, [pc, #416]	@ (8006ca4 <HAL_DMA_Start_IT+0x4bc>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d018      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a67      	ldr	r2, [pc, #412]	@ (8006ca8 <HAL_DMA_Start_IT+0x4c0>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d013      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a65      	ldr	r2, [pc, #404]	@ (8006cac <HAL_DMA_Start_IT+0x4c4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00e      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a64      	ldr	r2, [pc, #400]	@ (8006cb0 <HAL_DMA_Start_IT+0x4c8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d009      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a62      	ldr	r2, [pc, #392]	@ (8006cb4 <HAL_DMA_Start_IT+0x4cc>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d004      	beq.n	8006b38 <HAL_DMA_Start_IT+0x350>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a61      	ldr	r2, [pc, #388]	@ (8006cb8 <HAL_DMA_Start_IT+0x4d0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d101      	bne.n	8006b3c <HAL_DMA_Start_IT+0x354>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e000      	b.n	8006b3e <HAL_DMA_Start_IT+0x356>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01a      	beq.n	8006b78 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d007      	beq.n	8006b60 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b5e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d007      	beq.n	8006b78 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b76:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a37      	ldr	r2, [pc, #220]	@ (8006c5c <HAL_DMA_Start_IT+0x474>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d04a      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a36      	ldr	r2, [pc, #216]	@ (8006c60 <HAL_DMA_Start_IT+0x478>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d045      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a34      	ldr	r2, [pc, #208]	@ (8006c64 <HAL_DMA_Start_IT+0x47c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d040      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a33      	ldr	r2, [pc, #204]	@ (8006c68 <HAL_DMA_Start_IT+0x480>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d03b      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a31      	ldr	r2, [pc, #196]	@ (8006c6c <HAL_DMA_Start_IT+0x484>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d036      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a30      	ldr	r2, [pc, #192]	@ (8006c70 <HAL_DMA_Start_IT+0x488>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d031      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8006c74 <HAL_DMA_Start_IT+0x48c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d02c      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8006c78 <HAL_DMA_Start_IT+0x490>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d027      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8006c7c <HAL_DMA_Start_IT+0x494>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d022      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8006c80 <HAL_DMA_Start_IT+0x498>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d01d      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a28      	ldr	r2, [pc, #160]	@ (8006c84 <HAL_DMA_Start_IT+0x49c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d018      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a27      	ldr	r2, [pc, #156]	@ (8006c88 <HAL_DMA_Start_IT+0x4a0>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d013      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a25      	ldr	r2, [pc, #148]	@ (8006c8c <HAL_DMA_Start_IT+0x4a4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00e      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a24      	ldr	r2, [pc, #144]	@ (8006c90 <HAL_DMA_Start_IT+0x4a8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d009      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a22      	ldr	r2, [pc, #136]	@ (8006c94 <HAL_DMA_Start_IT+0x4ac>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d004      	beq.n	8006c18 <HAL_DMA_Start_IT+0x430>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a21      	ldr	r2, [pc, #132]	@ (8006c98 <HAL_DMA_Start_IT+0x4b0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d108      	bne.n	8006c2a <HAL_DMA_Start_IT+0x442>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e012      	b.n	8006c50 <HAL_DMA_Start_IT+0x468>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0201 	orr.w	r2, r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	e009      	b.n	8006c50 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40020010 	.word	0x40020010
 8006c60:	40020028 	.word	0x40020028
 8006c64:	40020040 	.word	0x40020040
 8006c68:	40020058 	.word	0x40020058
 8006c6c:	40020070 	.word	0x40020070
 8006c70:	40020088 	.word	0x40020088
 8006c74:	400200a0 	.word	0x400200a0
 8006c78:	400200b8 	.word	0x400200b8
 8006c7c:	40020410 	.word	0x40020410
 8006c80:	40020428 	.word	0x40020428
 8006c84:	40020440 	.word	0x40020440
 8006c88:	40020458 	.word	0x40020458
 8006c8c:	40020470 	.word	0x40020470
 8006c90:	40020488 	.word	0x40020488
 8006c94:	400204a0 	.word	0x400204a0
 8006c98:	400204b8 	.word	0x400204b8
 8006c9c:	58025408 	.word	0x58025408
 8006ca0:	5802541c 	.word	0x5802541c
 8006ca4:	58025430 	.word	0x58025430
 8006ca8:	58025444 	.word	0x58025444
 8006cac:	58025458 	.word	0x58025458
 8006cb0:	5802546c 	.word	0x5802546c
 8006cb4:	58025480 	.word	0x58025480
 8006cb8:	58025494 	.word	0x58025494

08006cbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006cc4:	f7fc fd7e 	bl	80037c4 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e2dc      	b.n	800728e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d008      	beq.n	8006cf2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2280      	movs	r2, #128	@ 0x80
 8006ce4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e2cd      	b.n	800728e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a76      	ldr	r2, [pc, #472]	@ (8006ed0 <HAL_DMA_Abort+0x214>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d04a      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a74      	ldr	r2, [pc, #464]	@ (8006ed4 <HAL_DMA_Abort+0x218>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d045      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a73      	ldr	r2, [pc, #460]	@ (8006ed8 <HAL_DMA_Abort+0x21c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d040      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a71      	ldr	r2, [pc, #452]	@ (8006edc <HAL_DMA_Abort+0x220>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d03b      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a70      	ldr	r2, [pc, #448]	@ (8006ee0 <HAL_DMA_Abort+0x224>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d036      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a6e      	ldr	r2, [pc, #440]	@ (8006ee4 <HAL_DMA_Abort+0x228>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d031      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a6d      	ldr	r2, [pc, #436]	@ (8006ee8 <HAL_DMA_Abort+0x22c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d02c      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a6b      	ldr	r2, [pc, #428]	@ (8006eec <HAL_DMA_Abort+0x230>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d027      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a6a      	ldr	r2, [pc, #424]	@ (8006ef0 <HAL_DMA_Abort+0x234>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d022      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a68      	ldr	r2, [pc, #416]	@ (8006ef4 <HAL_DMA_Abort+0x238>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d01d      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a67      	ldr	r2, [pc, #412]	@ (8006ef8 <HAL_DMA_Abort+0x23c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d018      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a65      	ldr	r2, [pc, #404]	@ (8006efc <HAL_DMA_Abort+0x240>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d013      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a64      	ldr	r2, [pc, #400]	@ (8006f00 <HAL_DMA_Abort+0x244>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00e      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a62      	ldr	r2, [pc, #392]	@ (8006f04 <HAL_DMA_Abort+0x248>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d009      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a61      	ldr	r2, [pc, #388]	@ (8006f08 <HAL_DMA_Abort+0x24c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <HAL_DMA_Abort+0xd6>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a5f      	ldr	r2, [pc, #380]	@ (8006f0c <HAL_DMA_Abort+0x250>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d101      	bne.n	8006d96 <HAL_DMA_Abort+0xda>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <HAL_DMA_Abort+0xdc>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d013      	beq.n	8006dc4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 021e 	bic.w	r2, r2, #30
 8006daa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695a      	ldr	r2, [r3, #20]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e00a      	b.n	8006dda <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 020e 	bic.w	r2, r2, #14
 8006dd2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a3c      	ldr	r2, [pc, #240]	@ (8006ed0 <HAL_DMA_Abort+0x214>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d072      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a3a      	ldr	r2, [pc, #232]	@ (8006ed4 <HAL_DMA_Abort+0x218>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d06d      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a39      	ldr	r2, [pc, #228]	@ (8006ed8 <HAL_DMA_Abort+0x21c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d068      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a37      	ldr	r2, [pc, #220]	@ (8006edc <HAL_DMA_Abort+0x220>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d063      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a36      	ldr	r2, [pc, #216]	@ (8006ee0 <HAL_DMA_Abort+0x224>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d05e      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a34      	ldr	r2, [pc, #208]	@ (8006ee4 <HAL_DMA_Abort+0x228>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d059      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a33      	ldr	r2, [pc, #204]	@ (8006ee8 <HAL_DMA_Abort+0x22c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d054      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a31      	ldr	r2, [pc, #196]	@ (8006eec <HAL_DMA_Abort+0x230>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d04f      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a30      	ldr	r2, [pc, #192]	@ (8006ef0 <HAL_DMA_Abort+0x234>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d04a      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a2e      	ldr	r2, [pc, #184]	@ (8006ef4 <HAL_DMA_Abort+0x238>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d045      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a2d      	ldr	r2, [pc, #180]	@ (8006ef8 <HAL_DMA_Abort+0x23c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d040      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8006efc <HAL_DMA_Abort+0x240>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d03b      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a2a      	ldr	r2, [pc, #168]	@ (8006f00 <HAL_DMA_Abort+0x244>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d036      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a28      	ldr	r2, [pc, #160]	@ (8006f04 <HAL_DMA_Abort+0x248>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d031      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a27      	ldr	r2, [pc, #156]	@ (8006f08 <HAL_DMA_Abort+0x24c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d02c      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a25      	ldr	r2, [pc, #148]	@ (8006f0c <HAL_DMA_Abort+0x250>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d027      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a24      	ldr	r2, [pc, #144]	@ (8006f10 <HAL_DMA_Abort+0x254>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d022      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a22      	ldr	r2, [pc, #136]	@ (8006f14 <HAL_DMA_Abort+0x258>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d01d      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a21      	ldr	r2, [pc, #132]	@ (8006f18 <HAL_DMA_Abort+0x25c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d018      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8006f1c <HAL_DMA_Abort+0x260>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d013      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8006f20 <HAL_DMA_Abort+0x264>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00e      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8006f24 <HAL_DMA_Abort+0x268>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d009      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a1b      	ldr	r2, [pc, #108]	@ (8006f28 <HAL_DMA_Abort+0x26c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d004      	beq.n	8006eca <HAL_DMA_Abort+0x20e>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a19      	ldr	r2, [pc, #100]	@ (8006f2c <HAL_DMA_Abort+0x270>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d132      	bne.n	8006f30 <HAL_DMA_Abort+0x274>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e031      	b.n	8006f32 <HAL_DMA_Abort+0x276>
 8006ece:	bf00      	nop
 8006ed0:	40020010 	.word	0x40020010
 8006ed4:	40020028 	.word	0x40020028
 8006ed8:	40020040 	.word	0x40020040
 8006edc:	40020058 	.word	0x40020058
 8006ee0:	40020070 	.word	0x40020070
 8006ee4:	40020088 	.word	0x40020088
 8006ee8:	400200a0 	.word	0x400200a0
 8006eec:	400200b8 	.word	0x400200b8
 8006ef0:	40020410 	.word	0x40020410
 8006ef4:	40020428 	.word	0x40020428
 8006ef8:	40020440 	.word	0x40020440
 8006efc:	40020458 	.word	0x40020458
 8006f00:	40020470 	.word	0x40020470
 8006f04:	40020488 	.word	0x40020488
 8006f08:	400204a0 	.word	0x400204a0
 8006f0c:	400204b8 	.word	0x400204b8
 8006f10:	58025408 	.word	0x58025408
 8006f14:	5802541c 	.word	0x5802541c
 8006f18:	58025430 	.word	0x58025430
 8006f1c:	58025444 	.word	0x58025444
 8006f20:	58025458 	.word	0x58025458
 8006f24:	5802546c 	.word	0x5802546c
 8006f28:	58025480 	.word	0x58025480
 8006f2c:	58025494 	.word	0x58025494
 8006f30:	2300      	movs	r3, #0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d007      	beq.n	8006f46 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f44:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a6d      	ldr	r2, [pc, #436]	@ (8007100 <HAL_DMA_Abort+0x444>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d04a      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a6b      	ldr	r2, [pc, #428]	@ (8007104 <HAL_DMA_Abort+0x448>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d045      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a6a      	ldr	r2, [pc, #424]	@ (8007108 <HAL_DMA_Abort+0x44c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d040      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a68      	ldr	r2, [pc, #416]	@ (800710c <HAL_DMA_Abort+0x450>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d03b      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a67      	ldr	r2, [pc, #412]	@ (8007110 <HAL_DMA_Abort+0x454>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d036      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a65      	ldr	r2, [pc, #404]	@ (8007114 <HAL_DMA_Abort+0x458>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d031      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a64      	ldr	r2, [pc, #400]	@ (8007118 <HAL_DMA_Abort+0x45c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d02c      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a62      	ldr	r2, [pc, #392]	@ (800711c <HAL_DMA_Abort+0x460>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d027      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a61      	ldr	r2, [pc, #388]	@ (8007120 <HAL_DMA_Abort+0x464>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d022      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a5f      	ldr	r2, [pc, #380]	@ (8007124 <HAL_DMA_Abort+0x468>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d01d      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a5e      	ldr	r2, [pc, #376]	@ (8007128 <HAL_DMA_Abort+0x46c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d018      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a5c      	ldr	r2, [pc, #368]	@ (800712c <HAL_DMA_Abort+0x470>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d013      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8007130 <HAL_DMA_Abort+0x474>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00e      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a59      	ldr	r2, [pc, #356]	@ (8007134 <HAL_DMA_Abort+0x478>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d009      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a58      	ldr	r2, [pc, #352]	@ (8007138 <HAL_DMA_Abort+0x47c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d004      	beq.n	8006fe6 <HAL_DMA_Abort+0x32a>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a56      	ldr	r2, [pc, #344]	@ (800713c <HAL_DMA_Abort+0x480>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d108      	bne.n	8006ff8 <HAL_DMA_Abort+0x33c>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0201 	bic.w	r2, r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	e007      	b.n	8007008 <HAL_DMA_Abort+0x34c>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0201 	bic.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007008:	e013      	b.n	8007032 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800700a:	f7fc fbdb 	bl	80037c4 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	2b05      	cmp	r3, #5
 8007016:	d90c      	bls.n	8007032 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2203      	movs	r2, #3
 8007022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e12d      	b.n	800728e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e5      	bne.n	800700a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a2f      	ldr	r2, [pc, #188]	@ (8007100 <HAL_DMA_Abort+0x444>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d04a      	beq.n	80070de <HAL_DMA_Abort+0x422>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a2d      	ldr	r2, [pc, #180]	@ (8007104 <HAL_DMA_Abort+0x448>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d045      	beq.n	80070de <HAL_DMA_Abort+0x422>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a2c      	ldr	r2, [pc, #176]	@ (8007108 <HAL_DMA_Abort+0x44c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d040      	beq.n	80070de <HAL_DMA_Abort+0x422>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a2a      	ldr	r2, [pc, #168]	@ (800710c <HAL_DMA_Abort+0x450>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d03b      	beq.n	80070de <HAL_DMA_Abort+0x422>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a29      	ldr	r2, [pc, #164]	@ (8007110 <HAL_DMA_Abort+0x454>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d036      	beq.n	80070de <HAL_DMA_Abort+0x422>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a27      	ldr	r2, [pc, #156]	@ (8007114 <HAL_DMA_Abort+0x458>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d031      	beq.n	80070de <HAL_DMA_Abort+0x422>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a26      	ldr	r2, [pc, #152]	@ (8007118 <HAL_DMA_Abort+0x45c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d02c      	beq.n	80070de <HAL_DMA_Abort+0x422>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a24      	ldr	r2, [pc, #144]	@ (800711c <HAL_DMA_Abort+0x460>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d027      	beq.n	80070de <HAL_DMA_Abort+0x422>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a23      	ldr	r2, [pc, #140]	@ (8007120 <HAL_DMA_Abort+0x464>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d022      	beq.n	80070de <HAL_DMA_Abort+0x422>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a21      	ldr	r2, [pc, #132]	@ (8007124 <HAL_DMA_Abort+0x468>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d01d      	beq.n	80070de <HAL_DMA_Abort+0x422>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a20      	ldr	r2, [pc, #128]	@ (8007128 <HAL_DMA_Abort+0x46c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d018      	beq.n	80070de <HAL_DMA_Abort+0x422>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1e      	ldr	r2, [pc, #120]	@ (800712c <HAL_DMA_Abort+0x470>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d013      	beq.n	80070de <HAL_DMA_Abort+0x422>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a1d      	ldr	r2, [pc, #116]	@ (8007130 <HAL_DMA_Abort+0x474>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00e      	beq.n	80070de <HAL_DMA_Abort+0x422>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007134 <HAL_DMA_Abort+0x478>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d009      	beq.n	80070de <HAL_DMA_Abort+0x422>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007138 <HAL_DMA_Abort+0x47c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d004      	beq.n	80070de <HAL_DMA_Abort+0x422>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a18      	ldr	r2, [pc, #96]	@ (800713c <HAL_DMA_Abort+0x480>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d101      	bne.n	80070e2 <HAL_DMA_Abort+0x426>
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <HAL_DMA_Abort+0x428>
 80070e2:	2300      	movs	r3, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d02b      	beq.n	8007140 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070f2:	f003 031f 	and.w	r3, r3, #31
 80070f6:	223f      	movs	r2, #63	@ 0x3f
 80070f8:	409a      	lsls	r2, r3
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	609a      	str	r2, [r3, #8]
 80070fe:	e02a      	b.n	8007156 <HAL_DMA_Abort+0x49a>
 8007100:	40020010 	.word	0x40020010
 8007104:	40020028 	.word	0x40020028
 8007108:	40020040 	.word	0x40020040
 800710c:	40020058 	.word	0x40020058
 8007110:	40020070 	.word	0x40020070
 8007114:	40020088 	.word	0x40020088
 8007118:	400200a0 	.word	0x400200a0
 800711c:	400200b8 	.word	0x400200b8
 8007120:	40020410 	.word	0x40020410
 8007124:	40020428 	.word	0x40020428
 8007128:	40020440 	.word	0x40020440
 800712c:	40020458 	.word	0x40020458
 8007130:	40020470 	.word	0x40020470
 8007134:	40020488 	.word	0x40020488
 8007138:	400204a0 	.word	0x400204a0
 800713c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007144:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	2201      	movs	r2, #1
 8007150:	409a      	lsls	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a4f      	ldr	r2, [pc, #316]	@ (8007298 <HAL_DMA_Abort+0x5dc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d072      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a4d      	ldr	r2, [pc, #308]	@ (800729c <HAL_DMA_Abort+0x5e0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d06d      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a4c      	ldr	r2, [pc, #304]	@ (80072a0 <HAL_DMA_Abort+0x5e4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d068      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a4a      	ldr	r2, [pc, #296]	@ (80072a4 <HAL_DMA_Abort+0x5e8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d063      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a49      	ldr	r2, [pc, #292]	@ (80072a8 <HAL_DMA_Abort+0x5ec>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d05e      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a47      	ldr	r2, [pc, #284]	@ (80072ac <HAL_DMA_Abort+0x5f0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d059      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a46      	ldr	r2, [pc, #280]	@ (80072b0 <HAL_DMA_Abort+0x5f4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d054      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a44      	ldr	r2, [pc, #272]	@ (80072b4 <HAL_DMA_Abort+0x5f8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d04f      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a43      	ldr	r2, [pc, #268]	@ (80072b8 <HAL_DMA_Abort+0x5fc>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d04a      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a41      	ldr	r2, [pc, #260]	@ (80072bc <HAL_DMA_Abort+0x600>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d045      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a40      	ldr	r2, [pc, #256]	@ (80072c0 <HAL_DMA_Abort+0x604>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d040      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a3e      	ldr	r2, [pc, #248]	@ (80072c4 <HAL_DMA_Abort+0x608>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d03b      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a3d      	ldr	r2, [pc, #244]	@ (80072c8 <HAL_DMA_Abort+0x60c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d036      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a3b      	ldr	r2, [pc, #236]	@ (80072cc <HAL_DMA_Abort+0x610>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d031      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a3a      	ldr	r2, [pc, #232]	@ (80072d0 <HAL_DMA_Abort+0x614>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d02c      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a38      	ldr	r2, [pc, #224]	@ (80072d4 <HAL_DMA_Abort+0x618>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d027      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a37      	ldr	r2, [pc, #220]	@ (80072d8 <HAL_DMA_Abort+0x61c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d022      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a35      	ldr	r2, [pc, #212]	@ (80072dc <HAL_DMA_Abort+0x620>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d01d      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a34      	ldr	r2, [pc, #208]	@ (80072e0 <HAL_DMA_Abort+0x624>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d018      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a32      	ldr	r2, [pc, #200]	@ (80072e4 <HAL_DMA_Abort+0x628>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d013      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a31      	ldr	r2, [pc, #196]	@ (80072e8 <HAL_DMA_Abort+0x62c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00e      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a2f      	ldr	r2, [pc, #188]	@ (80072ec <HAL_DMA_Abort+0x630>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d009      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a2e      	ldr	r2, [pc, #184]	@ (80072f0 <HAL_DMA_Abort+0x634>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d004      	beq.n	8007246 <HAL_DMA_Abort+0x58a>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a2c      	ldr	r2, [pc, #176]	@ (80072f4 <HAL_DMA_Abort+0x638>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d101      	bne.n	800724a <HAL_DMA_Abort+0x58e>
 8007246:	2301      	movs	r3, #1
 8007248:	e000      	b.n	800724c <HAL_DMA_Abort+0x590>
 800724a:	2300      	movs	r3, #0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d015      	beq.n	800727c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007258:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00c      	beq.n	800727c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800726c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007270:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800727a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	40020010 	.word	0x40020010
 800729c:	40020028 	.word	0x40020028
 80072a0:	40020040 	.word	0x40020040
 80072a4:	40020058 	.word	0x40020058
 80072a8:	40020070 	.word	0x40020070
 80072ac:	40020088 	.word	0x40020088
 80072b0:	400200a0 	.word	0x400200a0
 80072b4:	400200b8 	.word	0x400200b8
 80072b8:	40020410 	.word	0x40020410
 80072bc:	40020428 	.word	0x40020428
 80072c0:	40020440 	.word	0x40020440
 80072c4:	40020458 	.word	0x40020458
 80072c8:	40020470 	.word	0x40020470
 80072cc:	40020488 	.word	0x40020488
 80072d0:	400204a0 	.word	0x400204a0
 80072d4:	400204b8 	.word	0x400204b8
 80072d8:	58025408 	.word	0x58025408
 80072dc:	5802541c 	.word	0x5802541c
 80072e0:	58025430 	.word	0x58025430
 80072e4:	58025444 	.word	0x58025444
 80072e8:	58025458 	.word	0x58025458
 80072ec:	5802546c 	.word	0x5802546c
 80072f0:	58025480 	.word	0x58025480
 80072f4:	58025494 	.word	0x58025494

080072f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e237      	b.n	800777a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d004      	beq.n	8007320 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2280      	movs	r2, #128	@ 0x80
 800731a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e22c      	b.n	800777a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a5c      	ldr	r2, [pc, #368]	@ (8007498 <HAL_DMA_Abort_IT+0x1a0>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d04a      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a5b      	ldr	r2, [pc, #364]	@ (800749c <HAL_DMA_Abort_IT+0x1a4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d045      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a59      	ldr	r2, [pc, #356]	@ (80074a0 <HAL_DMA_Abort_IT+0x1a8>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d040      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a58      	ldr	r2, [pc, #352]	@ (80074a4 <HAL_DMA_Abort_IT+0x1ac>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d03b      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a56      	ldr	r2, [pc, #344]	@ (80074a8 <HAL_DMA_Abort_IT+0x1b0>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d036      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a55      	ldr	r2, [pc, #340]	@ (80074ac <HAL_DMA_Abort_IT+0x1b4>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d031      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a53      	ldr	r2, [pc, #332]	@ (80074b0 <HAL_DMA_Abort_IT+0x1b8>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d02c      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a52      	ldr	r2, [pc, #328]	@ (80074b4 <HAL_DMA_Abort_IT+0x1bc>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d027      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a50      	ldr	r2, [pc, #320]	@ (80074b8 <HAL_DMA_Abort_IT+0x1c0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d022      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a4f      	ldr	r2, [pc, #316]	@ (80074bc <HAL_DMA_Abort_IT+0x1c4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d01d      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a4d      	ldr	r2, [pc, #308]	@ (80074c0 <HAL_DMA_Abort_IT+0x1c8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d018      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a4c      	ldr	r2, [pc, #304]	@ (80074c4 <HAL_DMA_Abort_IT+0x1cc>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d013      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a4a      	ldr	r2, [pc, #296]	@ (80074c8 <HAL_DMA_Abort_IT+0x1d0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00e      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a49      	ldr	r2, [pc, #292]	@ (80074cc <HAL_DMA_Abort_IT+0x1d4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d009      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a47      	ldr	r2, [pc, #284]	@ (80074d0 <HAL_DMA_Abort_IT+0x1d8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d004      	beq.n	80073c0 <HAL_DMA_Abort_IT+0xc8>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a46      	ldr	r2, [pc, #280]	@ (80074d4 <HAL_DMA_Abort_IT+0x1dc>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d101      	bne.n	80073c4 <HAL_DMA_Abort_IT+0xcc>
 80073c0:	2301      	movs	r3, #1
 80073c2:	e000      	b.n	80073c6 <HAL_DMA_Abort_IT+0xce>
 80073c4:	2300      	movs	r3, #0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 8086 	beq.w	80074d8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2204      	movs	r2, #4
 80073d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a2f      	ldr	r2, [pc, #188]	@ (8007498 <HAL_DMA_Abort_IT+0x1a0>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d04a      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a2e      	ldr	r2, [pc, #184]	@ (800749c <HAL_DMA_Abort_IT+0x1a4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d045      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a2c      	ldr	r2, [pc, #176]	@ (80074a0 <HAL_DMA_Abort_IT+0x1a8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d040      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a2b      	ldr	r2, [pc, #172]	@ (80074a4 <HAL_DMA_Abort_IT+0x1ac>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d03b      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a29      	ldr	r2, [pc, #164]	@ (80074a8 <HAL_DMA_Abort_IT+0x1b0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d036      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a28      	ldr	r2, [pc, #160]	@ (80074ac <HAL_DMA_Abort_IT+0x1b4>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d031      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a26      	ldr	r2, [pc, #152]	@ (80074b0 <HAL_DMA_Abort_IT+0x1b8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d02c      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a25      	ldr	r2, [pc, #148]	@ (80074b4 <HAL_DMA_Abort_IT+0x1bc>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d027      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a23      	ldr	r2, [pc, #140]	@ (80074b8 <HAL_DMA_Abort_IT+0x1c0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d022      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a22      	ldr	r2, [pc, #136]	@ (80074bc <HAL_DMA_Abort_IT+0x1c4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d01d      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a20      	ldr	r2, [pc, #128]	@ (80074c0 <HAL_DMA_Abort_IT+0x1c8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d018      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a1f      	ldr	r2, [pc, #124]	@ (80074c4 <HAL_DMA_Abort_IT+0x1cc>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d013      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a1d      	ldr	r2, [pc, #116]	@ (80074c8 <HAL_DMA_Abort_IT+0x1d0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00e      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1c      	ldr	r2, [pc, #112]	@ (80074cc <HAL_DMA_Abort_IT+0x1d4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d009      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1a      	ldr	r2, [pc, #104]	@ (80074d0 <HAL_DMA_Abort_IT+0x1d8>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <HAL_DMA_Abort_IT+0x17c>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a19      	ldr	r2, [pc, #100]	@ (80074d4 <HAL_DMA_Abort_IT+0x1dc>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d108      	bne.n	8007486 <HAL_DMA_Abort_IT+0x18e>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0201 	bic.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e178      	b.n	8007778 <HAL_DMA_Abort_IT+0x480>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0201 	bic.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	e16f      	b.n	8007778 <HAL_DMA_Abort_IT+0x480>
 8007498:	40020010 	.word	0x40020010
 800749c:	40020028 	.word	0x40020028
 80074a0:	40020040 	.word	0x40020040
 80074a4:	40020058 	.word	0x40020058
 80074a8:	40020070 	.word	0x40020070
 80074ac:	40020088 	.word	0x40020088
 80074b0:	400200a0 	.word	0x400200a0
 80074b4:	400200b8 	.word	0x400200b8
 80074b8:	40020410 	.word	0x40020410
 80074bc:	40020428 	.word	0x40020428
 80074c0:	40020440 	.word	0x40020440
 80074c4:	40020458 	.word	0x40020458
 80074c8:	40020470 	.word	0x40020470
 80074cc:	40020488 	.word	0x40020488
 80074d0:	400204a0 	.word	0x400204a0
 80074d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 020e 	bic.w	r2, r2, #14
 80074e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a6c      	ldr	r2, [pc, #432]	@ (80076a0 <HAL_DMA_Abort_IT+0x3a8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d04a      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a6b      	ldr	r2, [pc, #428]	@ (80076a4 <HAL_DMA_Abort_IT+0x3ac>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d045      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a69      	ldr	r2, [pc, #420]	@ (80076a8 <HAL_DMA_Abort_IT+0x3b0>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d040      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a68      	ldr	r2, [pc, #416]	@ (80076ac <HAL_DMA_Abort_IT+0x3b4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d03b      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a66      	ldr	r2, [pc, #408]	@ (80076b0 <HAL_DMA_Abort_IT+0x3b8>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d036      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a65      	ldr	r2, [pc, #404]	@ (80076b4 <HAL_DMA_Abort_IT+0x3bc>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d031      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a63      	ldr	r2, [pc, #396]	@ (80076b8 <HAL_DMA_Abort_IT+0x3c0>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d02c      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a62      	ldr	r2, [pc, #392]	@ (80076bc <HAL_DMA_Abort_IT+0x3c4>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d027      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a60      	ldr	r2, [pc, #384]	@ (80076c0 <HAL_DMA_Abort_IT+0x3c8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d022      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a5f      	ldr	r2, [pc, #380]	@ (80076c4 <HAL_DMA_Abort_IT+0x3cc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d01d      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a5d      	ldr	r2, [pc, #372]	@ (80076c8 <HAL_DMA_Abort_IT+0x3d0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d018      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a5c      	ldr	r2, [pc, #368]	@ (80076cc <HAL_DMA_Abort_IT+0x3d4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d013      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a5a      	ldr	r2, [pc, #360]	@ (80076d0 <HAL_DMA_Abort_IT+0x3d8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00e      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a59      	ldr	r2, [pc, #356]	@ (80076d4 <HAL_DMA_Abort_IT+0x3dc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d009      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a57      	ldr	r2, [pc, #348]	@ (80076d8 <HAL_DMA_Abort_IT+0x3e0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d004      	beq.n	8007588 <HAL_DMA_Abort_IT+0x290>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a56      	ldr	r2, [pc, #344]	@ (80076dc <HAL_DMA_Abort_IT+0x3e4>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d108      	bne.n	800759a <HAL_DMA_Abort_IT+0x2a2>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0201 	bic.w	r2, r2, #1
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	e007      	b.n	80075aa <HAL_DMA_Abort_IT+0x2b2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0201 	bic.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a3c      	ldr	r2, [pc, #240]	@ (80076a0 <HAL_DMA_Abort_IT+0x3a8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d072      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a3a      	ldr	r2, [pc, #232]	@ (80076a4 <HAL_DMA_Abort_IT+0x3ac>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d06d      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a39      	ldr	r2, [pc, #228]	@ (80076a8 <HAL_DMA_Abort_IT+0x3b0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d068      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a37      	ldr	r2, [pc, #220]	@ (80076ac <HAL_DMA_Abort_IT+0x3b4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d063      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a36      	ldr	r2, [pc, #216]	@ (80076b0 <HAL_DMA_Abort_IT+0x3b8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d05e      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a34      	ldr	r2, [pc, #208]	@ (80076b4 <HAL_DMA_Abort_IT+0x3bc>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d059      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a33      	ldr	r2, [pc, #204]	@ (80076b8 <HAL_DMA_Abort_IT+0x3c0>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d054      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a31      	ldr	r2, [pc, #196]	@ (80076bc <HAL_DMA_Abort_IT+0x3c4>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d04f      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a30      	ldr	r2, [pc, #192]	@ (80076c0 <HAL_DMA_Abort_IT+0x3c8>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d04a      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a2e      	ldr	r2, [pc, #184]	@ (80076c4 <HAL_DMA_Abort_IT+0x3cc>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d045      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a2d      	ldr	r2, [pc, #180]	@ (80076c8 <HAL_DMA_Abort_IT+0x3d0>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d040      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a2b      	ldr	r2, [pc, #172]	@ (80076cc <HAL_DMA_Abort_IT+0x3d4>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d03b      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a2a      	ldr	r2, [pc, #168]	@ (80076d0 <HAL_DMA_Abort_IT+0x3d8>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d036      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a28      	ldr	r2, [pc, #160]	@ (80076d4 <HAL_DMA_Abort_IT+0x3dc>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d031      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a27      	ldr	r2, [pc, #156]	@ (80076d8 <HAL_DMA_Abort_IT+0x3e0>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d02c      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a25      	ldr	r2, [pc, #148]	@ (80076dc <HAL_DMA_Abort_IT+0x3e4>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d027      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a24      	ldr	r2, [pc, #144]	@ (80076e0 <HAL_DMA_Abort_IT+0x3e8>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d022      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a22      	ldr	r2, [pc, #136]	@ (80076e4 <HAL_DMA_Abort_IT+0x3ec>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d01d      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a21      	ldr	r2, [pc, #132]	@ (80076e8 <HAL_DMA_Abort_IT+0x3f0>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d018      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a1f      	ldr	r2, [pc, #124]	@ (80076ec <HAL_DMA_Abort_IT+0x3f4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d013      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a1e      	ldr	r2, [pc, #120]	@ (80076f0 <HAL_DMA_Abort_IT+0x3f8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00e      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a1c      	ldr	r2, [pc, #112]	@ (80076f4 <HAL_DMA_Abort_IT+0x3fc>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d009      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a1b      	ldr	r2, [pc, #108]	@ (80076f8 <HAL_DMA_Abort_IT+0x400>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d004      	beq.n	800769a <HAL_DMA_Abort_IT+0x3a2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a19      	ldr	r2, [pc, #100]	@ (80076fc <HAL_DMA_Abort_IT+0x404>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d132      	bne.n	8007700 <HAL_DMA_Abort_IT+0x408>
 800769a:	2301      	movs	r3, #1
 800769c:	e031      	b.n	8007702 <HAL_DMA_Abort_IT+0x40a>
 800769e:	bf00      	nop
 80076a0:	40020010 	.word	0x40020010
 80076a4:	40020028 	.word	0x40020028
 80076a8:	40020040 	.word	0x40020040
 80076ac:	40020058 	.word	0x40020058
 80076b0:	40020070 	.word	0x40020070
 80076b4:	40020088 	.word	0x40020088
 80076b8:	400200a0 	.word	0x400200a0
 80076bc:	400200b8 	.word	0x400200b8
 80076c0:	40020410 	.word	0x40020410
 80076c4:	40020428 	.word	0x40020428
 80076c8:	40020440 	.word	0x40020440
 80076cc:	40020458 	.word	0x40020458
 80076d0:	40020470 	.word	0x40020470
 80076d4:	40020488 	.word	0x40020488
 80076d8:	400204a0 	.word	0x400204a0
 80076dc:	400204b8 	.word	0x400204b8
 80076e0:	58025408 	.word	0x58025408
 80076e4:	5802541c 	.word	0x5802541c
 80076e8:	58025430 	.word	0x58025430
 80076ec:	58025444 	.word	0x58025444
 80076f0:	58025458 	.word	0x58025458
 80076f4:	5802546c 	.word	0x5802546c
 80076f8:	58025480 	.word	0x58025480
 80076fc:	58025494 	.word	0x58025494
 8007700:	2300      	movs	r3, #0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d028      	beq.n	8007758 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007710:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007714:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800771a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007720:	f003 031f 	and.w	r3, r3, #31
 8007724:	2201      	movs	r2, #1
 8007726:	409a      	lsls	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007734:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00c      	beq.n	8007758 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007748:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800774c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007756:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop

08007784 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08a      	sub	sp, #40	@ 0x28
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007790:	4b67      	ldr	r3, [pc, #412]	@ (8007930 <HAL_DMA_IRQHandler+0x1ac>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a67      	ldr	r2, [pc, #412]	@ (8007934 <HAL_DMA_IRQHandler+0x1b0>)
 8007796:	fba2 2303 	umull	r2, r3, r2, r3
 800779a:	0a9b      	lsrs	r3, r3, #10
 800779c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a5f      	ldr	r2, [pc, #380]	@ (8007938 <HAL_DMA_IRQHandler+0x1b4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d04a      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a5d      	ldr	r2, [pc, #372]	@ (800793c <HAL_DMA_IRQHandler+0x1b8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d045      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a5c      	ldr	r2, [pc, #368]	@ (8007940 <HAL_DMA_IRQHandler+0x1bc>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d040      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a5a      	ldr	r2, [pc, #360]	@ (8007944 <HAL_DMA_IRQHandler+0x1c0>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d03b      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a59      	ldr	r2, [pc, #356]	@ (8007948 <HAL_DMA_IRQHandler+0x1c4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d036      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a57      	ldr	r2, [pc, #348]	@ (800794c <HAL_DMA_IRQHandler+0x1c8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d031      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a56      	ldr	r2, [pc, #344]	@ (8007950 <HAL_DMA_IRQHandler+0x1cc>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d02c      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a54      	ldr	r2, [pc, #336]	@ (8007954 <HAL_DMA_IRQHandler+0x1d0>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d027      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a53      	ldr	r2, [pc, #332]	@ (8007958 <HAL_DMA_IRQHandler+0x1d4>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d022      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a51      	ldr	r2, [pc, #324]	@ (800795c <HAL_DMA_IRQHandler+0x1d8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d01d      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a50      	ldr	r2, [pc, #320]	@ (8007960 <HAL_DMA_IRQHandler+0x1dc>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d018      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a4e      	ldr	r2, [pc, #312]	@ (8007964 <HAL_DMA_IRQHandler+0x1e0>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d013      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a4d      	ldr	r2, [pc, #308]	@ (8007968 <HAL_DMA_IRQHandler+0x1e4>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d00e      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a4b      	ldr	r2, [pc, #300]	@ (800796c <HAL_DMA_IRQHandler+0x1e8>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d009      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a4a      	ldr	r2, [pc, #296]	@ (8007970 <HAL_DMA_IRQHandler+0x1ec>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d004      	beq.n	8007856 <HAL_DMA_IRQHandler+0xd2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a48      	ldr	r2, [pc, #288]	@ (8007974 <HAL_DMA_IRQHandler+0x1f0>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d101      	bne.n	800785a <HAL_DMA_IRQHandler+0xd6>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <HAL_DMA_IRQHandler+0xd8>
 800785a:	2300      	movs	r3, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 842b 	beq.w	80080b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007866:	f003 031f 	and.w	r3, r3, #31
 800786a:	2208      	movs	r2, #8
 800786c:	409a      	lsls	r2, r3
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	4013      	ands	r3, r2
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 80a2 	beq.w	80079bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2e      	ldr	r2, [pc, #184]	@ (8007938 <HAL_DMA_IRQHandler+0x1b4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d04a      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a2d      	ldr	r2, [pc, #180]	@ (800793c <HAL_DMA_IRQHandler+0x1b8>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d045      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2b      	ldr	r2, [pc, #172]	@ (8007940 <HAL_DMA_IRQHandler+0x1bc>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d040      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a2a      	ldr	r2, [pc, #168]	@ (8007944 <HAL_DMA_IRQHandler+0x1c0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d03b      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a28      	ldr	r2, [pc, #160]	@ (8007948 <HAL_DMA_IRQHandler+0x1c4>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d036      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a27      	ldr	r2, [pc, #156]	@ (800794c <HAL_DMA_IRQHandler+0x1c8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d031      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a25      	ldr	r2, [pc, #148]	@ (8007950 <HAL_DMA_IRQHandler+0x1cc>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d02c      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a24      	ldr	r2, [pc, #144]	@ (8007954 <HAL_DMA_IRQHandler+0x1d0>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d027      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a22      	ldr	r2, [pc, #136]	@ (8007958 <HAL_DMA_IRQHandler+0x1d4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d022      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a21      	ldr	r2, [pc, #132]	@ (800795c <HAL_DMA_IRQHandler+0x1d8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d01d      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007960 <HAL_DMA_IRQHandler+0x1dc>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007964 <HAL_DMA_IRQHandler+0x1e0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007968 <HAL_DMA_IRQHandler+0x1e4>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a1b      	ldr	r2, [pc, #108]	@ (800796c <HAL_DMA_IRQHandler+0x1e8>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a19      	ldr	r2, [pc, #100]	@ (8007970 <HAL_DMA_IRQHandler+0x1ec>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <HAL_DMA_IRQHandler+0x194>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a18      	ldr	r2, [pc, #96]	@ (8007974 <HAL_DMA_IRQHandler+0x1f0>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d12f      	bne.n	8007978 <HAL_DMA_IRQHandler+0x1f4>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0304 	and.w	r3, r3, #4
 8007922:	2b00      	cmp	r3, #0
 8007924:	bf14      	ite	ne
 8007926:	2301      	movne	r3, #1
 8007928:	2300      	moveq	r3, #0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	e02e      	b.n	800798c <HAL_DMA_IRQHandler+0x208>
 800792e:	bf00      	nop
 8007930:	24000000 	.word	0x24000000
 8007934:	1b4e81b5 	.word	0x1b4e81b5
 8007938:	40020010 	.word	0x40020010
 800793c:	40020028 	.word	0x40020028
 8007940:	40020040 	.word	0x40020040
 8007944:	40020058 	.word	0x40020058
 8007948:	40020070 	.word	0x40020070
 800794c:	40020088 	.word	0x40020088
 8007950:	400200a0 	.word	0x400200a0
 8007954:	400200b8 	.word	0x400200b8
 8007958:	40020410 	.word	0x40020410
 800795c:	40020428 	.word	0x40020428
 8007960:	40020440 	.word	0x40020440
 8007964:	40020458 	.word	0x40020458
 8007968:	40020470 	.word	0x40020470
 800796c:	40020488 	.word	0x40020488
 8007970:	400204a0 	.word	0x400204a0
 8007974:	400204b8 	.word	0x400204b8
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0308 	and.w	r3, r3, #8
 8007982:	2b00      	cmp	r3, #0
 8007984:	bf14      	ite	ne
 8007986:	2301      	movne	r3, #1
 8007988:	2300      	moveq	r3, #0
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d015      	beq.n	80079bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0204 	bic.w	r2, r2, #4
 800799e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079a4:	f003 031f 	and.w	r3, r3, #31
 80079a8:	2208      	movs	r2, #8
 80079aa:	409a      	lsls	r2, r3
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b4:	f043 0201 	orr.w	r2, r3, #1
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079c0:	f003 031f 	and.w	r3, r3, #31
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d06e      	beq.n	8007ab0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a69      	ldr	r2, [pc, #420]	@ (8007b7c <HAL_DMA_IRQHandler+0x3f8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d04a      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a67      	ldr	r2, [pc, #412]	@ (8007b80 <HAL_DMA_IRQHandler+0x3fc>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d045      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a66      	ldr	r2, [pc, #408]	@ (8007b84 <HAL_DMA_IRQHandler+0x400>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d040      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a64      	ldr	r2, [pc, #400]	@ (8007b88 <HAL_DMA_IRQHandler+0x404>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d03b      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a63      	ldr	r2, [pc, #396]	@ (8007b8c <HAL_DMA_IRQHandler+0x408>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d036      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a61      	ldr	r2, [pc, #388]	@ (8007b90 <HAL_DMA_IRQHandler+0x40c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d031      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a60      	ldr	r2, [pc, #384]	@ (8007b94 <HAL_DMA_IRQHandler+0x410>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d02c      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a5e      	ldr	r2, [pc, #376]	@ (8007b98 <HAL_DMA_IRQHandler+0x414>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d027      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a5d      	ldr	r2, [pc, #372]	@ (8007b9c <HAL_DMA_IRQHandler+0x418>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d022      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a5b      	ldr	r2, [pc, #364]	@ (8007ba0 <HAL_DMA_IRQHandler+0x41c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d01d      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a5a      	ldr	r2, [pc, #360]	@ (8007ba4 <HAL_DMA_IRQHandler+0x420>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d018      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a58      	ldr	r2, [pc, #352]	@ (8007ba8 <HAL_DMA_IRQHandler+0x424>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d013      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a57      	ldr	r2, [pc, #348]	@ (8007bac <HAL_DMA_IRQHandler+0x428>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00e      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a55      	ldr	r2, [pc, #340]	@ (8007bb0 <HAL_DMA_IRQHandler+0x42c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d009      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a54      	ldr	r2, [pc, #336]	@ (8007bb4 <HAL_DMA_IRQHandler+0x430>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d004      	beq.n	8007a72 <HAL_DMA_IRQHandler+0x2ee>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a52      	ldr	r2, [pc, #328]	@ (8007bb8 <HAL_DMA_IRQHandler+0x434>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d10a      	bne.n	8007a88 <HAL_DMA_IRQHandler+0x304>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bf14      	ite	ne
 8007a80:	2301      	movne	r3, #1
 8007a82:	2300      	moveq	r3, #0
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	e003      	b.n	8007a90 <HAL_DMA_IRQHandler+0x30c>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00d      	beq.n	8007ab0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a98:	f003 031f 	and.w	r3, r3, #31
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	409a      	lsls	r2, r3
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa8:	f043 0202 	orr.w	r2, r3, #2
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ab4:	f003 031f 	and.w	r3, r3, #31
 8007ab8:	2204      	movs	r2, #4
 8007aba:	409a      	lsls	r2, r3
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 808f 	beq.w	8007be4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a2c      	ldr	r2, [pc, #176]	@ (8007b7c <HAL_DMA_IRQHandler+0x3f8>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d04a      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8007b80 <HAL_DMA_IRQHandler+0x3fc>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d045      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a29      	ldr	r2, [pc, #164]	@ (8007b84 <HAL_DMA_IRQHandler+0x400>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d040      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a27      	ldr	r2, [pc, #156]	@ (8007b88 <HAL_DMA_IRQHandler+0x404>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d03b      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a26      	ldr	r2, [pc, #152]	@ (8007b8c <HAL_DMA_IRQHandler+0x408>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d036      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a24      	ldr	r2, [pc, #144]	@ (8007b90 <HAL_DMA_IRQHandler+0x40c>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d031      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a23      	ldr	r2, [pc, #140]	@ (8007b94 <HAL_DMA_IRQHandler+0x410>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d02c      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a21      	ldr	r2, [pc, #132]	@ (8007b98 <HAL_DMA_IRQHandler+0x414>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d027      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a20      	ldr	r2, [pc, #128]	@ (8007b9c <HAL_DMA_IRQHandler+0x418>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d022      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1e      	ldr	r2, [pc, #120]	@ (8007ba0 <HAL_DMA_IRQHandler+0x41c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d01d      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8007ba4 <HAL_DMA_IRQHandler+0x420>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d018      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba8 <HAL_DMA_IRQHandler+0x424>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d013      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1a      	ldr	r2, [pc, #104]	@ (8007bac <HAL_DMA_IRQHandler+0x428>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00e      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a18      	ldr	r2, [pc, #96]	@ (8007bb0 <HAL_DMA_IRQHandler+0x42c>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d009      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a17      	ldr	r2, [pc, #92]	@ (8007bb4 <HAL_DMA_IRQHandler+0x430>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d004      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x3e2>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a15      	ldr	r2, [pc, #84]	@ (8007bb8 <HAL_DMA_IRQHandler+0x434>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d12a      	bne.n	8007bbc <HAL_DMA_IRQHandler+0x438>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bf14      	ite	ne
 8007b74:	2301      	movne	r3, #1
 8007b76:	2300      	moveq	r3, #0
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	e023      	b.n	8007bc4 <HAL_DMA_IRQHandler+0x440>
 8007b7c:	40020010 	.word	0x40020010
 8007b80:	40020028 	.word	0x40020028
 8007b84:	40020040 	.word	0x40020040
 8007b88:	40020058 	.word	0x40020058
 8007b8c:	40020070 	.word	0x40020070
 8007b90:	40020088 	.word	0x40020088
 8007b94:	400200a0 	.word	0x400200a0
 8007b98:	400200b8 	.word	0x400200b8
 8007b9c:	40020410 	.word	0x40020410
 8007ba0:	40020428 	.word	0x40020428
 8007ba4:	40020440 	.word	0x40020440
 8007ba8:	40020458 	.word	0x40020458
 8007bac:	40020470 	.word	0x40020470
 8007bb0:	40020488 	.word	0x40020488
 8007bb4:	400204a0 	.word	0x400204a0
 8007bb8:	400204b8 	.word	0x400204b8
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00d      	beq.n	8007be4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bcc:	f003 031f 	and.w	r3, r3, #31
 8007bd0:	2204      	movs	r2, #4
 8007bd2:	409a      	lsls	r2, r3
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bdc:	f043 0204 	orr.w	r2, r3, #4
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007be8:	f003 031f 	and.w	r3, r3, #31
 8007bec:	2210      	movs	r2, #16
 8007bee:	409a      	lsls	r2, r3
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 80a6 	beq.w	8007d46 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a85      	ldr	r2, [pc, #532]	@ (8007e14 <HAL_DMA_IRQHandler+0x690>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d04a      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a83      	ldr	r2, [pc, #524]	@ (8007e18 <HAL_DMA_IRQHandler+0x694>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d045      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a82      	ldr	r2, [pc, #520]	@ (8007e1c <HAL_DMA_IRQHandler+0x698>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d040      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a80      	ldr	r2, [pc, #512]	@ (8007e20 <HAL_DMA_IRQHandler+0x69c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d03b      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a7f      	ldr	r2, [pc, #508]	@ (8007e24 <HAL_DMA_IRQHandler+0x6a0>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d036      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a7d      	ldr	r2, [pc, #500]	@ (8007e28 <HAL_DMA_IRQHandler+0x6a4>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d031      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a7c      	ldr	r2, [pc, #496]	@ (8007e2c <HAL_DMA_IRQHandler+0x6a8>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d02c      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a7a      	ldr	r2, [pc, #488]	@ (8007e30 <HAL_DMA_IRQHandler+0x6ac>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d027      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a79      	ldr	r2, [pc, #484]	@ (8007e34 <HAL_DMA_IRQHandler+0x6b0>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d022      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a77      	ldr	r2, [pc, #476]	@ (8007e38 <HAL_DMA_IRQHandler+0x6b4>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d01d      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a76      	ldr	r2, [pc, #472]	@ (8007e3c <HAL_DMA_IRQHandler+0x6b8>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d018      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a74      	ldr	r2, [pc, #464]	@ (8007e40 <HAL_DMA_IRQHandler+0x6bc>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d013      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a73      	ldr	r2, [pc, #460]	@ (8007e44 <HAL_DMA_IRQHandler+0x6c0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00e      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a71      	ldr	r2, [pc, #452]	@ (8007e48 <HAL_DMA_IRQHandler+0x6c4>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d009      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a70      	ldr	r2, [pc, #448]	@ (8007e4c <HAL_DMA_IRQHandler+0x6c8>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d004      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x516>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a6e      	ldr	r2, [pc, #440]	@ (8007e50 <HAL_DMA_IRQHandler+0x6cc>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d10a      	bne.n	8007cb0 <HAL_DMA_IRQHandler+0x52c>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0308 	and.w	r3, r3, #8
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bf14      	ite	ne
 8007ca8:	2301      	movne	r3, #1
 8007caa:	2300      	moveq	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	e009      	b.n	8007cc4 <HAL_DMA_IRQHandler+0x540>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0304 	and.w	r3, r3, #4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bf14      	ite	ne
 8007cbe:	2301      	movne	r3, #1
 8007cc0:	2300      	moveq	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d03e      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ccc:	f003 031f 	and.w	r3, r3, #31
 8007cd0:	2210      	movs	r2, #16
 8007cd2:	409a      	lsls	r2, r3
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d018      	beq.n	8007d18 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d108      	bne.n	8007d06 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d024      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	4798      	blx	r3
 8007d04:	e01f      	b.n	8007d46 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d01b      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3
 8007d16:	e016      	b.n	8007d46 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d107      	bne.n	8007d36 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f022 0208 	bic.w	r2, r2, #8
 8007d34:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d4a:	f003 031f 	and.w	r3, r3, #31
 8007d4e:	2220      	movs	r2, #32
 8007d50:	409a      	lsls	r2, r3
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	4013      	ands	r3, r2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 8110 	beq.w	8007f7c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a2c      	ldr	r2, [pc, #176]	@ (8007e14 <HAL_DMA_IRQHandler+0x690>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d04a      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8007e18 <HAL_DMA_IRQHandler+0x694>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d045      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a29      	ldr	r2, [pc, #164]	@ (8007e1c <HAL_DMA_IRQHandler+0x698>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d040      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a28      	ldr	r2, [pc, #160]	@ (8007e20 <HAL_DMA_IRQHandler+0x69c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d03b      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a26      	ldr	r2, [pc, #152]	@ (8007e24 <HAL_DMA_IRQHandler+0x6a0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d036      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a25      	ldr	r2, [pc, #148]	@ (8007e28 <HAL_DMA_IRQHandler+0x6a4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d031      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a23      	ldr	r2, [pc, #140]	@ (8007e2c <HAL_DMA_IRQHandler+0x6a8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d02c      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a22      	ldr	r2, [pc, #136]	@ (8007e30 <HAL_DMA_IRQHandler+0x6ac>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d027      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a20      	ldr	r2, [pc, #128]	@ (8007e34 <HAL_DMA_IRQHandler+0x6b0>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d022      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a1f      	ldr	r2, [pc, #124]	@ (8007e38 <HAL_DMA_IRQHandler+0x6b4>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d01d      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8007e3c <HAL_DMA_IRQHandler+0x6b8>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d018      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a1c      	ldr	r2, [pc, #112]	@ (8007e40 <HAL_DMA_IRQHandler+0x6bc>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d013      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a1a      	ldr	r2, [pc, #104]	@ (8007e44 <HAL_DMA_IRQHandler+0x6c0>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d00e      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a19      	ldr	r2, [pc, #100]	@ (8007e48 <HAL_DMA_IRQHandler+0x6c4>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d009      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a17      	ldr	r2, [pc, #92]	@ (8007e4c <HAL_DMA_IRQHandler+0x6c8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d004      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x678>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a16      	ldr	r2, [pc, #88]	@ (8007e50 <HAL_DMA_IRQHandler+0x6cc>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d12b      	bne.n	8007e54 <HAL_DMA_IRQHandler+0x6d0>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	bf14      	ite	ne
 8007e0a:	2301      	movne	r3, #1
 8007e0c:	2300      	moveq	r3, #0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	e02a      	b.n	8007e68 <HAL_DMA_IRQHandler+0x6e4>
 8007e12:	bf00      	nop
 8007e14:	40020010 	.word	0x40020010
 8007e18:	40020028 	.word	0x40020028
 8007e1c:	40020040 	.word	0x40020040
 8007e20:	40020058 	.word	0x40020058
 8007e24:	40020070 	.word	0x40020070
 8007e28:	40020088 	.word	0x40020088
 8007e2c:	400200a0 	.word	0x400200a0
 8007e30:	400200b8 	.word	0x400200b8
 8007e34:	40020410 	.word	0x40020410
 8007e38:	40020428 	.word	0x40020428
 8007e3c:	40020440 	.word	0x40020440
 8007e40:	40020458 	.word	0x40020458
 8007e44:	40020470 	.word	0x40020470
 8007e48:	40020488 	.word	0x40020488
 8007e4c:	400204a0 	.word	0x400204a0
 8007e50:	400204b8 	.word	0x400204b8
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bf14      	ite	ne
 8007e62:	2301      	movne	r3, #1
 8007e64:	2300      	moveq	r3, #0
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 8087 	beq.w	8007f7c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	2220      	movs	r2, #32
 8007e78:	409a      	lsls	r2, r3
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d139      	bne.n	8007efe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0216 	bic.w	r2, r2, #22
 8007e98:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	695a      	ldr	r2, [r3, #20]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ea8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d103      	bne.n	8007eba <HAL_DMA_IRQHandler+0x736>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d007      	beq.n	8007eca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0208 	bic.w	r2, r2, #8
 8007ec8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ece:	f003 031f 	and.w	r3, r3, #31
 8007ed2:	223f      	movs	r2, #63	@ 0x3f
 8007ed4:	409a      	lsls	r2, r3
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 834a 	beq.w	8008588 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
          }
          return;
 8007efc:	e344      	b.n	8008588 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d018      	beq.n	8007f3e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d108      	bne.n	8007f2c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d02c      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
 8007f2a:	e027      	b.n	8007f7c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d023      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	4798      	blx	r3
 8007f3c:	e01e      	b.n	8007f7c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10f      	bne.n	8007f6c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0210 	bic.w	r2, r2, #16
 8007f5a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 8306 	beq.w	8008592 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 8088 	beq.w	80080a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2204      	movs	r2, #4
 8007f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a7a      	ldr	r2, [pc, #488]	@ (800818c <HAL_DMA_IRQHandler+0xa08>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d04a      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a79      	ldr	r2, [pc, #484]	@ (8008190 <HAL_DMA_IRQHandler+0xa0c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d045      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a77      	ldr	r2, [pc, #476]	@ (8008194 <HAL_DMA_IRQHandler+0xa10>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d040      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a76      	ldr	r2, [pc, #472]	@ (8008198 <HAL_DMA_IRQHandler+0xa14>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d03b      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a74      	ldr	r2, [pc, #464]	@ (800819c <HAL_DMA_IRQHandler+0xa18>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d036      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a73      	ldr	r2, [pc, #460]	@ (80081a0 <HAL_DMA_IRQHandler+0xa1c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d031      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a71      	ldr	r2, [pc, #452]	@ (80081a4 <HAL_DMA_IRQHandler+0xa20>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d02c      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a70      	ldr	r2, [pc, #448]	@ (80081a8 <HAL_DMA_IRQHandler+0xa24>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d027      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a6e      	ldr	r2, [pc, #440]	@ (80081ac <HAL_DMA_IRQHandler+0xa28>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d022      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a6d      	ldr	r2, [pc, #436]	@ (80081b0 <HAL_DMA_IRQHandler+0xa2c>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d01d      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a6b      	ldr	r2, [pc, #428]	@ (80081b4 <HAL_DMA_IRQHandler+0xa30>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d018      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a6a      	ldr	r2, [pc, #424]	@ (80081b8 <HAL_DMA_IRQHandler+0xa34>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d013      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a68      	ldr	r2, [pc, #416]	@ (80081bc <HAL_DMA_IRQHandler+0xa38>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d00e      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a67      	ldr	r2, [pc, #412]	@ (80081c0 <HAL_DMA_IRQHandler+0xa3c>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d009      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a65      	ldr	r2, [pc, #404]	@ (80081c4 <HAL_DMA_IRQHandler+0xa40>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d004      	beq.n	800803c <HAL_DMA_IRQHandler+0x8b8>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a64      	ldr	r2, [pc, #400]	@ (80081c8 <HAL_DMA_IRQHandler+0xa44>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d108      	bne.n	800804e <HAL_DMA_IRQHandler+0x8ca>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 0201 	bic.w	r2, r2, #1
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	e007      	b.n	800805e <HAL_DMA_IRQHandler+0x8da>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 0201 	bic.w	r2, r2, #1
 800805c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3301      	adds	r3, #1
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008066:	429a      	cmp	r2, r3
 8008068:	d307      	bcc.n	800807a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1f2      	bne.n	800805e <HAL_DMA_IRQHandler+0x8da>
 8008078:	e000      	b.n	800807c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800807a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d004      	beq.n	8008094 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2203      	movs	r2, #3
 800808e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008092:	e003      	b.n	800809c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 8272 	beq.w	8008592 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4798      	blx	r3
 80080b6:	e26c      	b.n	8008592 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a43      	ldr	r2, [pc, #268]	@ (80081cc <HAL_DMA_IRQHandler+0xa48>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d022      	beq.n	8008108 <HAL_DMA_IRQHandler+0x984>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a42      	ldr	r2, [pc, #264]	@ (80081d0 <HAL_DMA_IRQHandler+0xa4c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d01d      	beq.n	8008108 <HAL_DMA_IRQHandler+0x984>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a40      	ldr	r2, [pc, #256]	@ (80081d4 <HAL_DMA_IRQHandler+0xa50>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d018      	beq.n	8008108 <HAL_DMA_IRQHandler+0x984>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a3f      	ldr	r2, [pc, #252]	@ (80081d8 <HAL_DMA_IRQHandler+0xa54>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d013      	beq.n	8008108 <HAL_DMA_IRQHandler+0x984>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a3d      	ldr	r2, [pc, #244]	@ (80081dc <HAL_DMA_IRQHandler+0xa58>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00e      	beq.n	8008108 <HAL_DMA_IRQHandler+0x984>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a3c      	ldr	r2, [pc, #240]	@ (80081e0 <HAL_DMA_IRQHandler+0xa5c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d009      	beq.n	8008108 <HAL_DMA_IRQHandler+0x984>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a3a      	ldr	r2, [pc, #232]	@ (80081e4 <HAL_DMA_IRQHandler+0xa60>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d004      	beq.n	8008108 <HAL_DMA_IRQHandler+0x984>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a39      	ldr	r2, [pc, #228]	@ (80081e8 <HAL_DMA_IRQHandler+0xa64>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d101      	bne.n	800810c <HAL_DMA_IRQHandler+0x988>
 8008108:	2301      	movs	r3, #1
 800810a:	e000      	b.n	800810e <HAL_DMA_IRQHandler+0x98a>
 800810c:	2300      	movs	r3, #0
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 823f 	beq.w	8008592 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008120:	f003 031f 	and.w	r3, r3, #31
 8008124:	2204      	movs	r2, #4
 8008126:	409a      	lsls	r2, r3
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	4013      	ands	r3, r2
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 80cd 	beq.w	80082cc <HAL_DMA_IRQHandler+0xb48>
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 80c7 	beq.w	80082cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008142:	f003 031f 	and.w	r3, r3, #31
 8008146:	2204      	movs	r2, #4
 8008148:	409a      	lsls	r2, r3
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d049      	beq.n	80081ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d109      	bne.n	8008176 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8210 	beq.w	800858c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008174:	e20a      	b.n	800858c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 8206 	beq.w	800858c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008188:	e200      	b.n	800858c <HAL_DMA_IRQHandler+0xe08>
 800818a:	bf00      	nop
 800818c:	40020010 	.word	0x40020010
 8008190:	40020028 	.word	0x40020028
 8008194:	40020040 	.word	0x40020040
 8008198:	40020058 	.word	0x40020058
 800819c:	40020070 	.word	0x40020070
 80081a0:	40020088 	.word	0x40020088
 80081a4:	400200a0 	.word	0x400200a0
 80081a8:	400200b8 	.word	0x400200b8
 80081ac:	40020410 	.word	0x40020410
 80081b0:	40020428 	.word	0x40020428
 80081b4:	40020440 	.word	0x40020440
 80081b8:	40020458 	.word	0x40020458
 80081bc:	40020470 	.word	0x40020470
 80081c0:	40020488 	.word	0x40020488
 80081c4:	400204a0 	.word	0x400204a0
 80081c8:	400204b8 	.word	0x400204b8
 80081cc:	58025408 	.word	0x58025408
 80081d0:	5802541c 	.word	0x5802541c
 80081d4:	58025430 	.word	0x58025430
 80081d8:	58025444 	.word	0x58025444
 80081dc:	58025458 	.word	0x58025458
 80081e0:	5802546c 	.word	0x5802546c
 80081e4:	58025480 	.word	0x58025480
 80081e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f003 0320 	and.w	r3, r3, #32
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d160      	bne.n	80082b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a7f      	ldr	r2, [pc, #508]	@ (80083f8 <HAL_DMA_IRQHandler+0xc74>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d04a      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a7d      	ldr	r2, [pc, #500]	@ (80083fc <HAL_DMA_IRQHandler+0xc78>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d045      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a7c      	ldr	r2, [pc, #496]	@ (8008400 <HAL_DMA_IRQHandler+0xc7c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d040      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a7a      	ldr	r2, [pc, #488]	@ (8008404 <HAL_DMA_IRQHandler+0xc80>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d03b      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a79      	ldr	r2, [pc, #484]	@ (8008408 <HAL_DMA_IRQHandler+0xc84>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d036      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a77      	ldr	r2, [pc, #476]	@ (800840c <HAL_DMA_IRQHandler+0xc88>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d031      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a76      	ldr	r2, [pc, #472]	@ (8008410 <HAL_DMA_IRQHandler+0xc8c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d02c      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a74      	ldr	r2, [pc, #464]	@ (8008414 <HAL_DMA_IRQHandler+0xc90>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d027      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a73      	ldr	r2, [pc, #460]	@ (8008418 <HAL_DMA_IRQHandler+0xc94>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d022      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a71      	ldr	r2, [pc, #452]	@ (800841c <HAL_DMA_IRQHandler+0xc98>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d01d      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a70      	ldr	r2, [pc, #448]	@ (8008420 <HAL_DMA_IRQHandler+0xc9c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d018      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a6e      	ldr	r2, [pc, #440]	@ (8008424 <HAL_DMA_IRQHandler+0xca0>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d013      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a6d      	ldr	r2, [pc, #436]	@ (8008428 <HAL_DMA_IRQHandler+0xca4>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00e      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a6b      	ldr	r2, [pc, #428]	@ (800842c <HAL_DMA_IRQHandler+0xca8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d009      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a6a      	ldr	r2, [pc, #424]	@ (8008430 <HAL_DMA_IRQHandler+0xcac>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d004      	beq.n	8008296 <HAL_DMA_IRQHandler+0xb12>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a68      	ldr	r2, [pc, #416]	@ (8008434 <HAL_DMA_IRQHandler+0xcb0>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d108      	bne.n	80082a8 <HAL_DMA_IRQHandler+0xb24>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 0208 	bic.w	r2, r2, #8
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	e007      	b.n	80082b8 <HAL_DMA_IRQHandler+0xb34>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0204 	bic.w	r2, r2, #4
 80082b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8165 	beq.w	800858c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082ca:	e15f      	b.n	800858c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082d0:	f003 031f 	and.w	r3, r3, #31
 80082d4:	2202      	movs	r2, #2
 80082d6:	409a      	lsls	r2, r3
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	4013      	ands	r3, r2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 80c5 	beq.w	800846c <HAL_DMA_IRQHandler+0xce8>
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 80bf 	beq.w	800846c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082f2:	f003 031f 	and.w	r3, r3, #31
 80082f6:	2202      	movs	r2, #2
 80082f8:	409a      	lsls	r2, r3
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d018      	beq.n	800833a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 813a 	beq.w	8008590 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008324:	e134      	b.n	8008590 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 8130 	beq.w	8008590 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008338:	e12a      	b.n	8008590 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f003 0320 	and.w	r3, r3, #32
 8008340:	2b00      	cmp	r3, #0
 8008342:	f040 8089 	bne.w	8008458 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a2b      	ldr	r2, [pc, #172]	@ (80083f8 <HAL_DMA_IRQHandler+0xc74>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d04a      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a29      	ldr	r2, [pc, #164]	@ (80083fc <HAL_DMA_IRQHandler+0xc78>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d045      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a28      	ldr	r2, [pc, #160]	@ (8008400 <HAL_DMA_IRQHandler+0xc7c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d040      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a26      	ldr	r2, [pc, #152]	@ (8008404 <HAL_DMA_IRQHandler+0xc80>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d03b      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a25      	ldr	r2, [pc, #148]	@ (8008408 <HAL_DMA_IRQHandler+0xc84>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d036      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a23      	ldr	r2, [pc, #140]	@ (800840c <HAL_DMA_IRQHandler+0xc88>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d031      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a22      	ldr	r2, [pc, #136]	@ (8008410 <HAL_DMA_IRQHandler+0xc8c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d02c      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a20      	ldr	r2, [pc, #128]	@ (8008414 <HAL_DMA_IRQHandler+0xc90>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d027      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a1f      	ldr	r2, [pc, #124]	@ (8008418 <HAL_DMA_IRQHandler+0xc94>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d022      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a1d      	ldr	r2, [pc, #116]	@ (800841c <HAL_DMA_IRQHandler+0xc98>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d01d      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008420 <HAL_DMA_IRQHandler+0xc9c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d018      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008424 <HAL_DMA_IRQHandler+0xca0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d013      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a19      	ldr	r2, [pc, #100]	@ (8008428 <HAL_DMA_IRQHandler+0xca4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00e      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a17      	ldr	r2, [pc, #92]	@ (800842c <HAL_DMA_IRQHandler+0xca8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d009      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a16      	ldr	r2, [pc, #88]	@ (8008430 <HAL_DMA_IRQHandler+0xcac>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d004      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xc62>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a14      	ldr	r2, [pc, #80]	@ (8008434 <HAL_DMA_IRQHandler+0xcb0>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d128      	bne.n	8008438 <HAL_DMA_IRQHandler+0xcb4>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0214 	bic.w	r2, r2, #20
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	e027      	b.n	8008448 <HAL_DMA_IRQHandler+0xcc4>
 80083f8:	40020010 	.word	0x40020010
 80083fc:	40020028 	.word	0x40020028
 8008400:	40020040 	.word	0x40020040
 8008404:	40020058 	.word	0x40020058
 8008408:	40020070 	.word	0x40020070
 800840c:	40020088 	.word	0x40020088
 8008410:	400200a0 	.word	0x400200a0
 8008414:	400200b8 	.word	0x400200b8
 8008418:	40020410 	.word	0x40020410
 800841c:	40020428 	.word	0x40020428
 8008420:	40020440 	.word	0x40020440
 8008424:	40020458 	.word	0x40020458
 8008428:	40020470 	.word	0x40020470
 800842c:	40020488 	.word	0x40020488
 8008430:	400204a0 	.word	0x400204a0
 8008434:	400204b8 	.word	0x400204b8
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 020a 	bic.w	r2, r2, #10
 8008446:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 8097 	beq.w	8008590 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800846a:	e091      	b.n	8008590 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	2208      	movs	r2, #8
 8008476:	409a      	lsls	r2, r3
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	4013      	ands	r3, r2
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 8088 	beq.w	8008592 <HAL_DMA_IRQHandler+0xe0e>
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 8082 	beq.w	8008592 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a41      	ldr	r2, [pc, #260]	@ (8008598 <HAL_DMA_IRQHandler+0xe14>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d04a      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a3f      	ldr	r2, [pc, #252]	@ (800859c <HAL_DMA_IRQHandler+0xe18>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d045      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a3e      	ldr	r2, [pc, #248]	@ (80085a0 <HAL_DMA_IRQHandler+0xe1c>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d040      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a3c      	ldr	r2, [pc, #240]	@ (80085a4 <HAL_DMA_IRQHandler+0xe20>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d03b      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a3b      	ldr	r2, [pc, #236]	@ (80085a8 <HAL_DMA_IRQHandler+0xe24>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d036      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a39      	ldr	r2, [pc, #228]	@ (80085ac <HAL_DMA_IRQHandler+0xe28>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d031      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a38      	ldr	r2, [pc, #224]	@ (80085b0 <HAL_DMA_IRQHandler+0xe2c>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d02c      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a36      	ldr	r2, [pc, #216]	@ (80085b4 <HAL_DMA_IRQHandler+0xe30>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d027      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a35      	ldr	r2, [pc, #212]	@ (80085b8 <HAL_DMA_IRQHandler+0xe34>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d022      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a33      	ldr	r2, [pc, #204]	@ (80085bc <HAL_DMA_IRQHandler+0xe38>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d01d      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a32      	ldr	r2, [pc, #200]	@ (80085c0 <HAL_DMA_IRQHandler+0xe3c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d018      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a30      	ldr	r2, [pc, #192]	@ (80085c4 <HAL_DMA_IRQHandler+0xe40>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d013      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a2f      	ldr	r2, [pc, #188]	@ (80085c8 <HAL_DMA_IRQHandler+0xe44>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d00e      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a2d      	ldr	r2, [pc, #180]	@ (80085cc <HAL_DMA_IRQHandler+0xe48>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d009      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a2c      	ldr	r2, [pc, #176]	@ (80085d0 <HAL_DMA_IRQHandler+0xe4c>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d004      	beq.n	800852e <HAL_DMA_IRQHandler+0xdaa>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a2a      	ldr	r2, [pc, #168]	@ (80085d4 <HAL_DMA_IRQHandler+0xe50>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d108      	bne.n	8008540 <HAL_DMA_IRQHandler+0xdbc>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 021c 	bic.w	r2, r2, #28
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	e007      	b.n	8008550 <HAL_DMA_IRQHandler+0xdcc>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 020e 	bic.w	r2, r2, #14
 800854e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008554:	f003 031f 	and.w	r3, r3, #31
 8008558:	2201      	movs	r2, #1
 800855a:	409a      	lsls	r2, r3
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857a:	2b00      	cmp	r3, #0
 800857c:	d009      	beq.n	8008592 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4798      	blx	r3
 8008586:	e004      	b.n	8008592 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008588:	bf00      	nop
 800858a:	e002      	b.n	8008592 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800858c:	bf00      	nop
 800858e:	e000      	b.n	8008592 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008590:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008592:	3728      	adds	r7, #40	@ 0x28
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	40020010 	.word	0x40020010
 800859c:	40020028 	.word	0x40020028
 80085a0:	40020040 	.word	0x40020040
 80085a4:	40020058 	.word	0x40020058
 80085a8:	40020070 	.word	0x40020070
 80085ac:	40020088 	.word	0x40020088
 80085b0:	400200a0 	.word	0x400200a0
 80085b4:	400200b8 	.word	0x400200b8
 80085b8:	40020410 	.word	0x40020410
 80085bc:	40020428 	.word	0x40020428
 80085c0:	40020440 	.word	0x40020440
 80085c4:	40020458 	.word	0x40020458
 80085c8:	40020470 	.word	0x40020470
 80085cc:	40020488 	.word	0x40020488
 80085d0:	400204a0 	.word	0x400204a0
 80085d4:	400204b8 	.word	0x400204b8

080085d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a7f      	ldr	r2, [pc, #508]	@ (80087f4 <DMA_SetConfig+0x21c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d072      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a7d      	ldr	r2, [pc, #500]	@ (80087f8 <DMA_SetConfig+0x220>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d06d      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a7c      	ldr	r2, [pc, #496]	@ (80087fc <DMA_SetConfig+0x224>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d068      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a7a      	ldr	r2, [pc, #488]	@ (8008800 <DMA_SetConfig+0x228>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d063      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a79      	ldr	r2, [pc, #484]	@ (8008804 <DMA_SetConfig+0x22c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d05e      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a77      	ldr	r2, [pc, #476]	@ (8008808 <DMA_SetConfig+0x230>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d059      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a76      	ldr	r2, [pc, #472]	@ (800880c <DMA_SetConfig+0x234>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d054      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a74      	ldr	r2, [pc, #464]	@ (8008810 <DMA_SetConfig+0x238>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d04f      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a73      	ldr	r2, [pc, #460]	@ (8008814 <DMA_SetConfig+0x23c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d04a      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a71      	ldr	r2, [pc, #452]	@ (8008818 <DMA_SetConfig+0x240>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d045      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a70      	ldr	r2, [pc, #448]	@ (800881c <DMA_SetConfig+0x244>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d040      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a6e      	ldr	r2, [pc, #440]	@ (8008820 <DMA_SetConfig+0x248>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d03b      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a6d      	ldr	r2, [pc, #436]	@ (8008824 <DMA_SetConfig+0x24c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d036      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a6b      	ldr	r2, [pc, #428]	@ (8008828 <DMA_SetConfig+0x250>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d031      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a6a      	ldr	r2, [pc, #424]	@ (800882c <DMA_SetConfig+0x254>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d02c      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a68      	ldr	r2, [pc, #416]	@ (8008830 <DMA_SetConfig+0x258>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d027      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a67      	ldr	r2, [pc, #412]	@ (8008834 <DMA_SetConfig+0x25c>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d022      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a65      	ldr	r2, [pc, #404]	@ (8008838 <DMA_SetConfig+0x260>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d01d      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a64      	ldr	r2, [pc, #400]	@ (800883c <DMA_SetConfig+0x264>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d018      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a62      	ldr	r2, [pc, #392]	@ (8008840 <DMA_SetConfig+0x268>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d013      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a61      	ldr	r2, [pc, #388]	@ (8008844 <DMA_SetConfig+0x26c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d00e      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a5f      	ldr	r2, [pc, #380]	@ (8008848 <DMA_SetConfig+0x270>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d009      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a5e      	ldr	r2, [pc, #376]	@ (800884c <DMA_SetConfig+0x274>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d004      	beq.n	80086e2 <DMA_SetConfig+0x10a>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a5c      	ldr	r2, [pc, #368]	@ (8008850 <DMA_SetConfig+0x278>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d101      	bne.n	80086e6 <DMA_SetConfig+0x10e>
 80086e2:	2301      	movs	r3, #1
 80086e4:	e000      	b.n	80086e8 <DMA_SetConfig+0x110>
 80086e6:	2300      	movs	r3, #0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00d      	beq.n	8008708 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80086f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d004      	beq.n	8008708 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008706:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a39      	ldr	r2, [pc, #228]	@ (80087f4 <DMA_SetConfig+0x21c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d04a      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a38      	ldr	r2, [pc, #224]	@ (80087f8 <DMA_SetConfig+0x220>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d045      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a36      	ldr	r2, [pc, #216]	@ (80087fc <DMA_SetConfig+0x224>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d040      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a35      	ldr	r2, [pc, #212]	@ (8008800 <DMA_SetConfig+0x228>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d03b      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a33      	ldr	r2, [pc, #204]	@ (8008804 <DMA_SetConfig+0x22c>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d036      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a32      	ldr	r2, [pc, #200]	@ (8008808 <DMA_SetConfig+0x230>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d031      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a30      	ldr	r2, [pc, #192]	@ (800880c <DMA_SetConfig+0x234>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d02c      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a2f      	ldr	r2, [pc, #188]	@ (8008810 <DMA_SetConfig+0x238>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d027      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a2d      	ldr	r2, [pc, #180]	@ (8008814 <DMA_SetConfig+0x23c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d022      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a2c      	ldr	r2, [pc, #176]	@ (8008818 <DMA_SetConfig+0x240>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d01d      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a2a      	ldr	r2, [pc, #168]	@ (800881c <DMA_SetConfig+0x244>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d018      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a29      	ldr	r2, [pc, #164]	@ (8008820 <DMA_SetConfig+0x248>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d013      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a27      	ldr	r2, [pc, #156]	@ (8008824 <DMA_SetConfig+0x24c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00e      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a26      	ldr	r2, [pc, #152]	@ (8008828 <DMA_SetConfig+0x250>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d009      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a24      	ldr	r2, [pc, #144]	@ (800882c <DMA_SetConfig+0x254>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d004      	beq.n	80087a8 <DMA_SetConfig+0x1d0>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a23      	ldr	r2, [pc, #140]	@ (8008830 <DMA_SetConfig+0x258>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d101      	bne.n	80087ac <DMA_SetConfig+0x1d4>
 80087a8:	2301      	movs	r3, #1
 80087aa:	e000      	b.n	80087ae <DMA_SetConfig+0x1d6>
 80087ac:	2300      	movs	r3, #0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d059      	beq.n	8008866 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087b6:	f003 031f 	and.w	r3, r3, #31
 80087ba:	223f      	movs	r2, #63	@ 0x3f
 80087bc:	409a      	lsls	r2, r3
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80087d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	2b40      	cmp	r3, #64	@ 0x40
 80087e0:	d138      	bne.n	8008854 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80087f2:	e086      	b.n	8008902 <DMA_SetConfig+0x32a>
 80087f4:	40020010 	.word	0x40020010
 80087f8:	40020028 	.word	0x40020028
 80087fc:	40020040 	.word	0x40020040
 8008800:	40020058 	.word	0x40020058
 8008804:	40020070 	.word	0x40020070
 8008808:	40020088 	.word	0x40020088
 800880c:	400200a0 	.word	0x400200a0
 8008810:	400200b8 	.word	0x400200b8
 8008814:	40020410 	.word	0x40020410
 8008818:	40020428 	.word	0x40020428
 800881c:	40020440 	.word	0x40020440
 8008820:	40020458 	.word	0x40020458
 8008824:	40020470 	.word	0x40020470
 8008828:	40020488 	.word	0x40020488
 800882c:	400204a0 	.word	0x400204a0
 8008830:	400204b8 	.word	0x400204b8
 8008834:	58025408 	.word	0x58025408
 8008838:	5802541c 	.word	0x5802541c
 800883c:	58025430 	.word	0x58025430
 8008840:	58025444 	.word	0x58025444
 8008844:	58025458 	.word	0x58025458
 8008848:	5802546c 	.word	0x5802546c
 800884c:	58025480 	.word	0x58025480
 8008850:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	60da      	str	r2, [r3, #12]
}
 8008864:	e04d      	b.n	8008902 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a29      	ldr	r2, [pc, #164]	@ (8008910 <DMA_SetConfig+0x338>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d022      	beq.n	80088b6 <DMA_SetConfig+0x2de>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a27      	ldr	r2, [pc, #156]	@ (8008914 <DMA_SetConfig+0x33c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d01d      	beq.n	80088b6 <DMA_SetConfig+0x2de>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a26      	ldr	r2, [pc, #152]	@ (8008918 <DMA_SetConfig+0x340>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d018      	beq.n	80088b6 <DMA_SetConfig+0x2de>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a24      	ldr	r2, [pc, #144]	@ (800891c <DMA_SetConfig+0x344>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d013      	beq.n	80088b6 <DMA_SetConfig+0x2de>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a23      	ldr	r2, [pc, #140]	@ (8008920 <DMA_SetConfig+0x348>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d00e      	beq.n	80088b6 <DMA_SetConfig+0x2de>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a21      	ldr	r2, [pc, #132]	@ (8008924 <DMA_SetConfig+0x34c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d009      	beq.n	80088b6 <DMA_SetConfig+0x2de>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a20      	ldr	r2, [pc, #128]	@ (8008928 <DMA_SetConfig+0x350>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d004      	beq.n	80088b6 <DMA_SetConfig+0x2de>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a1e      	ldr	r2, [pc, #120]	@ (800892c <DMA_SetConfig+0x354>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d101      	bne.n	80088ba <DMA_SetConfig+0x2e2>
 80088b6:	2301      	movs	r3, #1
 80088b8:	e000      	b.n	80088bc <DMA_SetConfig+0x2e4>
 80088ba:	2300      	movs	r3, #0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d020      	beq.n	8008902 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c4:	f003 031f 	and.w	r3, r3, #31
 80088c8:	2201      	movs	r2, #1
 80088ca:	409a      	lsls	r2, r3
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	2b40      	cmp	r3, #64	@ 0x40
 80088de:	d108      	bne.n	80088f2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	60da      	str	r2, [r3, #12]
}
 80088f0:	e007      	b.n	8008902 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	60da      	str	r2, [r3, #12]
}
 8008902:	bf00      	nop
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	58025408 	.word	0x58025408
 8008914:	5802541c 	.word	0x5802541c
 8008918:	58025430 	.word	0x58025430
 800891c:	58025444 	.word	0x58025444
 8008920:	58025458 	.word	0x58025458
 8008924:	5802546c 	.word	0x5802546c
 8008928:	58025480 	.word	0x58025480
 800892c:	58025494 	.word	0x58025494

08008930 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a42      	ldr	r2, [pc, #264]	@ (8008a48 <DMA_CalcBaseAndBitshift+0x118>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d04a      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a41      	ldr	r2, [pc, #260]	@ (8008a4c <DMA_CalcBaseAndBitshift+0x11c>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d045      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a3f      	ldr	r2, [pc, #252]	@ (8008a50 <DMA_CalcBaseAndBitshift+0x120>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d040      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a3e      	ldr	r2, [pc, #248]	@ (8008a54 <DMA_CalcBaseAndBitshift+0x124>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d03b      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a3c      	ldr	r2, [pc, #240]	@ (8008a58 <DMA_CalcBaseAndBitshift+0x128>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d036      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a3b      	ldr	r2, [pc, #236]	@ (8008a5c <DMA_CalcBaseAndBitshift+0x12c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d031      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a39      	ldr	r2, [pc, #228]	@ (8008a60 <DMA_CalcBaseAndBitshift+0x130>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d02c      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a38      	ldr	r2, [pc, #224]	@ (8008a64 <DMA_CalcBaseAndBitshift+0x134>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d027      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a36      	ldr	r2, [pc, #216]	@ (8008a68 <DMA_CalcBaseAndBitshift+0x138>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d022      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a35      	ldr	r2, [pc, #212]	@ (8008a6c <DMA_CalcBaseAndBitshift+0x13c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d01d      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a33      	ldr	r2, [pc, #204]	@ (8008a70 <DMA_CalcBaseAndBitshift+0x140>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d018      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a32      	ldr	r2, [pc, #200]	@ (8008a74 <DMA_CalcBaseAndBitshift+0x144>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d013      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a30      	ldr	r2, [pc, #192]	@ (8008a78 <DMA_CalcBaseAndBitshift+0x148>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d00e      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a2f      	ldr	r2, [pc, #188]	@ (8008a7c <DMA_CalcBaseAndBitshift+0x14c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d009      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a2d      	ldr	r2, [pc, #180]	@ (8008a80 <DMA_CalcBaseAndBitshift+0x150>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d004      	beq.n	80089d8 <DMA_CalcBaseAndBitshift+0xa8>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a2c      	ldr	r2, [pc, #176]	@ (8008a84 <DMA_CalcBaseAndBitshift+0x154>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d101      	bne.n	80089dc <DMA_CalcBaseAndBitshift+0xac>
 80089d8:	2301      	movs	r3, #1
 80089da:	e000      	b.n	80089de <DMA_CalcBaseAndBitshift+0xae>
 80089dc:	2300      	movs	r3, #0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d024      	beq.n	8008a2c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	3b10      	subs	r3, #16
 80089ea:	4a27      	ldr	r2, [pc, #156]	@ (8008a88 <DMA_CalcBaseAndBitshift+0x158>)
 80089ec:	fba2 2303 	umull	r2, r3, r2, r3
 80089f0:	091b      	lsrs	r3, r3, #4
 80089f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	4a24      	ldr	r2, [pc, #144]	@ (8008a8c <DMA_CalcBaseAndBitshift+0x15c>)
 80089fc:	5cd3      	ldrb	r3, [r2, r3]
 80089fe:	461a      	mov	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d908      	bls.n	8008a1c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	4b1f      	ldr	r3, [pc, #124]	@ (8008a90 <DMA_CalcBaseAndBitshift+0x160>)
 8008a12:	4013      	ands	r3, r2
 8008a14:	1d1a      	adds	r2, r3, #4
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a1a:	e00d      	b.n	8008a38 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	461a      	mov	r2, r3
 8008a22:	4b1b      	ldr	r3, [pc, #108]	@ (8008a90 <DMA_CalcBaseAndBitshift+0x160>)
 8008a24:	4013      	ands	r3, r2
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a2a:	e005      	b.n	8008a38 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	40020010 	.word	0x40020010
 8008a4c:	40020028 	.word	0x40020028
 8008a50:	40020040 	.word	0x40020040
 8008a54:	40020058 	.word	0x40020058
 8008a58:	40020070 	.word	0x40020070
 8008a5c:	40020088 	.word	0x40020088
 8008a60:	400200a0 	.word	0x400200a0
 8008a64:	400200b8 	.word	0x400200b8
 8008a68:	40020410 	.word	0x40020410
 8008a6c:	40020428 	.word	0x40020428
 8008a70:	40020440 	.word	0x40020440
 8008a74:	40020458 	.word	0x40020458
 8008a78:	40020470 	.word	0x40020470
 8008a7c:	40020488 	.word	0x40020488
 8008a80:	400204a0 	.word	0x400204a0
 8008a84:	400204b8 	.word	0x400204b8
 8008a88:	aaaaaaab 	.word	0xaaaaaaab
 8008a8c:	08015c64 	.word	0x08015c64
 8008a90:	fffffc00 	.word	0xfffffc00

08008a94 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d120      	bne.n	8008aea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d858      	bhi.n	8008b62 <DMA_CheckFifoParam+0xce>
 8008ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab8 <DMA_CheckFifoParam+0x24>)
 8008ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab6:	bf00      	nop
 8008ab8:	08008ac9 	.word	0x08008ac9
 8008abc:	08008adb 	.word	0x08008adb
 8008ac0:	08008ac9 	.word	0x08008ac9
 8008ac4:	08008b63 	.word	0x08008b63
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008acc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d048      	beq.n	8008b66 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ad8:	e045      	b.n	8008b66 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ade:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008ae2:	d142      	bne.n	8008b6a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ae8:	e03f      	b.n	8008b6a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008af2:	d123      	bne.n	8008b3c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d838      	bhi.n	8008b6e <DMA_CheckFifoParam+0xda>
 8008afc:	a201      	add	r2, pc, #4	@ (adr r2, 8008b04 <DMA_CheckFifoParam+0x70>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b15 	.word	0x08008b15
 8008b08:	08008b1b 	.word	0x08008b1b
 8008b0c:	08008b15 	.word	0x08008b15
 8008b10:	08008b2d 	.word	0x08008b2d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	73fb      	strb	r3, [r7, #15]
        break;
 8008b18:	e030      	b.n	8008b7c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d025      	beq.n	8008b72 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b2a:	e022      	b.n	8008b72 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008b34:	d11f      	bne.n	8008b76 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b3a:	e01c      	b.n	8008b76 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d902      	bls.n	8008b4a <DMA_CheckFifoParam+0xb6>
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d003      	beq.n	8008b50 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008b48:	e018      	b.n	8008b7c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	73fb      	strb	r3, [r7, #15]
        break;
 8008b4e:	e015      	b.n	8008b7c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00e      	beq.n	8008b7a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b60:	e00b      	b.n	8008b7a <DMA_CheckFifoParam+0xe6>
        break;
 8008b62:	bf00      	nop
 8008b64:	e00a      	b.n	8008b7c <DMA_CheckFifoParam+0xe8>
        break;
 8008b66:	bf00      	nop
 8008b68:	e008      	b.n	8008b7c <DMA_CheckFifoParam+0xe8>
        break;
 8008b6a:	bf00      	nop
 8008b6c:	e006      	b.n	8008b7c <DMA_CheckFifoParam+0xe8>
        break;
 8008b6e:	bf00      	nop
 8008b70:	e004      	b.n	8008b7c <DMA_CheckFifoParam+0xe8>
        break;
 8008b72:	bf00      	nop
 8008b74:	e002      	b.n	8008b7c <DMA_CheckFifoParam+0xe8>
        break;
 8008b76:	bf00      	nop
 8008b78:	e000      	b.n	8008b7c <DMA_CheckFifoParam+0xe8>
    break;
 8008b7a:	bf00      	nop
    }
  }

  return status;
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop

08008b8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a38      	ldr	r2, [pc, #224]	@ (8008c80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d022      	beq.n	8008bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a36      	ldr	r2, [pc, #216]	@ (8008c84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d01d      	beq.n	8008bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a35      	ldr	r2, [pc, #212]	@ (8008c88 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d018      	beq.n	8008bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a33      	ldr	r2, [pc, #204]	@ (8008c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d013      	beq.n	8008bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a32      	ldr	r2, [pc, #200]	@ (8008c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d00e      	beq.n	8008bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a30      	ldr	r2, [pc, #192]	@ (8008c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d009      	beq.n	8008bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a2f      	ldr	r2, [pc, #188]	@ (8008c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d004      	beq.n	8008bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a2d      	ldr	r2, [pc, #180]	@ (8008c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d101      	bne.n	8008bee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d01a      	beq.n	8008c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	3b08      	subs	r3, #8
 8008bfc:	4a28      	ldr	r2, [pc, #160]	@ (8008ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008c02:	091b      	lsrs	r3, r3, #4
 8008c04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4b26      	ldr	r3, [pc, #152]	@ (8008ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a24      	ldr	r2, [pc, #144]	@ (8008ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008c18:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f003 031f 	and.w	r3, r3, #31
 8008c20:	2201      	movs	r2, #1
 8008c22:	409a      	lsls	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008c28:	e024      	b.n	8008c74 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	3b10      	subs	r3, #16
 8008c32:	4a1e      	ldr	r2, [pc, #120]	@ (8008cac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008c34:	fba2 2303 	umull	r2, r3, r2, r3
 8008c38:	091b      	lsrs	r3, r3, #4
 8008c3a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d806      	bhi.n	8008c52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	4a1b      	ldr	r2, [pc, #108]	@ (8008cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d902      	bls.n	8008c52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3308      	adds	r3, #8
 8008c50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	4b18      	ldr	r3, [pc, #96]	@ (8008cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a16      	ldr	r2, [pc, #88]	@ (8008cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008c64:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f003 031f 	and.w	r3, r3, #31
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	409a      	lsls	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	58025408 	.word	0x58025408
 8008c84:	5802541c 	.word	0x5802541c
 8008c88:	58025430 	.word	0x58025430
 8008c8c:	58025444 	.word	0x58025444
 8008c90:	58025458 	.word	0x58025458
 8008c94:	5802546c 	.word	0x5802546c
 8008c98:	58025480 	.word	0x58025480
 8008c9c:	58025494 	.word	0x58025494
 8008ca0:	cccccccd 	.word	0xcccccccd
 8008ca4:	16009600 	.word	0x16009600
 8008ca8:	58025880 	.word	0x58025880
 8008cac:	aaaaaaab 	.word	0xaaaaaaab
 8008cb0:	400204b8 	.word	0x400204b8
 8008cb4:	4002040f 	.word	0x4002040f
 8008cb8:	10008200 	.word	0x10008200
 8008cbc:	40020880 	.word	0x40020880

08008cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d04a      	beq.n	8008d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d847      	bhi.n	8008d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a25      	ldr	r2, [pc, #148]	@ (8008d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d022      	beq.n	8008d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a24      	ldr	r2, [pc, #144]	@ (8008d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d01d      	beq.n	8008d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a22      	ldr	r2, [pc, #136]	@ (8008d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d018      	beq.n	8008d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a21      	ldr	r2, [pc, #132]	@ (8008d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d013      	beq.n	8008d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a1f      	ldr	r2, [pc, #124]	@ (8008d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d00e      	beq.n	8008d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a1e      	ldr	r2, [pc, #120]	@ (8008d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d009      	beq.n	8008d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8008d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d004      	beq.n	8008d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a1b      	ldr	r2, [pc, #108]	@ (8008d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d101      	bne.n	8008d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e000      	b.n	8008d32 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008d30:	2300      	movs	r3, #0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00a      	beq.n	8008d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	4b17      	ldr	r3, [pc, #92]	@ (8008d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	461a      	mov	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a15      	ldr	r2, [pc, #84]	@ (8008d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008d48:	671a      	str	r2, [r3, #112]	@ 0x70
 8008d4a:	e009      	b.n	8008d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	4b14      	ldr	r3, [pc, #80]	@ (8008da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008d50:	4413      	add	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	461a      	mov	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a11      	ldr	r2, [pc, #68]	@ (8008da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008d5e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	2201      	movs	r2, #1
 8008d66:	409a      	lsls	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008d6c:	bf00      	nop
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	58025408 	.word	0x58025408
 8008d7c:	5802541c 	.word	0x5802541c
 8008d80:	58025430 	.word	0x58025430
 8008d84:	58025444 	.word	0x58025444
 8008d88:	58025458 	.word	0x58025458
 8008d8c:	5802546c 	.word	0x5802546c
 8008d90:	58025480 	.word	0x58025480
 8008d94:	58025494 	.word	0x58025494
 8008d98:	1600963f 	.word	0x1600963f
 8008d9c:	58025940 	.word	0x58025940
 8008da0:	1000823f 	.word	0x1000823f
 8008da4:	40020940 	.word	0x40020940

08008da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b089      	sub	sp, #36	@ 0x24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008db6:	4b89      	ldr	r3, [pc, #548]	@ (8008fdc <HAL_GPIO_Init+0x234>)
 8008db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008dba:	e194      	b.n	80090e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc8:	4013      	ands	r3, r2
 8008dca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 8186 	beq.w	80090e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	f003 0303 	and.w	r3, r3, #3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d005      	beq.n	8008dec <HAL_GPIO_Init+0x44>
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f003 0303 	and.w	r3, r3, #3
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d130      	bne.n	8008e4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	2203      	movs	r2, #3
 8008df8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfc:	43db      	mvns	r3, r3
 8008dfe:	69ba      	ldr	r2, [r7, #24]
 8008e00:	4013      	ands	r3, r2
 8008e02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e22:	2201      	movs	r2, #1
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2a:	43db      	mvns	r3, r3
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	091b      	lsrs	r3, r3, #4
 8008e38:	f003 0201 	and.w	r2, r3, #1
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f003 0303 	and.w	r3, r3, #3
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d017      	beq.n	8008e8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	2203      	movs	r2, #3
 8008e66:	fa02 f303 	lsl.w	r3, r2, r3
 8008e6a:	43db      	mvns	r3, r3
 8008e6c:	69ba      	ldr	r2, [r7, #24]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	689a      	ldr	r2, [r3, #8]
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d123      	bne.n	8008ede <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	08da      	lsrs	r2, r3, #3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3208      	adds	r2, #8
 8008e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	220f      	movs	r2, #15
 8008eae:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb2:	43db      	mvns	r3, r3
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	691a      	ldr	r2, [r3, #16]
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	f003 0307 	and.w	r3, r3, #7
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	08da      	lsrs	r2, r3, #3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3208      	adds	r2, #8
 8008ed8:	69b9      	ldr	r1, [r7, #24]
 8008eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	005b      	lsls	r3, r3, #1
 8008ee8:	2203      	movs	r2, #3
 8008eea:	fa02 f303 	lsl.w	r3, r2, r3
 8008eee:	43db      	mvns	r3, r3
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f003 0203 	and.w	r2, r3, #3
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	fa02 f303 	lsl.w	r3, r2, r3
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	69ba      	ldr	r2, [r7, #24]
 8008f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 80e0 	beq.w	80090e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f20:	4b2f      	ldr	r3, [pc, #188]	@ (8008fe0 <HAL_GPIO_Init+0x238>)
 8008f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f26:	4a2e      	ldr	r2, [pc, #184]	@ (8008fe0 <HAL_GPIO_Init+0x238>)
 8008f28:	f043 0302 	orr.w	r3, r3, #2
 8008f2c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008f30:	4b2b      	ldr	r3, [pc, #172]	@ (8008fe0 <HAL_GPIO_Init+0x238>)
 8008f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008f3e:	4a29      	ldr	r2, [pc, #164]	@ (8008fe4 <HAL_GPIO_Init+0x23c>)
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	089b      	lsrs	r3, r3, #2
 8008f44:	3302      	adds	r3, #2
 8008f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	f003 0303 	and.w	r3, r3, #3
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	220f      	movs	r2, #15
 8008f56:	fa02 f303 	lsl.w	r3, r2, r3
 8008f5a:	43db      	mvns	r3, r3
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	4013      	ands	r3, r2
 8008f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a20      	ldr	r2, [pc, #128]	@ (8008fe8 <HAL_GPIO_Init+0x240>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d052      	beq.n	8009010 <HAL_GPIO_Init+0x268>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8008fec <HAL_GPIO_Init+0x244>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d031      	beq.n	8008fd6 <HAL_GPIO_Init+0x22e>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a1e      	ldr	r2, [pc, #120]	@ (8008ff0 <HAL_GPIO_Init+0x248>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d02b      	beq.n	8008fd2 <HAL_GPIO_Init+0x22a>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff4 <HAL_GPIO_Init+0x24c>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d025      	beq.n	8008fce <HAL_GPIO_Init+0x226>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a1c      	ldr	r2, [pc, #112]	@ (8008ff8 <HAL_GPIO_Init+0x250>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d01f      	beq.n	8008fca <HAL_GPIO_Init+0x222>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8008ffc <HAL_GPIO_Init+0x254>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d019      	beq.n	8008fc6 <HAL_GPIO_Init+0x21e>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a1a      	ldr	r2, [pc, #104]	@ (8009000 <HAL_GPIO_Init+0x258>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d013      	beq.n	8008fc2 <HAL_GPIO_Init+0x21a>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a19      	ldr	r2, [pc, #100]	@ (8009004 <HAL_GPIO_Init+0x25c>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d00d      	beq.n	8008fbe <HAL_GPIO_Init+0x216>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a18      	ldr	r2, [pc, #96]	@ (8009008 <HAL_GPIO_Init+0x260>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d007      	beq.n	8008fba <HAL_GPIO_Init+0x212>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a17      	ldr	r2, [pc, #92]	@ (800900c <HAL_GPIO_Init+0x264>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d101      	bne.n	8008fb6 <HAL_GPIO_Init+0x20e>
 8008fb2:	2309      	movs	r3, #9
 8008fb4:	e02d      	b.n	8009012 <HAL_GPIO_Init+0x26a>
 8008fb6:	230a      	movs	r3, #10
 8008fb8:	e02b      	b.n	8009012 <HAL_GPIO_Init+0x26a>
 8008fba:	2308      	movs	r3, #8
 8008fbc:	e029      	b.n	8009012 <HAL_GPIO_Init+0x26a>
 8008fbe:	2307      	movs	r3, #7
 8008fc0:	e027      	b.n	8009012 <HAL_GPIO_Init+0x26a>
 8008fc2:	2306      	movs	r3, #6
 8008fc4:	e025      	b.n	8009012 <HAL_GPIO_Init+0x26a>
 8008fc6:	2305      	movs	r3, #5
 8008fc8:	e023      	b.n	8009012 <HAL_GPIO_Init+0x26a>
 8008fca:	2304      	movs	r3, #4
 8008fcc:	e021      	b.n	8009012 <HAL_GPIO_Init+0x26a>
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e01f      	b.n	8009012 <HAL_GPIO_Init+0x26a>
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	e01d      	b.n	8009012 <HAL_GPIO_Init+0x26a>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e01b      	b.n	8009012 <HAL_GPIO_Init+0x26a>
 8008fda:	bf00      	nop
 8008fdc:	58000080 	.word	0x58000080
 8008fe0:	58024400 	.word	0x58024400
 8008fe4:	58000400 	.word	0x58000400
 8008fe8:	58020000 	.word	0x58020000
 8008fec:	58020400 	.word	0x58020400
 8008ff0:	58020800 	.word	0x58020800
 8008ff4:	58020c00 	.word	0x58020c00
 8008ff8:	58021000 	.word	0x58021000
 8008ffc:	58021400 	.word	0x58021400
 8009000:	58021800 	.word	0x58021800
 8009004:	58021c00 	.word	0x58021c00
 8009008:	58022000 	.word	0x58022000
 800900c:	58022400 	.word	0x58022400
 8009010:	2300      	movs	r3, #0
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	f002 0203 	and.w	r2, r2, #3
 8009018:	0092      	lsls	r2, r2, #2
 800901a:	4093      	lsls	r3, r2
 800901c:	69ba      	ldr	r2, [r7, #24]
 800901e:	4313      	orrs	r3, r2
 8009020:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009022:	4938      	ldr	r1, [pc, #224]	@ (8009104 <HAL_GPIO_Init+0x35c>)
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	089b      	lsrs	r3, r3, #2
 8009028:	3302      	adds	r3, #2
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	43db      	mvns	r3, r3
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	4013      	ands	r3, r2
 8009040:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	4313      	orrs	r3, r2
 8009054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009056:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800905e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	43db      	mvns	r3, r3
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	4013      	ands	r3, r2
 800906e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	4313      	orrs	r3, r2
 8009082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009084:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	43db      	mvns	r3, r3
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	4013      	ands	r3, r2
 800909a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80090a8:	69ba      	ldr	r2, [r7, #24]
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	69ba      	ldr	r2, [r7, #24]
 80090b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	43db      	mvns	r3, r3
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	4013      	ands	r3, r2
 80090c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80090d2:	69ba      	ldr	r2, [r7, #24]
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	3301      	adds	r3, #1
 80090e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	fa22 f303 	lsr.w	r3, r2, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f47f ae63 	bne.w	8008dbc <HAL_GPIO_Init+0x14>
  }
}
 80090f6:	bf00      	nop
 80090f8:	bf00      	nop
 80090fa:	3724      	adds	r7, #36	@ 0x24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	58000400 	.word	0x58000400

08009108 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009112:	2300      	movs	r3, #0
 8009114:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009116:	4b75      	ldr	r3, [pc, #468]	@ (80092ec <HAL_GPIO_DeInit+0x1e4>)
 8009118:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800911a:	e0d9      	b.n	80092d0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800911c:	2201      	movs	r2, #1
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	fa02 f303 	lsl.w	r3, r2, r3
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	4013      	ands	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 80cc 	beq.w	80092ca <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009132:	4a6f      	ldr	r2, [pc, #444]	@ (80092f0 <HAL_GPIO_DeInit+0x1e8>)
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	089b      	lsrs	r3, r3, #2
 8009138:	3302      	adds	r3, #2
 800913a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800913e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	220f      	movs	r2, #15
 800914a:	fa02 f303 	lsl.w	r3, r2, r3
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	4013      	ands	r3, r2
 8009152:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a67      	ldr	r2, [pc, #412]	@ (80092f4 <HAL_GPIO_DeInit+0x1ec>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d037      	beq.n	80091cc <HAL_GPIO_DeInit+0xc4>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a66      	ldr	r2, [pc, #408]	@ (80092f8 <HAL_GPIO_DeInit+0x1f0>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d031      	beq.n	80091c8 <HAL_GPIO_DeInit+0xc0>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a65      	ldr	r2, [pc, #404]	@ (80092fc <HAL_GPIO_DeInit+0x1f4>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d02b      	beq.n	80091c4 <HAL_GPIO_DeInit+0xbc>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a64      	ldr	r2, [pc, #400]	@ (8009300 <HAL_GPIO_DeInit+0x1f8>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d025      	beq.n	80091c0 <HAL_GPIO_DeInit+0xb8>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a63      	ldr	r2, [pc, #396]	@ (8009304 <HAL_GPIO_DeInit+0x1fc>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d01f      	beq.n	80091bc <HAL_GPIO_DeInit+0xb4>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a62      	ldr	r2, [pc, #392]	@ (8009308 <HAL_GPIO_DeInit+0x200>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d019      	beq.n	80091b8 <HAL_GPIO_DeInit+0xb0>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a61      	ldr	r2, [pc, #388]	@ (800930c <HAL_GPIO_DeInit+0x204>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d013      	beq.n	80091b4 <HAL_GPIO_DeInit+0xac>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a60      	ldr	r2, [pc, #384]	@ (8009310 <HAL_GPIO_DeInit+0x208>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d00d      	beq.n	80091b0 <HAL_GPIO_DeInit+0xa8>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a5f      	ldr	r2, [pc, #380]	@ (8009314 <HAL_GPIO_DeInit+0x20c>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d007      	beq.n	80091ac <HAL_GPIO_DeInit+0xa4>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a5e      	ldr	r2, [pc, #376]	@ (8009318 <HAL_GPIO_DeInit+0x210>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d101      	bne.n	80091a8 <HAL_GPIO_DeInit+0xa0>
 80091a4:	2309      	movs	r3, #9
 80091a6:	e012      	b.n	80091ce <HAL_GPIO_DeInit+0xc6>
 80091a8:	230a      	movs	r3, #10
 80091aa:	e010      	b.n	80091ce <HAL_GPIO_DeInit+0xc6>
 80091ac:	2308      	movs	r3, #8
 80091ae:	e00e      	b.n	80091ce <HAL_GPIO_DeInit+0xc6>
 80091b0:	2307      	movs	r3, #7
 80091b2:	e00c      	b.n	80091ce <HAL_GPIO_DeInit+0xc6>
 80091b4:	2306      	movs	r3, #6
 80091b6:	e00a      	b.n	80091ce <HAL_GPIO_DeInit+0xc6>
 80091b8:	2305      	movs	r3, #5
 80091ba:	e008      	b.n	80091ce <HAL_GPIO_DeInit+0xc6>
 80091bc:	2304      	movs	r3, #4
 80091be:	e006      	b.n	80091ce <HAL_GPIO_DeInit+0xc6>
 80091c0:	2303      	movs	r3, #3
 80091c2:	e004      	b.n	80091ce <HAL_GPIO_DeInit+0xc6>
 80091c4:	2302      	movs	r3, #2
 80091c6:	e002      	b.n	80091ce <HAL_GPIO_DeInit+0xc6>
 80091c8:	2301      	movs	r3, #1
 80091ca:	e000      	b.n	80091ce <HAL_GPIO_DeInit+0xc6>
 80091cc:	2300      	movs	r3, #0
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	f002 0203 	and.w	r2, r2, #3
 80091d4:	0092      	lsls	r2, r2, #2
 80091d6:	4093      	lsls	r3, r2
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d136      	bne.n	800924c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	43db      	mvns	r3, r3
 80091e6:	401a      	ands	r2, r3
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	43db      	mvns	r3, r3
 80091f4:	401a      	ands	r2, r3
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80091fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	43db      	mvns	r3, r3
 8009204:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009208:	4013      	ands	r3, r2
 800920a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800920c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	43db      	mvns	r3, r3
 8009216:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800921a:	4013      	ands	r3, r2
 800921c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f003 0303 	and.w	r3, r3, #3
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	220f      	movs	r2, #15
 8009228:	fa02 f303 	lsl.w	r3, r2, r3
 800922c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800922e:	4a30      	ldr	r2, [pc, #192]	@ (80092f0 <HAL_GPIO_DeInit+0x1e8>)
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	089b      	lsrs	r3, r3, #2
 8009234:	3302      	adds	r3, #2
 8009236:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	43da      	mvns	r2, r3
 800923e:	482c      	ldr	r0, [pc, #176]	@ (80092f0 <HAL_GPIO_DeInit+0x1e8>)
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	089b      	lsrs	r3, r3, #2
 8009244:	400a      	ands	r2, r1
 8009246:	3302      	adds	r3, #2
 8009248:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	005b      	lsls	r3, r3, #1
 8009254:	2103      	movs	r1, #3
 8009256:	fa01 f303 	lsl.w	r3, r1, r3
 800925a:	431a      	orrs	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	08da      	lsrs	r2, r3, #3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3208      	adds	r2, #8
 8009268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f003 0307 	and.w	r3, r3, #7
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	220f      	movs	r2, #15
 8009276:	fa02 f303 	lsl.w	r3, r2, r3
 800927a:	43db      	mvns	r3, r3
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	08d2      	lsrs	r2, r2, #3
 8009280:	4019      	ands	r1, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	3208      	adds	r2, #8
 8009286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68da      	ldr	r2, [r3, #12]
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	2103      	movs	r1, #3
 8009294:	fa01 f303 	lsl.w	r3, r1, r3
 8009298:	43db      	mvns	r3, r3
 800929a:	401a      	ands	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685a      	ldr	r2, [r3, #4]
 80092a4:	2101      	movs	r1, #1
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	fa01 f303 	lsl.w	r3, r1, r3
 80092ac:	43db      	mvns	r3, r3
 80092ae:	401a      	ands	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	2103      	movs	r1, #3
 80092be:	fa01 f303 	lsl.w	r3, r1, r3
 80092c2:	43db      	mvns	r3, r3
 80092c4:	401a      	ands	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	3301      	adds	r3, #1
 80092ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	fa22 f303 	lsr.w	r3, r2, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f47f af1f 	bne.w	800911c <HAL_GPIO_DeInit+0x14>
  }
}
 80092de:	bf00      	nop
 80092e0:	bf00      	nop
 80092e2:	371c      	adds	r7, #28
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	58000080 	.word	0x58000080
 80092f0:	58000400 	.word	0x58000400
 80092f4:	58020000 	.word	0x58020000
 80092f8:	58020400 	.word	0x58020400
 80092fc:	58020800 	.word	0x58020800
 8009300:	58020c00 	.word	0x58020c00
 8009304:	58021000 	.word	0x58021000
 8009308:	58021400 	.word	0x58021400
 800930c:	58021800 	.word	0x58021800
 8009310:	58021c00 	.word	0x58021c00
 8009314:	58022000 	.word	0x58022000
 8009318:	58022400 	.word	0x58022400

0800931c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	807b      	strh	r3, [r7, #2]
 8009328:	4613      	mov	r3, r2
 800932a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800932c:	787b      	ldrb	r3, [r7, #1]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009332:	887a      	ldrh	r2, [r7, #2]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009338:	e003      	b.n	8009342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800933a:	887b      	ldrh	r3, [r7, #2]
 800933c:	041a      	lsls	r2, r3, #16
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	619a      	str	r2, [r3, #24]
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
	...

08009350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e07f      	b.n	8009462 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7f8 f962 	bl	8001640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2224      	movs	r2, #36	@ 0x24
 8009380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 0201 	bic.w	r2, r2, #1
 8009392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80093a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d107      	bne.n	80093ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093c6:	609a      	str	r2, [r3, #8]
 80093c8:	e006      	b.n	80093d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	689a      	ldr	r2, [r3, #8]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80093d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d104      	bne.n	80093ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6859      	ldr	r1, [r3, #4]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	4b1d      	ldr	r3, [pc, #116]	@ (800946c <HAL_I2C_Init+0x11c>)
 80093f6:	430b      	orrs	r3, r1
 80093f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68da      	ldr	r2, [r3, #12]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009408:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	691a      	ldr	r2, [r3, #16]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	430a      	orrs	r2, r1
 8009422:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	69d9      	ldr	r1, [r3, #28]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a1a      	ldr	r2, [r3, #32]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0201 	orr.w	r2, r2, #1
 8009442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2220      	movs	r2, #32
 800944e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	02008000 	.word	0x02008000

08009470 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b20      	cmp	r3, #32
 8009484:	d138      	bne.n	80094f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800948c:	2b01      	cmp	r3, #1
 800948e:	d101      	bne.n	8009494 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009490:	2302      	movs	r3, #2
 8009492:	e032      	b.n	80094fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2224      	movs	r2, #36	@ 0x24
 80094a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f022 0201 	bic.w	r2, r2, #1
 80094b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80094c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6819      	ldr	r1, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	430a      	orrs	r2, r1
 80094d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f042 0201 	orr.w	r2, r2, #1
 80094e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2220      	movs	r2, #32
 80094e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	e000      	b.n	80094fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094f8:	2302      	movs	r3, #2
  }
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009506:	b480      	push	{r7}
 8009508:	b085      	sub	sp, #20
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b20      	cmp	r3, #32
 800951a:	d139      	bne.n	8009590 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009522:	2b01      	cmp	r3, #1
 8009524:	d101      	bne.n	800952a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009526:	2302      	movs	r3, #2
 8009528:	e033      	b.n	8009592 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2224      	movs	r2, #36	@ 0x24
 8009536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f022 0201 	bic.w	r2, r2, #1
 8009548:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009558:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	021b      	lsls	r3, r3, #8
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	4313      	orrs	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f042 0201 	orr.w	r2, r2, #1
 800957a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2220      	movs	r2, #32
 8009580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	e000      	b.n	8009592 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009590:	2302      	movs	r3, #2
  }
}
 8009592:	4618      	mov	r0, r3
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
	...

080095a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80095a8:	4b19      	ldr	r3, [pc, #100]	@ (8009610 <HAL_PWREx_ConfigSupply+0x70>)
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f003 0304 	and.w	r3, r3, #4
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d00a      	beq.n	80095ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80095b4:	4b16      	ldr	r3, [pc, #88]	@ (8009610 <HAL_PWREx_ConfigSupply+0x70>)
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d001      	beq.n	80095c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e01f      	b.n	8009606 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	e01d      	b.n	8009606 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80095ca:	4b11      	ldr	r3, [pc, #68]	@ (8009610 <HAL_PWREx_ConfigSupply+0x70>)
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	f023 0207 	bic.w	r2, r3, #7
 80095d2:	490f      	ldr	r1, [pc, #60]	@ (8009610 <HAL_PWREx_ConfigSupply+0x70>)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80095da:	f7fa f8f3 	bl	80037c4 <HAL_GetTick>
 80095de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095e0:	e009      	b.n	80095f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80095e2:	f7fa f8ef 	bl	80037c4 <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095f0:	d901      	bls.n	80095f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e007      	b.n	8009606 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095f6:	4b06      	ldr	r3, [pc, #24]	@ (8009610 <HAL_PWREx_ConfigSupply+0x70>)
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009602:	d1ee      	bne.n	80095e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	58024800 	.word	0x58024800

08009614 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08c      	sub	sp, #48	@ 0x30
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d102      	bne.n	8009628 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	f000 bc48 	b.w	8009eb8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	2b00      	cmp	r3, #0
 8009632:	f000 808c 	beq.w	800974e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009636:	4b96      	ldr	r3, [pc, #600]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800963e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009640:	4b93      	ldr	r3, [pc, #588]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009644:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009648:	2b10      	cmp	r3, #16
 800964a:	d007      	beq.n	800965c <HAL_RCC_OscConfig+0x48>
 800964c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964e:	2b18      	cmp	r3, #24
 8009650:	d111      	bne.n	8009676 <HAL_RCC_OscConfig+0x62>
 8009652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009654:	f003 0303 	and.w	r3, r3, #3
 8009658:	2b02      	cmp	r3, #2
 800965a:	d10c      	bne.n	8009676 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800965c:	4b8c      	ldr	r3, [pc, #560]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d071      	beq.n	800974c <HAL_RCC_OscConfig+0x138>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d16d      	bne.n	800974c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	f000 bc21 	b.w	8009eb8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800967e:	d106      	bne.n	800968e <HAL_RCC_OscConfig+0x7a>
 8009680:	4b83      	ldr	r3, [pc, #524]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a82      	ldr	r2, [pc, #520]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	e02e      	b.n	80096ec <HAL_RCC_OscConfig+0xd8>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10c      	bne.n	80096b0 <HAL_RCC_OscConfig+0x9c>
 8009696:	4b7e      	ldr	r3, [pc, #504]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a7d      	ldr	r2, [pc, #500]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 800969c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	4b7b      	ldr	r3, [pc, #492]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a7a      	ldr	r2, [pc, #488]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80096a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	e01d      	b.n	80096ec <HAL_RCC_OscConfig+0xd8>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096b8:	d10c      	bne.n	80096d4 <HAL_RCC_OscConfig+0xc0>
 80096ba:	4b75      	ldr	r3, [pc, #468]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a74      	ldr	r2, [pc, #464]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80096c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	4b72      	ldr	r3, [pc, #456]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a71      	ldr	r2, [pc, #452]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80096cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096d0:	6013      	str	r3, [r2, #0]
 80096d2:	e00b      	b.n	80096ec <HAL_RCC_OscConfig+0xd8>
 80096d4:	4b6e      	ldr	r3, [pc, #440]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a6d      	ldr	r2, [pc, #436]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80096da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096de:	6013      	str	r3, [r2, #0]
 80096e0:	4b6b      	ldr	r3, [pc, #428]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a6a      	ldr	r2, [pc, #424]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80096e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d015      	beq.n	8009720 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096f4:	f7fa f866 	bl	80037c4 <HAL_GetTick>
 80096f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096fa:	e00a      	b.n	8009712 <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096fc:	f7fa f862 	bl	80037c4 <HAL_GetTick>
 8009700:	4602      	mov	r2, r0
 8009702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800970a:	4293      	cmp	r3, r2
 800970c:	d901      	bls.n	8009712 <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	e3d2      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009712:	4b5f      	ldr	r3, [pc, #380]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0ee      	beq.n	80096fc <HAL_RCC_OscConfig+0xe8>
 800971e:	e016      	b.n	800974e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009720:	f7fa f850 	bl	80037c4 <HAL_GetTick>
 8009724:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009726:	e00a      	b.n	800973e <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009728:	f7fa f84c 	bl	80037c4 <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009736:	4293      	cmp	r3, r2
 8009738:	d901      	bls.n	800973e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e3bc      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800973e:	4b54      	ldr	r3, [pc, #336]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1ee      	bne.n	8009728 <HAL_RCC_OscConfig+0x114>
 800974a:	e000      	b.n	800974e <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800974c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0302 	and.w	r3, r3, #2
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80cb 	beq.w	80098f2 <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800975c:	4b4c      	ldr	r3, [pc, #304]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009764:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009766:	4b4a      	ldr	r3, [pc, #296]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d007      	beq.n	8009782 <HAL_RCC_OscConfig+0x16e>
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	2b18      	cmp	r3, #24
 8009776:	d156      	bne.n	8009826 <HAL_RCC_OscConfig+0x212>
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	f003 0303 	and.w	r3, r3, #3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d151      	bne.n	8009826 <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009782:	4b43      	ldr	r3, [pc, #268]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0304 	and.w	r3, r3, #4
 800978a:	2b00      	cmp	r3, #0
 800978c:	d005      	beq.n	800979a <HAL_RCC_OscConfig+0x186>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e38e      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800979a:	4b3d      	ldr	r3, [pc, #244]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f023 0219 	bic.w	r2, r3, #25
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	493a      	ldr	r1, [pc, #232]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ac:	f7fa f80a 	bl	80037c4 <HAL_GetTick>
 80097b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097b2:	e008      	b.n	80097c6 <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097b4:	f7fa f806 	bl	80037c4 <HAL_GetTick>
 80097b8:	4602      	mov	r2, r0
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d901      	bls.n	80097c6 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e378      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097c6:	4b32      	ldr	r3, [pc, #200]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 0304 	and.w	r3, r3, #4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d0f0      	beq.n	80097b4 <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097d2:	f7fa f827 	bl	8003824 <HAL_GetREVID>
 80097d6:	4603      	mov	r3, r0
 80097d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80097dc:	4293      	cmp	r3, r2
 80097de:	d817      	bhi.n	8009810 <HAL_RCC_OscConfig+0x1fc>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	2b40      	cmp	r3, #64	@ 0x40
 80097e6:	d108      	bne.n	80097fa <HAL_RCC_OscConfig+0x1e6>
 80097e8:	4b29      	ldr	r3, [pc, #164]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80097f0:	4a27      	ldr	r2, [pc, #156]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80097f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097f8:	e07b      	b.n	80098f2 <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097fa:	4b25      	ldr	r3, [pc, #148]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	031b      	lsls	r3, r3, #12
 8009808:	4921      	ldr	r1, [pc, #132]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 800980a:	4313      	orrs	r3, r2
 800980c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800980e:	e070      	b.n	80098f2 <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009810:	4b1f      	ldr	r3, [pc, #124]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	061b      	lsls	r3, r3, #24
 800981e:	491c      	ldr	r1, [pc, #112]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009820:	4313      	orrs	r3, r2
 8009822:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009824:	e065      	b.n	80098f2 <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d048      	beq.n	80098c0 <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800982e:	4b18      	ldr	r3, [pc, #96]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f023 0219 	bic.w	r2, r3, #25
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	4915      	ldr	r1, [pc, #84]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 800983c:	4313      	orrs	r3, r2
 800983e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009840:	f7f9 ffc0 	bl	80037c4 <HAL_GetTick>
 8009844:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009846:	e008      	b.n	800985a <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009848:	f7f9 ffbc 	bl	80037c4 <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	2b02      	cmp	r3, #2
 8009854:	d901      	bls.n	800985a <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e32e      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800985a:	4b0d      	ldr	r3, [pc, #52]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0304 	and.w	r3, r3, #4
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0f0      	beq.n	8009848 <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009866:	f7f9 ffdd 	bl	8003824 <HAL_GetREVID>
 800986a:	4603      	mov	r3, r0
 800986c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009870:	4293      	cmp	r3, r2
 8009872:	d81a      	bhi.n	80098aa <HAL_RCC_OscConfig+0x296>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	2b40      	cmp	r3, #64	@ 0x40
 800987a:	d10b      	bne.n	8009894 <HAL_RCC_OscConfig+0x280>
 800987c:	4b04      	ldr	r3, [pc, #16]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009884:	4a02      	ldr	r2, [pc, #8]	@ (8009890 <HAL_RCC_OscConfig+0x27c>)
 8009886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800988a:	6053      	str	r3, [r2, #4]
 800988c:	e031      	b.n	80098f2 <HAL_RCC_OscConfig+0x2de>
 800988e:	bf00      	nop
 8009890:	58024400 	.word	0x58024400
 8009894:	4b9c      	ldr	r3, [pc, #624]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	031b      	lsls	r3, r3, #12
 80098a2:	4999      	ldr	r1, [pc, #612]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	604b      	str	r3, [r1, #4]
 80098a8:	e023      	b.n	80098f2 <HAL_RCC_OscConfig+0x2de>
 80098aa:	4b97      	ldr	r3, [pc, #604]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	061b      	lsls	r3, r3, #24
 80098b8:	4993      	ldr	r1, [pc, #588]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	604b      	str	r3, [r1, #4]
 80098be:	e018      	b.n	80098f2 <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098c0:	4b91      	ldr	r3, [pc, #580]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a90      	ldr	r2, [pc, #576]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098c6:	f023 0301 	bic.w	r3, r3, #1
 80098ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098cc:	f7f9 ff7a 	bl	80037c4 <HAL_GetTick>
 80098d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80098d2:	e008      	b.n	80098e6 <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098d4:	f7f9 ff76 	bl	80037c4 <HAL_GetTick>
 80098d8:	4602      	mov	r2, r0
 80098da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d901      	bls.n	80098e6 <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e2e8      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80098e6:	4b88      	ldr	r3, [pc, #544]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 0304 	and.w	r3, r3, #4
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1f0      	bne.n	80098d4 <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0310 	and.w	r3, r3, #16
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 80a9 	beq.w	8009a52 <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009900:	4b81      	ldr	r3, [pc, #516]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009908:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800990a:	4b7f      	ldr	r3, [pc, #508]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 800990c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800990e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	2b08      	cmp	r3, #8
 8009914:	d007      	beq.n	8009926 <HAL_RCC_OscConfig+0x312>
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	2b18      	cmp	r3, #24
 800991a:	d13a      	bne.n	8009992 <HAL_RCC_OscConfig+0x37e>
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	2b01      	cmp	r3, #1
 8009924:	d135      	bne.n	8009992 <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009926:	4b78      	ldr	r3, [pc, #480]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800992e:	2b00      	cmp	r3, #0
 8009930:	d005      	beq.n	800993e <HAL_RCC_OscConfig+0x32a>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	69db      	ldr	r3, [r3, #28]
 8009936:	2b80      	cmp	r3, #128	@ 0x80
 8009938:	d001      	beq.n	800993e <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e2bc      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800993e:	f7f9 ff71 	bl	8003824 <HAL_GetREVID>
 8009942:	4603      	mov	r3, r0
 8009944:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009948:	4293      	cmp	r3, r2
 800994a:	d817      	bhi.n	800997c <HAL_RCC_OscConfig+0x368>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	2b20      	cmp	r3, #32
 8009952:	d108      	bne.n	8009966 <HAL_RCC_OscConfig+0x352>
 8009954:	4b6c      	ldr	r3, [pc, #432]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800995c:	4a6a      	ldr	r2, [pc, #424]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 800995e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009962:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009964:	e075      	b.n	8009a52 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009966:	4b68      	ldr	r3, [pc, #416]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	069b      	lsls	r3, r3, #26
 8009974:	4964      	ldr	r1, [pc, #400]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009976:	4313      	orrs	r3, r2
 8009978:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800997a:	e06a      	b.n	8009a52 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800997c:	4b62      	ldr	r3, [pc, #392]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a1b      	ldr	r3, [r3, #32]
 8009988:	061b      	lsls	r3, r3, #24
 800998a:	495f      	ldr	r1, [pc, #380]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 800998c:	4313      	orrs	r3, r2
 800998e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009990:	e05f      	b.n	8009a52 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d042      	beq.n	8009a20 <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800999a:	4b5b      	ldr	r3, [pc, #364]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a5a      	ldr	r2, [pc, #360]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a6:	f7f9 ff0d 	bl	80037c4 <HAL_GetTick>
 80099aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80099ac:	e008      	b.n	80099c0 <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80099ae:	f7f9 ff09 	bl	80037c4 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d901      	bls.n	80099c0 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e27b      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80099c0:	4b51      	ldr	r3, [pc, #324]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0f0      	beq.n	80099ae <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099cc:	f7f9 ff2a 	bl	8003824 <HAL_GetREVID>
 80099d0:	4603      	mov	r3, r0
 80099d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d817      	bhi.n	8009a0a <HAL_RCC_OscConfig+0x3f6>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	2b20      	cmp	r3, #32
 80099e0:	d108      	bne.n	80099f4 <HAL_RCC_OscConfig+0x3e0>
 80099e2:	4b49      	ldr	r3, [pc, #292]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80099ea:	4a47      	ldr	r2, [pc, #284]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099f0:	6053      	str	r3, [r2, #4]
 80099f2:	e02e      	b.n	8009a52 <HAL_RCC_OscConfig+0x43e>
 80099f4:	4b44      	ldr	r3, [pc, #272]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	069b      	lsls	r3, r3, #26
 8009a02:	4941      	ldr	r1, [pc, #260]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	604b      	str	r3, [r1, #4]
 8009a08:	e023      	b.n	8009a52 <HAL_RCC_OscConfig+0x43e>
 8009a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	061b      	lsls	r3, r3, #24
 8009a18:	493b      	ldr	r1, [pc, #236]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	60cb      	str	r3, [r1, #12]
 8009a1e:	e018      	b.n	8009a52 <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009a20:	4b39      	ldr	r3, [pc, #228]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a38      	ldr	r2, [pc, #224]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a2c:	f7f9 feca 	bl	80037c4 <HAL_GetTick>
 8009a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a32:	e008      	b.n	8009a46 <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a34:	f7f9 fec6 	bl	80037c4 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d901      	bls.n	8009a46 <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e238      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a46:	4b30      	ldr	r3, [pc, #192]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1f0      	bne.n	8009a34 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 0308 	and.w	r3, r3, #8
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d036      	beq.n	8009acc <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	695b      	ldr	r3, [r3, #20]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d019      	beq.n	8009a9a <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a66:	4b28      	ldr	r3, [pc, #160]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a6a:	4a27      	ldr	r2, [pc, #156]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a6c:	f043 0301 	orr.w	r3, r3, #1
 8009a70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a72:	f7f9 fea7 	bl	80037c4 <HAL_GetTick>
 8009a76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a78:	e008      	b.n	8009a8c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a7a:	f7f9 fea3 	bl	80037c4 <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d901      	bls.n	8009a8c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e215      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a90:	f003 0302 	and.w	r3, r3, #2
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0f0      	beq.n	8009a7a <HAL_RCC_OscConfig+0x466>
 8009a98:	e018      	b.n	8009acc <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009aa0:	f023 0301 	bic.w	r3, r3, #1
 8009aa4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aa6:	f7f9 fe8d 	bl	80037c4 <HAL_GetTick>
 8009aaa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009aac:	e008      	b.n	8009ac0 <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009aae:	f7f9 fe89 	bl	80037c4 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d901      	bls.n	8009ac0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e1fb      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ac0:	4b11      	ldr	r3, [pc, #68]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ac4:	f003 0302 	and.w	r3, r3, #2
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1f0      	bne.n	8009aae <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0320 	and.w	r3, r3, #32
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d039      	beq.n	8009b4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d01c      	beq.n	8009b1a <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009ae0:	4b09      	ldr	r3, [pc, #36]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a08      	ldr	r2, [pc, #32]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009ae6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009aea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009aec:	f7f9 fe6a 	bl	80037c4 <HAL_GetTick>
 8009af0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009af2:	e00b      	b.n	8009b0c <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009af4:	f7f9 fe66 	bl	80037c4 <HAL_GetTick>
 8009af8:	4602      	mov	r2, r0
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d904      	bls.n	8009b0c <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e1d8      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
 8009b06:	bf00      	nop
 8009b08:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b0c:	4b65      	ldr	r3, [pc, #404]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d0ed      	beq.n	8009af4 <HAL_RCC_OscConfig+0x4e0>
 8009b18:	e018      	b.n	8009b4c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009b1a:	4b62      	ldr	r3, [pc, #392]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a61      	ldr	r2, [pc, #388]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009b20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b26:	f7f9 fe4d 	bl	80037c4 <HAL_GetTick>
 8009b2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b2c:	e008      	b.n	8009b40 <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b2e:	f7f9 fe49 	bl	80037c4 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d901      	bls.n	8009b40 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e1bb      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b40:	4b58      	ldr	r3, [pc, #352]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1f0      	bne.n	8009b2e <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 8081 	beq.w	8009c5c <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009b5a:	4b53      	ldr	r3, [pc, #332]	@ (8009ca8 <HAL_RCC_OscConfig+0x694>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a52      	ldr	r2, [pc, #328]	@ (8009ca8 <HAL_RCC_OscConfig+0x694>)
 8009b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b66:	f7f9 fe2d 	bl	80037c4 <HAL_GetTick>
 8009b6a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b6c:	e008      	b.n	8009b80 <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b6e:	f7f9 fe29 	bl	80037c4 <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	2b64      	cmp	r3, #100	@ 0x64
 8009b7a:	d901      	bls.n	8009b80 <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	e19b      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b80:	4b49      	ldr	r3, [pc, #292]	@ (8009ca8 <HAL_RCC_OscConfig+0x694>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d0f0      	beq.n	8009b6e <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d106      	bne.n	8009ba2 <HAL_RCC_OscConfig+0x58e>
 8009b94:	4b43      	ldr	r3, [pc, #268]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b98:	4a42      	ldr	r2, [pc, #264]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009b9a:	f043 0301 	orr.w	r3, r3, #1
 8009b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ba0:	e02d      	b.n	8009bfe <HAL_RCC_OscConfig+0x5ea>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10c      	bne.n	8009bc4 <HAL_RCC_OscConfig+0x5b0>
 8009baa:	4b3e      	ldr	r3, [pc, #248]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bae:	4a3d      	ldr	r2, [pc, #244]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009bb0:	f023 0301 	bic.w	r3, r3, #1
 8009bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bba:	4a3a      	ldr	r2, [pc, #232]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009bbc:	f023 0304 	bic.w	r3, r3, #4
 8009bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bc2:	e01c      	b.n	8009bfe <HAL_RCC_OscConfig+0x5ea>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	2b05      	cmp	r3, #5
 8009bca:	d10c      	bne.n	8009be6 <HAL_RCC_OscConfig+0x5d2>
 8009bcc:	4b35      	ldr	r3, [pc, #212]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bd0:	4a34      	ldr	r2, [pc, #208]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009bd2:	f043 0304 	orr.w	r3, r3, #4
 8009bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bd8:	4b32      	ldr	r3, [pc, #200]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bdc:	4a31      	ldr	r2, [pc, #196]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009be4:	e00b      	b.n	8009bfe <HAL_RCC_OscConfig+0x5ea>
 8009be6:	4b2f      	ldr	r3, [pc, #188]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bea:	4a2e      	ldr	r2, [pc, #184]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009bec:	f023 0301 	bic.w	r3, r3, #1
 8009bf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bf6:	4a2b      	ldr	r2, [pc, #172]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009bf8:	f023 0304 	bic.w	r3, r3, #4
 8009bfc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d015      	beq.n	8009c32 <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c06:	f7f9 fddd 	bl	80037c4 <HAL_GetTick>
 8009c0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c0c:	e00a      	b.n	8009c24 <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c0e:	f7f9 fdd9 	bl	80037c4 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d901      	bls.n	8009c24 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e149      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c24:	4b1f      	ldr	r3, [pc, #124]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c28:	f003 0302 	and.w	r3, r3, #2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d0ee      	beq.n	8009c0e <HAL_RCC_OscConfig+0x5fa>
 8009c30:	e014      	b.n	8009c5c <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c32:	f7f9 fdc7 	bl	80037c4 <HAL_GetTick>
 8009c36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c38:	e00a      	b.n	8009c50 <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c3a:	f7f9 fdc3 	bl	80037c4 <HAL_GetTick>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d901      	bls.n	8009c50 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e133      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c50:	4b14      	ldr	r3, [pc, #80]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1ee      	bne.n	8009c3a <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 8128 	beq.w	8009eb6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009c66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c6e:	2b18      	cmp	r3, #24
 8009c70:	f000 80b8 	beq.w	8009de4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	f040 8099 	bne.w	8009db0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c7e:	4b09      	ldr	r3, [pc, #36]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a08      	ldr	r2, [pc, #32]	@ (8009ca4 <HAL_RCC_OscConfig+0x690>)
 8009c84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c8a:	f7f9 fd9b 	bl	80037c4 <HAL_GetTick>
 8009c8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c90:	e00c      	b.n	8009cac <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c92:	f7f9 fd97 	bl	80037c4 <HAL_GetTick>
 8009c96:	4602      	mov	r2, r0
 8009c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d905      	bls.n	8009cac <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e109      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
 8009ca4:	58024400 	.word	0x58024400
 8009ca8:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cac:	4b84      	ldr	r3, [pc, #528]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1ec      	bne.n	8009c92 <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009cb8:	4b81      	ldr	r3, [pc, #516]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009cba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009cbc:	4b81      	ldr	r3, [pc, #516]	@ (8009ec4 <HAL_RCC_OscConfig+0x8b0>)
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009cc8:	0112      	lsls	r2, r2, #4
 8009cca:	430a      	orrs	r2, r1
 8009ccc:	497c      	ldr	r1, [pc, #496]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	628b      	str	r3, [r1, #40]	@ 0x28
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	025b      	lsls	r3, r3, #9
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	431a      	orrs	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cec:	3b01      	subs	r3, #1
 8009cee:	041b      	lsls	r3, r3, #16
 8009cf0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009cf4:	431a      	orrs	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	061b      	lsls	r3, r3, #24
 8009cfe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009d02:	496f      	ldr	r1, [pc, #444]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d04:	4313      	orrs	r3, r2
 8009d06:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009d08:	4b6d      	ldr	r3, [pc, #436]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0c:	4a6c      	ldr	r2, [pc, #432]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d0e:	f023 0301 	bic.w	r3, r3, #1
 8009d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d14:	4b6a      	ldr	r3, [pc, #424]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d18:	4b6b      	ldr	r3, [pc, #428]	@ (8009ec8 <HAL_RCC_OscConfig+0x8b4>)
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009d20:	00d2      	lsls	r2, r2, #3
 8009d22:	4967      	ldr	r1, [pc, #412]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d24:	4313      	orrs	r3, r2
 8009d26:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009d28:	4b65      	ldr	r3, [pc, #404]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d2c:	f023 020c 	bic.w	r2, r3, #12
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d34:	4962      	ldr	r1, [pc, #392]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009d3a:	4b61      	ldr	r3, [pc, #388]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d3e:	f023 0202 	bic.w	r2, r3, #2
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d46:	495e      	ldr	r1, [pc, #376]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009d4c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d50:	4a5b      	ldr	r2, [pc, #364]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d58:	4b59      	ldr	r3, [pc, #356]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5c:	4a58      	ldr	r2, [pc, #352]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009d64:	4b56      	ldr	r3, [pc, #344]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d68:	4a55      	ldr	r2, [pc, #340]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009d70:	4b53      	ldr	r3, [pc, #332]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d74:	4a52      	ldr	r2, [pc, #328]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d76:	f043 0301 	orr.w	r3, r3, #1
 8009d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d7c:	4b50      	ldr	r3, [pc, #320]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a4f      	ldr	r2, [pc, #316]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d88:	f7f9 fd1c 	bl	80037c4 <HAL_GetTick>
 8009d8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d8e:	e008      	b.n	8009da2 <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d90:	f7f9 fd18 	bl	80037c4 <HAL_GetTick>
 8009d94:	4602      	mov	r2, r0
 8009d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d901      	bls.n	8009da2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	e08a      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009da2:	4b47      	ldr	r3, [pc, #284]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d0f0      	beq.n	8009d90 <HAL_RCC_OscConfig+0x77c>
 8009dae:	e082      	b.n	8009eb6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009db0:	4b43      	ldr	r3, [pc, #268]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a42      	ldr	r2, [pc, #264]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009db6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dbc:	f7f9 fd02 	bl	80037c4 <HAL_GetTick>
 8009dc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009dc2:	e008      	b.n	8009dd6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dc4:	f7f9 fcfe 	bl	80037c4 <HAL_GetTick>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d901      	bls.n	8009dd6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	e070      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009dd6:	4b3a      	ldr	r3, [pc, #232]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1f0      	bne.n	8009dc4 <HAL_RCC_OscConfig+0x7b0>
 8009de2:	e068      	b.n	8009eb6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009de4:	4b36      	ldr	r3, [pc, #216]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009dea:	4b35      	ldr	r3, [pc, #212]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d031      	beq.n	8009e5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f003 0203 	and.w	r2, r3, #3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d12a      	bne.n	8009e5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	091b      	lsrs	r3, r3, #4
 8009e0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d122      	bne.n	8009e5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d11a      	bne.n	8009e5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	0a5b      	lsrs	r3, r3, #9
 8009e2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d111      	bne.n	8009e5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	0c1b      	lsrs	r3, r3, #16
 8009e3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d108      	bne.n	8009e5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	0e1b      	lsrs	r3, r3, #24
 8009e4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d001      	beq.n	8009e60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e02b      	b.n	8009eb8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009e60:	4b17      	ldr	r3, [pc, #92]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e64:	08db      	lsrs	r3, r3, #3
 8009e66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d01f      	beq.n	8009eb6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009e76:	4b12      	ldr	r3, [pc, #72]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7a:	4a11      	ldr	r2, [pc, #68]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009e7c:	f023 0301 	bic.w	r3, r3, #1
 8009e80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009e82:	f7f9 fc9f 	bl	80037c4 <HAL_GetTick>
 8009e86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009e88:	bf00      	nop
 8009e8a:	f7f9 fc9b 	bl	80037c4 <HAL_GetTick>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d0f9      	beq.n	8009e8a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e96:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8009ec8 <HAL_RCC_OscConfig+0x8b4>)
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ea2:	00d2      	lsls	r2, r2, #3
 8009ea4:	4906      	ldr	r1, [pc, #24]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009eaa:	4b05      	ldr	r3, [pc, #20]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eae:	4a04      	ldr	r2, [pc, #16]	@ (8009ec0 <HAL_RCC_OscConfig+0x8ac>)
 8009eb0:	f043 0301 	orr.w	r3, r3, #1
 8009eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3730      	adds	r7, #48	@ 0x30
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	58024400 	.word	0x58024400
 8009ec4:	fffffc0c 	.word	0xfffffc0c
 8009ec8:	ffff0007 	.word	0xffff0007

08009ecc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e19c      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ee0:	4b8a      	ldr	r3, [pc, #552]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 030f 	and.w	r3, r3, #15
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d910      	bls.n	8009f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009eee:	4b87      	ldr	r3, [pc, #540]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f023 020f 	bic.w	r2, r3, #15
 8009ef6:	4985      	ldr	r1, [pc, #532]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009efe:	4b83      	ldr	r3, [pc, #524]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 030f 	and.w	r3, r3, #15
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d001      	beq.n	8009f10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e184      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0304 	and.w	r3, r3, #4
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d010      	beq.n	8009f3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	691a      	ldr	r2, [r3, #16]
 8009f20:	4b7b      	ldr	r3, [pc, #492]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d908      	bls.n	8009f3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009f2c:	4b78      	ldr	r3, [pc, #480]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	4975      	ldr	r1, [pc, #468]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d010      	beq.n	8009f6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	695a      	ldr	r2, [r3, #20]
 8009f4e:	4b70      	ldr	r3, [pc, #448]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f50:	69db      	ldr	r3, [r3, #28]
 8009f52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d908      	bls.n	8009f6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f5a:	4b6d      	ldr	r3, [pc, #436]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	496a      	ldr	r1, [pc, #424]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0310 	and.w	r3, r3, #16
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d010      	beq.n	8009f9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	699a      	ldr	r2, [r3, #24]
 8009f7c:	4b64      	ldr	r3, [pc, #400]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d908      	bls.n	8009f9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009f88:	4b61      	ldr	r3, [pc, #388]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	495e      	ldr	r1, [pc, #376]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d010      	beq.n	8009fc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	69da      	ldr	r2, [r3, #28]
 8009faa:	4b59      	ldr	r3, [pc, #356]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d908      	bls.n	8009fc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009fb6:	4b56      	ldr	r3, [pc, #344]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	69db      	ldr	r3, [r3, #28]
 8009fc2:	4953      	ldr	r1, [pc, #332]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0302 	and.w	r3, r3, #2
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d010      	beq.n	8009ff6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68da      	ldr	r2, [r3, #12]
 8009fd8:	4b4d      	ldr	r3, [pc, #308]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	f003 030f 	and.w	r3, r3, #15
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d908      	bls.n	8009ff6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fe4:	4b4a      	ldr	r3, [pc, #296]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	f023 020f 	bic.w	r2, r3, #15
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	4947      	ldr	r1, [pc, #284]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d055      	beq.n	800a0ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a002:	4b43      	ldr	r3, [pc, #268]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	4940      	ldr	r1, [pc, #256]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a010:	4313      	orrs	r3, r2
 800a012:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d107      	bne.n	800a02c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a01c:	4b3c      	ldr	r3, [pc, #240]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d121      	bne.n	800a06c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e0f6      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	2b03      	cmp	r3, #3
 800a032:	d107      	bne.n	800a044 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a034:	4b36      	ldr	r3, [pc, #216]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d115      	bne.n	800a06c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e0ea      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d107      	bne.n	800a05c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a04c:	4b30      	ldr	r3, [pc, #192]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a054:	2b00      	cmp	r3, #0
 800a056:	d109      	bne.n	800a06c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e0de      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a05c:	4b2c      	ldr	r3, [pc, #176]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 0304 	and.w	r3, r3, #4
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e0d6      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a06c:	4b28      	ldr	r3, [pc, #160]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	f023 0207 	bic.w	r2, r3, #7
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	4925      	ldr	r1, [pc, #148]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a07e:	f7f9 fba1 	bl	80037c4 <HAL_GetTick>
 800a082:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a084:	e00a      	b.n	800a09c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a086:	f7f9 fb9d 	bl	80037c4 <HAL_GetTick>
 800a08a:	4602      	mov	r2, r0
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a094:	4293      	cmp	r3, r2
 800a096:	d901      	bls.n	800a09c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e0be      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a09c:	4b1c      	ldr	r3, [pc, #112]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	00db      	lsls	r3, r3, #3
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d1eb      	bne.n	800a086 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d010      	beq.n	800a0dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68da      	ldr	r2, [r3, #12]
 800a0be:	4b14      	ldr	r3, [pc, #80]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	f003 030f 	and.w	r3, r3, #15
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d208      	bcs.n	800a0dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0ca:	4b11      	ldr	r3, [pc, #68]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	f023 020f 	bic.w	r2, r3, #15
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	490e      	ldr	r1, [pc, #56]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a0dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 030f 	and.w	r3, r3, #15
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d214      	bcs.n	800a114 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0ea:	4b08      	ldr	r3, [pc, #32]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f023 020f 	bic.w	r2, r3, #15
 800a0f2:	4906      	ldr	r1, [pc, #24]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0fa:	4b04      	ldr	r3, [pc, #16]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 030f 	and.w	r3, r3, #15
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	429a      	cmp	r2, r3
 800a106:	d005      	beq.n	800a114 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e086      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
 800a10c:	52002000 	.word	0x52002000
 800a110:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d010      	beq.n	800a142 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	691a      	ldr	r2, [r3, #16]
 800a124:	4b3f      	ldr	r3, [pc, #252]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d208      	bcs.n	800a142 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a130:	4b3c      	ldr	r3, [pc, #240]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	4939      	ldr	r1, [pc, #228]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 0308 	and.w	r3, r3, #8
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d010      	beq.n	800a170 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	695a      	ldr	r2, [r3, #20]
 800a152:	4b34      	ldr	r3, [pc, #208]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d208      	bcs.n	800a170 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a15e:	4b31      	ldr	r3, [pc, #196]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	492e      	ldr	r1, [pc, #184]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a16c:	4313      	orrs	r3, r2
 800a16e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0310 	and.w	r3, r3, #16
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d010      	beq.n	800a19e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	699a      	ldr	r2, [r3, #24]
 800a180:	4b28      	ldr	r3, [pc, #160]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a188:	429a      	cmp	r2, r3
 800a18a:	d208      	bcs.n	800a19e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a18c:	4b25      	ldr	r3, [pc, #148]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a18e:	69db      	ldr	r3, [r3, #28]
 800a190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	4922      	ldr	r1, [pc, #136]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a19a:	4313      	orrs	r3, r2
 800a19c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0320 	and.w	r3, r3, #32
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d010      	beq.n	800a1cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	69da      	ldr	r2, [r3, #28]
 800a1ae:	4b1d      	ldr	r3, [pc, #116]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d208      	bcs.n	800a1cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a1ba:	4b1a      	ldr	r3, [pc, #104]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	69db      	ldr	r3, [r3, #28]
 800a1c6:	4917      	ldr	r1, [pc, #92]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a1cc:	f000 f834 	bl	800a238 <HAL_RCC_GetSysClockFreq>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	4b14      	ldr	r3, [pc, #80]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	0a1b      	lsrs	r3, r3, #8
 800a1d8:	f003 030f 	and.w	r3, r3, #15
 800a1dc:	4912      	ldr	r1, [pc, #72]	@ (800a228 <HAL_RCC_ClockConfig+0x35c>)
 800a1de:	5ccb      	ldrb	r3, [r1, r3]
 800a1e0:	f003 031f 	and.w	r3, r3, #31
 800a1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	f003 030f 	and.w	r3, r3, #15
 800a1f2:	4a0d      	ldr	r2, [pc, #52]	@ (800a228 <HAL_RCC_ClockConfig+0x35c>)
 800a1f4:	5cd3      	ldrb	r3, [r2, r3]
 800a1f6:	f003 031f 	and.w	r3, r3, #31
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a200:	4a0a      	ldr	r2, [pc, #40]	@ (800a22c <HAL_RCC_ClockConfig+0x360>)
 800a202:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a204:	4a0a      	ldr	r2, [pc, #40]	@ (800a230 <HAL_RCC_ClockConfig+0x364>)
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a20a:	4b0a      	ldr	r3, [pc, #40]	@ (800a234 <HAL_RCC_ClockConfig+0x368>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4618      	mov	r0, r3
 800a210:	f7f9 fa8e 	bl	8003730 <HAL_InitTick>
 800a214:	4603      	mov	r3, r0
 800a216:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a218:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	58024400 	.word	0x58024400
 800a228:	08015c54 	.word	0x08015c54
 800a22c:	24000004 	.word	0x24000004
 800a230:	24000000 	.word	0x24000000
 800a234:	24000008 	.word	0x24000008

0800a238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a238:	b480      	push	{r7}
 800a23a:	b089      	sub	sp, #36	@ 0x24
 800a23c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a23e:	4bb3      	ldr	r3, [pc, #716]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a246:	2b18      	cmp	r3, #24
 800a248:	f200 8155 	bhi.w	800a4f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a24c:	a201      	add	r2, pc, #4	@ (adr r2, 800a254 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a252:	bf00      	nop
 800a254:	0800a2b9 	.word	0x0800a2b9
 800a258:	0800a4f7 	.word	0x0800a4f7
 800a25c:	0800a4f7 	.word	0x0800a4f7
 800a260:	0800a4f7 	.word	0x0800a4f7
 800a264:	0800a4f7 	.word	0x0800a4f7
 800a268:	0800a4f7 	.word	0x0800a4f7
 800a26c:	0800a4f7 	.word	0x0800a4f7
 800a270:	0800a4f7 	.word	0x0800a4f7
 800a274:	0800a2df 	.word	0x0800a2df
 800a278:	0800a4f7 	.word	0x0800a4f7
 800a27c:	0800a4f7 	.word	0x0800a4f7
 800a280:	0800a4f7 	.word	0x0800a4f7
 800a284:	0800a4f7 	.word	0x0800a4f7
 800a288:	0800a4f7 	.word	0x0800a4f7
 800a28c:	0800a4f7 	.word	0x0800a4f7
 800a290:	0800a4f7 	.word	0x0800a4f7
 800a294:	0800a2e5 	.word	0x0800a2e5
 800a298:	0800a4f7 	.word	0x0800a4f7
 800a29c:	0800a4f7 	.word	0x0800a4f7
 800a2a0:	0800a4f7 	.word	0x0800a4f7
 800a2a4:	0800a4f7 	.word	0x0800a4f7
 800a2a8:	0800a4f7 	.word	0x0800a4f7
 800a2ac:	0800a4f7 	.word	0x0800a4f7
 800a2b0:	0800a4f7 	.word	0x0800a4f7
 800a2b4:	0800a2eb 	.word	0x0800a2eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2b8:	4b94      	ldr	r3, [pc, #592]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0320 	and.w	r3, r3, #32
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d009      	beq.n	800a2d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2c4:	4b91      	ldr	r3, [pc, #580]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	08db      	lsrs	r3, r3, #3
 800a2ca:	f003 0303 	and.w	r3, r3, #3
 800a2ce:	4a90      	ldr	r2, [pc, #576]	@ (800a510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a2d6:	e111      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a2d8:	4b8d      	ldr	r3, [pc, #564]	@ (800a510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a2da:	61bb      	str	r3, [r7, #24]
      break;
 800a2dc:	e10e      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a2de:	4b8d      	ldr	r3, [pc, #564]	@ (800a514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a2e0:	61bb      	str	r3, [r7, #24]
      break;
 800a2e2:	e10b      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a2e4:	4b8c      	ldr	r3, [pc, #560]	@ (800a518 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a2e6:	61bb      	str	r3, [r7, #24]
      break;
 800a2e8:	e108      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2ea:	4b88      	ldr	r3, [pc, #544]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ee:	f003 0303 	and.w	r3, r3, #3
 800a2f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a2f4:	4b85      	ldr	r3, [pc, #532]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f8:	091b      	lsrs	r3, r3, #4
 800a2fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a300:	4b82      	ldr	r3, [pc, #520]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a304:	f003 0301 	and.w	r3, r3, #1
 800a308:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a30a:	4b80      	ldr	r3, [pc, #512]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a30e:	08db      	lsrs	r3, r3, #3
 800a310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	fb02 f303 	mul.w	r3, r2, r3
 800a31a:	ee07 3a90 	vmov	s15, r3
 800a31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a322:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 80e1 	beq.w	800a4f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b02      	cmp	r3, #2
 800a332:	f000 8083 	beq.w	800a43c <HAL_RCC_GetSysClockFreq+0x204>
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b02      	cmp	r3, #2
 800a33a:	f200 80a1 	bhi.w	800a480 <HAL_RCC_GetSysClockFreq+0x248>
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <HAL_RCC_GetSysClockFreq+0x114>
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d056      	beq.n	800a3f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a34a:	e099      	b.n	800a480 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a34c:	4b6f      	ldr	r3, [pc, #444]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 0320 	and.w	r3, r3, #32
 800a354:	2b00      	cmp	r3, #0
 800a356:	d02d      	beq.n	800a3b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a358:	4b6c      	ldr	r3, [pc, #432]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	08db      	lsrs	r3, r3, #3
 800a35e:	f003 0303 	and.w	r3, r3, #3
 800a362:	4a6b      	ldr	r2, [pc, #428]	@ (800a510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a364:	fa22 f303 	lsr.w	r3, r2, r3
 800a368:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	ee07 3a90 	vmov	s15, r3
 800a370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	ee07 3a90 	vmov	s15, r3
 800a37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a382:	4b62      	ldr	r3, [pc, #392]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a38a:	ee07 3a90 	vmov	s15, r3
 800a38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a392:	ed97 6a02 	vldr	s12, [r7, #8]
 800a396:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a3b2:	e087      	b.n	800a4c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a520 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3c6:	4b51      	ldr	r3, [pc, #324]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a3f6:	e065      	b.n	800a4c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a402:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a524 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a40a:	4b40      	ldr	r3, [pc, #256]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a40c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a41a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a41e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a42a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a43a:	e043      	b.n	800a4c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a446:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a528 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44e:	4b2f      	ldr	r3, [pc, #188]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a456:	ee07 3a90 	vmov	s15, r3
 800a45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a462:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a47a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a47e:	e021      	b.n	800a4c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	ee07 3a90 	vmov	s15, r3
 800a486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a48a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a524 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a48e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a492:	4b1e      	ldr	r3, [pc, #120]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a49a:	ee07 3a90 	vmov	s15, r3
 800a49e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a4c4:	4b11      	ldr	r3, [pc, #68]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4c8:	0a5b      	lsrs	r3, r3, #9
 800a4ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	ee07 3a90 	vmov	s15, r3
 800a4d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a4dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4e8:	ee17 3a90 	vmov	r3, s15
 800a4ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a4ee:	e005      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	61bb      	str	r3, [r7, #24]
      break;
 800a4f4:	e002      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a4f6:	4b07      	ldr	r3, [pc, #28]	@ (800a514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a4f8:	61bb      	str	r3, [r7, #24]
      break;
 800a4fa:	bf00      	nop
  }

  return sysclockfreq;
 800a4fc:	69bb      	ldr	r3, [r7, #24]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3724      	adds	r7, #36	@ 0x24
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	58024400 	.word	0x58024400
 800a510:	03d09000 	.word	0x03d09000
 800a514:	003d0900 	.word	0x003d0900
 800a518:	017d7840 	.word	0x017d7840
 800a51c:	46000000 	.word	0x46000000
 800a520:	4c742400 	.word	0x4c742400
 800a524:	4a742400 	.word	0x4a742400
 800a528:	4bbebc20 	.word	0x4bbebc20

0800a52c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a532:	f7ff fe81 	bl	800a238 <HAL_RCC_GetSysClockFreq>
 800a536:	4602      	mov	r2, r0
 800a538:	4b10      	ldr	r3, [pc, #64]	@ (800a57c <HAL_RCC_GetHCLKFreq+0x50>)
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	0a1b      	lsrs	r3, r3, #8
 800a53e:	f003 030f 	and.w	r3, r3, #15
 800a542:	490f      	ldr	r1, [pc, #60]	@ (800a580 <HAL_RCC_GetHCLKFreq+0x54>)
 800a544:	5ccb      	ldrb	r3, [r1, r3]
 800a546:	f003 031f 	and.w	r3, r3, #31
 800a54a:	fa22 f303 	lsr.w	r3, r2, r3
 800a54e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a550:	4b0a      	ldr	r3, [pc, #40]	@ (800a57c <HAL_RCC_GetHCLKFreq+0x50>)
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	4a09      	ldr	r2, [pc, #36]	@ (800a580 <HAL_RCC_GetHCLKFreq+0x54>)
 800a55a:	5cd3      	ldrb	r3, [r2, r3]
 800a55c:	f003 031f 	and.w	r3, r3, #31
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	fa22 f303 	lsr.w	r3, r2, r3
 800a566:	4a07      	ldr	r2, [pc, #28]	@ (800a584 <HAL_RCC_GetHCLKFreq+0x58>)
 800a568:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a56a:	4a07      	ldr	r2, [pc, #28]	@ (800a588 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a570:	4b04      	ldr	r3, [pc, #16]	@ (800a584 <HAL_RCC_GetHCLKFreq+0x58>)
 800a572:	681b      	ldr	r3, [r3, #0]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	58024400 	.word	0x58024400
 800a580:	08015c54 	.word	0x08015c54
 800a584:	24000004 	.word	0x24000004
 800a588:	24000000 	.word	0x24000000

0800a58c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a590:	f7ff ffcc 	bl	800a52c <HAL_RCC_GetHCLKFreq>
 800a594:	4602      	mov	r2, r0
 800a596:	4b06      	ldr	r3, [pc, #24]	@ (800a5b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	091b      	lsrs	r3, r3, #4
 800a59c:	f003 0307 	and.w	r3, r3, #7
 800a5a0:	4904      	ldr	r1, [pc, #16]	@ (800a5b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a5a2:	5ccb      	ldrb	r3, [r1, r3]
 800a5a4:	f003 031f 	and.w	r3, r3, #31
 800a5a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	58024400 	.word	0x58024400
 800a5b4:	08015c54 	.word	0x08015c54

0800a5b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a5bc:	f7ff ffb6 	bl	800a52c <HAL_RCC_GetHCLKFreq>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	4b06      	ldr	r3, [pc, #24]	@ (800a5dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5c4:	69db      	ldr	r3, [r3, #28]
 800a5c6:	0a1b      	lsrs	r3, r3, #8
 800a5c8:	f003 0307 	and.w	r3, r3, #7
 800a5cc:	4904      	ldr	r1, [pc, #16]	@ (800a5e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a5ce:	5ccb      	ldrb	r3, [r1, r3]
 800a5d0:	f003 031f 	and.w	r3, r3, #31
 800a5d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	58024400 	.word	0x58024400
 800a5e0:	08015c54 	.word	0x08015c54

0800a5e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a5e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5e8:	b0ca      	sub	sp, #296	@ 0x128
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a608:	2500      	movs	r5, #0
 800a60a:	ea54 0305 	orrs.w	r3, r4, r5
 800a60e:	d049      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a616:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a61a:	d02f      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a61c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a620:	d828      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a622:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a626:	d01a      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a628:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a62c:	d822      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a636:	d007      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a638:	e01c      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a63a:	4bb8      	ldr	r3, [pc, #736]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63e:	4ab7      	ldr	r2, [pc, #732]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a644:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a646:	e01a      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a64c:	3308      	adds	r3, #8
 800a64e:	2102      	movs	r1, #2
 800a650:	4618      	mov	r0, r3
 800a652:	f002 fb61 	bl	800cd18 <RCCEx_PLL2_Config>
 800a656:	4603      	mov	r3, r0
 800a658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a65c:	e00f      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a662:	3328      	adds	r3, #40	@ 0x28
 800a664:	2102      	movs	r1, #2
 800a666:	4618      	mov	r0, r3
 800a668:	f002 fc08 	bl	800ce7c <RCCEx_PLL3_Config>
 800a66c:	4603      	mov	r3, r0
 800a66e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a672:	e004      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a67a:	e000      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a67c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a67e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10a      	bne.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a686:	4ba5      	ldr	r3, [pc, #660]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a68a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a694:	4aa1      	ldr	r2, [pc, #644]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a696:	430b      	orrs	r3, r1
 800a698:	6513      	str	r3, [r2, #80]	@ 0x50
 800a69a:	e003      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a69c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a6a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a6b0:	f04f 0900 	mov.w	r9, #0
 800a6b4:	ea58 0309 	orrs.w	r3, r8, r9
 800a6b8:	d047      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6c0:	2b04      	cmp	r3, #4
 800a6c2:	d82a      	bhi.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a6c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ca:	bf00      	nop
 800a6cc:	0800a6e1 	.word	0x0800a6e1
 800a6d0:	0800a6ef 	.word	0x0800a6ef
 800a6d4:	0800a705 	.word	0x0800a705
 800a6d8:	0800a723 	.word	0x0800a723
 800a6dc:	0800a723 	.word	0x0800a723
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6e0:	4b8e      	ldr	r3, [pc, #568]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e4:	4a8d      	ldr	r2, [pc, #564]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6ec:	e01a      	b.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f2:	3308      	adds	r3, #8
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f002 fb0e 	bl	800cd18 <RCCEx_PLL2_Config>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a702:	e00f      	b.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a708:	3328      	adds	r3, #40	@ 0x28
 800a70a:	2100      	movs	r1, #0
 800a70c:	4618      	mov	r0, r3
 800a70e:	f002 fbb5 	bl	800ce7c <RCCEx_PLL3_Config>
 800a712:	4603      	mov	r3, r0
 800a714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a718:	e004      	b.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a720:	e000      	b.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a722:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10a      	bne.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a72c:	4b7b      	ldr	r3, [pc, #492]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a72e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a730:	f023 0107 	bic.w	r1, r3, #7
 800a734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a73a:	4a78      	ldr	r2, [pc, #480]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a73c:	430b      	orrs	r3, r1
 800a73e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a740:	e003      	b.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a746:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a756:	f04f 0b00 	mov.w	fp, #0
 800a75a:	ea5a 030b 	orrs.w	r3, sl, fp
 800a75e:	d04c      	beq.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a76a:	d030      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a76c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a770:	d829      	bhi.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a772:	2bc0      	cmp	r3, #192	@ 0xc0
 800a774:	d02d      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a776:	2bc0      	cmp	r3, #192	@ 0xc0
 800a778:	d825      	bhi.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a77a:	2b80      	cmp	r3, #128	@ 0x80
 800a77c:	d018      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a77e:	2b80      	cmp	r3, #128	@ 0x80
 800a780:	d821      	bhi.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a782:	2b00      	cmp	r3, #0
 800a784:	d002      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a786:	2b40      	cmp	r3, #64	@ 0x40
 800a788:	d007      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a78a:	e01c      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a78c:	4b63      	ldr	r3, [pc, #396]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a790:	4a62      	ldr	r2, [pc, #392]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a798:	e01c      	b.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a79e:	3308      	adds	r3, #8
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f002 fab8 	bl	800cd18 <RCCEx_PLL2_Config>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a7ae:	e011      	b.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7b4:	3328      	adds	r3, #40	@ 0x28
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f002 fb5f 	bl	800ce7c <RCCEx_PLL3_Config>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a7c4:	e006      	b.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7cc:	e002      	b.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a7ce:	bf00      	nop
 800a7d0:	e000      	b.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a7d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10a      	bne.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a7dc:	4b4f      	ldr	r3, [pc, #316]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7e0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7ea:	4a4c      	ldr	r2, [pc, #304]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7ec:	430b      	orrs	r3, r1
 800a7ee:	6513      	str	r3, [r2, #80]	@ 0x50
 800a7f0:	e003      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a7fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a802:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a806:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a80a:	2300      	movs	r3, #0
 800a80c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a810:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a814:	460b      	mov	r3, r1
 800a816:	4313      	orrs	r3, r2
 800a818:	d053      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a81e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a822:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a826:	d035      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a828:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a82c:	d82e      	bhi.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a82e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a832:	d031      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a834:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a838:	d828      	bhi.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a83a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a83e:	d01a      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a844:	d822      	bhi.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a846:	2b00      	cmp	r3, #0
 800a848:	d003      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a84a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a84e:	d007      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a850:	e01c      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a852:	4b32      	ldr	r3, [pc, #200]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a856:	4a31      	ldr	r2, [pc, #196]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a85c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a85e:	e01c      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a864:	3308      	adds	r3, #8
 800a866:	2100      	movs	r1, #0
 800a868:	4618      	mov	r0, r3
 800a86a:	f002 fa55 	bl	800cd18 <RCCEx_PLL2_Config>
 800a86e:	4603      	mov	r3, r0
 800a870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a874:	e011      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a87a:	3328      	adds	r3, #40	@ 0x28
 800a87c:	2100      	movs	r1, #0
 800a87e:	4618      	mov	r0, r3
 800a880:	f002 fafc 	bl	800ce7c <RCCEx_PLL3_Config>
 800a884:	4603      	mov	r3, r0
 800a886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a88a:	e006      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a892:	e002      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a894:	bf00      	nop
 800a896:	e000      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a89a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10b      	bne.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a8a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8a6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a8b2:	4a1a      	ldr	r2, [pc, #104]	@ (800a91c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8b4:	430b      	orrs	r3, r1
 800a8b6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8b8:	e003      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a8c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a8ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a8d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a8dc:	460b      	mov	r3, r1
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	d056      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a8ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8ee:	d038      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a8f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8f4:	d831      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a8f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8fa:	d034      	beq.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a8fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a900:	d82b      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a902:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a906:	d01d      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a908:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a90c:	d825      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d006      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a912:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a916:	d00a      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a918:	e01f      	b.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a91a:	bf00      	nop
 800a91c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a920:	4ba2      	ldr	r3, [pc, #648]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a924:	4aa1      	ldr	r2, [pc, #644]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a92a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a92c:	e01c      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a932:	3308      	adds	r3, #8
 800a934:	2100      	movs	r1, #0
 800a936:	4618      	mov	r0, r3
 800a938:	f002 f9ee 	bl	800cd18 <RCCEx_PLL2_Config>
 800a93c:	4603      	mov	r3, r0
 800a93e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a942:	e011      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a948:	3328      	adds	r3, #40	@ 0x28
 800a94a:	2100      	movs	r1, #0
 800a94c:	4618      	mov	r0, r3
 800a94e:	f002 fa95 	bl	800ce7c <RCCEx_PLL3_Config>
 800a952:	4603      	mov	r3, r0
 800a954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a958:	e006      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a960:	e002      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a962:	bf00      	nop
 800a964:	e000      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a966:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10b      	bne.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a970:	4b8e      	ldr	r3, [pc, #568]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a974:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a97c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a980:	4a8a      	ldr	r2, [pc, #552]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a982:	430b      	orrs	r3, r1
 800a984:	6593      	str	r3, [r2, #88]	@ 0x58
 800a986:	e003      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a98c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a99c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a9a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	d03a      	beq.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9b6:	2b30      	cmp	r3, #48	@ 0x30
 800a9b8:	d01f      	beq.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a9ba:	2b30      	cmp	r3, #48	@ 0x30
 800a9bc:	d819      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a9be:	2b20      	cmp	r3, #32
 800a9c0:	d00c      	beq.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a9c2:	2b20      	cmp	r3, #32
 800a9c4:	d815      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d019      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a9ca:	2b10      	cmp	r3, #16
 800a9cc:	d111      	bne.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ce:	4b77      	ldr	r3, [pc, #476]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d2:	4a76      	ldr	r2, [pc, #472]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a9d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a9da:	e011      	b.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	2102      	movs	r1, #2
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f002 f997 	bl	800cd18 <RCCEx_PLL2_Config>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a9f0:	e006      	b.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9f8:	e002      	b.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a9fa:	bf00      	nop
 800a9fc:	e000      	b.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a9fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10a      	bne.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800aa08:	4b68      	ldr	r3, [pc, #416]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa0c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800aa10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa16:	4a65      	ldr	r2, [pc, #404]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa18:	430b      	orrs	r3, r1
 800aa1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa1c:	e003      	b.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800aa32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800aa36:	2300      	movs	r3, #0
 800aa38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aa3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800aa40:	460b      	mov	r3, r1
 800aa42:	4313      	orrs	r3, r2
 800aa44:	d051      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aa46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa50:	d035      	beq.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800aa52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa56:	d82e      	bhi.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aa58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa5c:	d031      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800aa5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa62:	d828      	bhi.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aa64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa68:	d01a      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800aa6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa6e:	d822      	bhi.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800aa74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa78:	d007      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800aa7a:	e01c      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa7c:	4b4b      	ldr	r3, [pc, #300]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa80:	4a4a      	ldr	r2, [pc, #296]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aa88:	e01c      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa8e:	3308      	adds	r3, #8
 800aa90:	2100      	movs	r1, #0
 800aa92:	4618      	mov	r0, r3
 800aa94:	f002 f940 	bl	800cd18 <RCCEx_PLL2_Config>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aa9e:	e011      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aaa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaa4:	3328      	adds	r3, #40	@ 0x28
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f002 f9e7 	bl	800ce7c <RCCEx_PLL3_Config>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aab4:	e006      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aabc:	e002      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800aabe:	bf00      	nop
 800aac0:	e000      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800aac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10a      	bne.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aacc:	4b37      	ldr	r3, [pc, #220]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aad0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800aad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aada:	4a34      	ldr	r2, [pc, #208]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aadc:	430b      	orrs	r3, r1
 800aade:	6513      	str	r3, [r2, #80]	@ 0x50
 800aae0:	e003      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aae6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aaea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800aaf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aafa:	2300      	movs	r3, #0
 800aafc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ab00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ab04:	460b      	mov	r3, r1
 800ab06:	4313      	orrs	r3, r2
 800ab08:	d056      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ab0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab14:	d033      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ab16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab1a:	d82c      	bhi.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ab1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab20:	d02f      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ab22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab26:	d826      	bhi.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ab28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab2c:	d02b      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ab2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab32:	d820      	bhi.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ab34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab38:	d012      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ab3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab3e:	d81a      	bhi.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d022      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ab44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab48:	d115      	bne.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab4e:	3308      	adds	r3, #8
 800ab50:	2101      	movs	r1, #1
 800ab52:	4618      	mov	r0, r3
 800ab54:	f002 f8e0 	bl	800cd18 <RCCEx_PLL2_Config>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ab5e:	e015      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab64:	3328      	adds	r3, #40	@ 0x28
 800ab66:	2101      	movs	r1, #1
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f002 f987 	bl	800ce7c <RCCEx_PLL3_Config>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ab74:	e00a      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab7c:	e006      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ab7e:	bf00      	nop
 800ab80:	e004      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ab82:	bf00      	nop
 800ab84:	e002      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ab86:	bf00      	nop
 800ab88:	e000      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ab8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10d      	bne.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ab94:	4b05      	ldr	r3, [pc, #20]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ab9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aba2:	4a02      	ldr	r2, [pc, #8]	@ (800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aba4:	430b      	orrs	r3, r1
 800aba6:	6513      	str	r3, [r2, #80]	@ 0x50
 800aba8:	e006      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800abaa:	bf00      	nop
 800abac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800abb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800abc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800abc8:	2300      	movs	r3, #0
 800abca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800abce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800abd2:	460b      	mov	r3, r1
 800abd4:	4313      	orrs	r3, r2
 800abd6:	d055      	beq.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800abd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abe4:	d033      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800abe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abea:	d82c      	bhi.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800abec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abf0:	d02f      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800abf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abf6:	d826      	bhi.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800abf8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800abfc:	d02b      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800abfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac02:	d820      	bhi.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ac04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac08:	d012      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ac0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac0e:	d81a      	bhi.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d022      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ac14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac18:	d115      	bne.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac1e:	3308      	adds	r3, #8
 800ac20:	2101      	movs	r1, #1
 800ac22:	4618      	mov	r0, r3
 800ac24:	f002 f878 	bl	800cd18 <RCCEx_PLL2_Config>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ac2e:	e015      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac34:	3328      	adds	r3, #40	@ 0x28
 800ac36:	2101      	movs	r1, #1
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f002 f91f 	bl	800ce7c <RCCEx_PLL3_Config>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ac44:	e00a      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac4c:	e006      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ac4e:	bf00      	nop
 800ac50:	e004      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ac52:	bf00      	nop
 800ac54:	e002      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ac56:	bf00      	nop
 800ac58:	e000      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ac5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10b      	bne.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ac64:	4ba3      	ldr	r3, [pc, #652]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac68:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ac6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ac74:	4a9f      	ldr	r2, [pc, #636]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac76:	430b      	orrs	r3, r1
 800ac78:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac7a:	e003      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ac84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ac90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ac94:	2300      	movs	r3, #0
 800ac96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ac9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4313      	orrs	r3, r2
 800aca2:	d037      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acae:	d00e      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800acb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acb4:	d816      	bhi.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d018      	beq.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x708>
 800acba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acbe:	d111      	bne.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acc0:	4b8c      	ldr	r3, [pc, #560]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc4:	4a8b      	ldr	r2, [pc, #556]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800accc:	e00f      	b.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acd2:	3308      	adds	r3, #8
 800acd4:	2101      	movs	r1, #1
 800acd6:	4618      	mov	r0, r3
 800acd8:	f002 f81e 	bl	800cd18 <RCCEx_PLL2_Config>
 800acdc:	4603      	mov	r3, r0
 800acde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ace2:	e004      	b.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800acea:	e000      	b.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800acec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10a      	bne.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800acf6:	4b7f      	ldr	r3, [pc, #508]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acfa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800acfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad04:	4a7b      	ldr	r2, [pc, #492]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad06:	430b      	orrs	r3, r1
 800ad08:	6513      	str	r3, [r2, #80]	@ 0x50
 800ad0a:	e003      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ad14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800ad20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ad24:	2300      	movs	r3, #0
 800ad26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ad2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4313      	orrs	r3, r2
 800ad32:	d039      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ad34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad3a:	2b03      	cmp	r3, #3
 800ad3c:	d81c      	bhi.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800ad3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad44 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad44:	0800ad81 	.word	0x0800ad81
 800ad48:	0800ad55 	.word	0x0800ad55
 800ad4c:	0800ad63 	.word	0x0800ad63
 800ad50:	0800ad81 	.word	0x0800ad81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad54:	4b67      	ldr	r3, [pc, #412]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad58:	4a66      	ldr	r2, [pc, #408]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ad60:	e00f      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad66:	3308      	adds	r3, #8
 800ad68:	2102      	movs	r1, #2
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f001 ffd4 	bl	800cd18 <RCCEx_PLL2_Config>
 800ad70:	4603      	mov	r3, r0
 800ad72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ad76:	e004      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad7e:	e000      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800ad80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10a      	bne.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ad8a:	4b5a      	ldr	r3, [pc, #360]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad8e:	f023 0103 	bic.w	r1, r3, #3
 800ad92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad98:	4a56      	ldr	r2, [pc, #344]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad9a:	430b      	orrs	r3, r1
 800ad9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad9e:	e003      	b.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ada0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ada4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ada8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800adb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800adb8:	2300      	movs	r3, #0
 800adba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800adbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800adc2:	460b      	mov	r3, r1
 800adc4:	4313      	orrs	r3, r2
 800adc6:	f000 809f 	beq.w	800af08 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800adca:	4b4b      	ldr	r3, [pc, #300]	@ (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a4a      	ldr	r2, [pc, #296]	@ (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800add0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800add4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800add6:	f7f8 fcf5 	bl	80037c4 <HAL_GetTick>
 800adda:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800adde:	e00b      	b.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ade0:	f7f8 fcf0 	bl	80037c4 <HAL_GetTick>
 800ade4:	4602      	mov	r2, r0
 800ade6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800adea:	1ad3      	subs	r3, r2, r3
 800adec:	2b64      	cmp	r3, #100	@ 0x64
 800adee:	d903      	bls.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800adf0:	2303      	movs	r3, #3
 800adf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800adf6:	e005      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800adf8:	4b3f      	ldr	r3, [pc, #252]	@ (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d0ed      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ae04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d179      	bne.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ae0c:	4b39      	ldr	r3, [pc, #228]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ae10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae18:	4053      	eors	r3, r2
 800ae1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d015      	beq.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae22:	4b34      	ldr	r3, [pc, #208]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae2a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ae2e:	4b31      	ldr	r3, [pc, #196]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae32:	4a30      	ldr	r2, [pc, #192]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae38:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ae3a:	4b2e      	ldr	r3, [pc, #184]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae3e:	4a2d      	ldr	r2, [pc, #180]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae44:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ae46:	4a2b      	ldr	r2, [pc, #172]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ae4c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ae4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae5a:	d118      	bne.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae5c:	f7f8 fcb2 	bl	80037c4 <HAL_GetTick>
 800ae60:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae64:	e00d      	b.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae66:	f7f8 fcad 	bl	80037c4 <HAL_GetTick>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ae70:	1ad2      	subs	r2, r2, r3
 800ae72:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d903      	bls.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800ae80:	e005      	b.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae82:	4b1c      	ldr	r3, [pc, #112]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae86:	f003 0302 	and.w	r3, r3, #2
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d0eb      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ae8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d129      	bne.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aea2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aea6:	d10e      	bne.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800aea8:	4b12      	ldr	r3, [pc, #72]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800aeb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aeb8:	091a      	lsrs	r2, r3, #4
 800aeba:	4b10      	ldr	r3, [pc, #64]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800aebc:	4013      	ands	r3, r2
 800aebe:	4a0d      	ldr	r2, [pc, #52]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aec0:	430b      	orrs	r3, r1
 800aec2:	6113      	str	r3, [r2, #16]
 800aec4:	e005      	b.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800aec6:	4b0b      	ldr	r3, [pc, #44]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	4a0a      	ldr	r2, [pc, #40]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aecc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aed0:	6113      	str	r3, [r2, #16]
 800aed2:	4b08      	ldr	r3, [pc, #32]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aed4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800aed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aee2:	4a04      	ldr	r2, [pc, #16]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aee4:	430b      	orrs	r3, r1
 800aee6:	6713      	str	r3, [r2, #112]	@ 0x70
 800aee8:	e00e      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aeea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aeee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800aef2:	e009      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800aef4:	58024400 	.word	0x58024400
 800aef8:	58024800 	.word	0x58024800
 800aefc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800af08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	f002 0301 	and.w	r3, r2, #1
 800af14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800af18:	2300      	movs	r3, #0
 800af1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800af1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800af22:	460b      	mov	r3, r1
 800af24:	4313      	orrs	r3, r2
 800af26:	f000 8089 	beq.w	800b03c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800af2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af30:	2b28      	cmp	r3, #40	@ 0x28
 800af32:	d86b      	bhi.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800af34:	a201      	add	r2, pc, #4	@ (adr r2, 800af3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3a:	bf00      	nop
 800af3c:	0800b015 	.word	0x0800b015
 800af40:	0800b00d 	.word	0x0800b00d
 800af44:	0800b00d 	.word	0x0800b00d
 800af48:	0800b00d 	.word	0x0800b00d
 800af4c:	0800b00d 	.word	0x0800b00d
 800af50:	0800b00d 	.word	0x0800b00d
 800af54:	0800b00d 	.word	0x0800b00d
 800af58:	0800b00d 	.word	0x0800b00d
 800af5c:	0800afe1 	.word	0x0800afe1
 800af60:	0800b00d 	.word	0x0800b00d
 800af64:	0800b00d 	.word	0x0800b00d
 800af68:	0800b00d 	.word	0x0800b00d
 800af6c:	0800b00d 	.word	0x0800b00d
 800af70:	0800b00d 	.word	0x0800b00d
 800af74:	0800b00d 	.word	0x0800b00d
 800af78:	0800b00d 	.word	0x0800b00d
 800af7c:	0800aff7 	.word	0x0800aff7
 800af80:	0800b00d 	.word	0x0800b00d
 800af84:	0800b00d 	.word	0x0800b00d
 800af88:	0800b00d 	.word	0x0800b00d
 800af8c:	0800b00d 	.word	0x0800b00d
 800af90:	0800b00d 	.word	0x0800b00d
 800af94:	0800b00d 	.word	0x0800b00d
 800af98:	0800b00d 	.word	0x0800b00d
 800af9c:	0800b015 	.word	0x0800b015
 800afa0:	0800b00d 	.word	0x0800b00d
 800afa4:	0800b00d 	.word	0x0800b00d
 800afa8:	0800b00d 	.word	0x0800b00d
 800afac:	0800b00d 	.word	0x0800b00d
 800afb0:	0800b00d 	.word	0x0800b00d
 800afb4:	0800b00d 	.word	0x0800b00d
 800afb8:	0800b00d 	.word	0x0800b00d
 800afbc:	0800b015 	.word	0x0800b015
 800afc0:	0800b00d 	.word	0x0800b00d
 800afc4:	0800b00d 	.word	0x0800b00d
 800afc8:	0800b00d 	.word	0x0800b00d
 800afcc:	0800b00d 	.word	0x0800b00d
 800afd0:	0800b00d 	.word	0x0800b00d
 800afd4:	0800b00d 	.word	0x0800b00d
 800afd8:	0800b00d 	.word	0x0800b00d
 800afdc:	0800b015 	.word	0x0800b015
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afe4:	3308      	adds	r3, #8
 800afe6:	2101      	movs	r1, #1
 800afe8:	4618      	mov	r0, r3
 800afea:	f001 fe95 	bl	800cd18 <RCCEx_PLL2_Config>
 800afee:	4603      	mov	r3, r0
 800aff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aff4:	e00f      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800affa:	3328      	adds	r3, #40	@ 0x28
 800affc:	2101      	movs	r1, #1
 800affe:	4618      	mov	r0, r3
 800b000:	f001 ff3c 	bl	800ce7c <RCCEx_PLL3_Config>
 800b004:	4603      	mov	r3, r0
 800b006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b00a:	e004      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b012:	e000      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b014:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10a      	bne.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b01e:	4bbf      	ldr	r3, [pc, #764]	@ (800b31c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b022:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b02a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b02c:	4abb      	ldr	r2, [pc, #748]	@ (800b31c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b02e:	430b      	orrs	r3, r1
 800b030:	6553      	str	r3, [r2, #84]	@ 0x54
 800b032:	e003      	b.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b038:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b044:	f002 0302 	and.w	r3, r2, #2
 800b048:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b04c:	2300      	movs	r3, #0
 800b04e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b052:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b056:	460b      	mov	r3, r1
 800b058:	4313      	orrs	r3, r2
 800b05a:	d041      	beq.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b060:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b062:	2b05      	cmp	r3, #5
 800b064:	d824      	bhi.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b066:	a201      	add	r2, pc, #4	@ (adr r2, 800b06c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06c:	0800b0b9 	.word	0x0800b0b9
 800b070:	0800b085 	.word	0x0800b085
 800b074:	0800b09b 	.word	0x0800b09b
 800b078:	0800b0b9 	.word	0x0800b0b9
 800b07c:	0800b0b9 	.word	0x0800b0b9
 800b080:	0800b0b9 	.word	0x0800b0b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b088:	3308      	adds	r3, #8
 800b08a:	2101      	movs	r1, #1
 800b08c:	4618      	mov	r0, r3
 800b08e:	f001 fe43 	bl	800cd18 <RCCEx_PLL2_Config>
 800b092:	4603      	mov	r3, r0
 800b094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b098:	e00f      	b.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b09e:	3328      	adds	r3, #40	@ 0x28
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f001 feea 	bl	800ce7c <RCCEx_PLL3_Config>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b0ae:	e004      	b.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b0b6:	e000      	b.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b0b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d10a      	bne.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b0c2:	4b96      	ldr	r3, [pc, #600]	@ (800b31c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0c6:	f023 0107 	bic.w	r1, r3, #7
 800b0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0d0:	4a92      	ldr	r2, [pc, #584]	@ (800b31c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b0d2:	430b      	orrs	r3, r1
 800b0d4:	6553      	str	r3, [r2, #84]	@ 0x54
 800b0d6:	e003      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f002 0304 	and.w	r3, r2, #4
 800b0ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b0f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	d044      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b108:	2b05      	cmp	r3, #5
 800b10a:	d825      	bhi.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b10c:	a201      	add	r2, pc, #4	@ (adr r2, 800b114 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b112:	bf00      	nop
 800b114:	0800b161 	.word	0x0800b161
 800b118:	0800b12d 	.word	0x0800b12d
 800b11c:	0800b143 	.word	0x0800b143
 800b120:	0800b161 	.word	0x0800b161
 800b124:	0800b161 	.word	0x0800b161
 800b128:	0800b161 	.word	0x0800b161
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b130:	3308      	adds	r3, #8
 800b132:	2101      	movs	r1, #1
 800b134:	4618      	mov	r0, r3
 800b136:	f001 fdef 	bl	800cd18 <RCCEx_PLL2_Config>
 800b13a:	4603      	mov	r3, r0
 800b13c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b140:	e00f      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b146:	3328      	adds	r3, #40	@ 0x28
 800b148:	2101      	movs	r1, #1
 800b14a:	4618      	mov	r0, r3
 800b14c:	f001 fe96 	bl	800ce7c <RCCEx_PLL3_Config>
 800b150:	4603      	mov	r3, r0
 800b152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b156:	e004      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b15e:	e000      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b160:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10b      	bne.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b16a:	4b6c      	ldr	r3, [pc, #432]	@ (800b31c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b16c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b16e:	f023 0107 	bic.w	r1, r3, #7
 800b172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b17a:	4a68      	ldr	r2, [pc, #416]	@ (800b31c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b17c:	430b      	orrs	r3, r1
 800b17e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b180:	e003      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b192:	f002 0320 	and.w	r3, r2, #32
 800b196:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b19a:	2300      	movs	r3, #0
 800b19c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	d055      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1b6:	d033      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b1b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1bc:	d82c      	bhi.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b1be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1c2:	d02f      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b1c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1c8:	d826      	bhi.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b1ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b1ce:	d02b      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b1d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b1d4:	d820      	bhi.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b1d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1da:	d012      	beq.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b1dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1e0:	d81a      	bhi.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d022      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b1e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1ea:	d115      	bne.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1f0:	3308      	adds	r3, #8
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f001 fd8f 	bl	800cd18 <RCCEx_PLL2_Config>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b200:	e015      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b206:	3328      	adds	r3, #40	@ 0x28
 800b208:	2102      	movs	r1, #2
 800b20a:	4618      	mov	r0, r3
 800b20c:	f001 fe36 	bl	800ce7c <RCCEx_PLL3_Config>
 800b210:	4603      	mov	r3, r0
 800b212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b216:	e00a      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b21e:	e006      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b220:	bf00      	nop
 800b222:	e004      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b224:	bf00      	nop
 800b226:	e002      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b228:	bf00      	nop
 800b22a:	e000      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b22c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b22e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10b      	bne.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b236:	4b39      	ldr	r3, [pc, #228]	@ (800b31c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b23a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b246:	4a35      	ldr	r2, [pc, #212]	@ (800b31c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b248:	430b      	orrs	r3, r1
 800b24a:	6553      	str	r3, [r2, #84]	@ 0x54
 800b24c:	e003      	b.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b24e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b252:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b266:	2300      	movs	r3, #0
 800b268:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b26c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b270:	460b      	mov	r3, r1
 800b272:	4313      	orrs	r3, r2
 800b274:	d058      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b27a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b27e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b282:	d033      	beq.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b284:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b288:	d82c      	bhi.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b28a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b28e:	d02f      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b294:	d826      	bhi.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b296:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b29a:	d02b      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b29c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2a0:	d820      	bhi.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b2a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2a6:	d012      	beq.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b2a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2ac:	d81a      	bhi.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d022      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b2b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2b6:	d115      	bne.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2bc:	3308      	adds	r3, #8
 800b2be:	2100      	movs	r1, #0
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f001 fd29 	bl	800cd18 <RCCEx_PLL2_Config>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b2cc:	e015      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2d2:	3328      	adds	r3, #40	@ 0x28
 800b2d4:	2102      	movs	r1, #2
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f001 fdd0 	bl	800ce7c <RCCEx_PLL3_Config>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b2e2:	e00a      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b2ea:	e006      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b2ec:	bf00      	nop
 800b2ee:	e004      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b2f0:	bf00      	nop
 800b2f2:	e002      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b2f4:	bf00      	nop
 800b2f6:	e000      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b2f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10e      	bne.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b302:	4b06      	ldr	r3, [pc, #24]	@ (800b31c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b306:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b30e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b312:	4a02      	ldr	r2, [pc, #8]	@ (800b31c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b314:	430b      	orrs	r3, r1
 800b316:	6593      	str	r3, [r2, #88]	@ 0x58
 800b318:	e006      	b.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b31a:	bf00      	nop
 800b31c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b330:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b338:	2300      	movs	r3, #0
 800b33a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b33e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b342:	460b      	mov	r3, r1
 800b344:	4313      	orrs	r3, r2
 800b346:	d055      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b34c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b350:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b354:	d033      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b356:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b35a:	d82c      	bhi.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b35c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b360:	d02f      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b366:	d826      	bhi.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b368:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b36c:	d02b      	beq.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b36e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b372:	d820      	bhi.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b374:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b378:	d012      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b37a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b37e:	d81a      	bhi.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b380:	2b00      	cmp	r3, #0
 800b382:	d022      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b388:	d115      	bne.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b38e:	3308      	adds	r3, #8
 800b390:	2100      	movs	r1, #0
 800b392:	4618      	mov	r0, r3
 800b394:	f001 fcc0 	bl	800cd18 <RCCEx_PLL2_Config>
 800b398:	4603      	mov	r3, r0
 800b39a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b39e:	e015      	b.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3a4:	3328      	adds	r3, #40	@ 0x28
 800b3a6:	2102      	movs	r1, #2
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f001 fd67 	bl	800ce7c <RCCEx_PLL3_Config>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b3b4:	e00a      	b.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b3bc:	e006      	b.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b3be:	bf00      	nop
 800b3c0:	e004      	b.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b3c2:	bf00      	nop
 800b3c4:	e002      	b.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b3c6:	bf00      	nop
 800b3c8:	e000      	b.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b3ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d10b      	bne.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b3d4:	4ba1      	ldr	r3, [pc, #644]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b3d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b3dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b3e4:	4a9d      	ldr	r2, [pc, #628]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b3e6:	430b      	orrs	r3, r1
 800b3e8:	6593      	str	r3, [r2, #88]	@ 0x58
 800b3ea:	e003      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b3f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fc:	f002 0308 	and.w	r3, r2, #8
 800b400:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b404:	2300      	movs	r3, #0
 800b406:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b40a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b40e:	460b      	mov	r3, r1
 800b410:	4313      	orrs	r3, r2
 800b412:	d01e      	beq.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b41c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b420:	d10c      	bne.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b426:	3328      	adds	r3, #40	@ 0x28
 800b428:	2102      	movs	r1, #2
 800b42a:	4618      	mov	r0, r3
 800b42c:	f001 fd26 	bl	800ce7c <RCCEx_PLL3_Config>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d002      	beq.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b43c:	4b87      	ldr	r3, [pc, #540]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b43e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b440:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b44c:	4a83      	ldr	r2, [pc, #524]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b44e:	430b      	orrs	r3, r1
 800b450:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45a:	f002 0310 	and.w	r3, r2, #16
 800b45e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b462:	2300      	movs	r3, #0
 800b464:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b468:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b46c:	460b      	mov	r3, r1
 800b46e:	4313      	orrs	r3, r2
 800b470:	d01e      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b476:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b47a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b47e:	d10c      	bne.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b484:	3328      	adds	r3, #40	@ 0x28
 800b486:	2102      	movs	r1, #2
 800b488:	4618      	mov	r0, r3
 800b48a:	f001 fcf7 	bl	800ce7c <RCCEx_PLL3_Config>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d002      	beq.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b49a:	4b70      	ldr	r3, [pc, #448]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b49c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b49e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b4aa:	4a6c      	ldr	r2, [pc, #432]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4ac:	430b      	orrs	r3, r1
 800b4ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b4bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b4c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	d03e      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b4d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4dc:	d022      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b4de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4e2:	d81b      	bhi.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d003      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4ec:	d00b      	beq.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b4ee:	e015      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4f4:	3308      	adds	r3, #8
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f001 fc0d 	bl	800cd18 <RCCEx_PLL2_Config>
 800b4fe:	4603      	mov	r3, r0
 800b500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b504:	e00f      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b50a:	3328      	adds	r3, #40	@ 0x28
 800b50c:	2102      	movs	r1, #2
 800b50e:	4618      	mov	r0, r3
 800b510:	f001 fcb4 	bl	800ce7c <RCCEx_PLL3_Config>
 800b514:	4603      	mov	r3, r0
 800b516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b51a:	e004      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b522:	e000      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b524:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10b      	bne.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b52e:	4b4b      	ldr	r3, [pc, #300]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b532:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b53a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b53e:	4a47      	ldr	r2, [pc, #284]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b540:	430b      	orrs	r3, r1
 800b542:	6593      	str	r3, [r2, #88]	@ 0x58
 800b544:	e003      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b54a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b556:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b55a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b55c:	2300      	movs	r3, #0
 800b55e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b560:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b564:	460b      	mov	r3, r1
 800b566:	4313      	orrs	r3, r2
 800b568:	d03b      	beq.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b56e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b572:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b576:	d01f      	beq.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b578:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b57c:	d818      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b57e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b582:	d003      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b584:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b588:	d007      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b58a:	e011      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b58c:	4b33      	ldr	r3, [pc, #204]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b590:	4a32      	ldr	r2, [pc, #200]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b598:	e00f      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b59e:	3328      	adds	r3, #40	@ 0x28
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f001 fc6a 	bl	800ce7c <RCCEx_PLL3_Config>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b5ae:	e004      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b5b6:	e000      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b5b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10b      	bne.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b5c2:	4b26      	ldr	r3, [pc, #152]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5d2:	4a22      	ldr	r2, [pc, #136]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5d4:	430b      	orrs	r3, r1
 800b5d6:	6553      	str	r3, [r2, #84]	@ 0x54
 800b5d8:	e003      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b5ee:	673b      	str	r3, [r7, #112]	@ 0x70
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	677b      	str	r3, [r7, #116]	@ 0x74
 800b5f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	d034      	beq.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b60c:	d007      	beq.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b60e:	e011      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b610:	4b12      	ldr	r3, [pc, #72]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b614:	4a11      	ldr	r2, [pc, #68]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b61a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b61c:	e00e      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b622:	3308      	adds	r3, #8
 800b624:	2102      	movs	r1, #2
 800b626:	4618      	mov	r0, r3
 800b628:	f001 fb76 	bl	800cd18 <RCCEx_PLL2_Config>
 800b62c:	4603      	mov	r3, r0
 800b62e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b632:	e003      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b63a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b63c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10d      	bne.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b644:	4b05      	ldr	r3, [pc, #20]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b648:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b652:	4a02      	ldr	r2, [pc, #8]	@ (800b65c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b654:	430b      	orrs	r3, r1
 800b656:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b658:	e006      	b.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b65a:	bf00      	nop
 800b65c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b674:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b676:	2300      	movs	r3, #0
 800b678:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b67a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b67e:	460b      	mov	r3, r1
 800b680:	4313      	orrs	r3, r2
 800b682:	d00c      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b688:	3328      	adds	r3, #40	@ 0x28
 800b68a:	2102      	movs	r1, #2
 800b68c:	4618      	mov	r0, r3
 800b68e:	f001 fbf5 	bl	800ce7c <RCCEx_PLL3_Config>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b6aa:	663b      	str	r3, [r7, #96]	@ 0x60
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	667b      	str	r3, [r7, #100]	@ 0x64
 800b6b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	d038      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6c6:	d018      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b6c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6cc:	d811      	bhi.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b6ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6d2:	d014      	beq.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b6d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6d8:	d80b      	bhi.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d011      	beq.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b6de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6e2:	d106      	bne.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6e4:	4bc3      	ldr	r3, [pc, #780]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e8:	4ac2      	ldr	r2, [pc, #776]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b6ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b6f0:	e008      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b6f8:	e004      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b6fa:	bf00      	nop
 800b6fc:	e002      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b6fe:	bf00      	nop
 800b700:	e000      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b702:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10b      	bne.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b70c:	4bb9      	ldr	r3, [pc, #740]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b70e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b710:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b71c:	4ab5      	ldr	r2, [pc, #724]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b71e:	430b      	orrs	r3, r1
 800b720:	6553      	str	r3, [r2, #84]	@ 0x54
 800b722:	e003      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b738:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b73a:	2300      	movs	r3, #0
 800b73c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b73e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b742:	460b      	mov	r3, r1
 800b744:	4313      	orrs	r3, r2
 800b746:	d009      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b748:	4baa      	ldr	r3, [pc, #680]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b74a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b74c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b756:	4aa7      	ldr	r2, [pc, #668]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b758:	430b      	orrs	r3, r1
 800b75a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b768:	653b      	str	r3, [r7, #80]	@ 0x50
 800b76a:	2300      	movs	r3, #0
 800b76c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b76e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b772:	460b      	mov	r3, r1
 800b774:	4313      	orrs	r3, r2
 800b776:	d00a      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b778:	4b9e      	ldr	r3, [pc, #632]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b77a:	691b      	ldr	r3, [r3, #16]
 800b77c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b784:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b788:	4a9a      	ldr	r2, [pc, #616]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b78a:	430b      	orrs	r3, r1
 800b78c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b796:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b79a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b79c:	2300      	movs	r3, #0
 800b79e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	d009      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b7aa:	4b92      	ldr	r3, [pc, #584]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7ae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7b8:	4a8e      	ldr	r2, [pc, #568]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7ba:	430b      	orrs	r3, r1
 800b7bc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b7ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	d00e      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b7da:	4b86      	ldr	r3, [pc, #536]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	4a85      	ldr	r2, [pc, #532]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b7e4:	6113      	str	r3, [r2, #16]
 800b7e6:	4b83      	ldr	r3, [pc, #524]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7e8:	6919      	ldr	r1, [r3, #16]
 800b7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b7f2:	4a80      	ldr	r2, [pc, #512]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7f4:	430b      	orrs	r3, r1
 800b7f6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b800:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b804:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b806:	2300      	movs	r3, #0
 800b808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b80a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b80e:	460b      	mov	r3, r1
 800b810:	4313      	orrs	r3, r2
 800b812:	d009      	beq.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b814:	4b77      	ldr	r3, [pc, #476]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b818:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b822:	4a74      	ldr	r2, [pc, #464]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b824:	430b      	orrs	r3, r1
 800b826:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b834:	633b      	str	r3, [r7, #48]	@ 0x30
 800b836:	2300      	movs	r3, #0
 800b838:	637b      	str	r3, [r7, #52]	@ 0x34
 800b83a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b83e:	460b      	mov	r3, r1
 800b840:	4313      	orrs	r3, r2
 800b842:	d00a      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b844:	4b6b      	ldr	r3, [pc, #428]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b848:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b854:	4a67      	ldr	r2, [pc, #412]	@ (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b856:	430b      	orrs	r3, r1
 800b858:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	2100      	movs	r1, #0
 800b864:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b86c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b870:	460b      	mov	r3, r1
 800b872:	4313      	orrs	r3, r2
 800b874:	d011      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b87a:	3308      	adds	r3, #8
 800b87c:	2100      	movs	r1, #0
 800b87e:	4618      	mov	r0, r3
 800b880:	f001 fa4a 	bl	800cd18 <RCCEx_PLL2_Config>
 800b884:	4603      	mov	r3, r0
 800b886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b88a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d003      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	6239      	str	r1, [r7, #32]
 800b8a6:	f003 0302 	and.w	r3, r3, #2
 800b8aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	d011      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8ba:	3308      	adds	r3, #8
 800b8bc:	2101      	movs	r1, #1
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f001 fa2a 	bl	800cd18 <RCCEx_PLL2_Config>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b8ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b8d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	61b9      	str	r1, [r7, #24]
 800b8e6:	f003 0304 	and.w	r3, r3, #4
 800b8ea:	61fb      	str	r3, [r7, #28]
 800b8ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	d011      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8fa:	3308      	adds	r3, #8
 800b8fc:	2102      	movs	r1, #2
 800b8fe:	4618      	mov	r0, r3
 800b900:	f001 fa0a 	bl	800cd18 <RCCEx_PLL2_Config>
 800b904:	4603      	mov	r3, r0
 800b906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b90a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	2100      	movs	r1, #0
 800b924:	6139      	str	r1, [r7, #16]
 800b926:	f003 0308 	and.w	r3, r3, #8
 800b92a:	617b      	str	r3, [r7, #20]
 800b92c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b930:	460b      	mov	r3, r1
 800b932:	4313      	orrs	r3, r2
 800b934:	d011      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b93a:	3328      	adds	r3, #40	@ 0x28
 800b93c:	2100      	movs	r1, #0
 800b93e:	4618      	mov	r0, r3
 800b940:	f001 fa9c 	bl	800ce7c <RCCEx_PLL3_Config>
 800b944:	4603      	mov	r3, r0
 800b946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b94a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d003      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b956:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	2100      	movs	r1, #0
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	f003 0310 	and.w	r3, r3, #16
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b970:	460b      	mov	r3, r1
 800b972:	4313      	orrs	r3, r2
 800b974:	d011      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b97a:	3328      	adds	r3, #40	@ 0x28
 800b97c:	2101      	movs	r1, #1
 800b97e:	4618      	mov	r0, r3
 800b980:	f001 fa7c 	bl	800ce7c <RCCEx_PLL3_Config>
 800b984:	4603      	mov	r3, r0
 800b986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b98a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d003      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b99a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	6039      	str	r1, [r7, #0]
 800b9a6:	f003 0320 	and.w	r3, r3, #32
 800b9aa:	607b      	str	r3, [r7, #4]
 800b9ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	d011      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9ba:	3328      	adds	r3, #40	@ 0x28
 800b9bc:	2102      	movs	r1, #2
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f001 fa5c 	bl	800ce7c <RCCEx_PLL3_Config>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b9ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d003      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b9d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b9da:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e000      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9f4:	58024400 	.word	0x58024400

0800b9f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b090      	sub	sp, #64	@ 0x40
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ba02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba06:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ba0a:	430b      	orrs	r3, r1
 800ba0c:	f040 8094 	bne.w	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ba10:	4b9e      	ldr	r3, [pc, #632]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba14:	f003 0307 	and.w	r3, r3, #7
 800ba18:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1c:	2b04      	cmp	r3, #4
 800ba1e:	f200 8087 	bhi.w	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ba22:	a201      	add	r2, pc, #4	@ (adr r2, 800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ba24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba28:	0800ba3d 	.word	0x0800ba3d
 800ba2c:	0800ba65 	.word	0x0800ba65
 800ba30:	0800ba8d 	.word	0x0800ba8d
 800ba34:	0800bb29 	.word	0x0800bb29
 800ba38:	0800bab5 	.word	0x0800bab5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba3c:	4b93      	ldr	r3, [pc, #588]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba48:	d108      	bne.n	800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f001 f810 	bl	800ca74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba58:	f000 bd45 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba60:	f000 bd41 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba64:	4b89      	ldr	r3, [pc, #548]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba70:	d108      	bne.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba72:	f107 0318 	add.w	r3, r7, #24
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 fd54 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba80:	f000 bd31 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba88:	f000 bd2d 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba8c:	4b7f      	ldr	r3, [pc, #508]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba98:	d108      	bne.n	800baac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba9a:	f107 030c 	add.w	r3, r7, #12
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 fe94 	bl	800c7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baa8:	f000 bd1d 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800baac:	2300      	movs	r3, #0
 800baae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bab0:	f000 bd19 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bab4:	4b75      	ldr	r3, [pc, #468]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bab8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800babc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800babe:	4b73      	ldr	r3, [pc, #460]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f003 0304 	and.w	r3, r3, #4
 800bac6:	2b04      	cmp	r3, #4
 800bac8:	d10c      	bne.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800baca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d109      	bne.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bad0:	4b6e      	ldr	r3, [pc, #440]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	08db      	lsrs	r3, r3, #3
 800bad6:	f003 0303 	and.w	r3, r3, #3
 800bada:	4a6d      	ldr	r2, [pc, #436]	@ (800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800badc:	fa22 f303 	lsr.w	r3, r2, r3
 800bae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bae2:	e01f      	b.n	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bae4:	4b69      	ldr	r3, [pc, #420]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800baf0:	d106      	bne.n	800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800baf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800baf8:	d102      	bne.n	800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bafa:	4b66      	ldr	r3, [pc, #408]	@ (800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bafe:	e011      	b.n	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb00:	4b62      	ldr	r3, [pc, #392]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb0c:	d106      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bb0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb14:	d102      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb16:	4b60      	ldr	r3, [pc, #384]	@ (800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bb18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb1a:	e003      	b.n	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bb20:	f000 bce1 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bb24:	f000 bcdf 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb28:	4b5c      	ldr	r3, [pc, #368]	@ (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb2c:	f000 bcdb 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bb30:	2300      	movs	r3, #0
 800bb32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb34:	f000 bcd7 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bb38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb3c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800bb40:	430b      	orrs	r3, r1
 800bb42:	f040 80ad 	bne.w	800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bb46:	4b51      	ldr	r3, [pc, #324]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb4a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800bb4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb56:	d056      	beq.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bb58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb5e:	f200 8090 	bhi.w	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb64:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb66:	f000 8088 	beq.w	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb6c:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb6e:	f200 8088 	bhi.w	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb74:	2b80      	cmp	r3, #128	@ 0x80
 800bb76:	d032      	beq.n	800bbde <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bb78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7a:	2b80      	cmp	r3, #128	@ 0x80
 800bb7c:	f200 8081 	bhi.w	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb88:	2b40      	cmp	r3, #64	@ 0x40
 800bb8a:	d014      	beq.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bb8c:	e079      	b.n	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb8e:	4b3f      	ldr	r3, [pc, #252]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb9a:	d108      	bne.n	800bbae <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bba0:	4618      	mov	r0, r3
 800bba2:	f000 ff67 	bl	800ca74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbaa:	f000 bc9c 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbb2:	f000 bc98 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbb6:	4b35      	ldr	r3, [pc, #212]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbc2:	d108      	bne.n	800bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbc4:	f107 0318 	add.w	r3, r7, #24
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f000 fcab 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbd2:	f000 bc88 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbda:	f000 bc84 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbde:	4b2b      	ldr	r3, [pc, #172]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbea:	d108      	bne.n	800bbfe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbec:	f107 030c 	add.w	r3, r7, #12
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f000 fdeb 	bl	800c7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbfa:	f000 bc74 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc02:	f000 bc70 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc06:	4b21      	ldr	r3, [pc, #132]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bc0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc10:	4b1e      	ldr	r3, [pc, #120]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f003 0304 	and.w	r3, r3, #4
 800bc18:	2b04      	cmp	r3, #4
 800bc1a:	d10c      	bne.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bc1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d109      	bne.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc22:	4b1a      	ldr	r3, [pc, #104]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	08db      	lsrs	r3, r3, #3
 800bc28:	f003 0303 	and.w	r3, r3, #3
 800bc2c:	4a18      	ldr	r2, [pc, #96]	@ (800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bc2e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc34:	e01f      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc36:	4b15      	ldr	r3, [pc, #84]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc42:	d106      	bne.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bc44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc4a:	d102      	bne.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc4c:	4b11      	ldr	r3, [pc, #68]	@ (800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bc4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc50:	e011      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc52:	4b0e      	ldr	r3, [pc, #56]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc5e:	d106      	bne.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bc60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc66:	d102      	bne.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc68:	4b0b      	ldr	r3, [pc, #44]	@ (800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bc6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc6c:	e003      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bc72:	f000 bc38 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc76:	f000 bc36 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc7a:	4b08      	ldr	r3, [pc, #32]	@ (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bc7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc7e:	f000 bc32 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bc82:	2300      	movs	r3, #0
 800bc84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc86:	f000 bc2e 	b.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc8a:	bf00      	nop
 800bc8c:	58024400 	.word	0x58024400
 800bc90:	03d09000 	.word	0x03d09000
 800bc94:	003d0900 	.word	0x003d0900
 800bc98:	017d7840 	.word	0x017d7840
 800bc9c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bca4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800bca8:	430b      	orrs	r3, r1
 800bcaa:	f040 809c 	bne.w	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bcae:	4b9e      	ldr	r3, [pc, #632]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bcb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcb2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800bcb6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bcbe:	d054      	beq.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bcc6:	f200 808b 	bhi.w	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bcca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bccc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bcd0:	f000 8083 	beq.w	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800bcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bcda:	f200 8081 	bhi.w	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bce4:	d02f      	beq.n	800bd46 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800bce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bcec:	d878      	bhi.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bcee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d004      	beq.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bcfa:	d012      	beq.n	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800bcfc:	e070      	b.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bcfe:	4b8a      	ldr	r3, [pc, #552]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd0a:	d107      	bne.n	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd10:	4618      	mov	r0, r3
 800bd12:	f000 feaf 	bl	800ca74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd1a:	e3e4      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd20:	e3e1      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd22:	4b81      	ldr	r3, [pc, #516]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd2e:	d107      	bne.n	800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd30:	f107 0318 	add.w	r3, r7, #24
 800bd34:	4618      	mov	r0, r3
 800bd36:	f000 fbf5 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd3e:	e3d2      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd40:	2300      	movs	r3, #0
 800bd42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd44:	e3cf      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd46:	4b78      	ldr	r3, [pc, #480]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd52:	d107      	bne.n	800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd54:	f107 030c 	add.w	r3, r7, #12
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f000 fd37 	bl	800c7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd62:	e3c0      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd64:	2300      	movs	r3, #0
 800bd66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd68:	e3bd      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd6a:	4b6f      	ldr	r3, [pc, #444]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bd72:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd74:	4b6c      	ldr	r3, [pc, #432]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f003 0304 	and.w	r3, r3, #4
 800bd7c:	2b04      	cmp	r3, #4
 800bd7e:	d10c      	bne.n	800bd9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800bd80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d109      	bne.n	800bd9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd86:	4b68      	ldr	r3, [pc, #416]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	08db      	lsrs	r3, r3, #3
 800bd8c:	f003 0303 	and.w	r3, r3, #3
 800bd90:	4a66      	ldr	r2, [pc, #408]	@ (800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bd92:	fa22 f303 	lsr.w	r3, r2, r3
 800bd96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd98:	e01e      	b.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd9a:	4b63      	ldr	r3, [pc, #396]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bda2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bda6:	d106      	bne.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800bda8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdae:	d102      	bne.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bdb0:	4b5f      	ldr	r3, [pc, #380]	@ (800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdb4:	e010      	b.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdb6:	4b5c      	ldr	r3, [pc, #368]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdc2:	d106      	bne.n	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800bdc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdca:	d102      	bne.n	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdcc:	4b59      	ldr	r3, [pc, #356]	@ (800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bdce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdd0:	e002      	b.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bdd6:	e386      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bdd8:	e385      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bdda:	4b57      	ldr	r3, [pc, #348]	@ (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdde:	e382      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bde0:	2300      	movs	r3, #0
 800bde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bde4:	e37f      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bde6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdea:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800bdee:	430b      	orrs	r3, r1
 800bdf0:	f040 80a7 	bne.w	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bdf4:	4b4c      	ldr	r3, [pc, #304]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdf8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800bdfc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be04:	d055      	beq.n	800beb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800be06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be0c:	f200 8096 	bhi.w	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800be10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800be16:	f000 8084 	beq.w	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800be1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800be20:	f200 808c 	bhi.w	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800be24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be2a:	d030      	beq.n	800be8e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800be2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be32:	f200 8083 	bhi.w	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800be36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d004      	beq.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800be3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be42:	d012      	beq.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800be44:	e07a      	b.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be46:	4b38      	ldr	r3, [pc, #224]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be52:	d107      	bne.n	800be64 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be58:	4618      	mov	r0, r3
 800be5a:	f000 fe0b 	bl	800ca74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be62:	e340      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be68:	e33d      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be6a:	4b2f      	ldr	r3, [pc, #188]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be76:	d107      	bne.n	800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be78:	f107 0318 	add.w	r3, r7, #24
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 fb51 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be86:	e32e      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be8c:	e32b      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be8e:	4b26      	ldr	r3, [pc, #152]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be9a:	d107      	bne.n	800beac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be9c:	f107 030c 	add.w	r3, r7, #12
 800bea0:	4618      	mov	r0, r3
 800bea2:	f000 fc93 	bl	800c7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beaa:	e31c      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800beac:	2300      	movs	r3, #0
 800beae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beb0:	e319      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800beb2:	4b1d      	ldr	r3, [pc, #116]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800beb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800beb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800beba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bebc:	4b1a      	ldr	r3, [pc, #104]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f003 0304 	and.w	r3, r3, #4
 800bec4:	2b04      	cmp	r3, #4
 800bec6:	d10c      	bne.n	800bee2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800bec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beca:	2b00      	cmp	r3, #0
 800becc:	d109      	bne.n	800bee2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bece:	4b16      	ldr	r3, [pc, #88]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	08db      	lsrs	r3, r3, #3
 800bed4:	f003 0303 	and.w	r3, r3, #3
 800bed8:	4a14      	ldr	r2, [pc, #80]	@ (800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800beda:	fa22 f303 	lsr.w	r3, r2, r3
 800bede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bee0:	e01e      	b.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bee2:	4b11      	ldr	r3, [pc, #68]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800beea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800beee:	d106      	bne.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800bef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bef2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bef6:	d102      	bne.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bef8:	4b0d      	ldr	r3, [pc, #52]	@ (800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800befa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800befc:	e010      	b.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800befe:	4b0a      	ldr	r3, [pc, #40]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf0a:	d106      	bne.n	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf12:	d102      	bne.n	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf14:	4b07      	ldr	r3, [pc, #28]	@ (800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bf16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf18:	e002      	b.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bf1e:	e2e2      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf20:	e2e1      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf22:	4b05      	ldr	r3, [pc, #20]	@ (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bf24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf26:	e2de      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf28:	58024400 	.word	0x58024400
 800bf2c:	03d09000 	.word	0x03d09000
 800bf30:	003d0900 	.word	0x003d0900
 800bf34:	017d7840 	.word	0x017d7840
 800bf38:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf40:	e2d1      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bf42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf46:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800bf4a:	430b      	orrs	r3, r1
 800bf4c:	f040 809c 	bne.w	800c088 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bf50:	4b93      	ldr	r3, [pc, #588]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bf52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf54:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800bf58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf60:	d054      	beq.n	800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800bf62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf68:	f200 808b 	bhi.w	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bf72:	f000 8083 	beq.w	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800bf76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bf7c:	f200 8081 	bhi.w	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bf80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf86:	d02f      	beq.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800bf88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf8e:	d878      	bhi.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bf90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d004      	beq.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800bf96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf9c:	d012      	beq.n	800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800bf9e:	e070      	b.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfa0:	4b7f      	ldr	r3, [pc, #508]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bfac:	d107      	bne.n	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f000 fd5e 	bl	800ca74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfbc:	e293      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfc2:	e290      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfc4:	4b76      	ldr	r3, [pc, #472]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bfd0:	d107      	bne.n	800bfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfd2:	f107 0318 	add.w	r3, r7, #24
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f000 faa4 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfe0:	e281      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfe6:	e27e      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bfe8:	4b6d      	ldr	r3, [pc, #436]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bff4:	d107      	bne.n	800c006 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bff6:	f107 030c 	add.w	r3, r7, #12
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 fbe6 	bl	800c7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c004:	e26f      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c00a:	e26c      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c00c:	4b64      	ldr	r3, [pc, #400]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c00e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c010:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c014:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c016:	4b62      	ldr	r3, [pc, #392]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 0304 	and.w	r3, r3, #4
 800c01e:	2b04      	cmp	r3, #4
 800c020:	d10c      	bne.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c024:	2b00      	cmp	r3, #0
 800c026:	d109      	bne.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c028:	4b5d      	ldr	r3, [pc, #372]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	08db      	lsrs	r3, r3, #3
 800c02e:	f003 0303 	and.w	r3, r3, #3
 800c032:	4a5c      	ldr	r2, [pc, #368]	@ (800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c034:	fa22 f303 	lsr.w	r3, r2, r3
 800c038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c03a:	e01e      	b.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c03c:	4b58      	ldr	r3, [pc, #352]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c048:	d106      	bne.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c04a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c04c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c050:	d102      	bne.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c052:	4b55      	ldr	r3, [pc, #340]	@ (800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c056:	e010      	b.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c058:	4b51      	ldr	r3, [pc, #324]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c064:	d106      	bne.n	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c06c:	d102      	bne.n	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c06e:	4b4f      	ldr	r3, [pc, #316]	@ (800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c072:	e002      	b.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c078:	e235      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c07a:	e234      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c07c:	4b4c      	ldr	r3, [pc, #304]	@ (800c1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c080:	e231      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c086:	e22e      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c08c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c090:	430b      	orrs	r3, r1
 800c092:	f040 808f 	bne.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c096:	4b42      	ldr	r3, [pc, #264]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c09a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c09e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c0a6:	d06b      	beq.n	800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c0ae:	d874      	bhi.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c0b6:	d056      	beq.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c0be:	d86c      	bhi.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c0c6:	d03b      	beq.n	800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c0ce:	d864      	bhi.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0d6:	d021      	beq.n	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0de:	d85c      	bhi.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d004      	beq.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0ec:	d004      	beq.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c0ee:	e054      	b.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c0f0:	f7fe fa4c 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800c0f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c0f6:	e1f6      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0f8:	4b29      	ldr	r3, [pc, #164]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c100:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c104:	d107      	bne.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c106:	f107 0318 	add.w	r3, r7, #24
 800c10a:	4618      	mov	r0, r3
 800c10c:	f000 fa0a 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c114:	e1e7      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c116:	2300      	movs	r3, #0
 800c118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c11a:	e1e4      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c11c:	4b20      	ldr	r3, [pc, #128]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c128:	d107      	bne.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c12a:	f107 030c 	add.w	r3, r7, #12
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 fb4c 	bl	800c7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c138:	e1d5      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c13a:	2300      	movs	r3, #0
 800c13c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c13e:	e1d2      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c140:	4b17      	ldr	r3, [pc, #92]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f003 0304 	and.w	r3, r3, #4
 800c148:	2b04      	cmp	r3, #4
 800c14a:	d109      	bne.n	800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c14c:	4b14      	ldr	r3, [pc, #80]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	08db      	lsrs	r3, r3, #3
 800c152:	f003 0303 	and.w	r3, r3, #3
 800c156:	4a13      	ldr	r2, [pc, #76]	@ (800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c158:	fa22 f303 	lsr.w	r3, r2, r3
 800c15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c15e:	e1c2      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c160:	2300      	movs	r3, #0
 800c162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c164:	e1bf      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c166:	4b0e      	ldr	r3, [pc, #56]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c16e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c172:	d102      	bne.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c174:	4b0c      	ldr	r3, [pc, #48]	@ (800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c178:	e1b5      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c17e:	e1b2      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c180:	4b07      	ldr	r3, [pc, #28]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c18c:	d102      	bne.n	800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c18e:	4b07      	ldr	r3, [pc, #28]	@ (800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c192:	e1a8      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c194:	2300      	movs	r3, #0
 800c196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c198:	e1a5      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c19e:	e1a2      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c1a0:	58024400 	.word	0x58024400
 800c1a4:	03d09000 	.word	0x03d09000
 800c1a8:	003d0900 	.word	0x003d0900
 800c1ac:	017d7840 	.word	0x017d7840
 800c1b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c1b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1b8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c1bc:	430b      	orrs	r3, r1
 800c1be:	d173      	bne.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c1c0:	4b9c      	ldr	r3, [pc, #624]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c1c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c1c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1d0:	d02f      	beq.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1d8:	d863      	bhi.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d004      	beq.n	800c1ea <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1e6:	d012      	beq.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c1e8:	e05b      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1ea:	4b92      	ldr	r3, [pc, #584]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1f6:	d107      	bne.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1f8:	f107 0318 	add.w	r3, r7, #24
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 f991 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c206:	e16e      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c20c:	e16b      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c20e:	4b89      	ldr	r3, [pc, #548]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c21a:	d107      	bne.n	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c21c:	f107 030c 	add.w	r3, r7, #12
 800c220:	4618      	mov	r0, r3
 800c222:	f000 fad3 	bl	800c7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c22a:	e15c      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c230:	e159      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c232:	4b80      	ldr	r3, [pc, #512]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c236:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c23a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c23c:	4b7d      	ldr	r3, [pc, #500]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b04      	cmp	r3, #4
 800c246:	d10c      	bne.n	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d109      	bne.n	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c24e:	4b79      	ldr	r3, [pc, #484]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	08db      	lsrs	r3, r3, #3
 800c254:	f003 0303 	and.w	r3, r3, #3
 800c258:	4a77      	ldr	r2, [pc, #476]	@ (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c25a:	fa22 f303 	lsr.w	r3, r2, r3
 800c25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c260:	e01e      	b.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c262:	4b74      	ldr	r3, [pc, #464]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c26a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c26e:	d106      	bne.n	800c27e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c276:	d102      	bne.n	800c27e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c278:	4b70      	ldr	r3, [pc, #448]	@ (800c43c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c27c:	e010      	b.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c27e:	4b6d      	ldr	r3, [pc, #436]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c286:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c28a:	d106      	bne.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c28e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c292:	d102      	bne.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c294:	4b6a      	ldr	r3, [pc, #424]	@ (800c440 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c298:	e002      	b.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c29a:	2300      	movs	r3, #0
 800c29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c29e:	e122      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2a0:	e121      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2a6:	e11e      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c2a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ac:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c2b0:	430b      	orrs	r3, r1
 800c2b2:	d133      	bne.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c2b4:	4b5f      	ldr	r3, [pc, #380]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c2bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d004      	beq.n	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2ca:	d012      	beq.n	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c2cc:	e023      	b.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2ce:	4b59      	ldr	r3, [pc, #356]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c2d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c2da:	d107      	bne.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f000 fbc7 	bl	800ca74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ea:	e0fc      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2f0:	e0f9      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2f2:	4b50      	ldr	r3, [pc, #320]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2fe:	d107      	bne.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c300:	f107 0318 	add.w	r3, r7, #24
 800c304:	4618      	mov	r0, r3
 800c306:	f000 f90d 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c30a:	6a3b      	ldr	r3, [r7, #32]
 800c30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c30e:	e0ea      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c310:	2300      	movs	r3, #0
 800c312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c314:	e0e7      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c316:	2300      	movs	r3, #0
 800c318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c31a:	e0e4      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c31c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c320:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c324:	430b      	orrs	r3, r1
 800c326:	f040 808d 	bne.w	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c32a:	4b42      	ldr	r3, [pc, #264]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c32c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c32e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800c332:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c33a:	d06b      	beq.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c33e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c342:	d874      	bhi.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c34a:	d056      	beq.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c34e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c352:	d86c      	bhi.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c356:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c35a:	d03b      	beq.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c35e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c362:	d864      	bhi.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c36a:	d021      	beq.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c372:	d85c      	bhi.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c376:	2b00      	cmp	r3, #0
 800c378:	d004      	beq.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c37c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c380:	d004      	beq.n	800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c382:	e054      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c384:	f000 f8b8 	bl	800c4f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c388:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c38a:	e0ac      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c38c:	4b29      	ldr	r3, [pc, #164]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c394:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c398:	d107      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c39a:	f107 0318 	add.w	r3, r7, #24
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 f8c0 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3a8:	e09d      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3ae:	e09a      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3b0:	4b20      	ldr	r3, [pc, #128]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3bc:	d107      	bne.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3be:	f107 030c 	add.w	r3, r7, #12
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f000 fa02 	bl	800c7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3cc:	e08b      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3d2:	e088      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c3d4:	4b17      	ldr	r3, [pc, #92]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f003 0304 	and.w	r3, r3, #4
 800c3dc:	2b04      	cmp	r3, #4
 800c3de:	d109      	bne.n	800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3e0:	4b14      	ldr	r3, [pc, #80]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	08db      	lsrs	r3, r3, #3
 800c3e6:	f003 0303 	and.w	r3, r3, #3
 800c3ea:	4a13      	ldr	r2, [pc, #76]	@ (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c3ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3f2:	e078      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3f8:	e075      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c3fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c406:	d102      	bne.n	800c40e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c408:	4b0c      	ldr	r3, [pc, #48]	@ (800c43c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c40c:	e06b      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c40e:	2300      	movs	r3, #0
 800c410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c412:	e068      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c414:	4b07      	ldr	r3, [pc, #28]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c41c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c420:	d102      	bne.n	800c428 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c422:	4b07      	ldr	r3, [pc, #28]	@ (800c440 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c426:	e05e      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c428:	2300      	movs	r3, #0
 800c42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c42c:	e05b      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c432:	e058      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c434:	58024400 	.word	0x58024400
 800c438:	03d09000 	.word	0x03d09000
 800c43c:	003d0900 	.word	0x003d0900
 800c440:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c444:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c448:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c44c:	430b      	orrs	r3, r1
 800c44e:	d148      	bne.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c450:	4b27      	ldr	r3, [pc, #156]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c454:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c458:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c460:	d02a      	beq.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c468:	d838      	bhi.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d004      	beq.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c476:	d00d      	beq.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c478:	e030      	b.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c47a:	4b1d      	ldr	r3, [pc, #116]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c482:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c486:	d102      	bne.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c488:	4b1a      	ldr	r3, [pc, #104]	@ (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c48c:	e02b      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c48e:	2300      	movs	r3, #0
 800c490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c492:	e028      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c494:	4b16      	ldr	r3, [pc, #88]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c49c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c4a0:	d107      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 fae4 	bl	800ca74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4b0:	e019      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4b6:	e016      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4b8:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c4c4:	d107      	bne.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4c6:	f107 0318 	add.w	r3, r7, #24
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 f82a 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d4:	e007      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4da:	e004      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4e0:	e001      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800c4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3740      	adds	r7, #64	@ 0x40
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	58024400 	.word	0x58024400
 800c4f4:	017d7840 	.word	0x017d7840

0800c4f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c4fc:	f7fe f816 	bl	800a52c <HAL_RCC_GetHCLKFreq>
 800c500:	4602      	mov	r2, r0
 800c502:	4b06      	ldr	r3, [pc, #24]	@ (800c51c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c504:	6a1b      	ldr	r3, [r3, #32]
 800c506:	091b      	lsrs	r3, r3, #4
 800c508:	f003 0307 	and.w	r3, r3, #7
 800c50c:	4904      	ldr	r1, [pc, #16]	@ (800c520 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c50e:	5ccb      	ldrb	r3, [r1, r3]
 800c510:	f003 031f 	and.w	r3, r3, #31
 800c514:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c518:	4618      	mov	r0, r3
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	58024400 	.word	0x58024400
 800c520:	08015c54 	.word	0x08015c54

0800c524 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c524:	b480      	push	{r7}
 800c526:	b089      	sub	sp, #36	@ 0x24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c52c:	4ba1      	ldr	r3, [pc, #644]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c530:	f003 0303 	and.w	r3, r3, #3
 800c534:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c536:	4b9f      	ldr	r3, [pc, #636]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c53a:	0b1b      	lsrs	r3, r3, #12
 800c53c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c540:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c542:	4b9c      	ldr	r3, [pc, #624]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c546:	091b      	lsrs	r3, r3, #4
 800c548:	f003 0301 	and.w	r3, r3, #1
 800c54c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c54e:	4b99      	ldr	r3, [pc, #612]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c552:	08db      	lsrs	r3, r3, #3
 800c554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c558:	693a      	ldr	r2, [r7, #16]
 800c55a:	fb02 f303 	mul.w	r3, r2, r3
 800c55e:	ee07 3a90 	vmov	s15, r3
 800c562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c566:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f000 8111 	beq.w	800c794 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	2b02      	cmp	r3, #2
 800c576:	f000 8083 	beq.w	800c680 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	f200 80a1 	bhi.w	800c6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d003      	beq.n	800c590 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d056      	beq.n	800c63c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c58e:	e099      	b.n	800c6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c590:	4b88      	ldr	r3, [pc, #544]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 0320 	and.w	r3, r3, #32
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d02d      	beq.n	800c5f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c59c:	4b85      	ldr	r3, [pc, #532]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	08db      	lsrs	r3, r3, #3
 800c5a2:	f003 0303 	and.w	r3, r3, #3
 800c5a6:	4a84      	ldr	r2, [pc, #528]	@ (800c7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c5a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	ee07 3a90 	vmov	s15, r3
 800c5b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	ee07 3a90 	vmov	s15, r3
 800c5be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5c6:	4b7b      	ldr	r3, [pc, #492]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ce:	ee07 3a90 	vmov	s15, r3
 800c5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c7bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c5f6:	e087      	b.n	800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	ee07 3a90 	vmov	s15, r3
 800c5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c602:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c60a:	4b6a      	ldr	r3, [pc, #424]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c60c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c612:	ee07 3a90 	vmov	s15, r3
 800c616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c61a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c61e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c7bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c62a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c63a:	e065      	b.n	800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	ee07 3a90 	vmov	s15, r3
 800c642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c646:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c64a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c64e:	4b59      	ldr	r3, [pc, #356]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c656:	ee07 3a90 	vmov	s15, r3
 800c65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c65e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c662:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c7bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c66a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c66e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c67a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c67e:	e043      	b.n	800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	ee07 3a90 	vmov	s15, r3
 800c686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c68a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c68e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c692:	4b48      	ldr	r3, [pc, #288]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c69a:	ee07 3a90 	vmov	s15, r3
 800c69e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c7bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6c2:	e021      	b.n	800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	ee07 3a90 	vmov	s15, r3
 800c6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c6d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6d6:	4b37      	ldr	r3, [pc, #220]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6de:	ee07 3a90 	vmov	s15, r3
 800c6e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c7bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c706:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c708:	4b2a      	ldr	r3, [pc, #168]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c70c:	0a5b      	lsrs	r3, r3, #9
 800c70e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c712:	ee07 3a90 	vmov	s15, r3
 800c716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c71a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c71e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c722:	edd7 6a07 	vldr	s13, [r7, #28]
 800c726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c72a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c72e:	ee17 2a90 	vmov	r2, s15
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c736:	4b1f      	ldr	r3, [pc, #124]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c73a:	0c1b      	lsrs	r3, r3, #16
 800c73c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c740:	ee07 3a90 	vmov	s15, r3
 800c744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c748:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c74c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c750:	edd7 6a07 	vldr	s13, [r7, #28]
 800c754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c75c:	ee17 2a90 	vmov	r2, s15
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c764:	4b13      	ldr	r3, [pc, #76]	@ (800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c768:	0e1b      	lsrs	r3, r3, #24
 800c76a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c76e:	ee07 3a90 	vmov	s15, r3
 800c772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c77a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c77e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c78a:	ee17 2a90 	vmov	r2, s15
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c792:	e008      	b.n	800c7a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	609a      	str	r2, [r3, #8]
}
 800c7a6:	bf00      	nop
 800c7a8:	3724      	adds	r7, #36	@ 0x24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	58024400 	.word	0x58024400
 800c7b8:	03d09000 	.word	0x03d09000
 800c7bc:	46000000 	.word	0x46000000
 800c7c0:	4c742400 	.word	0x4c742400
 800c7c4:	4a742400 	.word	0x4a742400
 800c7c8:	4bbebc20 	.word	0x4bbebc20

0800c7cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b089      	sub	sp, #36	@ 0x24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7d4:	4ba1      	ldr	r3, [pc, #644]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7d8:	f003 0303 	and.w	r3, r3, #3
 800c7dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c7de:	4b9f      	ldr	r3, [pc, #636]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7e2:	0d1b      	lsrs	r3, r3, #20
 800c7e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c7e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c7ea:	4b9c      	ldr	r3, [pc, #624]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ee:	0a1b      	lsrs	r3, r3, #8
 800c7f0:	f003 0301 	and.w	r3, r3, #1
 800c7f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c7f6:	4b99      	ldr	r3, [pc, #612]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7fa:	08db      	lsrs	r3, r3, #3
 800c7fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c800:	693a      	ldr	r2, [r7, #16]
 800c802:	fb02 f303 	mul.w	r3, r2, r3
 800c806:	ee07 3a90 	vmov	s15, r3
 800c80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c80e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 8111 	beq.w	800ca3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	f000 8083 	beq.w	800c928 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	2b02      	cmp	r3, #2
 800c826:	f200 80a1 	bhi.w	800c96c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d003      	beq.n	800c838 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d056      	beq.n	800c8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c836:	e099      	b.n	800c96c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c838:	4b88      	ldr	r3, [pc, #544]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f003 0320 	and.w	r3, r3, #32
 800c840:	2b00      	cmp	r3, #0
 800c842:	d02d      	beq.n	800c8a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c844:	4b85      	ldr	r3, [pc, #532]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	08db      	lsrs	r3, r3, #3
 800c84a:	f003 0303 	and.w	r3, r3, #3
 800c84e:	4a84      	ldr	r2, [pc, #528]	@ (800ca60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c850:	fa22 f303 	lsr.w	r3, r2, r3
 800c854:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	ee07 3a90 	vmov	s15, r3
 800c85c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	ee07 3a90 	vmov	s15, r3
 800c866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c86e:	4b7b      	ldr	r3, [pc, #492]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c876:	ee07 3a90 	vmov	s15, r3
 800c87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c87e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c882:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ca64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c88a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c88e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c89a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c89e:	e087      	b.n	800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	ee07 3a90 	vmov	s15, r3
 800c8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ca68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c8ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8b2:	4b6a      	ldr	r3, [pc, #424]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ba:	ee07 3a90 	vmov	s15, r3
 800c8be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ca64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c8d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8e2:	e065      	b.n	800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	ee07 3a90 	vmov	s15, r3
 800c8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c8f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8f6:	4b59      	ldr	r3, [pc, #356]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8fe:	ee07 3a90 	vmov	s15, r3
 800c902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c906:	ed97 6a03 	vldr	s12, [r7, #12]
 800c90a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ca64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c90e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c926:	e043      	b.n	800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	ee07 3a90 	vmov	s15, r3
 800c92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c932:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c93a:	4b48      	ldr	r3, [pc, #288]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c93c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c942:	ee07 3a90 	vmov	s15, r3
 800c946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c94a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c94e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ca64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c95a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c96a:	e021      	b.n	800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	ee07 3a90 	vmov	s15, r3
 800c972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c976:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c97a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c97e:	4b37      	ldr	r3, [pc, #220]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c986:	ee07 3a90 	vmov	s15, r3
 800c98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c98e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c992:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ca64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c99a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c99e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c9b0:	4b2a      	ldr	r3, [pc, #168]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9b4:	0a5b      	lsrs	r3, r3, #9
 800c9b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9ba:	ee07 3a90 	vmov	s15, r3
 800c9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c9c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9d6:	ee17 2a90 	vmov	r2, s15
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c9de:	4b1f      	ldr	r3, [pc, #124]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9e2:	0c1b      	lsrs	r3, r3, #16
 800c9e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9e8:	ee07 3a90 	vmov	s15, r3
 800c9ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c9f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca04:	ee17 2a90 	vmov	r2, s15
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ca0c:	4b13      	ldr	r3, [pc, #76]	@ (800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca10:	0e1b      	lsrs	r3, r3, #24
 800ca12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca16:	ee07 3a90 	vmov	s15, r3
 800ca1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca26:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca32:	ee17 2a90 	vmov	r2, s15
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ca3a:	e008      	b.n	800ca4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	609a      	str	r2, [r3, #8]
}
 800ca4e:	bf00      	nop
 800ca50:	3724      	adds	r7, #36	@ 0x24
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	58024400 	.word	0x58024400
 800ca60:	03d09000 	.word	0x03d09000
 800ca64:	46000000 	.word	0x46000000
 800ca68:	4c742400 	.word	0x4c742400
 800ca6c:	4a742400 	.word	0x4a742400
 800ca70:	4bbebc20 	.word	0x4bbebc20

0800ca74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b089      	sub	sp, #36	@ 0x24
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca7c:	4ba0      	ldr	r3, [pc, #640]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca80:	f003 0303 	and.w	r3, r3, #3
 800ca84:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ca86:	4b9e      	ldr	r3, [pc, #632]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca8a:	091b      	lsrs	r3, r3, #4
 800ca8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca90:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ca92:	4b9b      	ldr	r3, [pc, #620]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca96:	f003 0301 	and.w	r3, r3, #1
 800ca9a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ca9c:	4b98      	ldr	r3, [pc, #608]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caa0:	08db      	lsrs	r3, r3, #3
 800caa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caa6:	693a      	ldr	r2, [r7, #16]
 800caa8:	fb02 f303 	mul.w	r3, r2, r3
 800caac:	ee07 3a90 	vmov	s15, r3
 800cab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f000 8111 	beq.w	800cce2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	f000 8083 	beq.w	800cbce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	2b02      	cmp	r3, #2
 800cacc:	f200 80a1 	bhi.w	800cc12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d003      	beq.n	800cade <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	2b01      	cmp	r3, #1
 800cada:	d056      	beq.n	800cb8a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cadc:	e099      	b.n	800cc12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cade:	4b88      	ldr	r3, [pc, #544]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f003 0320 	and.w	r3, r3, #32
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d02d      	beq.n	800cb46 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800caea:	4b85      	ldr	r3, [pc, #532]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	08db      	lsrs	r3, r3, #3
 800caf0:	f003 0303 	and.w	r3, r3, #3
 800caf4:	4a83      	ldr	r2, [pc, #524]	@ (800cd04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800caf6:	fa22 f303 	lsr.w	r3, r2, r3
 800cafa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	ee07 3a90 	vmov	s15, r3
 800cb02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	ee07 3a90 	vmov	s15, r3
 800cb0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb14:	4b7a      	ldr	r3, [pc, #488]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb1c:	ee07 3a90 	vmov	s15, r3
 800cb20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb24:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb28:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800cd08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb40:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb44:	e087      	b.n	800cc56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	ee07 3a90 	vmov	s15, r3
 800cb4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb50:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800cd0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb58:	4b69      	ldr	r3, [pc, #420]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb60:	ee07 3a90 	vmov	s15, r3
 800cb64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb68:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb6c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800cd08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb88:	e065      	b.n	800cc56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	ee07 3a90 	vmov	s15, r3
 800cb90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb94:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800cd10 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cb98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb9c:	4b58      	ldr	r3, [pc, #352]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba4:	ee07 3a90 	vmov	s15, r3
 800cba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbac:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbb0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800cd08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbcc:	e043      	b.n	800cc56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	ee07 3a90 	vmov	s15, r3
 800cbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cbdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbe0:	4b47      	ldr	r3, [pc, #284]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe8:	ee07 3a90 	vmov	s15, r3
 800cbec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbf4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800cd08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc10:	e021      	b.n	800cc56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	ee07 3a90 	vmov	s15, r3
 800cc18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc1c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800cd0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc24:	4b36      	ldr	r3, [pc, #216]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc2c:	ee07 3a90 	vmov	s15, r3
 800cc30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc34:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc38:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800cd08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc54:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cc56:	4b2a      	ldr	r3, [pc, #168]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc5a:	0a5b      	lsrs	r3, r3, #9
 800cc5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc60:	ee07 3a90 	vmov	s15, r3
 800cc64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc70:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc7c:	ee17 2a90 	vmov	r2, s15
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cc84:	4b1e      	ldr	r3, [pc, #120]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc88:	0c1b      	lsrs	r3, r3, #16
 800cc8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc8e:	ee07 3a90 	vmov	s15, r3
 800cc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccaa:	ee17 2a90 	vmov	r2, s15
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ccb2:	4b13      	ldr	r3, [pc, #76]	@ (800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccb6:	0e1b      	lsrs	r3, r3, #24
 800ccb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccbc:	ee07 3a90 	vmov	s15, r3
 800ccc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ccc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cccc:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccd8:	ee17 2a90 	vmov	r2, s15
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cce0:	e008      	b.n	800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	609a      	str	r2, [r3, #8]
}
 800ccf4:	bf00      	nop
 800ccf6:	3724      	adds	r7, #36	@ 0x24
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	58024400 	.word	0x58024400
 800cd04:	03d09000 	.word	0x03d09000
 800cd08:	46000000 	.word	0x46000000
 800cd0c:	4c742400 	.word	0x4c742400
 800cd10:	4a742400 	.word	0x4a742400
 800cd14:	4bbebc20 	.word	0x4bbebc20

0800cd18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd26:	4b53      	ldr	r3, [pc, #332]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cd28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd2a:	f003 0303 	and.w	r3, r3, #3
 800cd2e:	2b03      	cmp	r3, #3
 800cd30:	d101      	bne.n	800cd36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cd32:	2301      	movs	r3, #1
 800cd34:	e099      	b.n	800ce6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd36:	4b4f      	ldr	r3, [pc, #316]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a4e      	ldr	r2, [pc, #312]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cd3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cd40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd42:	f7f6 fd3f 	bl	80037c4 <HAL_GetTick>
 800cd46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd48:	e008      	b.n	800cd5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd4a:	f7f6 fd3b 	bl	80037c4 <HAL_GetTick>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	2b02      	cmp	r3, #2
 800cd56:	d901      	bls.n	800cd5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e086      	b.n	800ce6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd5c:	4b45      	ldr	r3, [pc, #276]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1f0      	bne.n	800cd4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cd68:	4b42      	ldr	r3, [pc, #264]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cd6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	031b      	lsls	r3, r3, #12
 800cd76:	493f      	ldr	r1, [pc, #252]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	628b      	str	r3, [r1, #40]	@ 0x28
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	3b01      	subs	r3, #1
 800cd82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	025b      	lsls	r3, r3, #9
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	431a      	orrs	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	3b01      	subs	r3, #1
 800cd98:	041b      	lsls	r3, r3, #16
 800cd9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cd9e:	431a      	orrs	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	691b      	ldr	r3, [r3, #16]
 800cda4:	3b01      	subs	r3, #1
 800cda6:	061b      	lsls	r3, r3, #24
 800cda8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cdac:	4931      	ldr	r1, [pc, #196]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cdb2:	4b30      	ldr	r3, [pc, #192]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cdb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	695b      	ldr	r3, [r3, #20]
 800cdbe:	492d      	ldr	r1, [pc, #180]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cdc4:	4b2b      	ldr	r3, [pc, #172]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cdc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdc8:	f023 0220 	bic.w	r2, r3, #32
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	699b      	ldr	r3, [r3, #24]
 800cdd0:	4928      	ldr	r1, [pc, #160]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cdd6:	4b27      	ldr	r3, [pc, #156]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cdd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdda:	4a26      	ldr	r2, [pc, #152]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cddc:	f023 0310 	bic.w	r3, r3, #16
 800cde0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cde2:	4b24      	ldr	r3, [pc, #144]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cde4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cde6:	4b24      	ldr	r3, [pc, #144]	@ (800ce78 <RCCEx_PLL2_Config+0x160>)
 800cde8:	4013      	ands	r3, r2
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	69d2      	ldr	r2, [r2, #28]
 800cdee:	00d2      	lsls	r2, r2, #3
 800cdf0:	4920      	ldr	r1, [pc, #128]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cdf6:	4b1f      	ldr	r3, [pc, #124]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cdf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdfa:	4a1e      	ldr	r2, [pc, #120]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800cdfc:	f043 0310 	orr.w	r3, r3, #16
 800ce00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d106      	bne.n	800ce16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce08:	4b1a      	ldr	r3, [pc, #104]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800ce0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce0c:	4a19      	ldr	r2, [pc, #100]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800ce0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ce12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ce14:	e00f      	b.n	800ce36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d106      	bne.n	800ce2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce1c:	4b15      	ldr	r3, [pc, #84]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800ce1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce20:	4a14      	ldr	r2, [pc, #80]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800ce22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ce28:	e005      	b.n	800ce36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce2a:	4b12      	ldr	r3, [pc, #72]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800ce2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce2e:	4a11      	ldr	r2, [pc, #68]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800ce30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ce34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce36:	4b0f      	ldr	r3, [pc, #60]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a0e      	ldr	r2, [pc, #56]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800ce3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ce40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce42:	f7f6 fcbf 	bl	80037c4 <HAL_GetTick>
 800ce46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce48:	e008      	b.n	800ce5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce4a:	f7f6 fcbb 	bl	80037c4 <HAL_GetTick>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d901      	bls.n	800ce5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e006      	b.n	800ce6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce5c:	4b05      	ldr	r3, [pc, #20]	@ (800ce74 <RCCEx_PLL2_Config+0x15c>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d0f0      	beq.n	800ce4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	58024400 	.word	0x58024400
 800ce78:	ffff0007 	.word	0xffff0007

0800ce7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce86:	2300      	movs	r3, #0
 800ce88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce8a:	4b53      	ldr	r3, [pc, #332]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800ce8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce8e:	f003 0303 	and.w	r3, r3, #3
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	d101      	bne.n	800ce9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ce96:	2301      	movs	r3, #1
 800ce98:	e099      	b.n	800cfce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ce9a:	4b4f      	ldr	r3, [pc, #316]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a4e      	ldr	r2, [pc, #312]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cea6:	f7f6 fc8d 	bl	80037c4 <HAL_GetTick>
 800ceaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ceac:	e008      	b.n	800cec0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ceae:	f7f6 fc89 	bl	80037c4 <HAL_GetTick>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	1ad3      	subs	r3, r2, r3
 800ceb8:	2b02      	cmp	r3, #2
 800ceba:	d901      	bls.n	800cec0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cebc:	2303      	movs	r3, #3
 800cebe:	e086      	b.n	800cfce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cec0:	4b45      	ldr	r3, [pc, #276]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1f0      	bne.n	800ceae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cecc:	4b42      	ldr	r3, [pc, #264]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ced0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	051b      	lsls	r3, r3, #20
 800ceda:	493f      	ldr	r1, [pc, #252]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cedc:	4313      	orrs	r3, r2
 800cede:	628b      	str	r3, [r1, #40]	@ 0x28
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	3b01      	subs	r3, #1
 800cee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	3b01      	subs	r3, #1
 800cef0:	025b      	lsls	r3, r3, #9
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	431a      	orrs	r2, r3
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	3b01      	subs	r3, #1
 800cefc:	041b      	lsls	r3, r3, #16
 800cefe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cf02:	431a      	orrs	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	061b      	lsls	r3, r3, #24
 800cf0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cf10:	4931      	ldr	r1, [pc, #196]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf12:	4313      	orrs	r3, r2
 800cf14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf16:	4b30      	ldr	r3, [pc, #192]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	695b      	ldr	r3, [r3, #20]
 800cf22:	492d      	ldr	r1, [pc, #180]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf24:	4313      	orrs	r3, r2
 800cf26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cf28:	4b2b      	ldr	r3, [pc, #172]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	699b      	ldr	r3, [r3, #24]
 800cf34:	4928      	ldr	r1, [pc, #160]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf36:	4313      	orrs	r3, r2
 800cf38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cf3a:	4b27      	ldr	r3, [pc, #156]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf3e:	4a26      	ldr	r2, [pc, #152]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cf46:	4b24      	ldr	r3, [pc, #144]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf4a:	4b24      	ldr	r3, [pc, #144]	@ (800cfdc <RCCEx_PLL3_Config+0x160>)
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	69d2      	ldr	r2, [r2, #28]
 800cf52:	00d2      	lsls	r2, r2, #3
 800cf54:	4920      	ldr	r1, [pc, #128]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf56:	4313      	orrs	r3, r2
 800cf58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cf5a:	4b1f      	ldr	r3, [pc, #124]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf5e:	4a1e      	ldr	r2, [pc, #120]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d106      	bne.n	800cf7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cf6c:	4b1a      	ldr	r3, [pc, #104]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf70:	4a19      	ldr	r2, [pc, #100]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800cf76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cf78:	e00f      	b.n	800cf9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d106      	bne.n	800cf8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cf80:	4b15      	ldr	r3, [pc, #84]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf84:	4a14      	ldr	r2, [pc, #80]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cf8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cf8c:	e005      	b.n	800cf9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cf8e:	4b12      	ldr	r3, [pc, #72]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf92:	4a11      	ldr	r2, [pc, #68]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cf9a:	4b0f      	ldr	r3, [pc, #60]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4a0e      	ldr	r2, [pc, #56]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cfa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cfa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfa6:	f7f6 fc0d 	bl	80037c4 <HAL_GetTick>
 800cfaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cfac:	e008      	b.n	800cfc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfae:	f7f6 fc09 	bl	80037c4 <HAL_GetTick>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	1ad3      	subs	r3, r2, r3
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	d901      	bls.n	800cfc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cfbc:	2303      	movs	r3, #3
 800cfbe:	e006      	b.n	800cfce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cfc0:	4b05      	ldr	r3, [pc, #20]	@ (800cfd8 <RCCEx_PLL3_Config+0x15c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d0f0      	beq.n	800cfae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	58024400 	.word	0x58024400
 800cfdc:	ffff0007 	.word	0xffff0007

0800cfe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e049      	b.n	800d086 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d106      	bne.n	800d00c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f7f6 f9cc 	bl	80033a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2202      	movs	r2, #2
 800d010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	3304      	adds	r3, #4
 800d01c:	4619      	mov	r1, r3
 800d01e:	4610      	mov	r0, r2
 800d020:	f000 fc56 	bl	800d8d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2201      	movs	r2, #1
 800d050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2201      	movs	r2, #1
 800d058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2201      	movs	r2, #1
 800d060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2201      	movs	r2, #1
 800d070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2201      	movs	r2, #1
 800d078:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2201      	movs	r2, #1
 800d080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
	...

0800d090 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d001      	beq.n	800d0a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e04c      	b.n	800d142 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2202      	movs	r2, #2
 800d0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a26      	ldr	r2, [pc, #152]	@ (800d150 <HAL_TIM_Base_Start+0xc0>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d022      	beq.n	800d100 <HAL_TIM_Base_Start+0x70>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0c2:	d01d      	beq.n	800d100 <HAL_TIM_Base_Start+0x70>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a22      	ldr	r2, [pc, #136]	@ (800d154 <HAL_TIM_Base_Start+0xc4>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d018      	beq.n	800d100 <HAL_TIM_Base_Start+0x70>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a21      	ldr	r2, [pc, #132]	@ (800d158 <HAL_TIM_Base_Start+0xc8>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d013      	beq.n	800d100 <HAL_TIM_Base_Start+0x70>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a1f      	ldr	r2, [pc, #124]	@ (800d15c <HAL_TIM_Base_Start+0xcc>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d00e      	beq.n	800d100 <HAL_TIM_Base_Start+0x70>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4a1e      	ldr	r2, [pc, #120]	@ (800d160 <HAL_TIM_Base_Start+0xd0>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d009      	beq.n	800d100 <HAL_TIM_Base_Start+0x70>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a1c      	ldr	r2, [pc, #112]	@ (800d164 <HAL_TIM_Base_Start+0xd4>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d004      	beq.n	800d100 <HAL_TIM_Base_Start+0x70>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a1b      	ldr	r2, [pc, #108]	@ (800d168 <HAL_TIM_Base_Start+0xd8>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d115      	bne.n	800d12c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	689a      	ldr	r2, [r3, #8]
 800d106:	4b19      	ldr	r3, [pc, #100]	@ (800d16c <HAL_TIM_Base_Start+0xdc>)
 800d108:	4013      	ands	r3, r2
 800d10a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2b06      	cmp	r3, #6
 800d110:	d015      	beq.n	800d13e <HAL_TIM_Base_Start+0xae>
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d118:	d011      	beq.n	800d13e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f042 0201 	orr.w	r2, r2, #1
 800d128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d12a:	e008      	b.n	800d13e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f042 0201 	orr.w	r2, r2, #1
 800d13a:	601a      	str	r2, [r3, #0]
 800d13c:	e000      	b.n	800d140 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d13e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d140:	2300      	movs	r3, #0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3714      	adds	r7, #20
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	40010000 	.word	0x40010000
 800d154:	40000400 	.word	0x40000400
 800d158:	40000800 	.word	0x40000800
 800d15c:	40000c00 	.word	0x40000c00
 800d160:	40010400 	.word	0x40010400
 800d164:	40001800 	.word	0x40001800
 800d168:	40014000 	.word	0x40014000
 800d16c:	00010007 	.word	0x00010007

0800d170 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	6a1a      	ldr	r2, [r3, #32]
 800d17e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d182:	4013      	ands	r3, r2
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10f      	bne.n	800d1a8 <HAL_TIM_Base_Stop+0x38>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	6a1a      	ldr	r2, [r3, #32]
 800d18e:	f240 4344 	movw	r3, #1092	@ 0x444
 800d192:	4013      	ands	r3, r2
 800d194:	2b00      	cmp	r3, #0
 800d196:	d107      	bne.n	800d1a8 <HAL_TIM_Base_Stop+0x38>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f022 0201 	bic.w	r2, r2, #1
 800d1a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	370c      	adds	r7, #12
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr

0800d1be <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b082      	sub	sp, #8
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d101      	bne.n	800d1d0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e049      	b.n	800d264 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d106      	bne.n	800d1ea <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 f841 	bl	800d26c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2202      	movs	r2, #2
 800d1ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	4610      	mov	r0, r2
 800d1fe:	f000 fb67 	bl	800d8d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2201      	movs	r2, #1
 800d206:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2201      	movs	r2, #1
 800d22e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2201      	movs	r2, #1
 800d236:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2201      	movs	r2, #1
 800d23e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2201      	movs	r2, #1
 800d246:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2201      	movs	r2, #1
 800d256:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2201      	movs	r2, #1
 800d25e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d262:	2300      	movs	r3, #0
}
 800d264:	4618      	mov	r0, r3
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800d274:	bf00      	nop
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	f003 0302 	and.w	r3, r3, #2
 800d292:	2b02      	cmp	r3, #2
 800d294:	d122      	bne.n	800d2dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	f003 0302 	and.w	r3, r3, #2
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d11b      	bne.n	800d2dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f06f 0202 	mvn.w	r2, #2
 800d2ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	699b      	ldr	r3, [r3, #24]
 800d2ba:	f003 0303 	and.w	r3, r3, #3
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d003      	beq.n	800d2ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 fae6 	bl	800d894 <HAL_TIM_IC_CaptureCallback>
 800d2c8:	e005      	b.n	800d2d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 fad8 	bl	800d880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 fae9 	bl	800d8a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	691b      	ldr	r3, [r3, #16]
 800d2e2:	f003 0304 	and.w	r3, r3, #4
 800d2e6:	2b04      	cmp	r3, #4
 800d2e8:	d122      	bne.n	800d330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	f003 0304 	and.w	r3, r3, #4
 800d2f4:	2b04      	cmp	r3, #4
 800d2f6:	d11b      	bne.n	800d330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f06f 0204 	mvn.w	r2, #4
 800d300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2202      	movs	r2, #2
 800d306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	699b      	ldr	r3, [r3, #24]
 800d30e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d312:	2b00      	cmp	r3, #0
 800d314:	d003      	beq.n	800d31e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 fabc 	bl	800d894 <HAL_TIM_IC_CaptureCallback>
 800d31c:	e005      	b.n	800d32a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 faae 	bl	800d880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fabf 	bl	800d8a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	f003 0308 	and.w	r3, r3, #8
 800d33a:	2b08      	cmp	r3, #8
 800d33c:	d122      	bne.n	800d384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	f003 0308 	and.w	r3, r3, #8
 800d348:	2b08      	cmp	r3, #8
 800d34a:	d11b      	bne.n	800d384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f06f 0208 	mvn.w	r2, #8
 800d354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2204      	movs	r2, #4
 800d35a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	69db      	ldr	r3, [r3, #28]
 800d362:	f003 0303 	and.w	r3, r3, #3
 800d366:	2b00      	cmp	r3, #0
 800d368:	d003      	beq.n	800d372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fa92 	bl	800d894 <HAL_TIM_IC_CaptureCallback>
 800d370:	e005      	b.n	800d37e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 fa84 	bl	800d880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 fa95 	bl	800d8a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	691b      	ldr	r3, [r3, #16]
 800d38a:	f003 0310 	and.w	r3, r3, #16
 800d38e:	2b10      	cmp	r3, #16
 800d390:	d122      	bne.n	800d3d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	f003 0310 	and.w	r3, r3, #16
 800d39c:	2b10      	cmp	r3, #16
 800d39e:	d11b      	bne.n	800d3d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f06f 0210 	mvn.w	r2, #16
 800d3a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2208      	movs	r2, #8
 800d3ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	69db      	ldr	r3, [r3, #28]
 800d3b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d003      	beq.n	800d3c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 fa68 	bl	800d894 <HAL_TIM_IC_CaptureCallback>
 800d3c4:	e005      	b.n	800d3d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 fa5a 	bl	800d880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 fa6b 	bl	800d8a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	691b      	ldr	r3, [r3, #16]
 800d3de:	f003 0301 	and.w	r3, r3, #1
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d10e      	bne.n	800d404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	f003 0301 	and.w	r3, r3, #1
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d107      	bne.n	800d404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f06f 0201 	mvn.w	r2, #1
 800d3fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 fa34 	bl	800d86c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	691b      	ldr	r3, [r3, #16]
 800d40a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d40e:	2b80      	cmp	r3, #128	@ 0x80
 800d410:	d10e      	bne.n	800d430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d41c:	2b80      	cmp	r3, #128	@ 0x80
 800d41e:	d107      	bne.n	800d430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 fe34 	bl	800e098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d43a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d43e:	d10e      	bne.n	800d45e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d44a:	2b80      	cmp	r3, #128	@ 0x80
 800d44c:	d107      	bne.n	800d45e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 fe27 	bl	800e0ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d468:	2b40      	cmp	r3, #64	@ 0x40
 800d46a:	d10e      	bne.n	800d48a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d476:	2b40      	cmp	r3, #64	@ 0x40
 800d478:	d107      	bne.n	800d48a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 fa19 	bl	800d8bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	691b      	ldr	r3, [r3, #16]
 800d490:	f003 0320 	and.w	r3, r3, #32
 800d494:	2b20      	cmp	r3, #32
 800d496:	d10e      	bne.n	800d4b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	f003 0320 	and.w	r3, r3, #32
 800d4a2:	2b20      	cmp	r3, #32
 800d4a4:	d107      	bne.n	800d4b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f06f 0220 	mvn.w	r2, #32
 800d4ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fde7 	bl	800e084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d4b6:	bf00      	nop
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b086      	sub	sp, #24
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	60f8      	str	r0, [r7, #12]
 800d4c6:	60b9      	str	r1, [r7, #8]
 800d4c8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d101      	bne.n	800d4dc <HAL_TIM_IC_ConfigChannel+0x1e>
 800d4d8:	2302      	movs	r3, #2
 800d4da:	e088      	b.n	800d5ee <HAL_TIM_IC_ConfigChannel+0x130>
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d11b      	bne.n	800d522 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800d4fa:	f000 fb6d 	bl	800dbd8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	699a      	ldr	r2, [r3, #24]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f022 020c 	bic.w	r2, r2, #12
 800d50c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	6999      	ldr	r1, [r3, #24]
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	689a      	ldr	r2, [r3, #8]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	430a      	orrs	r2, r1
 800d51e:	619a      	str	r2, [r3, #24]
 800d520:	e060      	b.n	800d5e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2b04      	cmp	r3, #4
 800d526:	d11c      	bne.n	800d562 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800d538:	f000 fbf1 	bl	800dd1e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	699a      	ldr	r2, [r3, #24]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800d54a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	6999      	ldr	r1, [r3, #24]
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	021a      	lsls	r2, r3, #8
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	430a      	orrs	r2, r1
 800d55e:	619a      	str	r2, [r3, #24]
 800d560:	e040      	b.n	800d5e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2b08      	cmp	r3, #8
 800d566:	d11b      	bne.n	800d5a0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800d578:	f000 fc3e 	bl	800ddf8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	69da      	ldr	r2, [r3, #28]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f022 020c 	bic.w	r2, r2, #12
 800d58a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	69d9      	ldr	r1, [r3, #28]
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	689a      	ldr	r2, [r3, #8]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	430a      	orrs	r2, r1
 800d59c:	61da      	str	r2, [r3, #28]
 800d59e:	e021      	b.n	800d5e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b0c      	cmp	r3, #12
 800d5a4:	d11c      	bne.n	800d5e0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800d5b6:	f000 fc5b 	bl	800de70 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	69da      	ldr	r2, [r3, #28]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800d5c8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	69d9      	ldr	r1, [r3, #28]
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	021a      	lsls	r2, r3, #8
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	430a      	orrs	r2, r1
 800d5dc:	61da      	str	r2, [r3, #28]
 800d5de:	e001      	b.n	800d5e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d5ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3718      	adds	r7, #24
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
	...

0800d5f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d602:	2300      	movs	r3, #0
 800d604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d101      	bne.n	800d614 <HAL_TIM_ConfigClockSource+0x1c>
 800d610:	2302      	movs	r3, #2
 800d612:	e0dc      	b.n	800d7ce <HAL_TIM_ConfigClockSource+0x1d6>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2202      	movs	r2, #2
 800d620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	689b      	ldr	r3, [r3, #8]
 800d62a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	4b6a      	ldr	r3, [pc, #424]	@ (800d7d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d630:	4013      	ands	r3, r2
 800d632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d63a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a64      	ldr	r2, [pc, #400]	@ (800d7dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	f000 80a9 	beq.w	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d650:	4a62      	ldr	r2, [pc, #392]	@ (800d7dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800d652:	4293      	cmp	r3, r2
 800d654:	f200 80ae 	bhi.w	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d658:	4a61      	ldr	r2, [pc, #388]	@ (800d7e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	f000 80a1 	beq.w	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d660:	4a5f      	ldr	r2, [pc, #380]	@ (800d7e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d662:	4293      	cmp	r3, r2
 800d664:	f200 80a6 	bhi.w	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d668:	4a5e      	ldr	r2, [pc, #376]	@ (800d7e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	f000 8099 	beq.w	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d670:	4a5c      	ldr	r2, [pc, #368]	@ (800d7e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d672:	4293      	cmp	r3, r2
 800d674:	f200 809e 	bhi.w	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d678:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d67c:	f000 8091 	beq.w	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d680:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d684:	f200 8096 	bhi.w	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d688:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d68c:	f000 8089 	beq.w	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d690:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d694:	f200 808e 	bhi.w	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d69c:	d03e      	beq.n	800d71c <HAL_TIM_ConfigClockSource+0x124>
 800d69e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d6a2:	f200 8087 	bhi.w	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6aa:	f000 8086 	beq.w	800d7ba <HAL_TIM_ConfigClockSource+0x1c2>
 800d6ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6b2:	d87f      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6b4:	2b70      	cmp	r3, #112	@ 0x70
 800d6b6:	d01a      	beq.n	800d6ee <HAL_TIM_ConfigClockSource+0xf6>
 800d6b8:	2b70      	cmp	r3, #112	@ 0x70
 800d6ba:	d87b      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6bc:	2b60      	cmp	r3, #96	@ 0x60
 800d6be:	d050      	beq.n	800d762 <HAL_TIM_ConfigClockSource+0x16a>
 800d6c0:	2b60      	cmp	r3, #96	@ 0x60
 800d6c2:	d877      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6c4:	2b50      	cmp	r3, #80	@ 0x50
 800d6c6:	d03c      	beq.n	800d742 <HAL_TIM_ConfigClockSource+0x14a>
 800d6c8:	2b50      	cmp	r3, #80	@ 0x50
 800d6ca:	d873      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6cc:	2b40      	cmp	r3, #64	@ 0x40
 800d6ce:	d058      	beq.n	800d782 <HAL_TIM_ConfigClockSource+0x18a>
 800d6d0:	2b40      	cmp	r3, #64	@ 0x40
 800d6d2:	d86f      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6d4:	2b30      	cmp	r3, #48	@ 0x30
 800d6d6:	d064      	beq.n	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6d8:	2b30      	cmp	r3, #48	@ 0x30
 800d6da:	d86b      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6dc:	2b20      	cmp	r3, #32
 800d6de:	d060      	beq.n	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6e0:	2b20      	cmp	r3, #32
 800d6e2:	d867      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d05c      	beq.n	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6e8:	2b10      	cmp	r3, #16
 800d6ea:	d05a      	beq.n	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6ec:	e062      	b.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d6fe:	f000 fc13 	bl	800df28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d710:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	68ba      	ldr	r2, [r7, #8]
 800d718:	609a      	str	r2, [r3, #8]
      break;
 800d71a:	e04f      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d72c:	f000 fbfc 	bl	800df28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	689a      	ldr	r2, [r3, #8]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d73e:	609a      	str	r2, [r3, #8]
      break;
 800d740:	e03c      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d74e:	461a      	mov	r2, r3
 800d750:	f000 fab6 	bl	800dcc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2150      	movs	r1, #80	@ 0x50
 800d75a:	4618      	mov	r0, r3
 800d75c:	f000 fbc6 	bl	800deec <TIM_ITRx_SetConfig>
      break;
 800d760:	e02c      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d76e:	461a      	mov	r2, r3
 800d770:	f000 fb12 	bl	800dd98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2160      	movs	r1, #96	@ 0x60
 800d77a:	4618      	mov	r0, r3
 800d77c:	f000 fbb6 	bl	800deec <TIM_ITRx_SetConfig>
      break;
 800d780:	e01c      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d78e:	461a      	mov	r2, r3
 800d790:	f000 fa96 	bl	800dcc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2140      	movs	r1, #64	@ 0x40
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 fba6 	bl	800deec <TIM_ITRx_SetConfig>
      break;
 800d7a0:	e00c      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	4610      	mov	r0, r2
 800d7ae:	f000 fb9d 	bl	800deec <TIM_ITRx_SetConfig>
      break;
 800d7b2:	e003      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	73fb      	strb	r3, [r7, #15]
      break;
 800d7b8:	e000      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d7ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	ffceff88 	.word	0xffceff88
 800d7dc:	00100040 	.word	0x00100040
 800d7e0:	00100030 	.word	0x00100030
 800d7e4:	00100020 	.word	0x00100020

0800d7e8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d101      	bne.n	800d800 <HAL_TIM_SlaveConfigSynchro+0x18>
 800d7fc:	2302      	movs	r3, #2
 800d7fe:	e031      	b.n	800d864 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2201      	movs	r2, #1
 800d804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2202      	movs	r2, #2
 800d80c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d810:	6839      	ldr	r1, [r7, #0]
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 f8f6 	bl	800da04 <TIM_SlaveTimer_SetConfig>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d009      	beq.n	800d832 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	e018      	b.n	800d864 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68da      	ldr	r2, [r3, #12]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d840:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68da      	ldr	r2, [r3, #12]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d850:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2201      	movs	r2, #1
 800d856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d862:	2300      	movs	r3, #0
}
 800d864:	4618      	mov	r0, r3
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d874:	bf00      	nop
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d888:	bf00      	nop
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d89c:	bf00      	nop
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d8c4:	bf00      	nop
 800d8c6:	370c      	adds	r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a40      	ldr	r2, [pc, #256]	@ (800d9e4 <TIM_Base_SetConfig+0x114>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d013      	beq.n	800d910 <TIM_Base_SetConfig+0x40>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8ee:	d00f      	beq.n	800d910 <TIM_Base_SetConfig+0x40>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4a3d      	ldr	r2, [pc, #244]	@ (800d9e8 <TIM_Base_SetConfig+0x118>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d00b      	beq.n	800d910 <TIM_Base_SetConfig+0x40>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	4a3c      	ldr	r2, [pc, #240]	@ (800d9ec <TIM_Base_SetConfig+0x11c>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d007      	beq.n	800d910 <TIM_Base_SetConfig+0x40>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4a3b      	ldr	r2, [pc, #236]	@ (800d9f0 <TIM_Base_SetConfig+0x120>)
 800d904:	4293      	cmp	r3, r2
 800d906:	d003      	beq.n	800d910 <TIM_Base_SetConfig+0x40>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	4a3a      	ldr	r2, [pc, #232]	@ (800d9f4 <TIM_Base_SetConfig+0x124>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d108      	bne.n	800d922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	4313      	orrs	r3, r2
 800d920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4a2f      	ldr	r2, [pc, #188]	@ (800d9e4 <TIM_Base_SetConfig+0x114>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d01f      	beq.n	800d96a <TIM_Base_SetConfig+0x9a>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d930:	d01b      	beq.n	800d96a <TIM_Base_SetConfig+0x9a>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	4a2c      	ldr	r2, [pc, #176]	@ (800d9e8 <TIM_Base_SetConfig+0x118>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d017      	beq.n	800d96a <TIM_Base_SetConfig+0x9a>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4a2b      	ldr	r2, [pc, #172]	@ (800d9ec <TIM_Base_SetConfig+0x11c>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d013      	beq.n	800d96a <TIM_Base_SetConfig+0x9a>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4a2a      	ldr	r2, [pc, #168]	@ (800d9f0 <TIM_Base_SetConfig+0x120>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d00f      	beq.n	800d96a <TIM_Base_SetConfig+0x9a>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4a29      	ldr	r2, [pc, #164]	@ (800d9f4 <TIM_Base_SetConfig+0x124>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d00b      	beq.n	800d96a <TIM_Base_SetConfig+0x9a>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4a28      	ldr	r2, [pc, #160]	@ (800d9f8 <TIM_Base_SetConfig+0x128>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d007      	beq.n	800d96a <TIM_Base_SetConfig+0x9a>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4a27      	ldr	r2, [pc, #156]	@ (800d9fc <TIM_Base_SetConfig+0x12c>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d003      	beq.n	800d96a <TIM_Base_SetConfig+0x9a>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4a26      	ldr	r2, [pc, #152]	@ (800da00 <TIM_Base_SetConfig+0x130>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d108      	bne.n	800d97c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	68fa      	ldr	r2, [r7, #12]
 800d978:	4313      	orrs	r3, r2
 800d97a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	695b      	ldr	r3, [r3, #20]
 800d986:	4313      	orrs	r3, r2
 800d988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	68fa      	ldr	r2, [r7, #12]
 800d98e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	689a      	ldr	r2, [r3, #8]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	4a10      	ldr	r2, [pc, #64]	@ (800d9e4 <TIM_Base_SetConfig+0x114>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d00f      	beq.n	800d9c8 <TIM_Base_SetConfig+0xf8>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a12      	ldr	r2, [pc, #72]	@ (800d9f4 <TIM_Base_SetConfig+0x124>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d00b      	beq.n	800d9c8 <TIM_Base_SetConfig+0xf8>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a11      	ldr	r2, [pc, #68]	@ (800d9f8 <TIM_Base_SetConfig+0x128>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d007      	beq.n	800d9c8 <TIM_Base_SetConfig+0xf8>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a10      	ldr	r2, [pc, #64]	@ (800d9fc <TIM_Base_SetConfig+0x12c>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d003      	beq.n	800d9c8 <TIM_Base_SetConfig+0xf8>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a0f      	ldr	r2, [pc, #60]	@ (800da00 <TIM_Base_SetConfig+0x130>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d103      	bne.n	800d9d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	691a      	ldr	r2, [r3, #16]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	615a      	str	r2, [r3, #20]
}
 800d9d6:	bf00      	nop
 800d9d8:	3714      	adds	r7, #20
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop
 800d9e4:	40010000 	.word	0x40010000
 800d9e8:	40000400 	.word	0x40000400
 800d9ec:	40000800 	.word	0x40000800
 800d9f0:	40000c00 	.word	0x40000c00
 800d9f4:	40010400 	.word	0x40010400
 800d9f8:	40014000 	.word	0x40014000
 800d9fc:	40014400 	.word	0x40014400
 800da00:	40014800 	.word	0x40014800

0800da04 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800da0e:	2300      	movs	r3, #0
 800da10:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800da1a:	693a      	ldr	r2, [r7, #16]
 800da1c:	4b65      	ldr	r3, [pc, #404]	@ (800dbb4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800da1e:	4013      	ands	r3, r2
 800da20:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	693a      	ldr	r2, [r7, #16]
 800da28:	4313      	orrs	r3, r2
 800da2a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800da2c:	693a      	ldr	r2, [r7, #16]
 800da2e:	4b62      	ldr	r3, [pc, #392]	@ (800dbb8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800da30:	4013      	ands	r3, r2
 800da32:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	693a      	ldr	r2, [r7, #16]
 800da3a:	4313      	orrs	r3, r2
 800da3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	693a      	ldr	r2, [r7, #16]
 800da44:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	4a5c      	ldr	r2, [pc, #368]	@ (800dbbc <TIM_SlaveTimer_SetConfig+0x1b8>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	f000 80ab 	beq.w	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800da52:	4a5a      	ldr	r2, [pc, #360]	@ (800dbbc <TIM_SlaveTimer_SetConfig+0x1b8>)
 800da54:	4293      	cmp	r3, r2
 800da56:	f200 80a4 	bhi.w	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800da5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da5e:	f000 80a3 	beq.w	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800da62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da66:	f200 809c 	bhi.w	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800da6a:	4a55      	ldr	r2, [pc, #340]	@ (800dbc0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	f000 809b 	beq.w	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800da72:	4a53      	ldr	r2, [pc, #332]	@ (800dbc0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800da74:	4293      	cmp	r3, r2
 800da76:	f200 8094 	bhi.w	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800da7a:	4a52      	ldr	r2, [pc, #328]	@ (800dbc4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	f000 8093 	beq.w	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800da82:	4a50      	ldr	r2, [pc, #320]	@ (800dbc4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800da84:	4293      	cmp	r3, r2
 800da86:	f200 808c 	bhi.w	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800da8a:	4a4f      	ldr	r2, [pc, #316]	@ (800dbc8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	f000 808b 	beq.w	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800da92:	4a4d      	ldr	r2, [pc, #308]	@ (800dbc8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800da94:	4293      	cmp	r3, r2
 800da96:	f200 8084 	bhi.w	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800da9a:	4a4c      	ldr	r2, [pc, #304]	@ (800dbcc <TIM_SlaveTimer_SetConfig+0x1c8>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	f000 8083 	beq.w	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800daa2:	4a4a      	ldr	r2, [pc, #296]	@ (800dbcc <TIM_SlaveTimer_SetConfig+0x1c8>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d87c      	bhi.n	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800daa8:	4a49      	ldr	r2, [pc, #292]	@ (800dbd0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d07c      	beq.n	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800daae:	4a48      	ldr	r2, [pc, #288]	@ (800dbd0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d876      	bhi.n	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dab4:	4a47      	ldr	r2, [pc, #284]	@ (800dbd4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d076      	beq.n	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800daba:	4a46      	ldr	r2, [pc, #280]	@ (800dbd4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d870      	bhi.n	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dac0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dac4:	d070      	beq.n	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dac6:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800daca:	d86a      	bhi.n	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dacc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dad0:	d06a      	beq.n	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dad6:	d864      	bhi.n	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dad8:	2b70      	cmp	r3, #112	@ 0x70
 800dada:	d01a      	beq.n	800db12 <TIM_SlaveTimer_SetConfig+0x10e>
 800dadc:	2b70      	cmp	r3, #112	@ 0x70
 800dade:	d860      	bhi.n	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dae0:	2b60      	cmp	r3, #96	@ 0x60
 800dae2:	d054      	beq.n	800db8e <TIM_SlaveTimer_SetConfig+0x18a>
 800dae4:	2b60      	cmp	r3, #96	@ 0x60
 800dae6:	d85c      	bhi.n	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dae8:	2b50      	cmp	r3, #80	@ 0x50
 800daea:	d046      	beq.n	800db7a <TIM_SlaveTimer_SetConfig+0x176>
 800daec:	2b50      	cmp	r3, #80	@ 0x50
 800daee:	d858      	bhi.n	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800daf0:	2b40      	cmp	r3, #64	@ 0x40
 800daf2:	d019      	beq.n	800db28 <TIM_SlaveTimer_SetConfig+0x124>
 800daf4:	2b40      	cmp	r3, #64	@ 0x40
 800daf6:	d854      	bhi.n	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800daf8:	2b30      	cmp	r3, #48	@ 0x30
 800dafa:	d055      	beq.n	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dafc:	2b30      	cmp	r3, #48	@ 0x30
 800dafe:	d850      	bhi.n	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800db00:	2b20      	cmp	r3, #32
 800db02:	d051      	beq.n	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800db04:	2b20      	cmp	r3, #32
 800db06:	d84c      	bhi.n	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d04d      	beq.n	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800db0c:	2b10      	cmp	r3, #16
 800db0e:	d04b      	beq.n	800dba8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800db10:	e047      	b.n	800dba2 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800db22:	f000 fa01 	bl	800df28 <TIM_ETR_SetConfig>
      break;
 800db26:	e040      	b.n	800dbaa <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b05      	cmp	r3, #5
 800db2e:	d101      	bne.n	800db34 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800db30:	2301      	movs	r3, #1
 800db32:	e03b      	b.n	800dbac <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	6a1b      	ldr	r3, [r3, #32]
 800db3a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	6a1a      	ldr	r2, [r3, #32]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f022 0201 	bic.w	r2, r2, #1
 800db4a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	699b      	ldr	r3, [r3, #24]
 800db52:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800db5a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	691b      	ldr	r3, [r3, #16]
 800db60:	011b      	lsls	r3, r3, #4
 800db62:	68ba      	ldr	r2, [r7, #8]
 800db64:	4313      	orrs	r3, r2
 800db66:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	621a      	str	r2, [r3, #32]
      break;
 800db78:	e017      	b.n	800dbaa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db86:	461a      	mov	r2, r3
 800db88:	f000 f89a 	bl	800dcc0 <TIM_TI1_ConfigInputStage>
      break;
 800db8c:	e00d      	b.n	800dbaa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800db9a:	461a      	mov	r2, r3
 800db9c:	f000 f8fc 	bl	800dd98 <TIM_TI2_ConfigInputStage>
      break;
 800dba0:	e003      	b.n	800dbaa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800dba2:	2301      	movs	r3, #1
 800dba4:	75fb      	strb	r3, [r7, #23]
      break;
 800dba6:	e000      	b.n	800dbaa <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800dba8:	bf00      	nop
  }

  return status;
 800dbaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3718      	adds	r7, #24
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	ffcfff8f 	.word	0xffcfff8f
 800dbb8:	fffefff8 	.word	0xfffefff8
 800dbbc:	00200010 	.word	0x00200010
 800dbc0:	00100070 	.word	0x00100070
 800dbc4:	00100060 	.word	0x00100060
 800dbc8:	00100050 	.word	0x00100050
 800dbcc:	00100040 	.word	0x00100040
 800dbd0:	00100030 	.word	0x00100030
 800dbd4:	00100020 	.word	0x00100020

0800dbd8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b087      	sub	sp, #28
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	607a      	str	r2, [r7, #4]
 800dbe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6a1b      	ldr	r3, [r3, #32]
 800dbea:	f023 0201 	bic.w	r2, r3, #1
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	699b      	ldr	r3, [r3, #24]
 800dbf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6a1b      	ldr	r3, [r3, #32]
 800dbfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	4a28      	ldr	r2, [pc, #160]	@ (800dca4 <TIM_TI1_SetConfig+0xcc>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d01b      	beq.n	800dc3e <TIM_TI1_SetConfig+0x66>
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc0c:	d017      	beq.n	800dc3e <TIM_TI1_SetConfig+0x66>
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	4a25      	ldr	r2, [pc, #148]	@ (800dca8 <TIM_TI1_SetConfig+0xd0>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d013      	beq.n	800dc3e <TIM_TI1_SetConfig+0x66>
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	4a24      	ldr	r2, [pc, #144]	@ (800dcac <TIM_TI1_SetConfig+0xd4>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d00f      	beq.n	800dc3e <TIM_TI1_SetConfig+0x66>
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	4a23      	ldr	r2, [pc, #140]	@ (800dcb0 <TIM_TI1_SetConfig+0xd8>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d00b      	beq.n	800dc3e <TIM_TI1_SetConfig+0x66>
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	4a22      	ldr	r2, [pc, #136]	@ (800dcb4 <TIM_TI1_SetConfig+0xdc>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d007      	beq.n	800dc3e <TIM_TI1_SetConfig+0x66>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	4a21      	ldr	r2, [pc, #132]	@ (800dcb8 <TIM_TI1_SetConfig+0xe0>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d003      	beq.n	800dc3e <TIM_TI1_SetConfig+0x66>
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	4a20      	ldr	r2, [pc, #128]	@ (800dcbc <TIM_TI1_SetConfig+0xe4>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d101      	bne.n	800dc42 <TIM_TI1_SetConfig+0x6a>
 800dc3e:	2301      	movs	r3, #1
 800dc40:	e000      	b.n	800dc44 <TIM_TI1_SetConfig+0x6c>
 800dc42:	2300      	movs	r3, #0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d008      	beq.n	800dc5a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	f023 0303 	bic.w	r3, r3, #3
 800dc4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800dc50:	697a      	ldr	r2, [r7, #20]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	4313      	orrs	r3, r2
 800dc56:	617b      	str	r3, [r7, #20]
 800dc58:	e003      	b.n	800dc62 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	f043 0301 	orr.w	r3, r3, #1
 800dc60:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dc68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	011b      	lsls	r3, r3, #4
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	697a      	ldr	r2, [r7, #20]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	f023 030a 	bic.w	r3, r3, #10
 800dc7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	f003 030a 	and.w	r3, r3, #10
 800dc84:	693a      	ldr	r2, [r7, #16]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	697a      	ldr	r2, [r7, #20]
 800dc8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	693a      	ldr	r2, [r7, #16]
 800dc94:	621a      	str	r2, [r3, #32]
}
 800dc96:	bf00      	nop
 800dc98:	371c      	adds	r7, #28
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop
 800dca4:	40010000 	.word	0x40010000
 800dca8:	40000400 	.word	0x40000400
 800dcac:	40000800 	.word	0x40000800
 800dcb0:	40000c00 	.word	0x40000c00
 800dcb4:	40010400 	.word	0x40010400
 800dcb8:	40001800 	.word	0x40001800
 800dcbc:	40014000 	.word	0x40014000

0800dcc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	60b9      	str	r1, [r7, #8]
 800dcca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	6a1b      	ldr	r3, [r3, #32]
 800dcd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	6a1b      	ldr	r3, [r3, #32]
 800dcd6:	f023 0201 	bic.w	r2, r3, #1
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	699b      	ldr	r3, [r3, #24]
 800dce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dcea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	011b      	lsls	r3, r3, #4
 800dcf0:	693a      	ldr	r2, [r7, #16]
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	f023 030a 	bic.w	r3, r3, #10
 800dcfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dcfe:	697a      	ldr	r2, [r7, #20]
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	693a      	ldr	r2, [r7, #16]
 800dd0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	697a      	ldr	r2, [r7, #20]
 800dd10:	621a      	str	r2, [r3, #32]
}
 800dd12:	bf00      	nop
 800dd14:	371c      	adds	r7, #28
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr

0800dd1e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dd1e:	b480      	push	{r7}
 800dd20:	b087      	sub	sp, #28
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	60f8      	str	r0, [r7, #12]
 800dd26:	60b9      	str	r1, [r7, #8]
 800dd28:	607a      	str	r2, [r7, #4]
 800dd2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6a1b      	ldr	r3, [r3, #32]
 800dd30:	f023 0210 	bic.w	r2, r3, #16
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	699b      	ldr	r3, [r3, #24]
 800dd3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6a1b      	ldr	r3, [r3, #32]
 800dd42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	021b      	lsls	r3, r3, #8
 800dd50:	697a      	ldr	r2, [r7, #20]
 800dd52:	4313      	orrs	r3, r2
 800dd54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dd5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	031b      	lsls	r3, r3, #12
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	697a      	ldr	r2, [r7, #20]
 800dd66:	4313      	orrs	r3, r2
 800dd68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800dd70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	011b      	lsls	r3, r3, #4
 800dd76:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800dd7a:	693a      	ldr	r2, [r7, #16]
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	697a      	ldr	r2, [r7, #20]
 800dd84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	693a      	ldr	r2, [r7, #16]
 800dd8a:	621a      	str	r2, [r3, #32]
}
 800dd8c:	bf00      	nop
 800dd8e:	371c      	adds	r7, #28
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b087      	sub	sp, #28
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6a1b      	ldr	r3, [r3, #32]
 800dda8:	f023 0210 	bic.w	r2, r3, #16
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	699b      	ldr	r3, [r3, #24]
 800ddb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6a1b      	ldr	r3, [r3, #32]
 800ddba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ddc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	031b      	lsls	r3, r3, #12
 800ddc8:	697a      	ldr	r2, [r7, #20]
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ddd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	011b      	lsls	r3, r3, #4
 800ddda:	693a      	ldr	r2, [r7, #16]
 800dddc:	4313      	orrs	r3, r2
 800ddde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	621a      	str	r2, [r3, #32]
}
 800ddec:	bf00      	nop
 800ddee:	371c      	adds	r7, #28
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b087      	sub	sp, #28
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
 800de04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6a1b      	ldr	r3, [r3, #32]
 800de0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	69db      	ldr	r3, [r3, #28]
 800de16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6a1b      	ldr	r3, [r3, #32]
 800de1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	f023 0303 	bic.w	r3, r3, #3
 800de24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800de26:	697a      	ldr	r2, [r7, #20]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4313      	orrs	r3, r2
 800de2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800de34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	011b      	lsls	r3, r3, #4
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	697a      	ldr	r2, [r7, #20]
 800de3e:	4313      	orrs	r3, r2
 800de40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800de48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	021b      	lsls	r3, r3, #8
 800de4e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800de52:	693a      	ldr	r2, [r7, #16]
 800de54:	4313      	orrs	r3, r2
 800de56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	697a      	ldr	r2, [r7, #20]
 800de5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	693a      	ldr	r2, [r7, #16]
 800de62:	621a      	str	r2, [r3, #32]
}
 800de64:	bf00      	nop
 800de66:	371c      	adds	r7, #28
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800de70:	b480      	push	{r7}
 800de72:	b087      	sub	sp, #28
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	607a      	str	r2, [r7, #4]
 800de7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	6a1b      	ldr	r3, [r3, #32]
 800de82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	69db      	ldr	r3, [r3, #28]
 800de8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6a1b      	ldr	r3, [r3, #32]
 800de94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800de9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	021b      	lsls	r3, r3, #8
 800dea2:	697a      	ldr	r2, [r7, #20]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800deae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	031b      	lsls	r3, r3, #12
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	697a      	ldr	r2, [r7, #20]
 800deb8:	4313      	orrs	r3, r2
 800deba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800dec2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	031b      	lsls	r3, r3, #12
 800dec8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800decc:	693a      	ldr	r2, [r7, #16]
 800dece:	4313      	orrs	r3, r2
 800ded0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	697a      	ldr	r2, [r7, #20]
 800ded6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	693a      	ldr	r2, [r7, #16]
 800dedc:	621a      	str	r2, [r3, #32]
}
 800dede:	bf00      	nop
 800dee0:	371c      	adds	r7, #28
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr
	...

0800deec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800deec:	b480      	push	{r7}
 800deee:	b085      	sub	sp, #20
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	4b09      	ldr	r3, [pc, #36]	@ (800df24 <TIM_ITRx_SetConfig+0x38>)
 800df00:	4013      	ands	r3, r2
 800df02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800df04:	683a      	ldr	r2, [r7, #0]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	4313      	orrs	r3, r2
 800df0a:	f043 0307 	orr.w	r3, r3, #7
 800df0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	68fa      	ldr	r2, [r7, #12]
 800df14:	609a      	str	r2, [r3, #8]
}
 800df16:	bf00      	nop
 800df18:	3714      	adds	r7, #20
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	ffcfff8f 	.word	0xffcfff8f

0800df28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800df28:	b480      	push	{r7}
 800df2a:	b087      	sub	sp, #28
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800df42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	021a      	lsls	r2, r3, #8
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	431a      	orrs	r2, r3
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	4313      	orrs	r3, r2
 800df50:	697a      	ldr	r2, [r7, #20]
 800df52:	4313      	orrs	r3, r2
 800df54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	697a      	ldr	r2, [r7, #20]
 800df5a:	609a      	str	r2, [r3, #8]
}
 800df5c:	bf00      	nop
 800df5e:	371c      	adds	r7, #28
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d101      	bne.n	800df80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df7c:	2302      	movs	r3, #2
 800df7e:	e06d      	b.n	800e05c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2202      	movs	r2, #2
 800df8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a30      	ldr	r2, [pc, #192]	@ (800e068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d004      	beq.n	800dfb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4a2f      	ldr	r2, [pc, #188]	@ (800e06c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d108      	bne.n	800dfc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dfba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	68fa      	ldr	r2, [r7, #12]
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	68fa      	ldr	r2, [r7, #12]
 800dfde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a20      	ldr	r2, [pc, #128]	@ (800e068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d022      	beq.n	800e030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dff2:	d01d      	beq.n	800e030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a1d      	ldr	r2, [pc, #116]	@ (800e070 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d018      	beq.n	800e030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a1c      	ldr	r2, [pc, #112]	@ (800e074 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d013      	beq.n	800e030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4a1a      	ldr	r2, [pc, #104]	@ (800e078 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d00e      	beq.n	800e030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4a15      	ldr	r2, [pc, #84]	@ (800e06c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d009      	beq.n	800e030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a16      	ldr	r2, [pc, #88]	@ (800e07c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d004      	beq.n	800e030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4a15      	ldr	r2, [pc, #84]	@ (800e080 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d10c      	bne.n	800e04a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	68ba      	ldr	r2, [r7, #8]
 800e03e:	4313      	orrs	r3, r2
 800e040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68ba      	ldr	r2, [r7, #8]
 800e048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2201      	movs	r2, #1
 800e04e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2200      	movs	r2, #0
 800e056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3714      	adds	r7, #20
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr
 800e068:	40010000 	.word	0x40010000
 800e06c:	40010400 	.word	0x40010400
 800e070:	40000400 	.word	0x40000400
 800e074:	40000800 	.word	0x40000800
 800e078:	40000c00 	.word	0x40000c00
 800e07c:	40001800 	.word	0x40001800
 800e080:	40014000 	.word	0x40014000

0800e084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e08c:	bf00      	nop
 800e08e:	370c      	adds	r7, #12
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e098:	b480      	push	{r7}
 800e09a:	b083      	sub	sp, #12
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0a0:	bf00      	nop
 800e0a2:	370c      	adds	r7, #12
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr

0800e0ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e0b4:	bf00      	nop
 800e0b6:	370c      	adds	r7, #12
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d101      	bne.n	800e0d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e042      	b.n	800e158 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d106      	bne.n	800e0ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f7f5 fa4b 	bl	8003580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2224      	movs	r2, #36	@ 0x24
 800e0ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f022 0201 	bic.w	r2, r2, #1
 800e100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 fc94 	bl	800ea30 <UART_SetConfig>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d101      	bne.n	800e112 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	e022      	b.n	800e158 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e116:	2b00      	cmp	r3, #0
 800e118:	d002      	beq.n	800e120 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f001 f9f0 	bl	800f500 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	685a      	ldr	r2, [r3, #4]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e12e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	689a      	ldr	r2, [r3, #8]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e13e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f042 0201 	orr.w	r2, r2, #1
 800e14e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f001 fa77 	bl	800f644 <UART_CheckIdleState>
 800e156:	4603      	mov	r3, r0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3708      	adds	r7, #8
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b08a      	sub	sp, #40	@ 0x28
 800e164:	af02      	add	r7, sp, #8
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	603b      	str	r3, [r7, #0]
 800e16c:	4613      	mov	r3, r2
 800e16e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e176:	2b20      	cmp	r3, #32
 800e178:	d17b      	bne.n	800e272 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d002      	beq.n	800e186 <HAL_UART_Transmit+0x26>
 800e180:	88fb      	ldrh	r3, [r7, #6]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d101      	bne.n	800e18a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e186:	2301      	movs	r3, #1
 800e188:	e074      	b.n	800e274 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2221      	movs	r2, #33	@ 0x21
 800e196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e19a:	f7f5 fb13 	bl	80037c4 <HAL_GetTick>
 800e19e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	88fa      	ldrh	r2, [r7, #6]
 800e1a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	88fa      	ldrh	r2, [r7, #6]
 800e1ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1b8:	d108      	bne.n	800e1cc <HAL_UART_Transmit+0x6c>
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	691b      	ldr	r3, [r3, #16]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d104      	bne.n	800e1cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	61bb      	str	r3, [r7, #24]
 800e1ca:	e003      	b.n	800e1d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e1d4:	e030      	b.n	800e238 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	9300      	str	r3, [sp, #0]
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	2180      	movs	r1, #128	@ 0x80
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	f001 fad9 	bl	800f798 <UART_WaitOnFlagUntilTimeout>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d005      	beq.n	800e1f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2220      	movs	r2, #32
 800e1f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e1f4:	2303      	movs	r3, #3
 800e1f6:	e03d      	b.n	800e274 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10b      	bne.n	800e216 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e1fe:	69bb      	ldr	r3, [r7, #24]
 800e200:	881b      	ldrh	r3, [r3, #0]
 800e202:	461a      	mov	r2, r3
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e20c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	3302      	adds	r3, #2
 800e212:	61bb      	str	r3, [r7, #24]
 800e214:	e007      	b.n	800e226 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	781a      	ldrb	r2, [r3, #0]
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	3301      	adds	r3, #1
 800e224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	3b01      	subs	r3, #1
 800e230:	b29a      	uxth	r2, r3
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e23e:	b29b      	uxth	r3, r3
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1c8      	bne.n	800e1d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	2200      	movs	r2, #0
 800e24c:	2140      	movs	r1, #64	@ 0x40
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	f001 faa2 	bl	800f798 <UART_WaitOnFlagUntilTimeout>
 800e254:	4603      	mov	r3, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d005      	beq.n	800e266 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2220      	movs	r2, #32
 800e25e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e262:	2303      	movs	r3, #3
 800e264:	e006      	b.n	800e274 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2220      	movs	r2, #32
 800e26a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e26e:	2300      	movs	r3, #0
 800e270:	e000      	b.n	800e274 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e272:	2302      	movs	r3, #2
  }
}
 800e274:	4618      	mov	r0, r3
 800e276:	3720      	adds	r7, #32
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b0ba      	sub	sp, #232	@ 0xe8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	69db      	ldr	r3, [r3, #28]
 800e28a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	689b      	ldr	r3, [r3, #8]
 800e29e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e2a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e2a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e2aa:	4013      	ands	r3, r2
 800e2ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e2b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d11b      	bne.n	800e2f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e2b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2bc:	f003 0320 	and.w	r3, r3, #32
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d015      	beq.n	800e2f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2c8:	f003 0320 	and.w	r3, r3, #32
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d105      	bne.n	800e2dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e2d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e2d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d009      	beq.n	800e2f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 8377 	beq.w	800e9d4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	4798      	blx	r3
      }
      return;
 800e2ee:	e371      	b.n	800e9d4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e2f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	f000 8123 	beq.w	800e540 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e2fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e2fe:	4b8d      	ldr	r3, [pc, #564]	@ (800e534 <HAL_UART_IRQHandler+0x2b8>)
 800e300:	4013      	ands	r3, r2
 800e302:	2b00      	cmp	r3, #0
 800e304:	d106      	bne.n	800e314 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e306:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e30a:	4b8b      	ldr	r3, [pc, #556]	@ (800e538 <HAL_UART_IRQHandler+0x2bc>)
 800e30c:	4013      	ands	r3, r2
 800e30e:	2b00      	cmp	r3, #0
 800e310:	f000 8116 	beq.w	800e540 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e318:	f003 0301 	and.w	r3, r3, #1
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d011      	beq.n	800e344 <HAL_UART_IRQHandler+0xc8>
 800e320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00b      	beq.n	800e344 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2201      	movs	r2, #1
 800e332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e33a:	f043 0201 	orr.w	r2, r3, #1
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e348:	f003 0302 	and.w	r3, r3, #2
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d011      	beq.n	800e374 <HAL_UART_IRQHandler+0xf8>
 800e350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e354:	f003 0301 	and.w	r3, r3, #1
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00b      	beq.n	800e374 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2202      	movs	r2, #2
 800e362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e36a:	f043 0204 	orr.w	r2, r3, #4
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e378:	f003 0304 	and.w	r3, r3, #4
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d011      	beq.n	800e3a4 <HAL_UART_IRQHandler+0x128>
 800e380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e384:	f003 0301 	and.w	r3, r3, #1
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00b      	beq.n	800e3a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2204      	movs	r2, #4
 800e392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e39a:	f043 0202 	orr.w	r2, r3, #2
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e3a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3a8:	f003 0308 	and.w	r3, r3, #8
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d017      	beq.n	800e3e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e3b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e3b4:	f003 0320 	and.w	r3, r3, #32
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d105      	bne.n	800e3c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e3bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e3c0:	4b5c      	ldr	r3, [pc, #368]	@ (800e534 <HAL_UART_IRQHandler+0x2b8>)
 800e3c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d00b      	beq.n	800e3e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2208      	movs	r2, #8
 800e3ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3d6:	f043 0208 	orr.w	r2, r3, #8
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e3e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d012      	beq.n	800e412 <HAL_UART_IRQHandler+0x196>
 800e3ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e3f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d00c      	beq.n	800e412 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e400:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e408:	f043 0220 	orr.w	r2, r3, #32
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f000 82dd 	beq.w	800e9d8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e422:	f003 0320 	and.w	r3, r3, #32
 800e426:	2b00      	cmp	r3, #0
 800e428:	d013      	beq.n	800e452 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e42a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e42e:	f003 0320 	and.w	r3, r3, #32
 800e432:	2b00      	cmp	r3, #0
 800e434:	d105      	bne.n	800e442 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e43a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d007      	beq.n	800e452 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e446:	2b00      	cmp	r3, #0
 800e448:	d003      	beq.n	800e452 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e458:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	689b      	ldr	r3, [r3, #8]
 800e462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e466:	2b40      	cmp	r3, #64	@ 0x40
 800e468:	d005      	beq.n	800e476 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e46a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e46e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e472:	2b00      	cmp	r3, #0
 800e474:	d054      	beq.n	800e520 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f001 f9f6 	bl	800f868 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	689b      	ldr	r3, [r3, #8]
 800e482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e486:	2b40      	cmp	r3, #64	@ 0x40
 800e488:	d146      	bne.n	800e518 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	3308      	adds	r3, #8
 800e490:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e494:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e498:	e853 3f00 	ldrex	r3, [r3]
 800e49c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e4a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e4a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	3308      	adds	r3, #8
 800e4b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e4b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e4ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e4c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e4c6:	e841 2300 	strex	r3, r2, [r1]
 800e4ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e4ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1d9      	bne.n	800e48a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d017      	beq.n	800e510 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4e6:	4a15      	ldr	r2, [pc, #84]	@ (800e53c <HAL_UART_IRQHandler+0x2c0>)
 800e4e8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7f8 ff01 	bl	80072f8 <HAL_DMA_Abort_IT>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d019      	beq.n	800e530 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e50a:	4610      	mov	r0, r2
 800e50c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e50e:	e00f      	b.n	800e530 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 fa77 	bl	800ea04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e516:	e00b      	b.n	800e530 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 fa73 	bl	800ea04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e51e:	e007      	b.n	800e530 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 fa6f 	bl	800ea04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e52e:	e253      	b.n	800e9d8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e530:	bf00      	nop
    return;
 800e532:	e251      	b.n	800e9d8 <HAL_UART_IRQHandler+0x75c>
 800e534:	10000001 	.word	0x10000001
 800e538:	04000120 	.word	0x04000120
 800e53c:	0800f935 	.word	0x0800f935

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e544:	2b01      	cmp	r3, #1
 800e546:	f040 81e7 	bne.w	800e918 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e54a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e54e:	f003 0310 	and.w	r3, r3, #16
 800e552:	2b00      	cmp	r3, #0
 800e554:	f000 81e0 	beq.w	800e918 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e55c:	f003 0310 	and.w	r3, r3, #16
 800e560:	2b00      	cmp	r3, #0
 800e562:	f000 81d9 	beq.w	800e918 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2210      	movs	r2, #16
 800e56c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e578:	2b40      	cmp	r3, #64	@ 0x40
 800e57a:	f040 8151 	bne.w	800e820 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4a96      	ldr	r2, [pc, #600]	@ (800e7e0 <HAL_UART_IRQHandler+0x564>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d068      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a93      	ldr	r2, [pc, #588]	@ (800e7e4 <HAL_UART_IRQHandler+0x568>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d061      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	4a91      	ldr	r2, [pc, #580]	@ (800e7e8 <HAL_UART_IRQHandler+0x56c>)
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d05a      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a8e      	ldr	r2, [pc, #568]	@ (800e7ec <HAL_UART_IRQHandler+0x570>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d053      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4a8c      	ldr	r2, [pc, #560]	@ (800e7f0 <HAL_UART_IRQHandler+0x574>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d04c      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a89      	ldr	r2, [pc, #548]	@ (800e7f4 <HAL_UART_IRQHandler+0x578>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d045      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4a87      	ldr	r2, [pc, #540]	@ (800e7f8 <HAL_UART_IRQHandler+0x57c>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d03e      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a84      	ldr	r2, [pc, #528]	@ (800e7fc <HAL_UART_IRQHandler+0x580>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d037      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4a82      	ldr	r2, [pc, #520]	@ (800e800 <HAL_UART_IRQHandler+0x584>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d030      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a7f      	ldr	r2, [pc, #508]	@ (800e804 <HAL_UART_IRQHandler+0x588>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d029      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4a7d      	ldr	r2, [pc, #500]	@ (800e808 <HAL_UART_IRQHandler+0x58c>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d022      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a7a      	ldr	r2, [pc, #488]	@ (800e80c <HAL_UART_IRQHandler+0x590>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d01b      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	4a78      	ldr	r2, [pc, #480]	@ (800e810 <HAL_UART_IRQHandler+0x594>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d014      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a75      	ldr	r2, [pc, #468]	@ (800e814 <HAL_UART_IRQHandler+0x598>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d00d      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4a73      	ldr	r2, [pc, #460]	@ (800e818 <HAL_UART_IRQHandler+0x59c>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d006      	beq.n	800e65e <HAL_UART_IRQHandler+0x3e2>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4a70      	ldr	r2, [pc, #448]	@ (800e81c <HAL_UART_IRQHandler+0x5a0>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d106      	bne.n	800e66c <HAL_UART_IRQHandler+0x3f0>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	b29b      	uxth	r3, r3
 800e66a:	e005      	b.n	800e678 <HAL_UART_IRQHandler+0x3fc>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	b29b      	uxth	r3, r3
 800e678:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e67c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e680:	2b00      	cmp	r3, #0
 800e682:	f000 81ab 	beq.w	800e9dc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e68c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e690:	429a      	cmp	r2, r3
 800e692:	f080 81a3 	bcs.w	800e9dc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e69c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6a6:	69db      	ldr	r3, [r3, #28]
 800e6a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6ac:	f000 8087 	beq.w	800e7be <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e6bc:	e853 3f00 	ldrex	r3, [r3]
 800e6c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e6c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e6c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e6cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e6da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e6de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e6e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e6ea:	e841 2300 	strex	r3, r2, [r1]
 800e6ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e6f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1da      	bne.n	800e6b0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	3308      	adds	r3, #8
 800e700:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e704:	e853 3f00 	ldrex	r3, [r3]
 800e708:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e70a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e70c:	f023 0301 	bic.w	r3, r3, #1
 800e710:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	3308      	adds	r3, #8
 800e71a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e71e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e722:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e724:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e726:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e72a:	e841 2300 	strex	r3, r2, [r1]
 800e72e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e732:	2b00      	cmp	r3, #0
 800e734:	d1e1      	bne.n	800e6fa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	3308      	adds	r3, #8
 800e73c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e740:	e853 3f00 	ldrex	r3, [r3]
 800e744:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e74c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	3308      	adds	r3, #8
 800e756:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e75a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e75c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e760:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e762:	e841 2300 	strex	r3, r2, [r1]
 800e766:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1e3      	bne.n	800e736 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2220      	movs	r2, #32
 800e772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e784:	e853 3f00 	ldrex	r3, [r3]
 800e788:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e78a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e78c:	f023 0310 	bic.w	r3, r3, #16
 800e790:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	461a      	mov	r2, r3
 800e79a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e79e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e7a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e7a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e7a6:	e841 2300 	strex	r3, r2, [r1]
 800e7aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e7ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1e4      	bne.n	800e77c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7f8 fa7f 	bl	8006cbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2202      	movs	r2, #2
 800e7c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	1ad3      	subs	r3, r2, r3
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 f91d 	bl	800ea18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e7de:	e0fd      	b.n	800e9dc <HAL_UART_IRQHandler+0x760>
 800e7e0:	40020010 	.word	0x40020010
 800e7e4:	40020028 	.word	0x40020028
 800e7e8:	40020040 	.word	0x40020040
 800e7ec:	40020058 	.word	0x40020058
 800e7f0:	40020070 	.word	0x40020070
 800e7f4:	40020088 	.word	0x40020088
 800e7f8:	400200a0 	.word	0x400200a0
 800e7fc:	400200b8 	.word	0x400200b8
 800e800:	40020410 	.word	0x40020410
 800e804:	40020428 	.word	0x40020428
 800e808:	40020440 	.word	0x40020440
 800e80c:	40020458 	.word	0x40020458
 800e810:	40020470 	.word	0x40020470
 800e814:	40020488 	.word	0x40020488
 800e818:	400204a0 	.word	0x400204a0
 800e81c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	1ad3      	subs	r3, r2, r3
 800e830:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f000 80cf 	beq.w	800e9e0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e842:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e846:	2b00      	cmp	r3, #0
 800e848:	f000 80ca 	beq.w	800e9e0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e854:	e853 3f00 	ldrex	r3, [r3]
 800e858:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e85c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	461a      	mov	r2, r3
 800e86a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e86e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e870:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e872:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e876:	e841 2300 	strex	r3, r2, [r1]
 800e87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e87c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d1e4      	bne.n	800e84c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	3308      	adds	r3, #8
 800e888:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88c:	e853 3f00 	ldrex	r3, [r3]
 800e890:	623b      	str	r3, [r7, #32]
   return(result);
 800e892:	6a3a      	ldr	r2, [r7, #32]
 800e894:	4b55      	ldr	r3, [pc, #340]	@ (800e9ec <HAL_UART_IRQHandler+0x770>)
 800e896:	4013      	ands	r3, r2
 800e898:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	3308      	adds	r3, #8
 800e8a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e8a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800e8a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e8ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8ae:	e841 2300 	strex	r3, r2, [r1]
 800e8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d1e3      	bne.n	800e882 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2220      	movs	r2, #32
 800e8be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	e853 3f00 	ldrex	r3, [r3]
 800e8da:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f023 0310 	bic.w	r3, r3, #16
 800e8e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e8f0:	61fb      	str	r3, [r7, #28]
 800e8f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f4:	69b9      	ldr	r1, [r7, #24]
 800e8f6:	69fa      	ldr	r2, [r7, #28]
 800e8f8:	e841 2300 	strex	r3, r2, [r1]
 800e8fc:	617b      	str	r3, [r7, #20]
   return(result);
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d1e4      	bne.n	800e8ce <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2202      	movs	r2, #2
 800e908:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e90a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e90e:	4619      	mov	r1, r3
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 f881 	bl	800ea18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e916:	e063      	b.n	800e9e0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e91c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00e      	beq.n	800e942 <HAL_UART_IRQHandler+0x6c6>
 800e924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e928:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d008      	beq.n	800e942 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f001 f83b 	bl	800f9b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e940:	e051      	b.n	800e9e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d014      	beq.n	800e978 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e94e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e956:	2b00      	cmp	r3, #0
 800e958:	d105      	bne.n	800e966 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e95a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e95e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e962:	2b00      	cmp	r3, #0
 800e964:	d008      	beq.n	800e978 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d03a      	beq.n	800e9e4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	4798      	blx	r3
    }
    return;
 800e976:	e035      	b.n	800e9e4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e97c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e980:	2b00      	cmp	r3, #0
 800e982:	d009      	beq.n	800e998 <HAL_UART_IRQHandler+0x71c>
 800e984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d003      	beq.n	800e998 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 ffe5 	bl	800f960 <UART_EndTransmit_IT>
    return;
 800e996:	e026      	b.n	800e9e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e99c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d009      	beq.n	800e9b8 <HAL_UART_IRQHandler+0x73c>
 800e9a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e9a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d003      	beq.n	800e9b8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f001 f814 	bl	800f9de <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e9b6:	e016      	b.n	800e9e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e9b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e9bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d010      	beq.n	800e9e6 <HAL_UART_IRQHandler+0x76a>
 800e9c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	da0c      	bge.n	800e9e6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 fffc 	bl	800f9ca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e9d2:	e008      	b.n	800e9e6 <HAL_UART_IRQHandler+0x76a>
      return;
 800e9d4:	bf00      	nop
 800e9d6:	e006      	b.n	800e9e6 <HAL_UART_IRQHandler+0x76a>
    return;
 800e9d8:	bf00      	nop
 800e9da:	e004      	b.n	800e9e6 <HAL_UART_IRQHandler+0x76a>
      return;
 800e9dc:	bf00      	nop
 800e9de:	e002      	b.n	800e9e6 <HAL_UART_IRQHandler+0x76a>
      return;
 800e9e0:	bf00      	nop
 800e9e2:	e000      	b.n	800e9e6 <HAL_UART_IRQHandler+0x76a>
    return;
 800e9e4:	bf00      	nop
  }
}
 800e9e6:	37e8      	adds	r7, #232	@ 0xe8
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	effffffe 	.word	0xeffffffe

0800e9f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b083      	sub	sp, #12
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e9f8:	bf00      	nop
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ea0c:	bf00      	nop
 800ea0e:	370c      	adds	r7, #12
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr

0800ea18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b083      	sub	sp, #12
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	460b      	mov	r3, r1
 800ea22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ea24:	bf00      	nop
 800ea26:	370c      	adds	r7, #12
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ea30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ea34:	b092      	sub	sp, #72	@ 0x48
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	689a      	ldr	r2, [r3, #8]
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	691b      	ldr	r3, [r3, #16]
 800ea48:	431a      	orrs	r2, r3
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	695b      	ldr	r3, [r3, #20]
 800ea4e:	431a      	orrs	r2, r3
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	69db      	ldr	r3, [r3, #28]
 800ea54:	4313      	orrs	r3, r2
 800ea56:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	4bbe      	ldr	r3, [pc, #760]	@ (800ed58 <UART_SetConfig+0x328>)
 800ea60:	4013      	ands	r3, r2
 800ea62:	697a      	ldr	r2, [r7, #20]
 800ea64:	6812      	ldr	r2, [r2, #0]
 800ea66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ea68:	430b      	orrs	r3, r1
 800ea6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	68da      	ldr	r2, [r3, #12]
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	430a      	orrs	r2, r1
 800ea80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	699b      	ldr	r3, [r3, #24]
 800ea86:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4ab3      	ldr	r2, [pc, #716]	@ (800ed5c <UART_SetConfig+0x32c>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d004      	beq.n	800ea9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	6a1b      	ldr	r3, [r3, #32]
 800ea96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	689a      	ldr	r2, [r3, #8]
 800eaa2:	4baf      	ldr	r3, [pc, #700]	@ (800ed60 <UART_SetConfig+0x330>)
 800eaa4:	4013      	ands	r3, r2
 800eaa6:	697a      	ldr	r2, [r7, #20]
 800eaa8:	6812      	ldr	r2, [r2, #0]
 800eaaa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eaac:	430b      	orrs	r3, r1
 800eaae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eab6:	f023 010f 	bic.w	r1, r3, #15
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	430a      	orrs	r2, r1
 800eac4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4aa6      	ldr	r2, [pc, #664]	@ (800ed64 <UART_SetConfig+0x334>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d177      	bne.n	800ebc0 <UART_SetConfig+0x190>
 800ead0:	4ba5      	ldr	r3, [pc, #660]	@ (800ed68 <UART_SetConfig+0x338>)
 800ead2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ead4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ead8:	2b28      	cmp	r3, #40	@ 0x28
 800eada:	d86d      	bhi.n	800ebb8 <UART_SetConfig+0x188>
 800eadc:	a201      	add	r2, pc, #4	@ (adr r2, 800eae4 <UART_SetConfig+0xb4>)
 800eade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae2:	bf00      	nop
 800eae4:	0800eb89 	.word	0x0800eb89
 800eae8:	0800ebb9 	.word	0x0800ebb9
 800eaec:	0800ebb9 	.word	0x0800ebb9
 800eaf0:	0800ebb9 	.word	0x0800ebb9
 800eaf4:	0800ebb9 	.word	0x0800ebb9
 800eaf8:	0800ebb9 	.word	0x0800ebb9
 800eafc:	0800ebb9 	.word	0x0800ebb9
 800eb00:	0800ebb9 	.word	0x0800ebb9
 800eb04:	0800eb91 	.word	0x0800eb91
 800eb08:	0800ebb9 	.word	0x0800ebb9
 800eb0c:	0800ebb9 	.word	0x0800ebb9
 800eb10:	0800ebb9 	.word	0x0800ebb9
 800eb14:	0800ebb9 	.word	0x0800ebb9
 800eb18:	0800ebb9 	.word	0x0800ebb9
 800eb1c:	0800ebb9 	.word	0x0800ebb9
 800eb20:	0800ebb9 	.word	0x0800ebb9
 800eb24:	0800eb99 	.word	0x0800eb99
 800eb28:	0800ebb9 	.word	0x0800ebb9
 800eb2c:	0800ebb9 	.word	0x0800ebb9
 800eb30:	0800ebb9 	.word	0x0800ebb9
 800eb34:	0800ebb9 	.word	0x0800ebb9
 800eb38:	0800ebb9 	.word	0x0800ebb9
 800eb3c:	0800ebb9 	.word	0x0800ebb9
 800eb40:	0800ebb9 	.word	0x0800ebb9
 800eb44:	0800eba1 	.word	0x0800eba1
 800eb48:	0800ebb9 	.word	0x0800ebb9
 800eb4c:	0800ebb9 	.word	0x0800ebb9
 800eb50:	0800ebb9 	.word	0x0800ebb9
 800eb54:	0800ebb9 	.word	0x0800ebb9
 800eb58:	0800ebb9 	.word	0x0800ebb9
 800eb5c:	0800ebb9 	.word	0x0800ebb9
 800eb60:	0800ebb9 	.word	0x0800ebb9
 800eb64:	0800eba9 	.word	0x0800eba9
 800eb68:	0800ebb9 	.word	0x0800ebb9
 800eb6c:	0800ebb9 	.word	0x0800ebb9
 800eb70:	0800ebb9 	.word	0x0800ebb9
 800eb74:	0800ebb9 	.word	0x0800ebb9
 800eb78:	0800ebb9 	.word	0x0800ebb9
 800eb7c:	0800ebb9 	.word	0x0800ebb9
 800eb80:	0800ebb9 	.word	0x0800ebb9
 800eb84:	0800ebb1 	.word	0x0800ebb1
 800eb88:	2301      	movs	r3, #1
 800eb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb8e:	e222      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800eb90:	2304      	movs	r3, #4
 800eb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb96:	e21e      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800eb98:	2308      	movs	r3, #8
 800eb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb9e:	e21a      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800eba0:	2310      	movs	r3, #16
 800eba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eba6:	e216      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800eba8:	2320      	movs	r3, #32
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebae:	e212      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ebb0:	2340      	movs	r3, #64	@ 0x40
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebb6:	e20e      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ebb8:	2380      	movs	r3, #128	@ 0x80
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebbe:	e20a      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a69      	ldr	r2, [pc, #420]	@ (800ed6c <UART_SetConfig+0x33c>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d130      	bne.n	800ec2c <UART_SetConfig+0x1fc>
 800ebca:	4b67      	ldr	r3, [pc, #412]	@ (800ed68 <UART_SetConfig+0x338>)
 800ebcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebce:	f003 0307 	and.w	r3, r3, #7
 800ebd2:	2b05      	cmp	r3, #5
 800ebd4:	d826      	bhi.n	800ec24 <UART_SetConfig+0x1f4>
 800ebd6:	a201      	add	r2, pc, #4	@ (adr r2, 800ebdc <UART_SetConfig+0x1ac>)
 800ebd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebdc:	0800ebf5 	.word	0x0800ebf5
 800ebe0:	0800ebfd 	.word	0x0800ebfd
 800ebe4:	0800ec05 	.word	0x0800ec05
 800ebe8:	0800ec0d 	.word	0x0800ec0d
 800ebec:	0800ec15 	.word	0x0800ec15
 800ebf0:	0800ec1d 	.word	0x0800ec1d
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebfa:	e1ec      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ebfc:	2304      	movs	r3, #4
 800ebfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec02:	e1e8      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec04:	2308      	movs	r3, #8
 800ec06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec0a:	e1e4      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec0c:	2310      	movs	r3, #16
 800ec0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec12:	e1e0      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec14:	2320      	movs	r3, #32
 800ec16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec1a:	e1dc      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec1c:	2340      	movs	r3, #64	@ 0x40
 800ec1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec22:	e1d8      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec24:	2380      	movs	r3, #128	@ 0x80
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec2a:	e1d4      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a4f      	ldr	r2, [pc, #316]	@ (800ed70 <UART_SetConfig+0x340>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d130      	bne.n	800ec98 <UART_SetConfig+0x268>
 800ec36:	4b4c      	ldr	r3, [pc, #304]	@ (800ed68 <UART_SetConfig+0x338>)
 800ec38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec3a:	f003 0307 	and.w	r3, r3, #7
 800ec3e:	2b05      	cmp	r3, #5
 800ec40:	d826      	bhi.n	800ec90 <UART_SetConfig+0x260>
 800ec42:	a201      	add	r2, pc, #4	@ (adr r2, 800ec48 <UART_SetConfig+0x218>)
 800ec44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec48:	0800ec61 	.word	0x0800ec61
 800ec4c:	0800ec69 	.word	0x0800ec69
 800ec50:	0800ec71 	.word	0x0800ec71
 800ec54:	0800ec79 	.word	0x0800ec79
 800ec58:	0800ec81 	.word	0x0800ec81
 800ec5c:	0800ec89 	.word	0x0800ec89
 800ec60:	2300      	movs	r3, #0
 800ec62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec66:	e1b6      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec68:	2304      	movs	r3, #4
 800ec6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec6e:	e1b2      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec70:	2308      	movs	r3, #8
 800ec72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec76:	e1ae      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec78:	2310      	movs	r3, #16
 800ec7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec7e:	e1aa      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec80:	2320      	movs	r3, #32
 800ec82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec86:	e1a6      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec88:	2340      	movs	r3, #64	@ 0x40
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec8e:	e1a2      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec90:	2380      	movs	r3, #128	@ 0x80
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec96:	e19e      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	4a35      	ldr	r2, [pc, #212]	@ (800ed74 <UART_SetConfig+0x344>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d130      	bne.n	800ed04 <UART_SetConfig+0x2d4>
 800eca2:	4b31      	ldr	r3, [pc, #196]	@ (800ed68 <UART_SetConfig+0x338>)
 800eca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eca6:	f003 0307 	and.w	r3, r3, #7
 800ecaa:	2b05      	cmp	r3, #5
 800ecac:	d826      	bhi.n	800ecfc <UART_SetConfig+0x2cc>
 800ecae:	a201      	add	r2, pc, #4	@ (adr r2, 800ecb4 <UART_SetConfig+0x284>)
 800ecb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb4:	0800eccd 	.word	0x0800eccd
 800ecb8:	0800ecd5 	.word	0x0800ecd5
 800ecbc:	0800ecdd 	.word	0x0800ecdd
 800ecc0:	0800ece5 	.word	0x0800ece5
 800ecc4:	0800eced 	.word	0x0800eced
 800ecc8:	0800ecf5 	.word	0x0800ecf5
 800eccc:	2300      	movs	r3, #0
 800ecce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecd2:	e180      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ecd4:	2304      	movs	r3, #4
 800ecd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecda:	e17c      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ecdc:	2308      	movs	r3, #8
 800ecde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ece2:	e178      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ece4:	2310      	movs	r3, #16
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecea:	e174      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ecec:	2320      	movs	r3, #32
 800ecee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecf2:	e170      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ecf4:	2340      	movs	r3, #64	@ 0x40
 800ecf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecfa:	e16c      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ecfc:	2380      	movs	r3, #128	@ 0x80
 800ecfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed02:	e168      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4a1b      	ldr	r2, [pc, #108]	@ (800ed78 <UART_SetConfig+0x348>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d142      	bne.n	800ed94 <UART_SetConfig+0x364>
 800ed0e:	4b16      	ldr	r3, [pc, #88]	@ (800ed68 <UART_SetConfig+0x338>)
 800ed10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed12:	f003 0307 	and.w	r3, r3, #7
 800ed16:	2b05      	cmp	r3, #5
 800ed18:	d838      	bhi.n	800ed8c <UART_SetConfig+0x35c>
 800ed1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ed20 <UART_SetConfig+0x2f0>)
 800ed1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed20:	0800ed39 	.word	0x0800ed39
 800ed24:	0800ed41 	.word	0x0800ed41
 800ed28:	0800ed49 	.word	0x0800ed49
 800ed2c:	0800ed51 	.word	0x0800ed51
 800ed30:	0800ed7d 	.word	0x0800ed7d
 800ed34:	0800ed85 	.word	0x0800ed85
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed3e:	e14a      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ed40:	2304      	movs	r3, #4
 800ed42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed46:	e146      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ed48:	2308      	movs	r3, #8
 800ed4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed4e:	e142      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ed50:	2310      	movs	r3, #16
 800ed52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed56:	e13e      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ed58:	cfff69f3 	.word	0xcfff69f3
 800ed5c:	58000c00 	.word	0x58000c00
 800ed60:	11fff4ff 	.word	0x11fff4ff
 800ed64:	40011000 	.word	0x40011000
 800ed68:	58024400 	.word	0x58024400
 800ed6c:	40004400 	.word	0x40004400
 800ed70:	40004800 	.word	0x40004800
 800ed74:	40004c00 	.word	0x40004c00
 800ed78:	40005000 	.word	0x40005000
 800ed7c:	2320      	movs	r3, #32
 800ed7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed82:	e128      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ed84:	2340      	movs	r3, #64	@ 0x40
 800ed86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed8a:	e124      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ed8c:	2380      	movs	r3, #128	@ 0x80
 800ed8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed92:	e120      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4acb      	ldr	r2, [pc, #812]	@ (800f0c8 <UART_SetConfig+0x698>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d176      	bne.n	800ee8c <UART_SetConfig+0x45c>
 800ed9e:	4bcb      	ldr	r3, [pc, #812]	@ (800f0cc <UART_SetConfig+0x69c>)
 800eda0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eda2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eda6:	2b28      	cmp	r3, #40	@ 0x28
 800eda8:	d86c      	bhi.n	800ee84 <UART_SetConfig+0x454>
 800edaa:	a201      	add	r2, pc, #4	@ (adr r2, 800edb0 <UART_SetConfig+0x380>)
 800edac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb0:	0800ee55 	.word	0x0800ee55
 800edb4:	0800ee85 	.word	0x0800ee85
 800edb8:	0800ee85 	.word	0x0800ee85
 800edbc:	0800ee85 	.word	0x0800ee85
 800edc0:	0800ee85 	.word	0x0800ee85
 800edc4:	0800ee85 	.word	0x0800ee85
 800edc8:	0800ee85 	.word	0x0800ee85
 800edcc:	0800ee85 	.word	0x0800ee85
 800edd0:	0800ee5d 	.word	0x0800ee5d
 800edd4:	0800ee85 	.word	0x0800ee85
 800edd8:	0800ee85 	.word	0x0800ee85
 800eddc:	0800ee85 	.word	0x0800ee85
 800ede0:	0800ee85 	.word	0x0800ee85
 800ede4:	0800ee85 	.word	0x0800ee85
 800ede8:	0800ee85 	.word	0x0800ee85
 800edec:	0800ee85 	.word	0x0800ee85
 800edf0:	0800ee65 	.word	0x0800ee65
 800edf4:	0800ee85 	.word	0x0800ee85
 800edf8:	0800ee85 	.word	0x0800ee85
 800edfc:	0800ee85 	.word	0x0800ee85
 800ee00:	0800ee85 	.word	0x0800ee85
 800ee04:	0800ee85 	.word	0x0800ee85
 800ee08:	0800ee85 	.word	0x0800ee85
 800ee0c:	0800ee85 	.word	0x0800ee85
 800ee10:	0800ee6d 	.word	0x0800ee6d
 800ee14:	0800ee85 	.word	0x0800ee85
 800ee18:	0800ee85 	.word	0x0800ee85
 800ee1c:	0800ee85 	.word	0x0800ee85
 800ee20:	0800ee85 	.word	0x0800ee85
 800ee24:	0800ee85 	.word	0x0800ee85
 800ee28:	0800ee85 	.word	0x0800ee85
 800ee2c:	0800ee85 	.word	0x0800ee85
 800ee30:	0800ee75 	.word	0x0800ee75
 800ee34:	0800ee85 	.word	0x0800ee85
 800ee38:	0800ee85 	.word	0x0800ee85
 800ee3c:	0800ee85 	.word	0x0800ee85
 800ee40:	0800ee85 	.word	0x0800ee85
 800ee44:	0800ee85 	.word	0x0800ee85
 800ee48:	0800ee85 	.word	0x0800ee85
 800ee4c:	0800ee85 	.word	0x0800ee85
 800ee50:	0800ee7d 	.word	0x0800ee7d
 800ee54:	2301      	movs	r3, #1
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee5a:	e0bc      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ee5c:	2304      	movs	r3, #4
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee62:	e0b8      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ee64:	2308      	movs	r3, #8
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee6a:	e0b4      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ee6c:	2310      	movs	r3, #16
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee72:	e0b0      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ee74:	2320      	movs	r3, #32
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee7a:	e0ac      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ee7c:	2340      	movs	r3, #64	@ 0x40
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee82:	e0a8      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ee84:	2380      	movs	r3, #128	@ 0x80
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee8a:	e0a4      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a8f      	ldr	r2, [pc, #572]	@ (800f0d0 <UART_SetConfig+0x6a0>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d130      	bne.n	800eef8 <UART_SetConfig+0x4c8>
 800ee96:	4b8d      	ldr	r3, [pc, #564]	@ (800f0cc <UART_SetConfig+0x69c>)
 800ee98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee9a:	f003 0307 	and.w	r3, r3, #7
 800ee9e:	2b05      	cmp	r3, #5
 800eea0:	d826      	bhi.n	800eef0 <UART_SetConfig+0x4c0>
 800eea2:	a201      	add	r2, pc, #4	@ (adr r2, 800eea8 <UART_SetConfig+0x478>)
 800eea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea8:	0800eec1 	.word	0x0800eec1
 800eeac:	0800eec9 	.word	0x0800eec9
 800eeb0:	0800eed1 	.word	0x0800eed1
 800eeb4:	0800eed9 	.word	0x0800eed9
 800eeb8:	0800eee1 	.word	0x0800eee1
 800eebc:	0800eee9 	.word	0x0800eee9
 800eec0:	2300      	movs	r3, #0
 800eec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eec6:	e086      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800eec8:	2304      	movs	r3, #4
 800eeca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eece:	e082      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800eed0:	2308      	movs	r3, #8
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eed6:	e07e      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800eed8:	2310      	movs	r3, #16
 800eeda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eede:	e07a      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800eee0:	2320      	movs	r3, #32
 800eee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eee6:	e076      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800eee8:	2340      	movs	r3, #64	@ 0x40
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeee:	e072      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800eef0:	2380      	movs	r3, #128	@ 0x80
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eef6:	e06e      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4a75      	ldr	r2, [pc, #468]	@ (800f0d4 <UART_SetConfig+0x6a4>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d130      	bne.n	800ef64 <UART_SetConfig+0x534>
 800ef02:	4b72      	ldr	r3, [pc, #456]	@ (800f0cc <UART_SetConfig+0x69c>)
 800ef04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef06:	f003 0307 	and.w	r3, r3, #7
 800ef0a:	2b05      	cmp	r3, #5
 800ef0c:	d826      	bhi.n	800ef5c <UART_SetConfig+0x52c>
 800ef0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef14 <UART_SetConfig+0x4e4>)
 800ef10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef14:	0800ef2d 	.word	0x0800ef2d
 800ef18:	0800ef35 	.word	0x0800ef35
 800ef1c:	0800ef3d 	.word	0x0800ef3d
 800ef20:	0800ef45 	.word	0x0800ef45
 800ef24:	0800ef4d 	.word	0x0800ef4d
 800ef28:	0800ef55 	.word	0x0800ef55
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef32:	e050      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ef34:	2304      	movs	r3, #4
 800ef36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3a:	e04c      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ef3c:	2308      	movs	r3, #8
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef42:	e048      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ef44:	2310      	movs	r3, #16
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef4a:	e044      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ef4c:	2320      	movs	r3, #32
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef52:	e040      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ef54:	2340      	movs	r3, #64	@ 0x40
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5a:	e03c      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ef5c:	2380      	movs	r3, #128	@ 0x80
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef62:	e038      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a5b      	ldr	r2, [pc, #364]	@ (800f0d8 <UART_SetConfig+0x6a8>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d130      	bne.n	800efd0 <UART_SetConfig+0x5a0>
 800ef6e:	4b57      	ldr	r3, [pc, #348]	@ (800f0cc <UART_SetConfig+0x69c>)
 800ef70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef72:	f003 0307 	and.w	r3, r3, #7
 800ef76:	2b05      	cmp	r3, #5
 800ef78:	d826      	bhi.n	800efc8 <UART_SetConfig+0x598>
 800ef7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef80 <UART_SetConfig+0x550>)
 800ef7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef80:	0800ef99 	.word	0x0800ef99
 800ef84:	0800efa1 	.word	0x0800efa1
 800ef88:	0800efa9 	.word	0x0800efa9
 800ef8c:	0800efb1 	.word	0x0800efb1
 800ef90:	0800efb9 	.word	0x0800efb9
 800ef94:	0800efc1 	.word	0x0800efc1
 800ef98:	2302      	movs	r3, #2
 800ef9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef9e:	e01a      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800efa0:	2304      	movs	r3, #4
 800efa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efa6:	e016      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800efa8:	2308      	movs	r3, #8
 800efaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efae:	e012      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800efb0:	2310      	movs	r3, #16
 800efb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efb6:	e00e      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800efb8:	2320      	movs	r3, #32
 800efba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efbe:	e00a      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800efc0:	2340      	movs	r3, #64	@ 0x40
 800efc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efc6:	e006      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800efc8:	2380      	movs	r3, #128	@ 0x80
 800efca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efce:	e002      	b.n	800efd6 <UART_SetConfig+0x5a6>
 800efd0:	2380      	movs	r3, #128	@ 0x80
 800efd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	4a3f      	ldr	r2, [pc, #252]	@ (800f0d8 <UART_SetConfig+0x6a8>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	f040 80f8 	bne.w	800f1d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800efe2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800efe6:	2b20      	cmp	r3, #32
 800efe8:	dc46      	bgt.n	800f078 <UART_SetConfig+0x648>
 800efea:	2b02      	cmp	r3, #2
 800efec:	f2c0 8082 	blt.w	800f0f4 <UART_SetConfig+0x6c4>
 800eff0:	3b02      	subs	r3, #2
 800eff2:	2b1e      	cmp	r3, #30
 800eff4:	d87e      	bhi.n	800f0f4 <UART_SetConfig+0x6c4>
 800eff6:	a201      	add	r2, pc, #4	@ (adr r2, 800effc <UART_SetConfig+0x5cc>)
 800eff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800effc:	0800f07f 	.word	0x0800f07f
 800f000:	0800f0f5 	.word	0x0800f0f5
 800f004:	0800f087 	.word	0x0800f087
 800f008:	0800f0f5 	.word	0x0800f0f5
 800f00c:	0800f0f5 	.word	0x0800f0f5
 800f010:	0800f0f5 	.word	0x0800f0f5
 800f014:	0800f097 	.word	0x0800f097
 800f018:	0800f0f5 	.word	0x0800f0f5
 800f01c:	0800f0f5 	.word	0x0800f0f5
 800f020:	0800f0f5 	.word	0x0800f0f5
 800f024:	0800f0f5 	.word	0x0800f0f5
 800f028:	0800f0f5 	.word	0x0800f0f5
 800f02c:	0800f0f5 	.word	0x0800f0f5
 800f030:	0800f0f5 	.word	0x0800f0f5
 800f034:	0800f0a7 	.word	0x0800f0a7
 800f038:	0800f0f5 	.word	0x0800f0f5
 800f03c:	0800f0f5 	.word	0x0800f0f5
 800f040:	0800f0f5 	.word	0x0800f0f5
 800f044:	0800f0f5 	.word	0x0800f0f5
 800f048:	0800f0f5 	.word	0x0800f0f5
 800f04c:	0800f0f5 	.word	0x0800f0f5
 800f050:	0800f0f5 	.word	0x0800f0f5
 800f054:	0800f0f5 	.word	0x0800f0f5
 800f058:	0800f0f5 	.word	0x0800f0f5
 800f05c:	0800f0f5 	.word	0x0800f0f5
 800f060:	0800f0f5 	.word	0x0800f0f5
 800f064:	0800f0f5 	.word	0x0800f0f5
 800f068:	0800f0f5 	.word	0x0800f0f5
 800f06c:	0800f0f5 	.word	0x0800f0f5
 800f070:	0800f0f5 	.word	0x0800f0f5
 800f074:	0800f0e7 	.word	0x0800f0e7
 800f078:	2b40      	cmp	r3, #64	@ 0x40
 800f07a:	d037      	beq.n	800f0ec <UART_SetConfig+0x6bc>
 800f07c:	e03a      	b.n	800f0f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f07e:	f7fd fa3b 	bl	800c4f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f082:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f084:	e03c      	b.n	800f100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fd fa4a 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f094:	e034      	b.n	800f100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f096:	f107 0318 	add.w	r3, r7, #24
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fd fb96 	bl	800c7cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0a4:	e02c      	b.n	800f100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0a6:	4b09      	ldr	r3, [pc, #36]	@ (800f0cc <UART_SetConfig+0x69c>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f003 0320 	and.w	r3, r3, #32
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d016      	beq.n	800f0e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f0b2:	4b06      	ldr	r3, [pc, #24]	@ (800f0cc <UART_SetConfig+0x69c>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	08db      	lsrs	r3, r3, #3
 800f0b8:	f003 0303 	and.w	r3, r3, #3
 800f0bc:	4a07      	ldr	r2, [pc, #28]	@ (800f0dc <UART_SetConfig+0x6ac>)
 800f0be:	fa22 f303 	lsr.w	r3, r2, r3
 800f0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0c4:	e01c      	b.n	800f100 <UART_SetConfig+0x6d0>
 800f0c6:	bf00      	nop
 800f0c8:	40011400 	.word	0x40011400
 800f0cc:	58024400 	.word	0x58024400
 800f0d0:	40007800 	.word	0x40007800
 800f0d4:	40007c00 	.word	0x40007c00
 800f0d8:	58000c00 	.word	0x58000c00
 800f0dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f0e0:	4b9d      	ldr	r3, [pc, #628]	@ (800f358 <UART_SetConfig+0x928>)
 800f0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0e4:	e00c      	b.n	800f100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0e6:	4b9d      	ldr	r3, [pc, #628]	@ (800f35c <UART_SetConfig+0x92c>)
 800f0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0ea:	e009      	b.n	800f100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0f2:	e005      	b.n	800f100 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f0fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f102:	2b00      	cmp	r3, #0
 800f104:	f000 81de 	beq.w	800f4c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f10c:	4a94      	ldr	r2, [pc, #592]	@ (800f360 <UART_SetConfig+0x930>)
 800f10e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f112:	461a      	mov	r2, r3
 800f114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f116:	fbb3 f3f2 	udiv	r3, r3, r2
 800f11a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	685a      	ldr	r2, [r3, #4]
 800f120:	4613      	mov	r3, r2
 800f122:	005b      	lsls	r3, r3, #1
 800f124:	4413      	add	r3, r2
 800f126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f128:	429a      	cmp	r2, r3
 800f12a:	d305      	bcc.n	800f138 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f134:	429a      	cmp	r2, r3
 800f136:	d903      	bls.n	800f140 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f138:	2301      	movs	r3, #1
 800f13a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f13e:	e1c1      	b.n	800f4c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f142:	2200      	movs	r2, #0
 800f144:	60bb      	str	r3, [r7, #8]
 800f146:	60fa      	str	r2, [r7, #12]
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f14c:	4a84      	ldr	r2, [pc, #528]	@ (800f360 <UART_SetConfig+0x930>)
 800f14e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f152:	b29b      	uxth	r3, r3
 800f154:	2200      	movs	r2, #0
 800f156:	603b      	str	r3, [r7, #0]
 800f158:	607a      	str	r2, [r7, #4]
 800f15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f15e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f162:	f7f1 f915 	bl	8000390 <__aeabi_uldivmod>
 800f166:	4602      	mov	r2, r0
 800f168:	460b      	mov	r3, r1
 800f16a:	4610      	mov	r0, r2
 800f16c:	4619      	mov	r1, r3
 800f16e:	f04f 0200 	mov.w	r2, #0
 800f172:	f04f 0300 	mov.w	r3, #0
 800f176:	020b      	lsls	r3, r1, #8
 800f178:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f17c:	0202      	lsls	r2, r0, #8
 800f17e:	6979      	ldr	r1, [r7, #20]
 800f180:	6849      	ldr	r1, [r1, #4]
 800f182:	0849      	lsrs	r1, r1, #1
 800f184:	2000      	movs	r0, #0
 800f186:	460c      	mov	r4, r1
 800f188:	4605      	mov	r5, r0
 800f18a:	eb12 0804 	adds.w	r8, r2, r4
 800f18e:	eb43 0905 	adc.w	r9, r3, r5
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	469a      	mov	sl, r3
 800f19a:	4693      	mov	fp, r2
 800f19c:	4652      	mov	r2, sl
 800f19e:	465b      	mov	r3, fp
 800f1a0:	4640      	mov	r0, r8
 800f1a2:	4649      	mov	r1, r9
 800f1a4:	f7f1 f8f4 	bl	8000390 <__aeabi_uldivmod>
 800f1a8:	4602      	mov	r2, r0
 800f1aa:	460b      	mov	r3, r1
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1b6:	d308      	bcc.n	800f1ca <UART_SetConfig+0x79a>
 800f1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1be:	d204      	bcs.n	800f1ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1c6:	60da      	str	r2, [r3, #12]
 800f1c8:	e17c      	b.n	800f4c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f1d0:	e178      	b.n	800f4c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	69db      	ldr	r3, [r3, #28]
 800f1d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1da:	f040 80c5 	bne.w	800f368 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f1de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f1e2:	2b20      	cmp	r3, #32
 800f1e4:	dc48      	bgt.n	800f278 <UART_SetConfig+0x848>
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	db7b      	blt.n	800f2e2 <UART_SetConfig+0x8b2>
 800f1ea:	2b20      	cmp	r3, #32
 800f1ec:	d879      	bhi.n	800f2e2 <UART_SetConfig+0x8b2>
 800f1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f1f4 <UART_SetConfig+0x7c4>)
 800f1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1f4:	0800f27f 	.word	0x0800f27f
 800f1f8:	0800f287 	.word	0x0800f287
 800f1fc:	0800f2e3 	.word	0x0800f2e3
 800f200:	0800f2e3 	.word	0x0800f2e3
 800f204:	0800f28f 	.word	0x0800f28f
 800f208:	0800f2e3 	.word	0x0800f2e3
 800f20c:	0800f2e3 	.word	0x0800f2e3
 800f210:	0800f2e3 	.word	0x0800f2e3
 800f214:	0800f29f 	.word	0x0800f29f
 800f218:	0800f2e3 	.word	0x0800f2e3
 800f21c:	0800f2e3 	.word	0x0800f2e3
 800f220:	0800f2e3 	.word	0x0800f2e3
 800f224:	0800f2e3 	.word	0x0800f2e3
 800f228:	0800f2e3 	.word	0x0800f2e3
 800f22c:	0800f2e3 	.word	0x0800f2e3
 800f230:	0800f2e3 	.word	0x0800f2e3
 800f234:	0800f2af 	.word	0x0800f2af
 800f238:	0800f2e3 	.word	0x0800f2e3
 800f23c:	0800f2e3 	.word	0x0800f2e3
 800f240:	0800f2e3 	.word	0x0800f2e3
 800f244:	0800f2e3 	.word	0x0800f2e3
 800f248:	0800f2e3 	.word	0x0800f2e3
 800f24c:	0800f2e3 	.word	0x0800f2e3
 800f250:	0800f2e3 	.word	0x0800f2e3
 800f254:	0800f2e3 	.word	0x0800f2e3
 800f258:	0800f2e3 	.word	0x0800f2e3
 800f25c:	0800f2e3 	.word	0x0800f2e3
 800f260:	0800f2e3 	.word	0x0800f2e3
 800f264:	0800f2e3 	.word	0x0800f2e3
 800f268:	0800f2e3 	.word	0x0800f2e3
 800f26c:	0800f2e3 	.word	0x0800f2e3
 800f270:	0800f2e3 	.word	0x0800f2e3
 800f274:	0800f2d5 	.word	0x0800f2d5
 800f278:	2b40      	cmp	r3, #64	@ 0x40
 800f27a:	d02e      	beq.n	800f2da <UART_SetConfig+0x8aa>
 800f27c:	e031      	b.n	800f2e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f27e:	f7fb f985 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800f282:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f284:	e033      	b.n	800f2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f286:	f7fb f997 	bl	800a5b8 <HAL_RCC_GetPCLK2Freq>
 800f28a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f28c:	e02f      	b.n	800f2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f28e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f292:	4618      	mov	r0, r3
 800f294:	f7fd f946 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f29c:	e027      	b.n	800f2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f29e:	f107 0318 	add.w	r3, r7, #24
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7fd fa92 	bl	800c7cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2ac:	e01f      	b.n	800f2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2ae:	4b2d      	ldr	r3, [pc, #180]	@ (800f364 <UART_SetConfig+0x934>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f003 0320 	and.w	r3, r3, #32
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d009      	beq.n	800f2ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f2ba:	4b2a      	ldr	r3, [pc, #168]	@ (800f364 <UART_SetConfig+0x934>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	08db      	lsrs	r3, r3, #3
 800f2c0:	f003 0303 	and.w	r3, r3, #3
 800f2c4:	4a24      	ldr	r2, [pc, #144]	@ (800f358 <UART_SetConfig+0x928>)
 800f2c6:	fa22 f303 	lsr.w	r3, r2, r3
 800f2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f2cc:	e00f      	b.n	800f2ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f2ce:	4b22      	ldr	r3, [pc, #136]	@ (800f358 <UART_SetConfig+0x928>)
 800f2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2d2:	e00c      	b.n	800f2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2d4:	4b21      	ldr	r3, [pc, #132]	@ (800f35c <UART_SetConfig+0x92c>)
 800f2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2d8:	e009      	b.n	800f2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2e0:	e005      	b.n	800f2ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f2ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f2ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f000 80e7 	beq.w	800f4c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2fa:	4a19      	ldr	r2, [pc, #100]	@ (800f360 <UART_SetConfig+0x930>)
 800f2fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f300:	461a      	mov	r2, r3
 800f302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f304:	fbb3 f3f2 	udiv	r3, r3, r2
 800f308:	005a      	lsls	r2, r3, #1
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	085b      	lsrs	r3, r3, #1
 800f310:	441a      	add	r2, r3
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	fbb2 f3f3 	udiv	r3, r2, r3
 800f31a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f31e:	2b0f      	cmp	r3, #15
 800f320:	d916      	bls.n	800f350 <UART_SetConfig+0x920>
 800f322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f328:	d212      	bcs.n	800f350 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	f023 030f 	bic.w	r3, r3, #15
 800f332:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f336:	085b      	lsrs	r3, r3, #1
 800f338:	b29b      	uxth	r3, r3
 800f33a:	f003 0307 	and.w	r3, r3, #7
 800f33e:	b29a      	uxth	r2, r3
 800f340:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f342:	4313      	orrs	r3, r2
 800f344:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f34c:	60da      	str	r2, [r3, #12]
 800f34e:	e0b9      	b.n	800f4c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f350:	2301      	movs	r3, #1
 800f352:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f356:	e0b5      	b.n	800f4c4 <UART_SetConfig+0xa94>
 800f358:	03d09000 	.word	0x03d09000
 800f35c:	003d0900 	.word	0x003d0900
 800f360:	08015c6c 	.word	0x08015c6c
 800f364:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f368:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f36c:	2b20      	cmp	r3, #32
 800f36e:	dc49      	bgt.n	800f404 <UART_SetConfig+0x9d4>
 800f370:	2b00      	cmp	r3, #0
 800f372:	db7c      	blt.n	800f46e <UART_SetConfig+0xa3e>
 800f374:	2b20      	cmp	r3, #32
 800f376:	d87a      	bhi.n	800f46e <UART_SetConfig+0xa3e>
 800f378:	a201      	add	r2, pc, #4	@ (adr r2, 800f380 <UART_SetConfig+0x950>)
 800f37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f37e:	bf00      	nop
 800f380:	0800f40b 	.word	0x0800f40b
 800f384:	0800f413 	.word	0x0800f413
 800f388:	0800f46f 	.word	0x0800f46f
 800f38c:	0800f46f 	.word	0x0800f46f
 800f390:	0800f41b 	.word	0x0800f41b
 800f394:	0800f46f 	.word	0x0800f46f
 800f398:	0800f46f 	.word	0x0800f46f
 800f39c:	0800f46f 	.word	0x0800f46f
 800f3a0:	0800f42b 	.word	0x0800f42b
 800f3a4:	0800f46f 	.word	0x0800f46f
 800f3a8:	0800f46f 	.word	0x0800f46f
 800f3ac:	0800f46f 	.word	0x0800f46f
 800f3b0:	0800f46f 	.word	0x0800f46f
 800f3b4:	0800f46f 	.word	0x0800f46f
 800f3b8:	0800f46f 	.word	0x0800f46f
 800f3bc:	0800f46f 	.word	0x0800f46f
 800f3c0:	0800f43b 	.word	0x0800f43b
 800f3c4:	0800f46f 	.word	0x0800f46f
 800f3c8:	0800f46f 	.word	0x0800f46f
 800f3cc:	0800f46f 	.word	0x0800f46f
 800f3d0:	0800f46f 	.word	0x0800f46f
 800f3d4:	0800f46f 	.word	0x0800f46f
 800f3d8:	0800f46f 	.word	0x0800f46f
 800f3dc:	0800f46f 	.word	0x0800f46f
 800f3e0:	0800f46f 	.word	0x0800f46f
 800f3e4:	0800f46f 	.word	0x0800f46f
 800f3e8:	0800f46f 	.word	0x0800f46f
 800f3ec:	0800f46f 	.word	0x0800f46f
 800f3f0:	0800f46f 	.word	0x0800f46f
 800f3f4:	0800f46f 	.word	0x0800f46f
 800f3f8:	0800f46f 	.word	0x0800f46f
 800f3fc:	0800f46f 	.word	0x0800f46f
 800f400:	0800f461 	.word	0x0800f461
 800f404:	2b40      	cmp	r3, #64	@ 0x40
 800f406:	d02e      	beq.n	800f466 <UART_SetConfig+0xa36>
 800f408:	e031      	b.n	800f46e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f40a:	f7fb f8bf 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 800f40e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f410:	e033      	b.n	800f47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f412:	f7fb f8d1 	bl	800a5b8 <HAL_RCC_GetPCLK2Freq>
 800f416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f418:	e02f      	b.n	800f47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f41a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fd f880 	bl	800c524 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f428:	e027      	b.n	800f47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f42a:	f107 0318 	add.w	r3, r7, #24
 800f42e:	4618      	mov	r0, r3
 800f430:	f7fd f9cc 	bl	800c7cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f438:	e01f      	b.n	800f47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f43a:	4b2d      	ldr	r3, [pc, #180]	@ (800f4f0 <UART_SetConfig+0xac0>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f003 0320 	and.w	r3, r3, #32
 800f442:	2b00      	cmp	r3, #0
 800f444:	d009      	beq.n	800f45a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f446:	4b2a      	ldr	r3, [pc, #168]	@ (800f4f0 <UART_SetConfig+0xac0>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	08db      	lsrs	r3, r3, #3
 800f44c:	f003 0303 	and.w	r3, r3, #3
 800f450:	4a28      	ldr	r2, [pc, #160]	@ (800f4f4 <UART_SetConfig+0xac4>)
 800f452:	fa22 f303 	lsr.w	r3, r2, r3
 800f456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f458:	e00f      	b.n	800f47a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f45a:	4b26      	ldr	r3, [pc, #152]	@ (800f4f4 <UART_SetConfig+0xac4>)
 800f45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f45e:	e00c      	b.n	800f47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f460:	4b25      	ldr	r3, [pc, #148]	@ (800f4f8 <UART_SetConfig+0xac8>)
 800f462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f464:	e009      	b.n	800f47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f46c:	e005      	b.n	800f47a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f46e:	2300      	movs	r3, #0
 800f470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f472:	2301      	movs	r3, #1
 800f474:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f478:	bf00      	nop
    }

    if (pclk != 0U)
 800f47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d021      	beq.n	800f4c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f484:	4a1d      	ldr	r2, [pc, #116]	@ (800f4fc <UART_SetConfig+0xacc>)
 800f486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f48a:	461a      	mov	r2, r3
 800f48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f48e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	085b      	lsrs	r3, r3, #1
 800f498:	441a      	add	r2, r3
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a6:	2b0f      	cmp	r3, #15
 800f4a8:	d909      	bls.n	800f4be <UART_SetConfig+0xa8e>
 800f4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4b0:	d205      	bcs.n	800f4be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4b4:	b29a      	uxth	r2, r3
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	60da      	str	r2, [r3, #12]
 800f4bc:	e002      	b.n	800f4c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f4e0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3748      	adds	r7, #72	@ 0x48
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f4ee:	bf00      	nop
 800f4f0:	58024400 	.word	0x58024400
 800f4f4:	03d09000 	.word	0x03d09000
 800f4f8:	003d0900 	.word	0x003d0900
 800f4fc:	08015c6c 	.word	0x08015c6c

0800f500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f50c:	f003 0301 	and.w	r3, r3, #1
 800f510:	2b00      	cmp	r3, #0
 800f512:	d00a      	beq.n	800f52a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	430a      	orrs	r2, r1
 800f528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f52e:	f003 0302 	and.w	r3, r3, #2
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00a      	beq.n	800f54c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	430a      	orrs	r2, r1
 800f54a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f550:	f003 0304 	and.w	r3, r3, #4
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00a      	beq.n	800f56e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	430a      	orrs	r2, r1
 800f56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f572:	f003 0308 	and.w	r3, r3, #8
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00a      	beq.n	800f590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	430a      	orrs	r2, r1
 800f58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f594:	f003 0310 	and.w	r3, r3, #16
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00a      	beq.n	800f5b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	430a      	orrs	r2, r1
 800f5b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5b6:	f003 0320 	and.w	r3, r3, #32
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d00a      	beq.n	800f5d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	430a      	orrs	r2, r1
 800f5d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d01a      	beq.n	800f616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	430a      	orrs	r2, r1
 800f5f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5fe:	d10a      	bne.n	800f616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	430a      	orrs	r2, r1
 800f614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f61a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00a      	beq.n	800f638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	430a      	orrs	r2, r1
 800f636:	605a      	str	r2, [r3, #4]
  }
}
 800f638:	bf00      	nop
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b098      	sub	sp, #96	@ 0x60
 800f648:	af02      	add	r7, sp, #8
 800f64a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f654:	f7f4 f8b6 	bl	80037c4 <HAL_GetTick>
 800f658:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f003 0308 	and.w	r3, r3, #8
 800f664:	2b08      	cmp	r3, #8
 800f666:	d12f      	bne.n	800f6c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f668:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f66c:	9300      	str	r3, [sp, #0]
 800f66e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f670:	2200      	movs	r2, #0
 800f672:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f000 f88e 	bl	800f798 <UART_WaitOnFlagUntilTimeout>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d022      	beq.n	800f6c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f68a:	e853 3f00 	ldrex	r3, [r3]
 800f68e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f696:	653b      	str	r3, [r7, #80]	@ 0x50
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	461a      	mov	r2, r3
 800f69e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f6a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6a8:	e841 2300 	strex	r3, r2, [r1]
 800f6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1e6      	bne.n	800f682 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2220      	movs	r2, #32
 800f6b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f6c4:	2303      	movs	r3, #3
 800f6c6:	e063      	b.n	800f790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f003 0304 	and.w	r3, r3, #4
 800f6d2:	2b04      	cmp	r3, #4
 800f6d4:	d149      	bne.n	800f76a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f6d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f6da:	9300      	str	r3, [sp, #0]
 800f6dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 f857 	bl	800f798 <UART_WaitOnFlagUntilTimeout>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d03c      	beq.n	800f76a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6f8:	e853 3f00 	ldrex	r3, [r3]
 800f6fc:	623b      	str	r3, [r7, #32]
   return(result);
 800f6fe:	6a3b      	ldr	r3, [r7, #32]
 800f700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f704:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	461a      	mov	r2, r3
 800f70c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f70e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f710:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f716:	e841 2300 	strex	r3, r2, [r1]
 800f71a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d1e6      	bne.n	800f6f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	3308      	adds	r3, #8
 800f728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	e853 3f00 	ldrex	r3, [r3]
 800f730:	60fb      	str	r3, [r7, #12]
   return(result);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f023 0301 	bic.w	r3, r3, #1
 800f738:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	3308      	adds	r3, #8
 800f740:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f742:	61fa      	str	r2, [r7, #28]
 800f744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f746:	69b9      	ldr	r1, [r7, #24]
 800f748:	69fa      	ldr	r2, [r7, #28]
 800f74a:	e841 2300 	strex	r3, r2, [r1]
 800f74e:	617b      	str	r3, [r7, #20]
   return(result);
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d1e5      	bne.n	800f722 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2220      	movs	r2, #32
 800f75a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f766:	2303      	movs	r3, #3
 800f768:	e012      	b.n	800f790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2220      	movs	r2, #32
 800f76e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2220      	movs	r2, #32
 800f776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2200      	movs	r2, #0
 800f77e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2200      	movs	r2, #0
 800f784:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2200      	movs	r2, #0
 800f78a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f78e:	2300      	movs	r3, #0
}
 800f790:	4618      	mov	r0, r3
 800f792:	3758      	adds	r7, #88	@ 0x58
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	60f8      	str	r0, [r7, #12]
 800f7a0:	60b9      	str	r1, [r7, #8]
 800f7a2:	603b      	str	r3, [r7, #0]
 800f7a4:	4613      	mov	r3, r2
 800f7a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7a8:	e049      	b.n	800f83e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7aa:	69bb      	ldr	r3, [r7, #24]
 800f7ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f7b0:	d045      	beq.n	800f83e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7b2:	f7f4 f807 	bl	80037c4 <HAL_GetTick>
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	1ad3      	subs	r3, r2, r3
 800f7bc:	69ba      	ldr	r2, [r7, #24]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d302      	bcc.n	800f7c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d101      	bne.n	800f7cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f7c8:	2303      	movs	r3, #3
 800f7ca:	e048      	b.n	800f85e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f003 0304 	and.w	r3, r3, #4
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d031      	beq.n	800f83e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	69db      	ldr	r3, [r3, #28]
 800f7e0:	f003 0308 	and.w	r3, r3, #8
 800f7e4:	2b08      	cmp	r3, #8
 800f7e6:	d110      	bne.n	800f80a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2208      	movs	r2, #8
 800f7ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f000 f839 	bl	800f868 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2208      	movs	r2, #8
 800f7fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2200      	movs	r2, #0
 800f802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800f806:	2301      	movs	r3, #1
 800f808:	e029      	b.n	800f85e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	69db      	ldr	r3, [r3, #28]
 800f810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f818:	d111      	bne.n	800f83e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f822:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f824:	68f8      	ldr	r0, [r7, #12]
 800f826:	f000 f81f 	bl	800f868 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2220      	movs	r2, #32
 800f82e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2200      	movs	r2, #0
 800f836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f83a:	2303      	movs	r3, #3
 800f83c:	e00f      	b.n	800f85e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	69da      	ldr	r2, [r3, #28]
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	4013      	ands	r3, r2
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	bf0c      	ite	eq
 800f84e:	2301      	moveq	r3, #1
 800f850:	2300      	movne	r3, #0
 800f852:	b2db      	uxtb	r3, r3
 800f854:	461a      	mov	r2, r3
 800f856:	79fb      	ldrb	r3, [r7, #7]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d0a6      	beq.n	800f7aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f85c:	2300      	movs	r3, #0
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
	...

0800f868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f868:	b480      	push	{r7}
 800f86a:	b095      	sub	sp, #84	@ 0x54
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f878:	e853 3f00 	ldrex	r3, [r3]
 800f87c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f880:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f884:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	461a      	mov	r2, r3
 800f88c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f88e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f890:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f892:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f894:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f896:	e841 2300 	strex	r3, r2, [r1]
 800f89a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d1e6      	bne.n	800f870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	3308      	adds	r3, #8
 800f8a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8aa:	6a3b      	ldr	r3, [r7, #32]
 800f8ac:	e853 3f00 	ldrex	r3, [r3]
 800f8b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f8b2:	69fa      	ldr	r2, [r7, #28]
 800f8b4:	4b1e      	ldr	r3, [pc, #120]	@ (800f930 <UART_EndRxTransfer+0xc8>)
 800f8b6:	4013      	ands	r3, r2
 800f8b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	3308      	adds	r3, #8
 800f8c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f8c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8ca:	e841 2300 	strex	r3, r2, [r1]
 800f8ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1e5      	bne.n	800f8a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d118      	bne.n	800f910 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	e853 3f00 	ldrex	r3, [r3]
 800f8ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	f023 0310 	bic.w	r3, r3, #16
 800f8f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8fc:	61bb      	str	r3, [r7, #24]
 800f8fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f900:	6979      	ldr	r1, [r7, #20]
 800f902:	69ba      	ldr	r2, [r7, #24]
 800f904:	e841 2300 	strex	r3, r2, [r1]
 800f908:	613b      	str	r3, [r7, #16]
   return(result);
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d1e6      	bne.n	800f8de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2220      	movs	r2, #32
 800f914:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f924:	bf00      	nop
 800f926:	3754      	adds	r7, #84	@ 0x54
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr
 800f930:	effffffe 	.word	0xeffffffe

0800f934 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b084      	sub	sp, #16
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2200      	movs	r2, #0
 800f946:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	2200      	movs	r2, #0
 800f94e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	f7ff f856 	bl	800ea04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f958:	bf00      	nop
 800f95a:	3710      	adds	r7, #16
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b088      	sub	sp, #32
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	e853 3f00 	ldrex	r3, [r3]
 800f974:	60bb      	str	r3, [r7, #8]
   return(result);
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f97c:	61fb      	str	r3, [r7, #28]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	461a      	mov	r2, r3
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	61bb      	str	r3, [r7, #24]
 800f988:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f98a:	6979      	ldr	r1, [r7, #20]
 800f98c:	69ba      	ldr	r2, [r7, #24]
 800f98e:	e841 2300 	strex	r3, r2, [r1]
 800f992:	613b      	str	r3, [r7, #16]
   return(result);
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d1e6      	bne.n	800f968 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2220      	movs	r2, #32
 800f99e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7ff f821 	bl	800e9f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9ae:	bf00      	nop
 800f9b0:	3720      	adds	r7, #32
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f9b6:	b480      	push	{r7}
 800f9b8:	b083      	sub	sp, #12
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f9be:	bf00      	nop
 800f9c0:	370c      	adds	r7, #12
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr

0800f9ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f9ca:	b480      	push	{r7}
 800f9cc:	b083      	sub	sp, #12
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f9d2:	bf00      	nop
 800f9d4:	370c      	adds	r7, #12
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr

0800f9de <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f9de:	b480      	push	{r7}
 800f9e0:	b083      	sub	sp, #12
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f9e6:	bf00      	nop
 800f9e8:	370c      	adds	r7, #12
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f0:	4770      	bx	lr

0800f9f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f9f2:	b480      	push	{r7}
 800f9f4:	b085      	sub	sp, #20
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d101      	bne.n	800fa08 <HAL_UARTEx_DisableFifoMode+0x16>
 800fa04:	2302      	movs	r3, #2
 800fa06:	e027      	b.n	800fa58 <HAL_UARTEx_DisableFifoMode+0x66>
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2224      	movs	r2, #36	@ 0x24
 800fa14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f022 0201 	bic.w	r2, r2, #1
 800fa2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fa36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2220      	movs	r2, #32
 800fa4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2200      	movs	r2, #0
 800fa52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa56:	2300      	movs	r3, #0
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3714      	adds	r7, #20
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d101      	bne.n	800fa7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fa78:	2302      	movs	r3, #2
 800fa7a:	e02d      	b.n	800fad8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2224      	movs	r2, #36	@ 0x24
 800fa88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f022 0201 	bic.w	r2, r2, #1
 800faa2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	689b      	ldr	r3, [r3, #8]
 800faaa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	683a      	ldr	r2, [r7, #0]
 800fab4:	430a      	orrs	r2, r1
 800fab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 f84f 	bl	800fb5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	68fa      	ldr	r2, [r7, #12]
 800fac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2220      	movs	r2, #32
 800faca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2200      	movs	r2, #0
 800fad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fad6:	2300      	movs	r3, #0
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3710      	adds	r7, #16
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d101      	bne.n	800faf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800faf4:	2302      	movs	r3, #2
 800faf6:	e02d      	b.n	800fb54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2201      	movs	r2, #1
 800fafc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2224      	movs	r2, #36	@ 0x24
 800fb04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f022 0201 	bic.w	r2, r2, #1
 800fb1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	689b      	ldr	r3, [r3, #8]
 800fb26:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	683a      	ldr	r2, [r7, #0]
 800fb30:	430a      	orrs	r2, r1
 800fb32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 f811 	bl	800fb5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	68fa      	ldr	r2, [r7, #12]
 800fb40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2220      	movs	r2, #32
 800fb46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb52:	2300      	movs	r3, #0
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3710      	adds	r7, #16
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b085      	sub	sp, #20
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d108      	bne.n	800fb7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2201      	movs	r2, #1
 800fb78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fb7c:	e031      	b.n	800fbe2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fb7e:	2310      	movs	r3, #16
 800fb80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fb82:	2310      	movs	r3, #16
 800fb84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	689b      	ldr	r3, [r3, #8]
 800fb8c:	0e5b      	lsrs	r3, r3, #25
 800fb8e:	b2db      	uxtb	r3, r3
 800fb90:	f003 0307 	and.w	r3, r3, #7
 800fb94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	689b      	ldr	r3, [r3, #8]
 800fb9c:	0f5b      	lsrs	r3, r3, #29
 800fb9e:	b2db      	uxtb	r3, r3
 800fba0:	f003 0307 	and.w	r3, r3, #7
 800fba4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fba6:	7bbb      	ldrb	r3, [r7, #14]
 800fba8:	7b3a      	ldrb	r2, [r7, #12]
 800fbaa:	4911      	ldr	r1, [pc, #68]	@ (800fbf0 <UARTEx_SetNbDataToProcess+0x94>)
 800fbac:	5c8a      	ldrb	r2, [r1, r2]
 800fbae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fbb2:	7b3a      	ldrb	r2, [r7, #12]
 800fbb4:	490f      	ldr	r1, [pc, #60]	@ (800fbf4 <UARTEx_SetNbDataToProcess+0x98>)
 800fbb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fbb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbbc:	b29a      	uxth	r2, r3
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbc4:	7bfb      	ldrb	r3, [r7, #15]
 800fbc6:	7b7a      	ldrb	r2, [r7, #13]
 800fbc8:	4909      	ldr	r1, [pc, #36]	@ (800fbf0 <UARTEx_SetNbDataToProcess+0x94>)
 800fbca:	5c8a      	ldrb	r2, [r1, r2]
 800fbcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fbd0:	7b7a      	ldrb	r2, [r7, #13]
 800fbd2:	4908      	ldr	r1, [pc, #32]	@ (800fbf4 <UARTEx_SetNbDataToProcess+0x98>)
 800fbd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbd6:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbda:	b29a      	uxth	r2, r3
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fbe2:	bf00      	nop
 800fbe4:	3714      	adds	r7, #20
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbec:	4770      	bx	lr
 800fbee:	bf00      	nop
 800fbf0:	08015c84 	.word	0x08015c84
 800fbf4:	08015c8c 	.word	0x08015c8c

0800fbf8 <__sprint_r>:
 800fbf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfc:	6893      	ldr	r3, [r2, #8]
 800fbfe:	4680      	mov	r8, r0
 800fc00:	460e      	mov	r6, r1
 800fc02:	4614      	mov	r4, r2
 800fc04:	b343      	cbz	r3, 800fc58 <__sprint_r+0x60>
 800fc06:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800fc08:	049d      	lsls	r5, r3, #18
 800fc0a:	d522      	bpl.n	800fc52 <__sprint_r+0x5a>
 800fc0c:	6815      	ldr	r5, [r2, #0]
 800fc0e:	68a0      	ldr	r0, [r4, #8]
 800fc10:	3508      	adds	r5, #8
 800fc12:	b928      	cbnz	r0, 800fc20 <__sprint_r+0x28>
 800fc14:	2300      	movs	r3, #0
 800fc16:	60a3      	str	r3, [r4, #8]
 800fc18:	2300      	movs	r3, #0
 800fc1a:	6063      	str	r3, [r4, #4]
 800fc1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc20:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800fc24:	f04f 0900 	mov.w	r9, #0
 800fc28:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800fc2c:	45ca      	cmp	sl, r9
 800fc2e:	dc05      	bgt.n	800fc3c <__sprint_r+0x44>
 800fc30:	68a3      	ldr	r3, [r4, #8]
 800fc32:	f027 0703 	bic.w	r7, r7, #3
 800fc36:	1bdb      	subs	r3, r3, r7
 800fc38:	60a3      	str	r3, [r4, #8]
 800fc3a:	e7e8      	b.n	800fc0e <__sprint_r+0x16>
 800fc3c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800fc40:	4632      	mov	r2, r6
 800fc42:	4640      	mov	r0, r8
 800fc44:	f001 f845 	bl	8010cd2 <_fputwc_r>
 800fc48:	1c43      	adds	r3, r0, #1
 800fc4a:	d0e3      	beq.n	800fc14 <__sprint_r+0x1c>
 800fc4c:	f109 0901 	add.w	r9, r9, #1
 800fc50:	e7ec      	b.n	800fc2c <__sprint_r+0x34>
 800fc52:	f000 fe3d 	bl	80108d0 <__sfvwrite_r>
 800fc56:	e7dd      	b.n	800fc14 <__sprint_r+0x1c>
 800fc58:	4618      	mov	r0, r3
 800fc5a:	e7dd      	b.n	800fc18 <__sprint_r+0x20>

0800fc5c <_vfiprintf_r>:
 800fc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc60:	b0bb      	sub	sp, #236	@ 0xec
 800fc62:	460f      	mov	r7, r1
 800fc64:	4693      	mov	fp, r2
 800fc66:	461c      	mov	r4, r3
 800fc68:	461d      	mov	r5, r3
 800fc6a:	9000      	str	r0, [sp, #0]
 800fc6c:	b118      	cbz	r0, 800fc76 <_vfiprintf_r+0x1a>
 800fc6e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800fc70:	b90b      	cbnz	r3, 800fc76 <_vfiprintf_r+0x1a>
 800fc72:	f000 fe15 	bl	80108a0 <__sinit>
 800fc76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc78:	07db      	lsls	r3, r3, #31
 800fc7a:	d405      	bmi.n	800fc88 <_vfiprintf_r+0x2c>
 800fc7c:	89bb      	ldrh	r3, [r7, #12]
 800fc7e:	059e      	lsls	r6, r3, #22
 800fc80:	d402      	bmi.n	800fc88 <_vfiprintf_r+0x2c>
 800fc82:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fc84:	f001 f8ba 	bl	8010dfc <__retarget_lock_acquire_recursive>
 800fc88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fc8c:	0498      	lsls	r0, r3, #18
 800fc8e:	d406      	bmi.n	800fc9e <_vfiprintf_r+0x42>
 800fc90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fc94:	81bb      	strh	r3, [r7, #12]
 800fc96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fc9c:	667b      	str	r3, [r7, #100]	@ 0x64
 800fc9e:	89bb      	ldrh	r3, [r7, #12]
 800fca0:	0719      	lsls	r1, r3, #28
 800fca2:	d501      	bpl.n	800fca8 <_vfiprintf_r+0x4c>
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	b9ab      	cbnz	r3, 800fcd4 <_vfiprintf_r+0x78>
 800fca8:	9800      	ldr	r0, [sp, #0]
 800fcaa:	4639      	mov	r1, r7
 800fcac:	f000 ff7a 	bl	8010ba4 <__swsetup_r>
 800fcb0:	b180      	cbz	r0, 800fcd4 <_vfiprintf_r+0x78>
 800fcb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fcb4:	07da      	lsls	r2, r3, #31
 800fcb6:	d506      	bpl.n	800fcc6 <_vfiprintf_r+0x6a>
 800fcb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fcbc:	9303      	str	r3, [sp, #12]
 800fcbe:	9803      	ldr	r0, [sp, #12]
 800fcc0:	b03b      	add	sp, #236	@ 0xec
 800fcc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcc6:	89bb      	ldrh	r3, [r7, #12]
 800fcc8:	059b      	lsls	r3, r3, #22
 800fcca:	d4f5      	bmi.n	800fcb8 <_vfiprintf_r+0x5c>
 800fccc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fcce:	f001 f896 	bl	8010dfe <__retarget_lock_release_recursive>
 800fcd2:	e7f1      	b.n	800fcb8 <_vfiprintf_r+0x5c>
 800fcd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fcd8:	f003 021a 	and.w	r2, r3, #26
 800fcdc:	2a0a      	cmp	r2, #10
 800fcde:	d114      	bne.n	800fd0a <_vfiprintf_r+0xae>
 800fce0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fce4:	2a00      	cmp	r2, #0
 800fce6:	db10      	blt.n	800fd0a <_vfiprintf_r+0xae>
 800fce8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fcea:	07d6      	lsls	r6, r2, #31
 800fcec:	d404      	bmi.n	800fcf8 <_vfiprintf_r+0x9c>
 800fcee:	059d      	lsls	r5, r3, #22
 800fcf0:	d402      	bmi.n	800fcf8 <_vfiprintf_r+0x9c>
 800fcf2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fcf4:	f001 f883 	bl	8010dfe <__retarget_lock_release_recursive>
 800fcf8:	9800      	ldr	r0, [sp, #0]
 800fcfa:	4623      	mov	r3, r4
 800fcfc:	465a      	mov	r2, fp
 800fcfe:	4639      	mov	r1, r7
 800fd00:	b03b      	add	sp, #236	@ 0xec
 800fd02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd06:	f000 bc31 	b.w	801056c <__sbprintf>
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800fd10:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800fd14:	ae11      	add	r6, sp, #68	@ 0x44
 800fd16:	960e      	str	r6, [sp, #56]	@ 0x38
 800fd18:	9307      	str	r3, [sp, #28]
 800fd1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd1c:	9303      	str	r3, [sp, #12]
 800fd1e:	465b      	mov	r3, fp
 800fd20:	461c      	mov	r4, r3
 800fd22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd26:	b10a      	cbz	r2, 800fd2c <_vfiprintf_r+0xd0>
 800fd28:	2a25      	cmp	r2, #37	@ 0x25
 800fd2a:	d1f9      	bne.n	800fd20 <_vfiprintf_r+0xc4>
 800fd2c:	ebb4 080b 	subs.w	r8, r4, fp
 800fd30:	d00d      	beq.n	800fd4e <_vfiprintf_r+0xf2>
 800fd32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd34:	4443      	add	r3, r8
 800fd36:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	2b07      	cmp	r3, #7
 800fd3e:	e9c6 b800 	strd	fp, r8, [r6]
 800fd42:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd44:	dc75      	bgt.n	800fe32 <_vfiprintf_r+0x1d6>
 800fd46:	3608      	adds	r6, #8
 800fd48:	9b03      	ldr	r3, [sp, #12]
 800fd4a:	4443      	add	r3, r8
 800fd4c:	9303      	str	r3, [sp, #12]
 800fd4e:	7823      	ldrb	r3, [r4, #0]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	f000 83cd 	beq.w	80104f0 <_vfiprintf_r+0x894>
 800fd56:	2300      	movs	r3, #0
 800fd58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fd5c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800fd60:	3401      	adds	r4, #1
 800fd62:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800fd66:	469a      	mov	sl, r3
 800fd68:	46a3      	mov	fp, r4
 800fd6a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800fd6e:	f1a3 0220 	sub.w	r2, r3, #32
 800fd72:	2a5a      	cmp	r2, #90	@ 0x5a
 800fd74:	f200 8316 	bhi.w	80103a4 <_vfiprintf_r+0x748>
 800fd78:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fd7c:	0314009a 	.word	0x0314009a
 800fd80:	00a20314 	.word	0x00a20314
 800fd84:	03140314 	.word	0x03140314
 800fd88:	00820314 	.word	0x00820314
 800fd8c:	03140314 	.word	0x03140314
 800fd90:	00af00a5 	.word	0x00af00a5
 800fd94:	00ac0314 	.word	0x00ac0314
 800fd98:	031400b1 	.word	0x031400b1
 800fd9c:	00d000cd 	.word	0x00d000cd
 800fda0:	00d000d0 	.word	0x00d000d0
 800fda4:	00d000d0 	.word	0x00d000d0
 800fda8:	00d000d0 	.word	0x00d000d0
 800fdac:	00d000d0 	.word	0x00d000d0
 800fdb0:	03140314 	.word	0x03140314
 800fdb4:	03140314 	.word	0x03140314
 800fdb8:	03140314 	.word	0x03140314
 800fdbc:	03140314 	.word	0x03140314
 800fdc0:	00f70314 	.word	0x00f70314
 800fdc4:	03140104 	.word	0x03140104
 800fdc8:	03140314 	.word	0x03140314
 800fdcc:	03140314 	.word	0x03140314
 800fdd0:	03140314 	.word	0x03140314
 800fdd4:	03140314 	.word	0x03140314
 800fdd8:	01520314 	.word	0x01520314
 800fddc:	03140314 	.word	0x03140314
 800fde0:	019a0314 	.word	0x019a0314
 800fde4:	027a0314 	.word	0x027a0314
 800fde8:	03140314 	.word	0x03140314
 800fdec:	0314029a 	.word	0x0314029a
 800fdf0:	03140314 	.word	0x03140314
 800fdf4:	03140314 	.word	0x03140314
 800fdf8:	03140314 	.word	0x03140314
 800fdfc:	03140314 	.word	0x03140314
 800fe00:	00f70314 	.word	0x00f70314
 800fe04:	03140106 	.word	0x03140106
 800fe08:	03140314 	.word	0x03140314
 800fe0c:	010600e0 	.word	0x010600e0
 800fe10:	031400f1 	.word	0x031400f1
 800fe14:	031400eb 	.word	0x031400eb
 800fe18:	01540132 	.word	0x01540132
 800fe1c:	00f10189 	.word	0x00f10189
 800fe20:	019a0314 	.word	0x019a0314
 800fe24:	027c0098 	.word	0x027c0098
 800fe28:	03140314 	.word	0x03140314
 800fe2c:	03140065 	.word	0x03140065
 800fe30:	0098      	.short	0x0098
 800fe32:	9800      	ldr	r0, [sp, #0]
 800fe34:	aa0e      	add	r2, sp, #56	@ 0x38
 800fe36:	4639      	mov	r1, r7
 800fe38:	f7ff fede 	bl	800fbf8 <__sprint_r>
 800fe3c:	2800      	cmp	r0, #0
 800fe3e:	f040 8336 	bne.w	80104ae <_vfiprintf_r+0x852>
 800fe42:	ae11      	add	r6, sp, #68	@ 0x44
 800fe44:	e780      	b.n	800fd48 <_vfiprintf_r+0xec>
 800fe46:	4a99      	ldr	r2, [pc, #612]	@ (80100ac <_vfiprintf_r+0x450>)
 800fe48:	9205      	str	r2, [sp, #20]
 800fe4a:	f01a 0220 	ands.w	r2, sl, #32
 800fe4e:	f000 8231 	beq.w	80102b4 <_vfiprintf_r+0x658>
 800fe52:	3507      	adds	r5, #7
 800fe54:	f025 0507 	bic.w	r5, r5, #7
 800fe58:	46a8      	mov	r8, r5
 800fe5a:	686d      	ldr	r5, [r5, #4]
 800fe5c:	f858 4b08 	ldr.w	r4, [r8], #8
 800fe60:	f01a 0f01 	tst.w	sl, #1
 800fe64:	d009      	beq.n	800fe7a <_vfiprintf_r+0x21e>
 800fe66:	ea54 0205 	orrs.w	r2, r4, r5
 800fe6a:	bf1f      	itttt	ne
 800fe6c:	2230      	movne	r2, #48	@ 0x30
 800fe6e:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800fe72:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800fe76:	f04a 0a02 	orrne.w	sl, sl, #2
 800fe7a:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800fe7e:	e112      	b.n	80100a6 <_vfiprintf_r+0x44a>
 800fe80:	9800      	ldr	r0, [sp, #0]
 800fe82:	f000 ff8b 	bl	8010d9c <_localeconv_r>
 800fe86:	6843      	ldr	r3, [r0, #4]
 800fe88:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7f0 fa78 	bl	8000380 <strlen>
 800fe90:	9007      	str	r0, [sp, #28]
 800fe92:	9800      	ldr	r0, [sp, #0]
 800fe94:	f000 ff82 	bl	8010d9c <_localeconv_r>
 800fe98:	6883      	ldr	r3, [r0, #8]
 800fe9a:	9306      	str	r3, [sp, #24]
 800fe9c:	9b07      	ldr	r3, [sp, #28]
 800fe9e:	b12b      	cbz	r3, 800feac <_vfiprintf_r+0x250>
 800fea0:	9b06      	ldr	r3, [sp, #24]
 800fea2:	b11b      	cbz	r3, 800feac <_vfiprintf_r+0x250>
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	b10b      	cbz	r3, 800feac <_vfiprintf_r+0x250>
 800fea8:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800feac:	465c      	mov	r4, fp
 800feae:	e75b      	b.n	800fd68 <_vfiprintf_r+0x10c>
 800feb0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d1f9      	bne.n	800feac <_vfiprintf_r+0x250>
 800feb8:	2320      	movs	r3, #32
 800feba:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800febe:	e7f5      	b.n	800feac <_vfiprintf_r+0x250>
 800fec0:	f04a 0a01 	orr.w	sl, sl, #1
 800fec4:	e7f2      	b.n	800feac <_vfiprintf_r+0x250>
 800fec6:	f855 3b04 	ldr.w	r3, [r5], #4
 800feca:	9302      	str	r3, [sp, #8]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	daed      	bge.n	800feac <_vfiprintf_r+0x250>
 800fed0:	425b      	negs	r3, r3
 800fed2:	9302      	str	r3, [sp, #8]
 800fed4:	f04a 0a04 	orr.w	sl, sl, #4
 800fed8:	e7e8      	b.n	800feac <_vfiprintf_r+0x250>
 800feda:	232b      	movs	r3, #43	@ 0x2b
 800fedc:	e7ed      	b.n	800feba <_vfiprintf_r+0x25e>
 800fede:	465a      	mov	r2, fp
 800fee0:	f812 3b01 	ldrb.w	r3, [r2], #1
 800fee4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fee6:	d112      	bne.n	800ff0e <_vfiprintf_r+0x2b2>
 800fee8:	f855 3b04 	ldr.w	r3, [r5], #4
 800feec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fef0:	9301      	str	r3, [sp, #4]
 800fef2:	4693      	mov	fp, r2
 800fef4:	e7da      	b.n	800feac <_vfiprintf_r+0x250>
 800fef6:	9b01      	ldr	r3, [sp, #4]
 800fef8:	fb00 1303 	mla	r3, r0, r3, r1
 800fefc:	9301      	str	r3, [sp, #4]
 800fefe:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ff02:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ff06:	2909      	cmp	r1, #9
 800ff08:	d9f5      	bls.n	800fef6 <_vfiprintf_r+0x29a>
 800ff0a:	4693      	mov	fp, r2
 800ff0c:	e72f      	b.n	800fd6e <_vfiprintf_r+0x112>
 800ff0e:	2100      	movs	r1, #0
 800ff10:	9101      	str	r1, [sp, #4]
 800ff12:	200a      	movs	r0, #10
 800ff14:	e7f5      	b.n	800ff02 <_vfiprintf_r+0x2a6>
 800ff16:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800ff1a:	e7c7      	b.n	800feac <_vfiprintf_r+0x250>
 800ff1c:	2100      	movs	r1, #0
 800ff1e:	465a      	mov	r2, fp
 800ff20:	9102      	str	r1, [sp, #8]
 800ff22:	200a      	movs	r0, #10
 800ff24:	9902      	ldr	r1, [sp, #8]
 800ff26:	3b30      	subs	r3, #48	@ 0x30
 800ff28:	fb00 3301 	mla	r3, r0, r1, r3
 800ff2c:	9302      	str	r3, [sp, #8]
 800ff2e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ff32:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ff36:	2909      	cmp	r1, #9
 800ff38:	d9f4      	bls.n	800ff24 <_vfiprintf_r+0x2c8>
 800ff3a:	e7e6      	b.n	800ff0a <_vfiprintf_r+0x2ae>
 800ff3c:	f89b 3000 	ldrb.w	r3, [fp]
 800ff40:	2b68      	cmp	r3, #104	@ 0x68
 800ff42:	bf06      	itte	eq
 800ff44:	f10b 0b01 	addeq.w	fp, fp, #1
 800ff48:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800ff4c:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800ff50:	e7ac      	b.n	800feac <_vfiprintf_r+0x250>
 800ff52:	f89b 3000 	ldrb.w	r3, [fp]
 800ff56:	2b6c      	cmp	r3, #108	@ 0x6c
 800ff58:	d104      	bne.n	800ff64 <_vfiprintf_r+0x308>
 800ff5a:	f10b 0b01 	add.w	fp, fp, #1
 800ff5e:	f04a 0a20 	orr.w	sl, sl, #32
 800ff62:	e7a3      	b.n	800feac <_vfiprintf_r+0x250>
 800ff64:	f04a 0a10 	orr.w	sl, sl, #16
 800ff68:	e7a0      	b.n	800feac <_vfiprintf_r+0x250>
 800ff6a:	46a8      	mov	r8, r5
 800ff6c:	2400      	movs	r4, #0
 800ff6e:	f858 3b04 	ldr.w	r3, [r8], #4
 800ff72:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800ff76:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	9301      	str	r3, [sp, #4]
 800ff7e:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800ff82:	e0ab      	b.n	80100dc <_vfiprintf_r+0x480>
 800ff84:	f04a 0a10 	orr.w	sl, sl, #16
 800ff88:	f01a 0f20 	tst.w	sl, #32
 800ff8c:	d011      	beq.n	800ffb2 <_vfiprintf_r+0x356>
 800ff8e:	3507      	adds	r5, #7
 800ff90:	f025 0507 	bic.w	r5, r5, #7
 800ff94:	46a8      	mov	r8, r5
 800ff96:	686d      	ldr	r5, [r5, #4]
 800ff98:	f858 4b08 	ldr.w	r4, [r8], #8
 800ff9c:	2d00      	cmp	r5, #0
 800ff9e:	da06      	bge.n	800ffae <_vfiprintf_r+0x352>
 800ffa0:	4264      	negs	r4, r4
 800ffa2:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800ffa6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ffaa:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ffae:	2301      	movs	r3, #1
 800ffb0:	e048      	b.n	8010044 <_vfiprintf_r+0x3e8>
 800ffb2:	46a8      	mov	r8, r5
 800ffb4:	f01a 0f10 	tst.w	sl, #16
 800ffb8:	f858 5b04 	ldr.w	r5, [r8], #4
 800ffbc:	d002      	beq.n	800ffc4 <_vfiprintf_r+0x368>
 800ffbe:	462c      	mov	r4, r5
 800ffc0:	17ed      	asrs	r5, r5, #31
 800ffc2:	e7eb      	b.n	800ff9c <_vfiprintf_r+0x340>
 800ffc4:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ffc8:	d003      	beq.n	800ffd2 <_vfiprintf_r+0x376>
 800ffca:	b22c      	sxth	r4, r5
 800ffcc:	f345 35c0 	sbfx	r5, r5, #15, #1
 800ffd0:	e7e4      	b.n	800ff9c <_vfiprintf_r+0x340>
 800ffd2:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ffd6:	d0f2      	beq.n	800ffbe <_vfiprintf_r+0x362>
 800ffd8:	b26c      	sxtb	r4, r5
 800ffda:	f345 15c0 	sbfx	r5, r5, #7, #1
 800ffde:	e7dd      	b.n	800ff9c <_vfiprintf_r+0x340>
 800ffe0:	f01a 0f20 	tst.w	sl, #32
 800ffe4:	d007      	beq.n	800fff6 <_vfiprintf_r+0x39a>
 800ffe6:	9a03      	ldr	r2, [sp, #12]
 800ffe8:	682b      	ldr	r3, [r5, #0]
 800ffea:	9903      	ldr	r1, [sp, #12]
 800ffec:	17d2      	asrs	r2, r2, #31
 800ffee:	e9c3 1200 	strd	r1, r2, [r3]
 800fff2:	3504      	adds	r5, #4
 800fff4:	e693      	b.n	800fd1e <_vfiprintf_r+0xc2>
 800fff6:	f01a 0f10 	tst.w	sl, #16
 800fffa:	d003      	beq.n	8010004 <_vfiprintf_r+0x3a8>
 800fffc:	682b      	ldr	r3, [r5, #0]
 800fffe:	9a03      	ldr	r2, [sp, #12]
 8010000:	601a      	str	r2, [r3, #0]
 8010002:	e7f6      	b.n	800fff2 <_vfiprintf_r+0x396>
 8010004:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8010008:	d003      	beq.n	8010012 <_vfiprintf_r+0x3b6>
 801000a:	682b      	ldr	r3, [r5, #0]
 801000c:	9a03      	ldr	r2, [sp, #12]
 801000e:	801a      	strh	r2, [r3, #0]
 8010010:	e7ef      	b.n	800fff2 <_vfiprintf_r+0x396>
 8010012:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8010016:	d0f1      	beq.n	800fffc <_vfiprintf_r+0x3a0>
 8010018:	682b      	ldr	r3, [r5, #0]
 801001a:	9a03      	ldr	r2, [sp, #12]
 801001c:	701a      	strb	r2, [r3, #0]
 801001e:	e7e8      	b.n	800fff2 <_vfiprintf_r+0x396>
 8010020:	f04a 0a10 	orr.w	sl, sl, #16
 8010024:	f01a 0320 	ands.w	r3, sl, #32
 8010028:	d01f      	beq.n	801006a <_vfiprintf_r+0x40e>
 801002a:	3507      	adds	r5, #7
 801002c:	f025 0507 	bic.w	r5, r5, #7
 8010030:	46a8      	mov	r8, r5
 8010032:	686d      	ldr	r5, [r5, #4]
 8010034:	f858 4b08 	ldr.w	r4, [r8], #8
 8010038:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801003c:	2300      	movs	r3, #0
 801003e:	2200      	movs	r2, #0
 8010040:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8010044:	9a01      	ldr	r2, [sp, #4]
 8010046:	3201      	adds	r2, #1
 8010048:	f000 825f 	beq.w	801050a <_vfiprintf_r+0x8ae>
 801004c:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8010050:	9204      	str	r2, [sp, #16]
 8010052:	ea54 0205 	orrs.w	r2, r4, r5
 8010056:	f040 825e 	bne.w	8010516 <_vfiprintf_r+0x8ba>
 801005a:	9a01      	ldr	r2, [sp, #4]
 801005c:	2a00      	cmp	r2, #0
 801005e:	f000 8198 	beq.w	8010392 <_vfiprintf_r+0x736>
 8010062:	2b01      	cmp	r3, #1
 8010064:	f040 825a 	bne.w	801051c <_vfiprintf_r+0x8c0>
 8010068:	e13b      	b.n	80102e2 <_vfiprintf_r+0x686>
 801006a:	46a8      	mov	r8, r5
 801006c:	f01a 0510 	ands.w	r5, sl, #16
 8010070:	f858 4b04 	ldr.w	r4, [r8], #4
 8010074:	d001      	beq.n	801007a <_vfiprintf_r+0x41e>
 8010076:	461d      	mov	r5, r3
 8010078:	e7de      	b.n	8010038 <_vfiprintf_r+0x3dc>
 801007a:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 801007e:	d001      	beq.n	8010084 <_vfiprintf_r+0x428>
 8010080:	b2a4      	uxth	r4, r4
 8010082:	e7d9      	b.n	8010038 <_vfiprintf_r+0x3dc>
 8010084:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8010088:	d0d6      	beq.n	8010038 <_vfiprintf_r+0x3dc>
 801008a:	b2e4      	uxtb	r4, r4
 801008c:	e7f3      	b.n	8010076 <_vfiprintf_r+0x41a>
 801008e:	46a8      	mov	r8, r5
 8010090:	f647 0330 	movw	r3, #30768	@ 0x7830
 8010094:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8010098:	f858 4b04 	ldr.w	r4, [r8], #4
 801009c:	4b03      	ldr	r3, [pc, #12]	@ (80100ac <_vfiprintf_r+0x450>)
 801009e:	9305      	str	r3, [sp, #20]
 80100a0:	2500      	movs	r5, #0
 80100a2:	f04a 0a02 	orr.w	sl, sl, #2
 80100a6:	2302      	movs	r3, #2
 80100a8:	e7c9      	b.n	801003e <_vfiprintf_r+0x3e2>
 80100aa:	bf00      	nop
 80100ac:	08015ca5 	.word	0x08015ca5
 80100b0:	9b01      	ldr	r3, [sp, #4]
 80100b2:	46a8      	mov	r8, r5
 80100b4:	1c5c      	adds	r4, r3, #1
 80100b6:	f04f 0500 	mov.w	r5, #0
 80100ba:	f858 9b04 	ldr.w	r9, [r8], #4
 80100be:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 80100c2:	f000 80d0 	beq.w	8010266 <_vfiprintf_r+0x60a>
 80100c6:	461a      	mov	r2, r3
 80100c8:	4629      	mov	r1, r5
 80100ca:	4648      	mov	r0, r9
 80100cc:	f7f0 f908 	bl	80002e0 <memchr>
 80100d0:	4604      	mov	r4, r0
 80100d2:	b118      	cbz	r0, 80100dc <_vfiprintf_r+0x480>
 80100d4:	eba0 0309 	sub.w	r3, r0, r9
 80100d8:	9301      	str	r3, [sp, #4]
 80100da:	462c      	mov	r4, r5
 80100dc:	9b01      	ldr	r3, [sp, #4]
 80100de:	42a3      	cmp	r3, r4
 80100e0:	bfb8      	it	lt
 80100e2:	4623      	movlt	r3, r4
 80100e4:	9304      	str	r3, [sp, #16]
 80100e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80100ea:	b113      	cbz	r3, 80100f2 <_vfiprintf_r+0x496>
 80100ec:	9b04      	ldr	r3, [sp, #16]
 80100ee:	3301      	adds	r3, #1
 80100f0:	9304      	str	r3, [sp, #16]
 80100f2:	f01a 0302 	ands.w	r3, sl, #2
 80100f6:	9308      	str	r3, [sp, #32]
 80100f8:	bf1e      	ittt	ne
 80100fa:	9b04      	ldrne	r3, [sp, #16]
 80100fc:	3302      	addne	r3, #2
 80100fe:	9304      	strne	r3, [sp, #16]
 8010100:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8010104:	930a      	str	r3, [sp, #40]	@ 0x28
 8010106:	d11f      	bne.n	8010148 <_vfiprintf_r+0x4ec>
 8010108:	9b02      	ldr	r3, [sp, #8]
 801010a:	9a04      	ldr	r2, [sp, #16]
 801010c:	1a9d      	subs	r5, r3, r2
 801010e:	2d00      	cmp	r5, #0
 8010110:	dd1a      	ble.n	8010148 <_vfiprintf_r+0x4ec>
 8010112:	4ba9      	ldr	r3, [pc, #676]	@ (80103b8 <_vfiprintf_r+0x75c>)
 8010114:	6033      	str	r3, [r6, #0]
 8010116:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 801011a:	2d10      	cmp	r5, #16
 801011c:	f102 0201 	add.w	r2, r2, #1
 8010120:	f106 0008 	add.w	r0, r6, #8
 8010124:	f300 814e 	bgt.w	80103c4 <_vfiprintf_r+0x768>
 8010128:	6075      	str	r5, [r6, #4]
 801012a:	2a07      	cmp	r2, #7
 801012c:	4465      	add	r5, ip
 801012e:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8010132:	f340 815a 	ble.w	80103ea <_vfiprintf_r+0x78e>
 8010136:	9800      	ldr	r0, [sp, #0]
 8010138:	aa0e      	add	r2, sp, #56	@ 0x38
 801013a:	4639      	mov	r1, r7
 801013c:	f7ff fd5c 	bl	800fbf8 <__sprint_r>
 8010140:	2800      	cmp	r0, #0
 8010142:	f040 81b4 	bne.w	80104ae <_vfiprintf_r+0x852>
 8010146:	ae11      	add	r6, sp, #68	@ 0x44
 8010148:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 801014c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8010150:	b161      	cbz	r1, 801016c <_vfiprintf_r+0x510>
 8010152:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8010156:	3301      	adds	r3, #1
 8010158:	6031      	str	r1, [r6, #0]
 801015a:	2101      	movs	r1, #1
 801015c:	440a      	add	r2, r1
 801015e:	2b07      	cmp	r3, #7
 8010160:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8010164:	6071      	str	r1, [r6, #4]
 8010166:	f300 8142 	bgt.w	80103ee <_vfiprintf_r+0x792>
 801016a:	3608      	adds	r6, #8
 801016c:	9908      	ldr	r1, [sp, #32]
 801016e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8010172:	b159      	cbz	r1, 801018c <_vfiprintf_r+0x530>
 8010174:	a90d      	add	r1, sp, #52	@ 0x34
 8010176:	3301      	adds	r3, #1
 8010178:	6031      	str	r1, [r6, #0]
 801017a:	2102      	movs	r1, #2
 801017c:	440a      	add	r2, r1
 801017e:	2b07      	cmp	r3, #7
 8010180:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8010184:	6071      	str	r1, [r6, #4]
 8010186:	f300 813b 	bgt.w	8010400 <_vfiprintf_r+0x7a4>
 801018a:	3608      	adds	r6, #8
 801018c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801018e:	2b80      	cmp	r3, #128	@ 0x80
 8010190:	d11f      	bne.n	80101d2 <_vfiprintf_r+0x576>
 8010192:	9b02      	ldr	r3, [sp, #8]
 8010194:	9a04      	ldr	r2, [sp, #16]
 8010196:	1a9d      	subs	r5, r3, r2
 8010198:	2d00      	cmp	r5, #0
 801019a:	dd1a      	ble.n	80101d2 <_vfiprintf_r+0x576>
 801019c:	4b87      	ldr	r3, [pc, #540]	@ (80103bc <_vfiprintf_r+0x760>)
 801019e:	6033      	str	r3, [r6, #0]
 80101a0:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80101a4:	2d10      	cmp	r5, #16
 80101a6:	f102 0201 	add.w	r2, r2, #1
 80101aa:	f106 0008 	add.w	r0, r6, #8
 80101ae:	f300 8130 	bgt.w	8010412 <_vfiprintf_r+0x7b6>
 80101b2:	6075      	str	r5, [r6, #4]
 80101b4:	2a07      	cmp	r2, #7
 80101b6:	4465      	add	r5, ip
 80101b8:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80101bc:	f340 813c 	ble.w	8010438 <_vfiprintf_r+0x7dc>
 80101c0:	9800      	ldr	r0, [sp, #0]
 80101c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80101c4:	4639      	mov	r1, r7
 80101c6:	f7ff fd17 	bl	800fbf8 <__sprint_r>
 80101ca:	2800      	cmp	r0, #0
 80101cc:	f040 816f 	bne.w	80104ae <_vfiprintf_r+0x852>
 80101d0:	ae11      	add	r6, sp, #68	@ 0x44
 80101d2:	9b01      	ldr	r3, [sp, #4]
 80101d4:	1ae4      	subs	r4, r4, r3
 80101d6:	2c00      	cmp	r4, #0
 80101d8:	dd1a      	ble.n	8010210 <_vfiprintf_r+0x5b4>
 80101da:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80101de:	4877      	ldr	r0, [pc, #476]	@ (80103bc <_vfiprintf_r+0x760>)
 80101e0:	6030      	str	r0, [r6, #0]
 80101e2:	2c10      	cmp	r4, #16
 80101e4:	f103 0301 	add.w	r3, r3, #1
 80101e8:	f106 0108 	add.w	r1, r6, #8
 80101ec:	f300 8126 	bgt.w	801043c <_vfiprintf_r+0x7e0>
 80101f0:	6074      	str	r4, [r6, #4]
 80101f2:	2b07      	cmp	r3, #7
 80101f4:	4414      	add	r4, r2
 80101f6:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 80101fa:	f340 8130 	ble.w	801045e <_vfiprintf_r+0x802>
 80101fe:	9800      	ldr	r0, [sp, #0]
 8010200:	aa0e      	add	r2, sp, #56	@ 0x38
 8010202:	4639      	mov	r1, r7
 8010204:	f7ff fcf8 	bl	800fbf8 <__sprint_r>
 8010208:	2800      	cmp	r0, #0
 801020a:	f040 8150 	bne.w	80104ae <_vfiprintf_r+0x852>
 801020e:	ae11      	add	r6, sp, #68	@ 0x44
 8010210:	9b01      	ldr	r3, [sp, #4]
 8010212:	9a01      	ldr	r2, [sp, #4]
 8010214:	6073      	str	r3, [r6, #4]
 8010216:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010218:	f8c6 9000 	str.w	r9, [r6]
 801021c:	4413      	add	r3, r2
 801021e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010222:	3301      	adds	r3, #1
 8010224:	2b07      	cmp	r3, #7
 8010226:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010228:	f300 811b 	bgt.w	8010462 <_vfiprintf_r+0x806>
 801022c:	f106 0308 	add.w	r3, r6, #8
 8010230:	f01a 0f04 	tst.w	sl, #4
 8010234:	f040 811d 	bne.w	8010472 <_vfiprintf_r+0x816>
 8010238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801023c:	9904      	ldr	r1, [sp, #16]
 801023e:	428a      	cmp	r2, r1
 8010240:	bfac      	ite	ge
 8010242:	189b      	addge	r3, r3, r2
 8010244:	185b      	addlt	r3, r3, r1
 8010246:	9303      	str	r3, [sp, #12]
 8010248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801024a:	b13b      	cbz	r3, 801025c <_vfiprintf_r+0x600>
 801024c:	9800      	ldr	r0, [sp, #0]
 801024e:	aa0e      	add	r2, sp, #56	@ 0x38
 8010250:	4639      	mov	r1, r7
 8010252:	f7ff fcd1 	bl	800fbf8 <__sprint_r>
 8010256:	2800      	cmp	r0, #0
 8010258:	f040 8129 	bne.w	80104ae <_vfiprintf_r+0x852>
 801025c:	2300      	movs	r3, #0
 801025e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010260:	4645      	mov	r5, r8
 8010262:	ae11      	add	r6, sp, #68	@ 0x44
 8010264:	e55b      	b.n	800fd1e <_vfiprintf_r+0xc2>
 8010266:	4648      	mov	r0, r9
 8010268:	f7f0 f88a 	bl	8000380 <strlen>
 801026c:	9001      	str	r0, [sp, #4]
 801026e:	e734      	b.n	80100da <_vfiprintf_r+0x47e>
 8010270:	f04a 0a10 	orr.w	sl, sl, #16
 8010274:	f01a 0320 	ands.w	r3, sl, #32
 8010278:	d008      	beq.n	801028c <_vfiprintf_r+0x630>
 801027a:	3507      	adds	r5, #7
 801027c:	f025 0507 	bic.w	r5, r5, #7
 8010280:	46a8      	mov	r8, r5
 8010282:	686d      	ldr	r5, [r5, #4]
 8010284:	f858 4b08 	ldr.w	r4, [r8], #8
 8010288:	2301      	movs	r3, #1
 801028a:	e6d8      	b.n	801003e <_vfiprintf_r+0x3e2>
 801028c:	46a8      	mov	r8, r5
 801028e:	f01a 0510 	ands.w	r5, sl, #16
 8010292:	f858 4b04 	ldr.w	r4, [r8], #4
 8010296:	d001      	beq.n	801029c <_vfiprintf_r+0x640>
 8010298:	461d      	mov	r5, r3
 801029a:	e7f5      	b.n	8010288 <_vfiprintf_r+0x62c>
 801029c:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80102a0:	d001      	beq.n	80102a6 <_vfiprintf_r+0x64a>
 80102a2:	b2a4      	uxth	r4, r4
 80102a4:	e7f0      	b.n	8010288 <_vfiprintf_r+0x62c>
 80102a6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80102aa:	d0ed      	beq.n	8010288 <_vfiprintf_r+0x62c>
 80102ac:	b2e4      	uxtb	r4, r4
 80102ae:	e7f3      	b.n	8010298 <_vfiprintf_r+0x63c>
 80102b0:	4a43      	ldr	r2, [pc, #268]	@ (80103c0 <_vfiprintf_r+0x764>)
 80102b2:	e5c9      	b.n	800fe48 <_vfiprintf_r+0x1ec>
 80102b4:	46a8      	mov	r8, r5
 80102b6:	f01a 0510 	ands.w	r5, sl, #16
 80102ba:	f858 4b04 	ldr.w	r4, [r8], #4
 80102be:	d001      	beq.n	80102c4 <_vfiprintf_r+0x668>
 80102c0:	4615      	mov	r5, r2
 80102c2:	e5cd      	b.n	800fe60 <_vfiprintf_r+0x204>
 80102c4:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 80102c8:	d001      	beq.n	80102ce <_vfiprintf_r+0x672>
 80102ca:	b2a4      	uxth	r4, r4
 80102cc:	e5c8      	b.n	800fe60 <_vfiprintf_r+0x204>
 80102ce:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80102d2:	f43f adc5 	beq.w	800fe60 <_vfiprintf_r+0x204>
 80102d6:	b2e4      	uxtb	r4, r4
 80102d8:	e7f2      	b.n	80102c0 <_vfiprintf_r+0x664>
 80102da:	2c0a      	cmp	r4, #10
 80102dc:	f175 0300 	sbcs.w	r3, r5, #0
 80102e0:	d206      	bcs.n	80102f0 <_vfiprintf_r+0x694>
 80102e2:	3430      	adds	r4, #48	@ 0x30
 80102e4:	b2e4      	uxtb	r4, r4
 80102e6:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 80102ea:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 80102ee:	e131      	b.n	8010554 <_vfiprintf_r+0x8f8>
 80102f0:	ab3a      	add	r3, sp, #232	@ 0xe8
 80102f2:	9308      	str	r3, [sp, #32]
 80102f4:	9b04      	ldr	r3, [sp, #16]
 80102f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80102fa:	f04f 0a00 	mov.w	sl, #0
 80102fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010300:	220a      	movs	r2, #10
 8010302:	2300      	movs	r3, #0
 8010304:	4620      	mov	r0, r4
 8010306:	4629      	mov	r1, r5
 8010308:	f7f0 f842 	bl	8000390 <__aeabi_uldivmod>
 801030c:	460b      	mov	r3, r1
 801030e:	9908      	ldr	r1, [sp, #32]
 8010310:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010312:	3230      	adds	r2, #48	@ 0x30
 8010314:	f801 2c01 	strb.w	r2, [r1, #-1]
 8010318:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801031a:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 801031e:	f10a 0a01 	add.w	sl, sl, #1
 8010322:	b1e2      	cbz	r2, 801035e <_vfiprintf_r+0x702>
 8010324:	9a06      	ldr	r2, [sp, #24]
 8010326:	7812      	ldrb	r2, [r2, #0]
 8010328:	4552      	cmp	r2, sl
 801032a:	d118      	bne.n	801035e <_vfiprintf_r+0x702>
 801032c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8010330:	d015      	beq.n	801035e <_vfiprintf_r+0x702>
 8010332:	2c0a      	cmp	r4, #10
 8010334:	f175 0200 	sbcs.w	r2, r5, #0
 8010338:	d311      	bcc.n	801035e <_vfiprintf_r+0x702>
 801033a:	9308      	str	r3, [sp, #32]
 801033c:	9b07      	ldr	r3, [sp, #28]
 801033e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010340:	eba9 0903 	sub.w	r9, r9, r3
 8010344:	461a      	mov	r2, r3
 8010346:	4648      	mov	r0, r9
 8010348:	f000 fd0e 	bl	8010d68 <strncpy>
 801034c:	9b06      	ldr	r3, [sp, #24]
 801034e:	785a      	ldrb	r2, [r3, #1]
 8010350:	9b08      	ldr	r3, [sp, #32]
 8010352:	b172      	cbz	r2, 8010372 <_vfiprintf_r+0x716>
 8010354:	9a06      	ldr	r2, [sp, #24]
 8010356:	3201      	adds	r2, #1
 8010358:	9206      	str	r2, [sp, #24]
 801035a:	f04f 0a00 	mov.w	sl, #0
 801035e:	2c0a      	cmp	r4, #10
 8010360:	f175 0500 	sbcs.w	r5, r5, #0
 8010364:	f0c0 80f6 	bcc.w	8010554 <_vfiprintf_r+0x8f8>
 8010368:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801036a:	f8cd 9020 	str.w	r9, [sp, #32]
 801036e:	461d      	mov	r5, r3
 8010370:	e7c6      	b.n	8010300 <_vfiprintf_r+0x6a4>
 8010372:	4692      	mov	sl, r2
 8010374:	e7f3      	b.n	801035e <_vfiprintf_r+0x702>
 8010376:	f004 030f 	and.w	r3, r4, #15
 801037a:	9a05      	ldr	r2, [sp, #20]
 801037c:	0924      	lsrs	r4, r4, #4
 801037e:	5cd3      	ldrb	r3, [r2, r3]
 8010380:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8010384:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8010388:	092d      	lsrs	r5, r5, #4
 801038a:	ea54 0305 	orrs.w	r3, r4, r5
 801038e:	d1f2      	bne.n	8010376 <_vfiprintf_r+0x71a>
 8010390:	e0e0      	b.n	8010554 <_vfiprintf_r+0x8f8>
 8010392:	b923      	cbnz	r3, 801039e <_vfiprintf_r+0x742>
 8010394:	f01a 0f01 	tst.w	sl, #1
 8010398:	d001      	beq.n	801039e <_vfiprintf_r+0x742>
 801039a:	2430      	movs	r4, #48	@ 0x30
 801039c:	e7a3      	b.n	80102e6 <_vfiprintf_r+0x68a>
 801039e:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80103a2:	e0d7      	b.n	8010554 <_vfiprintf_r+0x8f8>
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	f000 80a3 	beq.w	80104f0 <_vfiprintf_r+0x894>
 80103aa:	2400      	movs	r4, #0
 80103ac:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80103b0:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80103b4:	46a8      	mov	r8, r5
 80103b6:	e5e0      	b.n	800ff7a <_vfiprintf_r+0x31e>
 80103b8:	08015cc6 	.word	0x08015cc6
 80103bc:	08015cb6 	.word	0x08015cb6
 80103c0:	08015c94 	.word	0x08015c94
 80103c4:	2110      	movs	r1, #16
 80103c6:	6071      	str	r1, [r6, #4]
 80103c8:	2a07      	cmp	r2, #7
 80103ca:	4461      	add	r1, ip
 80103cc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80103d0:	dd08      	ble.n	80103e4 <_vfiprintf_r+0x788>
 80103d2:	9800      	ldr	r0, [sp, #0]
 80103d4:	aa0e      	add	r2, sp, #56	@ 0x38
 80103d6:	4639      	mov	r1, r7
 80103d8:	f7ff fc0e 	bl	800fbf8 <__sprint_r>
 80103dc:	2800      	cmp	r0, #0
 80103de:	d166      	bne.n	80104ae <_vfiprintf_r+0x852>
 80103e0:	4b60      	ldr	r3, [pc, #384]	@ (8010564 <_vfiprintf_r+0x908>)
 80103e2:	a811      	add	r0, sp, #68	@ 0x44
 80103e4:	3d10      	subs	r5, #16
 80103e6:	4606      	mov	r6, r0
 80103e8:	e694      	b.n	8010114 <_vfiprintf_r+0x4b8>
 80103ea:	4606      	mov	r6, r0
 80103ec:	e6ac      	b.n	8010148 <_vfiprintf_r+0x4ec>
 80103ee:	9800      	ldr	r0, [sp, #0]
 80103f0:	aa0e      	add	r2, sp, #56	@ 0x38
 80103f2:	4639      	mov	r1, r7
 80103f4:	f7ff fc00 	bl	800fbf8 <__sprint_r>
 80103f8:	2800      	cmp	r0, #0
 80103fa:	d158      	bne.n	80104ae <_vfiprintf_r+0x852>
 80103fc:	ae11      	add	r6, sp, #68	@ 0x44
 80103fe:	e6b5      	b.n	801016c <_vfiprintf_r+0x510>
 8010400:	9800      	ldr	r0, [sp, #0]
 8010402:	aa0e      	add	r2, sp, #56	@ 0x38
 8010404:	4639      	mov	r1, r7
 8010406:	f7ff fbf7 	bl	800fbf8 <__sprint_r>
 801040a:	2800      	cmp	r0, #0
 801040c:	d14f      	bne.n	80104ae <_vfiprintf_r+0x852>
 801040e:	ae11      	add	r6, sp, #68	@ 0x44
 8010410:	e6bc      	b.n	801018c <_vfiprintf_r+0x530>
 8010412:	2110      	movs	r1, #16
 8010414:	6071      	str	r1, [r6, #4]
 8010416:	2a07      	cmp	r2, #7
 8010418:	4461      	add	r1, ip
 801041a:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801041e:	dd08      	ble.n	8010432 <_vfiprintf_r+0x7d6>
 8010420:	9800      	ldr	r0, [sp, #0]
 8010422:	aa0e      	add	r2, sp, #56	@ 0x38
 8010424:	4639      	mov	r1, r7
 8010426:	f7ff fbe7 	bl	800fbf8 <__sprint_r>
 801042a:	2800      	cmp	r0, #0
 801042c:	d13f      	bne.n	80104ae <_vfiprintf_r+0x852>
 801042e:	4b4e      	ldr	r3, [pc, #312]	@ (8010568 <_vfiprintf_r+0x90c>)
 8010430:	a811      	add	r0, sp, #68	@ 0x44
 8010432:	3d10      	subs	r5, #16
 8010434:	4606      	mov	r6, r0
 8010436:	e6b2      	b.n	801019e <_vfiprintf_r+0x542>
 8010438:	4606      	mov	r6, r0
 801043a:	e6ca      	b.n	80101d2 <_vfiprintf_r+0x576>
 801043c:	2010      	movs	r0, #16
 801043e:	4402      	add	r2, r0
 8010440:	2b07      	cmp	r3, #7
 8010442:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8010446:	6070      	str	r0, [r6, #4]
 8010448:	dd06      	ble.n	8010458 <_vfiprintf_r+0x7fc>
 801044a:	9800      	ldr	r0, [sp, #0]
 801044c:	aa0e      	add	r2, sp, #56	@ 0x38
 801044e:	4639      	mov	r1, r7
 8010450:	f7ff fbd2 	bl	800fbf8 <__sprint_r>
 8010454:	bb58      	cbnz	r0, 80104ae <_vfiprintf_r+0x852>
 8010456:	a911      	add	r1, sp, #68	@ 0x44
 8010458:	3c10      	subs	r4, #16
 801045a:	460e      	mov	r6, r1
 801045c:	e6bd      	b.n	80101da <_vfiprintf_r+0x57e>
 801045e:	460e      	mov	r6, r1
 8010460:	e6d6      	b.n	8010210 <_vfiprintf_r+0x5b4>
 8010462:	9800      	ldr	r0, [sp, #0]
 8010464:	aa0e      	add	r2, sp, #56	@ 0x38
 8010466:	4639      	mov	r1, r7
 8010468:	f7ff fbc6 	bl	800fbf8 <__sprint_r>
 801046c:	b9f8      	cbnz	r0, 80104ae <_vfiprintf_r+0x852>
 801046e:	ab11      	add	r3, sp, #68	@ 0x44
 8010470:	e6de      	b.n	8010230 <_vfiprintf_r+0x5d4>
 8010472:	9a02      	ldr	r2, [sp, #8]
 8010474:	9904      	ldr	r1, [sp, #16]
 8010476:	1a54      	subs	r4, r2, r1
 8010478:	2c00      	cmp	r4, #0
 801047a:	f77f aedd 	ble.w	8010238 <_vfiprintf_r+0x5dc>
 801047e:	4d39      	ldr	r5, [pc, #228]	@ (8010564 <_vfiprintf_r+0x908>)
 8010480:	2610      	movs	r6, #16
 8010482:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8010486:	2c10      	cmp	r4, #16
 8010488:	f102 0201 	add.w	r2, r2, #1
 801048c:	601d      	str	r5, [r3, #0]
 801048e:	dc1d      	bgt.n	80104cc <_vfiprintf_r+0x870>
 8010490:	605c      	str	r4, [r3, #4]
 8010492:	2a07      	cmp	r2, #7
 8010494:	440c      	add	r4, r1
 8010496:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 801049a:	f77f aecd 	ble.w	8010238 <_vfiprintf_r+0x5dc>
 801049e:	9800      	ldr	r0, [sp, #0]
 80104a0:	aa0e      	add	r2, sp, #56	@ 0x38
 80104a2:	4639      	mov	r1, r7
 80104a4:	f7ff fba8 	bl	800fbf8 <__sprint_r>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	f43f aec5 	beq.w	8010238 <_vfiprintf_r+0x5dc>
 80104ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80104b0:	07d9      	lsls	r1, r3, #31
 80104b2:	d405      	bmi.n	80104c0 <_vfiprintf_r+0x864>
 80104b4:	89bb      	ldrh	r3, [r7, #12]
 80104b6:	059a      	lsls	r2, r3, #22
 80104b8:	d402      	bmi.n	80104c0 <_vfiprintf_r+0x864>
 80104ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80104bc:	f000 fc9f 	bl	8010dfe <__retarget_lock_release_recursive>
 80104c0:	89bb      	ldrh	r3, [r7, #12]
 80104c2:	065b      	lsls	r3, r3, #25
 80104c4:	f57f abfb 	bpl.w	800fcbe <_vfiprintf_r+0x62>
 80104c8:	f7ff bbf6 	b.w	800fcb8 <_vfiprintf_r+0x5c>
 80104cc:	3110      	adds	r1, #16
 80104ce:	2a07      	cmp	r2, #7
 80104d0:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80104d4:	605e      	str	r6, [r3, #4]
 80104d6:	dc02      	bgt.n	80104de <_vfiprintf_r+0x882>
 80104d8:	3308      	adds	r3, #8
 80104da:	3c10      	subs	r4, #16
 80104dc:	e7d1      	b.n	8010482 <_vfiprintf_r+0x826>
 80104de:	9800      	ldr	r0, [sp, #0]
 80104e0:	aa0e      	add	r2, sp, #56	@ 0x38
 80104e2:	4639      	mov	r1, r7
 80104e4:	f7ff fb88 	bl	800fbf8 <__sprint_r>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	d1e0      	bne.n	80104ae <_vfiprintf_r+0x852>
 80104ec:	ab11      	add	r3, sp, #68	@ 0x44
 80104ee:	e7f4      	b.n	80104da <_vfiprintf_r+0x87e>
 80104f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80104f2:	b913      	cbnz	r3, 80104fa <_vfiprintf_r+0x89e>
 80104f4:	2300      	movs	r3, #0
 80104f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80104f8:	e7d9      	b.n	80104ae <_vfiprintf_r+0x852>
 80104fa:	9800      	ldr	r0, [sp, #0]
 80104fc:	aa0e      	add	r2, sp, #56	@ 0x38
 80104fe:	4639      	mov	r1, r7
 8010500:	f7ff fb7a 	bl	800fbf8 <__sprint_r>
 8010504:	2800      	cmp	r0, #0
 8010506:	d0f5      	beq.n	80104f4 <_vfiprintf_r+0x898>
 8010508:	e7d1      	b.n	80104ae <_vfiprintf_r+0x852>
 801050a:	ea54 0205 	orrs.w	r2, r4, r5
 801050e:	f8cd a010 	str.w	sl, [sp, #16]
 8010512:	f43f ada6 	beq.w	8010062 <_vfiprintf_r+0x406>
 8010516:	2b01      	cmp	r3, #1
 8010518:	f43f aedf 	beq.w	80102da <_vfiprintf_r+0x67e>
 801051c:	2b02      	cmp	r3, #2
 801051e:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8010522:	f43f af28 	beq.w	8010376 <_vfiprintf_r+0x71a>
 8010526:	f004 0307 	and.w	r3, r4, #7
 801052a:	08e4      	lsrs	r4, r4, #3
 801052c:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8010530:	08ed      	lsrs	r5, r5, #3
 8010532:	3330      	adds	r3, #48	@ 0x30
 8010534:	ea54 0105 	orrs.w	r1, r4, r5
 8010538:	464a      	mov	r2, r9
 801053a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801053e:	d1f2      	bne.n	8010526 <_vfiprintf_r+0x8ca>
 8010540:	9904      	ldr	r1, [sp, #16]
 8010542:	07c8      	lsls	r0, r1, #31
 8010544:	d506      	bpl.n	8010554 <_vfiprintf_r+0x8f8>
 8010546:	2b30      	cmp	r3, #48	@ 0x30
 8010548:	d004      	beq.n	8010554 <_vfiprintf_r+0x8f8>
 801054a:	2330      	movs	r3, #48	@ 0x30
 801054c:	f809 3c01 	strb.w	r3, [r9, #-1]
 8010550:	f1a2 0902 	sub.w	r9, r2, #2
 8010554:	ab3a      	add	r3, sp, #232	@ 0xe8
 8010556:	eba3 0309 	sub.w	r3, r3, r9
 801055a:	9c01      	ldr	r4, [sp, #4]
 801055c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010560:	9301      	str	r3, [sp, #4]
 8010562:	e5bb      	b.n	80100dc <_vfiprintf_r+0x480>
 8010564:	08015cc6 	.word	0x08015cc6
 8010568:	08015cb6 	.word	0x08015cb6

0801056c <__sbprintf>:
 801056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801056e:	461f      	mov	r7, r3
 8010570:	898b      	ldrh	r3, [r1, #12]
 8010572:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8010576:	f023 0302 	bic.w	r3, r3, #2
 801057a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801057e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8010580:	9319      	str	r3, [sp, #100]	@ 0x64
 8010582:	89cb      	ldrh	r3, [r1, #14]
 8010584:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010588:	69cb      	ldr	r3, [r1, #28]
 801058a:	9307      	str	r3, [sp, #28]
 801058c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 801058e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010590:	ab1a      	add	r3, sp, #104	@ 0x68
 8010592:	9300      	str	r3, [sp, #0]
 8010594:	9304      	str	r3, [sp, #16]
 8010596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801059a:	4615      	mov	r5, r2
 801059c:	4606      	mov	r6, r0
 801059e:	9302      	str	r3, [sp, #8]
 80105a0:	9305      	str	r3, [sp, #20]
 80105a2:	a816      	add	r0, sp, #88	@ 0x58
 80105a4:	2300      	movs	r3, #0
 80105a6:	460c      	mov	r4, r1
 80105a8:	9306      	str	r3, [sp, #24]
 80105aa:	f000 fc25 	bl	8010df8 <__retarget_lock_init_recursive>
 80105ae:	462a      	mov	r2, r5
 80105b0:	463b      	mov	r3, r7
 80105b2:	4669      	mov	r1, sp
 80105b4:	4630      	mov	r0, r6
 80105b6:	f7ff fb51 	bl	800fc5c <_vfiprintf_r>
 80105ba:	1e05      	subs	r5, r0, #0
 80105bc:	db07      	blt.n	80105ce <__sbprintf+0x62>
 80105be:	4669      	mov	r1, sp
 80105c0:	4630      	mov	r0, r6
 80105c2:	f000 f89b 	bl	80106fc <_fflush_r>
 80105c6:	2800      	cmp	r0, #0
 80105c8:	bf18      	it	ne
 80105ca:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 80105ce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80105d2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80105d4:	065b      	lsls	r3, r3, #25
 80105d6:	bf42      	ittt	mi
 80105d8:	89a3      	ldrhmi	r3, [r4, #12]
 80105da:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80105de:	81a3      	strhmi	r3, [r4, #12]
 80105e0:	f000 fc0b 	bl	8010dfa <__retarget_lock_close_recursive>
 80105e4:	4628      	mov	r0, r5
 80105e6:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80105ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080105ec <__sflush_r>:
 80105ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105f0:	4605      	mov	r5, r0
 80105f2:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80105f6:	0706      	lsls	r6, r0, #28
 80105f8:	460c      	mov	r4, r1
 80105fa:	d457      	bmi.n	80106ac <__sflush_r+0xc0>
 80105fc:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8010600:	818b      	strh	r3, [r1, #12]
 8010602:	684b      	ldr	r3, [r1, #4]
 8010604:	2b00      	cmp	r3, #0
 8010606:	dc02      	bgt.n	801060e <__sflush_r+0x22>
 8010608:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801060a:	2b00      	cmp	r3, #0
 801060c:	dd4c      	ble.n	80106a8 <__sflush_r+0xbc>
 801060e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010610:	2e00      	cmp	r6, #0
 8010612:	d049      	beq.n	80106a8 <__sflush_r+0xbc>
 8010614:	2300      	movs	r3, #0
 8010616:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 801061a:	682f      	ldr	r7, [r5, #0]
 801061c:	69e1      	ldr	r1, [r4, #28]
 801061e:	602b      	str	r3, [r5, #0]
 8010620:	d034      	beq.n	801068c <__sflush_r+0xa0>
 8010622:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8010624:	89a3      	ldrh	r3, [r4, #12]
 8010626:	0759      	lsls	r1, r3, #29
 8010628:	d505      	bpl.n	8010636 <__sflush_r+0x4a>
 801062a:	6863      	ldr	r3, [r4, #4]
 801062c:	1ad2      	subs	r2, r2, r3
 801062e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010630:	b10b      	cbz	r3, 8010636 <__sflush_r+0x4a>
 8010632:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010634:	1ad2      	subs	r2, r2, r3
 8010636:	2300      	movs	r3, #0
 8010638:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801063a:	69e1      	ldr	r1, [r4, #28]
 801063c:	4628      	mov	r0, r5
 801063e:	47b0      	blx	r6
 8010640:	1c43      	adds	r3, r0, #1
 8010642:	d106      	bne.n	8010652 <__sflush_r+0x66>
 8010644:	682a      	ldr	r2, [r5, #0]
 8010646:	2a1d      	cmp	r2, #29
 8010648:	d848      	bhi.n	80106dc <__sflush_r+0xf0>
 801064a:	4b2b      	ldr	r3, [pc, #172]	@ (80106f8 <__sflush_r+0x10c>)
 801064c:	4113      	asrs	r3, r2
 801064e:	07de      	lsls	r6, r3, #31
 8010650:	d444      	bmi.n	80106dc <__sflush_r+0xf0>
 8010652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010656:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801065a:	81a2      	strh	r2, [r4, #12]
 801065c:	2200      	movs	r2, #0
 801065e:	6062      	str	r2, [r4, #4]
 8010660:	04d9      	lsls	r1, r3, #19
 8010662:	6922      	ldr	r2, [r4, #16]
 8010664:	6022      	str	r2, [r4, #0]
 8010666:	d504      	bpl.n	8010672 <__sflush_r+0x86>
 8010668:	1c42      	adds	r2, r0, #1
 801066a:	d101      	bne.n	8010670 <__sflush_r+0x84>
 801066c:	682b      	ldr	r3, [r5, #0]
 801066e:	b903      	cbnz	r3, 8010672 <__sflush_r+0x86>
 8010670:	6520      	str	r0, [r4, #80]	@ 0x50
 8010672:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010674:	602f      	str	r7, [r5, #0]
 8010676:	b1b9      	cbz	r1, 80106a8 <__sflush_r+0xbc>
 8010678:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801067c:	4299      	cmp	r1, r3
 801067e:	d002      	beq.n	8010686 <__sflush_r+0x9a>
 8010680:	4628      	mov	r0, r5
 8010682:	f001 fa45 	bl	8011b10 <_free_r>
 8010686:	2300      	movs	r3, #0
 8010688:	6323      	str	r3, [r4, #48]	@ 0x30
 801068a:	e00d      	b.n	80106a8 <__sflush_r+0xbc>
 801068c:	2301      	movs	r3, #1
 801068e:	4628      	mov	r0, r5
 8010690:	47b0      	blx	r6
 8010692:	4602      	mov	r2, r0
 8010694:	1c50      	adds	r0, r2, #1
 8010696:	d1c5      	bne.n	8010624 <__sflush_r+0x38>
 8010698:	682b      	ldr	r3, [r5, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d0c2      	beq.n	8010624 <__sflush_r+0x38>
 801069e:	2b1d      	cmp	r3, #29
 80106a0:	d001      	beq.n	80106a6 <__sflush_r+0xba>
 80106a2:	2b16      	cmp	r3, #22
 80106a4:	d11a      	bne.n	80106dc <__sflush_r+0xf0>
 80106a6:	602f      	str	r7, [r5, #0]
 80106a8:	2000      	movs	r0, #0
 80106aa:	e01e      	b.n	80106ea <__sflush_r+0xfe>
 80106ac:	690f      	ldr	r7, [r1, #16]
 80106ae:	2f00      	cmp	r7, #0
 80106b0:	d0fa      	beq.n	80106a8 <__sflush_r+0xbc>
 80106b2:	0783      	lsls	r3, r0, #30
 80106b4:	680e      	ldr	r6, [r1, #0]
 80106b6:	bf08      	it	eq
 80106b8:	694b      	ldreq	r3, [r1, #20]
 80106ba:	600f      	str	r7, [r1, #0]
 80106bc:	bf18      	it	ne
 80106be:	2300      	movne	r3, #0
 80106c0:	eba6 0807 	sub.w	r8, r6, r7
 80106c4:	608b      	str	r3, [r1, #8]
 80106c6:	f1b8 0f00 	cmp.w	r8, #0
 80106ca:	dded      	ble.n	80106a8 <__sflush_r+0xbc>
 80106cc:	69e1      	ldr	r1, [r4, #28]
 80106ce:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80106d0:	4643      	mov	r3, r8
 80106d2:	463a      	mov	r2, r7
 80106d4:	4628      	mov	r0, r5
 80106d6:	47b0      	blx	r6
 80106d8:	2800      	cmp	r0, #0
 80106da:	dc08      	bgt.n	80106ee <__sflush_r+0x102>
 80106dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106e4:	81a3      	strh	r3, [r4, #12]
 80106e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80106ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106ee:	4407      	add	r7, r0
 80106f0:	eba8 0800 	sub.w	r8, r8, r0
 80106f4:	e7e7      	b.n	80106c6 <__sflush_r+0xda>
 80106f6:	bf00      	nop
 80106f8:	dfbffffe 	.word	0xdfbffffe

080106fc <_fflush_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	460c      	mov	r4, r1
 8010700:	4605      	mov	r5, r0
 8010702:	b118      	cbz	r0, 801070c <_fflush_r+0x10>
 8010704:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010706:	b90b      	cbnz	r3, 801070c <_fflush_r+0x10>
 8010708:	f000 f8ca 	bl	80108a0 <__sinit>
 801070c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8010710:	b1b8      	cbz	r0, 8010742 <_fflush_r+0x46>
 8010712:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010714:	07db      	lsls	r3, r3, #31
 8010716:	d404      	bmi.n	8010722 <_fflush_r+0x26>
 8010718:	0581      	lsls	r1, r0, #22
 801071a:	d402      	bmi.n	8010722 <_fflush_r+0x26>
 801071c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801071e:	f000 fb6d 	bl	8010dfc <__retarget_lock_acquire_recursive>
 8010722:	4628      	mov	r0, r5
 8010724:	4621      	mov	r1, r4
 8010726:	f7ff ff61 	bl	80105ec <__sflush_r>
 801072a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801072c:	07da      	lsls	r2, r3, #31
 801072e:	4605      	mov	r5, r0
 8010730:	d405      	bmi.n	801073e <_fflush_r+0x42>
 8010732:	89a3      	ldrh	r3, [r4, #12]
 8010734:	059b      	lsls	r3, r3, #22
 8010736:	d402      	bmi.n	801073e <_fflush_r+0x42>
 8010738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801073a:	f000 fb60 	bl	8010dfe <__retarget_lock_release_recursive>
 801073e:	4628      	mov	r0, r5
 8010740:	bd38      	pop	{r3, r4, r5, pc}
 8010742:	4605      	mov	r5, r0
 8010744:	e7fb      	b.n	801073e <_fflush_r+0x42>
	...

08010748 <sprintf>:
 8010748:	b40e      	push	{r1, r2, r3}
 801074a:	b500      	push	{lr}
 801074c:	b09c      	sub	sp, #112	@ 0x70
 801074e:	ab1d      	add	r3, sp, #116	@ 0x74
 8010750:	9002      	str	r0, [sp, #8]
 8010752:	9006      	str	r0, [sp, #24]
 8010754:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010758:	4809      	ldr	r0, [pc, #36]	@ (8010780 <sprintf+0x38>)
 801075a:	9107      	str	r1, [sp, #28]
 801075c:	9104      	str	r1, [sp, #16]
 801075e:	4909      	ldr	r1, [pc, #36]	@ (8010784 <sprintf+0x3c>)
 8010760:	f853 2b04 	ldr.w	r2, [r3], #4
 8010764:	9105      	str	r1, [sp, #20]
 8010766:	6800      	ldr	r0, [r0, #0]
 8010768:	9301      	str	r3, [sp, #4]
 801076a:	a902      	add	r1, sp, #8
 801076c:	f001 fcdc 	bl	8012128 <_svfprintf_r>
 8010770:	9b02      	ldr	r3, [sp, #8]
 8010772:	2200      	movs	r2, #0
 8010774:	701a      	strb	r2, [r3, #0]
 8010776:	b01c      	add	sp, #112	@ 0x70
 8010778:	f85d eb04 	ldr.w	lr, [sp], #4
 801077c:	b003      	add	sp, #12
 801077e:	4770      	bx	lr
 8010780:	24000188 	.word	0x24000188
 8010784:	ffff0208 	.word	0xffff0208

08010788 <std>:
 8010788:	2300      	movs	r3, #0
 801078a:	b510      	push	{r4, lr}
 801078c:	4604      	mov	r4, r0
 801078e:	e9c0 3300 	strd	r3, r3, [r0]
 8010792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010796:	6083      	str	r3, [r0, #8]
 8010798:	8181      	strh	r1, [r0, #12]
 801079a:	6643      	str	r3, [r0, #100]	@ 0x64
 801079c:	81c2      	strh	r2, [r0, #14]
 801079e:	6183      	str	r3, [r0, #24]
 80107a0:	4619      	mov	r1, r3
 80107a2:	2208      	movs	r2, #8
 80107a4:	305c      	adds	r0, #92	@ 0x5c
 80107a6:	f000 fad7 	bl	8010d58 <memset>
 80107aa:	4b0d      	ldr	r3, [pc, #52]	@ (80107e0 <std+0x58>)
 80107ac:	6223      	str	r3, [r4, #32]
 80107ae:	4b0d      	ldr	r3, [pc, #52]	@ (80107e4 <std+0x5c>)
 80107b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80107b2:	4b0d      	ldr	r3, [pc, #52]	@ (80107e8 <std+0x60>)
 80107b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80107b6:	4b0d      	ldr	r3, [pc, #52]	@ (80107ec <std+0x64>)
 80107b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80107ba:	4b0d      	ldr	r3, [pc, #52]	@ (80107f0 <std+0x68>)
 80107bc:	61e4      	str	r4, [r4, #28]
 80107be:	429c      	cmp	r4, r3
 80107c0:	d006      	beq.n	80107d0 <std+0x48>
 80107c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80107c6:	4294      	cmp	r4, r2
 80107c8:	d002      	beq.n	80107d0 <std+0x48>
 80107ca:	33d0      	adds	r3, #208	@ 0xd0
 80107cc:	429c      	cmp	r4, r3
 80107ce:	d105      	bne.n	80107dc <std+0x54>
 80107d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80107d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107d8:	f000 bb0e 	b.w	8010df8 <__retarget_lock_init_recursive>
 80107dc:	bd10      	pop	{r4, pc}
 80107de:	bf00      	nop
 80107e0:	08013f75 	.word	0x08013f75
 80107e4:	08013f97 	.word	0x08013f97
 80107e8:	08013fcf 	.word	0x08013fcf
 80107ec:	08013ff3 	.word	0x08013ff3
 80107f0:	24024c20 	.word	0x24024c20

080107f4 <stdio_exit_handler>:
 80107f4:	4a02      	ldr	r2, [pc, #8]	@ (8010800 <stdio_exit_handler+0xc>)
 80107f6:	4903      	ldr	r1, [pc, #12]	@ (8010804 <stdio_exit_handler+0x10>)
 80107f8:	4803      	ldr	r0, [pc, #12]	@ (8010808 <stdio_exit_handler+0x14>)
 80107fa:	f000 b9b5 	b.w	8010b68 <_fwalk_sglue>
 80107fe:	bf00      	nop
 8010800:	24000010 	.word	0x24000010
 8010804:	08013b79 	.word	0x08013b79
 8010808:	24000190 	.word	0x24000190

0801080c <cleanup_stdio>:
 801080c:	6841      	ldr	r1, [r0, #4]
 801080e:	4b0c      	ldr	r3, [pc, #48]	@ (8010840 <cleanup_stdio+0x34>)
 8010810:	4299      	cmp	r1, r3
 8010812:	b510      	push	{r4, lr}
 8010814:	4604      	mov	r4, r0
 8010816:	d001      	beq.n	801081c <cleanup_stdio+0x10>
 8010818:	f003 f9ae 	bl	8013b78 <_fclose_r>
 801081c:	68a1      	ldr	r1, [r4, #8]
 801081e:	4b09      	ldr	r3, [pc, #36]	@ (8010844 <cleanup_stdio+0x38>)
 8010820:	4299      	cmp	r1, r3
 8010822:	d002      	beq.n	801082a <cleanup_stdio+0x1e>
 8010824:	4620      	mov	r0, r4
 8010826:	f003 f9a7 	bl	8013b78 <_fclose_r>
 801082a:	68e1      	ldr	r1, [r4, #12]
 801082c:	4b06      	ldr	r3, [pc, #24]	@ (8010848 <cleanup_stdio+0x3c>)
 801082e:	4299      	cmp	r1, r3
 8010830:	d004      	beq.n	801083c <cleanup_stdio+0x30>
 8010832:	4620      	mov	r0, r4
 8010834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010838:	f003 b99e 	b.w	8013b78 <_fclose_r>
 801083c:	bd10      	pop	{r4, pc}
 801083e:	bf00      	nop
 8010840:	24024c20 	.word	0x24024c20
 8010844:	24024c88 	.word	0x24024c88
 8010848:	24024cf0 	.word	0x24024cf0

0801084c <global_stdio_init.part.0>:
 801084c:	b510      	push	{r4, lr}
 801084e:	4b0b      	ldr	r3, [pc, #44]	@ (801087c <global_stdio_init.part.0+0x30>)
 8010850:	4c0b      	ldr	r4, [pc, #44]	@ (8010880 <global_stdio_init.part.0+0x34>)
 8010852:	4a0c      	ldr	r2, [pc, #48]	@ (8010884 <global_stdio_init.part.0+0x38>)
 8010854:	601a      	str	r2, [r3, #0]
 8010856:	4620      	mov	r0, r4
 8010858:	2200      	movs	r2, #0
 801085a:	2104      	movs	r1, #4
 801085c:	f7ff ff94 	bl	8010788 <std>
 8010860:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010864:	2201      	movs	r2, #1
 8010866:	2109      	movs	r1, #9
 8010868:	f7ff ff8e 	bl	8010788 <std>
 801086c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010870:	2202      	movs	r2, #2
 8010872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010876:	2112      	movs	r1, #18
 8010878:	f7ff bf86 	b.w	8010788 <std>
 801087c:	24024d58 	.word	0x24024d58
 8010880:	24024c20 	.word	0x24024c20
 8010884:	080107f5 	.word	0x080107f5

08010888 <__sfp_lock_acquire>:
 8010888:	4801      	ldr	r0, [pc, #4]	@ (8010890 <__sfp_lock_acquire+0x8>)
 801088a:	f000 bab7 	b.w	8010dfc <__retarget_lock_acquire_recursive>
 801088e:	bf00      	nop
 8010890:	24024d5e 	.word	0x24024d5e

08010894 <__sfp_lock_release>:
 8010894:	4801      	ldr	r0, [pc, #4]	@ (801089c <__sfp_lock_release+0x8>)
 8010896:	f000 bab2 	b.w	8010dfe <__retarget_lock_release_recursive>
 801089a:	bf00      	nop
 801089c:	24024d5e 	.word	0x24024d5e

080108a0 <__sinit>:
 80108a0:	b510      	push	{r4, lr}
 80108a2:	4604      	mov	r4, r0
 80108a4:	f7ff fff0 	bl	8010888 <__sfp_lock_acquire>
 80108a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80108aa:	b11b      	cbz	r3, 80108b4 <__sinit+0x14>
 80108ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108b0:	f7ff bff0 	b.w	8010894 <__sfp_lock_release>
 80108b4:	4b04      	ldr	r3, [pc, #16]	@ (80108c8 <__sinit+0x28>)
 80108b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80108b8:	4b04      	ldr	r3, [pc, #16]	@ (80108cc <__sinit+0x2c>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d1f5      	bne.n	80108ac <__sinit+0xc>
 80108c0:	f7ff ffc4 	bl	801084c <global_stdio_init.part.0>
 80108c4:	e7f2      	b.n	80108ac <__sinit+0xc>
 80108c6:	bf00      	nop
 80108c8:	0801080d 	.word	0x0801080d
 80108cc:	24024d58 	.word	0x24024d58

080108d0 <__sfvwrite_r>:
 80108d0:	6893      	ldr	r3, [r2, #8]
 80108d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d6:	4606      	mov	r6, r0
 80108d8:	460c      	mov	r4, r1
 80108da:	4691      	mov	r9, r2
 80108dc:	b91b      	cbnz	r3, 80108e6 <__sfvwrite_r+0x16>
 80108de:	2000      	movs	r0, #0
 80108e0:	b003      	add	sp, #12
 80108e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e6:	898b      	ldrh	r3, [r1, #12]
 80108e8:	0718      	lsls	r0, r3, #28
 80108ea:	d550      	bpl.n	801098e <__sfvwrite_r+0xbe>
 80108ec:	690b      	ldr	r3, [r1, #16]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d04d      	beq.n	801098e <__sfvwrite_r+0xbe>
 80108f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108f6:	f8d9 8000 	ldr.w	r8, [r9]
 80108fa:	f013 0702 	ands.w	r7, r3, #2
 80108fe:	d16b      	bne.n	80109d8 <__sfvwrite_r+0x108>
 8010900:	f013 0301 	ands.w	r3, r3, #1
 8010904:	f000 809c 	beq.w	8010a40 <__sfvwrite_r+0x170>
 8010908:	4638      	mov	r0, r7
 801090a:	46ba      	mov	sl, r7
 801090c:	46bb      	mov	fp, r7
 801090e:	f1bb 0f00 	cmp.w	fp, #0
 8010912:	f000 8103 	beq.w	8010b1c <__sfvwrite_r+0x24c>
 8010916:	b950      	cbnz	r0, 801092e <__sfvwrite_r+0x5e>
 8010918:	465a      	mov	r2, fp
 801091a:	210a      	movs	r1, #10
 801091c:	4650      	mov	r0, sl
 801091e:	f7ef fcdf 	bl	80002e0 <memchr>
 8010922:	2800      	cmp	r0, #0
 8010924:	f000 8100 	beq.w	8010b28 <__sfvwrite_r+0x258>
 8010928:	3001      	adds	r0, #1
 801092a:	eba0 070a 	sub.w	r7, r0, sl
 801092e:	6820      	ldr	r0, [r4, #0]
 8010930:	6921      	ldr	r1, [r4, #16]
 8010932:	68a5      	ldr	r5, [r4, #8]
 8010934:	6963      	ldr	r3, [r4, #20]
 8010936:	455f      	cmp	r7, fp
 8010938:	463a      	mov	r2, r7
 801093a:	bf28      	it	cs
 801093c:	465a      	movcs	r2, fp
 801093e:	4288      	cmp	r0, r1
 8010940:	f240 80f5 	bls.w	8010b2e <__sfvwrite_r+0x25e>
 8010944:	441d      	add	r5, r3
 8010946:	42aa      	cmp	r2, r5
 8010948:	f340 80f1 	ble.w	8010b2e <__sfvwrite_r+0x25e>
 801094c:	4651      	mov	r1, sl
 801094e:	462a      	mov	r2, r5
 8010950:	f000 f9e8 	bl	8010d24 <memmove>
 8010954:	6823      	ldr	r3, [r4, #0]
 8010956:	442b      	add	r3, r5
 8010958:	6023      	str	r3, [r4, #0]
 801095a:	4621      	mov	r1, r4
 801095c:	4630      	mov	r0, r6
 801095e:	f7ff fecd 	bl	80106fc <_fflush_r>
 8010962:	2800      	cmp	r0, #0
 8010964:	d167      	bne.n	8010a36 <__sfvwrite_r+0x166>
 8010966:	1b7f      	subs	r7, r7, r5
 8010968:	f040 80f9 	bne.w	8010b5e <__sfvwrite_r+0x28e>
 801096c:	4621      	mov	r1, r4
 801096e:	4630      	mov	r0, r6
 8010970:	f7ff fec4 	bl	80106fc <_fflush_r>
 8010974:	2800      	cmp	r0, #0
 8010976:	d15e      	bne.n	8010a36 <__sfvwrite_r+0x166>
 8010978:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801097c:	1b5b      	subs	r3, r3, r5
 801097e:	44aa      	add	sl, r5
 8010980:	ebab 0b05 	sub.w	fp, fp, r5
 8010984:	f8c9 3008 	str.w	r3, [r9, #8]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d1c0      	bne.n	801090e <__sfvwrite_r+0x3e>
 801098c:	e7a7      	b.n	80108de <__sfvwrite_r+0xe>
 801098e:	4621      	mov	r1, r4
 8010990:	4630      	mov	r0, r6
 8010992:	f000 f907 	bl	8010ba4 <__swsetup_r>
 8010996:	2800      	cmp	r0, #0
 8010998:	d0ab      	beq.n	80108f2 <__sfvwrite_r+0x22>
 801099a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801099e:	e79f      	b.n	80108e0 <__sfvwrite_r+0x10>
 80109a0:	e9d8 a500 	ldrd	sl, r5, [r8]
 80109a4:	f108 0808 	add.w	r8, r8, #8
 80109a8:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80109ac:	69e1      	ldr	r1, [r4, #28]
 80109ae:	2d00      	cmp	r5, #0
 80109b0:	d0f6      	beq.n	80109a0 <__sfvwrite_r+0xd0>
 80109b2:	42bd      	cmp	r5, r7
 80109b4:	462b      	mov	r3, r5
 80109b6:	4652      	mov	r2, sl
 80109b8:	bf28      	it	cs
 80109ba:	463b      	movcs	r3, r7
 80109bc:	4630      	mov	r0, r6
 80109be:	47d8      	blx	fp
 80109c0:	2800      	cmp	r0, #0
 80109c2:	dd38      	ble.n	8010a36 <__sfvwrite_r+0x166>
 80109c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80109c8:	1a1b      	subs	r3, r3, r0
 80109ca:	4482      	add	sl, r0
 80109cc:	1a2d      	subs	r5, r5, r0
 80109ce:	f8c9 3008 	str.w	r3, [r9, #8]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d1e8      	bne.n	80109a8 <__sfvwrite_r+0xd8>
 80109d6:	e782      	b.n	80108de <__sfvwrite_r+0xe>
 80109d8:	f04f 0a00 	mov.w	sl, #0
 80109dc:	4f61      	ldr	r7, [pc, #388]	@ (8010b64 <__sfvwrite_r+0x294>)
 80109de:	4655      	mov	r5, sl
 80109e0:	e7e2      	b.n	80109a8 <__sfvwrite_r+0xd8>
 80109e2:	e9d8 7a00 	ldrd	r7, sl, [r8]
 80109e6:	f108 0808 	add.w	r8, r8, #8
 80109ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109ee:	6820      	ldr	r0, [r4, #0]
 80109f0:	68a2      	ldr	r2, [r4, #8]
 80109f2:	f1ba 0f00 	cmp.w	sl, #0
 80109f6:	d0f4      	beq.n	80109e2 <__sfvwrite_r+0x112>
 80109f8:	0599      	lsls	r1, r3, #22
 80109fa:	d563      	bpl.n	8010ac4 <__sfvwrite_r+0x1f4>
 80109fc:	4552      	cmp	r2, sl
 80109fe:	d836      	bhi.n	8010a6e <__sfvwrite_r+0x19e>
 8010a00:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8010a04:	d033      	beq.n	8010a6e <__sfvwrite_r+0x19e>
 8010a06:	6921      	ldr	r1, [r4, #16]
 8010a08:	6965      	ldr	r5, [r4, #20]
 8010a0a:	eba0 0b01 	sub.w	fp, r0, r1
 8010a0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a16:	f10b 0201 	add.w	r2, fp, #1
 8010a1a:	106d      	asrs	r5, r5, #1
 8010a1c:	4452      	add	r2, sl
 8010a1e:	4295      	cmp	r5, r2
 8010a20:	bf38      	it	cc
 8010a22:	4615      	movcc	r5, r2
 8010a24:	055b      	lsls	r3, r3, #21
 8010a26:	d53d      	bpl.n	8010aa4 <__sfvwrite_r+0x1d4>
 8010a28:	4629      	mov	r1, r5
 8010a2a:	4630      	mov	r0, r6
 8010a2c:	f001 f930 	bl	8011c90 <_malloc_r>
 8010a30:	b948      	cbnz	r0, 8010a46 <__sfvwrite_r+0x176>
 8010a32:	230c      	movs	r3, #12
 8010a34:	6033      	str	r3, [r6, #0]
 8010a36:	89a3      	ldrh	r3, [r4, #12]
 8010a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a3c:	81a3      	strh	r3, [r4, #12]
 8010a3e:	e7ac      	b.n	801099a <__sfvwrite_r+0xca>
 8010a40:	461f      	mov	r7, r3
 8010a42:	469a      	mov	sl, r3
 8010a44:	e7d1      	b.n	80109ea <__sfvwrite_r+0x11a>
 8010a46:	465a      	mov	r2, fp
 8010a48:	6921      	ldr	r1, [r4, #16]
 8010a4a:	9001      	str	r0, [sp, #4]
 8010a4c:	f000 f9d8 	bl	8010e00 <memcpy>
 8010a50:	89a2      	ldrh	r2, [r4, #12]
 8010a52:	9b01      	ldr	r3, [sp, #4]
 8010a54:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8010a58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8010a5c:	81a2      	strh	r2, [r4, #12]
 8010a5e:	6123      	str	r3, [r4, #16]
 8010a60:	6165      	str	r5, [r4, #20]
 8010a62:	445b      	add	r3, fp
 8010a64:	eba5 050b 	sub.w	r5, r5, fp
 8010a68:	6023      	str	r3, [r4, #0]
 8010a6a:	4652      	mov	r2, sl
 8010a6c:	60a5      	str	r5, [r4, #8]
 8010a6e:	4552      	cmp	r2, sl
 8010a70:	bf28      	it	cs
 8010a72:	4652      	movcs	r2, sl
 8010a74:	6820      	ldr	r0, [r4, #0]
 8010a76:	9201      	str	r2, [sp, #4]
 8010a78:	4639      	mov	r1, r7
 8010a7a:	f000 f953 	bl	8010d24 <memmove>
 8010a7e:	68a3      	ldr	r3, [r4, #8]
 8010a80:	9a01      	ldr	r2, [sp, #4]
 8010a82:	1a9b      	subs	r3, r3, r2
 8010a84:	60a3      	str	r3, [r4, #8]
 8010a86:	6823      	ldr	r3, [r4, #0]
 8010a88:	4413      	add	r3, r2
 8010a8a:	4655      	mov	r5, sl
 8010a8c:	6023      	str	r3, [r4, #0]
 8010a8e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010a92:	1b5b      	subs	r3, r3, r5
 8010a94:	442f      	add	r7, r5
 8010a96:	ebaa 0a05 	sub.w	sl, sl, r5
 8010a9a:	f8c9 3008 	str.w	r3, [r9, #8]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d1a3      	bne.n	80109ea <__sfvwrite_r+0x11a>
 8010aa2:	e71c      	b.n	80108de <__sfvwrite_r+0xe>
 8010aa4:	462a      	mov	r2, r5
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	f003 f8bc 	bl	8013c24 <_realloc_r>
 8010aac:	4603      	mov	r3, r0
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	d1d5      	bne.n	8010a5e <__sfvwrite_r+0x18e>
 8010ab2:	6921      	ldr	r1, [r4, #16]
 8010ab4:	4630      	mov	r0, r6
 8010ab6:	f001 f82b 	bl	8011b10 <_free_r>
 8010aba:	89a3      	ldrh	r3, [r4, #12]
 8010abc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010ac0:	81a3      	strh	r3, [r4, #12]
 8010ac2:	e7b6      	b.n	8010a32 <__sfvwrite_r+0x162>
 8010ac4:	6923      	ldr	r3, [r4, #16]
 8010ac6:	4283      	cmp	r3, r0
 8010ac8:	d302      	bcc.n	8010ad0 <__sfvwrite_r+0x200>
 8010aca:	6961      	ldr	r1, [r4, #20]
 8010acc:	4551      	cmp	r1, sl
 8010ace:	d915      	bls.n	8010afc <__sfvwrite_r+0x22c>
 8010ad0:	4552      	cmp	r2, sl
 8010ad2:	bf28      	it	cs
 8010ad4:	4652      	movcs	r2, sl
 8010ad6:	4639      	mov	r1, r7
 8010ad8:	4615      	mov	r5, r2
 8010ada:	f000 f923 	bl	8010d24 <memmove>
 8010ade:	68a3      	ldr	r3, [r4, #8]
 8010ae0:	6822      	ldr	r2, [r4, #0]
 8010ae2:	1b5b      	subs	r3, r3, r5
 8010ae4:	442a      	add	r2, r5
 8010ae6:	60a3      	str	r3, [r4, #8]
 8010ae8:	6022      	str	r2, [r4, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d1cf      	bne.n	8010a8e <__sfvwrite_r+0x1be>
 8010aee:	4621      	mov	r1, r4
 8010af0:	4630      	mov	r0, r6
 8010af2:	f7ff fe03 	bl	80106fc <_fflush_r>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	d0c9      	beq.n	8010a8e <__sfvwrite_r+0x1be>
 8010afa:	e79c      	b.n	8010a36 <__sfvwrite_r+0x166>
 8010afc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010b00:	4553      	cmp	r3, sl
 8010b02:	bf28      	it	cs
 8010b04:	4653      	movcs	r3, sl
 8010b06:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8010b08:	fb93 f3f1 	sdiv	r3, r3, r1
 8010b0c:	463a      	mov	r2, r7
 8010b0e:	434b      	muls	r3, r1
 8010b10:	4630      	mov	r0, r6
 8010b12:	69e1      	ldr	r1, [r4, #28]
 8010b14:	47a8      	blx	r5
 8010b16:	1e05      	subs	r5, r0, #0
 8010b18:	dcb9      	bgt.n	8010a8e <__sfvwrite_r+0x1be>
 8010b1a:	e78c      	b.n	8010a36 <__sfvwrite_r+0x166>
 8010b1c:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8010b20:	2000      	movs	r0, #0
 8010b22:	f108 0808 	add.w	r8, r8, #8
 8010b26:	e6f2      	b.n	801090e <__sfvwrite_r+0x3e>
 8010b28:	f10b 0701 	add.w	r7, fp, #1
 8010b2c:	e6ff      	b.n	801092e <__sfvwrite_r+0x5e>
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	dc08      	bgt.n	8010b44 <__sfvwrite_r+0x274>
 8010b32:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8010b34:	69e1      	ldr	r1, [r4, #28]
 8010b36:	4652      	mov	r2, sl
 8010b38:	4630      	mov	r0, r6
 8010b3a:	47a8      	blx	r5
 8010b3c:	1e05      	subs	r5, r0, #0
 8010b3e:	f73f af12 	bgt.w	8010966 <__sfvwrite_r+0x96>
 8010b42:	e778      	b.n	8010a36 <__sfvwrite_r+0x166>
 8010b44:	4651      	mov	r1, sl
 8010b46:	9201      	str	r2, [sp, #4]
 8010b48:	f000 f8ec 	bl	8010d24 <memmove>
 8010b4c:	9a01      	ldr	r2, [sp, #4]
 8010b4e:	68a3      	ldr	r3, [r4, #8]
 8010b50:	1a9b      	subs	r3, r3, r2
 8010b52:	60a3      	str	r3, [r4, #8]
 8010b54:	6823      	ldr	r3, [r4, #0]
 8010b56:	4413      	add	r3, r2
 8010b58:	6023      	str	r3, [r4, #0]
 8010b5a:	4615      	mov	r5, r2
 8010b5c:	e703      	b.n	8010966 <__sfvwrite_r+0x96>
 8010b5e:	2001      	movs	r0, #1
 8010b60:	e70a      	b.n	8010978 <__sfvwrite_r+0xa8>
 8010b62:	bf00      	nop
 8010b64:	7ffffc00 	.word	0x7ffffc00

08010b68 <_fwalk_sglue>:
 8010b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b6c:	4607      	mov	r7, r0
 8010b6e:	4688      	mov	r8, r1
 8010b70:	4614      	mov	r4, r2
 8010b72:	2600      	movs	r6, #0
 8010b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b78:	f1b9 0901 	subs.w	r9, r9, #1
 8010b7c:	d505      	bpl.n	8010b8a <_fwalk_sglue+0x22>
 8010b7e:	6824      	ldr	r4, [r4, #0]
 8010b80:	2c00      	cmp	r4, #0
 8010b82:	d1f7      	bne.n	8010b74 <_fwalk_sglue+0xc>
 8010b84:	4630      	mov	r0, r6
 8010b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b8a:	89ab      	ldrh	r3, [r5, #12]
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	d907      	bls.n	8010ba0 <_fwalk_sglue+0x38>
 8010b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b94:	3301      	adds	r3, #1
 8010b96:	d003      	beq.n	8010ba0 <_fwalk_sglue+0x38>
 8010b98:	4629      	mov	r1, r5
 8010b9a:	4638      	mov	r0, r7
 8010b9c:	47c0      	blx	r8
 8010b9e:	4306      	orrs	r6, r0
 8010ba0:	3568      	adds	r5, #104	@ 0x68
 8010ba2:	e7e9      	b.n	8010b78 <_fwalk_sglue+0x10>

08010ba4 <__swsetup_r>:
 8010ba4:	b538      	push	{r3, r4, r5, lr}
 8010ba6:	4b29      	ldr	r3, [pc, #164]	@ (8010c4c <__swsetup_r+0xa8>)
 8010ba8:	4605      	mov	r5, r0
 8010baa:	6818      	ldr	r0, [r3, #0]
 8010bac:	460c      	mov	r4, r1
 8010bae:	b118      	cbz	r0, 8010bb8 <__swsetup_r+0x14>
 8010bb0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010bb2:	b90b      	cbnz	r3, 8010bb8 <__swsetup_r+0x14>
 8010bb4:	f7ff fe74 	bl	80108a0 <__sinit>
 8010bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bbc:	0719      	lsls	r1, r3, #28
 8010bbe:	d422      	bmi.n	8010c06 <__swsetup_r+0x62>
 8010bc0:	06da      	lsls	r2, r3, #27
 8010bc2:	d407      	bmi.n	8010bd4 <__swsetup_r+0x30>
 8010bc4:	2209      	movs	r2, #9
 8010bc6:	602a      	str	r2, [r5, #0]
 8010bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bcc:	81a3      	strh	r3, [r4, #12]
 8010bce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010bd2:	e033      	b.n	8010c3c <__swsetup_r+0x98>
 8010bd4:	0758      	lsls	r0, r3, #29
 8010bd6:	d512      	bpl.n	8010bfe <__swsetup_r+0x5a>
 8010bd8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010bda:	b141      	cbz	r1, 8010bee <__swsetup_r+0x4a>
 8010bdc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8010be0:	4299      	cmp	r1, r3
 8010be2:	d002      	beq.n	8010bea <__swsetup_r+0x46>
 8010be4:	4628      	mov	r0, r5
 8010be6:	f000 ff93 	bl	8011b10 <_free_r>
 8010bea:	2300      	movs	r3, #0
 8010bec:	6323      	str	r3, [r4, #48]	@ 0x30
 8010bee:	89a3      	ldrh	r3, [r4, #12]
 8010bf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010bf4:	81a3      	strh	r3, [r4, #12]
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	6063      	str	r3, [r4, #4]
 8010bfa:	6923      	ldr	r3, [r4, #16]
 8010bfc:	6023      	str	r3, [r4, #0]
 8010bfe:	89a3      	ldrh	r3, [r4, #12]
 8010c00:	f043 0308 	orr.w	r3, r3, #8
 8010c04:	81a3      	strh	r3, [r4, #12]
 8010c06:	6923      	ldr	r3, [r4, #16]
 8010c08:	b94b      	cbnz	r3, 8010c1e <__swsetup_r+0x7a>
 8010c0a:	89a3      	ldrh	r3, [r4, #12]
 8010c0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c14:	d003      	beq.n	8010c1e <__swsetup_r+0x7a>
 8010c16:	4621      	mov	r1, r4
 8010c18:	4628      	mov	r0, r5
 8010c1a:	f002 fc31 	bl	8013480 <__smakebuf_r>
 8010c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c22:	f013 0201 	ands.w	r2, r3, #1
 8010c26:	d00a      	beq.n	8010c3e <__swsetup_r+0x9a>
 8010c28:	2200      	movs	r2, #0
 8010c2a:	60a2      	str	r2, [r4, #8]
 8010c2c:	6962      	ldr	r2, [r4, #20]
 8010c2e:	4252      	negs	r2, r2
 8010c30:	61a2      	str	r2, [r4, #24]
 8010c32:	6922      	ldr	r2, [r4, #16]
 8010c34:	b942      	cbnz	r2, 8010c48 <__swsetup_r+0xa4>
 8010c36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010c3a:	d1c5      	bne.n	8010bc8 <__swsetup_r+0x24>
 8010c3c:	bd38      	pop	{r3, r4, r5, pc}
 8010c3e:	0799      	lsls	r1, r3, #30
 8010c40:	bf58      	it	pl
 8010c42:	6962      	ldrpl	r2, [r4, #20]
 8010c44:	60a2      	str	r2, [r4, #8]
 8010c46:	e7f4      	b.n	8010c32 <__swsetup_r+0x8e>
 8010c48:	2000      	movs	r0, #0
 8010c4a:	e7f7      	b.n	8010c3c <__swsetup_r+0x98>
 8010c4c:	24000188 	.word	0x24000188

08010c50 <__fputwc>:
 8010c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c54:	4680      	mov	r8, r0
 8010c56:	460f      	mov	r7, r1
 8010c58:	4614      	mov	r4, r2
 8010c5a:	f000 f899 	bl	8010d90 <__locale_mb_cur_max>
 8010c5e:	2801      	cmp	r0, #1
 8010c60:	4605      	mov	r5, r0
 8010c62:	d11b      	bne.n	8010c9c <__fputwc+0x4c>
 8010c64:	1e7b      	subs	r3, r7, #1
 8010c66:	2bfe      	cmp	r3, #254	@ 0xfe
 8010c68:	d818      	bhi.n	8010c9c <__fputwc+0x4c>
 8010c6a:	f88d 7004 	strb.w	r7, [sp, #4]
 8010c6e:	2600      	movs	r6, #0
 8010c70:	f10d 0904 	add.w	r9, sp, #4
 8010c74:	42ae      	cmp	r6, r5
 8010c76:	d021      	beq.n	8010cbc <__fputwc+0x6c>
 8010c78:	68a3      	ldr	r3, [r4, #8]
 8010c7a:	f816 1009 	ldrb.w	r1, [r6, r9]
 8010c7e:	3b01      	subs	r3, #1
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	60a3      	str	r3, [r4, #8]
 8010c84:	da04      	bge.n	8010c90 <__fputwc+0x40>
 8010c86:	69a2      	ldr	r2, [r4, #24]
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	db1b      	blt.n	8010cc4 <__fputwc+0x74>
 8010c8c:	290a      	cmp	r1, #10
 8010c8e:	d019      	beq.n	8010cc4 <__fputwc+0x74>
 8010c90:	6823      	ldr	r3, [r4, #0]
 8010c92:	1c5a      	adds	r2, r3, #1
 8010c94:	6022      	str	r2, [r4, #0]
 8010c96:	7019      	strb	r1, [r3, #0]
 8010c98:	3601      	adds	r6, #1
 8010c9a:	e7eb      	b.n	8010c74 <__fputwc+0x24>
 8010c9c:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8010ca0:	463a      	mov	r2, r7
 8010ca2:	a901      	add	r1, sp, #4
 8010ca4:	4640      	mov	r0, r8
 8010ca6:	f000 f8b9 	bl	8010e1c <_wcrtomb_r>
 8010caa:	1c43      	adds	r3, r0, #1
 8010cac:	4605      	mov	r5, r0
 8010cae:	d1de      	bne.n	8010c6e <__fputwc+0x1e>
 8010cb0:	89a3      	ldrh	r3, [r4, #12]
 8010cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cb6:	81a3      	strh	r3, [r4, #12]
 8010cb8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010cbc:	4638      	mov	r0, r7
 8010cbe:	b003      	add	sp, #12
 8010cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cc4:	4622      	mov	r2, r4
 8010cc6:	4640      	mov	r0, r8
 8010cc8:	f003 f9a4 	bl	8014014 <__swbuf_r>
 8010ccc:	3001      	adds	r0, #1
 8010cce:	d1e3      	bne.n	8010c98 <__fputwc+0x48>
 8010cd0:	e7f2      	b.n	8010cb8 <__fputwc+0x68>

08010cd2 <_fputwc_r>:
 8010cd2:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8010cd4:	07db      	lsls	r3, r3, #31
 8010cd6:	b570      	push	{r4, r5, r6, lr}
 8010cd8:	4605      	mov	r5, r0
 8010cda:	460e      	mov	r6, r1
 8010cdc:	4614      	mov	r4, r2
 8010cde:	d405      	bmi.n	8010cec <_fputwc_r+0x1a>
 8010ce0:	8993      	ldrh	r3, [r2, #12]
 8010ce2:	0598      	lsls	r0, r3, #22
 8010ce4:	d402      	bmi.n	8010cec <_fputwc_r+0x1a>
 8010ce6:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8010ce8:	f000 f888 	bl	8010dfc <__retarget_lock_acquire_recursive>
 8010cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cf0:	0499      	lsls	r1, r3, #18
 8010cf2:	d406      	bmi.n	8010d02 <_fputwc_r+0x30>
 8010cf4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010cf8:	81a3      	strh	r3, [r4, #12]
 8010cfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cfc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010d00:	6663      	str	r3, [r4, #100]	@ 0x64
 8010d02:	4622      	mov	r2, r4
 8010d04:	4628      	mov	r0, r5
 8010d06:	4631      	mov	r1, r6
 8010d08:	f7ff ffa2 	bl	8010c50 <__fputwc>
 8010d0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d0e:	07da      	lsls	r2, r3, #31
 8010d10:	4605      	mov	r5, r0
 8010d12:	d405      	bmi.n	8010d20 <_fputwc_r+0x4e>
 8010d14:	89a3      	ldrh	r3, [r4, #12]
 8010d16:	059b      	lsls	r3, r3, #22
 8010d18:	d402      	bmi.n	8010d20 <_fputwc_r+0x4e>
 8010d1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d1c:	f000 f86f 	bl	8010dfe <__retarget_lock_release_recursive>
 8010d20:	4628      	mov	r0, r5
 8010d22:	bd70      	pop	{r4, r5, r6, pc}

08010d24 <memmove>:
 8010d24:	4288      	cmp	r0, r1
 8010d26:	b510      	push	{r4, lr}
 8010d28:	eb01 0402 	add.w	r4, r1, r2
 8010d2c:	d902      	bls.n	8010d34 <memmove+0x10>
 8010d2e:	4284      	cmp	r4, r0
 8010d30:	4623      	mov	r3, r4
 8010d32:	d807      	bhi.n	8010d44 <memmove+0x20>
 8010d34:	1e43      	subs	r3, r0, #1
 8010d36:	42a1      	cmp	r1, r4
 8010d38:	d008      	beq.n	8010d4c <memmove+0x28>
 8010d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d42:	e7f8      	b.n	8010d36 <memmove+0x12>
 8010d44:	4402      	add	r2, r0
 8010d46:	4601      	mov	r1, r0
 8010d48:	428a      	cmp	r2, r1
 8010d4a:	d100      	bne.n	8010d4e <memmove+0x2a>
 8010d4c:	bd10      	pop	{r4, pc}
 8010d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d56:	e7f7      	b.n	8010d48 <memmove+0x24>

08010d58 <memset>:
 8010d58:	4402      	add	r2, r0
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	4293      	cmp	r3, r2
 8010d5e:	d100      	bne.n	8010d62 <memset+0xa>
 8010d60:	4770      	bx	lr
 8010d62:	f803 1b01 	strb.w	r1, [r3], #1
 8010d66:	e7f9      	b.n	8010d5c <memset+0x4>

08010d68 <strncpy>:
 8010d68:	b510      	push	{r4, lr}
 8010d6a:	3901      	subs	r1, #1
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	b132      	cbz	r2, 8010d7e <strncpy+0x16>
 8010d70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010d74:	f803 4b01 	strb.w	r4, [r3], #1
 8010d78:	3a01      	subs	r2, #1
 8010d7a:	2c00      	cmp	r4, #0
 8010d7c:	d1f7      	bne.n	8010d6e <strncpy+0x6>
 8010d7e:	441a      	add	r2, r3
 8010d80:	2100      	movs	r1, #0
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d100      	bne.n	8010d88 <strncpy+0x20>
 8010d86:	bd10      	pop	{r4, pc}
 8010d88:	f803 1b01 	strb.w	r1, [r3], #1
 8010d8c:	e7f9      	b.n	8010d82 <strncpy+0x1a>
	...

08010d90 <__locale_mb_cur_max>:
 8010d90:	4b01      	ldr	r3, [pc, #4]	@ (8010d98 <__locale_mb_cur_max+0x8>)
 8010d92:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8010d96:	4770      	bx	lr
 8010d98:	2400001c 	.word	0x2400001c

08010d9c <_localeconv_r>:
 8010d9c:	4800      	ldr	r0, [pc, #0]	@ (8010da0 <_localeconv_r+0x4>)
 8010d9e:	4770      	bx	lr
 8010da0:	2400010c 	.word	0x2400010c

08010da4 <__errno>:
 8010da4:	4b01      	ldr	r3, [pc, #4]	@ (8010dac <__errno+0x8>)
 8010da6:	6818      	ldr	r0, [r3, #0]
 8010da8:	4770      	bx	lr
 8010daa:	bf00      	nop
 8010dac:	24000188 	.word	0x24000188

08010db0 <__libc_init_array>:
 8010db0:	b570      	push	{r4, r5, r6, lr}
 8010db2:	4d0d      	ldr	r5, [pc, #52]	@ (8010de8 <__libc_init_array+0x38>)
 8010db4:	4c0d      	ldr	r4, [pc, #52]	@ (8010dec <__libc_init_array+0x3c>)
 8010db6:	1b64      	subs	r4, r4, r5
 8010db8:	10a4      	asrs	r4, r4, #2
 8010dba:	2600      	movs	r6, #0
 8010dbc:	42a6      	cmp	r6, r4
 8010dbe:	d109      	bne.n	8010dd4 <__libc_init_array+0x24>
 8010dc0:	4d0b      	ldr	r5, [pc, #44]	@ (8010df0 <__libc_init_array+0x40>)
 8010dc2:	4c0c      	ldr	r4, [pc, #48]	@ (8010df4 <__libc_init_array+0x44>)
 8010dc4:	f004 fe86 	bl	8015ad4 <_init>
 8010dc8:	1b64      	subs	r4, r4, r5
 8010dca:	10a4      	asrs	r4, r4, #2
 8010dcc:	2600      	movs	r6, #0
 8010dce:	42a6      	cmp	r6, r4
 8010dd0:	d105      	bne.n	8010dde <__libc_init_array+0x2e>
 8010dd2:	bd70      	pop	{r4, r5, r6, pc}
 8010dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dd8:	4798      	blx	r3
 8010dda:	3601      	adds	r6, #1
 8010ddc:	e7ee      	b.n	8010dbc <__libc_init_array+0xc>
 8010dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8010de2:	4798      	blx	r3
 8010de4:	3601      	adds	r6, #1
 8010de6:	e7f2      	b.n	8010dce <__libc_init_array+0x1e>
 8010de8:	08018348 	.word	0x08018348
 8010dec:	08018348 	.word	0x08018348
 8010df0:	08018348 	.word	0x08018348
 8010df4:	08018350 	.word	0x08018350

08010df8 <__retarget_lock_init_recursive>:
 8010df8:	4770      	bx	lr

08010dfa <__retarget_lock_close_recursive>:
 8010dfa:	4770      	bx	lr

08010dfc <__retarget_lock_acquire_recursive>:
 8010dfc:	4770      	bx	lr

08010dfe <__retarget_lock_release_recursive>:
 8010dfe:	4770      	bx	lr

08010e00 <memcpy>:
 8010e00:	440a      	add	r2, r1
 8010e02:	4291      	cmp	r1, r2
 8010e04:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010e08:	d100      	bne.n	8010e0c <memcpy+0xc>
 8010e0a:	4770      	bx	lr
 8010e0c:	b510      	push	{r4, lr}
 8010e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e16:	4291      	cmp	r1, r2
 8010e18:	d1f9      	bne.n	8010e0e <memcpy+0xe>
 8010e1a:	bd10      	pop	{r4, pc}

08010e1c <_wcrtomb_r>:
 8010e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e1e:	4c09      	ldr	r4, [pc, #36]	@ (8010e44 <_wcrtomb_r+0x28>)
 8010e20:	b085      	sub	sp, #20
 8010e22:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8010e26:	4605      	mov	r5, r0
 8010e28:	461e      	mov	r6, r3
 8010e2a:	b909      	cbnz	r1, 8010e30 <_wcrtomb_r+0x14>
 8010e2c:	460a      	mov	r2, r1
 8010e2e:	a901      	add	r1, sp, #4
 8010e30:	47b8      	blx	r7
 8010e32:	1c43      	adds	r3, r0, #1
 8010e34:	bf01      	itttt	eq
 8010e36:	2300      	moveq	r3, #0
 8010e38:	6033      	streq	r3, [r6, #0]
 8010e3a:	238a      	moveq	r3, #138	@ 0x8a
 8010e3c:	602b      	streq	r3, [r5, #0]
 8010e3e:	b005      	add	sp, #20
 8010e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e42:	bf00      	nop
 8010e44:	2400001c 	.word	0x2400001c

08010e48 <frexp>:
 8010e48:	2200      	movs	r2, #0
 8010e4a:	ee10 1a90 	vmov	r1, s1
 8010e4e:	6002      	str	r2, [r0, #0]
 8010e50:	4a17      	ldr	r2, [pc, #92]	@ (8010eb0 <frexp+0x68>)
 8010e52:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d823      	bhi.n	8010ea2 <frexp+0x5a>
 8010e5a:	ee10 2a10 	vmov	r2, s0
 8010e5e:	431a      	orrs	r2, r3
 8010e60:	d01f      	beq.n	8010ea2 <frexp+0x5a>
 8010e62:	4a14      	ldr	r2, [pc, #80]	@ (8010eb4 <frexp+0x6c>)
 8010e64:	400a      	ands	r2, r1
 8010e66:	b952      	cbnz	r2, 8010e7e <frexp+0x36>
 8010e68:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8010ea8 <frexp+0x60>
 8010e6c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010e70:	ee10 1a90 	vmov	r1, s1
 8010e74:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8010e78:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010e7c:	6002      	str	r2, [r0, #0]
 8010e7e:	6802      	ldr	r2, [r0, #0]
 8010e80:	151b      	asrs	r3, r3, #20
 8010e82:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8010e86:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8010e8a:	441a      	add	r2, r3
 8010e8c:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8010e90:	6002      	str	r2, [r0, #0]
 8010e92:	ec53 2b10 	vmov	r2, r3, d0
 8010e96:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
 8010e9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010e9e:	ec43 2b10 	vmov	d0, r2, r3
 8010ea2:	4770      	bx	lr
 8010ea4:	f3af 8000 	nop.w
 8010ea8:	00000000 	.word	0x00000000
 8010eac:	43500000 	.word	0x43500000
 8010eb0:	7fefffff 	.word	0x7fefffff
 8010eb4:	7ff00000 	.word	0x7ff00000

08010eb8 <register_fini>:
 8010eb8:	4b02      	ldr	r3, [pc, #8]	@ (8010ec4 <register_fini+0xc>)
 8010eba:	b113      	cbz	r3, 8010ec2 <register_fini+0xa>
 8010ebc:	4802      	ldr	r0, [pc, #8]	@ (8010ec8 <register_fini+0x10>)
 8010ebe:	f000 b805 	b.w	8010ecc <atexit>
 8010ec2:	4770      	bx	lr
 8010ec4:	00000000 	.word	0x00000000
 8010ec8:	080141b1 	.word	0x080141b1

08010ecc <atexit>:
 8010ecc:	2300      	movs	r3, #0
 8010ece:	4601      	mov	r1, r0
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f003 b980 	b.w	80141d8 <__register_exitproc>

08010ed8 <quorem>:
 8010ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010edc:	6903      	ldr	r3, [r0, #16]
 8010ede:	690c      	ldr	r4, [r1, #16]
 8010ee0:	42a3      	cmp	r3, r4
 8010ee2:	4607      	mov	r7, r0
 8010ee4:	db7e      	blt.n	8010fe4 <quorem+0x10c>
 8010ee6:	3c01      	subs	r4, #1
 8010ee8:	f101 0814 	add.w	r8, r1, #20
 8010eec:	00a3      	lsls	r3, r4, #2
 8010eee:	f100 0514 	add.w	r5, r0, #20
 8010ef2:	9300      	str	r3, [sp, #0]
 8010ef4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ef8:	9301      	str	r3, [sp, #4]
 8010efa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010efe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f02:	3301      	adds	r3, #1
 8010f04:	429a      	cmp	r2, r3
 8010f06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010f0a:	fbb2 f6f3 	udiv	r6, r2, r3
 8010f0e:	d32e      	bcc.n	8010f6e <quorem+0x96>
 8010f10:	f04f 0a00 	mov.w	sl, #0
 8010f14:	46c4      	mov	ip, r8
 8010f16:	46ae      	mov	lr, r5
 8010f18:	46d3      	mov	fp, sl
 8010f1a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010f1e:	b298      	uxth	r0, r3
 8010f20:	fb06 a000 	mla	r0, r6, r0, sl
 8010f24:	0c02      	lsrs	r2, r0, #16
 8010f26:	0c1b      	lsrs	r3, r3, #16
 8010f28:	fb06 2303 	mla	r3, r6, r3, r2
 8010f2c:	f8de 2000 	ldr.w	r2, [lr]
 8010f30:	b280      	uxth	r0, r0
 8010f32:	b292      	uxth	r2, r2
 8010f34:	1a12      	subs	r2, r2, r0
 8010f36:	445a      	add	r2, fp
 8010f38:	f8de 0000 	ldr.w	r0, [lr]
 8010f3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010f46:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010f4a:	b292      	uxth	r2, r2
 8010f4c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010f50:	45e1      	cmp	r9, ip
 8010f52:	f84e 2b04 	str.w	r2, [lr], #4
 8010f56:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010f5a:	d2de      	bcs.n	8010f1a <quorem+0x42>
 8010f5c:	9b00      	ldr	r3, [sp, #0]
 8010f5e:	58eb      	ldr	r3, [r5, r3]
 8010f60:	b92b      	cbnz	r3, 8010f6e <quorem+0x96>
 8010f62:	9b01      	ldr	r3, [sp, #4]
 8010f64:	3b04      	subs	r3, #4
 8010f66:	429d      	cmp	r5, r3
 8010f68:	461a      	mov	r2, r3
 8010f6a:	d32f      	bcc.n	8010fcc <quorem+0xf4>
 8010f6c:	613c      	str	r4, [r7, #16]
 8010f6e:	4638      	mov	r0, r7
 8010f70:	f002 fcfa 	bl	8013968 <__mcmp>
 8010f74:	2800      	cmp	r0, #0
 8010f76:	db25      	blt.n	8010fc4 <quorem+0xec>
 8010f78:	4629      	mov	r1, r5
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010f80:	f8d1 c000 	ldr.w	ip, [r1]
 8010f84:	fa1f fe82 	uxth.w	lr, r2
 8010f88:	fa1f f38c 	uxth.w	r3, ip
 8010f8c:	eba3 030e 	sub.w	r3, r3, lr
 8010f90:	4403      	add	r3, r0
 8010f92:	0c12      	lsrs	r2, r2, #16
 8010f94:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010f98:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010f9c:	b29b      	uxth	r3, r3
 8010f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010fa2:	45c1      	cmp	r9, r8
 8010fa4:	f841 3b04 	str.w	r3, [r1], #4
 8010fa8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010fac:	d2e6      	bcs.n	8010f7c <quorem+0xa4>
 8010fae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010fb6:	b922      	cbnz	r2, 8010fc2 <quorem+0xea>
 8010fb8:	3b04      	subs	r3, #4
 8010fba:	429d      	cmp	r5, r3
 8010fbc:	461a      	mov	r2, r3
 8010fbe:	d30b      	bcc.n	8010fd8 <quorem+0x100>
 8010fc0:	613c      	str	r4, [r7, #16]
 8010fc2:	3601      	adds	r6, #1
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	b003      	add	sp, #12
 8010fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fcc:	6812      	ldr	r2, [r2, #0]
 8010fce:	3b04      	subs	r3, #4
 8010fd0:	2a00      	cmp	r2, #0
 8010fd2:	d1cb      	bne.n	8010f6c <quorem+0x94>
 8010fd4:	3c01      	subs	r4, #1
 8010fd6:	e7c6      	b.n	8010f66 <quorem+0x8e>
 8010fd8:	6812      	ldr	r2, [r2, #0]
 8010fda:	3b04      	subs	r3, #4
 8010fdc:	2a00      	cmp	r2, #0
 8010fde:	d1ef      	bne.n	8010fc0 <quorem+0xe8>
 8010fe0:	3c01      	subs	r4, #1
 8010fe2:	e7ea      	b.n	8010fba <quorem+0xe2>
 8010fe4:	2000      	movs	r0, #0
 8010fe6:	e7ee      	b.n	8010fc6 <quorem+0xee>

08010fe8 <_dtoa_r>:
 8010fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fec:	ed2d 8b02 	vpush	{d8}
 8010ff0:	b091      	sub	sp, #68	@ 0x44
 8010ff2:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010ff6:	9107      	str	r1, [sp, #28]
 8010ff8:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8010ffa:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010ffc:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ffe:	ec55 4b10 	vmov	r4, r5, d0
 8011002:	4681      	mov	r9, r0
 8011004:	930d      	str	r3, [sp, #52]	@ 0x34
 8011006:	b149      	cbz	r1, 801101c <_dtoa_r+0x34>
 8011008:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801100a:	604a      	str	r2, [r1, #4]
 801100c:	2301      	movs	r3, #1
 801100e:	4093      	lsls	r3, r2
 8011010:	608b      	str	r3, [r1, #8]
 8011012:	f002 faa2 	bl	801355a <_Bfree>
 8011016:	2300      	movs	r3, #0
 8011018:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 801101c:	1e2b      	subs	r3, r5, #0
 801101e:	bfbb      	ittet	lt
 8011020:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011024:	9303      	strlt	r3, [sp, #12]
 8011026:	2300      	movge	r3, #0
 8011028:	2201      	movlt	r2, #1
 801102a:	bfac      	ite	ge
 801102c:	6033      	strge	r3, [r6, #0]
 801102e:	6032      	strlt	r2, [r6, #0]
 8011030:	4b91      	ldr	r3, [pc, #580]	@ (8011278 <_dtoa_r+0x290>)
 8011032:	9e03      	ldr	r6, [sp, #12]
 8011034:	43b3      	bics	r3, r6
 8011036:	d114      	bne.n	8011062 <_dtoa_r+0x7a>
 8011038:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801103a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801103e:	6013      	str	r3, [r2, #0]
 8011040:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011044:	4323      	orrs	r3, r4
 8011046:	f000 84df 	beq.w	8011a08 <_dtoa_r+0xa20>
 801104a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801104c:	4f8b      	ldr	r7, [pc, #556]	@ (801127c <_dtoa_r+0x294>)
 801104e:	b113      	cbz	r3, 8011056 <_dtoa_r+0x6e>
 8011050:	1cfb      	adds	r3, r7, #3
 8011052:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011054:	6013      	str	r3, [r2, #0]
 8011056:	4638      	mov	r0, r7
 8011058:	b011      	add	sp, #68	@ 0x44
 801105a:	ecbd 8b02 	vpop	{d8}
 801105e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011062:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011066:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801106e:	d109      	bne.n	8011084 <_dtoa_r+0x9c>
 8011070:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011072:	2301      	movs	r3, #1
 8011074:	6013      	str	r3, [r2, #0]
 8011076:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011078:	b113      	cbz	r3, 8011080 <_dtoa_r+0x98>
 801107a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801107c:	4b80      	ldr	r3, [pc, #512]	@ (8011280 <_dtoa_r+0x298>)
 801107e:	6013      	str	r3, [r2, #0]
 8011080:	4f80      	ldr	r7, [pc, #512]	@ (8011284 <_dtoa_r+0x29c>)
 8011082:	e7e8      	b.n	8011056 <_dtoa_r+0x6e>
 8011084:	aa0e      	add	r2, sp, #56	@ 0x38
 8011086:	a90f      	add	r1, sp, #60	@ 0x3c
 8011088:	4648      	mov	r0, r9
 801108a:	eeb0 0b48 	vmov.f64	d0, d8
 801108e:	f002 fd1b 	bl	8013ac8 <__d2b>
 8011092:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8011096:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011098:	9001      	str	r0, [sp, #4]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d045      	beq.n	801112a <_dtoa_r+0x142>
 801109e:	eeb0 7b48 	vmov.f64	d7, d8
 80110a2:	ee18 1a90 	vmov	r1, s17
 80110a6:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80110aa:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80110ae:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80110b2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80110b6:	2500      	movs	r5, #0
 80110b8:	ee07 1a90 	vmov	s15, r1
 80110bc:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80110c0:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 8011260 <_dtoa_r+0x278>
 80110c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110c8:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8011268 <_dtoa_r+0x280>
 80110cc:	eea7 6b05 	vfma.f64	d6, d7, d5
 80110d0:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 8011270 <_dtoa_r+0x288>
 80110d4:	ee07 3a90 	vmov	s15, r3
 80110d8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80110dc:	eeb0 7b46 	vmov.f64	d7, d6
 80110e0:	eea4 7b05 	vfma.f64	d7, d4, d5
 80110e4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80110e8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80110ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f0:	ee16 8a90 	vmov	r8, s13
 80110f4:	d508      	bpl.n	8011108 <_dtoa_r+0x120>
 80110f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80110fa:	eeb4 6b47 	vcmp.f64	d6, d7
 80110fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011102:	bf18      	it	ne
 8011104:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8011108:	f1b8 0f16 	cmp.w	r8, #22
 801110c:	d82b      	bhi.n	8011166 <_dtoa_r+0x17e>
 801110e:	495e      	ldr	r1, [pc, #376]	@ (8011288 <_dtoa_r+0x2a0>)
 8011110:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8011114:	ed91 7b00 	vldr	d7, [r1]
 8011118:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011120:	d501      	bpl.n	8011126 <_dtoa_r+0x13e>
 8011122:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011126:	2100      	movs	r1, #0
 8011128:	e01e      	b.n	8011168 <_dtoa_r+0x180>
 801112a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801112c:	4413      	add	r3, r2
 801112e:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011132:	2920      	cmp	r1, #32
 8011134:	bfc1      	itttt	gt
 8011136:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801113a:	408e      	lslgt	r6, r1
 801113c:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8011140:	fa24 f101 	lsrgt.w	r1, r4, r1
 8011144:	bfd6      	itet	le
 8011146:	f1c1 0120 	rsble	r1, r1, #32
 801114a:	4331      	orrgt	r1, r6
 801114c:	fa04 f101 	lslle.w	r1, r4, r1
 8011150:	ee07 1a90 	vmov	s15, r1
 8011154:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011158:	3b01      	subs	r3, #1
 801115a:	ee17 1a90 	vmov	r1, s15
 801115e:	2501      	movs	r5, #1
 8011160:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8011164:	e7a8      	b.n	80110b8 <_dtoa_r+0xd0>
 8011166:	2101      	movs	r1, #1
 8011168:	1ad2      	subs	r2, r2, r3
 801116a:	1e53      	subs	r3, r2, #1
 801116c:	9306      	str	r3, [sp, #24]
 801116e:	bf45      	ittet	mi
 8011170:	f1c2 0301 	rsbmi	r3, r2, #1
 8011174:	9305      	strmi	r3, [sp, #20]
 8011176:	2300      	movpl	r3, #0
 8011178:	2300      	movmi	r3, #0
 801117a:	bf4c      	ite	mi
 801117c:	9306      	strmi	r3, [sp, #24]
 801117e:	9305      	strpl	r3, [sp, #20]
 8011180:	f1b8 0f00 	cmp.w	r8, #0
 8011184:	910c      	str	r1, [sp, #48]	@ 0x30
 8011186:	db18      	blt.n	80111ba <_dtoa_r+0x1d2>
 8011188:	9b06      	ldr	r3, [sp, #24]
 801118a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801118e:	4443      	add	r3, r8
 8011190:	9306      	str	r3, [sp, #24]
 8011192:	2300      	movs	r3, #0
 8011194:	9a07      	ldr	r2, [sp, #28]
 8011196:	2a09      	cmp	r2, #9
 8011198:	d84a      	bhi.n	8011230 <_dtoa_r+0x248>
 801119a:	2a05      	cmp	r2, #5
 801119c:	bfc4      	itt	gt
 801119e:	3a04      	subgt	r2, #4
 80111a0:	9207      	strgt	r2, [sp, #28]
 80111a2:	9a07      	ldr	r2, [sp, #28]
 80111a4:	f1a2 0202 	sub.w	r2, r2, #2
 80111a8:	bfcc      	ite	gt
 80111aa:	2400      	movgt	r4, #0
 80111ac:	2401      	movle	r4, #1
 80111ae:	2a03      	cmp	r2, #3
 80111b0:	d849      	bhi.n	8011246 <_dtoa_r+0x25e>
 80111b2:	e8df f002 	tbb	[pc, r2]
 80111b6:	2f0b      	.short	0x2f0b
 80111b8:	3b2d      	.short	0x3b2d
 80111ba:	9b05      	ldr	r3, [sp, #20]
 80111bc:	2200      	movs	r2, #0
 80111be:	eba3 0308 	sub.w	r3, r3, r8
 80111c2:	9305      	str	r3, [sp, #20]
 80111c4:	920a      	str	r2, [sp, #40]	@ 0x28
 80111c6:	f1c8 0300 	rsb	r3, r8, #0
 80111ca:	e7e3      	b.n	8011194 <_dtoa_r+0x1ac>
 80111cc:	2200      	movs	r2, #0
 80111ce:	9208      	str	r2, [sp, #32]
 80111d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111d2:	2a00      	cmp	r2, #0
 80111d4:	dc3a      	bgt.n	801124c <_dtoa_r+0x264>
 80111d6:	f04f 0b01 	mov.w	fp, #1
 80111da:	46da      	mov	sl, fp
 80111dc:	465a      	mov	r2, fp
 80111de:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80111e2:	2100      	movs	r1, #0
 80111e4:	2004      	movs	r0, #4
 80111e6:	f100 0614 	add.w	r6, r0, #20
 80111ea:	4296      	cmp	r6, r2
 80111ec:	d933      	bls.n	8011256 <_dtoa_r+0x26e>
 80111ee:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 80111f2:	4648      	mov	r0, r9
 80111f4:	9304      	str	r3, [sp, #16]
 80111f6:	f002 f98b 	bl	8013510 <_Balloc>
 80111fa:	9b04      	ldr	r3, [sp, #16]
 80111fc:	4607      	mov	r7, r0
 80111fe:	2800      	cmp	r0, #0
 8011200:	d148      	bne.n	8011294 <_dtoa_r+0x2ac>
 8011202:	4b22      	ldr	r3, [pc, #136]	@ (801128c <_dtoa_r+0x2a4>)
 8011204:	4602      	mov	r2, r0
 8011206:	f240 11af 	movw	r1, #431	@ 0x1af
 801120a:	4821      	ldr	r0, [pc, #132]	@ (8011290 <_dtoa_r+0x2a8>)
 801120c:	f003 f824 	bl	8014258 <__assert_func>
 8011210:	2201      	movs	r2, #1
 8011212:	e7dc      	b.n	80111ce <_dtoa_r+0x1e6>
 8011214:	2200      	movs	r2, #0
 8011216:	9208      	str	r2, [sp, #32]
 8011218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801121a:	eb08 0b02 	add.w	fp, r8, r2
 801121e:	f10b 0a01 	add.w	sl, fp, #1
 8011222:	4652      	mov	r2, sl
 8011224:	2a01      	cmp	r2, #1
 8011226:	bfb8      	it	lt
 8011228:	2201      	movlt	r2, #1
 801122a:	e7da      	b.n	80111e2 <_dtoa_r+0x1fa>
 801122c:	2201      	movs	r2, #1
 801122e:	e7f2      	b.n	8011216 <_dtoa_r+0x22e>
 8011230:	2401      	movs	r4, #1
 8011232:	2200      	movs	r2, #0
 8011234:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011238:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801123c:	2100      	movs	r1, #0
 801123e:	46da      	mov	sl, fp
 8011240:	2212      	movs	r2, #18
 8011242:	9109      	str	r1, [sp, #36]	@ 0x24
 8011244:	e7cd      	b.n	80111e2 <_dtoa_r+0x1fa>
 8011246:	2201      	movs	r2, #1
 8011248:	9208      	str	r2, [sp, #32]
 801124a:	e7f5      	b.n	8011238 <_dtoa_r+0x250>
 801124c:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8011250:	46da      	mov	sl, fp
 8011252:	465a      	mov	r2, fp
 8011254:	e7c5      	b.n	80111e2 <_dtoa_r+0x1fa>
 8011256:	3101      	adds	r1, #1
 8011258:	0040      	lsls	r0, r0, #1
 801125a:	e7c4      	b.n	80111e6 <_dtoa_r+0x1fe>
 801125c:	f3af 8000 	nop.w
 8011260:	636f4361 	.word	0x636f4361
 8011264:	3fd287a7 	.word	0x3fd287a7
 8011268:	8b60c8b3 	.word	0x8b60c8b3
 801126c:	3fc68a28 	.word	0x3fc68a28
 8011270:	509f79fb 	.word	0x509f79fb
 8011274:	3fd34413 	.word	0x3fd34413
 8011278:	7ff00000 	.word	0x7ff00000
 801127c:	08015dea 	.word	0x08015dea
 8011280:	08015def 	.word	0x08015def
 8011284:	08015dee 	.word	0x08015dee
 8011288:	08015f18 	.word	0x08015f18
 801128c:	08015df0 	.word	0x08015df0
 8011290:	08015e01 	.word	0x08015e01
 8011294:	f1ba 0f0e 	cmp.w	sl, #14
 8011298:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 801129c:	d86f      	bhi.n	801137e <_dtoa_r+0x396>
 801129e:	2c00      	cmp	r4, #0
 80112a0:	d06d      	beq.n	801137e <_dtoa_r+0x396>
 80112a2:	f1b8 0f00 	cmp.w	r8, #0
 80112a6:	f340 80c2 	ble.w	801142e <_dtoa_r+0x446>
 80112aa:	4aca      	ldr	r2, [pc, #808]	@ (80115d4 <_dtoa_r+0x5ec>)
 80112ac:	f008 010f 	and.w	r1, r8, #15
 80112b0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80112b4:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80112b8:	ed92 7b00 	vldr	d7, [r2]
 80112bc:	ea4f 1128 	mov.w	r1, r8, asr #4
 80112c0:	f000 80a9 	beq.w	8011416 <_dtoa_r+0x42e>
 80112c4:	4ac4      	ldr	r2, [pc, #784]	@ (80115d8 <_dtoa_r+0x5f0>)
 80112c6:	ed92 6b08 	vldr	d6, [r2, #32]
 80112ca:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80112ce:	ed8d 6b02 	vstr	d6, [sp, #8]
 80112d2:	f001 010f 	and.w	r1, r1, #15
 80112d6:	2203      	movs	r2, #3
 80112d8:	48bf      	ldr	r0, [pc, #764]	@ (80115d8 <_dtoa_r+0x5f0>)
 80112da:	2900      	cmp	r1, #0
 80112dc:	f040 809d 	bne.w	801141a <_dtoa_r+0x432>
 80112e0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80112e4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80112e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80112ec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80112ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80112f2:	2900      	cmp	r1, #0
 80112f4:	f000 80c1 	beq.w	801147a <_dtoa_r+0x492>
 80112f8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80112fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011304:	f140 80b9 	bpl.w	801147a <_dtoa_r+0x492>
 8011308:	f1ba 0f00 	cmp.w	sl, #0
 801130c:	f000 80b5 	beq.w	801147a <_dtoa_r+0x492>
 8011310:	f1bb 0f00 	cmp.w	fp, #0
 8011314:	dd31      	ble.n	801137a <_dtoa_r+0x392>
 8011316:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801131a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801131e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011322:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8011326:	9104      	str	r1, [sp, #16]
 8011328:	3201      	adds	r2, #1
 801132a:	465c      	mov	r4, fp
 801132c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011330:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8011334:	ee07 2a90 	vmov	s15, r2
 8011338:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801133c:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011340:	ee15 2a90 	vmov	r2, s11
 8011344:	ec51 0b15 	vmov	r0, r1, d5
 8011348:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801134c:	2c00      	cmp	r4, #0
 801134e:	f040 8098 	bne.w	8011482 <_dtoa_r+0x49a>
 8011352:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011356:	ee36 6b47 	vsub.f64	d6, d6, d7
 801135a:	ec41 0b17 	vmov	d7, r0, r1
 801135e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011366:	f300 8260 	bgt.w	801182a <_dtoa_r+0x842>
 801136a:	eeb1 7b47 	vneg.f64	d7, d7
 801136e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011376:	f100 80f5 	bmi.w	8011564 <_dtoa_r+0x57c>
 801137a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801137e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011380:	2a00      	cmp	r2, #0
 8011382:	f2c0 812b 	blt.w	80115dc <_dtoa_r+0x5f4>
 8011386:	f1b8 0f0e 	cmp.w	r8, #14
 801138a:	f300 8127 	bgt.w	80115dc <_dtoa_r+0x5f4>
 801138e:	4b91      	ldr	r3, [pc, #580]	@ (80115d4 <_dtoa_r+0x5ec>)
 8011390:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011394:	ed93 6b00 	vldr	d6, [r3]
 8011398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801139a:	2b00      	cmp	r3, #0
 801139c:	da03      	bge.n	80113a6 <_dtoa_r+0x3be>
 801139e:	f1ba 0f00 	cmp.w	sl, #0
 80113a2:	f340 80d2 	ble.w	801154a <_dtoa_r+0x562>
 80113a6:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80113aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113ae:	463e      	mov	r6, r7
 80113b0:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80113b4:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80113b8:	ee15 3a10 	vmov	r3, s10
 80113bc:	3330      	adds	r3, #48	@ 0x30
 80113be:	f806 3b01 	strb.w	r3, [r6], #1
 80113c2:	1bf3      	subs	r3, r6, r7
 80113c4:	459a      	cmp	sl, r3
 80113c6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80113ca:	eea3 7b46 	vfms.f64	d7, d3, d6
 80113ce:	f040 80f8 	bne.w	80115c2 <_dtoa_r+0x5da>
 80113d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80113d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80113da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113de:	f300 80dd 	bgt.w	801159c <_dtoa_r+0x5b4>
 80113e2:	eeb4 7b46 	vcmp.f64	d7, d6
 80113e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ea:	d104      	bne.n	80113f6 <_dtoa_r+0x40e>
 80113ec:	ee15 3a10 	vmov	r3, s10
 80113f0:	07db      	lsls	r3, r3, #31
 80113f2:	f100 80d3 	bmi.w	801159c <_dtoa_r+0x5b4>
 80113f6:	9901      	ldr	r1, [sp, #4]
 80113f8:	4648      	mov	r0, r9
 80113fa:	f002 f8ae 	bl	801355a <_Bfree>
 80113fe:	2300      	movs	r3, #0
 8011400:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011402:	7033      	strb	r3, [r6, #0]
 8011404:	f108 0301 	add.w	r3, r8, #1
 8011408:	6013      	str	r3, [r2, #0]
 801140a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801140c:	2b00      	cmp	r3, #0
 801140e:	f43f ae22 	beq.w	8011056 <_dtoa_r+0x6e>
 8011412:	601e      	str	r6, [r3, #0]
 8011414:	e61f      	b.n	8011056 <_dtoa_r+0x6e>
 8011416:	2202      	movs	r2, #2
 8011418:	e75e      	b.n	80112d8 <_dtoa_r+0x2f0>
 801141a:	07cc      	lsls	r4, r1, #31
 801141c:	d504      	bpl.n	8011428 <_dtoa_r+0x440>
 801141e:	ed90 6b00 	vldr	d6, [r0]
 8011422:	3201      	adds	r2, #1
 8011424:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011428:	1049      	asrs	r1, r1, #1
 801142a:	3008      	adds	r0, #8
 801142c:	e755      	b.n	80112da <_dtoa_r+0x2f2>
 801142e:	d022      	beq.n	8011476 <_dtoa_r+0x48e>
 8011430:	f1c8 0100 	rsb	r1, r8, #0
 8011434:	4a67      	ldr	r2, [pc, #412]	@ (80115d4 <_dtoa_r+0x5ec>)
 8011436:	f001 000f 	and.w	r0, r1, #15
 801143a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801143e:	ed92 7b00 	vldr	d7, [r2]
 8011442:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011446:	ed8d 7b02 	vstr	d7, [sp, #8]
 801144a:	4863      	ldr	r0, [pc, #396]	@ (80115d8 <_dtoa_r+0x5f0>)
 801144c:	1109      	asrs	r1, r1, #4
 801144e:	2400      	movs	r4, #0
 8011450:	2202      	movs	r2, #2
 8011452:	b929      	cbnz	r1, 8011460 <_dtoa_r+0x478>
 8011454:	2c00      	cmp	r4, #0
 8011456:	f43f af49 	beq.w	80112ec <_dtoa_r+0x304>
 801145a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801145e:	e745      	b.n	80112ec <_dtoa_r+0x304>
 8011460:	07ce      	lsls	r6, r1, #31
 8011462:	d505      	bpl.n	8011470 <_dtoa_r+0x488>
 8011464:	ed90 6b00 	vldr	d6, [r0]
 8011468:	3201      	adds	r2, #1
 801146a:	2401      	movs	r4, #1
 801146c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011470:	1049      	asrs	r1, r1, #1
 8011472:	3008      	adds	r0, #8
 8011474:	e7ed      	b.n	8011452 <_dtoa_r+0x46a>
 8011476:	2202      	movs	r2, #2
 8011478:	e738      	b.n	80112ec <_dtoa_r+0x304>
 801147a:	f8cd 8010 	str.w	r8, [sp, #16]
 801147e:	4654      	mov	r4, sl
 8011480:	e754      	b.n	801132c <_dtoa_r+0x344>
 8011482:	4a54      	ldr	r2, [pc, #336]	@ (80115d4 <_dtoa_r+0x5ec>)
 8011484:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8011488:	ed12 4b02 	vldr	d4, [r2, #-8]
 801148c:	9a08      	ldr	r2, [sp, #32]
 801148e:	ec41 0b17 	vmov	d7, r0, r1
 8011492:	443c      	add	r4, r7
 8011494:	b34a      	cbz	r2, 80114ea <_dtoa_r+0x502>
 8011496:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801149a:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801149e:	463e      	mov	r6, r7
 80114a0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80114a4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80114a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80114ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80114b0:	ee14 2a90 	vmov	r2, s9
 80114b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80114b8:	3230      	adds	r2, #48	@ 0x30
 80114ba:	ee36 6b45 	vsub.f64	d6, d6, d5
 80114be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80114c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c6:	f806 2b01 	strb.w	r2, [r6], #1
 80114ca:	d438      	bmi.n	801153e <_dtoa_r+0x556>
 80114cc:	ee32 5b46 	vsub.f64	d5, d2, d6
 80114d0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80114d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d8:	d462      	bmi.n	80115a0 <_dtoa_r+0x5b8>
 80114da:	42a6      	cmp	r6, r4
 80114dc:	f43f af4d 	beq.w	801137a <_dtoa_r+0x392>
 80114e0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80114e4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80114e8:	e7e0      	b.n	80114ac <_dtoa_r+0x4c4>
 80114ea:	4621      	mov	r1, r4
 80114ec:	463e      	mov	r6, r7
 80114ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 80114f2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80114f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80114fa:	ee14 2a90 	vmov	r2, s9
 80114fe:	3230      	adds	r2, #48	@ 0x30
 8011500:	f806 2b01 	strb.w	r2, [r6], #1
 8011504:	42a6      	cmp	r6, r4
 8011506:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801150a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801150e:	d119      	bne.n	8011544 <_dtoa_r+0x55c>
 8011510:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8011514:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011518:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011520:	dc3e      	bgt.n	80115a0 <_dtoa_r+0x5b8>
 8011522:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011526:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801152e:	f57f af24 	bpl.w	801137a <_dtoa_r+0x392>
 8011532:	460e      	mov	r6, r1
 8011534:	3901      	subs	r1, #1
 8011536:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801153a:	2b30      	cmp	r3, #48	@ 0x30
 801153c:	d0f9      	beq.n	8011532 <_dtoa_r+0x54a>
 801153e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011542:	e758      	b.n	80113f6 <_dtoa_r+0x40e>
 8011544:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011548:	e7d5      	b.n	80114f6 <_dtoa_r+0x50e>
 801154a:	d10b      	bne.n	8011564 <_dtoa_r+0x57c>
 801154c:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011550:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011554:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011558:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011560:	f2c0 8160 	blt.w	8011824 <_dtoa_r+0x83c>
 8011564:	2400      	movs	r4, #0
 8011566:	4625      	mov	r5, r4
 8011568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801156a:	43db      	mvns	r3, r3
 801156c:	9304      	str	r3, [sp, #16]
 801156e:	463e      	mov	r6, r7
 8011570:	f04f 0800 	mov.w	r8, #0
 8011574:	4621      	mov	r1, r4
 8011576:	4648      	mov	r0, r9
 8011578:	f001 ffef 	bl	801355a <_Bfree>
 801157c:	2d00      	cmp	r5, #0
 801157e:	d0de      	beq.n	801153e <_dtoa_r+0x556>
 8011580:	f1b8 0f00 	cmp.w	r8, #0
 8011584:	d005      	beq.n	8011592 <_dtoa_r+0x5aa>
 8011586:	45a8      	cmp	r8, r5
 8011588:	d003      	beq.n	8011592 <_dtoa_r+0x5aa>
 801158a:	4641      	mov	r1, r8
 801158c:	4648      	mov	r0, r9
 801158e:	f001 ffe4 	bl	801355a <_Bfree>
 8011592:	4629      	mov	r1, r5
 8011594:	4648      	mov	r0, r9
 8011596:	f001 ffe0 	bl	801355a <_Bfree>
 801159a:	e7d0      	b.n	801153e <_dtoa_r+0x556>
 801159c:	f8cd 8010 	str.w	r8, [sp, #16]
 80115a0:	4633      	mov	r3, r6
 80115a2:	461e      	mov	r6, r3
 80115a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80115a8:	2a39      	cmp	r2, #57	@ 0x39
 80115aa:	d106      	bne.n	80115ba <_dtoa_r+0x5d2>
 80115ac:	429f      	cmp	r7, r3
 80115ae:	d1f8      	bne.n	80115a2 <_dtoa_r+0x5ba>
 80115b0:	9a04      	ldr	r2, [sp, #16]
 80115b2:	3201      	adds	r2, #1
 80115b4:	9204      	str	r2, [sp, #16]
 80115b6:	2230      	movs	r2, #48	@ 0x30
 80115b8:	703a      	strb	r2, [r7, #0]
 80115ba:	781a      	ldrb	r2, [r3, #0]
 80115bc:	3201      	adds	r2, #1
 80115be:	701a      	strb	r2, [r3, #0]
 80115c0:	e7bd      	b.n	801153e <_dtoa_r+0x556>
 80115c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80115c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80115ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ce:	f47f aeef 	bne.w	80113b0 <_dtoa_r+0x3c8>
 80115d2:	e710      	b.n	80113f6 <_dtoa_r+0x40e>
 80115d4:	08015f18 	.word	0x08015f18
 80115d8:	08015ef0 	.word	0x08015ef0
 80115dc:	9908      	ldr	r1, [sp, #32]
 80115de:	2900      	cmp	r1, #0
 80115e0:	f000 80e3 	beq.w	80117aa <_dtoa_r+0x7c2>
 80115e4:	9907      	ldr	r1, [sp, #28]
 80115e6:	2901      	cmp	r1, #1
 80115e8:	f300 80c8 	bgt.w	801177c <_dtoa_r+0x794>
 80115ec:	2d00      	cmp	r5, #0
 80115ee:	f000 80c1 	beq.w	8011774 <_dtoa_r+0x78c>
 80115f2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80115f6:	9e05      	ldr	r6, [sp, #20]
 80115f8:	461c      	mov	r4, r3
 80115fa:	9304      	str	r3, [sp, #16]
 80115fc:	9b05      	ldr	r3, [sp, #20]
 80115fe:	4413      	add	r3, r2
 8011600:	9305      	str	r3, [sp, #20]
 8011602:	9b06      	ldr	r3, [sp, #24]
 8011604:	2101      	movs	r1, #1
 8011606:	4413      	add	r3, r2
 8011608:	4648      	mov	r0, r9
 801160a:	9306      	str	r3, [sp, #24]
 801160c:	f002 f840 	bl	8013690 <__i2b>
 8011610:	9b04      	ldr	r3, [sp, #16]
 8011612:	4605      	mov	r5, r0
 8011614:	b166      	cbz	r6, 8011630 <_dtoa_r+0x648>
 8011616:	9a06      	ldr	r2, [sp, #24]
 8011618:	2a00      	cmp	r2, #0
 801161a:	dd09      	ble.n	8011630 <_dtoa_r+0x648>
 801161c:	42b2      	cmp	r2, r6
 801161e:	9905      	ldr	r1, [sp, #20]
 8011620:	bfa8      	it	ge
 8011622:	4632      	movge	r2, r6
 8011624:	1a89      	subs	r1, r1, r2
 8011626:	9105      	str	r1, [sp, #20]
 8011628:	9906      	ldr	r1, [sp, #24]
 801162a:	1ab6      	subs	r6, r6, r2
 801162c:	1a8a      	subs	r2, r1, r2
 801162e:	9206      	str	r2, [sp, #24]
 8011630:	b1fb      	cbz	r3, 8011672 <_dtoa_r+0x68a>
 8011632:	9a08      	ldr	r2, [sp, #32]
 8011634:	2a00      	cmp	r2, #0
 8011636:	f000 80bc 	beq.w	80117b2 <_dtoa_r+0x7ca>
 801163a:	b19c      	cbz	r4, 8011664 <_dtoa_r+0x67c>
 801163c:	4629      	mov	r1, r5
 801163e:	4622      	mov	r2, r4
 8011640:	4648      	mov	r0, r9
 8011642:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011644:	f002 f8e4 	bl	8013810 <__pow5mult>
 8011648:	9a01      	ldr	r2, [sp, #4]
 801164a:	4601      	mov	r1, r0
 801164c:	4605      	mov	r5, r0
 801164e:	4648      	mov	r0, r9
 8011650:	f002 f834 	bl	80136bc <__multiply>
 8011654:	9901      	ldr	r1, [sp, #4]
 8011656:	9004      	str	r0, [sp, #16]
 8011658:	4648      	mov	r0, r9
 801165a:	f001 ff7e 	bl	801355a <_Bfree>
 801165e:	9a04      	ldr	r2, [sp, #16]
 8011660:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011662:	9201      	str	r2, [sp, #4]
 8011664:	1b1a      	subs	r2, r3, r4
 8011666:	d004      	beq.n	8011672 <_dtoa_r+0x68a>
 8011668:	9901      	ldr	r1, [sp, #4]
 801166a:	4648      	mov	r0, r9
 801166c:	f002 f8d0 	bl	8013810 <__pow5mult>
 8011670:	9001      	str	r0, [sp, #4]
 8011672:	2101      	movs	r1, #1
 8011674:	4648      	mov	r0, r9
 8011676:	f002 f80b 	bl	8013690 <__i2b>
 801167a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801167c:	4604      	mov	r4, r0
 801167e:	2b00      	cmp	r3, #0
 8011680:	f000 81cb 	beq.w	8011a1a <_dtoa_r+0xa32>
 8011684:	461a      	mov	r2, r3
 8011686:	4601      	mov	r1, r0
 8011688:	4648      	mov	r0, r9
 801168a:	f002 f8c1 	bl	8013810 <__pow5mult>
 801168e:	9b07      	ldr	r3, [sp, #28]
 8011690:	2b01      	cmp	r3, #1
 8011692:	4604      	mov	r4, r0
 8011694:	f300 8095 	bgt.w	80117c2 <_dtoa_r+0x7da>
 8011698:	9b02      	ldr	r3, [sp, #8]
 801169a:	2b00      	cmp	r3, #0
 801169c:	f040 808b 	bne.w	80117b6 <_dtoa_r+0x7ce>
 80116a0:	9b03      	ldr	r3, [sp, #12]
 80116a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80116a6:	2a00      	cmp	r2, #0
 80116a8:	f040 8087 	bne.w	80117ba <_dtoa_r+0x7d2>
 80116ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80116b0:	0d12      	lsrs	r2, r2, #20
 80116b2:	0512      	lsls	r2, r2, #20
 80116b4:	2a00      	cmp	r2, #0
 80116b6:	f000 8082 	beq.w	80117be <_dtoa_r+0x7d6>
 80116ba:	9b05      	ldr	r3, [sp, #20]
 80116bc:	3301      	adds	r3, #1
 80116be:	9305      	str	r3, [sp, #20]
 80116c0:	9b06      	ldr	r3, [sp, #24]
 80116c2:	3301      	adds	r3, #1
 80116c4:	9306      	str	r3, [sp, #24]
 80116c6:	2301      	movs	r3, #1
 80116c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80116ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	f000 81aa 	beq.w	8011a26 <_dtoa_r+0xa3e>
 80116d2:	6922      	ldr	r2, [r4, #16]
 80116d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80116d8:	6910      	ldr	r0, [r2, #16]
 80116da:	f001 ff8d 	bl	80135f8 <__hi0bits>
 80116de:	f1c0 0020 	rsb	r0, r0, #32
 80116e2:	9b06      	ldr	r3, [sp, #24]
 80116e4:	4418      	add	r0, r3
 80116e6:	f010 001f 	ands.w	r0, r0, #31
 80116ea:	d076      	beq.n	80117da <_dtoa_r+0x7f2>
 80116ec:	f1c0 0220 	rsb	r2, r0, #32
 80116f0:	2a04      	cmp	r2, #4
 80116f2:	dd69      	ble.n	80117c8 <_dtoa_r+0x7e0>
 80116f4:	9b05      	ldr	r3, [sp, #20]
 80116f6:	f1c0 001c 	rsb	r0, r0, #28
 80116fa:	4403      	add	r3, r0
 80116fc:	9305      	str	r3, [sp, #20]
 80116fe:	9b06      	ldr	r3, [sp, #24]
 8011700:	4406      	add	r6, r0
 8011702:	4403      	add	r3, r0
 8011704:	9306      	str	r3, [sp, #24]
 8011706:	9b05      	ldr	r3, [sp, #20]
 8011708:	2b00      	cmp	r3, #0
 801170a:	dd05      	ble.n	8011718 <_dtoa_r+0x730>
 801170c:	9901      	ldr	r1, [sp, #4]
 801170e:	461a      	mov	r2, r3
 8011710:	4648      	mov	r0, r9
 8011712:	f002 f8bd 	bl	8013890 <__lshift>
 8011716:	9001      	str	r0, [sp, #4]
 8011718:	9b06      	ldr	r3, [sp, #24]
 801171a:	2b00      	cmp	r3, #0
 801171c:	dd05      	ble.n	801172a <_dtoa_r+0x742>
 801171e:	4621      	mov	r1, r4
 8011720:	461a      	mov	r2, r3
 8011722:	4648      	mov	r0, r9
 8011724:	f002 f8b4 	bl	8013890 <__lshift>
 8011728:	4604      	mov	r4, r0
 801172a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801172c:	2b00      	cmp	r3, #0
 801172e:	d056      	beq.n	80117de <_dtoa_r+0x7f6>
 8011730:	9801      	ldr	r0, [sp, #4]
 8011732:	4621      	mov	r1, r4
 8011734:	f002 f918 	bl	8013968 <__mcmp>
 8011738:	2800      	cmp	r0, #0
 801173a:	da50      	bge.n	80117de <_dtoa_r+0x7f6>
 801173c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011740:	9304      	str	r3, [sp, #16]
 8011742:	9901      	ldr	r1, [sp, #4]
 8011744:	2300      	movs	r3, #0
 8011746:	220a      	movs	r2, #10
 8011748:	4648      	mov	r0, r9
 801174a:	f001 ff0f 	bl	801356c <__multadd>
 801174e:	9b08      	ldr	r3, [sp, #32]
 8011750:	9001      	str	r0, [sp, #4]
 8011752:	2b00      	cmp	r3, #0
 8011754:	f000 8169 	beq.w	8011a2a <_dtoa_r+0xa42>
 8011758:	4629      	mov	r1, r5
 801175a:	2300      	movs	r3, #0
 801175c:	220a      	movs	r2, #10
 801175e:	4648      	mov	r0, r9
 8011760:	f001 ff04 	bl	801356c <__multadd>
 8011764:	f1bb 0f00 	cmp.w	fp, #0
 8011768:	4605      	mov	r5, r0
 801176a:	dc64      	bgt.n	8011836 <_dtoa_r+0x84e>
 801176c:	9b07      	ldr	r3, [sp, #28]
 801176e:	2b02      	cmp	r3, #2
 8011770:	dc3e      	bgt.n	80117f0 <_dtoa_r+0x808>
 8011772:	e060      	b.n	8011836 <_dtoa_r+0x84e>
 8011774:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011776:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801177a:	e73c      	b.n	80115f6 <_dtoa_r+0x60e>
 801177c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8011780:	42a3      	cmp	r3, r4
 8011782:	bfbf      	itttt	lt
 8011784:	1ae2      	sublt	r2, r4, r3
 8011786:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011788:	189b      	addlt	r3, r3, r2
 801178a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801178c:	bfae      	itee	ge
 801178e:	1b1c      	subge	r4, r3, r4
 8011790:	4623      	movlt	r3, r4
 8011792:	2400      	movlt	r4, #0
 8011794:	f1ba 0f00 	cmp.w	sl, #0
 8011798:	bfb5      	itete	lt
 801179a:	9a05      	ldrlt	r2, [sp, #20]
 801179c:	9e05      	ldrge	r6, [sp, #20]
 801179e:	eba2 060a 	sublt.w	r6, r2, sl
 80117a2:	4652      	movge	r2, sl
 80117a4:	bfb8      	it	lt
 80117a6:	2200      	movlt	r2, #0
 80117a8:	e727      	b.n	80115fa <_dtoa_r+0x612>
 80117aa:	9e05      	ldr	r6, [sp, #20]
 80117ac:	9d08      	ldr	r5, [sp, #32]
 80117ae:	461c      	mov	r4, r3
 80117b0:	e730      	b.n	8011614 <_dtoa_r+0x62c>
 80117b2:	461a      	mov	r2, r3
 80117b4:	e758      	b.n	8011668 <_dtoa_r+0x680>
 80117b6:	2300      	movs	r3, #0
 80117b8:	e786      	b.n	80116c8 <_dtoa_r+0x6e0>
 80117ba:	9b02      	ldr	r3, [sp, #8]
 80117bc:	e784      	b.n	80116c8 <_dtoa_r+0x6e0>
 80117be:	920b      	str	r2, [sp, #44]	@ 0x2c
 80117c0:	e783      	b.n	80116ca <_dtoa_r+0x6e2>
 80117c2:	2300      	movs	r3, #0
 80117c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117c6:	e784      	b.n	80116d2 <_dtoa_r+0x6ea>
 80117c8:	d09d      	beq.n	8011706 <_dtoa_r+0x71e>
 80117ca:	9b05      	ldr	r3, [sp, #20]
 80117cc:	321c      	adds	r2, #28
 80117ce:	4413      	add	r3, r2
 80117d0:	9305      	str	r3, [sp, #20]
 80117d2:	9b06      	ldr	r3, [sp, #24]
 80117d4:	4416      	add	r6, r2
 80117d6:	4413      	add	r3, r2
 80117d8:	e794      	b.n	8011704 <_dtoa_r+0x71c>
 80117da:	4602      	mov	r2, r0
 80117dc:	e7f5      	b.n	80117ca <_dtoa_r+0x7e2>
 80117de:	f1ba 0f00 	cmp.w	sl, #0
 80117e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80117e6:	46d3      	mov	fp, sl
 80117e8:	dc21      	bgt.n	801182e <_dtoa_r+0x846>
 80117ea:	9b07      	ldr	r3, [sp, #28]
 80117ec:	2b02      	cmp	r3, #2
 80117ee:	dd1e      	ble.n	801182e <_dtoa_r+0x846>
 80117f0:	f1bb 0f00 	cmp.w	fp, #0
 80117f4:	f47f aeb8 	bne.w	8011568 <_dtoa_r+0x580>
 80117f8:	4621      	mov	r1, r4
 80117fa:	465b      	mov	r3, fp
 80117fc:	2205      	movs	r2, #5
 80117fe:	4648      	mov	r0, r9
 8011800:	f001 feb4 	bl	801356c <__multadd>
 8011804:	4601      	mov	r1, r0
 8011806:	4604      	mov	r4, r0
 8011808:	9801      	ldr	r0, [sp, #4]
 801180a:	f002 f8ad 	bl	8013968 <__mcmp>
 801180e:	2800      	cmp	r0, #0
 8011810:	f77f aeaa 	ble.w	8011568 <_dtoa_r+0x580>
 8011814:	463e      	mov	r6, r7
 8011816:	2331      	movs	r3, #49	@ 0x31
 8011818:	f806 3b01 	strb.w	r3, [r6], #1
 801181c:	9b04      	ldr	r3, [sp, #16]
 801181e:	3301      	adds	r3, #1
 8011820:	9304      	str	r3, [sp, #16]
 8011822:	e6a5      	b.n	8011570 <_dtoa_r+0x588>
 8011824:	f8cd 8010 	str.w	r8, [sp, #16]
 8011828:	4654      	mov	r4, sl
 801182a:	4625      	mov	r5, r4
 801182c:	e7f2      	b.n	8011814 <_dtoa_r+0x82c>
 801182e:	9b08      	ldr	r3, [sp, #32]
 8011830:	2b00      	cmp	r3, #0
 8011832:	f000 80fe 	beq.w	8011a32 <_dtoa_r+0xa4a>
 8011836:	2e00      	cmp	r6, #0
 8011838:	dd05      	ble.n	8011846 <_dtoa_r+0x85e>
 801183a:	4629      	mov	r1, r5
 801183c:	4632      	mov	r2, r6
 801183e:	4648      	mov	r0, r9
 8011840:	f002 f826 	bl	8013890 <__lshift>
 8011844:	4605      	mov	r5, r0
 8011846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011848:	2b00      	cmp	r3, #0
 801184a:	d057      	beq.n	80118fc <_dtoa_r+0x914>
 801184c:	6869      	ldr	r1, [r5, #4]
 801184e:	4648      	mov	r0, r9
 8011850:	f001 fe5e 	bl	8013510 <_Balloc>
 8011854:	4606      	mov	r6, r0
 8011856:	b920      	cbnz	r0, 8011862 <_dtoa_r+0x87a>
 8011858:	4b80      	ldr	r3, [pc, #512]	@ (8011a5c <_dtoa_r+0xa74>)
 801185a:	4602      	mov	r2, r0
 801185c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011860:	e4d3      	b.n	801120a <_dtoa_r+0x222>
 8011862:	692a      	ldr	r2, [r5, #16]
 8011864:	3202      	adds	r2, #2
 8011866:	0092      	lsls	r2, r2, #2
 8011868:	f105 010c 	add.w	r1, r5, #12
 801186c:	300c      	adds	r0, #12
 801186e:	f7ff fac7 	bl	8010e00 <memcpy>
 8011872:	2201      	movs	r2, #1
 8011874:	4631      	mov	r1, r6
 8011876:	4648      	mov	r0, r9
 8011878:	f002 f80a 	bl	8013890 <__lshift>
 801187c:	1c7b      	adds	r3, r7, #1
 801187e:	9305      	str	r3, [sp, #20]
 8011880:	eb07 030b 	add.w	r3, r7, fp
 8011884:	9309      	str	r3, [sp, #36]	@ 0x24
 8011886:	9b02      	ldr	r3, [sp, #8]
 8011888:	f003 0301 	and.w	r3, r3, #1
 801188c:	46a8      	mov	r8, r5
 801188e:	9308      	str	r3, [sp, #32]
 8011890:	4605      	mov	r5, r0
 8011892:	9b05      	ldr	r3, [sp, #20]
 8011894:	9801      	ldr	r0, [sp, #4]
 8011896:	4621      	mov	r1, r4
 8011898:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801189c:	f7ff fb1c 	bl	8010ed8 <quorem>
 80118a0:	4641      	mov	r1, r8
 80118a2:	9002      	str	r0, [sp, #8]
 80118a4:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80118a8:	9801      	ldr	r0, [sp, #4]
 80118aa:	f002 f85d 	bl	8013968 <__mcmp>
 80118ae:	462a      	mov	r2, r5
 80118b0:	9006      	str	r0, [sp, #24]
 80118b2:	4621      	mov	r1, r4
 80118b4:	4648      	mov	r0, r9
 80118b6:	f002 f873 	bl	80139a0 <__mdiff>
 80118ba:	68c2      	ldr	r2, [r0, #12]
 80118bc:	4606      	mov	r6, r0
 80118be:	b9fa      	cbnz	r2, 8011900 <_dtoa_r+0x918>
 80118c0:	4601      	mov	r1, r0
 80118c2:	9801      	ldr	r0, [sp, #4]
 80118c4:	f002 f850 	bl	8013968 <__mcmp>
 80118c8:	4602      	mov	r2, r0
 80118ca:	4631      	mov	r1, r6
 80118cc:	4648      	mov	r0, r9
 80118ce:	920a      	str	r2, [sp, #40]	@ 0x28
 80118d0:	f001 fe43 	bl	801355a <_Bfree>
 80118d4:	9b07      	ldr	r3, [sp, #28]
 80118d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118d8:	9e05      	ldr	r6, [sp, #20]
 80118da:	ea43 0102 	orr.w	r1, r3, r2
 80118de:	9b08      	ldr	r3, [sp, #32]
 80118e0:	4319      	orrs	r1, r3
 80118e2:	d10f      	bne.n	8011904 <_dtoa_r+0x91c>
 80118e4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80118e8:	d028      	beq.n	801193c <_dtoa_r+0x954>
 80118ea:	9b06      	ldr	r3, [sp, #24]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	dd02      	ble.n	80118f6 <_dtoa_r+0x90e>
 80118f0:	9b02      	ldr	r3, [sp, #8]
 80118f2:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80118f6:	f88b a000 	strb.w	sl, [fp]
 80118fa:	e63b      	b.n	8011574 <_dtoa_r+0x58c>
 80118fc:	4628      	mov	r0, r5
 80118fe:	e7bd      	b.n	801187c <_dtoa_r+0x894>
 8011900:	2201      	movs	r2, #1
 8011902:	e7e2      	b.n	80118ca <_dtoa_r+0x8e2>
 8011904:	9b06      	ldr	r3, [sp, #24]
 8011906:	2b00      	cmp	r3, #0
 8011908:	db04      	blt.n	8011914 <_dtoa_r+0x92c>
 801190a:	9907      	ldr	r1, [sp, #28]
 801190c:	430b      	orrs	r3, r1
 801190e:	9908      	ldr	r1, [sp, #32]
 8011910:	430b      	orrs	r3, r1
 8011912:	d120      	bne.n	8011956 <_dtoa_r+0x96e>
 8011914:	2a00      	cmp	r2, #0
 8011916:	ddee      	ble.n	80118f6 <_dtoa_r+0x90e>
 8011918:	9901      	ldr	r1, [sp, #4]
 801191a:	2201      	movs	r2, #1
 801191c:	4648      	mov	r0, r9
 801191e:	f001 ffb7 	bl	8013890 <__lshift>
 8011922:	4621      	mov	r1, r4
 8011924:	9001      	str	r0, [sp, #4]
 8011926:	f002 f81f 	bl	8013968 <__mcmp>
 801192a:	2800      	cmp	r0, #0
 801192c:	dc03      	bgt.n	8011936 <_dtoa_r+0x94e>
 801192e:	d1e2      	bne.n	80118f6 <_dtoa_r+0x90e>
 8011930:	f01a 0f01 	tst.w	sl, #1
 8011934:	d0df      	beq.n	80118f6 <_dtoa_r+0x90e>
 8011936:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801193a:	d1d9      	bne.n	80118f0 <_dtoa_r+0x908>
 801193c:	2339      	movs	r3, #57	@ 0x39
 801193e:	f88b 3000 	strb.w	r3, [fp]
 8011942:	4633      	mov	r3, r6
 8011944:	461e      	mov	r6, r3
 8011946:	3b01      	subs	r3, #1
 8011948:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801194c:	2a39      	cmp	r2, #57	@ 0x39
 801194e:	d053      	beq.n	80119f8 <_dtoa_r+0xa10>
 8011950:	3201      	adds	r2, #1
 8011952:	701a      	strb	r2, [r3, #0]
 8011954:	e60e      	b.n	8011574 <_dtoa_r+0x58c>
 8011956:	2a00      	cmp	r2, #0
 8011958:	dd07      	ble.n	801196a <_dtoa_r+0x982>
 801195a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801195e:	d0ed      	beq.n	801193c <_dtoa_r+0x954>
 8011960:	f10a 0301 	add.w	r3, sl, #1
 8011964:	f88b 3000 	strb.w	r3, [fp]
 8011968:	e604      	b.n	8011574 <_dtoa_r+0x58c>
 801196a:	9b05      	ldr	r3, [sp, #20]
 801196c:	9a05      	ldr	r2, [sp, #20]
 801196e:	f803 ac01 	strb.w	sl, [r3, #-1]
 8011972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011974:	4293      	cmp	r3, r2
 8011976:	d029      	beq.n	80119cc <_dtoa_r+0x9e4>
 8011978:	9901      	ldr	r1, [sp, #4]
 801197a:	2300      	movs	r3, #0
 801197c:	220a      	movs	r2, #10
 801197e:	4648      	mov	r0, r9
 8011980:	f001 fdf4 	bl	801356c <__multadd>
 8011984:	45a8      	cmp	r8, r5
 8011986:	9001      	str	r0, [sp, #4]
 8011988:	f04f 0300 	mov.w	r3, #0
 801198c:	f04f 020a 	mov.w	r2, #10
 8011990:	4641      	mov	r1, r8
 8011992:	4648      	mov	r0, r9
 8011994:	d107      	bne.n	80119a6 <_dtoa_r+0x9be>
 8011996:	f001 fde9 	bl	801356c <__multadd>
 801199a:	4680      	mov	r8, r0
 801199c:	4605      	mov	r5, r0
 801199e:	9b05      	ldr	r3, [sp, #20]
 80119a0:	3301      	adds	r3, #1
 80119a2:	9305      	str	r3, [sp, #20]
 80119a4:	e775      	b.n	8011892 <_dtoa_r+0x8aa>
 80119a6:	f001 fde1 	bl	801356c <__multadd>
 80119aa:	4629      	mov	r1, r5
 80119ac:	4680      	mov	r8, r0
 80119ae:	2300      	movs	r3, #0
 80119b0:	220a      	movs	r2, #10
 80119b2:	4648      	mov	r0, r9
 80119b4:	f001 fdda 	bl	801356c <__multadd>
 80119b8:	4605      	mov	r5, r0
 80119ba:	e7f0      	b.n	801199e <_dtoa_r+0x9b6>
 80119bc:	f1bb 0f00 	cmp.w	fp, #0
 80119c0:	bfcc      	ite	gt
 80119c2:	465e      	movgt	r6, fp
 80119c4:	2601      	movle	r6, #1
 80119c6:	443e      	add	r6, r7
 80119c8:	f04f 0800 	mov.w	r8, #0
 80119cc:	9901      	ldr	r1, [sp, #4]
 80119ce:	2201      	movs	r2, #1
 80119d0:	4648      	mov	r0, r9
 80119d2:	f001 ff5d 	bl	8013890 <__lshift>
 80119d6:	4621      	mov	r1, r4
 80119d8:	9001      	str	r0, [sp, #4]
 80119da:	f001 ffc5 	bl	8013968 <__mcmp>
 80119de:	2800      	cmp	r0, #0
 80119e0:	dcaf      	bgt.n	8011942 <_dtoa_r+0x95a>
 80119e2:	d102      	bne.n	80119ea <_dtoa_r+0xa02>
 80119e4:	f01a 0f01 	tst.w	sl, #1
 80119e8:	d1ab      	bne.n	8011942 <_dtoa_r+0x95a>
 80119ea:	4633      	mov	r3, r6
 80119ec:	461e      	mov	r6, r3
 80119ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80119f2:	2a30      	cmp	r2, #48	@ 0x30
 80119f4:	d0fa      	beq.n	80119ec <_dtoa_r+0xa04>
 80119f6:	e5bd      	b.n	8011574 <_dtoa_r+0x58c>
 80119f8:	429f      	cmp	r7, r3
 80119fa:	d1a3      	bne.n	8011944 <_dtoa_r+0x95c>
 80119fc:	9b04      	ldr	r3, [sp, #16]
 80119fe:	3301      	adds	r3, #1
 8011a00:	9304      	str	r3, [sp, #16]
 8011a02:	2331      	movs	r3, #49	@ 0x31
 8011a04:	703b      	strb	r3, [r7, #0]
 8011a06:	e5b5      	b.n	8011574 <_dtoa_r+0x58c>
 8011a08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011a0a:	4f15      	ldr	r7, [pc, #84]	@ (8011a60 <_dtoa_r+0xa78>)
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	f43f ab22 	beq.w	8011056 <_dtoa_r+0x6e>
 8011a12:	f107 0308 	add.w	r3, r7, #8
 8011a16:	f7ff bb1c 	b.w	8011052 <_dtoa_r+0x6a>
 8011a1a:	9b07      	ldr	r3, [sp, #28]
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	f77f ae3b 	ble.w	8011698 <_dtoa_r+0x6b0>
 8011a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a26:	2001      	movs	r0, #1
 8011a28:	e65b      	b.n	80116e2 <_dtoa_r+0x6fa>
 8011a2a:	f1bb 0f00 	cmp.w	fp, #0
 8011a2e:	f77f aedc 	ble.w	80117ea <_dtoa_r+0x802>
 8011a32:	463e      	mov	r6, r7
 8011a34:	9801      	ldr	r0, [sp, #4]
 8011a36:	4621      	mov	r1, r4
 8011a38:	f7ff fa4e 	bl	8010ed8 <quorem>
 8011a3c:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011a40:	f806 ab01 	strb.w	sl, [r6], #1
 8011a44:	1bf2      	subs	r2, r6, r7
 8011a46:	4593      	cmp	fp, r2
 8011a48:	ddb8      	ble.n	80119bc <_dtoa_r+0x9d4>
 8011a4a:	9901      	ldr	r1, [sp, #4]
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	220a      	movs	r2, #10
 8011a50:	4648      	mov	r0, r9
 8011a52:	f001 fd8b 	bl	801356c <__multadd>
 8011a56:	9001      	str	r0, [sp, #4]
 8011a58:	e7ec      	b.n	8011a34 <_dtoa_r+0xa4c>
 8011a5a:	bf00      	nop
 8011a5c:	08015df0 	.word	0x08015df0
 8011a60:	08015de1 	.word	0x08015de1

08011a64 <_malloc_trim_r>:
 8011a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a68:	4606      	mov	r6, r0
 8011a6a:	2008      	movs	r0, #8
 8011a6c:	4689      	mov	r9, r1
 8011a6e:	f002 fb93 	bl	8014198 <sysconf>
 8011a72:	4f24      	ldr	r7, [pc, #144]	@ (8011b04 <_malloc_trim_r+0xa0>)
 8011a74:	4680      	mov	r8, r0
 8011a76:	4630      	mov	r0, r6
 8011a78:	f001 fd3e 	bl	80134f8 <__malloc_lock>
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	685d      	ldr	r5, [r3, #4]
 8011a80:	f025 0503 	bic.w	r5, r5, #3
 8011a84:	f1a5 0411 	sub.w	r4, r5, #17
 8011a88:	eba4 0409 	sub.w	r4, r4, r9
 8011a8c:	4444      	add	r4, r8
 8011a8e:	fbb4 f4f8 	udiv	r4, r4, r8
 8011a92:	3c01      	subs	r4, #1
 8011a94:	fb08 f404 	mul.w	r4, r8, r4
 8011a98:	45a0      	cmp	r8, r4
 8011a9a:	dd05      	ble.n	8011aa8 <_malloc_trim_r+0x44>
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	f001 fd31 	bl	8013504 <__malloc_unlock>
 8011aa2:	2000      	movs	r0, #0
 8011aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aa8:	2100      	movs	r1, #0
 8011aaa:	4630      	mov	r0, r6
 8011aac:	f002 fb52 	bl	8014154 <_sbrk_r>
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	442b      	add	r3, r5
 8011ab4:	4298      	cmp	r0, r3
 8011ab6:	d1f1      	bne.n	8011a9c <_malloc_trim_r+0x38>
 8011ab8:	4261      	negs	r1, r4
 8011aba:	4630      	mov	r0, r6
 8011abc:	f002 fb4a 	bl	8014154 <_sbrk_r>
 8011ac0:	3001      	adds	r0, #1
 8011ac2:	d110      	bne.n	8011ae6 <_malloc_trim_r+0x82>
 8011ac4:	2100      	movs	r1, #0
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	f002 fb44 	bl	8014154 <_sbrk_r>
 8011acc:	68ba      	ldr	r2, [r7, #8]
 8011ace:	1a83      	subs	r3, r0, r2
 8011ad0:	2b0f      	cmp	r3, #15
 8011ad2:	dde3      	ble.n	8011a9c <_malloc_trim_r+0x38>
 8011ad4:	490c      	ldr	r1, [pc, #48]	@ (8011b08 <_malloc_trim_r+0xa4>)
 8011ad6:	6809      	ldr	r1, [r1, #0]
 8011ad8:	1a40      	subs	r0, r0, r1
 8011ada:	490c      	ldr	r1, [pc, #48]	@ (8011b0c <_malloc_trim_r+0xa8>)
 8011adc:	f043 0301 	orr.w	r3, r3, #1
 8011ae0:	6008      	str	r0, [r1, #0]
 8011ae2:	6053      	str	r3, [r2, #4]
 8011ae4:	e7da      	b.n	8011a9c <_malloc_trim_r+0x38>
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	4a08      	ldr	r2, [pc, #32]	@ (8011b0c <_malloc_trim_r+0xa8>)
 8011aea:	1b2d      	subs	r5, r5, r4
 8011aec:	f045 0501 	orr.w	r5, r5, #1
 8011af0:	605d      	str	r5, [r3, #4]
 8011af2:	6813      	ldr	r3, [r2, #0]
 8011af4:	4630      	mov	r0, r6
 8011af6:	1b1b      	subs	r3, r3, r4
 8011af8:	6013      	str	r3, [r2, #0]
 8011afa:	f001 fd03 	bl	8013504 <__malloc_unlock>
 8011afe:	2001      	movs	r0, #1
 8011b00:	e7d0      	b.n	8011aa4 <_malloc_trim_r+0x40>
 8011b02:	bf00      	nop
 8011b04:	240002bc 	.word	0x240002bc
 8011b08:	240002b4 	.word	0x240002b4
 8011b0c:	24024d64 	.word	0x24024d64

08011b10 <_free_r>:
 8011b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b12:	4604      	mov	r4, r0
 8011b14:	460f      	mov	r7, r1
 8011b16:	2900      	cmp	r1, #0
 8011b18:	f000 80b1 	beq.w	8011c7e <_free_r+0x16e>
 8011b1c:	f001 fcec 	bl	80134f8 <__malloc_lock>
 8011b20:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011b24:	4d56      	ldr	r5, [pc, #344]	@ (8011c80 <_free_r+0x170>)
 8011b26:	f022 0001 	bic.w	r0, r2, #1
 8011b2a:	f1a7 0308 	sub.w	r3, r7, #8
 8011b2e:	eb03 0c00 	add.w	ip, r3, r0
 8011b32:	68a9      	ldr	r1, [r5, #8]
 8011b34:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8011b38:	4561      	cmp	r1, ip
 8011b3a:	f026 0603 	bic.w	r6, r6, #3
 8011b3e:	f002 0201 	and.w	r2, r2, #1
 8011b42:	d11b      	bne.n	8011b7c <_free_r+0x6c>
 8011b44:	4406      	add	r6, r0
 8011b46:	b93a      	cbnz	r2, 8011b58 <_free_r+0x48>
 8011b48:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8011b4c:	1a9b      	subs	r3, r3, r2
 8011b4e:	4416      	add	r6, r2
 8011b50:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8011b54:	60ca      	str	r2, [r1, #12]
 8011b56:	6091      	str	r1, [r2, #8]
 8011b58:	f046 0201 	orr.w	r2, r6, #1
 8011b5c:	605a      	str	r2, [r3, #4]
 8011b5e:	60ab      	str	r3, [r5, #8]
 8011b60:	4b48      	ldr	r3, [pc, #288]	@ (8011c84 <_free_r+0x174>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	42b3      	cmp	r3, r6
 8011b66:	d804      	bhi.n	8011b72 <_free_r+0x62>
 8011b68:	4b47      	ldr	r3, [pc, #284]	@ (8011c88 <_free_r+0x178>)
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	6819      	ldr	r1, [r3, #0]
 8011b6e:	f7ff ff79 	bl	8011a64 <_malloc_trim_r>
 8011b72:	4620      	mov	r0, r4
 8011b74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011b78:	f001 bcc4 	b.w	8013504 <__malloc_unlock>
 8011b7c:	f8cc 6004 	str.w	r6, [ip, #4]
 8011b80:	2a00      	cmp	r2, #0
 8011b82:	d138      	bne.n	8011bf6 <_free_r+0xe6>
 8011b84:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8011b88:	1a5b      	subs	r3, r3, r1
 8011b8a:	4408      	add	r0, r1
 8011b8c:	6899      	ldr	r1, [r3, #8]
 8011b8e:	f105 0708 	add.w	r7, r5, #8
 8011b92:	42b9      	cmp	r1, r7
 8011b94:	d031      	beq.n	8011bfa <_free_r+0xea>
 8011b96:	68df      	ldr	r7, [r3, #12]
 8011b98:	60cf      	str	r7, [r1, #12]
 8011b9a:	60b9      	str	r1, [r7, #8]
 8011b9c:	eb0c 0106 	add.w	r1, ip, r6
 8011ba0:	6849      	ldr	r1, [r1, #4]
 8011ba2:	07c9      	lsls	r1, r1, #31
 8011ba4:	d40b      	bmi.n	8011bbe <_free_r+0xae>
 8011ba6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8011baa:	4430      	add	r0, r6
 8011bac:	bb3a      	cbnz	r2, 8011bfe <_free_r+0xee>
 8011bae:	4e37      	ldr	r6, [pc, #220]	@ (8011c8c <_free_r+0x17c>)
 8011bb0:	42b1      	cmp	r1, r6
 8011bb2:	d124      	bne.n	8011bfe <_free_r+0xee>
 8011bb4:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8011bb8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	f040 0101 	orr.w	r1, r0, #1
 8011bc2:	6059      	str	r1, [r3, #4]
 8011bc4:	5018      	str	r0, [r3, r0]
 8011bc6:	2a00      	cmp	r2, #0
 8011bc8:	d1d3      	bne.n	8011b72 <_free_r+0x62>
 8011bca:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8011bce:	d21b      	bcs.n	8011c08 <_free_r+0xf8>
 8011bd0:	08c2      	lsrs	r2, r0, #3
 8011bd2:	2101      	movs	r1, #1
 8011bd4:	0940      	lsrs	r0, r0, #5
 8011bd6:	4081      	lsls	r1, r0
 8011bd8:	6868      	ldr	r0, [r5, #4]
 8011bda:	3201      	adds	r2, #1
 8011bdc:	4301      	orrs	r1, r0
 8011bde:	6069      	str	r1, [r5, #4]
 8011be0:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8011be4:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8011be8:	3908      	subs	r1, #8
 8011bea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011bee:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8011bf2:	60c3      	str	r3, [r0, #12]
 8011bf4:	e7bd      	b.n	8011b72 <_free_r+0x62>
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	e7d0      	b.n	8011b9c <_free_r+0x8c>
 8011bfa:	2201      	movs	r2, #1
 8011bfc:	e7ce      	b.n	8011b9c <_free_r+0x8c>
 8011bfe:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8011c02:	60ce      	str	r6, [r1, #12]
 8011c04:	60b1      	str	r1, [r6, #8]
 8011c06:	e7da      	b.n	8011bbe <_free_r+0xae>
 8011c08:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8011c0c:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8011c10:	d214      	bcs.n	8011c3c <_free_r+0x12c>
 8011c12:	0982      	lsrs	r2, r0, #6
 8011c14:	3238      	adds	r2, #56	@ 0x38
 8011c16:	1c51      	adds	r1, r2, #1
 8011c18:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8011c1c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8011c20:	428e      	cmp	r6, r1
 8011c22:	d125      	bne.n	8011c70 <_free_r+0x160>
 8011c24:	2001      	movs	r0, #1
 8011c26:	1092      	asrs	r2, r2, #2
 8011c28:	fa00 f202 	lsl.w	r2, r0, r2
 8011c2c:	6868      	ldr	r0, [r5, #4]
 8011c2e:	4302      	orrs	r2, r0
 8011c30:	606a      	str	r2, [r5, #4]
 8011c32:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8011c36:	60b3      	str	r3, [r6, #8]
 8011c38:	60cb      	str	r3, [r1, #12]
 8011c3a:	e79a      	b.n	8011b72 <_free_r+0x62>
 8011c3c:	2a14      	cmp	r2, #20
 8011c3e:	d801      	bhi.n	8011c44 <_free_r+0x134>
 8011c40:	325b      	adds	r2, #91	@ 0x5b
 8011c42:	e7e8      	b.n	8011c16 <_free_r+0x106>
 8011c44:	2a54      	cmp	r2, #84	@ 0x54
 8011c46:	d802      	bhi.n	8011c4e <_free_r+0x13e>
 8011c48:	0b02      	lsrs	r2, r0, #12
 8011c4a:	326e      	adds	r2, #110	@ 0x6e
 8011c4c:	e7e3      	b.n	8011c16 <_free_r+0x106>
 8011c4e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8011c52:	d802      	bhi.n	8011c5a <_free_r+0x14a>
 8011c54:	0bc2      	lsrs	r2, r0, #15
 8011c56:	3277      	adds	r2, #119	@ 0x77
 8011c58:	e7dd      	b.n	8011c16 <_free_r+0x106>
 8011c5a:	f240 5154 	movw	r1, #1364	@ 0x554
 8011c5e:	428a      	cmp	r2, r1
 8011c60:	bf9a      	itte	ls
 8011c62:	0c82      	lsrls	r2, r0, #18
 8011c64:	327c      	addls	r2, #124	@ 0x7c
 8011c66:	227e      	movhi	r2, #126	@ 0x7e
 8011c68:	e7d5      	b.n	8011c16 <_free_r+0x106>
 8011c6a:	6889      	ldr	r1, [r1, #8]
 8011c6c:	428e      	cmp	r6, r1
 8011c6e:	d004      	beq.n	8011c7a <_free_r+0x16a>
 8011c70:	684a      	ldr	r2, [r1, #4]
 8011c72:	f022 0203 	bic.w	r2, r2, #3
 8011c76:	4282      	cmp	r2, r0
 8011c78:	d8f7      	bhi.n	8011c6a <_free_r+0x15a>
 8011c7a:	68ce      	ldr	r6, [r1, #12]
 8011c7c:	e7d9      	b.n	8011c32 <_free_r+0x122>
 8011c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c80:	240002bc 	.word	0x240002bc
 8011c84:	240002b8 	.word	0x240002b8
 8011c88:	24024d94 	.word	0x24024d94
 8011c8c:	240002c4 	.word	0x240002c4

08011c90 <_malloc_r>:
 8011c90:	f101 030b 	add.w	r3, r1, #11
 8011c94:	2b16      	cmp	r3, #22
 8011c96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c9a:	4605      	mov	r5, r0
 8011c9c:	d906      	bls.n	8011cac <_malloc_r+0x1c>
 8011c9e:	f033 0707 	bics.w	r7, r3, #7
 8011ca2:	d504      	bpl.n	8011cae <_malloc_r+0x1e>
 8011ca4:	230c      	movs	r3, #12
 8011ca6:	602b      	str	r3, [r5, #0]
 8011ca8:	2400      	movs	r4, #0
 8011caa:	e1a3      	b.n	8011ff4 <_malloc_r+0x364>
 8011cac:	2710      	movs	r7, #16
 8011cae:	42b9      	cmp	r1, r7
 8011cb0:	d8f8      	bhi.n	8011ca4 <_malloc_r+0x14>
 8011cb2:	4628      	mov	r0, r5
 8011cb4:	f001 fc20 	bl	80134f8 <__malloc_lock>
 8011cb8:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8011cbc:	4eaf      	ldr	r6, [pc, #700]	@ (8011f7c <_malloc_r+0x2ec>)
 8011cbe:	d237      	bcs.n	8011d30 <_malloc_r+0xa0>
 8011cc0:	f107 0208 	add.w	r2, r7, #8
 8011cc4:	4432      	add	r2, r6
 8011cc6:	f1a2 0108 	sub.w	r1, r2, #8
 8011cca:	6854      	ldr	r4, [r2, #4]
 8011ccc:	428c      	cmp	r4, r1
 8011cce:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8011cd2:	d102      	bne.n	8011cda <_malloc_r+0x4a>
 8011cd4:	68d4      	ldr	r4, [r2, #12]
 8011cd6:	42a2      	cmp	r2, r4
 8011cd8:	d010      	beq.n	8011cfc <_malloc_r+0x6c>
 8011cda:	6863      	ldr	r3, [r4, #4]
 8011cdc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8011ce0:	f023 0303 	bic.w	r3, r3, #3
 8011ce4:	60ca      	str	r2, [r1, #12]
 8011ce6:	4423      	add	r3, r4
 8011ce8:	6091      	str	r1, [r2, #8]
 8011cea:	685a      	ldr	r2, [r3, #4]
 8011cec:	f042 0201 	orr.w	r2, r2, #1
 8011cf0:	605a      	str	r2, [r3, #4]
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	f001 fc06 	bl	8013504 <__malloc_unlock>
 8011cf8:	3408      	adds	r4, #8
 8011cfa:	e17b      	b.n	8011ff4 <_malloc_r+0x364>
 8011cfc:	3302      	adds	r3, #2
 8011cfe:	6934      	ldr	r4, [r6, #16]
 8011d00:	499f      	ldr	r1, [pc, #636]	@ (8011f80 <_malloc_r+0x2f0>)
 8011d02:	428c      	cmp	r4, r1
 8011d04:	d077      	beq.n	8011df6 <_malloc_r+0x166>
 8011d06:	6862      	ldr	r2, [r4, #4]
 8011d08:	f022 0c03 	bic.w	ip, r2, #3
 8011d0c:	ebac 0007 	sub.w	r0, ip, r7
 8011d10:	280f      	cmp	r0, #15
 8011d12:	dd48      	ble.n	8011da6 <_malloc_r+0x116>
 8011d14:	19e2      	adds	r2, r4, r7
 8011d16:	f040 0301 	orr.w	r3, r0, #1
 8011d1a:	f047 0701 	orr.w	r7, r7, #1
 8011d1e:	6067      	str	r7, [r4, #4]
 8011d20:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8011d24:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8011d28:	6053      	str	r3, [r2, #4]
 8011d2a:	f844 000c 	str.w	r0, [r4, ip]
 8011d2e:	e7e0      	b.n	8011cf2 <_malloc_r+0x62>
 8011d30:	0a7b      	lsrs	r3, r7, #9
 8011d32:	d02a      	beq.n	8011d8a <_malloc_r+0xfa>
 8011d34:	2b04      	cmp	r3, #4
 8011d36:	d812      	bhi.n	8011d5e <_malloc_r+0xce>
 8011d38:	09bb      	lsrs	r3, r7, #6
 8011d3a:	3338      	adds	r3, #56	@ 0x38
 8011d3c:	1c5a      	adds	r2, r3, #1
 8011d3e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8011d42:	f1a2 0c08 	sub.w	ip, r2, #8
 8011d46:	6854      	ldr	r4, [r2, #4]
 8011d48:	4564      	cmp	r4, ip
 8011d4a:	d006      	beq.n	8011d5a <_malloc_r+0xca>
 8011d4c:	6862      	ldr	r2, [r4, #4]
 8011d4e:	f022 0203 	bic.w	r2, r2, #3
 8011d52:	1bd0      	subs	r0, r2, r7
 8011d54:	280f      	cmp	r0, #15
 8011d56:	dd1c      	ble.n	8011d92 <_malloc_r+0x102>
 8011d58:	3b01      	subs	r3, #1
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	e7cf      	b.n	8011cfe <_malloc_r+0x6e>
 8011d5e:	2b14      	cmp	r3, #20
 8011d60:	d801      	bhi.n	8011d66 <_malloc_r+0xd6>
 8011d62:	335b      	adds	r3, #91	@ 0x5b
 8011d64:	e7ea      	b.n	8011d3c <_malloc_r+0xac>
 8011d66:	2b54      	cmp	r3, #84	@ 0x54
 8011d68:	d802      	bhi.n	8011d70 <_malloc_r+0xe0>
 8011d6a:	0b3b      	lsrs	r3, r7, #12
 8011d6c:	336e      	adds	r3, #110	@ 0x6e
 8011d6e:	e7e5      	b.n	8011d3c <_malloc_r+0xac>
 8011d70:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8011d74:	d802      	bhi.n	8011d7c <_malloc_r+0xec>
 8011d76:	0bfb      	lsrs	r3, r7, #15
 8011d78:	3377      	adds	r3, #119	@ 0x77
 8011d7a:	e7df      	b.n	8011d3c <_malloc_r+0xac>
 8011d7c:	f240 5254 	movw	r2, #1364	@ 0x554
 8011d80:	4293      	cmp	r3, r2
 8011d82:	d804      	bhi.n	8011d8e <_malloc_r+0xfe>
 8011d84:	0cbb      	lsrs	r3, r7, #18
 8011d86:	337c      	adds	r3, #124	@ 0x7c
 8011d88:	e7d8      	b.n	8011d3c <_malloc_r+0xac>
 8011d8a:	233f      	movs	r3, #63	@ 0x3f
 8011d8c:	e7d6      	b.n	8011d3c <_malloc_r+0xac>
 8011d8e:	237e      	movs	r3, #126	@ 0x7e
 8011d90:	e7d4      	b.n	8011d3c <_malloc_r+0xac>
 8011d92:	2800      	cmp	r0, #0
 8011d94:	68e1      	ldr	r1, [r4, #12]
 8011d96:	db04      	blt.n	8011da2 <_malloc_r+0x112>
 8011d98:	68a3      	ldr	r3, [r4, #8]
 8011d9a:	60d9      	str	r1, [r3, #12]
 8011d9c:	608b      	str	r3, [r1, #8]
 8011d9e:	18a3      	adds	r3, r4, r2
 8011da0:	e7a3      	b.n	8011cea <_malloc_r+0x5a>
 8011da2:	460c      	mov	r4, r1
 8011da4:	e7d0      	b.n	8011d48 <_malloc_r+0xb8>
 8011da6:	2800      	cmp	r0, #0
 8011da8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8011dac:	db07      	blt.n	8011dbe <_malloc_r+0x12e>
 8011dae:	44a4      	add	ip, r4
 8011db0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8011db4:	f043 0301 	orr.w	r3, r3, #1
 8011db8:	f8cc 3004 	str.w	r3, [ip, #4]
 8011dbc:	e799      	b.n	8011cf2 <_malloc_r+0x62>
 8011dbe:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8011dc2:	6870      	ldr	r0, [r6, #4]
 8011dc4:	f080 8095 	bcs.w	8011ef2 <_malloc_r+0x262>
 8011dc8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8011dcc:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8011dd0:	f04f 0c01 	mov.w	ip, #1
 8011dd4:	3201      	adds	r2, #1
 8011dd6:	fa0c fc0e 	lsl.w	ip, ip, lr
 8011dda:	ea4c 0000 	orr.w	r0, ip, r0
 8011dde:	6070      	str	r0, [r6, #4]
 8011de0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8011de4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8011de8:	3808      	subs	r0, #8
 8011dea:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8011dee:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8011df2:	f8cc 400c 	str.w	r4, [ip, #12]
 8011df6:	1098      	asrs	r0, r3, #2
 8011df8:	2201      	movs	r2, #1
 8011dfa:	4082      	lsls	r2, r0
 8011dfc:	6870      	ldr	r0, [r6, #4]
 8011dfe:	4290      	cmp	r0, r2
 8011e00:	d326      	bcc.n	8011e50 <_malloc_r+0x1c0>
 8011e02:	4210      	tst	r0, r2
 8011e04:	d106      	bne.n	8011e14 <_malloc_r+0x184>
 8011e06:	f023 0303 	bic.w	r3, r3, #3
 8011e0a:	0052      	lsls	r2, r2, #1
 8011e0c:	4210      	tst	r0, r2
 8011e0e:	f103 0304 	add.w	r3, r3, #4
 8011e12:	d0fa      	beq.n	8011e0a <_malloc_r+0x17a>
 8011e14:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8011e18:	46c1      	mov	r9, r8
 8011e1a:	469e      	mov	lr, r3
 8011e1c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8011e20:	454c      	cmp	r4, r9
 8011e22:	f040 80b9 	bne.w	8011f98 <_malloc_r+0x308>
 8011e26:	f10e 0e01 	add.w	lr, lr, #1
 8011e2a:	f01e 0f03 	tst.w	lr, #3
 8011e2e:	f109 0908 	add.w	r9, r9, #8
 8011e32:	d1f3      	bne.n	8011e1c <_malloc_r+0x18c>
 8011e34:	0798      	lsls	r0, r3, #30
 8011e36:	f040 80e3 	bne.w	8012000 <_malloc_r+0x370>
 8011e3a:	6873      	ldr	r3, [r6, #4]
 8011e3c:	ea23 0302 	bic.w	r3, r3, r2
 8011e40:	6073      	str	r3, [r6, #4]
 8011e42:	6870      	ldr	r0, [r6, #4]
 8011e44:	0052      	lsls	r2, r2, #1
 8011e46:	4290      	cmp	r0, r2
 8011e48:	d302      	bcc.n	8011e50 <_malloc_r+0x1c0>
 8011e4a:	2a00      	cmp	r2, #0
 8011e4c:	f040 80e5 	bne.w	801201a <_malloc_r+0x38a>
 8011e50:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8011e54:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011e58:	f023 0903 	bic.w	r9, r3, #3
 8011e5c:	45b9      	cmp	r9, r7
 8011e5e:	d304      	bcc.n	8011e6a <_malloc_r+0x1da>
 8011e60:	eba9 0207 	sub.w	r2, r9, r7
 8011e64:	2a0f      	cmp	r2, #15
 8011e66:	f300 8141 	bgt.w	80120ec <_malloc_r+0x45c>
 8011e6a:	4b46      	ldr	r3, [pc, #280]	@ (8011f84 <_malloc_r+0x2f4>)
 8011e6c:	6819      	ldr	r1, [r3, #0]
 8011e6e:	3110      	adds	r1, #16
 8011e70:	4439      	add	r1, r7
 8011e72:	2008      	movs	r0, #8
 8011e74:	9101      	str	r1, [sp, #4]
 8011e76:	f002 f98f 	bl	8014198 <sysconf>
 8011e7a:	4a43      	ldr	r2, [pc, #268]	@ (8011f88 <_malloc_r+0x2f8>)
 8011e7c:	9901      	ldr	r1, [sp, #4]
 8011e7e:	6813      	ldr	r3, [r2, #0]
 8011e80:	3301      	adds	r3, #1
 8011e82:	bf1f      	itttt	ne
 8011e84:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 8011e88:	1809      	addne	r1, r1, r0
 8011e8a:	4243      	negne	r3, r0
 8011e8c:	4019      	andne	r1, r3
 8011e8e:	4680      	mov	r8, r0
 8011e90:	4628      	mov	r0, r5
 8011e92:	9101      	str	r1, [sp, #4]
 8011e94:	f002 f95e 	bl	8014154 <_sbrk_r>
 8011e98:	1c42      	adds	r2, r0, #1
 8011e9a:	eb0a 0b09 	add.w	fp, sl, r9
 8011e9e:	4604      	mov	r4, r0
 8011ea0:	f000 80f7 	beq.w	8012092 <_malloc_r+0x402>
 8011ea4:	4583      	cmp	fp, r0
 8011ea6:	9901      	ldr	r1, [sp, #4]
 8011ea8:	4a37      	ldr	r2, [pc, #220]	@ (8011f88 <_malloc_r+0x2f8>)
 8011eaa:	d902      	bls.n	8011eb2 <_malloc_r+0x222>
 8011eac:	45b2      	cmp	sl, r6
 8011eae:	f040 80f0 	bne.w	8012092 <_malloc_r+0x402>
 8011eb2:	4b36      	ldr	r3, [pc, #216]	@ (8011f8c <_malloc_r+0x2fc>)
 8011eb4:	6818      	ldr	r0, [r3, #0]
 8011eb6:	45a3      	cmp	fp, r4
 8011eb8:	eb00 0e01 	add.w	lr, r0, r1
 8011ebc:	f8c3 e000 	str.w	lr, [r3]
 8011ec0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8011ec4:	f040 80ab 	bne.w	801201e <_malloc_r+0x38e>
 8011ec8:	ea1b 0f0c 	tst.w	fp, ip
 8011ecc:	f040 80a7 	bne.w	801201e <_malloc_r+0x38e>
 8011ed0:	68b2      	ldr	r2, [r6, #8]
 8011ed2:	4449      	add	r1, r9
 8011ed4:	f041 0101 	orr.w	r1, r1, #1
 8011ed8:	6051      	str	r1, [r2, #4]
 8011eda:	4a2d      	ldr	r2, [pc, #180]	@ (8011f90 <_malloc_r+0x300>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	6811      	ldr	r1, [r2, #0]
 8011ee0:	428b      	cmp	r3, r1
 8011ee2:	bf88      	it	hi
 8011ee4:	6013      	strhi	r3, [r2, #0]
 8011ee6:	4a2b      	ldr	r2, [pc, #172]	@ (8011f94 <_malloc_r+0x304>)
 8011ee8:	6811      	ldr	r1, [r2, #0]
 8011eea:	428b      	cmp	r3, r1
 8011eec:	bf88      	it	hi
 8011eee:	6013      	strhi	r3, [r2, #0]
 8011ef0:	e0cf      	b.n	8012092 <_malloc_r+0x402>
 8011ef2:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8011ef6:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8011efa:	d218      	bcs.n	8011f2e <_malloc_r+0x29e>
 8011efc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8011f00:	3238      	adds	r2, #56	@ 0x38
 8011f02:	f102 0e01 	add.w	lr, r2, #1
 8011f06:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8011f0a:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8011f0e:	45f0      	cmp	r8, lr
 8011f10:	d12b      	bne.n	8011f6a <_malloc_r+0x2da>
 8011f12:	1092      	asrs	r2, r2, #2
 8011f14:	f04f 0c01 	mov.w	ip, #1
 8011f18:	fa0c f202 	lsl.w	r2, ip, r2
 8011f1c:	4302      	orrs	r2, r0
 8011f1e:	6072      	str	r2, [r6, #4]
 8011f20:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8011f24:	f8c8 4008 	str.w	r4, [r8, #8]
 8011f28:	f8ce 400c 	str.w	r4, [lr, #12]
 8011f2c:	e763      	b.n	8011df6 <_malloc_r+0x166>
 8011f2e:	2a14      	cmp	r2, #20
 8011f30:	d801      	bhi.n	8011f36 <_malloc_r+0x2a6>
 8011f32:	325b      	adds	r2, #91	@ 0x5b
 8011f34:	e7e5      	b.n	8011f02 <_malloc_r+0x272>
 8011f36:	2a54      	cmp	r2, #84	@ 0x54
 8011f38:	d803      	bhi.n	8011f42 <_malloc_r+0x2b2>
 8011f3a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8011f3e:	326e      	adds	r2, #110	@ 0x6e
 8011f40:	e7df      	b.n	8011f02 <_malloc_r+0x272>
 8011f42:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8011f46:	d803      	bhi.n	8011f50 <_malloc_r+0x2c0>
 8011f48:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8011f4c:	3277      	adds	r2, #119	@ 0x77
 8011f4e:	e7d8      	b.n	8011f02 <_malloc_r+0x272>
 8011f50:	f240 5e54 	movw	lr, #1364	@ 0x554
 8011f54:	4572      	cmp	r2, lr
 8011f56:	bf9a      	itte	ls
 8011f58:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8011f5c:	327c      	addls	r2, #124	@ 0x7c
 8011f5e:	227e      	movhi	r2, #126	@ 0x7e
 8011f60:	e7cf      	b.n	8011f02 <_malloc_r+0x272>
 8011f62:	f8de e008 	ldr.w	lr, [lr, #8]
 8011f66:	45f0      	cmp	r8, lr
 8011f68:	d005      	beq.n	8011f76 <_malloc_r+0x2e6>
 8011f6a:	f8de 2004 	ldr.w	r2, [lr, #4]
 8011f6e:	f022 0203 	bic.w	r2, r2, #3
 8011f72:	4562      	cmp	r2, ip
 8011f74:	d8f5      	bhi.n	8011f62 <_malloc_r+0x2d2>
 8011f76:	f8de 800c 	ldr.w	r8, [lr, #12]
 8011f7a:	e7d1      	b.n	8011f20 <_malloc_r+0x290>
 8011f7c:	240002bc 	.word	0x240002bc
 8011f80:	240002c4 	.word	0x240002c4
 8011f84:	24024d94 	.word	0x24024d94
 8011f88:	240002b4 	.word	0x240002b4
 8011f8c:	24024d64 	.word	0x24024d64
 8011f90:	24024d90 	.word	0x24024d90
 8011f94:	24024d8c 	.word	0x24024d8c
 8011f98:	6860      	ldr	r0, [r4, #4]
 8011f9a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8011f9e:	f020 0003 	bic.w	r0, r0, #3
 8011fa2:	eba0 0a07 	sub.w	sl, r0, r7
 8011fa6:	f1ba 0f0f 	cmp.w	sl, #15
 8011faa:	dd12      	ble.n	8011fd2 <_malloc_r+0x342>
 8011fac:	68a3      	ldr	r3, [r4, #8]
 8011fae:	19e2      	adds	r2, r4, r7
 8011fb0:	f047 0701 	orr.w	r7, r7, #1
 8011fb4:	6067      	str	r7, [r4, #4]
 8011fb6:	f8c3 c00c 	str.w	ip, [r3, #12]
 8011fba:	f8cc 3008 	str.w	r3, [ip, #8]
 8011fbe:	f04a 0301 	orr.w	r3, sl, #1
 8011fc2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8011fc6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8011fca:	6053      	str	r3, [r2, #4]
 8011fcc:	f844 a000 	str.w	sl, [r4, r0]
 8011fd0:	e68f      	b.n	8011cf2 <_malloc_r+0x62>
 8011fd2:	f1ba 0f00 	cmp.w	sl, #0
 8011fd6:	db11      	blt.n	8011ffc <_malloc_r+0x36c>
 8011fd8:	4420      	add	r0, r4
 8011fda:	6843      	ldr	r3, [r0, #4]
 8011fdc:	f043 0301 	orr.w	r3, r3, #1
 8011fe0:	6043      	str	r3, [r0, #4]
 8011fe2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	f8c3 c00c 	str.w	ip, [r3, #12]
 8011fec:	f8cc 3008 	str.w	r3, [ip, #8]
 8011ff0:	f001 fa88 	bl	8013504 <__malloc_unlock>
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	b003      	add	sp, #12
 8011ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ffc:	4664      	mov	r4, ip
 8011ffe:	e70f      	b.n	8011e20 <_malloc_r+0x190>
 8012000:	f858 0908 	ldr.w	r0, [r8], #-8
 8012004:	4540      	cmp	r0, r8
 8012006:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801200a:	f43f af13 	beq.w	8011e34 <_malloc_r+0x1a4>
 801200e:	e718      	b.n	8011e42 <_malloc_r+0x1b2>
 8012010:	3304      	adds	r3, #4
 8012012:	0052      	lsls	r2, r2, #1
 8012014:	4210      	tst	r0, r2
 8012016:	d0fb      	beq.n	8012010 <_malloc_r+0x380>
 8012018:	e6fc      	b.n	8011e14 <_malloc_r+0x184>
 801201a:	4673      	mov	r3, lr
 801201c:	e7fa      	b.n	8012014 <_malloc_r+0x384>
 801201e:	6810      	ldr	r0, [r2, #0]
 8012020:	3001      	adds	r0, #1
 8012022:	bf1b      	ittet	ne
 8012024:	eba4 0b0b 	subne.w	fp, r4, fp
 8012028:	eb0b 020e 	addne.w	r2, fp, lr
 801202c:	6014      	streq	r4, [r2, #0]
 801202e:	601a      	strne	r2, [r3, #0]
 8012030:	f014 0b07 	ands.w	fp, r4, #7
 8012034:	bf1a      	itte	ne
 8012036:	f1cb 0008 	rsbne	r0, fp, #8
 801203a:	1824      	addne	r4, r4, r0
 801203c:	4658      	moveq	r0, fp
 801203e:	1862      	adds	r2, r4, r1
 8012040:	ea02 010c 	and.w	r1, r2, ip
 8012044:	4480      	add	r8, r0
 8012046:	eba8 0801 	sub.w	r8, r8, r1
 801204a:	ea08 080c 	and.w	r8, r8, ip
 801204e:	4641      	mov	r1, r8
 8012050:	4628      	mov	r0, r5
 8012052:	9201      	str	r2, [sp, #4]
 8012054:	f002 f87e 	bl	8014154 <_sbrk_r>
 8012058:	1c43      	adds	r3, r0, #1
 801205a:	9a01      	ldr	r2, [sp, #4]
 801205c:	4b28      	ldr	r3, [pc, #160]	@ (8012100 <_malloc_r+0x470>)
 801205e:	d107      	bne.n	8012070 <_malloc_r+0x3e0>
 8012060:	f1bb 0f00 	cmp.w	fp, #0
 8012064:	d023      	beq.n	80120ae <_malloc_r+0x41e>
 8012066:	f1ab 0008 	sub.w	r0, fp, #8
 801206a:	4410      	add	r0, r2
 801206c:	f04f 0800 	mov.w	r8, #0
 8012070:	681a      	ldr	r2, [r3, #0]
 8012072:	60b4      	str	r4, [r6, #8]
 8012074:	1b00      	subs	r0, r0, r4
 8012076:	4440      	add	r0, r8
 8012078:	4442      	add	r2, r8
 801207a:	f040 0001 	orr.w	r0, r0, #1
 801207e:	45b2      	cmp	sl, r6
 8012080:	601a      	str	r2, [r3, #0]
 8012082:	6060      	str	r0, [r4, #4]
 8012084:	f43f af29 	beq.w	8011eda <_malloc_r+0x24a>
 8012088:	f1b9 0f0f 	cmp.w	r9, #15
 801208c:	d812      	bhi.n	80120b4 <_malloc_r+0x424>
 801208e:	2301      	movs	r3, #1
 8012090:	6063      	str	r3, [r4, #4]
 8012092:	68b3      	ldr	r3, [r6, #8]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	f023 0303 	bic.w	r3, r3, #3
 801209a:	42bb      	cmp	r3, r7
 801209c:	eba3 0207 	sub.w	r2, r3, r7
 80120a0:	d301      	bcc.n	80120a6 <_malloc_r+0x416>
 80120a2:	2a0f      	cmp	r2, #15
 80120a4:	dc22      	bgt.n	80120ec <_malloc_r+0x45c>
 80120a6:	4628      	mov	r0, r5
 80120a8:	f001 fa2c 	bl	8013504 <__malloc_unlock>
 80120ac:	e5fc      	b.n	8011ca8 <_malloc_r+0x18>
 80120ae:	4610      	mov	r0, r2
 80120b0:	46d8      	mov	r8, fp
 80120b2:	e7dd      	b.n	8012070 <_malloc_r+0x3e0>
 80120b4:	f8da 2004 	ldr.w	r2, [sl, #4]
 80120b8:	f1a9 090c 	sub.w	r9, r9, #12
 80120bc:	f029 0907 	bic.w	r9, r9, #7
 80120c0:	f002 0201 	and.w	r2, r2, #1
 80120c4:	ea42 0209 	orr.w	r2, r2, r9
 80120c8:	f8ca 2004 	str.w	r2, [sl, #4]
 80120cc:	2105      	movs	r1, #5
 80120ce:	eb0a 0209 	add.w	r2, sl, r9
 80120d2:	f1b9 0f0f 	cmp.w	r9, #15
 80120d6:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80120da:	f67f aefe 	bls.w	8011eda <_malloc_r+0x24a>
 80120de:	f10a 0108 	add.w	r1, sl, #8
 80120e2:	4628      	mov	r0, r5
 80120e4:	f7ff fd14 	bl	8011b10 <_free_r>
 80120e8:	4b05      	ldr	r3, [pc, #20]	@ (8012100 <_malloc_r+0x470>)
 80120ea:	e6f6      	b.n	8011eda <_malloc_r+0x24a>
 80120ec:	68b4      	ldr	r4, [r6, #8]
 80120ee:	f047 0301 	orr.w	r3, r7, #1
 80120f2:	4427      	add	r7, r4
 80120f4:	f042 0201 	orr.w	r2, r2, #1
 80120f8:	6063      	str	r3, [r4, #4]
 80120fa:	60b7      	str	r7, [r6, #8]
 80120fc:	607a      	str	r2, [r7, #4]
 80120fe:	e5f8      	b.n	8011cf2 <_malloc_r+0x62>
 8012100:	24024d64 	.word	0x24024d64

08012104 <__ascii_mbtowc>:
 8012104:	b082      	sub	sp, #8
 8012106:	b901      	cbnz	r1, 801210a <__ascii_mbtowc+0x6>
 8012108:	a901      	add	r1, sp, #4
 801210a:	b142      	cbz	r2, 801211e <__ascii_mbtowc+0x1a>
 801210c:	b14b      	cbz	r3, 8012122 <__ascii_mbtowc+0x1e>
 801210e:	7813      	ldrb	r3, [r2, #0]
 8012110:	600b      	str	r3, [r1, #0]
 8012112:	7812      	ldrb	r2, [r2, #0]
 8012114:	1e10      	subs	r0, r2, #0
 8012116:	bf18      	it	ne
 8012118:	2001      	movne	r0, #1
 801211a:	b002      	add	sp, #8
 801211c:	4770      	bx	lr
 801211e:	4610      	mov	r0, r2
 8012120:	e7fb      	b.n	801211a <__ascii_mbtowc+0x16>
 8012122:	f06f 0001 	mvn.w	r0, #1
 8012126:	e7f8      	b.n	801211a <__ascii_mbtowc+0x16>

08012128 <_svfprintf_r>:
 8012128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801212c:	ed2d 8b04 	vpush	{d8-d9}
 8012130:	b0cb      	sub	sp, #300	@ 0x12c
 8012132:	468a      	mov	sl, r1
 8012134:	4691      	mov	r9, r2
 8012136:	461e      	mov	r6, r3
 8012138:	9002      	str	r0, [sp, #8]
 801213a:	f7fe fe2f 	bl	8010d9c <_localeconv_r>
 801213e:	6803      	ldr	r3, [r0, #0]
 8012140:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012142:	4618      	mov	r0, r3
 8012144:	f7ee f91c 	bl	8000380 <strlen>
 8012148:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801214c:	9009      	str	r0, [sp, #36]	@ 0x24
 801214e:	061c      	lsls	r4, r3, #24
 8012150:	d515      	bpl.n	801217e <_svfprintf_r+0x56>
 8012152:	f8da 3010 	ldr.w	r3, [sl, #16]
 8012156:	b993      	cbnz	r3, 801217e <_svfprintf_r+0x56>
 8012158:	9802      	ldr	r0, [sp, #8]
 801215a:	2140      	movs	r1, #64	@ 0x40
 801215c:	f7ff fd98 	bl	8011c90 <_malloc_r>
 8012160:	f8ca 0000 	str.w	r0, [sl]
 8012164:	f8ca 0010 	str.w	r0, [sl, #16]
 8012168:	b930      	cbnz	r0, 8012178 <_svfprintf_r+0x50>
 801216a:	9a02      	ldr	r2, [sp, #8]
 801216c:	230c      	movs	r3, #12
 801216e:	6013      	str	r3, [r2, #0]
 8012170:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012174:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012176:	e1e1      	b.n	801253c <_svfprintf_r+0x414>
 8012178:	2340      	movs	r3, #64	@ 0x40
 801217a:	f8ca 3014 	str.w	r3, [sl, #20]
 801217e:	2300      	movs	r3, #0
 8012180:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
 8012184:	ed9f 8b96 	vldr	d8, [pc, #600]	@ 80123e0 <_svfprintf_r+0x2b8>
 8012188:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 801218c:	ac21      	add	r4, sp, #132	@ 0x84
 801218e:	941e      	str	r4, [sp, #120]	@ 0x78
 8012190:	9303      	str	r3, [sp, #12]
 8012192:	9307      	str	r3, [sp, #28]
 8012194:	930e      	str	r3, [sp, #56]	@ 0x38
 8012196:	9310      	str	r3, [sp, #64]	@ 0x40
 8012198:	930b      	str	r3, [sp, #44]	@ 0x2c
 801219a:	464b      	mov	r3, r9
 801219c:	461d      	mov	r5, r3
 801219e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121a2:	b10a      	cbz	r2, 80121a8 <_svfprintf_r+0x80>
 80121a4:	2a25      	cmp	r2, #37	@ 0x25
 80121a6:	d1f9      	bne.n	801219c <_svfprintf_r+0x74>
 80121a8:	ebb5 0709 	subs.w	r7, r5, r9
 80121ac:	d00d      	beq.n	80121ca <_svfprintf_r+0xa2>
 80121ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80121b0:	443b      	add	r3, r7
 80121b2:	9320      	str	r3, [sp, #128]	@ 0x80
 80121b4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80121b6:	3301      	adds	r3, #1
 80121b8:	2b07      	cmp	r3, #7
 80121ba:	e9c4 9700 	strd	r9, r7, [r4]
 80121be:	931f      	str	r3, [sp, #124]	@ 0x7c
 80121c0:	dc75      	bgt.n	80122ae <_svfprintf_r+0x186>
 80121c2:	3408      	adds	r4, #8
 80121c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80121c6:	443b      	add	r3, r7
 80121c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121ca:	782b      	ldrb	r3, [r5, #0]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	f001 80ee 	beq.w	80133ae <_svfprintf_r+0x1286>
 80121d2:	2200      	movs	r2, #0
 80121d4:	1c6b      	adds	r3, r5, #1
 80121d6:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 80121da:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80121de:	920a      	str	r2, [sp, #40]	@ 0x28
 80121e0:	4615      	mov	r5, r2
 80121e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121e6:	9204      	str	r2, [sp, #16]
 80121e8:	9308      	str	r3, [sp, #32]
 80121ea:	9b04      	ldr	r3, [sp, #16]
 80121ec:	3b20      	subs	r3, #32
 80121ee:	2b5a      	cmp	r3, #90	@ 0x5a
 80121f0:	f200 8564 	bhi.w	8012cbc <_svfprintf_r+0xb94>
 80121f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80121f8:	0562009c 	.word	0x0562009c
 80121fc:	00a40562 	.word	0x00a40562
 8012200:	05620562 	.word	0x05620562
 8012204:	00840562 	.word	0x00840562
 8012208:	05620562 	.word	0x05620562
 801220c:	00b100a7 	.word	0x00b100a7
 8012210:	00ae0562 	.word	0x00ae0562
 8012214:	056200b3 	.word	0x056200b3
 8012218:	00d000cd 	.word	0x00d000cd
 801221c:	00d000d0 	.word	0x00d000d0
 8012220:	00d000d0 	.word	0x00d000d0
 8012224:	00d000d0 	.word	0x00d000d0
 8012228:	00d000d0 	.word	0x00d000d0
 801222c:	05620562 	.word	0x05620562
 8012230:	05620562 	.word	0x05620562
 8012234:	05620562 	.word	0x05620562
 8012238:	01460562 	.word	0x01460562
 801223c:	01070562 	.word	0x01070562
 8012240:	0146011a 	.word	0x0146011a
 8012244:	01460146 	.word	0x01460146
 8012248:	05620562 	.word	0x05620562
 801224c:	05620562 	.word	0x05620562
 8012250:	056200e1 	.word	0x056200e1
 8012254:	045c0562 	.word	0x045c0562
 8012258:	05620562 	.word	0x05620562
 801225c:	04a60562 	.word	0x04a60562
 8012260:	04c70562 	.word	0x04c70562
 8012264:	05620562 	.word	0x05620562
 8012268:	056204e9 	.word	0x056204e9
 801226c:	05620562 	.word	0x05620562
 8012270:	05620562 	.word	0x05620562
 8012274:	05620562 	.word	0x05620562
 8012278:	01460562 	.word	0x01460562
 801227c:	01070562 	.word	0x01070562
 8012280:	0146011c 	.word	0x0146011c
 8012284:	01460146 	.word	0x01460146
 8012288:	011c00e4 	.word	0x011c00e4
 801228c:	05620101 	.word	0x05620101
 8012290:	056200fa 	.word	0x056200fa
 8012294:	045e043d 	.word	0x045e043d
 8012298:	01010495 	.word	0x01010495
 801229c:	04a60562 	.word	0x04a60562
 80122a0:	04c9009a 	.word	0x04c9009a
 80122a4:	05620562 	.word	0x05620562
 80122a8:	05620065 	.word	0x05620065
 80122ac:	009a      	.short	0x009a
 80122ae:	9802      	ldr	r0, [sp, #8]
 80122b0:	aa1e      	add	r2, sp, #120	@ 0x78
 80122b2:	4651      	mov	r1, sl
 80122b4:	f002 f836 	bl	8014324 <__ssprint_r>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	f040 813a 	bne.w	8012532 <_svfprintf_r+0x40a>
 80122be:	ac21      	add	r4, sp, #132	@ 0x84
 80122c0:	e780      	b.n	80121c4 <_svfprintf_r+0x9c>
 80122c2:	4b49      	ldr	r3, [pc, #292]	@ (80123e8 <_svfprintf_r+0x2c0>)
 80122c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80122c6:	f015 0320 	ands.w	r3, r5, #32
 80122ca:	f000 8481 	beq.w	8012bd0 <_svfprintf_r+0xaa8>
 80122ce:	3607      	adds	r6, #7
 80122d0:	f026 0307 	bic.w	r3, r6, #7
 80122d4:	461a      	mov	r2, r3
 80122d6:	685f      	ldr	r7, [r3, #4]
 80122d8:	f852 6b08 	ldr.w	r6, [r2], #8
 80122dc:	9205      	str	r2, [sp, #20]
 80122de:	07eb      	lsls	r3, r5, #31
 80122e0:	d50a      	bpl.n	80122f8 <_svfprintf_r+0x1d0>
 80122e2:	ea56 0307 	orrs.w	r3, r6, r7
 80122e6:	d007      	beq.n	80122f8 <_svfprintf_r+0x1d0>
 80122e8:	2330      	movs	r3, #48	@ 0x30
 80122ea:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 80122ee:	9b04      	ldr	r3, [sp, #16]
 80122f0:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 80122f4:	f045 0502 	orr.w	r5, r5, #2
 80122f8:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80122fc:	2302      	movs	r3, #2
 80122fe:	e3e7      	b.n	8012ad0 <_svfprintf_r+0x9a8>
 8012300:	9802      	ldr	r0, [sp, #8]
 8012302:	f7fe fd4b 	bl	8010d9c <_localeconv_r>
 8012306:	6843      	ldr	r3, [r0, #4]
 8012308:	9310      	str	r3, [sp, #64]	@ 0x40
 801230a:	4618      	mov	r0, r3
 801230c:	f7ee f838 	bl	8000380 <strlen>
 8012310:	900e      	str	r0, [sp, #56]	@ 0x38
 8012312:	9802      	ldr	r0, [sp, #8]
 8012314:	f7fe fd42 	bl	8010d9c <_localeconv_r>
 8012318:	6883      	ldr	r3, [r0, #8]
 801231a:	9307      	str	r3, [sp, #28]
 801231c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801231e:	b12b      	cbz	r3, 801232c <_svfprintf_r+0x204>
 8012320:	9b07      	ldr	r3, [sp, #28]
 8012322:	b11b      	cbz	r3, 801232c <_svfprintf_r+0x204>
 8012324:	781b      	ldrb	r3, [r3, #0]
 8012326:	b10b      	cbz	r3, 801232c <_svfprintf_r+0x204>
 8012328:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801232c:	9b08      	ldr	r3, [sp, #32]
 801232e:	e758      	b.n	80121e2 <_svfprintf_r+0xba>
 8012330:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 8012334:	2b00      	cmp	r3, #0
 8012336:	d1f9      	bne.n	801232c <_svfprintf_r+0x204>
 8012338:	2320      	movs	r3, #32
 801233a:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 801233e:	e7f5      	b.n	801232c <_svfprintf_r+0x204>
 8012340:	f045 0501 	orr.w	r5, r5, #1
 8012344:	e7f2      	b.n	801232c <_svfprintf_r+0x204>
 8012346:	f856 3b04 	ldr.w	r3, [r6], #4
 801234a:	930a      	str	r3, [sp, #40]	@ 0x28
 801234c:	2b00      	cmp	r3, #0
 801234e:	daed      	bge.n	801232c <_svfprintf_r+0x204>
 8012350:	425b      	negs	r3, r3
 8012352:	930a      	str	r3, [sp, #40]	@ 0x28
 8012354:	f045 0504 	orr.w	r5, r5, #4
 8012358:	e7e8      	b.n	801232c <_svfprintf_r+0x204>
 801235a:	232b      	movs	r3, #43	@ 0x2b
 801235c:	e7ed      	b.n	801233a <_svfprintf_r+0x212>
 801235e:	9b08      	ldr	r3, [sp, #32]
 8012360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012364:	9204      	str	r2, [sp, #16]
 8012366:	2a2a      	cmp	r2, #42	@ 0x2a
 8012368:	d10f      	bne.n	801238a <_svfprintf_r+0x262>
 801236a:	f856 2b04 	ldr.w	r2, [r6], #4
 801236e:	9308      	str	r3, [sp, #32]
 8012370:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8012374:	e7da      	b.n	801232c <_svfprintf_r+0x204>
 8012376:	fb01 2808 	mla	r8, r1, r8, r2
 801237a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801237e:	9204      	str	r2, [sp, #16]
 8012380:	9a04      	ldr	r2, [sp, #16]
 8012382:	3a30      	subs	r2, #48	@ 0x30
 8012384:	2a09      	cmp	r2, #9
 8012386:	d9f6      	bls.n	8012376 <_svfprintf_r+0x24e>
 8012388:	e72e      	b.n	80121e8 <_svfprintf_r+0xc0>
 801238a:	f04f 0800 	mov.w	r8, #0
 801238e:	210a      	movs	r1, #10
 8012390:	e7f6      	b.n	8012380 <_svfprintf_r+0x258>
 8012392:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8012396:	e7c9      	b.n	801232c <_svfprintf_r+0x204>
 8012398:	2200      	movs	r2, #0
 801239a:	9b08      	ldr	r3, [sp, #32]
 801239c:	920a      	str	r2, [sp, #40]	@ 0x28
 801239e:	210a      	movs	r1, #10
 80123a0:	9a04      	ldr	r2, [sp, #16]
 80123a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80123a4:	3a30      	subs	r2, #48	@ 0x30
 80123a6:	fb01 2200 	mla	r2, r1, r0, r2
 80123aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80123ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123b0:	9204      	str	r2, [sp, #16]
 80123b2:	3a30      	subs	r2, #48	@ 0x30
 80123b4:	2a09      	cmp	r2, #9
 80123b6:	d9f3      	bls.n	80123a0 <_svfprintf_r+0x278>
 80123b8:	e716      	b.n	80121e8 <_svfprintf_r+0xc0>
 80123ba:	f045 0508 	orr.w	r5, r5, #8
 80123be:	e7b5      	b.n	801232c <_svfprintf_r+0x204>
 80123c0:	9b08      	ldr	r3, [sp, #32]
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	2b68      	cmp	r3, #104	@ 0x68
 80123c6:	bf01      	itttt	eq
 80123c8:	9b08      	ldreq	r3, [sp, #32]
 80123ca:	3301      	addeq	r3, #1
 80123cc:	9308      	streq	r3, [sp, #32]
 80123ce:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 80123d2:	bf18      	it	ne
 80123d4:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 80123d8:	e7a8      	b.n	801232c <_svfprintf_r+0x204>
 80123da:	bf00      	nop
 80123dc:	f3af 8000 	nop.w
	...
 80123e8:	08015ca5 	.word	0x08015ca5
 80123ec:	9b08      	ldr	r3, [sp, #32]
 80123ee:	781b      	ldrb	r3, [r3, #0]
 80123f0:	2b6c      	cmp	r3, #108	@ 0x6c
 80123f2:	d105      	bne.n	8012400 <_svfprintf_r+0x2d8>
 80123f4:	9b08      	ldr	r3, [sp, #32]
 80123f6:	3301      	adds	r3, #1
 80123f8:	9308      	str	r3, [sp, #32]
 80123fa:	f045 0520 	orr.w	r5, r5, #32
 80123fe:	e795      	b.n	801232c <_svfprintf_r+0x204>
 8012400:	f045 0510 	orr.w	r5, r5, #16
 8012404:	e792      	b.n	801232c <_svfprintf_r+0x204>
 8012406:	4632      	mov	r2, r6
 8012408:	f852 3b04 	ldr.w	r3, [r2], #4
 801240c:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8012410:	2300      	movs	r3, #0
 8012412:	9205      	str	r2, [sp, #20]
 8012414:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8012418:	469b      	mov	fp, r3
 801241a:	f04f 0801 	mov.w	r8, #1
 801241e:	930c      	str	r3, [sp, #48]	@ 0x30
 8012420:	461f      	mov	r7, r3
 8012422:	9306      	str	r3, [sp, #24]
 8012424:	461e      	mov	r6, r3
 8012426:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 801242a:	e1a1      	b.n	8012770 <_svfprintf_r+0x648>
 801242c:	f045 0510 	orr.w	r5, r5, #16
 8012430:	06a8      	lsls	r0, r5, #26
 8012432:	d512      	bpl.n	801245a <_svfprintf_r+0x332>
 8012434:	3607      	adds	r6, #7
 8012436:	f026 0307 	bic.w	r3, r6, #7
 801243a:	461a      	mov	r2, r3
 801243c:	685f      	ldr	r7, [r3, #4]
 801243e:	f852 6b08 	ldr.w	r6, [r2], #8
 8012442:	9205      	str	r2, [sp, #20]
 8012444:	2f00      	cmp	r7, #0
 8012446:	da06      	bge.n	8012456 <_svfprintf_r+0x32e>
 8012448:	4276      	negs	r6, r6
 801244a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801244e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8012452:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8012456:	2301      	movs	r3, #1
 8012458:	e33d      	b.n	8012ad6 <_svfprintf_r+0x9ae>
 801245a:	4633      	mov	r3, r6
 801245c:	06e9      	lsls	r1, r5, #27
 801245e:	f853 7b04 	ldr.w	r7, [r3], #4
 8012462:	9305      	str	r3, [sp, #20]
 8012464:	d502      	bpl.n	801246c <_svfprintf_r+0x344>
 8012466:	463e      	mov	r6, r7
 8012468:	17ff      	asrs	r7, r7, #31
 801246a:	e7eb      	b.n	8012444 <_svfprintf_r+0x31c>
 801246c:	066a      	lsls	r2, r5, #25
 801246e:	d503      	bpl.n	8012478 <_svfprintf_r+0x350>
 8012470:	b23e      	sxth	r6, r7
 8012472:	f347 37c0 	sbfx	r7, r7, #15, #1
 8012476:	e7e5      	b.n	8012444 <_svfprintf_r+0x31c>
 8012478:	05ab      	lsls	r3, r5, #22
 801247a:	d5f4      	bpl.n	8012466 <_svfprintf_r+0x33e>
 801247c:	b27e      	sxtb	r6, r7
 801247e:	f347 17c0 	sbfx	r7, r7, #7, #1
 8012482:	e7df      	b.n	8012444 <_svfprintf_r+0x31c>
 8012484:	3607      	adds	r6, #7
 8012486:	f026 0307 	bic.w	r3, r6, #7
 801248a:	ecb3 8b02 	vldmia	r3!, {d8}
 801248e:	ed9f 7b70 	vldr	d7, [pc, #448]	@ 8012650 <_svfprintf_r+0x528>
 8012492:	eeb0 6bc8 	vabs.f64	d6, d8
 8012496:	eeb4 6b47 	vcmp.f64	d6, d7
 801249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801249e:	9305      	str	r3, [sp, #20]
 80124a0:	dd18      	ble.n	80124d4 <_svfprintf_r+0x3ac>
 80124a2:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80124a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124aa:	d502      	bpl.n	80124b2 <_svfprintf_r+0x38a>
 80124ac:	232d      	movs	r3, #45	@ 0x2d
 80124ae:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80124b2:	4a69      	ldr	r2, [pc, #420]	@ (8012658 <_svfprintf_r+0x530>)
 80124b4:	4b69      	ldr	r3, [pc, #420]	@ (801265c <_svfprintf_r+0x534>)
 80124b6:	9904      	ldr	r1, [sp, #16]
 80124b8:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80124bc:	2947      	cmp	r1, #71	@ 0x47
 80124be:	bfd4      	ite	le
 80124c0:	4691      	movle	r9, r2
 80124c2:	4699      	movgt	r9, r3
 80124c4:	f04f 0b00 	mov.w	fp, #0
 80124c8:	f04f 0803 	mov.w	r8, #3
 80124cc:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80124d0:	f000 bfa4 	b.w	801341c <_svfprintf_r+0x12f4>
 80124d4:	eeb4 8b48 	vcmp.f64	d8, d8
 80124d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124dc:	d709      	bvc.n	80124f2 <_svfprintf_r+0x3ca>
 80124de:	ee18 3a90 	vmov	r3, s17
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	bfbc      	itt	lt
 80124e6:	232d      	movlt	r3, #45	@ 0x2d
 80124e8:	f88d 305b 	strblt.w	r3, [sp, #91]	@ 0x5b
 80124ec:	4a5c      	ldr	r2, [pc, #368]	@ (8012660 <_svfprintf_r+0x538>)
 80124ee:	4b5d      	ldr	r3, [pc, #372]	@ (8012664 <_svfprintf_r+0x53c>)
 80124f0:	e7e1      	b.n	80124b6 <_svfprintf_r+0x38e>
 80124f2:	9b04      	ldr	r3, [sp, #16]
 80124f4:	2b61      	cmp	r3, #97	@ 0x61
 80124f6:	d027      	beq.n	8012548 <_svfprintf_r+0x420>
 80124f8:	2b41      	cmp	r3, #65	@ 0x41
 80124fa:	d127      	bne.n	801254c <_svfprintf_r+0x424>
 80124fc:	2358      	movs	r3, #88	@ 0x58
 80124fe:	2230      	movs	r2, #48	@ 0x30
 8012500:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8012504:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 8012508:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 801250c:	f045 0502 	orr.w	r5, r5, #2
 8012510:	f340 8089 	ble.w	8012626 <_svfprintf_r+0x4fe>
 8012514:	9802      	ldr	r0, [sp, #8]
 8012516:	f108 0101 	add.w	r1, r8, #1
 801251a:	f7ff fbb9 	bl	8011c90 <_malloc_r>
 801251e:	4681      	mov	r9, r0
 8012520:	2800      	cmp	r0, #0
 8012522:	f040 8085 	bne.w	8012630 <_svfprintf_r+0x508>
 8012526:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801252a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801252e:	f8aa 300c 	strh.w	r3, [sl, #12]
 8012532:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8012536:	065b      	lsls	r3, r3, #25
 8012538:	f53f ae1a 	bmi.w	8012170 <_svfprintf_r+0x48>
 801253c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801253e:	b04b      	add	sp, #300	@ 0x12c
 8012540:	ecbd 8b04 	vpop	{d8-d9}
 8012544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012548:	2378      	movs	r3, #120	@ 0x78
 801254a:	e7d8      	b.n	80124fe <_svfprintf_r+0x3d6>
 801254c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8012550:	d070      	beq.n	8012634 <_svfprintf_r+0x50c>
 8012552:	9b04      	ldr	r3, [sp, #16]
 8012554:	f023 0320 	bic.w	r3, r3, #32
 8012558:	2b47      	cmp	r3, #71	@ 0x47
 801255a:	d170      	bne.n	801263e <_svfprintf_r+0x516>
 801255c:	f1b8 0f00 	cmp.w	r8, #0
 8012560:	d16d      	bne.n	801263e <_svfprintf_r+0x516>
 8012562:	46c3      	mov	fp, r8
 8012564:	f04f 0801 	mov.w	r8, #1
 8012568:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801256c:	930c      	str	r3, [sp, #48]	@ 0x30
 801256e:	ee18 3a90 	vmov	r3, s17
 8012572:	2b00      	cmp	r3, #0
 8012574:	da66      	bge.n	8012644 <_svfprintf_r+0x51c>
 8012576:	eeb1 9b48 	vneg.f64	d9, d8
 801257a:	232d      	movs	r3, #45	@ 0x2d
 801257c:	930d      	str	r3, [sp, #52]	@ 0x34
 801257e:	9b04      	ldr	r3, [sp, #16]
 8012580:	f023 0720 	bic.w	r7, r3, #32
 8012584:	2f41      	cmp	r7, #65	@ 0x41
 8012586:	f040 81c6 	bne.w	8012916 <_svfprintf_r+0x7ee>
 801258a:	eeb0 0b49 	vmov.f64	d0, d9
 801258e:	a818      	add	r0, sp, #96	@ 0x60
 8012590:	f7fe fc5a 	bl	8010e48 <frexp>
 8012594:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
 8012598:	ee20 0b07 	vmul.f64	d0, d0, d7
 801259c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80125a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a4:	bf08      	it	eq
 80125a6:	2301      	moveq	r3, #1
 80125a8:	9a04      	ldr	r2, [sp, #16]
 80125aa:	bf08      	it	eq
 80125ac:	9318      	streq	r3, [sp, #96]	@ 0x60
 80125ae:	492e      	ldr	r1, [pc, #184]	@ (8012668 <_svfprintf_r+0x540>)
 80125b0:	4b2e      	ldr	r3, [pc, #184]	@ (801266c <_svfprintf_r+0x544>)
 80125b2:	eeb3 7b00 	vmov.f64	d7, #48	@ 0x41800000  16.0
 80125b6:	2a61      	cmp	r2, #97	@ 0x61
 80125b8:	bf18      	it	ne
 80125ba:	4619      	movne	r1, r3
 80125bc:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80125c0:	464b      	mov	r3, r9
 80125c2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80125c6:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 80125ca:	ee16 0a90 	vmov	r0, s13
 80125ce:	5c0e      	ldrb	r6, [r1, r0]
 80125d0:	f803 6b01 	strb.w	r6, [r3], #1
 80125d4:	1c56      	adds	r6, r2, #1
 80125d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80125da:	ee30 0b46 	vsub.f64	d0, d0, d6
 80125de:	d006      	beq.n	80125ee <_svfprintf_r+0x4c6>
 80125e0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80125e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e8:	f102 36ff 	add.w	r6, r2, #4294967295	@ 0xffffffff
 80125ec:	d12e      	bne.n	801264c <_svfprintf_r+0x524>
 80125ee:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80125f2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80125f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125fa:	dc39      	bgt.n	8012670 <_svfprintf_r+0x548>
 80125fc:	eeb4 0b47 	vcmp.f64	d0, d7
 8012600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012604:	d101      	bne.n	801260a <_svfprintf_r+0x4e2>
 8012606:	07c6      	lsls	r6, r0, #31
 8012608:	d432      	bmi.n	8012670 <_svfprintf_r+0x548>
 801260a:	4619      	mov	r1, r3
 801260c:	189e      	adds	r6, r3, r2
 801260e:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8012612:	1a70      	subs	r0, r6, r1
 8012614:	2800      	cmp	r0, #0
 8012616:	f280 817b 	bge.w	8012910 <_svfprintf_r+0x7e8>
 801261a:	1c51      	adds	r1, r2, #1
 801261c:	3201      	adds	r2, #1
 801261e:	bfb8      	it	lt
 8012620:	2100      	movlt	r1, #0
 8012622:	440b      	add	r3, r1
 8012624:	e037      	b.n	8012696 <_svfprintf_r+0x56e>
 8012626:	f04f 0b00 	mov.w	fp, #0
 801262a:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 801262e:	e79b      	b.n	8012568 <_svfprintf_r+0x440>
 8012630:	4683      	mov	fp, r0
 8012632:	e799      	b.n	8012568 <_svfprintf_r+0x440>
 8012634:	f04f 0b00 	mov.w	fp, #0
 8012638:	f04f 0806 	mov.w	r8, #6
 801263c:	e794      	b.n	8012568 <_svfprintf_r+0x440>
 801263e:	f04f 0b00 	mov.w	fp, #0
 8012642:	e791      	b.n	8012568 <_svfprintf_r+0x440>
 8012644:	2300      	movs	r3, #0
 8012646:	eeb0 9b48 	vmov.f64	d9, d8
 801264a:	e797      	b.n	801257c <_svfprintf_r+0x454>
 801264c:	4632      	mov	r2, r6
 801264e:	e7b8      	b.n	80125c2 <_svfprintf_r+0x49a>
 8012650:	ffffffff 	.word	0xffffffff
 8012654:	7fefffff 	.word	0x7fefffff
 8012658:	08015e59 	.word	0x08015e59
 801265c:	08015e5d 	.word	0x08015e5d
 8012660:	08015e61 	.word	0x08015e61
 8012664:	08015e65 	.word	0x08015e65
 8012668:	08015ca5 	.word	0x08015ca5
 801266c:	08015c94 	.word	0x08015c94
 8012670:	7bce      	ldrb	r6, [r1, #15]
 8012672:	931c      	str	r3, [sp, #112]	@ 0x70
 8012674:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8012678:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801267a:	1e42      	subs	r2, r0, #1
 801267c:	921c      	str	r2, [sp, #112]	@ 0x70
 801267e:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8012682:	42b2      	cmp	r2, r6
 8012684:	f000 8141 	beq.w	801290a <_svfprintf_r+0x7e2>
 8012688:	2a39      	cmp	r2, #57	@ 0x39
 801268a:	bf16      	itet	ne
 801268c:	3201      	addne	r2, #1
 801268e:	7a8a      	ldrbeq	r2, [r1, #10]
 8012690:	b2d2      	uxtbne	r2, r2
 8012692:	f800 2c01 	strb.w	r2, [r0, #-1]
 8012696:	eba3 0309 	sub.w	r3, r3, r9
 801269a:	2f47      	cmp	r7, #71	@ 0x47
 801269c:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 801269e:	9303      	str	r3, [sp, #12]
 80126a0:	f040 8179 	bne.w	8012996 <_svfprintf_r+0x86e>
 80126a4:	1cf1      	adds	r1, r6, #3
 80126a6:	db02      	blt.n	80126ae <_svfprintf_r+0x586>
 80126a8:	4546      	cmp	r6, r8
 80126aa:	f340 8196 	ble.w	80129da <_svfprintf_r+0x8b2>
 80126ae:	9b04      	ldr	r3, [sp, #16]
 80126b0:	3b02      	subs	r3, #2
 80126b2:	9304      	str	r3, [sp, #16]
 80126b4:	9904      	ldr	r1, [sp, #16]
 80126b6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80126ba:	f021 0120 	bic.w	r1, r1, #32
 80126be:	2941      	cmp	r1, #65	@ 0x41
 80126c0:	bf08      	it	eq
 80126c2:	320f      	addeq	r2, #15
 80126c4:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 80126c8:	bf06      	itte	eq
 80126ca:	b2d2      	uxtbeq	r2, r2
 80126cc:	2101      	moveq	r1, #1
 80126ce:	2100      	movne	r1, #0
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	9318      	str	r3, [sp, #96]	@ 0x60
 80126d4:	bfb8      	it	lt
 80126d6:	f1c6 0301 	rsblt	r3, r6, #1
 80126da:	f88d 2068 	strb.w	r2, [sp, #104]	@ 0x68
 80126de:	bfb4      	ite	lt
 80126e0:	222d      	movlt	r2, #45	@ 0x2d
 80126e2:	222b      	movge	r2, #43	@ 0x2b
 80126e4:	2b09      	cmp	r3, #9
 80126e6:	f88d 2069 	strb.w	r2, [sp, #105]	@ 0x69
 80126ea:	f340 8169 	ble.w	80129c0 <_svfprintf_r+0x898>
 80126ee:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 80126f2:	270a      	movs	r7, #10
 80126f4:	4602      	mov	r2, r0
 80126f6:	fbb3 f6f7 	udiv	r6, r3, r7
 80126fa:	fb07 3116 	mls	r1, r7, r6, r3
 80126fe:	3130      	adds	r1, #48	@ 0x30
 8012700:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012704:	4619      	mov	r1, r3
 8012706:	2963      	cmp	r1, #99	@ 0x63
 8012708:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 801270c:	4633      	mov	r3, r6
 801270e:	dcf1      	bgt.n	80126f4 <_svfprintf_r+0x5cc>
 8012710:	3330      	adds	r3, #48	@ 0x30
 8012712:	1e91      	subs	r1, r2, #2
 8012714:	f800 3c01 	strb.w	r3, [r0, #-1]
 8012718:	f10d 0669 	add.w	r6, sp, #105	@ 0x69
 801271c:	460b      	mov	r3, r1
 801271e:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 8012722:	4283      	cmp	r3, r0
 8012724:	f0c0 8147 	bcc.w	80129b6 <_svfprintf_r+0x88e>
 8012728:	f10d 0379 	add.w	r3, sp, #121	@ 0x79
 801272c:	1a9b      	subs	r3, r3, r2
 801272e:	4281      	cmp	r1, r0
 8012730:	bf88      	it	hi
 8012732:	2300      	movhi	r3, #0
 8012734:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 8012738:	441a      	add	r2, r3
 801273a:	ab1a      	add	r3, sp, #104	@ 0x68
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	9a03      	ldr	r2, [sp, #12]
 8012740:	9311      	str	r3, [sp, #68]	@ 0x44
 8012742:	2a01      	cmp	r2, #1
 8012744:	eb03 0802 	add.w	r8, r3, r2
 8012748:	dc01      	bgt.n	801274e <_svfprintf_r+0x626>
 801274a:	07ea      	lsls	r2, r5, #31
 801274c:	d501      	bpl.n	8012752 <_svfprintf_r+0x62a>
 801274e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012750:	4498      	add	r8, r3
 8012752:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8012756:	2700      	movs	r7, #0
 8012758:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801275c:	930c      	str	r3, [sp, #48]	@ 0x30
 801275e:	9706      	str	r7, [sp, #24]
 8012760:	463e      	mov	r6, r7
 8012762:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012764:	2b00      	cmp	r3, #0
 8012766:	f040 8180 	bne.w	8012a6a <_svfprintf_r+0x942>
 801276a:	2300      	movs	r3, #0
 801276c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801276e:	930c      	str	r3, [sp, #48]	@ 0x30
 8012770:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012772:	4543      	cmp	r3, r8
 8012774:	bfb8      	it	lt
 8012776:	4643      	movlt	r3, r8
 8012778:	930d      	str	r3, [sp, #52]	@ 0x34
 801277a:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 801277e:	b113      	cbz	r3, 8012786 <_svfprintf_r+0x65e>
 8012780:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012782:	3301      	adds	r3, #1
 8012784:	930d      	str	r3, [sp, #52]	@ 0x34
 8012786:	f015 0302 	ands.w	r3, r5, #2
 801278a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801278c:	bf1e      	ittt	ne
 801278e:	9b0d      	ldrne	r3, [sp, #52]	@ 0x34
 8012790:	3302      	addne	r3, #2
 8012792:	930d      	strne	r3, [sp, #52]	@ 0x34
 8012794:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8012798:	9314      	str	r3, [sp, #80]	@ 0x50
 801279a:	d120      	bne.n	80127de <_svfprintf_r+0x6b6>
 801279c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801279e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80127a0:	1a9b      	subs	r3, r3, r2
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	dd1b      	ble.n	80127de <_svfprintf_r+0x6b6>
 80127a6:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 80127aa:	49a5      	ldr	r1, [pc, #660]	@ (8012a40 <_svfprintf_r+0x918>)
 80127ac:	6021      	str	r1, [r4, #0]
 80127ae:	2b10      	cmp	r3, #16
 80127b0:	f102 0201 	add.w	r2, r2, #1
 80127b4:	f104 0008 	add.w	r0, r4, #8
 80127b8:	f300 828c 	bgt.w	8012cd4 <_svfprintf_r+0xbac>
 80127bc:	eb0c 0103 	add.w	r1, ip, r3
 80127c0:	2a07      	cmp	r2, #7
 80127c2:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 80127c6:	6063      	str	r3, [r4, #4]
 80127c8:	f340 8299 	ble.w	8012cfe <_svfprintf_r+0xbd6>
 80127cc:	9802      	ldr	r0, [sp, #8]
 80127ce:	aa1e      	add	r2, sp, #120	@ 0x78
 80127d0:	4651      	mov	r1, sl
 80127d2:	f001 fda7 	bl	8014324 <__ssprint_r>
 80127d6:	2800      	cmp	r0, #0
 80127d8:	f040 85c7 	bne.w	801336a <_svfprintf_r+0x1242>
 80127dc:	ac21      	add	r4, sp, #132	@ 0x84
 80127de:	f89d 205b 	ldrb.w	r2, [sp, #91]	@ 0x5b
 80127e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80127e4:	b16a      	cbz	r2, 8012802 <_svfprintf_r+0x6da>
 80127e6:	f10d 025b 	add.w	r2, sp, #91	@ 0x5b
 80127ea:	6022      	str	r2, [r4, #0]
 80127ec:	2201      	movs	r2, #1
 80127ee:	4413      	add	r3, r2
 80127f0:	9320      	str	r3, [sp, #128]	@ 0x80
 80127f2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80127f4:	6062      	str	r2, [r4, #4]
 80127f6:	4413      	add	r3, r2
 80127f8:	2b07      	cmp	r3, #7
 80127fa:	931f      	str	r3, [sp, #124]	@ 0x7c
 80127fc:	f300 8281 	bgt.w	8012d02 <_svfprintf_r+0xbda>
 8012800:	3408      	adds	r4, #8
 8012802:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012804:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012806:	b162      	cbz	r2, 8012822 <_svfprintf_r+0x6fa>
 8012808:	aa17      	add	r2, sp, #92	@ 0x5c
 801280a:	6022      	str	r2, [r4, #0]
 801280c:	2202      	movs	r2, #2
 801280e:	4413      	add	r3, r2
 8012810:	9320      	str	r3, [sp, #128]	@ 0x80
 8012812:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8012814:	6062      	str	r2, [r4, #4]
 8012816:	3301      	adds	r3, #1
 8012818:	2b07      	cmp	r3, #7
 801281a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801281c:	f300 827b 	bgt.w	8012d16 <_svfprintf_r+0xbee>
 8012820:	3408      	adds	r4, #8
 8012822:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012824:	2b80      	cmp	r3, #128	@ 0x80
 8012826:	d120      	bne.n	801286a <_svfprintf_r+0x742>
 8012828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801282a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801282c:	1a9b      	subs	r3, r3, r2
 801282e:	2b00      	cmp	r3, #0
 8012830:	dd1b      	ble.n	801286a <_svfprintf_r+0x742>
 8012832:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 8012836:	4983      	ldr	r1, [pc, #524]	@ (8012a44 <_svfprintf_r+0x91c>)
 8012838:	6021      	str	r1, [r4, #0]
 801283a:	2b10      	cmp	r3, #16
 801283c:	f102 0201 	add.w	r2, r2, #1
 8012840:	f104 0008 	add.w	r0, r4, #8
 8012844:	f300 8271 	bgt.w	8012d2a <_svfprintf_r+0xc02>
 8012848:	eb0c 0103 	add.w	r1, ip, r3
 801284c:	2a07      	cmp	r2, #7
 801284e:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8012852:	6063      	str	r3, [r4, #4]
 8012854:	f340 827e 	ble.w	8012d54 <_svfprintf_r+0xc2c>
 8012858:	9802      	ldr	r0, [sp, #8]
 801285a:	aa1e      	add	r2, sp, #120	@ 0x78
 801285c:	4651      	mov	r1, sl
 801285e:	f001 fd61 	bl	8014324 <__ssprint_r>
 8012862:	2800      	cmp	r0, #0
 8012864:	f040 8581 	bne.w	801336a <_svfprintf_r+0x1242>
 8012868:	ac21      	add	r4, sp, #132	@ 0x84
 801286a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801286c:	eba3 0308 	sub.w	r3, r3, r8
 8012870:	2b00      	cmp	r3, #0
 8012872:	930c      	str	r3, [sp, #48]	@ 0x30
 8012874:	dd1c      	ble.n	80128b0 <_svfprintf_r+0x788>
 8012876:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8012878:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 801287c:	2810      	cmp	r0, #16
 801287e:	4871      	ldr	r0, [pc, #452]	@ (8012a44 <_svfprintf_r+0x91c>)
 8012880:	6020      	str	r0, [r4, #0]
 8012882:	f102 0201 	add.w	r2, r2, #1
 8012886:	f104 0108 	add.w	r1, r4, #8
 801288a:	f300 8265 	bgt.w	8012d58 <_svfprintf_r+0xc30>
 801288e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8012890:	6060      	str	r0, [r4, #4]
 8012892:	4403      	add	r3, r0
 8012894:	2a07      	cmp	r2, #7
 8012896:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 801289a:	f340 8272 	ble.w	8012d82 <_svfprintf_r+0xc5a>
 801289e:	9802      	ldr	r0, [sp, #8]
 80128a0:	aa1e      	add	r2, sp, #120	@ 0x78
 80128a2:	4651      	mov	r1, sl
 80128a4:	f001 fd3e 	bl	8014324 <__ssprint_r>
 80128a8:	2800      	cmp	r0, #0
 80128aa:	f040 855e 	bne.w	801336a <_svfprintf_r+0x1242>
 80128ae:	ac21      	add	r4, sp, #132	@ 0x84
 80128b0:	05e9      	lsls	r1, r5, #23
 80128b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80128b4:	f100 826c 	bmi.w	8012d90 <_svfprintf_r+0xc68>
 80128b8:	4443      	add	r3, r8
 80128ba:	9320      	str	r3, [sp, #128]	@ 0x80
 80128bc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80128be:	3301      	adds	r3, #1
 80128c0:	2b07      	cmp	r3, #7
 80128c2:	e9c4 9800 	strd	r9, r8, [r4]
 80128c6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80128c8:	f300 82a4 	bgt.w	8012e14 <_svfprintf_r+0xcec>
 80128cc:	3408      	adds	r4, #8
 80128ce:	076a      	lsls	r2, r5, #29
 80128d0:	f100 852d 	bmi.w	801332e <_svfprintf_r+0x1206>
 80128d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80128d8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80128da:	428a      	cmp	r2, r1
 80128dc:	bfac      	ite	ge
 80128de:	189b      	addge	r3, r3, r2
 80128e0:	185b      	addlt	r3, r3, r1
 80128e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80128e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80128e6:	b13b      	cbz	r3, 80128f8 <_svfprintf_r+0x7d0>
 80128e8:	9802      	ldr	r0, [sp, #8]
 80128ea:	aa1e      	add	r2, sp, #120	@ 0x78
 80128ec:	4651      	mov	r1, sl
 80128ee:	f001 fd19 	bl	8014324 <__ssprint_r>
 80128f2:	2800      	cmp	r0, #0
 80128f4:	f040 8539 	bne.w	801336a <_svfprintf_r+0x1242>
 80128f8:	2300      	movs	r3, #0
 80128fa:	931f      	str	r3, [sp, #124]	@ 0x7c
 80128fc:	f1bb 0f00 	cmp.w	fp, #0
 8012900:	f040 854f 	bne.w	80133a2 <_svfprintf_r+0x127a>
 8012904:	9e05      	ldr	r6, [sp, #20]
 8012906:	ac21      	add	r4, sp, #132	@ 0x84
 8012908:	e0bc      	b.n	8012a84 <_svfprintf_r+0x95c>
 801290a:	f800 cc01 	strb.w	ip, [r0, #-1]
 801290e:	e6b3      	b.n	8012678 <_svfprintf_r+0x550>
 8012910:	f801 cb01 	strb.w	ip, [r1], #1
 8012914:	e67d      	b.n	8012612 <_svfprintf_r+0x4ea>
 8012916:	2f46      	cmp	r7, #70	@ 0x46
 8012918:	d005      	beq.n	8012926 <_svfprintf_r+0x7fe>
 801291a:	2f45      	cmp	r7, #69	@ 0x45
 801291c:	d117      	bne.n	801294e <_svfprintf_r+0x826>
 801291e:	f108 0601 	add.w	r6, r8, #1
 8012922:	2102      	movs	r1, #2
 8012924:	e001      	b.n	801292a <_svfprintf_r+0x802>
 8012926:	4646      	mov	r6, r8
 8012928:	2103      	movs	r1, #3
 801292a:	ab1c      	add	r3, sp, #112	@ 0x70
 801292c:	9301      	str	r3, [sp, #4]
 801292e:	ab19      	add	r3, sp, #100	@ 0x64
 8012930:	9300      	str	r3, [sp, #0]
 8012932:	9802      	ldr	r0, [sp, #8]
 8012934:	eeb0 0b49 	vmov.f64	d0, d9
 8012938:	ab18      	add	r3, sp, #96	@ 0x60
 801293a:	4632      	mov	r2, r6
 801293c:	f7fe fb54 	bl	8010fe8 <_dtoa_r>
 8012940:	2f47      	cmp	r7, #71	@ 0x47
 8012942:	4681      	mov	r9, r0
 8012944:	d115      	bne.n	8012972 <_svfprintf_r+0x84a>
 8012946:	07e8      	lsls	r0, r5, #31
 8012948:	d403      	bmi.n	8012952 <_svfprintf_r+0x82a>
 801294a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801294c:	e6a3      	b.n	8012696 <_svfprintf_r+0x56e>
 801294e:	4646      	mov	r6, r8
 8012950:	e7e7      	b.n	8012922 <_svfprintf_r+0x7fa>
 8012952:	eb09 0306 	add.w	r3, r9, r6
 8012956:	eeb5 9b40 	vcmp.f64	d9, #0.0
 801295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801295e:	bf08      	it	eq
 8012960:	931c      	streq	r3, [sp, #112]	@ 0x70
 8012962:	2130      	movs	r1, #48	@ 0x30
 8012964:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012966:	4293      	cmp	r3, r2
 8012968:	d9ef      	bls.n	801294a <_svfprintf_r+0x822>
 801296a:	1c50      	adds	r0, r2, #1
 801296c:	901c      	str	r0, [sp, #112]	@ 0x70
 801296e:	7011      	strb	r1, [r2, #0]
 8012970:	e7f8      	b.n	8012964 <_svfprintf_r+0x83c>
 8012972:	2f46      	cmp	r7, #70	@ 0x46
 8012974:	eb00 0306 	add.w	r3, r0, r6
 8012978:	d1ed      	bne.n	8012956 <_svfprintf_r+0x82e>
 801297a:	7802      	ldrb	r2, [r0, #0]
 801297c:	2a30      	cmp	r2, #48	@ 0x30
 801297e:	d107      	bne.n	8012990 <_svfprintf_r+0x868>
 8012980:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8012984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012988:	bf1c      	itt	ne
 801298a:	f1c6 0601 	rsbne	r6, r6, #1
 801298e:	9618      	strne	r6, [sp, #96]	@ 0x60
 8012990:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8012992:	4413      	add	r3, r2
 8012994:	e7df      	b.n	8012956 <_svfprintf_r+0x82e>
 8012996:	2f46      	cmp	r7, #70	@ 0x46
 8012998:	f47f ae8c 	bne.w	80126b4 <_svfprintf_r+0x58c>
 801299c:	f005 0301 	and.w	r3, r5, #1
 80129a0:	2e00      	cmp	r6, #0
 80129a2:	ea43 0308 	orr.w	r3, r3, r8
 80129a6:	dd25      	ble.n	80129f4 <_svfprintf_r+0x8cc>
 80129a8:	b37b      	cbz	r3, 8012a0a <_svfprintf_r+0x8e2>
 80129aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129ac:	18f3      	adds	r3, r6, r3
 80129ae:	4498      	add	r8, r3
 80129b0:	2366      	movs	r3, #102	@ 0x66
 80129b2:	9304      	str	r3, [sp, #16]
 80129b4:	e02f      	b.n	8012a16 <_svfprintf_r+0x8ee>
 80129b6:	f813 7b01 	ldrb.w	r7, [r3], #1
 80129ba:	f806 7f01 	strb.w	r7, [r6, #1]!
 80129be:	e6b0      	b.n	8012722 <_svfprintf_r+0x5fa>
 80129c0:	b941      	cbnz	r1, 80129d4 <_svfprintf_r+0x8ac>
 80129c2:	2230      	movs	r2, #48	@ 0x30
 80129c4:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
 80129c8:	f10d 026b 	add.w	r2, sp, #107	@ 0x6b
 80129cc:	3330      	adds	r3, #48	@ 0x30
 80129ce:	f802 3b01 	strb.w	r3, [r2], #1
 80129d2:	e6b2      	b.n	801273a <_svfprintf_r+0x612>
 80129d4:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 80129d8:	e7f8      	b.n	80129cc <_svfprintf_r+0x8a4>
 80129da:	9b03      	ldr	r3, [sp, #12]
 80129dc:	429e      	cmp	r6, r3
 80129de:	da0d      	bge.n	80129fc <_svfprintf_r+0x8d4>
 80129e0:	9b03      	ldr	r3, [sp, #12]
 80129e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129e4:	2e00      	cmp	r6, #0
 80129e6:	eb03 0802 	add.w	r8, r3, r2
 80129ea:	dc0c      	bgt.n	8012a06 <_svfprintf_r+0x8de>
 80129ec:	f1c6 0301 	rsb	r3, r6, #1
 80129f0:	4498      	add	r8, r3
 80129f2:	e008      	b.n	8012a06 <_svfprintf_r+0x8de>
 80129f4:	b15b      	cbz	r3, 8012a0e <_svfprintf_r+0x8e6>
 80129f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129f8:	3301      	adds	r3, #1
 80129fa:	e7d8      	b.n	80129ae <_svfprintf_r+0x886>
 80129fc:	07eb      	lsls	r3, r5, #31
 80129fe:	d51d      	bpl.n	8012a3c <_svfprintf_r+0x914>
 8012a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a02:	eb06 0803 	add.w	r8, r6, r3
 8012a06:	2367      	movs	r3, #103	@ 0x67
 8012a08:	e7d3      	b.n	80129b2 <_svfprintf_r+0x88a>
 8012a0a:	46b0      	mov	r8, r6
 8012a0c:	e7d0      	b.n	80129b0 <_svfprintf_r+0x888>
 8012a0e:	2366      	movs	r3, #102	@ 0x66
 8012a10:	9304      	str	r3, [sp, #16]
 8012a12:	f04f 0801 	mov.w	r8, #1
 8012a16:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8012a1a:	9306      	str	r3, [sp, #24]
 8012a1c:	d023      	beq.n	8012a66 <_svfprintf_r+0x93e>
 8012a1e:	2700      	movs	r7, #0
 8012a20:	2e00      	cmp	r6, #0
 8012a22:	9706      	str	r7, [sp, #24]
 8012a24:	f77f ae9d 	ble.w	8012762 <_svfprintf_r+0x63a>
 8012a28:	9b07      	ldr	r3, [sp, #28]
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	2bff      	cmp	r3, #255	@ 0xff
 8012a2e:	d10b      	bne.n	8012a48 <_svfprintf_r+0x920>
 8012a30:	9b06      	ldr	r3, [sp, #24]
 8012a32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a34:	443b      	add	r3, r7
 8012a36:	fb02 8803 	mla	r8, r2, r3, r8
 8012a3a:	e692      	b.n	8012762 <_svfprintf_r+0x63a>
 8012a3c:	46b0      	mov	r8, r6
 8012a3e:	e7e2      	b.n	8012a06 <_svfprintf_r+0x8de>
 8012a40:	08015e79 	.word	0x08015e79
 8012a44:	08015e69 	.word	0x08015e69
 8012a48:	42b3      	cmp	r3, r6
 8012a4a:	daf1      	bge.n	8012a30 <_svfprintf_r+0x908>
 8012a4c:	1af6      	subs	r6, r6, r3
 8012a4e:	9b07      	ldr	r3, [sp, #28]
 8012a50:	785b      	ldrb	r3, [r3, #1]
 8012a52:	b133      	cbz	r3, 8012a62 <_svfprintf_r+0x93a>
 8012a54:	9b06      	ldr	r3, [sp, #24]
 8012a56:	3301      	adds	r3, #1
 8012a58:	9306      	str	r3, [sp, #24]
 8012a5a:	9b07      	ldr	r3, [sp, #28]
 8012a5c:	3301      	adds	r3, #1
 8012a5e:	9307      	str	r3, [sp, #28]
 8012a60:	e7e2      	b.n	8012a28 <_svfprintf_r+0x900>
 8012a62:	3701      	adds	r7, #1
 8012a64:	e7e0      	b.n	8012a28 <_svfprintf_r+0x900>
 8012a66:	9f06      	ldr	r7, [sp, #24]
 8012a68:	e67b      	b.n	8012762 <_svfprintf_r+0x63a>
 8012a6a:	232d      	movs	r3, #45	@ 0x2d
 8012a6c:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8012a70:	e67b      	b.n	801276a <_svfprintf_r+0x642>
 8012a72:	06af      	lsls	r7, r5, #26
 8012a74:	d50a      	bpl.n	8012a8c <_svfprintf_r+0x964>
 8012a76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012a78:	6833      	ldr	r3, [r6, #0]
 8012a7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012a7c:	17d2      	asrs	r2, r2, #31
 8012a7e:	e9c3 1200 	strd	r1, r2, [r3]
 8012a82:	3604      	adds	r6, #4
 8012a84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012a88:	f7ff bb87 	b.w	801219a <_svfprintf_r+0x72>
 8012a8c:	06e8      	lsls	r0, r5, #27
 8012a8e:	d503      	bpl.n	8012a98 <_svfprintf_r+0x970>
 8012a90:	6833      	ldr	r3, [r6, #0]
 8012a92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012a94:	601a      	str	r2, [r3, #0]
 8012a96:	e7f4      	b.n	8012a82 <_svfprintf_r+0x95a>
 8012a98:	0669      	lsls	r1, r5, #25
 8012a9a:	d503      	bpl.n	8012aa4 <_svfprintf_r+0x97c>
 8012a9c:	6833      	ldr	r3, [r6, #0]
 8012a9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012aa0:	801a      	strh	r2, [r3, #0]
 8012aa2:	e7ee      	b.n	8012a82 <_svfprintf_r+0x95a>
 8012aa4:	05aa      	lsls	r2, r5, #22
 8012aa6:	d5f3      	bpl.n	8012a90 <_svfprintf_r+0x968>
 8012aa8:	6833      	ldr	r3, [r6, #0]
 8012aaa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012aac:	701a      	strb	r2, [r3, #0]
 8012aae:	e7e8      	b.n	8012a82 <_svfprintf_r+0x95a>
 8012ab0:	f045 0510 	orr.w	r5, r5, #16
 8012ab4:	f015 0320 	ands.w	r3, r5, #32
 8012ab8:	d020      	beq.n	8012afc <_svfprintf_r+0x9d4>
 8012aba:	3607      	adds	r6, #7
 8012abc:	f026 0307 	bic.w	r3, r6, #7
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	685f      	ldr	r7, [r3, #4]
 8012ac4:	f852 6b08 	ldr.w	r6, [r2], #8
 8012ac8:	9205      	str	r2, [sp, #20]
 8012aca:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8012ace:	2300      	movs	r3, #0
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 8012ad6:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8012ada:	f000 8473 	beq.w	80133c4 <_svfprintf_r+0x129c>
 8012ade:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8012ae2:	9206      	str	r2, [sp, #24]
 8012ae4:	ea56 0207 	orrs.w	r2, r6, r7
 8012ae8:	f040 8471 	bne.w	80133ce <_svfprintf_r+0x12a6>
 8012aec:	f1b8 0f00 	cmp.w	r8, #0
 8012af0:	f000 80dc 	beq.w	8012cac <_svfprintf_r+0xb84>
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	f040 846d 	bne.w	80133d4 <_svfprintf_r+0x12ac>
 8012afa:	e083      	b.n	8012c04 <_svfprintf_r+0xadc>
 8012afc:	4632      	mov	r2, r6
 8012afe:	f015 0710 	ands.w	r7, r5, #16
 8012b02:	f852 6b04 	ldr.w	r6, [r2], #4
 8012b06:	9205      	str	r2, [sp, #20]
 8012b08:	d001      	beq.n	8012b0e <_svfprintf_r+0x9e6>
 8012b0a:	461f      	mov	r7, r3
 8012b0c:	e7dd      	b.n	8012aca <_svfprintf_r+0x9a2>
 8012b0e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8012b12:	d001      	beq.n	8012b18 <_svfprintf_r+0x9f0>
 8012b14:	b2b6      	uxth	r6, r6
 8012b16:	e7d8      	b.n	8012aca <_svfprintf_r+0x9a2>
 8012b18:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8012b1c:	d0d5      	beq.n	8012aca <_svfprintf_r+0x9a2>
 8012b1e:	b2f6      	uxtb	r6, r6
 8012b20:	e7f3      	b.n	8012b0a <_svfprintf_r+0x9e2>
 8012b22:	4633      	mov	r3, r6
 8012b24:	2278      	movs	r2, #120	@ 0x78
 8012b26:	f853 6b04 	ldr.w	r6, [r3], #4
 8012b2a:	9305      	str	r3, [sp, #20]
 8012b2c:	f647 0330 	movw	r3, #30768	@ 0x7830
 8012b30:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
 8012b34:	4b94      	ldr	r3, [pc, #592]	@ (8012d88 <_svfprintf_r+0xc60>)
 8012b36:	9312      	str	r3, [sp, #72]	@ 0x48
 8012b38:	2700      	movs	r7, #0
 8012b3a:	f045 0502 	orr.w	r5, r5, #2
 8012b3e:	2302      	movs	r3, #2
 8012b40:	9204      	str	r2, [sp, #16]
 8012b42:	e7c5      	b.n	8012ad0 <_svfprintf_r+0x9a8>
 8012b44:	4633      	mov	r3, r6
 8012b46:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8012b4a:	f853 9b04 	ldr.w	r9, [r3], #4
 8012b4e:	9305      	str	r3, [sp, #20]
 8012b50:	f04f 0600 	mov.w	r6, #0
 8012b54:	f88d 605b 	strb.w	r6, [sp, #91]	@ 0x5b
 8012b58:	d00f      	beq.n	8012b7a <_svfprintf_r+0xa52>
 8012b5a:	4642      	mov	r2, r8
 8012b5c:	4631      	mov	r1, r6
 8012b5e:	4648      	mov	r0, r9
 8012b60:	f7ed fbbe 	bl	80002e0 <memchr>
 8012b64:	4683      	mov	fp, r0
 8012b66:	2800      	cmp	r0, #0
 8012b68:	f43f acb0 	beq.w	80124cc <_svfprintf_r+0x3a4>
 8012b6c:	eba0 0809 	sub.w	r8, r0, r9
 8012b70:	46b3      	mov	fp, r6
 8012b72:	960c      	str	r6, [sp, #48]	@ 0x30
 8012b74:	4637      	mov	r7, r6
 8012b76:	9606      	str	r6, [sp, #24]
 8012b78:	e5fa      	b.n	8012770 <_svfprintf_r+0x648>
 8012b7a:	4648      	mov	r0, r9
 8012b7c:	f7ed fc00 	bl	8000380 <strlen>
 8012b80:	46b3      	mov	fp, r6
 8012b82:	4680      	mov	r8, r0
 8012b84:	e4a2      	b.n	80124cc <_svfprintf_r+0x3a4>
 8012b86:	f045 0510 	orr.w	r5, r5, #16
 8012b8a:	f015 0320 	ands.w	r3, r5, #32
 8012b8e:	d009      	beq.n	8012ba4 <_svfprintf_r+0xa7c>
 8012b90:	3607      	adds	r6, #7
 8012b92:	f026 0307 	bic.w	r3, r6, #7
 8012b96:	461a      	mov	r2, r3
 8012b98:	685f      	ldr	r7, [r3, #4]
 8012b9a:	f852 6b08 	ldr.w	r6, [r2], #8
 8012b9e:	9205      	str	r2, [sp, #20]
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	e795      	b.n	8012ad0 <_svfprintf_r+0x9a8>
 8012ba4:	4632      	mov	r2, r6
 8012ba6:	f015 0710 	ands.w	r7, r5, #16
 8012baa:	f852 6b04 	ldr.w	r6, [r2], #4
 8012bae:	9205      	str	r2, [sp, #20]
 8012bb0:	d001      	beq.n	8012bb6 <_svfprintf_r+0xa8e>
 8012bb2:	461f      	mov	r7, r3
 8012bb4:	e7f4      	b.n	8012ba0 <_svfprintf_r+0xa78>
 8012bb6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8012bba:	d001      	beq.n	8012bc0 <_svfprintf_r+0xa98>
 8012bbc:	b2b6      	uxth	r6, r6
 8012bbe:	e7ef      	b.n	8012ba0 <_svfprintf_r+0xa78>
 8012bc0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8012bc4:	d0ec      	beq.n	8012ba0 <_svfprintf_r+0xa78>
 8012bc6:	b2f6      	uxtb	r6, r6
 8012bc8:	e7f3      	b.n	8012bb2 <_svfprintf_r+0xa8a>
 8012bca:	4b70      	ldr	r3, [pc, #448]	@ (8012d8c <_svfprintf_r+0xc64>)
 8012bcc:	f7ff bb7a 	b.w	80122c4 <_svfprintf_r+0x19c>
 8012bd0:	4632      	mov	r2, r6
 8012bd2:	f015 0710 	ands.w	r7, r5, #16
 8012bd6:	f852 6b04 	ldr.w	r6, [r2], #4
 8012bda:	9205      	str	r2, [sp, #20]
 8012bdc:	d002      	beq.n	8012be4 <_svfprintf_r+0xabc>
 8012bde:	461f      	mov	r7, r3
 8012be0:	f7ff bb7d 	b.w	80122de <_svfprintf_r+0x1b6>
 8012be4:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8012be8:	d002      	beq.n	8012bf0 <_svfprintf_r+0xac8>
 8012bea:	b2b6      	uxth	r6, r6
 8012bec:	f7ff bb77 	b.w	80122de <_svfprintf_r+0x1b6>
 8012bf0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8012bf4:	f43f ab73 	beq.w	80122de <_svfprintf_r+0x1b6>
 8012bf8:	b2f6      	uxtb	r6, r6
 8012bfa:	e7f0      	b.n	8012bde <_svfprintf_r+0xab6>
 8012bfc:	2e0a      	cmp	r6, #10
 8012bfe:	f177 0300 	sbcs.w	r3, r7, #0
 8012c02:	d206      	bcs.n	8012c12 <_svfprintf_r+0xaea>
 8012c04:	3630      	adds	r6, #48	@ 0x30
 8012c06:	b2f6      	uxtb	r6, r6
 8012c08:	f88d 6127 	strb.w	r6, [sp, #295]	@ 0x127
 8012c0c:	f20d 1927 	addw	r9, sp, #295	@ 0x127
 8012c10:	e3fc      	b.n	801340c <_svfprintf_r+0x12e4>
 8012c12:	2300      	movs	r3, #0
 8012c14:	9303      	str	r3, [sp, #12]
 8012c16:	9b06      	ldr	r3, [sp, #24]
 8012c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012c1c:	ad4a      	add	r5, sp, #296	@ 0x128
 8012c1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8012c20:	220a      	movs	r2, #10
 8012c22:	2300      	movs	r3, #0
 8012c24:	4630      	mov	r0, r6
 8012c26:	4639      	mov	r1, r7
 8012c28:	f7ed fbb2 	bl	8000390 <__aeabi_uldivmod>
 8012c2c:	3230      	adds	r2, #48	@ 0x30
 8012c2e:	f805 2c01 	strb.w	r2, [r5, #-1]
 8012c32:	9a03      	ldr	r2, [sp, #12]
 8012c34:	3201      	adds	r2, #1
 8012c36:	9203      	str	r2, [sp, #12]
 8012c38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	468b      	mov	fp, r1
 8012c3e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8012c42:	b1e2      	cbz	r2, 8012c7e <_svfprintf_r+0xb56>
 8012c44:	9a07      	ldr	r2, [sp, #28]
 8012c46:	9903      	ldr	r1, [sp, #12]
 8012c48:	7812      	ldrb	r2, [r2, #0]
 8012c4a:	4291      	cmp	r1, r2
 8012c4c:	d117      	bne.n	8012c7e <_svfprintf_r+0xb56>
 8012c4e:	29ff      	cmp	r1, #255	@ 0xff
 8012c50:	d015      	beq.n	8012c7e <_svfprintf_r+0xb56>
 8012c52:	2e0a      	cmp	r6, #10
 8012c54:	f177 0200 	sbcs.w	r2, r7, #0
 8012c58:	d311      	bcc.n	8012c7e <_svfprintf_r+0xb56>
 8012c5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c5c:	9003      	str	r0, [sp, #12]
 8012c5e:	eba9 0903 	sub.w	r9, r9, r3
 8012c62:	461a      	mov	r2, r3
 8012c64:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012c66:	4648      	mov	r0, r9
 8012c68:	f7fe f87e 	bl	8010d68 <strncpy>
 8012c6c:	9b07      	ldr	r3, [sp, #28]
 8012c6e:	785a      	ldrb	r2, [r3, #1]
 8012c70:	9b03      	ldr	r3, [sp, #12]
 8012c72:	b11a      	cbz	r2, 8012c7c <_svfprintf_r+0xb54>
 8012c74:	9a07      	ldr	r2, [sp, #28]
 8012c76:	3201      	adds	r2, #1
 8012c78:	9207      	str	r2, [sp, #28]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	9203      	str	r2, [sp, #12]
 8012c7e:	2e0a      	cmp	r6, #10
 8012c80:	f177 0700 	sbcs.w	r7, r7, #0
 8012c84:	f0c0 83c2 	bcc.w	801340c <_svfprintf_r+0x12e4>
 8012c88:	461e      	mov	r6, r3
 8012c8a:	465f      	mov	r7, fp
 8012c8c:	464d      	mov	r5, r9
 8012c8e:	e7c7      	b.n	8012c20 <_svfprintf_r+0xaf8>
 8012c90:	f006 030f 	and.w	r3, r6, #15
 8012c94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012c96:	0936      	lsrs	r6, r6, #4
 8012c98:	5cd3      	ldrb	r3, [r2, r3]
 8012c9a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8012c9e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8012ca2:	093f      	lsrs	r7, r7, #4
 8012ca4:	ea56 0307 	orrs.w	r3, r6, r7
 8012ca8:	d1f2      	bne.n	8012c90 <_svfprintf_r+0xb68>
 8012caa:	e3af      	b.n	801340c <_svfprintf_r+0x12e4>
 8012cac:	b91b      	cbnz	r3, 8012cb6 <_svfprintf_r+0xb8e>
 8012cae:	07e8      	lsls	r0, r5, #31
 8012cb0:	d501      	bpl.n	8012cb6 <_svfprintf_r+0xb8e>
 8012cb2:	2630      	movs	r6, #48	@ 0x30
 8012cb4:	e7a8      	b.n	8012c08 <_svfprintf_r+0xae0>
 8012cb6:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 8012cba:	e3a7      	b.n	801340c <_svfprintf_r+0x12e4>
 8012cbc:	9b04      	ldr	r3, [sp, #16]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	f000 8375 	beq.w	80133ae <_svfprintf_r+0x1286>
 8012cc4:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8012cc8:	2300      	movs	r3, #0
 8012cca:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8012cce:	9605      	str	r6, [sp, #20]
 8012cd0:	f7ff bba2 	b.w	8012418 <_svfprintf_r+0x2f0>
 8012cd4:	2110      	movs	r1, #16
 8012cd6:	6061      	str	r1, [r4, #4]
 8012cd8:	2a07      	cmp	r2, #7
 8012cda:	4461      	add	r1, ip
 8012cdc:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8012ce0:	dd0a      	ble.n	8012cf8 <_svfprintf_r+0xbd0>
 8012ce2:	9802      	ldr	r0, [sp, #8]
 8012ce4:	9315      	str	r3, [sp, #84]	@ 0x54
 8012ce6:	aa1e      	add	r2, sp, #120	@ 0x78
 8012ce8:	4651      	mov	r1, sl
 8012cea:	f001 fb1b 	bl	8014324 <__ssprint_r>
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	f040 833b 	bne.w	801336a <_svfprintf_r+0x1242>
 8012cf4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012cf6:	a821      	add	r0, sp, #132	@ 0x84
 8012cf8:	3b10      	subs	r3, #16
 8012cfa:	4604      	mov	r4, r0
 8012cfc:	e553      	b.n	80127a6 <_svfprintf_r+0x67e>
 8012cfe:	4604      	mov	r4, r0
 8012d00:	e56d      	b.n	80127de <_svfprintf_r+0x6b6>
 8012d02:	9802      	ldr	r0, [sp, #8]
 8012d04:	aa1e      	add	r2, sp, #120	@ 0x78
 8012d06:	4651      	mov	r1, sl
 8012d08:	f001 fb0c 	bl	8014324 <__ssprint_r>
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	f040 832c 	bne.w	801336a <_svfprintf_r+0x1242>
 8012d12:	ac21      	add	r4, sp, #132	@ 0x84
 8012d14:	e575      	b.n	8012802 <_svfprintf_r+0x6da>
 8012d16:	9802      	ldr	r0, [sp, #8]
 8012d18:	aa1e      	add	r2, sp, #120	@ 0x78
 8012d1a:	4651      	mov	r1, sl
 8012d1c:	f001 fb02 	bl	8014324 <__ssprint_r>
 8012d20:	2800      	cmp	r0, #0
 8012d22:	f040 8322 	bne.w	801336a <_svfprintf_r+0x1242>
 8012d26:	ac21      	add	r4, sp, #132	@ 0x84
 8012d28:	e57b      	b.n	8012822 <_svfprintf_r+0x6fa>
 8012d2a:	2110      	movs	r1, #16
 8012d2c:	6061      	str	r1, [r4, #4]
 8012d2e:	2a07      	cmp	r2, #7
 8012d30:	4461      	add	r1, ip
 8012d32:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8012d36:	dd0a      	ble.n	8012d4e <_svfprintf_r+0xc26>
 8012d38:	9802      	ldr	r0, [sp, #8]
 8012d3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012d3c:	aa1e      	add	r2, sp, #120	@ 0x78
 8012d3e:	4651      	mov	r1, sl
 8012d40:	f001 faf0 	bl	8014324 <__ssprint_r>
 8012d44:	2800      	cmp	r0, #0
 8012d46:	f040 8310 	bne.w	801336a <_svfprintf_r+0x1242>
 8012d4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012d4c:	a821      	add	r0, sp, #132	@ 0x84
 8012d4e:	3b10      	subs	r3, #16
 8012d50:	4604      	mov	r4, r0
 8012d52:	e56e      	b.n	8012832 <_svfprintf_r+0x70a>
 8012d54:	4604      	mov	r4, r0
 8012d56:	e588      	b.n	801286a <_svfprintf_r+0x742>
 8012d58:	2010      	movs	r0, #16
 8012d5a:	4403      	add	r3, r0
 8012d5c:	2a07      	cmp	r2, #7
 8012d5e:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8012d62:	6060      	str	r0, [r4, #4]
 8012d64:	dd08      	ble.n	8012d78 <_svfprintf_r+0xc50>
 8012d66:	9802      	ldr	r0, [sp, #8]
 8012d68:	aa1e      	add	r2, sp, #120	@ 0x78
 8012d6a:	4651      	mov	r1, sl
 8012d6c:	f001 fada 	bl	8014324 <__ssprint_r>
 8012d70:	2800      	cmp	r0, #0
 8012d72:	f040 82fa 	bne.w	801336a <_svfprintf_r+0x1242>
 8012d76:	a921      	add	r1, sp, #132	@ 0x84
 8012d78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012d7a:	3b10      	subs	r3, #16
 8012d7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8012d7e:	460c      	mov	r4, r1
 8012d80:	e579      	b.n	8012876 <_svfprintf_r+0x74e>
 8012d82:	460c      	mov	r4, r1
 8012d84:	e594      	b.n	80128b0 <_svfprintf_r+0x788>
 8012d86:	bf00      	nop
 8012d88:	08015ca5 	.word	0x08015ca5
 8012d8c:	08015c94 	.word	0x08015c94
 8012d90:	9a04      	ldr	r2, [sp, #16]
 8012d92:	2a65      	cmp	r2, #101	@ 0x65
 8012d94:	f340 823e 	ble.w	8013214 <_svfprintf_r+0x10ec>
 8012d98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012da0:	d169      	bne.n	8012e76 <_svfprintf_r+0xd4e>
 8012da2:	4a72      	ldr	r2, [pc, #456]	@ (8012f6c <_svfprintf_r+0xe44>)
 8012da4:	6022      	str	r2, [r4, #0]
 8012da6:	2201      	movs	r2, #1
 8012da8:	4413      	add	r3, r2
 8012daa:	9320      	str	r3, [sp, #128]	@ 0x80
 8012dac:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8012dae:	6062      	str	r2, [r4, #4]
 8012db0:	4413      	add	r3, r2
 8012db2:	2b07      	cmp	r3, #7
 8012db4:	931f      	str	r3, [sp, #124]	@ 0x7c
 8012db6:	dc37      	bgt.n	8012e28 <_svfprintf_r+0xd00>
 8012db8:	3408      	adds	r4, #8
 8012dba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012dbc:	9a03      	ldr	r2, [sp, #12]
 8012dbe:	4293      	cmp	r3, r2
 8012dc0:	db02      	blt.n	8012dc8 <_svfprintf_r+0xca0>
 8012dc2:	07ea      	lsls	r2, r5, #31
 8012dc4:	f57f ad83 	bpl.w	80128ce <_svfprintf_r+0x7a6>
 8012dc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012dca:	6023      	str	r3, [r4, #0]
 8012dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012dd0:	6063      	str	r3, [r4, #4]
 8012dd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012dd4:	4413      	add	r3, r2
 8012dd6:	9320      	str	r3, [sp, #128]	@ 0x80
 8012dd8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8012dda:	3301      	adds	r3, #1
 8012ddc:	2b07      	cmp	r3, #7
 8012dde:	931f      	str	r3, [sp, #124]	@ 0x7c
 8012de0:	dc2c      	bgt.n	8012e3c <_svfprintf_r+0xd14>
 8012de2:	3408      	adds	r4, #8
 8012de4:	9b03      	ldr	r3, [sp, #12]
 8012de6:	1e5e      	subs	r6, r3, #1
 8012de8:	2e00      	cmp	r6, #0
 8012dea:	f77f ad70 	ble.w	80128ce <_svfprintf_r+0x7a6>
 8012dee:	4f60      	ldr	r7, [pc, #384]	@ (8012f70 <_svfprintf_r+0xe48>)
 8012df0:	f04f 0810 	mov.w	r8, #16
 8012df4:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8012df8:	2e10      	cmp	r6, #16
 8012dfa:	f103 0301 	add.w	r3, r3, #1
 8012dfe:	f104 0108 	add.w	r1, r4, #8
 8012e02:	6027      	str	r7, [r4, #0]
 8012e04:	dc24      	bgt.n	8012e50 <_svfprintf_r+0xd28>
 8012e06:	6066      	str	r6, [r4, #4]
 8012e08:	2b07      	cmp	r3, #7
 8012e0a:	4416      	add	r6, r2
 8012e0c:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 8012e10:	f340 828a 	ble.w	8013328 <_svfprintf_r+0x1200>
 8012e14:	9802      	ldr	r0, [sp, #8]
 8012e16:	aa1e      	add	r2, sp, #120	@ 0x78
 8012e18:	4651      	mov	r1, sl
 8012e1a:	f001 fa83 	bl	8014324 <__ssprint_r>
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	f040 82a3 	bne.w	801336a <_svfprintf_r+0x1242>
 8012e24:	ac21      	add	r4, sp, #132	@ 0x84
 8012e26:	e552      	b.n	80128ce <_svfprintf_r+0x7a6>
 8012e28:	9802      	ldr	r0, [sp, #8]
 8012e2a:	aa1e      	add	r2, sp, #120	@ 0x78
 8012e2c:	4651      	mov	r1, sl
 8012e2e:	f001 fa79 	bl	8014324 <__ssprint_r>
 8012e32:	2800      	cmp	r0, #0
 8012e34:	f040 8299 	bne.w	801336a <_svfprintf_r+0x1242>
 8012e38:	ac21      	add	r4, sp, #132	@ 0x84
 8012e3a:	e7be      	b.n	8012dba <_svfprintf_r+0xc92>
 8012e3c:	9802      	ldr	r0, [sp, #8]
 8012e3e:	aa1e      	add	r2, sp, #120	@ 0x78
 8012e40:	4651      	mov	r1, sl
 8012e42:	f001 fa6f 	bl	8014324 <__ssprint_r>
 8012e46:	2800      	cmp	r0, #0
 8012e48:	f040 828f 	bne.w	801336a <_svfprintf_r+0x1242>
 8012e4c:	ac21      	add	r4, sp, #132	@ 0x84
 8012e4e:	e7c9      	b.n	8012de4 <_svfprintf_r+0xcbc>
 8012e50:	3210      	adds	r2, #16
 8012e52:	2b07      	cmp	r3, #7
 8012e54:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8012e58:	f8c4 8004 	str.w	r8, [r4, #4]
 8012e5c:	dd08      	ble.n	8012e70 <_svfprintf_r+0xd48>
 8012e5e:	9802      	ldr	r0, [sp, #8]
 8012e60:	aa1e      	add	r2, sp, #120	@ 0x78
 8012e62:	4651      	mov	r1, sl
 8012e64:	f001 fa5e 	bl	8014324 <__ssprint_r>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	f040 827e 	bne.w	801336a <_svfprintf_r+0x1242>
 8012e6e:	a921      	add	r1, sp, #132	@ 0x84
 8012e70:	3e10      	subs	r6, #16
 8012e72:	460c      	mov	r4, r1
 8012e74:	e7be      	b.n	8012df4 <_svfprintf_r+0xccc>
 8012e76:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8012e78:	2a00      	cmp	r2, #0
 8012e7a:	dc7b      	bgt.n	8012f74 <_svfprintf_r+0xe4c>
 8012e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8012f6c <_svfprintf_r+0xe44>)
 8012e7e:	6022      	str	r2, [r4, #0]
 8012e80:	2201      	movs	r2, #1
 8012e82:	4413      	add	r3, r2
 8012e84:	9320      	str	r3, [sp, #128]	@ 0x80
 8012e86:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8012e88:	6062      	str	r2, [r4, #4]
 8012e8a:	4413      	add	r3, r2
 8012e8c:	2b07      	cmp	r3, #7
 8012e8e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8012e90:	dc46      	bgt.n	8012f20 <_svfprintf_r+0xdf8>
 8012e92:	3408      	adds	r4, #8
 8012e94:	9903      	ldr	r1, [sp, #12]
 8012e96:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012e98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012e9a:	430b      	orrs	r3, r1
 8012e9c:	f005 0101 	and.w	r1, r5, #1
 8012ea0:	430b      	orrs	r3, r1
 8012ea2:	f43f ad14 	beq.w	80128ce <_svfprintf_r+0x7a6>
 8012ea6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ea8:	6023      	str	r3, [r4, #0]
 8012eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012eac:	6063      	str	r3, [r4, #4]
 8012eae:	441a      	add	r2, r3
 8012eb0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8012eb2:	9220      	str	r2, [sp, #128]	@ 0x80
 8012eb4:	3301      	adds	r3, #1
 8012eb6:	2b07      	cmp	r3, #7
 8012eb8:	931f      	str	r3, [sp, #124]	@ 0x7c
 8012eba:	dc3b      	bgt.n	8012f34 <_svfprintf_r+0xe0c>
 8012ebc:	f104 0308 	add.w	r3, r4, #8
 8012ec0:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8012ec2:	2e00      	cmp	r6, #0
 8012ec4:	da1b      	bge.n	8012efe <_svfprintf_r+0xdd6>
 8012ec6:	4f2a      	ldr	r7, [pc, #168]	@ (8012f70 <_svfprintf_r+0xe48>)
 8012ec8:	4276      	negs	r6, r6
 8012eca:	461a      	mov	r2, r3
 8012ecc:	2410      	movs	r4, #16
 8012ece:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	@ 0x7c
 8012ed2:	2e10      	cmp	r6, #16
 8012ed4:	f101 0101 	add.w	r1, r1, #1
 8012ed8:	f103 0308 	add.w	r3, r3, #8
 8012edc:	6017      	str	r7, [r2, #0]
 8012ede:	dc33      	bgt.n	8012f48 <_svfprintf_r+0xe20>
 8012ee0:	6056      	str	r6, [r2, #4]
 8012ee2:	2907      	cmp	r1, #7
 8012ee4:	4406      	add	r6, r0
 8012ee6:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 8012eea:	dd08      	ble.n	8012efe <_svfprintf_r+0xdd6>
 8012eec:	9802      	ldr	r0, [sp, #8]
 8012eee:	aa1e      	add	r2, sp, #120	@ 0x78
 8012ef0:	4651      	mov	r1, sl
 8012ef2:	f001 fa17 	bl	8014324 <__ssprint_r>
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	f040 8237 	bne.w	801336a <_svfprintf_r+0x1242>
 8012efc:	ab21      	add	r3, sp, #132	@ 0x84
 8012efe:	9a03      	ldr	r2, [sp, #12]
 8012f00:	605a      	str	r2, [r3, #4]
 8012f02:	9903      	ldr	r1, [sp, #12]
 8012f04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012f06:	f8c3 9000 	str.w	r9, [r3]
 8012f0a:	440a      	add	r2, r1
 8012f0c:	9220      	str	r2, [sp, #128]	@ 0x80
 8012f0e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8012f10:	3201      	adds	r2, #1
 8012f12:	2a07      	cmp	r2, #7
 8012f14:	921f      	str	r2, [sp, #124]	@ 0x7c
 8012f16:	f73f af7d 	bgt.w	8012e14 <_svfprintf_r+0xcec>
 8012f1a:	f103 0408 	add.w	r4, r3, #8
 8012f1e:	e4d6      	b.n	80128ce <_svfprintf_r+0x7a6>
 8012f20:	9802      	ldr	r0, [sp, #8]
 8012f22:	aa1e      	add	r2, sp, #120	@ 0x78
 8012f24:	4651      	mov	r1, sl
 8012f26:	f001 f9fd 	bl	8014324 <__ssprint_r>
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	f040 821d 	bne.w	801336a <_svfprintf_r+0x1242>
 8012f30:	ac21      	add	r4, sp, #132	@ 0x84
 8012f32:	e7af      	b.n	8012e94 <_svfprintf_r+0xd6c>
 8012f34:	9802      	ldr	r0, [sp, #8]
 8012f36:	aa1e      	add	r2, sp, #120	@ 0x78
 8012f38:	4651      	mov	r1, sl
 8012f3a:	f001 f9f3 	bl	8014324 <__ssprint_r>
 8012f3e:	2800      	cmp	r0, #0
 8012f40:	f040 8213 	bne.w	801336a <_svfprintf_r+0x1242>
 8012f44:	ab21      	add	r3, sp, #132	@ 0x84
 8012f46:	e7bb      	b.n	8012ec0 <_svfprintf_r+0xd98>
 8012f48:	3010      	adds	r0, #16
 8012f4a:	2907      	cmp	r1, #7
 8012f4c:	e9cd 101f 	strd	r1, r0, [sp, #124]	@ 0x7c
 8012f50:	6054      	str	r4, [r2, #4]
 8012f52:	dd08      	ble.n	8012f66 <_svfprintf_r+0xe3e>
 8012f54:	9802      	ldr	r0, [sp, #8]
 8012f56:	aa1e      	add	r2, sp, #120	@ 0x78
 8012f58:	4651      	mov	r1, sl
 8012f5a:	f001 f9e3 	bl	8014324 <__ssprint_r>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	f040 8203 	bne.w	801336a <_svfprintf_r+0x1242>
 8012f64:	ab21      	add	r3, sp, #132	@ 0x84
 8012f66:	3e10      	subs	r6, #16
 8012f68:	461a      	mov	r2, r3
 8012f6a:	e7b0      	b.n	8012ece <_svfprintf_r+0xda6>
 8012f6c:	08015dee 	.word	0x08015dee
 8012f70:	08015e69 	.word	0x08015e69
 8012f74:	9a03      	ldr	r2, [sp, #12]
 8012f76:	444a      	add	r2, r9
 8012f78:	9204      	str	r2, [sp, #16]
 8012f7a:	9a03      	ldr	r2, [sp, #12]
 8012f7c:	42b2      	cmp	r2, r6
 8012f7e:	bfa8      	it	ge
 8012f80:	4632      	movge	r2, r6
 8012f82:	2a00      	cmp	r2, #0
 8012f84:	4690      	mov	r8, r2
 8012f86:	dd0a      	ble.n	8012f9e <_svfprintf_r+0xe76>
 8012f88:	4413      	add	r3, r2
 8012f8a:	9320      	str	r3, [sp, #128]	@ 0x80
 8012f8c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8012f8e:	3301      	adds	r3, #1
 8012f90:	2b07      	cmp	r3, #7
 8012f92:	e9c4 9200 	strd	r9, r2, [r4]
 8012f96:	931f      	str	r3, [sp, #124]	@ 0x7c
 8012f98:	f300 8089 	bgt.w	80130ae <_svfprintf_r+0xf86>
 8012f9c:	3408      	adds	r4, #8
 8012f9e:	4643      	mov	r3, r8
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	bfac      	ite	ge
 8012fa4:	eba6 0808 	subge.w	r8, r6, r8
 8012fa8:	46b0      	movlt	r8, r6
 8012faa:	f1b8 0f00 	cmp.w	r8, #0
 8012fae:	dd1b      	ble.n	8012fe8 <_svfprintf_r+0xec0>
 8012fb0:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 8012fb4:	4896      	ldr	r0, [pc, #600]	@ (8013210 <_svfprintf_r+0x10e8>)
 8012fb6:	6020      	str	r0, [r4, #0]
 8012fb8:	f1b8 0f10 	cmp.w	r8, #16
 8012fbc:	f102 0201 	add.w	r2, r2, #1
 8012fc0:	f104 0108 	add.w	r1, r4, #8
 8012fc4:	dc7d      	bgt.n	80130c2 <_svfprintf_r+0xf9a>
 8012fc6:	4443      	add	r3, r8
 8012fc8:	2a07      	cmp	r2, #7
 8012fca:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8012fce:	f8c4 8004 	str.w	r8, [r4, #4]
 8012fd2:	f340 808a 	ble.w	80130ea <_svfprintf_r+0xfc2>
 8012fd6:	9802      	ldr	r0, [sp, #8]
 8012fd8:	aa1e      	add	r2, sp, #120	@ 0x78
 8012fda:	4651      	mov	r1, sl
 8012fdc:	f001 f9a2 	bl	8014324 <__ssprint_r>
 8012fe0:	2800      	cmp	r0, #0
 8012fe2:	f040 81c2 	bne.w	801336a <_svfprintf_r+0x1242>
 8012fe6:	ac21      	add	r4, sp, #132	@ 0x84
 8012fe8:	056b      	lsls	r3, r5, #21
 8012fea:	eb09 0806 	add.w	r8, r9, r6
 8012fee:	d508      	bpl.n	8013002 <_svfprintf_r+0xeda>
 8012ff0:	9b06      	ldr	r3, [sp, #24]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d17b      	bne.n	80130ee <_svfprintf_r+0xfc6>
 8012ff6:	2f00      	cmp	r7, #0
 8012ff8:	d17b      	bne.n	80130f2 <_svfprintf_r+0xfca>
 8012ffa:	9b04      	ldr	r3, [sp, #16]
 8012ffc:	4598      	cmp	r8, r3
 8012ffe:	bf28      	it	cs
 8013000:	4698      	movcs	r8, r3
 8013002:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8013004:	9a03      	ldr	r2, [sp, #12]
 8013006:	4293      	cmp	r3, r2
 8013008:	db01      	blt.n	801300e <_svfprintf_r+0xee6>
 801300a:	07ee      	lsls	r6, r5, #31
 801300c:	d50e      	bpl.n	801302c <_svfprintf_r+0xf04>
 801300e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013010:	6023      	str	r3, [r4, #0]
 8013012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013016:	6063      	str	r3, [r4, #4]
 8013018:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801301a:	4413      	add	r3, r2
 801301c:	9320      	str	r3, [sp, #128]	@ 0x80
 801301e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8013020:	3301      	adds	r3, #1
 8013022:	2b07      	cmp	r3, #7
 8013024:	931f      	str	r3, [sp, #124]	@ 0x7c
 8013026:	f300 80df 	bgt.w	80131e8 <_svfprintf_r+0x10c0>
 801302a:	3408      	adds	r4, #8
 801302c:	9b03      	ldr	r3, [sp, #12]
 801302e:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8013030:	1bdf      	subs	r7, r3, r7
 8013032:	9b04      	ldr	r3, [sp, #16]
 8013034:	eba3 0308 	sub.w	r3, r3, r8
 8013038:	429f      	cmp	r7, r3
 801303a:	bfa8      	it	ge
 801303c:	461f      	movge	r7, r3
 801303e:	2f00      	cmp	r7, #0
 8013040:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013042:	dd0a      	ble.n	801305a <_svfprintf_r+0xf32>
 8013044:	443b      	add	r3, r7
 8013046:	9320      	str	r3, [sp, #128]	@ 0x80
 8013048:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801304a:	3301      	adds	r3, #1
 801304c:	2b07      	cmp	r3, #7
 801304e:	e9c4 8700 	strd	r8, r7, [r4]
 8013052:	931f      	str	r3, [sp, #124]	@ 0x7c
 8013054:	f300 80d2 	bgt.w	80131fc <_svfprintf_r+0x10d4>
 8013058:	3408      	adds	r4, #8
 801305a:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 801305c:	9b03      	ldr	r3, [sp, #12]
 801305e:	2f00      	cmp	r7, #0
 8013060:	eba3 0606 	sub.w	r6, r3, r6
 8013064:	bfa8      	it	ge
 8013066:	1bf6      	subge	r6, r6, r7
 8013068:	2e00      	cmp	r6, #0
 801306a:	f77f ac30 	ble.w	80128ce <_svfprintf_r+0x7a6>
 801306e:	4f68      	ldr	r7, [pc, #416]	@ (8013210 <_svfprintf_r+0x10e8>)
 8013070:	f04f 0810 	mov.w	r8, #16
 8013074:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8013078:	2e10      	cmp	r6, #16
 801307a:	f103 0301 	add.w	r3, r3, #1
 801307e:	f104 0108 	add.w	r1, r4, #8
 8013082:	6027      	str	r7, [r4, #0]
 8013084:	f77f aebf 	ble.w	8012e06 <_svfprintf_r+0xcde>
 8013088:	3210      	adds	r2, #16
 801308a:	2b07      	cmp	r3, #7
 801308c:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8013090:	f8c4 8004 	str.w	r8, [r4, #4]
 8013094:	dd08      	ble.n	80130a8 <_svfprintf_r+0xf80>
 8013096:	9802      	ldr	r0, [sp, #8]
 8013098:	aa1e      	add	r2, sp, #120	@ 0x78
 801309a:	4651      	mov	r1, sl
 801309c:	f001 f942 	bl	8014324 <__ssprint_r>
 80130a0:	2800      	cmp	r0, #0
 80130a2:	f040 8162 	bne.w	801336a <_svfprintf_r+0x1242>
 80130a6:	a921      	add	r1, sp, #132	@ 0x84
 80130a8:	3e10      	subs	r6, #16
 80130aa:	460c      	mov	r4, r1
 80130ac:	e7e2      	b.n	8013074 <_svfprintf_r+0xf4c>
 80130ae:	9802      	ldr	r0, [sp, #8]
 80130b0:	aa1e      	add	r2, sp, #120	@ 0x78
 80130b2:	4651      	mov	r1, sl
 80130b4:	f001 f936 	bl	8014324 <__ssprint_r>
 80130b8:	2800      	cmp	r0, #0
 80130ba:	f040 8156 	bne.w	801336a <_svfprintf_r+0x1242>
 80130be:	ac21      	add	r4, sp, #132	@ 0x84
 80130c0:	e76d      	b.n	8012f9e <_svfprintf_r+0xe76>
 80130c2:	2010      	movs	r0, #16
 80130c4:	4403      	add	r3, r0
 80130c6:	2a07      	cmp	r2, #7
 80130c8:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 80130cc:	6060      	str	r0, [r4, #4]
 80130ce:	dd08      	ble.n	80130e2 <_svfprintf_r+0xfba>
 80130d0:	9802      	ldr	r0, [sp, #8]
 80130d2:	aa1e      	add	r2, sp, #120	@ 0x78
 80130d4:	4651      	mov	r1, sl
 80130d6:	f001 f925 	bl	8014324 <__ssprint_r>
 80130da:	2800      	cmp	r0, #0
 80130dc:	f040 8145 	bne.w	801336a <_svfprintf_r+0x1242>
 80130e0:	a921      	add	r1, sp, #132	@ 0x84
 80130e2:	f1a8 0810 	sub.w	r8, r8, #16
 80130e6:	460c      	mov	r4, r1
 80130e8:	e762      	b.n	8012fb0 <_svfprintf_r+0xe88>
 80130ea:	460c      	mov	r4, r1
 80130ec:	e77c      	b.n	8012fe8 <_svfprintf_r+0xec0>
 80130ee:	2f00      	cmp	r7, #0
 80130f0:	d04a      	beq.n	8013188 <_svfprintf_r+0x1060>
 80130f2:	3f01      	subs	r7, #1
 80130f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80130f6:	6023      	str	r3, [r4, #0]
 80130f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80130fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80130fc:	6063      	str	r3, [r4, #4]
 80130fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013100:	4413      	add	r3, r2
 8013102:	9320      	str	r3, [sp, #128]	@ 0x80
 8013104:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8013106:	3301      	adds	r3, #1
 8013108:	2b07      	cmp	r3, #7
 801310a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801310c:	dc43      	bgt.n	8013196 <_svfprintf_r+0x106e>
 801310e:	3408      	adds	r4, #8
 8013110:	9b07      	ldr	r3, [sp, #28]
 8013112:	781a      	ldrb	r2, [r3, #0]
 8013114:	9b04      	ldr	r3, [sp, #16]
 8013116:	eba3 0308 	sub.w	r3, r3, r8
 801311a:	429a      	cmp	r2, r3
 801311c:	bfa8      	it	ge
 801311e:	461a      	movge	r2, r3
 8013120:	2a00      	cmp	r2, #0
 8013122:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013124:	4691      	mov	r9, r2
 8013126:	dd09      	ble.n	801313c <_svfprintf_r+0x1014>
 8013128:	4413      	add	r3, r2
 801312a:	9320      	str	r3, [sp, #128]	@ 0x80
 801312c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801312e:	3301      	adds	r3, #1
 8013130:	2b07      	cmp	r3, #7
 8013132:	e9c4 8200 	strd	r8, r2, [r4]
 8013136:	931f      	str	r3, [sp, #124]	@ 0x7c
 8013138:	dc37      	bgt.n	80131aa <_svfprintf_r+0x1082>
 801313a:	3408      	adds	r4, #8
 801313c:	9b07      	ldr	r3, [sp, #28]
 801313e:	781e      	ldrb	r6, [r3, #0]
 8013140:	f1b9 0f00 	cmp.w	r9, #0
 8013144:	bfa8      	it	ge
 8013146:	eba6 0609 	subge.w	r6, r6, r9
 801314a:	2e00      	cmp	r6, #0
 801314c:	dd18      	ble.n	8013180 <_svfprintf_r+0x1058>
 801314e:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8013152:	482f      	ldr	r0, [pc, #188]	@ (8013210 <_svfprintf_r+0x10e8>)
 8013154:	6020      	str	r0, [r4, #0]
 8013156:	2e10      	cmp	r6, #16
 8013158:	f103 0301 	add.w	r3, r3, #1
 801315c:	f104 0108 	add.w	r1, r4, #8
 8013160:	dc2d      	bgt.n	80131be <_svfprintf_r+0x1096>
 8013162:	6066      	str	r6, [r4, #4]
 8013164:	2b07      	cmp	r3, #7
 8013166:	4416      	add	r6, r2
 8013168:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 801316c:	dd3a      	ble.n	80131e4 <_svfprintf_r+0x10bc>
 801316e:	9802      	ldr	r0, [sp, #8]
 8013170:	aa1e      	add	r2, sp, #120	@ 0x78
 8013172:	4651      	mov	r1, sl
 8013174:	f001 f8d6 	bl	8014324 <__ssprint_r>
 8013178:	2800      	cmp	r0, #0
 801317a:	f040 80f6 	bne.w	801336a <_svfprintf_r+0x1242>
 801317e:	ac21      	add	r4, sp, #132	@ 0x84
 8013180:	9b07      	ldr	r3, [sp, #28]
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	4498      	add	r8, r3
 8013186:	e733      	b.n	8012ff0 <_svfprintf_r+0xec8>
 8013188:	9b07      	ldr	r3, [sp, #28]
 801318a:	3b01      	subs	r3, #1
 801318c:	9307      	str	r3, [sp, #28]
 801318e:	9b06      	ldr	r3, [sp, #24]
 8013190:	3b01      	subs	r3, #1
 8013192:	9306      	str	r3, [sp, #24]
 8013194:	e7ae      	b.n	80130f4 <_svfprintf_r+0xfcc>
 8013196:	9802      	ldr	r0, [sp, #8]
 8013198:	aa1e      	add	r2, sp, #120	@ 0x78
 801319a:	4651      	mov	r1, sl
 801319c:	f001 f8c2 	bl	8014324 <__ssprint_r>
 80131a0:	2800      	cmp	r0, #0
 80131a2:	f040 80e2 	bne.w	801336a <_svfprintf_r+0x1242>
 80131a6:	ac21      	add	r4, sp, #132	@ 0x84
 80131a8:	e7b2      	b.n	8013110 <_svfprintf_r+0xfe8>
 80131aa:	9802      	ldr	r0, [sp, #8]
 80131ac:	aa1e      	add	r2, sp, #120	@ 0x78
 80131ae:	4651      	mov	r1, sl
 80131b0:	f001 f8b8 	bl	8014324 <__ssprint_r>
 80131b4:	2800      	cmp	r0, #0
 80131b6:	f040 80d8 	bne.w	801336a <_svfprintf_r+0x1242>
 80131ba:	ac21      	add	r4, sp, #132	@ 0x84
 80131bc:	e7be      	b.n	801313c <_svfprintf_r+0x1014>
 80131be:	2010      	movs	r0, #16
 80131c0:	4402      	add	r2, r0
 80131c2:	2b07      	cmp	r3, #7
 80131c4:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 80131c8:	6060      	str	r0, [r4, #4]
 80131ca:	dd08      	ble.n	80131de <_svfprintf_r+0x10b6>
 80131cc:	9802      	ldr	r0, [sp, #8]
 80131ce:	aa1e      	add	r2, sp, #120	@ 0x78
 80131d0:	4651      	mov	r1, sl
 80131d2:	f001 f8a7 	bl	8014324 <__ssprint_r>
 80131d6:	2800      	cmp	r0, #0
 80131d8:	f040 80c7 	bne.w	801336a <_svfprintf_r+0x1242>
 80131dc:	a921      	add	r1, sp, #132	@ 0x84
 80131de:	3e10      	subs	r6, #16
 80131e0:	460c      	mov	r4, r1
 80131e2:	e7b4      	b.n	801314e <_svfprintf_r+0x1026>
 80131e4:	460c      	mov	r4, r1
 80131e6:	e7cb      	b.n	8013180 <_svfprintf_r+0x1058>
 80131e8:	9802      	ldr	r0, [sp, #8]
 80131ea:	aa1e      	add	r2, sp, #120	@ 0x78
 80131ec:	4651      	mov	r1, sl
 80131ee:	f001 f899 	bl	8014324 <__ssprint_r>
 80131f2:	2800      	cmp	r0, #0
 80131f4:	f040 80b9 	bne.w	801336a <_svfprintf_r+0x1242>
 80131f8:	ac21      	add	r4, sp, #132	@ 0x84
 80131fa:	e717      	b.n	801302c <_svfprintf_r+0xf04>
 80131fc:	9802      	ldr	r0, [sp, #8]
 80131fe:	aa1e      	add	r2, sp, #120	@ 0x78
 8013200:	4651      	mov	r1, sl
 8013202:	f001 f88f 	bl	8014324 <__ssprint_r>
 8013206:	2800      	cmp	r0, #0
 8013208:	f040 80af 	bne.w	801336a <_svfprintf_r+0x1242>
 801320c:	ac21      	add	r4, sp, #132	@ 0x84
 801320e:	e724      	b.n	801305a <_svfprintf_r+0xf32>
 8013210:	08015e69 	.word	0x08015e69
 8013214:	9803      	ldr	r0, [sp, #12]
 8013216:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8013218:	2801      	cmp	r0, #1
 801321a:	f103 0201 	add.w	r2, r3, #1
 801321e:	f101 0101 	add.w	r1, r1, #1
 8013222:	f104 0308 	add.w	r3, r4, #8
 8013226:	dc01      	bgt.n	801322c <_svfprintf_r+0x1104>
 8013228:	07e8      	lsls	r0, r5, #31
 801322a:	d572      	bpl.n	8013312 <_svfprintf_r+0x11ea>
 801322c:	2001      	movs	r0, #1
 801322e:	2907      	cmp	r1, #7
 8013230:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8013234:	f8c4 9000 	str.w	r9, [r4]
 8013238:	6060      	str	r0, [r4, #4]
 801323a:	dd08      	ble.n	801324e <_svfprintf_r+0x1126>
 801323c:	9802      	ldr	r0, [sp, #8]
 801323e:	aa1e      	add	r2, sp, #120	@ 0x78
 8013240:	4651      	mov	r1, sl
 8013242:	f001 f86f 	bl	8014324 <__ssprint_r>
 8013246:	2800      	cmp	r0, #0
 8013248:	f040 808f 	bne.w	801336a <_svfprintf_r+0x1242>
 801324c:	ab21      	add	r3, sp, #132	@ 0x84
 801324e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013250:	601a      	str	r2, [r3, #0]
 8013252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013254:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013256:	605a      	str	r2, [r3, #4]
 8013258:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801325a:	440a      	add	r2, r1
 801325c:	9220      	str	r2, [sp, #128]	@ 0x80
 801325e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8013260:	3201      	adds	r2, #1
 8013262:	2a07      	cmp	r2, #7
 8013264:	921f      	str	r2, [sp, #124]	@ 0x7c
 8013266:	dc25      	bgt.n	80132b4 <_svfprintf_r+0x118c>
 8013268:	3308      	adds	r3, #8
 801326a:	9803      	ldr	r0, [sp, #12]
 801326c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013274:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	@ 0x7c
 8013278:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 801327c:	d023      	beq.n	80132c6 <_svfprintf_r+0x119e>
 801327e:	f109 0001 	add.w	r0, r9, #1
 8013282:	e9c3 0400 	strd	r0, r4, [r3]
 8013286:	9803      	ldr	r0, [sp, #12]
 8013288:	3101      	adds	r1, #1
 801328a:	3a01      	subs	r2, #1
 801328c:	4402      	add	r2, r0
 801328e:	2907      	cmp	r1, #7
 8013290:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8013294:	dd46      	ble.n	8013324 <_svfprintf_r+0x11fc>
 8013296:	9802      	ldr	r0, [sp, #8]
 8013298:	aa1e      	add	r2, sp, #120	@ 0x78
 801329a:	4651      	mov	r1, sl
 801329c:	f001 f842 	bl	8014324 <__ssprint_r>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	d162      	bne.n	801336a <_svfprintf_r+0x1242>
 80132a4:	ab21      	add	r3, sp, #132	@ 0x84
 80132a6:	aa1a      	add	r2, sp, #104	@ 0x68
 80132a8:	601a      	str	r2, [r3, #0]
 80132aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80132ac:	605a      	str	r2, [r3, #4]
 80132ae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80132b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80132b2:	e62a      	b.n	8012f0a <_svfprintf_r+0xde2>
 80132b4:	9802      	ldr	r0, [sp, #8]
 80132b6:	aa1e      	add	r2, sp, #120	@ 0x78
 80132b8:	4651      	mov	r1, sl
 80132ba:	f001 f833 	bl	8014324 <__ssprint_r>
 80132be:	2800      	cmp	r0, #0
 80132c0:	d153      	bne.n	801336a <_svfprintf_r+0x1242>
 80132c2:	ab21      	add	r3, sp, #132	@ 0x84
 80132c4:	e7d1      	b.n	801326a <_svfprintf_r+0x1142>
 80132c6:	9a03      	ldr	r2, [sp, #12]
 80132c8:	2a01      	cmp	r2, #1
 80132ca:	ddec      	ble.n	80132a6 <_svfprintf_r+0x117e>
 80132cc:	4e56      	ldr	r6, [pc, #344]	@ (8013428 <_svfprintf_r+0x1300>)
 80132ce:	2710      	movs	r7, #16
 80132d0:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	@ 0x7c
 80132d4:	2c10      	cmp	r4, #16
 80132d6:	f102 0201 	add.w	r2, r2, #1
 80132da:	f103 0008 	add.w	r0, r3, #8
 80132de:	601e      	str	r6, [r3, #0]
 80132e0:	dc07      	bgt.n	80132f2 <_svfprintf_r+0x11ca>
 80132e2:	605c      	str	r4, [r3, #4]
 80132e4:	2a07      	cmp	r2, #7
 80132e6:	440c      	add	r4, r1
 80132e8:	e9cd 241f 	strd	r2, r4, [sp, #124]	@ 0x7c
 80132ec:	dcd3      	bgt.n	8013296 <_svfprintf_r+0x116e>
 80132ee:	4603      	mov	r3, r0
 80132f0:	e7d9      	b.n	80132a6 <_svfprintf_r+0x117e>
 80132f2:	3110      	adds	r1, #16
 80132f4:	2a07      	cmp	r2, #7
 80132f6:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 80132fa:	605f      	str	r7, [r3, #4]
 80132fc:	dd06      	ble.n	801330c <_svfprintf_r+0x11e4>
 80132fe:	9802      	ldr	r0, [sp, #8]
 8013300:	aa1e      	add	r2, sp, #120	@ 0x78
 8013302:	4651      	mov	r1, sl
 8013304:	f001 f80e 	bl	8014324 <__ssprint_r>
 8013308:	bb78      	cbnz	r0, 801336a <_svfprintf_r+0x1242>
 801330a:	a821      	add	r0, sp, #132	@ 0x84
 801330c:	3c10      	subs	r4, #16
 801330e:	4603      	mov	r3, r0
 8013310:	e7de      	b.n	80132d0 <_svfprintf_r+0x11a8>
 8013312:	2001      	movs	r0, #1
 8013314:	2907      	cmp	r1, #7
 8013316:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 801331a:	f8c4 9000 	str.w	r9, [r4]
 801331e:	6060      	str	r0, [r4, #4]
 8013320:	ddc1      	ble.n	80132a6 <_svfprintf_r+0x117e>
 8013322:	e7b8      	b.n	8013296 <_svfprintf_r+0x116e>
 8013324:	3308      	adds	r3, #8
 8013326:	e7be      	b.n	80132a6 <_svfprintf_r+0x117e>
 8013328:	460c      	mov	r4, r1
 801332a:	f7ff bad0 	b.w	80128ce <_svfprintf_r+0x7a6>
 801332e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013330:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013332:	1a9d      	subs	r5, r3, r2
 8013334:	2d00      	cmp	r5, #0
 8013336:	f77f aacd 	ble.w	80128d4 <_svfprintf_r+0x7ac>
 801333a:	4e3c      	ldr	r6, [pc, #240]	@ (801342c <_svfprintf_r+0x1304>)
 801333c:	2710      	movs	r7, #16
 801333e:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8013342:	2d10      	cmp	r5, #16
 8013344:	f103 0301 	add.w	r3, r3, #1
 8013348:	6026      	str	r6, [r4, #0]
 801334a:	dc18      	bgt.n	801337e <_svfprintf_r+0x1256>
 801334c:	442a      	add	r2, r5
 801334e:	2b07      	cmp	r3, #7
 8013350:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8013354:	6065      	str	r5, [r4, #4]
 8013356:	f77f aabd 	ble.w	80128d4 <_svfprintf_r+0x7ac>
 801335a:	9802      	ldr	r0, [sp, #8]
 801335c:	aa1e      	add	r2, sp, #120	@ 0x78
 801335e:	4651      	mov	r1, sl
 8013360:	f000 ffe0 	bl	8014324 <__ssprint_r>
 8013364:	2800      	cmp	r0, #0
 8013366:	f43f aab5 	beq.w	80128d4 <_svfprintf_r+0x7ac>
 801336a:	f1bb 0f00 	cmp.w	fp, #0
 801336e:	f43f a8e0 	beq.w	8012532 <_svfprintf_r+0x40a>
 8013372:	9802      	ldr	r0, [sp, #8]
 8013374:	4659      	mov	r1, fp
 8013376:	f7fe fbcb 	bl	8011b10 <_free_r>
 801337a:	f7ff b8da 	b.w	8012532 <_svfprintf_r+0x40a>
 801337e:	3210      	adds	r2, #16
 8013380:	2b07      	cmp	r3, #7
 8013382:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8013386:	6067      	str	r7, [r4, #4]
 8013388:	dc02      	bgt.n	8013390 <_svfprintf_r+0x1268>
 801338a:	3408      	adds	r4, #8
 801338c:	3d10      	subs	r5, #16
 801338e:	e7d6      	b.n	801333e <_svfprintf_r+0x1216>
 8013390:	9802      	ldr	r0, [sp, #8]
 8013392:	aa1e      	add	r2, sp, #120	@ 0x78
 8013394:	4651      	mov	r1, sl
 8013396:	f000 ffc5 	bl	8014324 <__ssprint_r>
 801339a:	2800      	cmp	r0, #0
 801339c:	d1e5      	bne.n	801336a <_svfprintf_r+0x1242>
 801339e:	ac21      	add	r4, sp, #132	@ 0x84
 80133a0:	e7f4      	b.n	801338c <_svfprintf_r+0x1264>
 80133a2:	9802      	ldr	r0, [sp, #8]
 80133a4:	4659      	mov	r1, fp
 80133a6:	f7fe fbb3 	bl	8011b10 <_free_r>
 80133aa:	f7ff baab 	b.w	8012904 <_svfprintf_r+0x7dc>
 80133ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	f43f a8be 	beq.w	8012532 <_svfprintf_r+0x40a>
 80133b6:	9802      	ldr	r0, [sp, #8]
 80133b8:	aa1e      	add	r2, sp, #120	@ 0x78
 80133ba:	4651      	mov	r1, sl
 80133bc:	f000 ffb2 	bl	8014324 <__ssprint_r>
 80133c0:	f7ff b8b7 	b.w	8012532 <_svfprintf_r+0x40a>
 80133c4:	ea56 0207 	orrs.w	r2, r6, r7
 80133c8:	9506      	str	r5, [sp, #24]
 80133ca:	f43f ab93 	beq.w	8012af4 <_svfprintf_r+0x9cc>
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	f43f ac14 	beq.w	8012bfc <_svfprintf_r+0xad4>
 80133d4:	2b02      	cmp	r3, #2
 80133d6:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 80133da:	f43f ac59 	beq.w	8012c90 <_svfprintf_r+0xb68>
 80133de:	f006 0307 	and.w	r3, r6, #7
 80133e2:	08f6      	lsrs	r6, r6, #3
 80133e4:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80133e8:	08ff      	lsrs	r7, r7, #3
 80133ea:	3330      	adds	r3, #48	@ 0x30
 80133ec:	ea56 0107 	orrs.w	r1, r6, r7
 80133f0:	464a      	mov	r2, r9
 80133f2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80133f6:	d1f2      	bne.n	80133de <_svfprintf_r+0x12b6>
 80133f8:	9906      	ldr	r1, [sp, #24]
 80133fa:	07cd      	lsls	r5, r1, #31
 80133fc:	d506      	bpl.n	801340c <_svfprintf_r+0x12e4>
 80133fe:	2b30      	cmp	r3, #48	@ 0x30
 8013400:	d004      	beq.n	801340c <_svfprintf_r+0x12e4>
 8013402:	2330      	movs	r3, #48	@ 0x30
 8013404:	f809 3c01 	strb.w	r3, [r9, #-1]
 8013408:	f1a2 0902 	sub.w	r9, r2, #2
 801340c:	ab4a      	add	r3, sp, #296	@ 0x128
 801340e:	9d06      	ldr	r5, [sp, #24]
 8013410:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8013414:	f04f 0b00 	mov.w	fp, #0
 8013418:	eba3 0809 	sub.w	r8, r3, r9
 801341c:	465f      	mov	r7, fp
 801341e:	f8cd b018 	str.w	fp, [sp, #24]
 8013422:	465e      	mov	r6, fp
 8013424:	f7ff b9a4 	b.w	8012770 <_svfprintf_r+0x648>
 8013428:	08015e69 	.word	0x08015e69
 801342c:	08015e79 	.word	0x08015e79

08013430 <__swhatbuf_r>:
 8013430:	b570      	push	{r4, r5, r6, lr}
 8013432:	460c      	mov	r4, r1
 8013434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013438:	2900      	cmp	r1, #0
 801343a:	b096      	sub	sp, #88	@ 0x58
 801343c:	4615      	mov	r5, r2
 801343e:	461e      	mov	r6, r3
 8013440:	da07      	bge.n	8013452 <__swhatbuf_r+0x22>
 8013442:	89a1      	ldrh	r1, [r4, #12]
 8013444:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8013448:	d117      	bne.n	801347a <__swhatbuf_r+0x4a>
 801344a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801344e:	4608      	mov	r0, r1
 8013450:	e00f      	b.n	8013472 <__swhatbuf_r+0x42>
 8013452:	466a      	mov	r2, sp
 8013454:	f000 fe38 	bl	80140c8 <_fstat_r>
 8013458:	2800      	cmp	r0, #0
 801345a:	dbf2      	blt.n	8013442 <__swhatbuf_r+0x12>
 801345c:	9901      	ldr	r1, [sp, #4]
 801345e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013462:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013466:	4259      	negs	r1, r3
 8013468:	4159      	adcs	r1, r3
 801346a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801346e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013472:	6031      	str	r1, [r6, #0]
 8013474:	602b      	str	r3, [r5, #0]
 8013476:	b016      	add	sp, #88	@ 0x58
 8013478:	bd70      	pop	{r4, r5, r6, pc}
 801347a:	2100      	movs	r1, #0
 801347c:	2340      	movs	r3, #64	@ 0x40
 801347e:	e7e6      	b.n	801344e <__swhatbuf_r+0x1e>

08013480 <__smakebuf_r>:
 8013480:	898b      	ldrh	r3, [r1, #12]
 8013482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013484:	079d      	lsls	r5, r3, #30
 8013486:	4606      	mov	r6, r0
 8013488:	460c      	mov	r4, r1
 801348a:	d507      	bpl.n	801349c <__smakebuf_r+0x1c>
 801348c:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8013490:	6023      	str	r3, [r4, #0]
 8013492:	6123      	str	r3, [r4, #16]
 8013494:	2301      	movs	r3, #1
 8013496:	6163      	str	r3, [r4, #20]
 8013498:	b003      	add	sp, #12
 801349a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801349c:	ab01      	add	r3, sp, #4
 801349e:	466a      	mov	r2, sp
 80134a0:	f7ff ffc6 	bl	8013430 <__swhatbuf_r>
 80134a4:	9f00      	ldr	r7, [sp, #0]
 80134a6:	4605      	mov	r5, r0
 80134a8:	4639      	mov	r1, r7
 80134aa:	4630      	mov	r0, r6
 80134ac:	f7fe fbf0 	bl	8011c90 <_malloc_r>
 80134b0:	b948      	cbnz	r0, 80134c6 <__smakebuf_r+0x46>
 80134b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134b6:	059a      	lsls	r2, r3, #22
 80134b8:	d4ee      	bmi.n	8013498 <__smakebuf_r+0x18>
 80134ba:	f023 0303 	bic.w	r3, r3, #3
 80134be:	f043 0302 	orr.w	r3, r3, #2
 80134c2:	81a3      	strh	r3, [r4, #12]
 80134c4:	e7e2      	b.n	801348c <__smakebuf_r+0xc>
 80134c6:	89a3      	ldrh	r3, [r4, #12]
 80134c8:	6020      	str	r0, [r4, #0]
 80134ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80134ce:	81a3      	strh	r3, [r4, #12]
 80134d0:	9b01      	ldr	r3, [sp, #4]
 80134d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80134d6:	b15b      	cbz	r3, 80134f0 <__smakebuf_r+0x70>
 80134d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134dc:	4630      	mov	r0, r6
 80134de:	f000 fe05 	bl	80140ec <_isatty_r>
 80134e2:	b128      	cbz	r0, 80134f0 <__smakebuf_r+0x70>
 80134e4:	89a3      	ldrh	r3, [r4, #12]
 80134e6:	f023 0303 	bic.w	r3, r3, #3
 80134ea:	f043 0301 	orr.w	r3, r3, #1
 80134ee:	81a3      	strh	r3, [r4, #12]
 80134f0:	89a3      	ldrh	r3, [r4, #12]
 80134f2:	431d      	orrs	r5, r3
 80134f4:	81a5      	strh	r5, [r4, #12]
 80134f6:	e7cf      	b.n	8013498 <__smakebuf_r+0x18>

080134f8 <__malloc_lock>:
 80134f8:	4801      	ldr	r0, [pc, #4]	@ (8013500 <__malloc_lock+0x8>)
 80134fa:	f7fd bc7f 	b.w	8010dfc <__retarget_lock_acquire_recursive>
 80134fe:	bf00      	nop
 8013500:	24024d5c 	.word	0x24024d5c

08013504 <__malloc_unlock>:
 8013504:	4801      	ldr	r0, [pc, #4]	@ (801350c <__malloc_unlock+0x8>)
 8013506:	f7fd bc7a 	b.w	8010dfe <__retarget_lock_release_recursive>
 801350a:	bf00      	nop
 801350c:	24024d5c 	.word	0x24024d5c

08013510 <_Balloc>:
 8013510:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8013512:	b570      	push	{r4, r5, r6, lr}
 8013514:	4605      	mov	r5, r0
 8013516:	460c      	mov	r4, r1
 8013518:	b17b      	cbz	r3, 801353a <_Balloc+0x2a>
 801351a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801351c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013520:	b9a0      	cbnz	r0, 801354c <_Balloc+0x3c>
 8013522:	2101      	movs	r1, #1
 8013524:	fa01 f604 	lsl.w	r6, r1, r4
 8013528:	1d72      	adds	r2, r6, #5
 801352a:	0092      	lsls	r2, r2, #2
 801352c:	4628      	mov	r0, r5
 801352e:	f000 feb1 	bl	8014294 <_calloc_r>
 8013532:	b148      	cbz	r0, 8013548 <_Balloc+0x38>
 8013534:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8013538:	e00b      	b.n	8013552 <_Balloc+0x42>
 801353a:	2221      	movs	r2, #33	@ 0x21
 801353c:	2104      	movs	r1, #4
 801353e:	f000 fea9 	bl	8014294 <_calloc_r>
 8013542:	6468      	str	r0, [r5, #68]	@ 0x44
 8013544:	2800      	cmp	r0, #0
 8013546:	d1e8      	bne.n	801351a <_Balloc+0xa>
 8013548:	2000      	movs	r0, #0
 801354a:	bd70      	pop	{r4, r5, r6, pc}
 801354c:	6802      	ldr	r2, [r0, #0]
 801354e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8013552:	2300      	movs	r3, #0
 8013554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013558:	e7f7      	b.n	801354a <_Balloc+0x3a>

0801355a <_Bfree>:
 801355a:	b131      	cbz	r1, 801356a <_Bfree+0x10>
 801355c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801355e:	684a      	ldr	r2, [r1, #4]
 8013560:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013564:	6008      	str	r0, [r1, #0]
 8013566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801356a:	4770      	bx	lr

0801356c <__multadd>:
 801356c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013570:	690d      	ldr	r5, [r1, #16]
 8013572:	4607      	mov	r7, r0
 8013574:	460c      	mov	r4, r1
 8013576:	461e      	mov	r6, r3
 8013578:	f101 0c14 	add.w	ip, r1, #20
 801357c:	2000      	movs	r0, #0
 801357e:	f8dc 3000 	ldr.w	r3, [ip]
 8013582:	b299      	uxth	r1, r3
 8013584:	fb02 6101 	mla	r1, r2, r1, r6
 8013588:	0c1e      	lsrs	r6, r3, #16
 801358a:	0c0b      	lsrs	r3, r1, #16
 801358c:	fb02 3306 	mla	r3, r2, r6, r3
 8013590:	b289      	uxth	r1, r1
 8013592:	3001      	adds	r0, #1
 8013594:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013598:	4285      	cmp	r5, r0
 801359a:	f84c 1b04 	str.w	r1, [ip], #4
 801359e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80135a2:	dcec      	bgt.n	801357e <__multadd+0x12>
 80135a4:	b30e      	cbz	r6, 80135ea <__multadd+0x7e>
 80135a6:	68a3      	ldr	r3, [r4, #8]
 80135a8:	42ab      	cmp	r3, r5
 80135aa:	dc19      	bgt.n	80135e0 <__multadd+0x74>
 80135ac:	6861      	ldr	r1, [r4, #4]
 80135ae:	4638      	mov	r0, r7
 80135b0:	3101      	adds	r1, #1
 80135b2:	f7ff ffad 	bl	8013510 <_Balloc>
 80135b6:	4680      	mov	r8, r0
 80135b8:	b928      	cbnz	r0, 80135c6 <__multadd+0x5a>
 80135ba:	4602      	mov	r2, r0
 80135bc:	4b0c      	ldr	r3, [pc, #48]	@ (80135f0 <__multadd+0x84>)
 80135be:	480d      	ldr	r0, [pc, #52]	@ (80135f4 <__multadd+0x88>)
 80135c0:	21ba      	movs	r1, #186	@ 0xba
 80135c2:	f000 fe49 	bl	8014258 <__assert_func>
 80135c6:	6922      	ldr	r2, [r4, #16]
 80135c8:	3202      	adds	r2, #2
 80135ca:	f104 010c 	add.w	r1, r4, #12
 80135ce:	0092      	lsls	r2, r2, #2
 80135d0:	300c      	adds	r0, #12
 80135d2:	f7fd fc15 	bl	8010e00 <memcpy>
 80135d6:	4621      	mov	r1, r4
 80135d8:	4638      	mov	r0, r7
 80135da:	f7ff ffbe 	bl	801355a <_Bfree>
 80135de:	4644      	mov	r4, r8
 80135e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80135e4:	3501      	adds	r5, #1
 80135e6:	615e      	str	r6, [r3, #20]
 80135e8:	6125      	str	r5, [r4, #16]
 80135ea:	4620      	mov	r0, r4
 80135ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135f0:	08015df0 	.word	0x08015df0
 80135f4:	08015e89 	.word	0x08015e89

080135f8 <__hi0bits>:
 80135f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80135fc:	4603      	mov	r3, r0
 80135fe:	bf36      	itet	cc
 8013600:	0403      	lslcc	r3, r0, #16
 8013602:	2000      	movcs	r0, #0
 8013604:	2010      	movcc	r0, #16
 8013606:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801360a:	bf3c      	itt	cc
 801360c:	021b      	lslcc	r3, r3, #8
 801360e:	3008      	addcc	r0, #8
 8013610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013614:	bf3c      	itt	cc
 8013616:	011b      	lslcc	r3, r3, #4
 8013618:	3004      	addcc	r0, #4
 801361a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801361e:	bf3c      	itt	cc
 8013620:	009b      	lslcc	r3, r3, #2
 8013622:	3002      	addcc	r0, #2
 8013624:	2b00      	cmp	r3, #0
 8013626:	db05      	blt.n	8013634 <__hi0bits+0x3c>
 8013628:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801362c:	f100 0001 	add.w	r0, r0, #1
 8013630:	bf08      	it	eq
 8013632:	2020      	moveq	r0, #32
 8013634:	4770      	bx	lr

08013636 <__lo0bits>:
 8013636:	6803      	ldr	r3, [r0, #0]
 8013638:	4602      	mov	r2, r0
 801363a:	f013 0007 	ands.w	r0, r3, #7
 801363e:	d00b      	beq.n	8013658 <__lo0bits+0x22>
 8013640:	07d9      	lsls	r1, r3, #31
 8013642:	d421      	bmi.n	8013688 <__lo0bits+0x52>
 8013644:	0798      	lsls	r0, r3, #30
 8013646:	bf49      	itett	mi
 8013648:	085b      	lsrmi	r3, r3, #1
 801364a:	089b      	lsrpl	r3, r3, #2
 801364c:	2001      	movmi	r0, #1
 801364e:	6013      	strmi	r3, [r2, #0]
 8013650:	bf5c      	itt	pl
 8013652:	6013      	strpl	r3, [r2, #0]
 8013654:	2002      	movpl	r0, #2
 8013656:	4770      	bx	lr
 8013658:	b299      	uxth	r1, r3
 801365a:	b909      	cbnz	r1, 8013660 <__lo0bits+0x2a>
 801365c:	0c1b      	lsrs	r3, r3, #16
 801365e:	2010      	movs	r0, #16
 8013660:	b2d9      	uxtb	r1, r3
 8013662:	b909      	cbnz	r1, 8013668 <__lo0bits+0x32>
 8013664:	3008      	adds	r0, #8
 8013666:	0a1b      	lsrs	r3, r3, #8
 8013668:	0719      	lsls	r1, r3, #28
 801366a:	bf04      	itt	eq
 801366c:	091b      	lsreq	r3, r3, #4
 801366e:	3004      	addeq	r0, #4
 8013670:	0799      	lsls	r1, r3, #30
 8013672:	bf04      	itt	eq
 8013674:	089b      	lsreq	r3, r3, #2
 8013676:	3002      	addeq	r0, #2
 8013678:	07d9      	lsls	r1, r3, #31
 801367a:	d403      	bmi.n	8013684 <__lo0bits+0x4e>
 801367c:	085b      	lsrs	r3, r3, #1
 801367e:	f100 0001 	add.w	r0, r0, #1
 8013682:	d003      	beq.n	801368c <__lo0bits+0x56>
 8013684:	6013      	str	r3, [r2, #0]
 8013686:	4770      	bx	lr
 8013688:	2000      	movs	r0, #0
 801368a:	4770      	bx	lr
 801368c:	2020      	movs	r0, #32
 801368e:	4770      	bx	lr

08013690 <__i2b>:
 8013690:	b510      	push	{r4, lr}
 8013692:	460c      	mov	r4, r1
 8013694:	2101      	movs	r1, #1
 8013696:	f7ff ff3b 	bl	8013510 <_Balloc>
 801369a:	4602      	mov	r2, r0
 801369c:	b928      	cbnz	r0, 80136aa <__i2b+0x1a>
 801369e:	4b05      	ldr	r3, [pc, #20]	@ (80136b4 <__i2b+0x24>)
 80136a0:	4805      	ldr	r0, [pc, #20]	@ (80136b8 <__i2b+0x28>)
 80136a2:	f240 1145 	movw	r1, #325	@ 0x145
 80136a6:	f000 fdd7 	bl	8014258 <__assert_func>
 80136aa:	2301      	movs	r3, #1
 80136ac:	6144      	str	r4, [r0, #20]
 80136ae:	6103      	str	r3, [r0, #16]
 80136b0:	bd10      	pop	{r4, pc}
 80136b2:	bf00      	nop
 80136b4:	08015df0 	.word	0x08015df0
 80136b8:	08015e89 	.word	0x08015e89

080136bc <__multiply>:
 80136bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c0:	4614      	mov	r4, r2
 80136c2:	690a      	ldr	r2, [r1, #16]
 80136c4:	6923      	ldr	r3, [r4, #16]
 80136c6:	429a      	cmp	r2, r3
 80136c8:	bfa8      	it	ge
 80136ca:	4623      	movge	r3, r4
 80136cc:	460f      	mov	r7, r1
 80136ce:	bfa4      	itt	ge
 80136d0:	460c      	movge	r4, r1
 80136d2:	461f      	movge	r7, r3
 80136d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80136d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80136dc:	68a3      	ldr	r3, [r4, #8]
 80136de:	6861      	ldr	r1, [r4, #4]
 80136e0:	eb0a 0609 	add.w	r6, sl, r9
 80136e4:	42b3      	cmp	r3, r6
 80136e6:	b085      	sub	sp, #20
 80136e8:	bfb8      	it	lt
 80136ea:	3101      	addlt	r1, #1
 80136ec:	f7ff ff10 	bl	8013510 <_Balloc>
 80136f0:	b930      	cbnz	r0, 8013700 <__multiply+0x44>
 80136f2:	4602      	mov	r2, r0
 80136f4:	4b44      	ldr	r3, [pc, #272]	@ (8013808 <__multiply+0x14c>)
 80136f6:	4845      	ldr	r0, [pc, #276]	@ (801380c <__multiply+0x150>)
 80136f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80136fc:	f000 fdac 	bl	8014258 <__assert_func>
 8013700:	f100 0514 	add.w	r5, r0, #20
 8013704:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013708:	462b      	mov	r3, r5
 801370a:	2200      	movs	r2, #0
 801370c:	4543      	cmp	r3, r8
 801370e:	d321      	bcc.n	8013754 <__multiply+0x98>
 8013710:	f107 0114 	add.w	r1, r7, #20
 8013714:	f104 0214 	add.w	r2, r4, #20
 8013718:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801371c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013720:	9302      	str	r3, [sp, #8]
 8013722:	1b13      	subs	r3, r2, r4
 8013724:	3b15      	subs	r3, #21
 8013726:	f023 0303 	bic.w	r3, r3, #3
 801372a:	3304      	adds	r3, #4
 801372c:	f104 0715 	add.w	r7, r4, #21
 8013730:	42ba      	cmp	r2, r7
 8013732:	bf38      	it	cc
 8013734:	2304      	movcc	r3, #4
 8013736:	9301      	str	r3, [sp, #4]
 8013738:	9b02      	ldr	r3, [sp, #8]
 801373a:	9103      	str	r1, [sp, #12]
 801373c:	428b      	cmp	r3, r1
 801373e:	d80c      	bhi.n	801375a <__multiply+0x9e>
 8013740:	2e00      	cmp	r6, #0
 8013742:	dd03      	ble.n	801374c <__multiply+0x90>
 8013744:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013748:	2b00      	cmp	r3, #0
 801374a:	d05b      	beq.n	8013804 <__multiply+0x148>
 801374c:	6106      	str	r6, [r0, #16]
 801374e:	b005      	add	sp, #20
 8013750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013754:	f843 2b04 	str.w	r2, [r3], #4
 8013758:	e7d8      	b.n	801370c <__multiply+0x50>
 801375a:	f8b1 a000 	ldrh.w	sl, [r1]
 801375e:	f1ba 0f00 	cmp.w	sl, #0
 8013762:	d024      	beq.n	80137ae <__multiply+0xf2>
 8013764:	f104 0e14 	add.w	lr, r4, #20
 8013768:	46a9      	mov	r9, r5
 801376a:	f04f 0c00 	mov.w	ip, #0
 801376e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013772:	f8d9 3000 	ldr.w	r3, [r9]
 8013776:	fa1f fb87 	uxth.w	fp, r7
 801377a:	b29b      	uxth	r3, r3
 801377c:	fb0a 330b 	mla	r3, sl, fp, r3
 8013780:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013784:	f8d9 7000 	ldr.w	r7, [r9]
 8013788:	4463      	add	r3, ip
 801378a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801378e:	fb0a c70b 	mla	r7, sl, fp, ip
 8013792:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013796:	b29b      	uxth	r3, r3
 8013798:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801379c:	4572      	cmp	r2, lr
 801379e:	f849 3b04 	str.w	r3, [r9], #4
 80137a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80137a6:	d8e2      	bhi.n	801376e <__multiply+0xb2>
 80137a8:	9b01      	ldr	r3, [sp, #4]
 80137aa:	f845 c003 	str.w	ip, [r5, r3]
 80137ae:	9b03      	ldr	r3, [sp, #12]
 80137b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80137b4:	3104      	adds	r1, #4
 80137b6:	f1b9 0f00 	cmp.w	r9, #0
 80137ba:	d021      	beq.n	8013800 <__multiply+0x144>
 80137bc:	682b      	ldr	r3, [r5, #0]
 80137be:	f104 0c14 	add.w	ip, r4, #20
 80137c2:	46ae      	mov	lr, r5
 80137c4:	f04f 0a00 	mov.w	sl, #0
 80137c8:	f8bc b000 	ldrh.w	fp, [ip]
 80137cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80137d0:	fb09 770b 	mla	r7, r9, fp, r7
 80137d4:	4457      	add	r7, sl
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80137dc:	f84e 3b04 	str.w	r3, [lr], #4
 80137e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80137e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80137e8:	f8be 3000 	ldrh.w	r3, [lr]
 80137ec:	fb09 330a 	mla	r3, r9, sl, r3
 80137f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80137f4:	4562      	cmp	r2, ip
 80137f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80137fa:	d8e5      	bhi.n	80137c8 <__multiply+0x10c>
 80137fc:	9f01      	ldr	r7, [sp, #4]
 80137fe:	51eb      	str	r3, [r5, r7]
 8013800:	3504      	adds	r5, #4
 8013802:	e799      	b.n	8013738 <__multiply+0x7c>
 8013804:	3e01      	subs	r6, #1
 8013806:	e79b      	b.n	8013740 <__multiply+0x84>
 8013808:	08015df0 	.word	0x08015df0
 801380c:	08015e89 	.word	0x08015e89

08013810 <__pow5mult>:
 8013810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013814:	4615      	mov	r5, r2
 8013816:	f012 0203 	ands.w	r2, r2, #3
 801381a:	4607      	mov	r7, r0
 801381c:	460e      	mov	r6, r1
 801381e:	d007      	beq.n	8013830 <__pow5mult+0x20>
 8013820:	4c1a      	ldr	r4, [pc, #104]	@ (801388c <__pow5mult+0x7c>)
 8013822:	3a01      	subs	r2, #1
 8013824:	2300      	movs	r3, #0
 8013826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801382a:	f7ff fe9f 	bl	801356c <__multadd>
 801382e:	4606      	mov	r6, r0
 8013830:	10ad      	asrs	r5, r5, #2
 8013832:	d027      	beq.n	8013884 <__pow5mult+0x74>
 8013834:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8013836:	b944      	cbnz	r4, 801384a <__pow5mult+0x3a>
 8013838:	f240 2171 	movw	r1, #625	@ 0x271
 801383c:	4638      	mov	r0, r7
 801383e:	f7ff ff27 	bl	8013690 <__i2b>
 8013842:	2300      	movs	r3, #0
 8013844:	6438      	str	r0, [r7, #64]	@ 0x40
 8013846:	4604      	mov	r4, r0
 8013848:	6003      	str	r3, [r0, #0]
 801384a:	f04f 0900 	mov.w	r9, #0
 801384e:	07eb      	lsls	r3, r5, #31
 8013850:	d50a      	bpl.n	8013868 <__pow5mult+0x58>
 8013852:	4631      	mov	r1, r6
 8013854:	4622      	mov	r2, r4
 8013856:	4638      	mov	r0, r7
 8013858:	f7ff ff30 	bl	80136bc <__multiply>
 801385c:	4631      	mov	r1, r6
 801385e:	4680      	mov	r8, r0
 8013860:	4638      	mov	r0, r7
 8013862:	f7ff fe7a 	bl	801355a <_Bfree>
 8013866:	4646      	mov	r6, r8
 8013868:	106d      	asrs	r5, r5, #1
 801386a:	d00b      	beq.n	8013884 <__pow5mult+0x74>
 801386c:	6820      	ldr	r0, [r4, #0]
 801386e:	b938      	cbnz	r0, 8013880 <__pow5mult+0x70>
 8013870:	4622      	mov	r2, r4
 8013872:	4621      	mov	r1, r4
 8013874:	4638      	mov	r0, r7
 8013876:	f7ff ff21 	bl	80136bc <__multiply>
 801387a:	6020      	str	r0, [r4, #0]
 801387c:	f8c0 9000 	str.w	r9, [r0]
 8013880:	4604      	mov	r4, r0
 8013882:	e7e4      	b.n	801384e <__pow5mult+0x3e>
 8013884:	4630      	mov	r0, r6
 8013886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801388a:	bf00      	nop
 801388c:	08015ee4 	.word	0x08015ee4

08013890 <__lshift>:
 8013890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013894:	460c      	mov	r4, r1
 8013896:	6849      	ldr	r1, [r1, #4]
 8013898:	6923      	ldr	r3, [r4, #16]
 801389a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801389e:	68a3      	ldr	r3, [r4, #8]
 80138a0:	4607      	mov	r7, r0
 80138a2:	4691      	mov	r9, r2
 80138a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80138a8:	f108 0601 	add.w	r6, r8, #1
 80138ac:	42b3      	cmp	r3, r6
 80138ae:	db0b      	blt.n	80138c8 <__lshift+0x38>
 80138b0:	4638      	mov	r0, r7
 80138b2:	f7ff fe2d 	bl	8013510 <_Balloc>
 80138b6:	4605      	mov	r5, r0
 80138b8:	b948      	cbnz	r0, 80138ce <__lshift+0x3e>
 80138ba:	4602      	mov	r2, r0
 80138bc:	4b28      	ldr	r3, [pc, #160]	@ (8013960 <__lshift+0xd0>)
 80138be:	4829      	ldr	r0, [pc, #164]	@ (8013964 <__lshift+0xd4>)
 80138c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80138c4:	f000 fcc8 	bl	8014258 <__assert_func>
 80138c8:	3101      	adds	r1, #1
 80138ca:	005b      	lsls	r3, r3, #1
 80138cc:	e7ee      	b.n	80138ac <__lshift+0x1c>
 80138ce:	2300      	movs	r3, #0
 80138d0:	f100 0114 	add.w	r1, r0, #20
 80138d4:	f100 0210 	add.w	r2, r0, #16
 80138d8:	4618      	mov	r0, r3
 80138da:	4553      	cmp	r3, sl
 80138dc:	db33      	blt.n	8013946 <__lshift+0xb6>
 80138de:	6920      	ldr	r0, [r4, #16]
 80138e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80138e4:	f104 0314 	add.w	r3, r4, #20
 80138e8:	f019 091f 	ands.w	r9, r9, #31
 80138ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80138f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80138f4:	d02b      	beq.n	801394e <__lshift+0xbe>
 80138f6:	f1c9 0e20 	rsb	lr, r9, #32
 80138fa:	468a      	mov	sl, r1
 80138fc:	2200      	movs	r2, #0
 80138fe:	6818      	ldr	r0, [r3, #0]
 8013900:	fa00 f009 	lsl.w	r0, r0, r9
 8013904:	4310      	orrs	r0, r2
 8013906:	f84a 0b04 	str.w	r0, [sl], #4
 801390a:	f853 2b04 	ldr.w	r2, [r3], #4
 801390e:	459c      	cmp	ip, r3
 8013910:	fa22 f20e 	lsr.w	r2, r2, lr
 8013914:	d8f3      	bhi.n	80138fe <__lshift+0x6e>
 8013916:	ebac 0304 	sub.w	r3, ip, r4
 801391a:	3b15      	subs	r3, #21
 801391c:	f023 0303 	bic.w	r3, r3, #3
 8013920:	3304      	adds	r3, #4
 8013922:	f104 0015 	add.w	r0, r4, #21
 8013926:	4584      	cmp	ip, r0
 8013928:	bf38      	it	cc
 801392a:	2304      	movcc	r3, #4
 801392c:	50ca      	str	r2, [r1, r3]
 801392e:	b10a      	cbz	r2, 8013934 <__lshift+0xa4>
 8013930:	f108 0602 	add.w	r6, r8, #2
 8013934:	3e01      	subs	r6, #1
 8013936:	4638      	mov	r0, r7
 8013938:	612e      	str	r6, [r5, #16]
 801393a:	4621      	mov	r1, r4
 801393c:	f7ff fe0d 	bl	801355a <_Bfree>
 8013940:	4628      	mov	r0, r5
 8013942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013946:	f842 0f04 	str.w	r0, [r2, #4]!
 801394a:	3301      	adds	r3, #1
 801394c:	e7c5      	b.n	80138da <__lshift+0x4a>
 801394e:	3904      	subs	r1, #4
 8013950:	f853 2b04 	ldr.w	r2, [r3], #4
 8013954:	f841 2f04 	str.w	r2, [r1, #4]!
 8013958:	459c      	cmp	ip, r3
 801395a:	d8f9      	bhi.n	8013950 <__lshift+0xc0>
 801395c:	e7ea      	b.n	8013934 <__lshift+0xa4>
 801395e:	bf00      	nop
 8013960:	08015df0 	.word	0x08015df0
 8013964:	08015e89 	.word	0x08015e89

08013968 <__mcmp>:
 8013968:	690a      	ldr	r2, [r1, #16]
 801396a:	4603      	mov	r3, r0
 801396c:	6900      	ldr	r0, [r0, #16]
 801396e:	1a80      	subs	r0, r0, r2
 8013970:	b530      	push	{r4, r5, lr}
 8013972:	d10e      	bne.n	8013992 <__mcmp+0x2a>
 8013974:	3314      	adds	r3, #20
 8013976:	3114      	adds	r1, #20
 8013978:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801397c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013980:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013984:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013988:	4295      	cmp	r5, r2
 801398a:	d003      	beq.n	8013994 <__mcmp+0x2c>
 801398c:	d205      	bcs.n	801399a <__mcmp+0x32>
 801398e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013992:	bd30      	pop	{r4, r5, pc}
 8013994:	42a3      	cmp	r3, r4
 8013996:	d3f3      	bcc.n	8013980 <__mcmp+0x18>
 8013998:	e7fb      	b.n	8013992 <__mcmp+0x2a>
 801399a:	2001      	movs	r0, #1
 801399c:	e7f9      	b.n	8013992 <__mcmp+0x2a>
	...

080139a0 <__mdiff>:
 80139a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a4:	4689      	mov	r9, r1
 80139a6:	4606      	mov	r6, r0
 80139a8:	4611      	mov	r1, r2
 80139aa:	4648      	mov	r0, r9
 80139ac:	4614      	mov	r4, r2
 80139ae:	f7ff ffdb 	bl	8013968 <__mcmp>
 80139b2:	1e05      	subs	r5, r0, #0
 80139b4:	d112      	bne.n	80139dc <__mdiff+0x3c>
 80139b6:	4629      	mov	r1, r5
 80139b8:	4630      	mov	r0, r6
 80139ba:	f7ff fda9 	bl	8013510 <_Balloc>
 80139be:	4602      	mov	r2, r0
 80139c0:	b928      	cbnz	r0, 80139ce <__mdiff+0x2e>
 80139c2:	4b3f      	ldr	r3, [pc, #252]	@ (8013ac0 <__mdiff+0x120>)
 80139c4:	f240 2137 	movw	r1, #567	@ 0x237
 80139c8:	483e      	ldr	r0, [pc, #248]	@ (8013ac4 <__mdiff+0x124>)
 80139ca:	f000 fc45 	bl	8014258 <__assert_func>
 80139ce:	2301      	movs	r3, #1
 80139d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80139d4:	4610      	mov	r0, r2
 80139d6:	b003      	add	sp, #12
 80139d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139dc:	bfbc      	itt	lt
 80139de:	464b      	movlt	r3, r9
 80139e0:	46a1      	movlt	r9, r4
 80139e2:	4630      	mov	r0, r6
 80139e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80139e8:	bfba      	itte	lt
 80139ea:	461c      	movlt	r4, r3
 80139ec:	2501      	movlt	r5, #1
 80139ee:	2500      	movge	r5, #0
 80139f0:	f7ff fd8e 	bl	8013510 <_Balloc>
 80139f4:	4602      	mov	r2, r0
 80139f6:	b918      	cbnz	r0, 8013a00 <__mdiff+0x60>
 80139f8:	4b31      	ldr	r3, [pc, #196]	@ (8013ac0 <__mdiff+0x120>)
 80139fa:	f240 2145 	movw	r1, #581	@ 0x245
 80139fe:	e7e3      	b.n	80139c8 <__mdiff+0x28>
 8013a00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013a04:	6926      	ldr	r6, [r4, #16]
 8013a06:	60c5      	str	r5, [r0, #12]
 8013a08:	f109 0310 	add.w	r3, r9, #16
 8013a0c:	f109 0514 	add.w	r5, r9, #20
 8013a10:	f104 0e14 	add.w	lr, r4, #20
 8013a14:	f100 0b14 	add.w	fp, r0, #20
 8013a18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013a1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013a20:	9301      	str	r3, [sp, #4]
 8013a22:	46d9      	mov	r9, fp
 8013a24:	f04f 0c00 	mov.w	ip, #0
 8013a28:	9b01      	ldr	r3, [sp, #4]
 8013a2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013a2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013a32:	9301      	str	r3, [sp, #4]
 8013a34:	fa1f f38a 	uxth.w	r3, sl
 8013a38:	4619      	mov	r1, r3
 8013a3a:	b283      	uxth	r3, r0
 8013a3c:	1acb      	subs	r3, r1, r3
 8013a3e:	0c00      	lsrs	r0, r0, #16
 8013a40:	4463      	add	r3, ip
 8013a42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013a46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013a4a:	b29b      	uxth	r3, r3
 8013a4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013a50:	4576      	cmp	r6, lr
 8013a52:	f849 3b04 	str.w	r3, [r9], #4
 8013a56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013a5a:	d8e5      	bhi.n	8013a28 <__mdiff+0x88>
 8013a5c:	1b33      	subs	r3, r6, r4
 8013a5e:	3b15      	subs	r3, #21
 8013a60:	f023 0303 	bic.w	r3, r3, #3
 8013a64:	3415      	adds	r4, #21
 8013a66:	3304      	adds	r3, #4
 8013a68:	42a6      	cmp	r6, r4
 8013a6a:	bf38      	it	cc
 8013a6c:	2304      	movcc	r3, #4
 8013a6e:	441d      	add	r5, r3
 8013a70:	445b      	add	r3, fp
 8013a72:	461e      	mov	r6, r3
 8013a74:	462c      	mov	r4, r5
 8013a76:	4544      	cmp	r4, r8
 8013a78:	d30e      	bcc.n	8013a98 <__mdiff+0xf8>
 8013a7a:	f108 0103 	add.w	r1, r8, #3
 8013a7e:	1b49      	subs	r1, r1, r5
 8013a80:	f021 0103 	bic.w	r1, r1, #3
 8013a84:	3d03      	subs	r5, #3
 8013a86:	45a8      	cmp	r8, r5
 8013a88:	bf38      	it	cc
 8013a8a:	2100      	movcc	r1, #0
 8013a8c:	440b      	add	r3, r1
 8013a8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013a92:	b191      	cbz	r1, 8013aba <__mdiff+0x11a>
 8013a94:	6117      	str	r7, [r2, #16]
 8013a96:	e79d      	b.n	80139d4 <__mdiff+0x34>
 8013a98:	f854 1b04 	ldr.w	r1, [r4], #4
 8013a9c:	46e6      	mov	lr, ip
 8013a9e:	0c08      	lsrs	r0, r1, #16
 8013aa0:	fa1c fc81 	uxtah	ip, ip, r1
 8013aa4:	4471      	add	r1, lr
 8013aa6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013aaa:	b289      	uxth	r1, r1
 8013aac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013ab0:	f846 1b04 	str.w	r1, [r6], #4
 8013ab4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013ab8:	e7dd      	b.n	8013a76 <__mdiff+0xd6>
 8013aba:	3f01      	subs	r7, #1
 8013abc:	e7e7      	b.n	8013a8e <__mdiff+0xee>
 8013abe:	bf00      	nop
 8013ac0:	08015df0 	.word	0x08015df0
 8013ac4:	08015e89 	.word	0x08015e89

08013ac8 <__d2b>:
 8013ac8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013acc:	460f      	mov	r7, r1
 8013ace:	2101      	movs	r1, #1
 8013ad0:	ec59 8b10 	vmov	r8, r9, d0
 8013ad4:	4616      	mov	r6, r2
 8013ad6:	f7ff fd1b 	bl	8013510 <_Balloc>
 8013ada:	4604      	mov	r4, r0
 8013adc:	b930      	cbnz	r0, 8013aec <__d2b+0x24>
 8013ade:	4602      	mov	r2, r0
 8013ae0:	4b23      	ldr	r3, [pc, #140]	@ (8013b70 <__d2b+0xa8>)
 8013ae2:	4824      	ldr	r0, [pc, #144]	@ (8013b74 <__d2b+0xac>)
 8013ae4:	f240 310f 	movw	r1, #783	@ 0x30f
 8013ae8:	f000 fbb6 	bl	8014258 <__assert_func>
 8013aec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013af0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013af4:	b10d      	cbz	r5, 8013afa <__d2b+0x32>
 8013af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013afa:	9301      	str	r3, [sp, #4]
 8013afc:	f1b8 0300 	subs.w	r3, r8, #0
 8013b00:	d023      	beq.n	8013b4a <__d2b+0x82>
 8013b02:	4668      	mov	r0, sp
 8013b04:	9300      	str	r3, [sp, #0]
 8013b06:	f7ff fd96 	bl	8013636 <__lo0bits>
 8013b0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013b0e:	b1d0      	cbz	r0, 8013b46 <__d2b+0x7e>
 8013b10:	f1c0 0320 	rsb	r3, r0, #32
 8013b14:	fa02 f303 	lsl.w	r3, r2, r3
 8013b18:	430b      	orrs	r3, r1
 8013b1a:	40c2      	lsrs	r2, r0
 8013b1c:	6163      	str	r3, [r4, #20]
 8013b1e:	9201      	str	r2, [sp, #4]
 8013b20:	9b01      	ldr	r3, [sp, #4]
 8013b22:	61a3      	str	r3, [r4, #24]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	bf0c      	ite	eq
 8013b28:	2201      	moveq	r2, #1
 8013b2a:	2202      	movne	r2, #2
 8013b2c:	6122      	str	r2, [r4, #16]
 8013b2e:	b1a5      	cbz	r5, 8013b5a <__d2b+0x92>
 8013b30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013b34:	4405      	add	r5, r0
 8013b36:	603d      	str	r5, [r7, #0]
 8013b38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013b3c:	6030      	str	r0, [r6, #0]
 8013b3e:	4620      	mov	r0, r4
 8013b40:	b003      	add	sp, #12
 8013b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b46:	6161      	str	r1, [r4, #20]
 8013b48:	e7ea      	b.n	8013b20 <__d2b+0x58>
 8013b4a:	a801      	add	r0, sp, #4
 8013b4c:	f7ff fd73 	bl	8013636 <__lo0bits>
 8013b50:	9b01      	ldr	r3, [sp, #4]
 8013b52:	6163      	str	r3, [r4, #20]
 8013b54:	3020      	adds	r0, #32
 8013b56:	2201      	movs	r2, #1
 8013b58:	e7e8      	b.n	8013b2c <__d2b+0x64>
 8013b5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013b5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013b62:	6038      	str	r0, [r7, #0]
 8013b64:	6918      	ldr	r0, [r3, #16]
 8013b66:	f7ff fd47 	bl	80135f8 <__hi0bits>
 8013b6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013b6e:	e7e5      	b.n	8013b3c <__d2b+0x74>
 8013b70:	08015df0 	.word	0x08015df0
 8013b74:	08015e89 	.word	0x08015e89

08013b78 <_fclose_r>:
 8013b78:	b570      	push	{r4, r5, r6, lr}
 8013b7a:	4605      	mov	r5, r0
 8013b7c:	460c      	mov	r4, r1
 8013b7e:	b1b1      	cbz	r1, 8013bae <_fclose_r+0x36>
 8013b80:	b118      	cbz	r0, 8013b8a <_fclose_r+0x12>
 8013b82:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013b84:	b90b      	cbnz	r3, 8013b8a <_fclose_r+0x12>
 8013b86:	f7fc fe8b 	bl	80108a0 <__sinit>
 8013b8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013b8c:	07de      	lsls	r6, r3, #31
 8013b8e:	d405      	bmi.n	8013b9c <_fclose_r+0x24>
 8013b90:	89a3      	ldrh	r3, [r4, #12]
 8013b92:	0598      	lsls	r0, r3, #22
 8013b94:	d402      	bmi.n	8013b9c <_fclose_r+0x24>
 8013b96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013b98:	f7fd f930 	bl	8010dfc <__retarget_lock_acquire_recursive>
 8013b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ba0:	b943      	cbnz	r3, 8013bb4 <_fclose_r+0x3c>
 8013ba2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013ba4:	07d9      	lsls	r1, r3, #31
 8013ba6:	d402      	bmi.n	8013bae <_fclose_r+0x36>
 8013ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013baa:	f7fd f928 	bl	8010dfe <__retarget_lock_release_recursive>
 8013bae:	2600      	movs	r6, #0
 8013bb0:	4630      	mov	r0, r6
 8013bb2:	bd70      	pop	{r4, r5, r6, pc}
 8013bb4:	4621      	mov	r1, r4
 8013bb6:	4628      	mov	r0, r5
 8013bb8:	f7fc fd18 	bl	80105ec <__sflush_r>
 8013bbc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013bbe:	4606      	mov	r6, r0
 8013bc0:	b133      	cbz	r3, 8013bd0 <_fclose_r+0x58>
 8013bc2:	69e1      	ldr	r1, [r4, #28]
 8013bc4:	4628      	mov	r0, r5
 8013bc6:	4798      	blx	r3
 8013bc8:	2800      	cmp	r0, #0
 8013bca:	bfb8      	it	lt
 8013bcc:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8013bd0:	89a3      	ldrh	r3, [r4, #12]
 8013bd2:	061a      	lsls	r2, r3, #24
 8013bd4:	d503      	bpl.n	8013bde <_fclose_r+0x66>
 8013bd6:	6921      	ldr	r1, [r4, #16]
 8013bd8:	4628      	mov	r0, r5
 8013bda:	f7fd ff99 	bl	8011b10 <_free_r>
 8013bde:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013be0:	b141      	cbz	r1, 8013bf4 <_fclose_r+0x7c>
 8013be2:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8013be6:	4299      	cmp	r1, r3
 8013be8:	d002      	beq.n	8013bf0 <_fclose_r+0x78>
 8013bea:	4628      	mov	r0, r5
 8013bec:	f7fd ff90 	bl	8011b10 <_free_r>
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	6323      	str	r3, [r4, #48]	@ 0x30
 8013bf4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013bf6:	b121      	cbz	r1, 8013c02 <_fclose_r+0x8a>
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	f7fd ff89 	bl	8011b10 <_free_r>
 8013bfe:	2300      	movs	r3, #0
 8013c00:	6463      	str	r3, [r4, #68]	@ 0x44
 8013c02:	f7fc fe41 	bl	8010888 <__sfp_lock_acquire>
 8013c06:	2300      	movs	r3, #0
 8013c08:	81a3      	strh	r3, [r4, #12]
 8013c0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013c0c:	07db      	lsls	r3, r3, #31
 8013c0e:	d402      	bmi.n	8013c16 <_fclose_r+0x9e>
 8013c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013c12:	f7fd f8f4 	bl	8010dfe <__retarget_lock_release_recursive>
 8013c16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013c18:	f7fd f8ef 	bl	8010dfa <__retarget_lock_close_recursive>
 8013c1c:	f7fc fe3a 	bl	8010894 <__sfp_lock_release>
 8013c20:	e7c6      	b.n	8013bb0 <_fclose_r+0x38>
	...

08013c24 <_realloc_r>:
 8013c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c28:	4682      	mov	sl, r0
 8013c2a:	4693      	mov	fp, r2
 8013c2c:	460c      	mov	r4, r1
 8013c2e:	b929      	cbnz	r1, 8013c3c <_realloc_r+0x18>
 8013c30:	4611      	mov	r1, r2
 8013c32:	b003      	add	sp, #12
 8013c34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c38:	f7fe b82a 	b.w	8011c90 <_malloc_r>
 8013c3c:	f7ff fc5c 	bl	80134f8 <__malloc_lock>
 8013c40:	f10b 080b 	add.w	r8, fp, #11
 8013c44:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8013c48:	f1b8 0f16 	cmp.w	r8, #22
 8013c4c:	f1a4 0908 	sub.w	r9, r4, #8
 8013c50:	f025 0603 	bic.w	r6, r5, #3
 8013c54:	d908      	bls.n	8013c68 <_realloc_r+0x44>
 8013c56:	f038 0807 	bics.w	r8, r8, #7
 8013c5a:	d507      	bpl.n	8013c6c <_realloc_r+0x48>
 8013c5c:	230c      	movs	r3, #12
 8013c5e:	f8ca 3000 	str.w	r3, [sl]
 8013c62:	f04f 0b00 	mov.w	fp, #0
 8013c66:	e032      	b.n	8013cce <_realloc_r+0xaa>
 8013c68:	f04f 0810 	mov.w	r8, #16
 8013c6c:	45c3      	cmp	fp, r8
 8013c6e:	d8f5      	bhi.n	8013c5c <_realloc_r+0x38>
 8013c70:	4546      	cmp	r6, r8
 8013c72:	f280 8174 	bge.w	8013f5e <_realloc_r+0x33a>
 8013c76:	4b9e      	ldr	r3, [pc, #632]	@ (8013ef0 <_realloc_r+0x2cc>)
 8013c78:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8013c7c:	eb09 0106 	add.w	r1, r9, r6
 8013c80:	458c      	cmp	ip, r1
 8013c82:	6848      	ldr	r0, [r1, #4]
 8013c84:	d005      	beq.n	8013c92 <_realloc_r+0x6e>
 8013c86:	f020 0201 	bic.w	r2, r0, #1
 8013c8a:	440a      	add	r2, r1
 8013c8c:	6852      	ldr	r2, [r2, #4]
 8013c8e:	07d7      	lsls	r7, r2, #31
 8013c90:	d449      	bmi.n	8013d26 <_realloc_r+0x102>
 8013c92:	f020 0003 	bic.w	r0, r0, #3
 8013c96:	458c      	cmp	ip, r1
 8013c98:	eb06 0700 	add.w	r7, r6, r0
 8013c9c:	d11b      	bne.n	8013cd6 <_realloc_r+0xb2>
 8013c9e:	f108 0210 	add.w	r2, r8, #16
 8013ca2:	42ba      	cmp	r2, r7
 8013ca4:	dc41      	bgt.n	8013d2a <_realloc_r+0x106>
 8013ca6:	eb09 0208 	add.w	r2, r9, r8
 8013caa:	eba7 0708 	sub.w	r7, r7, r8
 8013cae:	f047 0701 	orr.w	r7, r7, #1
 8013cb2:	609a      	str	r2, [r3, #8]
 8013cb4:	6057      	str	r7, [r2, #4]
 8013cb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013cba:	f003 0301 	and.w	r3, r3, #1
 8013cbe:	ea43 0308 	orr.w	r3, r3, r8
 8013cc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8013cc6:	4650      	mov	r0, sl
 8013cc8:	f7ff fc1c 	bl	8013504 <__malloc_unlock>
 8013ccc:	46a3      	mov	fp, r4
 8013cce:	4658      	mov	r0, fp
 8013cd0:	b003      	add	sp, #12
 8013cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cd6:	45b8      	cmp	r8, r7
 8013cd8:	dc27      	bgt.n	8013d2a <_realloc_r+0x106>
 8013cda:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8013cde:	60d3      	str	r3, [r2, #12]
 8013ce0:	609a      	str	r2, [r3, #8]
 8013ce2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013ce6:	eba7 0008 	sub.w	r0, r7, r8
 8013cea:	280f      	cmp	r0, #15
 8013cec:	f003 0301 	and.w	r3, r3, #1
 8013cf0:	eb09 0207 	add.w	r2, r9, r7
 8013cf4:	f240 8135 	bls.w	8013f62 <_realloc_r+0x33e>
 8013cf8:	eb09 0108 	add.w	r1, r9, r8
 8013cfc:	ea48 0303 	orr.w	r3, r8, r3
 8013d00:	f040 0001 	orr.w	r0, r0, #1
 8013d04:	f8c9 3004 	str.w	r3, [r9, #4]
 8013d08:	6048      	str	r0, [r1, #4]
 8013d0a:	6853      	ldr	r3, [r2, #4]
 8013d0c:	f043 0301 	orr.w	r3, r3, #1
 8013d10:	6053      	str	r3, [r2, #4]
 8013d12:	3108      	adds	r1, #8
 8013d14:	4650      	mov	r0, sl
 8013d16:	f7fd fefb 	bl	8011b10 <_free_r>
 8013d1a:	4650      	mov	r0, sl
 8013d1c:	f7ff fbf2 	bl	8013504 <__malloc_unlock>
 8013d20:	f109 0b08 	add.w	fp, r9, #8
 8013d24:	e7d3      	b.n	8013cce <_realloc_r+0xaa>
 8013d26:	2000      	movs	r0, #0
 8013d28:	4601      	mov	r1, r0
 8013d2a:	07ea      	lsls	r2, r5, #31
 8013d2c:	f100 80c7 	bmi.w	8013ebe <_realloc_r+0x29a>
 8013d30:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8013d34:	eba9 0505 	sub.w	r5, r9, r5
 8013d38:	686a      	ldr	r2, [r5, #4]
 8013d3a:	f022 0203 	bic.w	r2, r2, #3
 8013d3e:	4432      	add	r2, r6
 8013d40:	9201      	str	r2, [sp, #4]
 8013d42:	2900      	cmp	r1, #0
 8013d44:	f000 8086 	beq.w	8013e54 <_realloc_r+0x230>
 8013d48:	458c      	cmp	ip, r1
 8013d4a:	eb00 0702 	add.w	r7, r0, r2
 8013d4e:	d149      	bne.n	8013de4 <_realloc_r+0x1c0>
 8013d50:	f108 0210 	add.w	r2, r8, #16
 8013d54:	42ba      	cmp	r2, r7
 8013d56:	dc7d      	bgt.n	8013e54 <_realloc_r+0x230>
 8013d58:	46ab      	mov	fp, r5
 8013d5a:	68ea      	ldr	r2, [r5, #12]
 8013d5c:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8013d60:	60ca      	str	r2, [r1, #12]
 8013d62:	6091      	str	r1, [r2, #8]
 8013d64:	1f32      	subs	r2, r6, #4
 8013d66:	2a24      	cmp	r2, #36	@ 0x24
 8013d68:	d836      	bhi.n	8013dd8 <_realloc_r+0x1b4>
 8013d6a:	2a13      	cmp	r2, #19
 8013d6c:	d932      	bls.n	8013dd4 <_realloc_r+0x1b0>
 8013d6e:	6821      	ldr	r1, [r4, #0]
 8013d70:	60a9      	str	r1, [r5, #8]
 8013d72:	6861      	ldr	r1, [r4, #4]
 8013d74:	60e9      	str	r1, [r5, #12]
 8013d76:	2a1b      	cmp	r2, #27
 8013d78:	d81a      	bhi.n	8013db0 <_realloc_r+0x18c>
 8013d7a:	3408      	adds	r4, #8
 8013d7c:	f105 0210 	add.w	r2, r5, #16
 8013d80:	6821      	ldr	r1, [r4, #0]
 8013d82:	6011      	str	r1, [r2, #0]
 8013d84:	6861      	ldr	r1, [r4, #4]
 8013d86:	6051      	str	r1, [r2, #4]
 8013d88:	68a1      	ldr	r1, [r4, #8]
 8013d8a:	6091      	str	r1, [r2, #8]
 8013d8c:	eb05 0208 	add.w	r2, r5, r8
 8013d90:	eba7 0708 	sub.w	r7, r7, r8
 8013d94:	f047 0701 	orr.w	r7, r7, #1
 8013d98:	609a      	str	r2, [r3, #8]
 8013d9a:	6057      	str	r7, [r2, #4]
 8013d9c:	686b      	ldr	r3, [r5, #4]
 8013d9e:	f003 0301 	and.w	r3, r3, #1
 8013da2:	ea43 0308 	orr.w	r3, r3, r8
 8013da6:	606b      	str	r3, [r5, #4]
 8013da8:	4650      	mov	r0, sl
 8013daa:	f7ff fbab 	bl	8013504 <__malloc_unlock>
 8013dae:	e78e      	b.n	8013cce <_realloc_r+0xaa>
 8013db0:	68a1      	ldr	r1, [r4, #8]
 8013db2:	6129      	str	r1, [r5, #16]
 8013db4:	68e1      	ldr	r1, [r4, #12]
 8013db6:	6169      	str	r1, [r5, #20]
 8013db8:	2a24      	cmp	r2, #36	@ 0x24
 8013dba:	bf01      	itttt	eq
 8013dbc:	6922      	ldreq	r2, [r4, #16]
 8013dbe:	61aa      	streq	r2, [r5, #24]
 8013dc0:	6961      	ldreq	r1, [r4, #20]
 8013dc2:	61e9      	streq	r1, [r5, #28]
 8013dc4:	bf19      	ittee	ne
 8013dc6:	3410      	addne	r4, #16
 8013dc8:	f105 0218 	addne.w	r2, r5, #24
 8013dcc:	f105 0220 	addeq.w	r2, r5, #32
 8013dd0:	3418      	addeq	r4, #24
 8013dd2:	e7d5      	b.n	8013d80 <_realloc_r+0x15c>
 8013dd4:	465a      	mov	r2, fp
 8013dd6:	e7d3      	b.n	8013d80 <_realloc_r+0x15c>
 8013dd8:	4621      	mov	r1, r4
 8013dda:	4658      	mov	r0, fp
 8013ddc:	f7fc ffa2 	bl	8010d24 <memmove>
 8013de0:	4b43      	ldr	r3, [pc, #268]	@ (8013ef0 <_realloc_r+0x2cc>)
 8013de2:	e7d3      	b.n	8013d8c <_realloc_r+0x168>
 8013de4:	45b8      	cmp	r8, r7
 8013de6:	dc35      	bgt.n	8013e54 <_realloc_r+0x230>
 8013de8:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8013dec:	4628      	mov	r0, r5
 8013dee:	60d3      	str	r3, [r2, #12]
 8013df0:	609a      	str	r2, [r3, #8]
 8013df2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8013df6:	68eb      	ldr	r3, [r5, #12]
 8013df8:	60d3      	str	r3, [r2, #12]
 8013dfa:	609a      	str	r2, [r3, #8]
 8013dfc:	1f32      	subs	r2, r6, #4
 8013dfe:	2a24      	cmp	r2, #36	@ 0x24
 8013e00:	d824      	bhi.n	8013e4c <_realloc_r+0x228>
 8013e02:	2a13      	cmp	r2, #19
 8013e04:	d908      	bls.n	8013e18 <_realloc_r+0x1f4>
 8013e06:	6823      	ldr	r3, [r4, #0]
 8013e08:	60ab      	str	r3, [r5, #8]
 8013e0a:	6863      	ldr	r3, [r4, #4]
 8013e0c:	60eb      	str	r3, [r5, #12]
 8013e0e:	2a1b      	cmp	r2, #27
 8013e10:	d80a      	bhi.n	8013e28 <_realloc_r+0x204>
 8013e12:	3408      	adds	r4, #8
 8013e14:	f105 0010 	add.w	r0, r5, #16
 8013e18:	6823      	ldr	r3, [r4, #0]
 8013e1a:	6003      	str	r3, [r0, #0]
 8013e1c:	6863      	ldr	r3, [r4, #4]
 8013e1e:	6043      	str	r3, [r0, #4]
 8013e20:	68a3      	ldr	r3, [r4, #8]
 8013e22:	6083      	str	r3, [r0, #8]
 8013e24:	46a9      	mov	r9, r5
 8013e26:	e75c      	b.n	8013ce2 <_realloc_r+0xbe>
 8013e28:	68a3      	ldr	r3, [r4, #8]
 8013e2a:	612b      	str	r3, [r5, #16]
 8013e2c:	68e3      	ldr	r3, [r4, #12]
 8013e2e:	616b      	str	r3, [r5, #20]
 8013e30:	2a24      	cmp	r2, #36	@ 0x24
 8013e32:	bf01      	itttt	eq
 8013e34:	6923      	ldreq	r3, [r4, #16]
 8013e36:	61ab      	streq	r3, [r5, #24]
 8013e38:	6963      	ldreq	r3, [r4, #20]
 8013e3a:	61eb      	streq	r3, [r5, #28]
 8013e3c:	bf19      	ittee	ne
 8013e3e:	3410      	addne	r4, #16
 8013e40:	f105 0018 	addne.w	r0, r5, #24
 8013e44:	f105 0020 	addeq.w	r0, r5, #32
 8013e48:	3418      	addeq	r4, #24
 8013e4a:	e7e5      	b.n	8013e18 <_realloc_r+0x1f4>
 8013e4c:	4621      	mov	r1, r4
 8013e4e:	f7fc ff69 	bl	8010d24 <memmove>
 8013e52:	e7e7      	b.n	8013e24 <_realloc_r+0x200>
 8013e54:	9b01      	ldr	r3, [sp, #4]
 8013e56:	4598      	cmp	r8, r3
 8013e58:	dc31      	bgt.n	8013ebe <_realloc_r+0x29a>
 8013e5a:	4628      	mov	r0, r5
 8013e5c:	68eb      	ldr	r3, [r5, #12]
 8013e5e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8013e62:	60d3      	str	r3, [r2, #12]
 8013e64:	609a      	str	r2, [r3, #8]
 8013e66:	1f32      	subs	r2, r6, #4
 8013e68:	2a24      	cmp	r2, #36	@ 0x24
 8013e6a:	d824      	bhi.n	8013eb6 <_realloc_r+0x292>
 8013e6c:	2a13      	cmp	r2, #19
 8013e6e:	d908      	bls.n	8013e82 <_realloc_r+0x25e>
 8013e70:	6823      	ldr	r3, [r4, #0]
 8013e72:	60ab      	str	r3, [r5, #8]
 8013e74:	6863      	ldr	r3, [r4, #4]
 8013e76:	60eb      	str	r3, [r5, #12]
 8013e78:	2a1b      	cmp	r2, #27
 8013e7a:	d80a      	bhi.n	8013e92 <_realloc_r+0x26e>
 8013e7c:	3408      	adds	r4, #8
 8013e7e:	f105 0010 	add.w	r0, r5, #16
 8013e82:	6823      	ldr	r3, [r4, #0]
 8013e84:	6003      	str	r3, [r0, #0]
 8013e86:	6863      	ldr	r3, [r4, #4]
 8013e88:	6043      	str	r3, [r0, #4]
 8013e8a:	68a3      	ldr	r3, [r4, #8]
 8013e8c:	6083      	str	r3, [r0, #8]
 8013e8e:	9f01      	ldr	r7, [sp, #4]
 8013e90:	e7c8      	b.n	8013e24 <_realloc_r+0x200>
 8013e92:	68a3      	ldr	r3, [r4, #8]
 8013e94:	612b      	str	r3, [r5, #16]
 8013e96:	68e3      	ldr	r3, [r4, #12]
 8013e98:	616b      	str	r3, [r5, #20]
 8013e9a:	2a24      	cmp	r2, #36	@ 0x24
 8013e9c:	bf01      	itttt	eq
 8013e9e:	6923      	ldreq	r3, [r4, #16]
 8013ea0:	61ab      	streq	r3, [r5, #24]
 8013ea2:	6963      	ldreq	r3, [r4, #20]
 8013ea4:	61eb      	streq	r3, [r5, #28]
 8013ea6:	bf19      	ittee	ne
 8013ea8:	3410      	addne	r4, #16
 8013eaa:	f105 0018 	addne.w	r0, r5, #24
 8013eae:	f105 0020 	addeq.w	r0, r5, #32
 8013eb2:	3418      	addeq	r4, #24
 8013eb4:	e7e5      	b.n	8013e82 <_realloc_r+0x25e>
 8013eb6:	4621      	mov	r1, r4
 8013eb8:	f7fc ff34 	bl	8010d24 <memmove>
 8013ebc:	e7e7      	b.n	8013e8e <_realloc_r+0x26a>
 8013ebe:	4659      	mov	r1, fp
 8013ec0:	4650      	mov	r0, sl
 8013ec2:	f7fd fee5 	bl	8011c90 <_malloc_r>
 8013ec6:	4683      	mov	fp, r0
 8013ec8:	b918      	cbnz	r0, 8013ed2 <_realloc_r+0x2ae>
 8013eca:	4650      	mov	r0, sl
 8013ecc:	f7ff fb1a 	bl	8013504 <__malloc_unlock>
 8013ed0:	e6c7      	b.n	8013c62 <_realloc_r+0x3e>
 8013ed2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013ed6:	f023 0301 	bic.w	r3, r3, #1
 8013eda:	444b      	add	r3, r9
 8013edc:	f1a0 0208 	sub.w	r2, r0, #8
 8013ee0:	4293      	cmp	r3, r2
 8013ee2:	d107      	bne.n	8013ef4 <_realloc_r+0x2d0>
 8013ee4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8013ee8:	f027 0703 	bic.w	r7, r7, #3
 8013eec:	4437      	add	r7, r6
 8013eee:	e6f8      	b.n	8013ce2 <_realloc_r+0xbe>
 8013ef0:	240002bc 	.word	0x240002bc
 8013ef4:	1f32      	subs	r2, r6, #4
 8013ef6:	2a24      	cmp	r2, #36	@ 0x24
 8013ef8:	d82d      	bhi.n	8013f56 <_realloc_r+0x332>
 8013efa:	2a13      	cmp	r2, #19
 8013efc:	d928      	bls.n	8013f50 <_realloc_r+0x32c>
 8013efe:	6823      	ldr	r3, [r4, #0]
 8013f00:	6003      	str	r3, [r0, #0]
 8013f02:	6863      	ldr	r3, [r4, #4]
 8013f04:	6043      	str	r3, [r0, #4]
 8013f06:	2a1b      	cmp	r2, #27
 8013f08:	d80e      	bhi.n	8013f28 <_realloc_r+0x304>
 8013f0a:	f104 0208 	add.w	r2, r4, #8
 8013f0e:	f100 0308 	add.w	r3, r0, #8
 8013f12:	6811      	ldr	r1, [r2, #0]
 8013f14:	6019      	str	r1, [r3, #0]
 8013f16:	6851      	ldr	r1, [r2, #4]
 8013f18:	6059      	str	r1, [r3, #4]
 8013f1a:	6892      	ldr	r2, [r2, #8]
 8013f1c:	609a      	str	r2, [r3, #8]
 8013f1e:	4621      	mov	r1, r4
 8013f20:	4650      	mov	r0, sl
 8013f22:	f7fd fdf5 	bl	8011b10 <_free_r>
 8013f26:	e73f      	b.n	8013da8 <_realloc_r+0x184>
 8013f28:	68a3      	ldr	r3, [r4, #8]
 8013f2a:	6083      	str	r3, [r0, #8]
 8013f2c:	68e3      	ldr	r3, [r4, #12]
 8013f2e:	60c3      	str	r3, [r0, #12]
 8013f30:	2a24      	cmp	r2, #36	@ 0x24
 8013f32:	bf01      	itttt	eq
 8013f34:	6923      	ldreq	r3, [r4, #16]
 8013f36:	6103      	streq	r3, [r0, #16]
 8013f38:	6961      	ldreq	r1, [r4, #20]
 8013f3a:	6141      	streq	r1, [r0, #20]
 8013f3c:	bf19      	ittee	ne
 8013f3e:	f104 0210 	addne.w	r2, r4, #16
 8013f42:	f100 0310 	addne.w	r3, r0, #16
 8013f46:	f104 0218 	addeq.w	r2, r4, #24
 8013f4a:	f100 0318 	addeq.w	r3, r0, #24
 8013f4e:	e7e0      	b.n	8013f12 <_realloc_r+0x2ee>
 8013f50:	4603      	mov	r3, r0
 8013f52:	4622      	mov	r2, r4
 8013f54:	e7dd      	b.n	8013f12 <_realloc_r+0x2ee>
 8013f56:	4621      	mov	r1, r4
 8013f58:	f7fc fee4 	bl	8010d24 <memmove>
 8013f5c:	e7df      	b.n	8013f1e <_realloc_r+0x2fa>
 8013f5e:	4637      	mov	r7, r6
 8013f60:	e6bf      	b.n	8013ce2 <_realloc_r+0xbe>
 8013f62:	431f      	orrs	r7, r3
 8013f64:	f8c9 7004 	str.w	r7, [r9, #4]
 8013f68:	6853      	ldr	r3, [r2, #4]
 8013f6a:	f043 0301 	orr.w	r3, r3, #1
 8013f6e:	6053      	str	r3, [r2, #4]
 8013f70:	e6d3      	b.n	8013d1a <_realloc_r+0xf6>
 8013f72:	bf00      	nop

08013f74 <__sread>:
 8013f74:	b510      	push	{r4, lr}
 8013f76:	460c      	mov	r4, r1
 8013f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f7c:	f000 f8d8 	bl	8014130 <_read_r>
 8013f80:	2800      	cmp	r0, #0
 8013f82:	bfab      	itete	ge
 8013f84:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8013f86:	89a3      	ldrhlt	r3, [r4, #12]
 8013f88:	181b      	addge	r3, r3, r0
 8013f8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013f8e:	bfac      	ite	ge
 8013f90:	6523      	strge	r3, [r4, #80]	@ 0x50
 8013f92:	81a3      	strhlt	r3, [r4, #12]
 8013f94:	bd10      	pop	{r4, pc}

08013f96 <__swrite>:
 8013f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f9a:	461f      	mov	r7, r3
 8013f9c:	898b      	ldrh	r3, [r1, #12]
 8013f9e:	05db      	lsls	r3, r3, #23
 8013fa0:	4605      	mov	r5, r0
 8013fa2:	460c      	mov	r4, r1
 8013fa4:	4616      	mov	r6, r2
 8013fa6:	d505      	bpl.n	8013fb4 <__swrite+0x1e>
 8013fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fac:	2302      	movs	r3, #2
 8013fae:	2200      	movs	r2, #0
 8013fb0:	f000 f8ac 	bl	801410c <_lseek_r>
 8013fb4:	89a3      	ldrh	r3, [r4, #12]
 8013fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013fba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013fbe:	81a3      	strh	r3, [r4, #12]
 8013fc0:	4632      	mov	r2, r6
 8013fc2:	463b      	mov	r3, r7
 8013fc4:	4628      	mov	r0, r5
 8013fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fca:	f000 b8d3 	b.w	8014174 <_write_r>

08013fce <__sseek>:
 8013fce:	b510      	push	{r4, lr}
 8013fd0:	460c      	mov	r4, r1
 8013fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fd6:	f000 f899 	bl	801410c <_lseek_r>
 8013fda:	1c43      	adds	r3, r0, #1
 8013fdc:	89a3      	ldrh	r3, [r4, #12]
 8013fde:	bf15      	itete	ne
 8013fe0:	6520      	strne	r0, [r4, #80]	@ 0x50
 8013fe2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013fe6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013fea:	81a3      	strheq	r3, [r4, #12]
 8013fec:	bf18      	it	ne
 8013fee:	81a3      	strhne	r3, [r4, #12]
 8013ff0:	bd10      	pop	{r4, pc}

08013ff2 <__sclose>:
 8013ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ff6:	f000 b857 	b.w	80140a8 <_close_r>

08013ffa <__ascii_wctomb>:
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	4608      	mov	r0, r1
 8013ffe:	b141      	cbz	r1, 8014012 <__ascii_wctomb+0x18>
 8014000:	2aff      	cmp	r2, #255	@ 0xff
 8014002:	d904      	bls.n	801400e <__ascii_wctomb+0x14>
 8014004:	228a      	movs	r2, #138	@ 0x8a
 8014006:	601a      	str	r2, [r3, #0]
 8014008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801400c:	4770      	bx	lr
 801400e:	700a      	strb	r2, [r1, #0]
 8014010:	2001      	movs	r0, #1
 8014012:	4770      	bx	lr

08014014 <__swbuf_r>:
 8014014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014016:	460e      	mov	r6, r1
 8014018:	4614      	mov	r4, r2
 801401a:	4605      	mov	r5, r0
 801401c:	b118      	cbz	r0, 8014026 <__swbuf_r+0x12>
 801401e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014020:	b90b      	cbnz	r3, 8014026 <__swbuf_r+0x12>
 8014022:	f7fc fc3d 	bl	80108a0 <__sinit>
 8014026:	69a3      	ldr	r3, [r4, #24]
 8014028:	60a3      	str	r3, [r4, #8]
 801402a:	89a3      	ldrh	r3, [r4, #12]
 801402c:	0719      	lsls	r1, r3, #28
 801402e:	d501      	bpl.n	8014034 <__swbuf_r+0x20>
 8014030:	6923      	ldr	r3, [r4, #16]
 8014032:	b943      	cbnz	r3, 8014046 <__swbuf_r+0x32>
 8014034:	4621      	mov	r1, r4
 8014036:	4628      	mov	r0, r5
 8014038:	f7fc fdb4 	bl	8010ba4 <__swsetup_r>
 801403c:	b118      	cbz	r0, 8014046 <__swbuf_r+0x32>
 801403e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014042:	4638      	mov	r0, r7
 8014044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801404a:	b2f6      	uxtb	r6, r6
 801404c:	049a      	lsls	r2, r3, #18
 801404e:	4637      	mov	r7, r6
 8014050:	d406      	bmi.n	8014060 <__swbuf_r+0x4c>
 8014052:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014056:	81a3      	strh	r3, [r4, #12]
 8014058:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801405a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801405e:	6663      	str	r3, [r4, #100]	@ 0x64
 8014060:	6823      	ldr	r3, [r4, #0]
 8014062:	6922      	ldr	r2, [r4, #16]
 8014064:	1a98      	subs	r0, r3, r2
 8014066:	6963      	ldr	r3, [r4, #20]
 8014068:	4283      	cmp	r3, r0
 801406a:	dc05      	bgt.n	8014078 <__swbuf_r+0x64>
 801406c:	4621      	mov	r1, r4
 801406e:	4628      	mov	r0, r5
 8014070:	f7fc fb44 	bl	80106fc <_fflush_r>
 8014074:	2800      	cmp	r0, #0
 8014076:	d1e2      	bne.n	801403e <__swbuf_r+0x2a>
 8014078:	68a3      	ldr	r3, [r4, #8]
 801407a:	3b01      	subs	r3, #1
 801407c:	60a3      	str	r3, [r4, #8]
 801407e:	6823      	ldr	r3, [r4, #0]
 8014080:	1c5a      	adds	r2, r3, #1
 8014082:	6022      	str	r2, [r4, #0]
 8014084:	701e      	strb	r6, [r3, #0]
 8014086:	6962      	ldr	r2, [r4, #20]
 8014088:	1c43      	adds	r3, r0, #1
 801408a:	429a      	cmp	r2, r3
 801408c:	d004      	beq.n	8014098 <__swbuf_r+0x84>
 801408e:	89a3      	ldrh	r3, [r4, #12]
 8014090:	07db      	lsls	r3, r3, #31
 8014092:	d5d6      	bpl.n	8014042 <__swbuf_r+0x2e>
 8014094:	2e0a      	cmp	r6, #10
 8014096:	d1d4      	bne.n	8014042 <__swbuf_r+0x2e>
 8014098:	4621      	mov	r1, r4
 801409a:	4628      	mov	r0, r5
 801409c:	f7fc fb2e 	bl	80106fc <_fflush_r>
 80140a0:	2800      	cmp	r0, #0
 80140a2:	d0ce      	beq.n	8014042 <__swbuf_r+0x2e>
 80140a4:	e7cb      	b.n	801403e <__swbuf_r+0x2a>
	...

080140a8 <_close_r>:
 80140a8:	b538      	push	{r3, r4, r5, lr}
 80140aa:	4d06      	ldr	r5, [pc, #24]	@ (80140c4 <_close_r+0x1c>)
 80140ac:	2300      	movs	r3, #0
 80140ae:	4604      	mov	r4, r0
 80140b0:	4608      	mov	r0, r1
 80140b2:	602b      	str	r3, [r5, #0]
 80140b4:	f7ee ff3c 	bl	8002f30 <_close>
 80140b8:	1c43      	adds	r3, r0, #1
 80140ba:	d102      	bne.n	80140c2 <_close_r+0x1a>
 80140bc:	682b      	ldr	r3, [r5, #0]
 80140be:	b103      	cbz	r3, 80140c2 <_close_r+0x1a>
 80140c0:	6023      	str	r3, [r4, #0]
 80140c2:	bd38      	pop	{r3, r4, r5, pc}
 80140c4:	24024d98 	.word	0x24024d98

080140c8 <_fstat_r>:
 80140c8:	b538      	push	{r3, r4, r5, lr}
 80140ca:	4d07      	ldr	r5, [pc, #28]	@ (80140e8 <_fstat_r+0x20>)
 80140cc:	2300      	movs	r3, #0
 80140ce:	4604      	mov	r4, r0
 80140d0:	4608      	mov	r0, r1
 80140d2:	4611      	mov	r1, r2
 80140d4:	602b      	str	r3, [r5, #0]
 80140d6:	f7ee ff37 	bl	8002f48 <_fstat>
 80140da:	1c43      	adds	r3, r0, #1
 80140dc:	d102      	bne.n	80140e4 <_fstat_r+0x1c>
 80140de:	682b      	ldr	r3, [r5, #0]
 80140e0:	b103      	cbz	r3, 80140e4 <_fstat_r+0x1c>
 80140e2:	6023      	str	r3, [r4, #0]
 80140e4:	bd38      	pop	{r3, r4, r5, pc}
 80140e6:	bf00      	nop
 80140e8:	24024d98 	.word	0x24024d98

080140ec <_isatty_r>:
 80140ec:	b538      	push	{r3, r4, r5, lr}
 80140ee:	4d06      	ldr	r5, [pc, #24]	@ (8014108 <_isatty_r+0x1c>)
 80140f0:	2300      	movs	r3, #0
 80140f2:	4604      	mov	r4, r0
 80140f4:	4608      	mov	r0, r1
 80140f6:	602b      	str	r3, [r5, #0]
 80140f8:	f7ee ff36 	bl	8002f68 <_isatty>
 80140fc:	1c43      	adds	r3, r0, #1
 80140fe:	d102      	bne.n	8014106 <_isatty_r+0x1a>
 8014100:	682b      	ldr	r3, [r5, #0]
 8014102:	b103      	cbz	r3, 8014106 <_isatty_r+0x1a>
 8014104:	6023      	str	r3, [r4, #0]
 8014106:	bd38      	pop	{r3, r4, r5, pc}
 8014108:	24024d98 	.word	0x24024d98

0801410c <_lseek_r>:
 801410c:	b538      	push	{r3, r4, r5, lr}
 801410e:	4d07      	ldr	r5, [pc, #28]	@ (801412c <_lseek_r+0x20>)
 8014110:	4604      	mov	r4, r0
 8014112:	4608      	mov	r0, r1
 8014114:	4611      	mov	r1, r2
 8014116:	2200      	movs	r2, #0
 8014118:	602a      	str	r2, [r5, #0]
 801411a:	461a      	mov	r2, r3
 801411c:	f7ee ff2f 	bl	8002f7e <_lseek>
 8014120:	1c43      	adds	r3, r0, #1
 8014122:	d102      	bne.n	801412a <_lseek_r+0x1e>
 8014124:	682b      	ldr	r3, [r5, #0]
 8014126:	b103      	cbz	r3, 801412a <_lseek_r+0x1e>
 8014128:	6023      	str	r3, [r4, #0]
 801412a:	bd38      	pop	{r3, r4, r5, pc}
 801412c:	24024d98 	.word	0x24024d98

08014130 <_read_r>:
 8014130:	b538      	push	{r3, r4, r5, lr}
 8014132:	4d07      	ldr	r5, [pc, #28]	@ (8014150 <_read_r+0x20>)
 8014134:	4604      	mov	r4, r0
 8014136:	4608      	mov	r0, r1
 8014138:	4611      	mov	r1, r2
 801413a:	2200      	movs	r2, #0
 801413c:	602a      	str	r2, [r5, #0]
 801413e:	461a      	mov	r2, r3
 8014140:	f7ee febd 	bl	8002ebe <_read>
 8014144:	1c43      	adds	r3, r0, #1
 8014146:	d102      	bne.n	801414e <_read_r+0x1e>
 8014148:	682b      	ldr	r3, [r5, #0]
 801414a:	b103      	cbz	r3, 801414e <_read_r+0x1e>
 801414c:	6023      	str	r3, [r4, #0]
 801414e:	bd38      	pop	{r3, r4, r5, pc}
 8014150:	24024d98 	.word	0x24024d98

08014154 <_sbrk_r>:
 8014154:	b538      	push	{r3, r4, r5, lr}
 8014156:	4d06      	ldr	r5, [pc, #24]	@ (8014170 <_sbrk_r+0x1c>)
 8014158:	2300      	movs	r3, #0
 801415a:	4604      	mov	r4, r0
 801415c:	4608      	mov	r0, r1
 801415e:	602b      	str	r3, [r5, #0]
 8014160:	f7ee ff1a 	bl	8002f98 <_sbrk>
 8014164:	1c43      	adds	r3, r0, #1
 8014166:	d102      	bne.n	801416e <_sbrk_r+0x1a>
 8014168:	682b      	ldr	r3, [r5, #0]
 801416a:	b103      	cbz	r3, 801416e <_sbrk_r+0x1a>
 801416c:	6023      	str	r3, [r4, #0]
 801416e:	bd38      	pop	{r3, r4, r5, pc}
 8014170:	24024d98 	.word	0x24024d98

08014174 <_write_r>:
 8014174:	b538      	push	{r3, r4, r5, lr}
 8014176:	4d07      	ldr	r5, [pc, #28]	@ (8014194 <_write_r+0x20>)
 8014178:	4604      	mov	r4, r0
 801417a:	4608      	mov	r0, r1
 801417c:	4611      	mov	r1, r2
 801417e:	2200      	movs	r2, #0
 8014180:	602a      	str	r2, [r5, #0]
 8014182:	461a      	mov	r2, r3
 8014184:	f7ee feb8 	bl	8002ef8 <_write>
 8014188:	1c43      	adds	r3, r0, #1
 801418a:	d102      	bne.n	8014192 <_write_r+0x1e>
 801418c:	682b      	ldr	r3, [r5, #0]
 801418e:	b103      	cbz	r3, 8014192 <_write_r+0x1e>
 8014190:	6023      	str	r3, [r4, #0]
 8014192:	bd38      	pop	{r3, r4, r5, pc}
 8014194:	24024d98 	.word	0x24024d98

08014198 <sysconf>:
 8014198:	2808      	cmp	r0, #8
 801419a:	b508      	push	{r3, lr}
 801419c:	d006      	beq.n	80141ac <sysconf+0x14>
 801419e:	f7fc fe01 	bl	8010da4 <__errno>
 80141a2:	2316      	movs	r3, #22
 80141a4:	6003      	str	r3, [r0, #0]
 80141a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80141aa:	bd08      	pop	{r3, pc}
 80141ac:	2080      	movs	r0, #128	@ 0x80
 80141ae:	e7fc      	b.n	80141aa <sysconf+0x12>

080141b0 <__libc_fini_array>:
 80141b0:	b538      	push	{r3, r4, r5, lr}
 80141b2:	4d07      	ldr	r5, [pc, #28]	@ (80141d0 <__libc_fini_array+0x20>)
 80141b4:	4c07      	ldr	r4, [pc, #28]	@ (80141d4 <__libc_fini_array+0x24>)
 80141b6:	1b64      	subs	r4, r4, r5
 80141b8:	10a4      	asrs	r4, r4, #2
 80141ba:	b91c      	cbnz	r4, 80141c4 <__libc_fini_array+0x14>
 80141bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141c0:	f001 bc8e 	b.w	8015ae0 <_fini>
 80141c4:	3c01      	subs	r4, #1
 80141c6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80141ca:	4798      	blx	r3
 80141cc:	e7f5      	b.n	80141ba <__libc_fini_array+0xa>
 80141ce:	bf00      	nop
 80141d0:	08018350 	.word	0x08018350
 80141d4:	08018354 	.word	0x08018354

080141d8 <__register_exitproc>:
 80141d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141dc:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8014254 <__register_exitproc+0x7c>
 80141e0:	4606      	mov	r6, r0
 80141e2:	f8da 0000 	ldr.w	r0, [sl]
 80141e6:	4698      	mov	r8, r3
 80141e8:	460f      	mov	r7, r1
 80141ea:	4691      	mov	r9, r2
 80141ec:	f7fc fe06 	bl	8010dfc <__retarget_lock_acquire_recursive>
 80141f0:	4b16      	ldr	r3, [pc, #88]	@ (801424c <__register_exitproc+0x74>)
 80141f2:	681c      	ldr	r4, [r3, #0]
 80141f4:	b90c      	cbnz	r4, 80141fa <__register_exitproc+0x22>
 80141f6:	4c16      	ldr	r4, [pc, #88]	@ (8014250 <__register_exitproc+0x78>)
 80141f8:	601c      	str	r4, [r3, #0]
 80141fa:	6865      	ldr	r5, [r4, #4]
 80141fc:	f8da 0000 	ldr.w	r0, [sl]
 8014200:	2d1f      	cmp	r5, #31
 8014202:	dd05      	ble.n	8014210 <__register_exitproc+0x38>
 8014204:	f7fc fdfb 	bl	8010dfe <__retarget_lock_release_recursive>
 8014208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014210:	b19e      	cbz	r6, 801423a <__register_exitproc+0x62>
 8014212:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8014216:	2201      	movs	r2, #1
 8014218:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 801421c:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8014220:	40aa      	lsls	r2, r5
 8014222:	4313      	orrs	r3, r2
 8014224:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8014228:	2e02      	cmp	r6, #2
 801422a:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 801422e:	bf02      	ittt	eq
 8014230:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8014234:	4313      	orreq	r3, r2
 8014236:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 801423a:	1c6b      	adds	r3, r5, #1
 801423c:	3502      	adds	r5, #2
 801423e:	6063      	str	r3, [r4, #4]
 8014240:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8014244:	f7fc fddb 	bl	8010dfe <__retarget_lock_release_recursive>
 8014248:	2000      	movs	r0, #0
 801424a:	e7df      	b.n	801420c <__register_exitproc+0x34>
 801424c:	24024d60 	.word	0x24024d60
 8014250:	24024d9c 	.word	0x24024d9c
 8014254:	240002b0 	.word	0x240002b0

08014258 <__assert_func>:
 8014258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801425a:	4614      	mov	r4, r2
 801425c:	461a      	mov	r2, r3
 801425e:	4b09      	ldr	r3, [pc, #36]	@ (8014284 <__assert_func+0x2c>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	4605      	mov	r5, r0
 8014264:	68d8      	ldr	r0, [r3, #12]
 8014266:	b954      	cbnz	r4, 801427e <__assert_func+0x26>
 8014268:	4b07      	ldr	r3, [pc, #28]	@ (8014288 <__assert_func+0x30>)
 801426a:	461c      	mov	r4, r3
 801426c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014270:	9100      	str	r1, [sp, #0]
 8014272:	462b      	mov	r3, r5
 8014274:	4905      	ldr	r1, [pc, #20]	@ (801428c <__assert_func+0x34>)
 8014276:	f000 f843 	bl	8014300 <fiprintf>
 801427a:	f000 f8d0 	bl	801441e <abort>
 801427e:	4b04      	ldr	r3, [pc, #16]	@ (8014290 <__assert_func+0x38>)
 8014280:	e7f4      	b.n	801426c <__assert_func+0x14>
 8014282:	bf00      	nop
 8014284:	24000188 	.word	0x24000188
 8014288:	0801601b 	.word	0x0801601b
 801428c:	08015fed 	.word	0x08015fed
 8014290:	08015fe0 	.word	0x08015fe0

08014294 <_calloc_r>:
 8014294:	b538      	push	{r3, r4, r5, lr}
 8014296:	fba1 1502 	umull	r1, r5, r1, r2
 801429a:	b935      	cbnz	r5, 80142aa <_calloc_r+0x16>
 801429c:	f7fd fcf8 	bl	8011c90 <_malloc_r>
 80142a0:	4604      	mov	r4, r0
 80142a2:	b938      	cbnz	r0, 80142b4 <_calloc_r+0x20>
 80142a4:	2400      	movs	r4, #0
 80142a6:	4620      	mov	r0, r4
 80142a8:	bd38      	pop	{r3, r4, r5, pc}
 80142aa:	f7fc fd7b 	bl	8010da4 <__errno>
 80142ae:	230c      	movs	r3, #12
 80142b0:	6003      	str	r3, [r0, #0]
 80142b2:	e7f7      	b.n	80142a4 <_calloc_r+0x10>
 80142b4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80142b8:	f022 0203 	bic.w	r2, r2, #3
 80142bc:	3a04      	subs	r2, #4
 80142be:	2a24      	cmp	r2, #36	@ 0x24
 80142c0:	d819      	bhi.n	80142f6 <_calloc_r+0x62>
 80142c2:	2a13      	cmp	r2, #19
 80142c4:	d915      	bls.n	80142f2 <_calloc_r+0x5e>
 80142c6:	2a1b      	cmp	r2, #27
 80142c8:	e9c0 5500 	strd	r5, r5, [r0]
 80142cc:	d806      	bhi.n	80142dc <_calloc_r+0x48>
 80142ce:	f100 0308 	add.w	r3, r0, #8
 80142d2:	2200      	movs	r2, #0
 80142d4:	e9c3 2200 	strd	r2, r2, [r3]
 80142d8:	609a      	str	r2, [r3, #8]
 80142da:	e7e4      	b.n	80142a6 <_calloc_r+0x12>
 80142dc:	2a24      	cmp	r2, #36	@ 0x24
 80142de:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80142e2:	bf11      	iteee	ne
 80142e4:	f100 0310 	addne.w	r3, r0, #16
 80142e8:	6105      	streq	r5, [r0, #16]
 80142ea:	f100 0318 	addeq.w	r3, r0, #24
 80142ee:	6145      	streq	r5, [r0, #20]
 80142f0:	e7ef      	b.n	80142d2 <_calloc_r+0x3e>
 80142f2:	4603      	mov	r3, r0
 80142f4:	e7ed      	b.n	80142d2 <_calloc_r+0x3e>
 80142f6:	4629      	mov	r1, r5
 80142f8:	f7fc fd2e 	bl	8010d58 <memset>
 80142fc:	e7d3      	b.n	80142a6 <_calloc_r+0x12>
	...

08014300 <fiprintf>:
 8014300:	b40e      	push	{r1, r2, r3}
 8014302:	b503      	push	{r0, r1, lr}
 8014304:	4601      	mov	r1, r0
 8014306:	ab03      	add	r3, sp, #12
 8014308:	4805      	ldr	r0, [pc, #20]	@ (8014320 <fiprintf+0x20>)
 801430a:	f853 2b04 	ldr.w	r2, [r3], #4
 801430e:	6800      	ldr	r0, [r0, #0]
 8014310:	9301      	str	r3, [sp, #4]
 8014312:	f7fb fca3 	bl	800fc5c <_vfiprintf_r>
 8014316:	b002      	add	sp, #8
 8014318:	f85d eb04 	ldr.w	lr, [sp], #4
 801431c:	b003      	add	sp, #12
 801431e:	4770      	bx	lr
 8014320:	24000188 	.word	0x24000188

08014324 <__ssprint_r>:
 8014324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014328:	6893      	ldr	r3, [r2, #8]
 801432a:	f8d2 b000 	ldr.w	fp, [r2]
 801432e:	9001      	str	r0, [sp, #4]
 8014330:	460c      	mov	r4, r1
 8014332:	4617      	mov	r7, r2
 8014334:	2b00      	cmp	r3, #0
 8014336:	d157      	bne.n	80143e8 <__ssprint_r+0xc4>
 8014338:	2000      	movs	r0, #0
 801433a:	2300      	movs	r3, #0
 801433c:	607b      	str	r3, [r7, #4]
 801433e:	b003      	add	sp, #12
 8014340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014344:	e9db a800 	ldrd	sl, r8, [fp]
 8014348:	f10b 0b08 	add.w	fp, fp, #8
 801434c:	68a6      	ldr	r6, [r4, #8]
 801434e:	6820      	ldr	r0, [r4, #0]
 8014350:	f1b8 0f00 	cmp.w	r8, #0
 8014354:	d0f6      	beq.n	8014344 <__ssprint_r+0x20>
 8014356:	45b0      	cmp	r8, r6
 8014358:	d32e      	bcc.n	80143b8 <__ssprint_r+0x94>
 801435a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801435e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014362:	d029      	beq.n	80143b8 <__ssprint_r+0x94>
 8014364:	6921      	ldr	r1, [r4, #16]
 8014366:	6965      	ldr	r5, [r4, #20]
 8014368:	eba0 0901 	sub.w	r9, r0, r1
 801436c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014370:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014374:	f109 0001 	add.w	r0, r9, #1
 8014378:	106d      	asrs	r5, r5, #1
 801437a:	4440      	add	r0, r8
 801437c:	4285      	cmp	r5, r0
 801437e:	bf38      	it	cc
 8014380:	4605      	movcc	r5, r0
 8014382:	0553      	lsls	r3, r2, #21
 8014384:	d534      	bpl.n	80143f0 <__ssprint_r+0xcc>
 8014386:	9801      	ldr	r0, [sp, #4]
 8014388:	4629      	mov	r1, r5
 801438a:	f7fd fc81 	bl	8011c90 <_malloc_r>
 801438e:	4606      	mov	r6, r0
 8014390:	2800      	cmp	r0, #0
 8014392:	d038      	beq.n	8014406 <__ssprint_r+0xe2>
 8014394:	464a      	mov	r2, r9
 8014396:	6921      	ldr	r1, [r4, #16]
 8014398:	f7fc fd32 	bl	8010e00 <memcpy>
 801439c:	89a2      	ldrh	r2, [r4, #12]
 801439e:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80143a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80143a6:	81a2      	strh	r2, [r4, #12]
 80143a8:	6126      	str	r6, [r4, #16]
 80143aa:	6165      	str	r5, [r4, #20]
 80143ac:	444e      	add	r6, r9
 80143ae:	eba5 0509 	sub.w	r5, r5, r9
 80143b2:	6026      	str	r6, [r4, #0]
 80143b4:	60a5      	str	r5, [r4, #8]
 80143b6:	4646      	mov	r6, r8
 80143b8:	4546      	cmp	r6, r8
 80143ba:	bf28      	it	cs
 80143bc:	4646      	movcs	r6, r8
 80143be:	4632      	mov	r2, r6
 80143c0:	4651      	mov	r1, sl
 80143c2:	6820      	ldr	r0, [r4, #0]
 80143c4:	f7fc fcae 	bl	8010d24 <memmove>
 80143c8:	68a2      	ldr	r2, [r4, #8]
 80143ca:	1b92      	subs	r2, r2, r6
 80143cc:	60a2      	str	r2, [r4, #8]
 80143ce:	6822      	ldr	r2, [r4, #0]
 80143d0:	4432      	add	r2, r6
 80143d2:	6022      	str	r2, [r4, #0]
 80143d4:	68ba      	ldr	r2, [r7, #8]
 80143d6:	eba2 0308 	sub.w	r3, r2, r8
 80143da:	44c2      	add	sl, r8
 80143dc:	60bb      	str	r3, [r7, #8]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d0aa      	beq.n	8014338 <__ssprint_r+0x14>
 80143e2:	f04f 0800 	mov.w	r8, #0
 80143e6:	e7b1      	b.n	801434c <__ssprint_r+0x28>
 80143e8:	f04f 0a00 	mov.w	sl, #0
 80143ec:	46d0      	mov	r8, sl
 80143ee:	e7ad      	b.n	801434c <__ssprint_r+0x28>
 80143f0:	9801      	ldr	r0, [sp, #4]
 80143f2:	462a      	mov	r2, r5
 80143f4:	f7ff fc16 	bl	8013c24 <_realloc_r>
 80143f8:	4606      	mov	r6, r0
 80143fa:	2800      	cmp	r0, #0
 80143fc:	d1d4      	bne.n	80143a8 <__ssprint_r+0x84>
 80143fe:	6921      	ldr	r1, [r4, #16]
 8014400:	9801      	ldr	r0, [sp, #4]
 8014402:	f7fd fb85 	bl	8011b10 <_free_r>
 8014406:	9a01      	ldr	r2, [sp, #4]
 8014408:	230c      	movs	r3, #12
 801440a:	6013      	str	r3, [r2, #0]
 801440c:	89a3      	ldrh	r3, [r4, #12]
 801440e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014412:	81a3      	strh	r3, [r4, #12]
 8014414:	2300      	movs	r3, #0
 8014416:	60bb      	str	r3, [r7, #8]
 8014418:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801441c:	e78d      	b.n	801433a <__ssprint_r+0x16>

0801441e <abort>:
 801441e:	b508      	push	{r3, lr}
 8014420:	2006      	movs	r0, #6
 8014422:	f000 f82d 	bl	8014480 <raise>
 8014426:	2001      	movs	r0, #1
 8014428:	f7ee fd3e 	bl	8002ea8 <_exit>

0801442c <_raise_r>:
 801442c:	291f      	cmp	r1, #31
 801442e:	b538      	push	{r3, r4, r5, lr}
 8014430:	4605      	mov	r5, r0
 8014432:	460c      	mov	r4, r1
 8014434:	d904      	bls.n	8014440 <_raise_r+0x14>
 8014436:	2316      	movs	r3, #22
 8014438:	6003      	str	r3, [r0, #0]
 801443a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801443e:	bd38      	pop	{r3, r4, r5, pc}
 8014440:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8014444:	b112      	cbz	r2, 801444c <_raise_r+0x20>
 8014446:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801444a:	b94b      	cbnz	r3, 8014460 <_raise_r+0x34>
 801444c:	4628      	mov	r0, r5
 801444e:	f000 f831 	bl	80144b4 <_getpid_r>
 8014452:	4622      	mov	r2, r4
 8014454:	4601      	mov	r1, r0
 8014456:	4628      	mov	r0, r5
 8014458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801445c:	f000 b818 	b.w	8014490 <_kill_r>
 8014460:	2b01      	cmp	r3, #1
 8014462:	d00a      	beq.n	801447a <_raise_r+0x4e>
 8014464:	1c59      	adds	r1, r3, #1
 8014466:	d103      	bne.n	8014470 <_raise_r+0x44>
 8014468:	2316      	movs	r3, #22
 801446a:	6003      	str	r3, [r0, #0]
 801446c:	2001      	movs	r0, #1
 801446e:	e7e6      	b.n	801443e <_raise_r+0x12>
 8014470:	2100      	movs	r1, #0
 8014472:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014476:	4620      	mov	r0, r4
 8014478:	4798      	blx	r3
 801447a:	2000      	movs	r0, #0
 801447c:	e7df      	b.n	801443e <_raise_r+0x12>
	...

08014480 <raise>:
 8014480:	4b02      	ldr	r3, [pc, #8]	@ (801448c <raise+0xc>)
 8014482:	4601      	mov	r1, r0
 8014484:	6818      	ldr	r0, [r3, #0]
 8014486:	f7ff bfd1 	b.w	801442c <_raise_r>
 801448a:	bf00      	nop
 801448c:	24000188 	.word	0x24000188

08014490 <_kill_r>:
 8014490:	b538      	push	{r3, r4, r5, lr}
 8014492:	4d07      	ldr	r5, [pc, #28]	@ (80144b0 <_kill_r+0x20>)
 8014494:	2300      	movs	r3, #0
 8014496:	4604      	mov	r4, r0
 8014498:	4608      	mov	r0, r1
 801449a:	4611      	mov	r1, r2
 801449c:	602b      	str	r3, [r5, #0]
 801449e:	f7ee fcf3 	bl	8002e88 <_kill>
 80144a2:	1c43      	adds	r3, r0, #1
 80144a4:	d102      	bne.n	80144ac <_kill_r+0x1c>
 80144a6:	682b      	ldr	r3, [r5, #0]
 80144a8:	b103      	cbz	r3, 80144ac <_kill_r+0x1c>
 80144aa:	6023      	str	r3, [r4, #0]
 80144ac:	bd38      	pop	{r3, r4, r5, pc}
 80144ae:	bf00      	nop
 80144b0:	24024d98 	.word	0x24024d98

080144b4 <_getpid_r>:
 80144b4:	f7ee bce0 	b.w	8002e78 <_getpid>

080144b8 <cabs>:
 80144b8:	b508      	push	{r3, lr}
 80144ba:	ed2d 8b06 	vpush	{d8-d10}
 80144be:	eeb0 ab40 	vmov.f64	d10, d0
 80144c2:	eeb0 9b41 	vmov.f64	d9, d1
 80144c6:	f000 fc26 	bl	8014d16 <creal>
 80144ca:	eeb0 1b49 	vmov.f64	d1, d9
 80144ce:	eeb0 8b40 	vmov.f64	d8, d0
 80144d2:	eeb0 0b4a 	vmov.f64	d0, d10
 80144d6:	f000 fc1b 	bl	8014d10 <cimag>
 80144da:	eeb0 1b40 	vmov.f64	d1, d0
 80144de:	eeb0 0b48 	vmov.f64	d0, d8
 80144e2:	ecbd 8b06 	vpop	{d8-d10}
 80144e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80144ea:	f000 bdd1 	b.w	8015090 <hypot>
	...

080144f0 <log>:
 80144f0:	b4f0      	push	{r4, r5, r6, r7}
 80144f2:	ee10 0a90 	vmov	r0, s1
 80144f6:	ee10 3a10 	vmov	r3, s0
 80144fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80144fe:	429c      	cmp	r4, r3
 8014500:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8014504:	4c70      	ldr	r4, [pc, #448]	@ (80146c8 <log+0x1d8>)
 8014506:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 801450a:	418c      	sbcs	r4, r1
 801450c:	ed2d 8b02 	vpush	{d8}
 8014510:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8014514:	d35a      	bcc.n	80145cc <log+0xdc>
 8014516:	4a6d      	ldr	r2, [pc, #436]	@ (80146cc <log+0x1dc>)
 8014518:	4290      	cmp	r0, r2
 801451a:	bf08      	it	eq
 801451c:	2b00      	cmpeq	r3, #0
 801451e:	f000 80c4 	beq.w	80146aa <log+0x1ba>
 8014522:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8014526:	ee30 0b47 	vsub.f64	d0, d0, d7
 801452a:	4b69      	ldr	r3, [pc, #420]	@ (80146d0 <log+0x1e0>)
 801452c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8014530:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8014534:	ee20 4b02 	vmul.f64	d4, d0, d2
 8014538:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 801453c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8014540:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8014544:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8014548:	eea6 7b02 	vfma.f64	d7, d6, d2
 801454c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8014550:	eea5 6b00 	vfma.f64	d6, d5, d0
 8014554:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8014558:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 801455c:	eea5 6b02 	vfma.f64	d6, d5, d2
 8014560:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8014564:	eea3 5b00 	vfma.f64	d5, d3, d0
 8014568:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 801456c:	eea3 5b02 	vfma.f64	d5, d3, d2
 8014570:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8014574:	eea3 5b04 	vfma.f64	d5, d3, d4
 8014578:	eea5 6b04 	vfma.f64	d6, d5, d4
 801457c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8014580:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014584:	eeb0 2b47 	vmov.f64	d2, d7
 8014588:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 80146b0 <log+0x1c0>
 801458c:	eeb0 6b40 	vmov.f64	d6, d0
 8014590:	eeb0 3b40 	vmov.f64	d3, d0
 8014594:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014598:	eea0 6b47 	vfms.f64	d6, d0, d7
 801459c:	ee30 8b46 	vsub.f64	d8, d0, d6
 80145a0:	ee26 1b06 	vmul.f64	d1, d6, d6
 80145a4:	eea1 3b05 	vfma.f64	d3, d1, d5
 80145a8:	ee30 7b43 	vsub.f64	d7, d0, d3
 80145ac:	ee30 0b06 	vadd.f64	d0, d0, d6
 80145b0:	eea1 7b05 	vfma.f64	d7, d1, d5
 80145b4:	ee25 5b08 	vmul.f64	d5, d5, d8
 80145b8:	eea5 7b00 	vfma.f64	d7, d5, d0
 80145bc:	eea2 7b04 	vfma.f64	d7, d2, d4
 80145c0:	ee33 0b07 	vadd.f64	d0, d3, d7
 80145c4:	ecbd 8b02 	vpop	{d8}
 80145c8:	bcf0      	pop	{r4, r5, r6, r7}
 80145ca:	4770      	bx	lr
 80145cc:	f1a2 0410 	sub.w	r4, r2, #16
 80145d0:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 80145d4:	428c      	cmp	r4, r1
 80145d6:	d923      	bls.n	8014620 <log+0x130>
 80145d8:	18d9      	adds	r1, r3, r3
 80145da:	eb40 0400 	adc.w	r4, r0, r0
 80145de:	4321      	orrs	r1, r4
 80145e0:	d105      	bne.n	80145ee <log+0xfe>
 80145e2:	ecbd 8b02 	vpop	{d8}
 80145e6:	2001      	movs	r0, #1
 80145e8:	bcf0      	pop	{r4, r5, r6, r7}
 80145ea:	f000 bda9 	b.w	8015140 <__math_divzero>
 80145ee:	4939      	ldr	r1, [pc, #228]	@ (80146d4 <log+0x1e4>)
 80145f0:	4288      	cmp	r0, r1
 80145f2:	bf08      	it	eq
 80145f4:	2b00      	cmpeq	r3, #0
 80145f6:	d0e5      	beq.n	80145c4 <log+0xd4>
 80145f8:	0413      	lsls	r3, r2, #16
 80145fa:	d403      	bmi.n	8014604 <log+0x114>
 80145fc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8014600:	4393      	bics	r3, r2
 8014602:	d104      	bne.n	801460e <log+0x11e>
 8014604:	ecbd 8b02 	vpop	{d8}
 8014608:	bcf0      	pop	{r4, r5, r6, r7}
 801460a:	f000 bdb1 	b.w	8015170 <__math_invalid>
 801460e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80146b8 <log+0x1c8>
 8014612:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014616:	ec53 2b17 	vmov	r2, r3, d7
 801461a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 801461e:	4613      	mov	r3, r2
 8014620:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8014624:	492a      	ldr	r1, [pc, #168]	@ (80146d0 <log+0x1e0>)
 8014626:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801462a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 801462e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8014632:	0d15      	lsrs	r5, r2, #20
 8014634:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8014638:	052d      	lsls	r5, r5, #20
 801463a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 801463e:	1e1e      	subs	r6, r3, #0
 8014640:	1b47      	subs	r7, r0, r5
 8014642:	ec47 6b16 	vmov	d6, r6, r7
 8014646:	1512      	asrs	r2, r2, #20
 8014648:	eea7 5b06 	vfma.f64	d5, d7, d6
 801464c:	ee07 2a90 	vmov	s15, r2
 8014650:	ee25 2b05 	vmul.f64	d2, d5, d5
 8014654:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8014658:	ed91 4b00 	vldr	d4, [r1]
 801465c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8014660:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8014664:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014668:	ee35 4b07 	vadd.f64	d4, d5, d7
 801466c:	ee37 0b44 	vsub.f64	d0, d7, d4
 8014670:	ed91 7b02 	vldr	d7, [r1, #8]
 8014674:	ee30 0b05 	vadd.f64	d0, d0, d5
 8014678:	eea7 0b06 	vfma.f64	d0, d7, d6
 801467c:	ed91 7b04 	vldr	d7, [r1, #16]
 8014680:	ed91 6b08 	vldr	d6, [r1, #32]
 8014684:	eea7 0b02 	vfma.f64	d0, d7, d2
 8014688:	ed91 7b06 	vldr	d7, [r1, #24]
 801468c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8014690:	eea6 7b05 	vfma.f64	d7, d6, d5
 8014694:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8014698:	eea3 6b05 	vfma.f64	d6, d3, d5
 801469c:	eea6 7b02 	vfma.f64	d7, d6, d2
 80146a0:	eea1 0b07 	vfma.f64	d0, d1, d7
 80146a4:	ee30 0b04 	vadd.f64	d0, d0, d4
 80146a8:	e78c      	b.n	80145c4 <log+0xd4>
 80146aa:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 80146c0 <log+0x1d0>
 80146ae:	e789      	b.n	80145c4 <log+0xd4>
 80146b0:	00000000 	.word	0x00000000
 80146b4:	41a00000 	.word	0x41a00000
 80146b8:	00000000 	.word	0x00000000
 80146bc:	43300000 	.word	0x43300000
	...
 80146c8:	000308ff 	.word	0x000308ff
 80146cc:	3ff00000 	.word	0x3ff00000
 80146d0:	08016020 	.word	0x08016020
 80146d4:	7ff00000 	.word	0x7ff00000

080146d8 <checkint>:
 80146d8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80146dc:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80146e0:	429a      	cmp	r2, r3
 80146e2:	b570      	push	{r4, r5, r6, lr}
 80146e4:	dd2a      	ble.n	801473c <checkint+0x64>
 80146e6:	f240 4333 	movw	r3, #1075	@ 0x433
 80146ea:	429a      	cmp	r2, r3
 80146ec:	dc24      	bgt.n	8014738 <checkint+0x60>
 80146ee:	1a9b      	subs	r3, r3, r2
 80146f0:	f1a3 0620 	sub.w	r6, r3, #32
 80146f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80146f8:	fa02 f403 	lsl.w	r4, r2, r3
 80146fc:	fa02 f606 	lsl.w	r6, r2, r6
 8014700:	f1c3 0520 	rsb	r5, r3, #32
 8014704:	fa22 f505 	lsr.w	r5, r2, r5
 8014708:	4334      	orrs	r4, r6
 801470a:	432c      	orrs	r4, r5
 801470c:	409a      	lsls	r2, r3
 801470e:	ea20 0202 	bic.w	r2, r0, r2
 8014712:	ea21 0404 	bic.w	r4, r1, r4
 8014716:	4322      	orrs	r2, r4
 8014718:	f1a3 0420 	sub.w	r4, r3, #32
 801471c:	f1c3 0220 	rsb	r2, r3, #32
 8014720:	d10c      	bne.n	801473c <checkint+0x64>
 8014722:	40d8      	lsrs	r0, r3
 8014724:	fa01 f302 	lsl.w	r3, r1, r2
 8014728:	4318      	orrs	r0, r3
 801472a:	40e1      	lsrs	r1, r4
 801472c:	4308      	orrs	r0, r1
 801472e:	f000 0001 	and.w	r0, r0, #1
 8014732:	f1d0 0002 	rsbs	r0, r0, #2
 8014736:	bd70      	pop	{r4, r5, r6, pc}
 8014738:	2002      	movs	r0, #2
 801473a:	e7fc      	b.n	8014736 <checkint+0x5e>
 801473c:	2000      	movs	r0, #0
 801473e:	e7fa      	b.n	8014736 <checkint+0x5e>

08014740 <pow>:
 8014740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014744:	ee10 4a90 	vmov	r4, s1
 8014748:	ed2d 8b0a 	vpush	{d8-d12}
 801474c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8014750:	ee11 aa90 	vmov	sl, s3
 8014754:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8014758:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801475c:	429a      	cmp	r2, r3
 801475e:	ee10 5a10 	vmov	r5, s0
 8014762:	ee11 0a10 	vmov	r0, s2
 8014766:	b087      	sub	sp, #28
 8014768:	46c4      	mov	ip, r8
 801476a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801476e:	d806      	bhi.n	801477e <pow+0x3e>
 8014770:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8014774:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8014778:	2b7f      	cmp	r3, #127	@ 0x7f
 801477a:	f240 8157 	bls.w	8014a2c <pow+0x2ec>
 801477e:	1802      	adds	r2, r0, r0
 8014780:	eb4a 010a 	adc.w	r1, sl, sl
 8014784:	f06f 0b01 	mvn.w	fp, #1
 8014788:	1e57      	subs	r7, r2, #1
 801478a:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 801478e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8014792:	45bb      	cmp	fp, r7
 8014794:	eb7e 0303 	sbcs.w	r3, lr, r3
 8014798:	d242      	bcs.n	8014820 <pow+0xe0>
 801479a:	ea52 0301 	orrs.w	r3, r2, r1
 801479e:	f04f 0300 	mov.w	r3, #0
 80147a2:	d10c      	bne.n	80147be <pow+0x7e>
 80147a4:	196d      	adds	r5, r5, r5
 80147a6:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 80147aa:	4164      	adcs	r4, r4
 80147ac:	42ab      	cmp	r3, r5
 80147ae:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80147b2:	41a3      	sbcs	r3, r4
 80147b4:	f0c0 808f 	bcc.w	80148d6 <pow+0x196>
 80147b8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80147bc:	e02b      	b.n	8014816 <pow+0xd6>
 80147be:	4ed4      	ldr	r6, [pc, #848]	@ (8014b10 <pow+0x3d0>)
 80147c0:	42b4      	cmp	r4, r6
 80147c2:	bf08      	it	eq
 80147c4:	429d      	cmpeq	r5, r3
 80147c6:	d109      	bne.n	80147dc <pow+0x9c>
 80147c8:	1800      	adds	r0, r0, r0
 80147ca:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 80147ce:	eb4a 0a0a 	adc.w	sl, sl, sl
 80147d2:	4283      	cmp	r3, r0
 80147d4:	4bcf      	ldr	r3, [pc, #828]	@ (8014b14 <pow+0x3d4>)
 80147d6:	eb73 030a 	sbcs.w	r3, r3, sl
 80147da:	e7eb      	b.n	80147b4 <pow+0x74>
 80147dc:	196d      	adds	r5, r5, r5
 80147de:	48ce      	ldr	r0, [pc, #824]	@ (8014b18 <pow+0x3d8>)
 80147e0:	4164      	adcs	r4, r4
 80147e2:	42ab      	cmp	r3, r5
 80147e4:	eb70 0604 	sbcs.w	r6, r0, r4
 80147e8:	d375      	bcc.n	80148d6 <pow+0x196>
 80147ea:	4281      	cmp	r1, r0
 80147ec:	bf08      	it	eq
 80147ee:	429a      	cmpeq	r2, r3
 80147f0:	d171      	bne.n	80148d6 <pow+0x196>
 80147f2:	4aca      	ldr	r2, [pc, #808]	@ (8014b1c <pow+0x3dc>)
 80147f4:	4294      	cmp	r4, r2
 80147f6:	bf08      	it	eq
 80147f8:	429d      	cmpeq	r5, r3
 80147fa:	d0dd      	beq.n	80147b8 <pow+0x78>
 80147fc:	4294      	cmp	r4, r2
 80147fe:	ea6f 0a0a 	mvn.w	sl, sl
 8014802:	bf34      	ite	cc
 8014804:	2400      	movcc	r4, #0
 8014806:	2401      	movcs	r4, #1
 8014808:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801480c:	4554      	cmp	r4, sl
 801480e:	f040 81dc 	bne.w	8014bca <pow+0x48a>
 8014812:	ee21 0b01 	vmul.f64	d0, d1, d1
 8014816:	b007      	add	sp, #28
 8014818:	ecbd 8b0a 	vpop	{d8-d12}
 801481c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014820:	196f      	adds	r7, r5, r5
 8014822:	eb44 0904 	adc.w	r9, r4, r4
 8014826:	1e7a      	subs	r2, r7, #1
 8014828:	f169 0300 	sbc.w	r3, r9, #0
 801482c:	4593      	cmp	fp, r2
 801482e:	eb7e 0303 	sbcs.w	r3, lr, r3
 8014832:	d225      	bcs.n	8014880 <pow+0x140>
 8014834:	ee20 0b00 	vmul.f64	d0, d0, d0
 8014838:	2c00      	cmp	r4, #0
 801483a:	da13      	bge.n	8014864 <pow+0x124>
 801483c:	4651      	mov	r1, sl
 801483e:	f7ff ff4b 	bl	80146d8 <checkint>
 8014842:	2801      	cmp	r0, #1
 8014844:	d10e      	bne.n	8014864 <pow+0x124>
 8014846:	eeb1 0b40 	vneg.f64	d0, d0
 801484a:	ea57 0909 	orrs.w	r9, r7, r9
 801484e:	d10b      	bne.n	8014868 <pow+0x128>
 8014850:	f1ba 0f00 	cmp.w	sl, #0
 8014854:	dadf      	bge.n	8014816 <pow+0xd6>
 8014856:	b007      	add	sp, #28
 8014858:	ecbd 8b0a 	vpop	{d8-d12}
 801485c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014860:	f000 bc6e 	b.w	8015140 <__math_divzero>
 8014864:	2000      	movs	r0, #0
 8014866:	e7f0      	b.n	801484a <pow+0x10a>
 8014868:	f1ba 0f00 	cmp.w	sl, #0
 801486c:	dad3      	bge.n	8014816 <pow+0xd6>
 801486e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8014872:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014876:	ed8d 7b00 	vstr	d7, [sp]
 801487a:	ed9d 0b00 	vldr	d0, [sp]
 801487e:	e7ca      	b.n	8014816 <pow+0xd6>
 8014880:	2c00      	cmp	r4, #0
 8014882:	da2b      	bge.n	80148dc <pow+0x19c>
 8014884:	4651      	mov	r1, sl
 8014886:	f7ff ff27 	bl	80146d8 <checkint>
 801488a:	b930      	cbnz	r0, 801489a <pow+0x15a>
 801488c:	b007      	add	sp, #28
 801488e:	ecbd 8b0a 	vpop	{d8-d12}
 8014892:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014896:	f000 bc6b 	b.w	8015170 <__math_invalid>
 801489a:	1e41      	subs	r1, r0, #1
 801489c:	4248      	negs	r0, r1
 801489e:	4148      	adcs	r0, r1
 80148a0:	0480      	lsls	r0, r0, #18
 80148a2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80148a6:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 80148aa:	f3c6 020a 	ubfx	r2, r6, #0, #11
 80148ae:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 80148b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80148b4:	d92d      	bls.n	8014912 <pow+0x1d2>
 80148b6:	4b96      	ldr	r3, [pc, #600]	@ (8014b10 <pow+0x3d0>)
 80148b8:	2000      	movs	r0, #0
 80148ba:	429c      	cmp	r4, r3
 80148bc:	bf08      	it	eq
 80148be:	4285      	cmpeq	r5, r0
 80148c0:	f43f af7a 	beq.w	80147b8 <pow+0x78>
 80148c4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 80148c8:	428a      	cmp	r2, r1
 80148ca:	d80c      	bhi.n	80148e6 <pow+0x1a6>
 80148cc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80148d0:	42a8      	cmp	r0, r5
 80148d2:	41a3      	sbcs	r3, r4
 80148d4:	d204      	bcs.n	80148e0 <pow+0x1a0>
 80148d6:	ee31 0b00 	vadd.f64	d0, d1, d0
 80148da:	e79c      	b.n	8014816 <pow+0xd6>
 80148dc:	2000      	movs	r0, #0
 80148de:	e7e4      	b.n	80148aa <pow+0x16a>
 80148e0:	ee30 0b41 	vsub.f64	d0, d0, d1
 80148e4:	e797      	b.n	8014816 <pow+0xd6>
 80148e6:	2d01      	cmp	r5, #1
 80148e8:	eb74 0303 	sbcs.w	r3, r4, r3
 80148ec:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80148f0:	bf34      	ite	cc
 80148f2:	2301      	movcc	r3, #1
 80148f4:	2300      	movcs	r3, #0
 80148f6:	4296      	cmp	r6, r2
 80148f8:	bf8c      	ite	hi
 80148fa:	2600      	movhi	r6, #0
 80148fc:	2601      	movls	r6, #1
 80148fe:	42b3      	cmp	r3, r6
 8014900:	f000 809c 	beq.w	8014a3c <pow+0x2fc>
 8014904:	b007      	add	sp, #28
 8014906:	ecbd 8b0a 	vpop	{d8-d12}
 801490a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801490e:	f000 bc0f 	b.w	8015130 <__math_oflow>
 8014912:	f1bc 0f00 	cmp.w	ip, #0
 8014916:	d10a      	bne.n	801492e <pow+0x1ee>
 8014918:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8014b00 <pow+0x3c0>
 801491c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014920:	ec53 2b17 	vmov	r2, r3, d7
 8014924:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8014928:	4615      	mov	r5, r2
 801492a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801492e:	4a7c      	ldr	r2, [pc, #496]	@ (8014b20 <pow+0x3e0>)
 8014930:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8014934:	4422      	add	r2, r4
 8014936:	1513      	asrs	r3, r2, #20
 8014938:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801493c:	ee03 3a10 	vmov	s6, r3
 8014940:	0d12      	lsrs	r2, r2, #20
 8014942:	4b78      	ldr	r3, [pc, #480]	@ (8014b24 <pow+0x3e4>)
 8014944:	0512      	lsls	r2, r2, #20
 8014946:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801494a:	1aa7      	subs	r7, r4, r2
 801494c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8014950:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8014954:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8014958:	1e2e      	subs	r6, r5, #0
 801495a:	ec47 6b14 	vmov	d4, r6, r7
 801495e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8014962:	eea4 6b05 	vfma.f64	d6, d4, d5
 8014966:	ed93 5b00 	vldr	d5, [r3]
 801496a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801496e:	eea3 2b05 	vfma.f64	d2, d3, d5
 8014972:	ed93 5b02 	vldr	d5, [r3, #8]
 8014976:	ee36 4b02 	vadd.f64	d4, d6, d2
 801497a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801497e:	eea3 7b05 	vfma.f64	d7, d3, d5
 8014982:	ed93 5b04 	vldr	d5, [r3, #16]
 8014986:	ee32 2b06 	vadd.f64	d2, d2, d6
 801498a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801498e:	ee26 5b05 	vmul.f64	d5, d6, d5
 8014992:	ee26 0b05 	vmul.f64	d0, d6, d5
 8014996:	ee34 8b00 	vadd.f64	d8, d4, d0
 801499a:	eeb0 9b40 	vmov.f64	d9, d0
 801499e:	ee34 4b48 	vsub.f64	d4, d4, d8
 80149a2:	ee96 9b05 	vfnms.f64	d9, d6, d5
 80149a6:	ee34 ab00 	vadd.f64	d10, d4, d0
 80149aa:	ed93 5b06 	vldr	d5, [r3, #24]
 80149ae:	ee26 bb00 	vmul.f64	d11, d6, d0
 80149b2:	ee37 7b09 	vadd.f64	d7, d7, d9
 80149b6:	ed93 4b08 	vldr	d4, [r3, #32]
 80149ba:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80149be:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 80149c2:	eea6 5b04 	vfma.f64	d5, d6, d4
 80149c6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 80149ca:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 80149ce:	eea6 4b03 	vfma.f64	d4, d6, d3
 80149d2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 80149d6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80149da:	eea0 4b03 	vfma.f64	d4, d0, d3
 80149de:	eea0 5b04 	vfma.f64	d5, d0, d4
 80149e2:	eeab 7b05 	vfma.f64	d7, d11, d5
 80149e6:	ee38 4b07 	vadd.f64	d4, d8, d7
 80149ea:	ee21 6b04 	vmul.f64	d6, d1, d4
 80149ee:	ee16 3a90 	vmov	r3, s13
 80149f2:	eeb0 5b46 	vmov.f64	d5, d6
 80149f6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80149fa:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 80149fe:	18b2      	adds	r2, r6, r2
 8014a00:	2a3e      	cmp	r2, #62	@ 0x3e
 8014a02:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8014a06:	ee38 8b44 	vsub.f64	d8, d8, d4
 8014a0a:	ee38 8b07 	vadd.f64	d8, d8, d7
 8014a0e:	eea1 5b08 	vfma.f64	d5, d1, d8
 8014a12:	d91b      	bls.n	8014a4c <pow+0x30c>
 8014a14:	2a00      	cmp	r2, #0
 8014a16:	da0b      	bge.n	8014a30 <pow+0x2f0>
 8014a18:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8014a1c:	ee36 0b00 	vadd.f64	d0, d6, d0
 8014a20:	2800      	cmp	r0, #0
 8014a22:	f43f aef8 	beq.w	8014816 <pow+0xd6>
 8014a26:	eeb1 0b40 	vneg.f64	d0, d0
 8014a2a:	e6f4      	b.n	8014816 <pow+0xd6>
 8014a2c:	2000      	movs	r0, #0
 8014a2e:	e77e      	b.n	801492e <pow+0x1ee>
 8014a30:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8014a34:	d909      	bls.n	8014a4a <pow+0x30a>
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	f6bf af64 	bge.w	8014904 <pow+0x1c4>
 8014a3c:	b007      	add	sp, #28
 8014a3e:	ecbd 8b0a 	vpop	{d8-d12}
 8014a42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a46:	f000 bb6b 	b.w	8015120 <__math_uflow>
 8014a4a:	2600      	movs	r6, #0
 8014a4c:	4936      	ldr	r1, [pc, #216]	@ (8014b28 <pow+0x3e8>)
 8014a4e:	ed91 4b02 	vldr	d4, [r1, #8]
 8014a52:	ed91 3b00 	vldr	d3, [r1]
 8014a56:	eeb0 7b44 	vmov.f64	d7, d4
 8014a5a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8014a5e:	ee17 5a10 	vmov	r5, s14
 8014a62:	ee37 7b44 	vsub.f64	d7, d7, d4
 8014a66:	ed91 4b04 	vldr	d4, [r1, #16]
 8014a6a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8014a6e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8014a72:	ed91 4b06 	vldr	d4, [r1, #24]
 8014a76:	18dc      	adds	r4, r3, r3
 8014a78:	f104 030f 	add.w	r3, r4, #15
 8014a7c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8014a80:	eea7 6b04 	vfma.f64	d6, d7, d4
 8014a84:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8014a88:	ee35 5b06 	vadd.f64	d5, d5, d6
 8014a8c:	ee25 6b05 	vmul.f64	d6, d5, d5
 8014a90:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8014a94:	ed91 4b08 	vldr	d4, [r1, #32]
 8014a98:	ee35 7b07 	vadd.f64	d7, d5, d7
 8014a9c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8014aa0:	eea5 4b03 	vfma.f64	d4, d5, d3
 8014aa4:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8014aa8:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014aac:	ee26 6b06 	vmul.f64	d6, d6, d6
 8014ab0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8014ab4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8014ab8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8014abc:	eea5 4b03 	vfma.f64	d4, d5, d3
 8014ac0:	1940      	adds	r0, r0, r5
 8014ac2:	2700      	movs	r7, #0
 8014ac4:	eb17 020c 	adds.w	r2, r7, ip
 8014ac8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8014acc:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014ad0:	2e00      	cmp	r6, #0
 8014ad2:	d175      	bne.n	8014bc0 <pow+0x480>
 8014ad4:	42bd      	cmp	r5, r7
 8014ad6:	db29      	blt.n	8014b2c <pow+0x3ec>
 8014ad8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8014adc:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8014ae0:	4610      	mov	r0, r2
 8014ae2:	ec41 0b10 	vmov	d0, r0, r1
 8014ae6:	eea7 0b00 	vfma.f64	d0, d7, d0
 8014aea:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8014b08 <pow+0x3c8>
 8014aee:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014af2:	b007      	add	sp, #28
 8014af4:	ecbd 8b0a 	vpop	{d8-d12}
 8014af8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014afc:	f000 bb50 	b.w	80151a0 <__math_check_oflow>
 8014b00:	00000000 	.word	0x00000000
 8014b04:	43300000 	.word	0x43300000
 8014b08:	00000000 	.word	0x00000000
 8014b0c:	7f000000 	.word	0x7f000000
 8014b10:	3ff00000 	.word	0x3ff00000
 8014b14:	fff00000 	.word	0xfff00000
 8014b18:	ffe00000 	.word	0xffe00000
 8014b1c:	7fe00000 	.word	0x7fe00000
 8014b20:	c0196aab 	.word	0xc0196aab
 8014b24:	080168b0 	.word	0x080168b0
 8014b28:	08017a80 	.word	0x08017a80
 8014b2c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8014b30:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8014b34:	4610      	mov	r0, r2
 8014b36:	ec41 0b15 	vmov	d5, r0, r1
 8014b3a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8014b3e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8014b42:	ee35 7b06 	vadd.f64	d7, d5, d6
 8014b46:	eeb0 4bc7 	vabs.f64	d4, d7
 8014b4a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8014b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b52:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8014bd0 <pow+0x490>
 8014b56:	d52a      	bpl.n	8014bae <pow+0x46e>
 8014b58:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014b5c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b64:	ee35 5b06 	vadd.f64	d5, d5, d6
 8014b68:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8014b6c:	bf58      	it	pl
 8014b6e:	eeb0 4b43 	vmovpl.f64	d4, d3
 8014b72:	ee37 3b04 	vadd.f64	d3, d7, d4
 8014b76:	ee34 6b43 	vsub.f64	d6, d4, d3
 8014b7a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8014b7e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8014b82:	ee36 6b03 	vadd.f64	d6, d6, d3
 8014b86:	ee36 7b44 	vsub.f64	d7, d6, d4
 8014b8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b92:	d104      	bne.n	8014b9e <pow+0x45e>
 8014b94:	4632      	mov	r2, r6
 8014b96:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8014b9a:	ec43 2b17 	vmov	d7, r2, r3
 8014b9e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014ba2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014ba6:	ee26 6b00 	vmul.f64	d6, d6, d0
 8014baa:	ed8d 6b04 	vstr	d6, [sp, #16]
 8014bae:	ee27 0b00 	vmul.f64	d0, d7, d0
 8014bb2:	b007      	add	sp, #28
 8014bb4:	ecbd 8b0a 	vpop	{d8-d12}
 8014bb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bbc:	f000 bae7 	b.w	801518e <__math_check_uflow>
 8014bc0:	ec43 2b10 	vmov	d0, r2, r3
 8014bc4:	eea7 0b00 	vfma.f64	d0, d7, d0
 8014bc8:	e625      	b.n	8014816 <pow+0xd6>
 8014bca:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8014bd8 <pow+0x498>
 8014bce:	e622      	b.n	8014816 <pow+0xd6>
 8014bd0:	00000000 	.word	0x00000000
 8014bd4:	00100000 	.word	0x00100000
	...

08014be0 <cos>:
 8014be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014be2:	eeb0 7b40 	vmov.f64	d7, d0
 8014be6:	ee17 3a90 	vmov	r3, s15
 8014bea:	4a21      	ldr	r2, [pc, #132]	@ (8014c70 <cos+0x90>)
 8014bec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014bf0:	4293      	cmp	r3, r2
 8014bf2:	d806      	bhi.n	8014c02 <cos+0x22>
 8014bf4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8014c68 <cos+0x88>
 8014bf8:	b005      	add	sp, #20
 8014bfa:	f85d eb04 	ldr.w	lr, [sp], #4
 8014bfe:	f000 bd5f 	b.w	80156c0 <__kernel_cos>
 8014c02:	4a1c      	ldr	r2, [pc, #112]	@ (8014c74 <cos+0x94>)
 8014c04:	4293      	cmp	r3, r2
 8014c06:	d904      	bls.n	8014c12 <cos+0x32>
 8014c08:	ee30 0b40 	vsub.f64	d0, d0, d0
 8014c0c:	b005      	add	sp, #20
 8014c0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014c12:	4668      	mov	r0, sp
 8014c14:	f000 f8f8 	bl	8014e08 <__ieee754_rem_pio2>
 8014c18:	f000 0003 	and.w	r0, r0, #3
 8014c1c:	2801      	cmp	r0, #1
 8014c1e:	d009      	beq.n	8014c34 <cos+0x54>
 8014c20:	2802      	cmp	r0, #2
 8014c22:	d010      	beq.n	8014c46 <cos+0x66>
 8014c24:	b9b0      	cbnz	r0, 8014c54 <cos+0x74>
 8014c26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014c2a:	ed9d 0b00 	vldr	d0, [sp]
 8014c2e:	f000 fd47 	bl	80156c0 <__kernel_cos>
 8014c32:	e7eb      	b.n	8014c0c <cos+0x2c>
 8014c34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014c38:	ed9d 0b00 	vldr	d0, [sp]
 8014c3c:	f000 fda8 	bl	8015790 <__kernel_sin>
 8014c40:	eeb1 0b40 	vneg.f64	d0, d0
 8014c44:	e7e2      	b.n	8014c0c <cos+0x2c>
 8014c46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014c4a:	ed9d 0b00 	vldr	d0, [sp]
 8014c4e:	f000 fd37 	bl	80156c0 <__kernel_cos>
 8014c52:	e7f5      	b.n	8014c40 <cos+0x60>
 8014c54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014c58:	ed9d 0b00 	vldr	d0, [sp]
 8014c5c:	2001      	movs	r0, #1
 8014c5e:	f000 fd97 	bl	8015790 <__kernel_sin>
 8014c62:	e7d3      	b.n	8014c0c <cos+0x2c>
 8014c64:	f3af 8000 	nop.w
	...
 8014c70:	3fe921fb 	.word	0x3fe921fb
 8014c74:	7fefffff 	.word	0x7fefffff

08014c78 <sin>:
 8014c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014c7a:	eeb0 7b40 	vmov.f64	d7, d0
 8014c7e:	ee17 3a90 	vmov	r3, s15
 8014c82:	4a21      	ldr	r2, [pc, #132]	@ (8014d08 <sin+0x90>)
 8014c84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014c88:	4293      	cmp	r3, r2
 8014c8a:	d807      	bhi.n	8014c9c <sin+0x24>
 8014c8c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8014d00 <sin+0x88>
 8014c90:	2000      	movs	r0, #0
 8014c92:	b005      	add	sp, #20
 8014c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c98:	f000 bd7a 	b.w	8015790 <__kernel_sin>
 8014c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8014d0c <sin+0x94>)
 8014c9e:	4293      	cmp	r3, r2
 8014ca0:	d904      	bls.n	8014cac <sin+0x34>
 8014ca2:	ee30 0b40 	vsub.f64	d0, d0, d0
 8014ca6:	b005      	add	sp, #20
 8014ca8:	f85d fb04 	ldr.w	pc, [sp], #4
 8014cac:	4668      	mov	r0, sp
 8014cae:	f000 f8ab 	bl	8014e08 <__ieee754_rem_pio2>
 8014cb2:	f000 0003 	and.w	r0, r0, #3
 8014cb6:	2801      	cmp	r0, #1
 8014cb8:	d00a      	beq.n	8014cd0 <sin+0x58>
 8014cba:	2802      	cmp	r0, #2
 8014cbc:	d00f      	beq.n	8014cde <sin+0x66>
 8014cbe:	b9c0      	cbnz	r0, 8014cf2 <sin+0x7a>
 8014cc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014cc4:	ed9d 0b00 	vldr	d0, [sp]
 8014cc8:	2001      	movs	r0, #1
 8014cca:	f000 fd61 	bl	8015790 <__kernel_sin>
 8014cce:	e7ea      	b.n	8014ca6 <sin+0x2e>
 8014cd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014cd4:	ed9d 0b00 	vldr	d0, [sp]
 8014cd8:	f000 fcf2 	bl	80156c0 <__kernel_cos>
 8014cdc:	e7e3      	b.n	8014ca6 <sin+0x2e>
 8014cde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014ce2:	ed9d 0b00 	vldr	d0, [sp]
 8014ce6:	2001      	movs	r0, #1
 8014ce8:	f000 fd52 	bl	8015790 <__kernel_sin>
 8014cec:	eeb1 0b40 	vneg.f64	d0, d0
 8014cf0:	e7d9      	b.n	8014ca6 <sin+0x2e>
 8014cf2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014cf6:	ed9d 0b00 	vldr	d0, [sp]
 8014cfa:	f000 fce1 	bl	80156c0 <__kernel_cos>
 8014cfe:	e7f5      	b.n	8014cec <sin+0x74>
	...
 8014d08:	3fe921fb 	.word	0x3fe921fb
 8014d0c:	7fefffff 	.word	0x7fefffff

08014d10 <cimag>:
 8014d10:	eeb0 0b41 	vmov.f64	d0, d1
 8014d14:	4770      	bx	lr

08014d16 <creal>:
 8014d16:	4770      	bx	lr

08014d18 <floor>:
 8014d18:	ee10 3a90 	vmov	r3, s1
 8014d1c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8014d20:	ee10 2a10 	vmov	r2, s0
 8014d24:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8014d28:	2913      	cmp	r1, #19
 8014d2a:	b530      	push	{r4, r5, lr}
 8014d2c:	4615      	mov	r5, r2
 8014d2e:	dc33      	bgt.n	8014d98 <floor+0x80>
 8014d30:	2900      	cmp	r1, #0
 8014d32:	da18      	bge.n	8014d66 <floor+0x4e>
 8014d34:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8014df8 <floor+0xe0>
 8014d38:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014d3c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d44:	dd0a      	ble.n	8014d5c <floor+0x44>
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	da50      	bge.n	8014dec <floor+0xd4>
 8014d4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014d4e:	4313      	orrs	r3, r2
 8014d50:	2200      	movs	r2, #0
 8014d52:	4293      	cmp	r3, r2
 8014d54:	4b2a      	ldr	r3, [pc, #168]	@ (8014e00 <floor+0xe8>)
 8014d56:	bf08      	it	eq
 8014d58:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8014d5c:	4619      	mov	r1, r3
 8014d5e:	4610      	mov	r0, r2
 8014d60:	ec41 0b10 	vmov	d0, r0, r1
 8014d64:	e01f      	b.n	8014da6 <floor+0x8e>
 8014d66:	4827      	ldr	r0, [pc, #156]	@ (8014e04 <floor+0xec>)
 8014d68:	4108      	asrs	r0, r1
 8014d6a:	ea03 0400 	and.w	r4, r3, r0
 8014d6e:	4314      	orrs	r4, r2
 8014d70:	d019      	beq.n	8014da6 <floor+0x8e>
 8014d72:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014df8 <floor+0xe0>
 8014d76:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014d7a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d82:	ddeb      	ble.n	8014d5c <floor+0x44>
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	bfbe      	ittt	lt
 8014d88:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8014d8c:	410a      	asrlt	r2, r1
 8014d8e:	189b      	addlt	r3, r3, r2
 8014d90:	ea23 0300 	bic.w	r3, r3, r0
 8014d94:	2200      	movs	r2, #0
 8014d96:	e7e1      	b.n	8014d5c <floor+0x44>
 8014d98:	2933      	cmp	r1, #51	@ 0x33
 8014d9a:	dd05      	ble.n	8014da8 <floor+0x90>
 8014d9c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014da0:	d101      	bne.n	8014da6 <floor+0x8e>
 8014da2:	ee30 0b00 	vadd.f64	d0, d0, d0
 8014da6:	bd30      	pop	{r4, r5, pc}
 8014da8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8014dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014db0:	40e0      	lsrs	r0, r4
 8014db2:	4210      	tst	r0, r2
 8014db4:	d0f7      	beq.n	8014da6 <floor+0x8e>
 8014db6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8014df8 <floor+0xe0>
 8014dba:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014dbe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dc6:	ddc9      	ble.n	8014d5c <floor+0x44>
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	da02      	bge.n	8014dd2 <floor+0xba>
 8014dcc:	2914      	cmp	r1, #20
 8014dce:	d103      	bne.n	8014dd8 <floor+0xc0>
 8014dd0:	3301      	adds	r3, #1
 8014dd2:	ea22 0200 	bic.w	r2, r2, r0
 8014dd6:	e7c1      	b.n	8014d5c <floor+0x44>
 8014dd8:	2401      	movs	r4, #1
 8014dda:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8014dde:	fa04 f101 	lsl.w	r1, r4, r1
 8014de2:	440a      	add	r2, r1
 8014de4:	42aa      	cmp	r2, r5
 8014de6:	bf38      	it	cc
 8014de8:	191b      	addcc	r3, r3, r4
 8014dea:	e7f2      	b.n	8014dd2 <floor+0xba>
 8014dec:	2200      	movs	r2, #0
 8014dee:	4613      	mov	r3, r2
 8014df0:	e7b4      	b.n	8014d5c <floor+0x44>
 8014df2:	bf00      	nop
 8014df4:	f3af 8000 	nop.w
 8014df8:	8800759c 	.word	0x8800759c
 8014dfc:	7e37e43c 	.word	0x7e37e43c
 8014e00:	bff00000 	.word	0xbff00000
 8014e04:	000fffff 	.word	0x000fffff

08014e08 <__ieee754_rem_pio2>:
 8014e08:	b570      	push	{r4, r5, r6, lr}
 8014e0a:	eeb0 7b40 	vmov.f64	d7, d0
 8014e0e:	ee17 5a90 	vmov	r5, s15
 8014e12:	4b99      	ldr	r3, [pc, #612]	@ (8015078 <__ieee754_rem_pio2+0x270>)
 8014e14:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8014e18:	429e      	cmp	r6, r3
 8014e1a:	b088      	sub	sp, #32
 8014e1c:	4604      	mov	r4, r0
 8014e1e:	d807      	bhi.n	8014e30 <__ieee754_rem_pio2+0x28>
 8014e20:	2200      	movs	r2, #0
 8014e22:	2300      	movs	r3, #0
 8014e24:	ed84 0b00 	vstr	d0, [r4]
 8014e28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014e2c:	2000      	movs	r0, #0
 8014e2e:	e01b      	b.n	8014e68 <__ieee754_rem_pio2+0x60>
 8014e30:	4b92      	ldr	r3, [pc, #584]	@ (801507c <__ieee754_rem_pio2+0x274>)
 8014e32:	429e      	cmp	r6, r3
 8014e34:	d83b      	bhi.n	8014eae <__ieee754_rem_pio2+0xa6>
 8014e36:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8014e3a:	2d00      	cmp	r5, #0
 8014e3c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8015038 <__ieee754_rem_pio2+0x230>
 8014e40:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8014e44:	dd19      	ble.n	8014e7a <__ieee754_rem_pio2+0x72>
 8014e46:	ee30 7b46 	vsub.f64	d7, d0, d6
 8014e4a:	429e      	cmp	r6, r3
 8014e4c:	d00e      	beq.n	8014e6c <__ieee754_rem_pio2+0x64>
 8014e4e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8015040 <__ieee754_rem_pio2+0x238>
 8014e52:	ee37 6b45 	vsub.f64	d6, d7, d5
 8014e56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014e5a:	ed84 6b00 	vstr	d6, [r4]
 8014e5e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014e62:	ed84 7b02 	vstr	d7, [r4, #8]
 8014e66:	2001      	movs	r0, #1
 8014e68:	b008      	add	sp, #32
 8014e6a:	bd70      	pop	{r4, r5, r6, pc}
 8014e6c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8015048 <__ieee754_rem_pio2+0x240>
 8014e70:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8015050 <__ieee754_rem_pio2+0x248>
 8014e74:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014e78:	e7eb      	b.n	8014e52 <__ieee754_rem_pio2+0x4a>
 8014e7a:	429e      	cmp	r6, r3
 8014e7c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8014e80:	d00e      	beq.n	8014ea0 <__ieee754_rem_pio2+0x98>
 8014e82:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8015040 <__ieee754_rem_pio2+0x238>
 8014e86:	ee37 6b05 	vadd.f64	d6, d7, d5
 8014e8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014e8e:	ed84 6b00 	vstr	d6, [r4]
 8014e92:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014e96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014e9a:	ed84 7b02 	vstr	d7, [r4, #8]
 8014e9e:	e7e3      	b.n	8014e68 <__ieee754_rem_pio2+0x60>
 8014ea0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8015048 <__ieee754_rem_pio2+0x240>
 8014ea4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8015050 <__ieee754_rem_pio2+0x248>
 8014ea8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014eac:	e7eb      	b.n	8014e86 <__ieee754_rem_pio2+0x7e>
 8014eae:	4b74      	ldr	r3, [pc, #464]	@ (8015080 <__ieee754_rem_pio2+0x278>)
 8014eb0:	429e      	cmp	r6, r3
 8014eb2:	d870      	bhi.n	8014f96 <__ieee754_rem_pio2+0x18e>
 8014eb4:	f000 fcc4 	bl	8015840 <fabs>
 8014eb8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8014ebc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8015058 <__ieee754_rem_pio2+0x250>
 8014ec0:	eea0 7b06 	vfma.f64	d7, d0, d6
 8014ec4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014ec8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014ecc:	ee17 0a90 	vmov	r0, s15
 8014ed0:	eeb1 4b45 	vneg.f64	d4, d5
 8014ed4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8015038 <__ieee754_rem_pio2+0x230>
 8014ed8:	eea5 0b47 	vfms.f64	d0, d5, d7
 8014edc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8015040 <__ieee754_rem_pio2+0x238>
 8014ee0:	281f      	cmp	r0, #31
 8014ee2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8014ee6:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014eea:	dc05      	bgt.n	8014ef8 <__ieee754_rem_pio2+0xf0>
 8014eec:	4b65      	ldr	r3, [pc, #404]	@ (8015084 <__ieee754_rem_pio2+0x27c>)
 8014eee:	1e42      	subs	r2, r0, #1
 8014ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ef4:	42b3      	cmp	r3, r6
 8014ef6:	d109      	bne.n	8014f0c <__ieee754_rem_pio2+0x104>
 8014ef8:	ee16 3a90 	vmov	r3, s13
 8014efc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8014f00:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8014f04:	2b10      	cmp	r3, #16
 8014f06:	ea4f 5226 	mov.w	r2, r6, asr #20
 8014f0a:	dc02      	bgt.n	8014f12 <__ieee754_rem_pio2+0x10a>
 8014f0c:	ed84 6b00 	vstr	d6, [r4]
 8014f10:	e01a      	b.n	8014f48 <__ieee754_rem_pio2+0x140>
 8014f12:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8015048 <__ieee754_rem_pio2+0x240>
 8014f16:	eeb0 6b40 	vmov.f64	d6, d0
 8014f1a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8014f1e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8014f22:	eea4 7b03 	vfma.f64	d7, d4, d3
 8014f26:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8015050 <__ieee754_rem_pio2+0x248>
 8014f2a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8014f2e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8014f32:	ee13 3a90 	vmov	r3, s7
 8014f36:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8014f3a:	1ad3      	subs	r3, r2, r3
 8014f3c:	2b31      	cmp	r3, #49	@ 0x31
 8014f3e:	dc17      	bgt.n	8014f70 <__ieee754_rem_pio2+0x168>
 8014f40:	eeb0 0b46 	vmov.f64	d0, d6
 8014f44:	ed84 3b00 	vstr	d3, [r4]
 8014f48:	ed94 6b00 	vldr	d6, [r4]
 8014f4c:	2d00      	cmp	r5, #0
 8014f4e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8014f52:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014f56:	ed84 0b02 	vstr	d0, [r4, #8]
 8014f5a:	da85      	bge.n	8014e68 <__ieee754_rem_pio2+0x60>
 8014f5c:	eeb1 6b46 	vneg.f64	d6, d6
 8014f60:	eeb1 0b40 	vneg.f64	d0, d0
 8014f64:	ed84 6b00 	vstr	d6, [r4]
 8014f68:	ed84 0b02 	vstr	d0, [r4, #8]
 8014f6c:	4240      	negs	r0, r0
 8014f6e:	e77b      	b.n	8014e68 <__ieee754_rem_pio2+0x60>
 8014f70:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8015060 <__ieee754_rem_pio2+0x258>
 8014f74:	eeb0 0b46 	vmov.f64	d0, d6
 8014f78:	eea4 0b07 	vfma.f64	d0, d4, d7
 8014f7c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8014f80:	eea4 6b07 	vfma.f64	d6, d4, d7
 8014f84:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8015068 <__ieee754_rem_pio2+0x260>
 8014f88:	eeb0 7b46 	vmov.f64	d7, d6
 8014f8c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8014f90:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014f94:	e7ba      	b.n	8014f0c <__ieee754_rem_pio2+0x104>
 8014f96:	4b3c      	ldr	r3, [pc, #240]	@ (8015088 <__ieee754_rem_pio2+0x280>)
 8014f98:	429e      	cmp	r6, r3
 8014f9a:	d906      	bls.n	8014faa <__ieee754_rem_pio2+0x1a2>
 8014f9c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8014fa0:	ed80 7b02 	vstr	d7, [r0, #8]
 8014fa4:	ed80 7b00 	vstr	d7, [r0]
 8014fa8:	e740      	b.n	8014e2c <__ieee754_rem_pio2+0x24>
 8014faa:	ee10 3a10 	vmov	r3, s0
 8014fae:	1532      	asrs	r2, r6, #20
 8014fb0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8014fba:	ec41 0b17 	vmov	d7, r0, r1
 8014fbe:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8014fc2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8015070 <__ieee754_rem_pio2+0x268>
 8014fc6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8014fca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014fce:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014fd2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8014fd6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8014fda:	a808      	add	r0, sp, #32
 8014fdc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8014fe0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014fe4:	ed8d 6b04 	vstr	d6, [sp, #16]
 8014fe8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8014fec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014ff0:	2103      	movs	r1, #3
 8014ff2:	ed30 7b02 	vldmdb	r0!, {d7}
 8014ff6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ffe:	460b      	mov	r3, r1
 8015000:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8015004:	d0f5      	beq.n	8014ff2 <__ieee754_rem_pio2+0x1ea>
 8015006:	4921      	ldr	r1, [pc, #132]	@ (801508c <__ieee754_rem_pio2+0x284>)
 8015008:	9101      	str	r1, [sp, #4]
 801500a:	2102      	movs	r1, #2
 801500c:	9100      	str	r1, [sp, #0]
 801500e:	a802      	add	r0, sp, #8
 8015010:	4621      	mov	r1, r4
 8015012:	f000 f8d9 	bl	80151c8 <__kernel_rem_pio2>
 8015016:	2d00      	cmp	r5, #0
 8015018:	f6bf af26 	bge.w	8014e68 <__ieee754_rem_pio2+0x60>
 801501c:	ed94 7b00 	vldr	d7, [r4]
 8015020:	eeb1 7b47 	vneg.f64	d7, d7
 8015024:	ed84 7b00 	vstr	d7, [r4]
 8015028:	ed94 7b02 	vldr	d7, [r4, #8]
 801502c:	eeb1 7b47 	vneg.f64	d7, d7
 8015030:	ed84 7b02 	vstr	d7, [r4, #8]
 8015034:	e79a      	b.n	8014f6c <__ieee754_rem_pio2+0x164>
 8015036:	bf00      	nop
 8015038:	54400000 	.word	0x54400000
 801503c:	3ff921fb 	.word	0x3ff921fb
 8015040:	1a626331 	.word	0x1a626331
 8015044:	3dd0b461 	.word	0x3dd0b461
 8015048:	1a600000 	.word	0x1a600000
 801504c:	3dd0b461 	.word	0x3dd0b461
 8015050:	2e037073 	.word	0x2e037073
 8015054:	3ba3198a 	.word	0x3ba3198a
 8015058:	6dc9c883 	.word	0x6dc9c883
 801505c:	3fe45f30 	.word	0x3fe45f30
 8015060:	2e000000 	.word	0x2e000000
 8015064:	3ba3198a 	.word	0x3ba3198a
 8015068:	252049c1 	.word	0x252049c1
 801506c:	397b839a 	.word	0x397b839a
 8015070:	00000000 	.word	0x00000000
 8015074:	41700000 	.word	0x41700000
 8015078:	3fe921fb 	.word	0x3fe921fb
 801507c:	4002d97b 	.word	0x4002d97b
 8015080:	413921fb 	.word	0x413921fb
 8015084:	080178f8 	.word	0x080178f8
 8015088:	7fefffff 	.word	0x7fefffff
 801508c:	08017978 	.word	0x08017978

08015090 <hypot>:
 8015090:	b508      	push	{r3, lr}
 8015092:	ed2d 8b06 	vpush	{d8-d10}
 8015096:	eeb0 ab40 	vmov.f64	d10, d0
 801509a:	eeb0 9b41 	vmov.f64	d9, d1
 801509e:	f000 fc63 	bl	8015968 <__ieee754_hypot>
 80150a2:	eeb0 8b40 	vmov.f64	d8, d0
 80150a6:	f000 fbd3 	bl	8015850 <finite>
 80150aa:	b978      	cbnz	r0, 80150cc <hypot+0x3c>
 80150ac:	eeb0 0b4a 	vmov.f64	d0, d10
 80150b0:	f000 fbce 	bl	8015850 <finite>
 80150b4:	b150      	cbz	r0, 80150cc <hypot+0x3c>
 80150b6:	eeb0 0b49 	vmov.f64	d0, d9
 80150ba:	f000 fbc9 	bl	8015850 <finite>
 80150be:	b128      	cbz	r0, 80150cc <hypot+0x3c>
 80150c0:	f7fb fe70 	bl	8010da4 <__errno>
 80150c4:	ed9f 8b04 	vldr	d8, [pc, #16]	@ 80150d8 <hypot+0x48>
 80150c8:	2322      	movs	r3, #34	@ 0x22
 80150ca:	6003      	str	r3, [r0, #0]
 80150cc:	eeb0 0b48 	vmov.f64	d0, d8
 80150d0:	ecbd 8b06 	vpop	{d8-d10}
 80150d4:	bd08      	pop	{r3, pc}
 80150d6:	bf00      	nop
 80150d8:	00000000 	.word	0x00000000
 80150dc:	7ff00000 	.word	0x7ff00000

080150e0 <with_errno>:
 80150e0:	b510      	push	{r4, lr}
 80150e2:	ed2d 8b02 	vpush	{d8}
 80150e6:	eeb0 8b40 	vmov.f64	d8, d0
 80150ea:	4604      	mov	r4, r0
 80150ec:	f7fb fe5a 	bl	8010da4 <__errno>
 80150f0:	eeb0 0b48 	vmov.f64	d0, d8
 80150f4:	ecbd 8b02 	vpop	{d8}
 80150f8:	6004      	str	r4, [r0, #0]
 80150fa:	bd10      	pop	{r4, pc}

080150fc <xflow>:
 80150fc:	b082      	sub	sp, #8
 80150fe:	b158      	cbz	r0, 8015118 <xflow+0x1c>
 8015100:	eeb1 7b40 	vneg.f64	d7, d0
 8015104:	ed8d 7b00 	vstr	d7, [sp]
 8015108:	ed9d 7b00 	vldr	d7, [sp]
 801510c:	2022      	movs	r0, #34	@ 0x22
 801510e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015112:	b002      	add	sp, #8
 8015114:	f7ff bfe4 	b.w	80150e0 <with_errno>
 8015118:	eeb0 7b40 	vmov.f64	d7, d0
 801511c:	e7f2      	b.n	8015104 <xflow+0x8>
	...

08015120 <__math_uflow>:
 8015120:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015128 <__math_uflow+0x8>
 8015124:	f7ff bfea 	b.w	80150fc <xflow>
 8015128:	00000000 	.word	0x00000000
 801512c:	10000000 	.word	0x10000000

08015130 <__math_oflow>:
 8015130:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015138 <__math_oflow+0x8>
 8015134:	f7ff bfe2 	b.w	80150fc <xflow>
 8015138:	00000000 	.word	0x00000000
 801513c:	70000000 	.word	0x70000000

08015140 <__math_divzero>:
 8015140:	b082      	sub	sp, #8
 8015142:	2800      	cmp	r0, #0
 8015144:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8015148:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801514c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8015150:	ed8d 7b00 	vstr	d7, [sp]
 8015154:	ed9d 0b00 	vldr	d0, [sp]
 8015158:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8015168 <__math_divzero+0x28>
 801515c:	2022      	movs	r0, #34	@ 0x22
 801515e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8015162:	b002      	add	sp, #8
 8015164:	f7ff bfbc 	b.w	80150e0 <with_errno>
	...

08015170 <__math_invalid>:
 8015170:	eeb0 7b40 	vmov.f64	d7, d0
 8015174:	eeb4 7b47 	vcmp.f64	d7, d7
 8015178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801517c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8015180:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8015184:	d602      	bvs.n	801518c <__math_invalid+0x1c>
 8015186:	2021      	movs	r0, #33	@ 0x21
 8015188:	f7ff bfaa 	b.w	80150e0 <with_errno>
 801518c:	4770      	bx	lr

0801518e <__math_check_uflow>:
 801518e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8015192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015196:	d102      	bne.n	801519e <__math_check_uflow+0x10>
 8015198:	2022      	movs	r0, #34	@ 0x22
 801519a:	f7ff bfa1 	b.w	80150e0 <with_errno>
 801519e:	4770      	bx	lr

080151a0 <__math_check_oflow>:
 80151a0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 80151c0 <__math_check_oflow+0x20>
 80151a4:	eeb0 7bc0 	vabs.f64	d7, d0
 80151a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80151ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151b0:	dd02      	ble.n	80151b8 <__math_check_oflow+0x18>
 80151b2:	2022      	movs	r0, #34	@ 0x22
 80151b4:	f7ff bf94 	b.w	80150e0 <with_errno>
 80151b8:	4770      	bx	lr
 80151ba:	bf00      	nop
 80151bc:	f3af 8000 	nop.w
 80151c0:	ffffffff 	.word	0xffffffff
 80151c4:	7fefffff 	.word	0x7fefffff

080151c8 <__kernel_rem_pio2>:
 80151c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151cc:	ed2d 8b06 	vpush	{d8-d10}
 80151d0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 80151d4:	469b      	mov	fp, r3
 80151d6:	9001      	str	r0, [sp, #4]
 80151d8:	4bbb      	ldr	r3, [pc, #748]	@ (80154c8 <__kernel_rem_pio2+0x300>)
 80151da:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 80151dc:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 80151e0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 80151e4:	f112 0f14 	cmn.w	r2, #20
 80151e8:	bfa8      	it	ge
 80151ea:	1ed3      	subge	r3, r2, #3
 80151ec:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 80151f0:	bfb8      	it	lt
 80151f2:	2300      	movlt	r3, #0
 80151f4:	f06f 0517 	mvn.w	r5, #23
 80151f8:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 80154b0 <__kernel_rem_pio2+0x2e8>
 80151fc:	bfa4      	itt	ge
 80151fe:	2018      	movge	r0, #24
 8015200:	fb93 f3f0 	sdivge	r3, r3, r0
 8015204:	fb03 5505 	mla	r5, r3, r5, r5
 8015208:	eba3 040a 	sub.w	r4, r3, sl
 801520c:	4415      	add	r5, r2
 801520e:	460f      	mov	r7, r1
 8015210:	eb09 060a 	add.w	r6, r9, sl
 8015214:	a81a      	add	r0, sp, #104	@ 0x68
 8015216:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801521a:	2200      	movs	r2, #0
 801521c:	42b2      	cmp	r2, r6
 801521e:	dd0e      	ble.n	801523e <__kernel_rem_pio2+0x76>
 8015220:	aa1a      	add	r2, sp, #104	@ 0x68
 8015222:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8015226:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801522a:	2600      	movs	r6, #0
 801522c:	454e      	cmp	r6, r9
 801522e:	dc25      	bgt.n	801527c <__kernel_rem_pio2+0xb4>
 8015230:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80154b0 <__kernel_rem_pio2+0x2e8>
 8015234:	f8dd c004 	ldr.w	ip, [sp, #4]
 8015238:	4614      	mov	r4, r2
 801523a:	2000      	movs	r0, #0
 801523c:	e015      	b.n	801526a <__kernel_rem_pio2+0xa2>
 801523e:	42d4      	cmn	r4, r2
 8015240:	d409      	bmi.n	8015256 <__kernel_rem_pio2+0x8e>
 8015242:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8015246:	ee07 1a90 	vmov	s15, r1
 801524a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801524e:	eca0 7b02 	vstmia	r0!, {d7}
 8015252:	3201      	adds	r2, #1
 8015254:	e7e2      	b.n	801521c <__kernel_rem_pio2+0x54>
 8015256:	eeb0 7b46 	vmov.f64	d7, d6
 801525a:	e7f8      	b.n	801524e <__kernel_rem_pio2+0x86>
 801525c:	ecbc 5b02 	vldmia	ip!, {d5}
 8015260:	ed94 6b00 	vldr	d6, [r4]
 8015264:	3001      	adds	r0, #1
 8015266:	eea5 7b06 	vfma.f64	d7, d5, d6
 801526a:	4550      	cmp	r0, sl
 801526c:	f1a4 0408 	sub.w	r4, r4, #8
 8015270:	ddf4      	ble.n	801525c <__kernel_rem_pio2+0x94>
 8015272:	ecae 7b02 	vstmia	lr!, {d7}
 8015276:	3601      	adds	r6, #1
 8015278:	3208      	adds	r2, #8
 801527a:	e7d7      	b.n	801522c <__kernel_rem_pio2+0x64>
 801527c:	aa06      	add	r2, sp, #24
 801527e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 80154b8 <__kernel_rem_pio2+0x2f0>
 8015282:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 80154c0 <__kernel_rem_pio2+0x2f8>
 8015286:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801528a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801528e:	9203      	str	r2, [sp, #12]
 8015290:	9302      	str	r3, [sp, #8]
 8015292:	464c      	mov	r4, r9
 8015294:	00e3      	lsls	r3, r4, #3
 8015296:	9304      	str	r3, [sp, #16]
 8015298:	ab92      	add	r3, sp, #584	@ 0x248
 801529a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801529e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80152a2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80152a4:	ab06      	add	r3, sp, #24
 80152a6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80152aa:	461e      	mov	r6, r3
 80152ac:	4620      	mov	r0, r4
 80152ae:	2800      	cmp	r0, #0
 80152b0:	f1a2 0208 	sub.w	r2, r2, #8
 80152b4:	dc4a      	bgt.n	801534c <__kernel_rem_pio2+0x184>
 80152b6:	4628      	mov	r0, r5
 80152b8:	9305      	str	r3, [sp, #20]
 80152ba:	f000 fad5 	bl	8015868 <scalbn>
 80152be:	eeb0 8b40 	vmov.f64	d8, d0
 80152c2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80152c6:	ee28 0b00 	vmul.f64	d0, d8, d0
 80152ca:	f7ff fd25 	bl	8014d18 <floor>
 80152ce:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80152d2:	eea0 8b47 	vfms.f64	d8, d0, d7
 80152d6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80152da:	2d00      	cmp	r5, #0
 80152dc:	ee17 8a90 	vmov	r8, s15
 80152e0:	9b05      	ldr	r3, [sp, #20]
 80152e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80152e6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80152ea:	dd41      	ble.n	8015370 <__kernel_rem_pio2+0x1a8>
 80152ec:	1e60      	subs	r0, r4, #1
 80152ee:	aa06      	add	r2, sp, #24
 80152f0:	f1c5 0c18 	rsb	ip, r5, #24
 80152f4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80152f8:	fa46 f20c 	asr.w	r2, r6, ip
 80152fc:	4490      	add	r8, r2
 80152fe:	fa02 f20c 	lsl.w	r2, r2, ip
 8015302:	1ab6      	subs	r6, r6, r2
 8015304:	aa06      	add	r2, sp, #24
 8015306:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801530a:	f1c5 0217 	rsb	r2, r5, #23
 801530e:	4116      	asrs	r6, r2
 8015310:	2e00      	cmp	r6, #0
 8015312:	dd3c      	ble.n	801538e <__kernel_rem_pio2+0x1c6>
 8015314:	f04f 0c00 	mov.w	ip, #0
 8015318:	f108 0801 	add.w	r8, r8, #1
 801531c:	4660      	mov	r0, ip
 801531e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8015322:	4564      	cmp	r4, ip
 8015324:	dc66      	bgt.n	80153f4 <__kernel_rem_pio2+0x22c>
 8015326:	2d00      	cmp	r5, #0
 8015328:	dd03      	ble.n	8015332 <__kernel_rem_pio2+0x16a>
 801532a:	2d01      	cmp	r5, #1
 801532c:	d072      	beq.n	8015414 <__kernel_rem_pio2+0x24c>
 801532e:	2d02      	cmp	r5, #2
 8015330:	d07a      	beq.n	8015428 <__kernel_rem_pio2+0x260>
 8015332:	2e02      	cmp	r6, #2
 8015334:	d12b      	bne.n	801538e <__kernel_rem_pio2+0x1c6>
 8015336:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801533a:	ee30 8b48 	vsub.f64	d8, d0, d8
 801533e:	b330      	cbz	r0, 801538e <__kernel_rem_pio2+0x1c6>
 8015340:	4628      	mov	r0, r5
 8015342:	f000 fa91 	bl	8015868 <scalbn>
 8015346:	ee38 8b40 	vsub.f64	d8, d8, d0
 801534a:	e020      	b.n	801538e <__kernel_rem_pio2+0x1c6>
 801534c:	ee20 7b09 	vmul.f64	d7, d0, d9
 8015350:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8015354:	3801      	subs	r0, #1
 8015356:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801535a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801535e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015362:	eca6 0a01 	vstmia	r6!, {s0}
 8015366:	ed92 0b00 	vldr	d0, [r2]
 801536a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801536e:	e79e      	b.n	80152ae <__kernel_rem_pio2+0xe6>
 8015370:	d105      	bne.n	801537e <__kernel_rem_pio2+0x1b6>
 8015372:	1e62      	subs	r2, r4, #1
 8015374:	a906      	add	r1, sp, #24
 8015376:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801537a:	15f6      	asrs	r6, r6, #23
 801537c:	e7c8      	b.n	8015310 <__kernel_rem_pio2+0x148>
 801537e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8015382:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801538a:	da31      	bge.n	80153f0 <__kernel_rem_pio2+0x228>
 801538c:	2600      	movs	r6, #0
 801538e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015396:	f040 809b 	bne.w	80154d0 <__kernel_rem_pio2+0x308>
 801539a:	1e62      	subs	r2, r4, #1
 801539c:	2000      	movs	r0, #0
 801539e:	454a      	cmp	r2, r9
 80153a0:	da49      	bge.n	8015436 <__kernel_rem_pio2+0x26e>
 80153a2:	2800      	cmp	r0, #0
 80153a4:	d062      	beq.n	801546c <__kernel_rem_pio2+0x2a4>
 80153a6:	3c01      	subs	r4, #1
 80153a8:	ab06      	add	r3, sp, #24
 80153aa:	3d18      	subs	r5, #24
 80153ac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d0f8      	beq.n	80153a6 <__kernel_rem_pio2+0x1de>
 80153b4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80153b8:	4628      	mov	r0, r5
 80153ba:	f000 fa55 	bl	8015868 <scalbn>
 80153be:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80154b8 <__kernel_rem_pio2+0x2f0>
 80153c2:	1c62      	adds	r2, r4, #1
 80153c4:	a96a      	add	r1, sp, #424	@ 0x1a8
 80153c6:	00d3      	lsls	r3, r2, #3
 80153c8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80153cc:	4622      	mov	r2, r4
 80153ce:	2a00      	cmp	r2, #0
 80153d0:	f280 80a8 	bge.w	8015524 <__kernel_rem_pio2+0x35c>
 80153d4:	4622      	mov	r2, r4
 80153d6:	2a00      	cmp	r2, #0
 80153d8:	f2c0 80c6 	blt.w	8015568 <__kernel_rem_pio2+0x3a0>
 80153dc:	a96a      	add	r1, sp, #424	@ 0x1a8
 80153de:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80153e2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80154b0 <__kernel_rem_pio2+0x2e8>
 80153e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 80154cc <__kernel_rem_pio2+0x304>
 80153ea:	2000      	movs	r0, #0
 80153ec:	1aa1      	subs	r1, r4, r2
 80153ee:	e0b0      	b.n	8015552 <__kernel_rem_pio2+0x38a>
 80153f0:	2602      	movs	r6, #2
 80153f2:	e78f      	b.n	8015314 <__kernel_rem_pio2+0x14c>
 80153f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80153f8:	b948      	cbnz	r0, 801540e <__kernel_rem_pio2+0x246>
 80153fa:	b122      	cbz	r2, 8015406 <__kernel_rem_pio2+0x23e>
 80153fc:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8015400:	f843 2c04 	str.w	r2, [r3, #-4]
 8015404:	2201      	movs	r2, #1
 8015406:	f10c 0c01 	add.w	ip, ip, #1
 801540a:	4610      	mov	r0, r2
 801540c:	e789      	b.n	8015322 <__kernel_rem_pio2+0x15a>
 801540e:	ebae 0202 	sub.w	r2, lr, r2
 8015412:	e7f5      	b.n	8015400 <__kernel_rem_pio2+0x238>
 8015414:	1e62      	subs	r2, r4, #1
 8015416:	ab06      	add	r3, sp, #24
 8015418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801541c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015420:	a906      	add	r1, sp, #24
 8015422:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015426:	e784      	b.n	8015332 <__kernel_rem_pio2+0x16a>
 8015428:	1e62      	subs	r2, r4, #1
 801542a:	ab06      	add	r3, sp, #24
 801542c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015430:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015434:	e7f4      	b.n	8015420 <__kernel_rem_pio2+0x258>
 8015436:	ab06      	add	r3, sp, #24
 8015438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801543c:	3a01      	subs	r2, #1
 801543e:	4318      	orrs	r0, r3
 8015440:	e7ad      	b.n	801539e <__kernel_rem_pio2+0x1d6>
 8015442:	3301      	adds	r3, #1
 8015444:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8015448:	2800      	cmp	r0, #0
 801544a:	d0fa      	beq.n	8015442 <__kernel_rem_pio2+0x27a>
 801544c:	9a04      	ldr	r2, [sp, #16]
 801544e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8015452:	446a      	add	r2, sp
 8015454:	eb04 000b 	add.w	r0, r4, fp
 8015458:	a91a      	add	r1, sp, #104	@ 0x68
 801545a:	1c66      	adds	r6, r4, #1
 801545c:	3a98      	subs	r2, #152	@ 0x98
 801545e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8015462:	4423      	add	r3, r4
 8015464:	42b3      	cmp	r3, r6
 8015466:	da04      	bge.n	8015472 <__kernel_rem_pio2+0x2aa>
 8015468:	461c      	mov	r4, r3
 801546a:	e713      	b.n	8015294 <__kernel_rem_pio2+0xcc>
 801546c:	9a03      	ldr	r2, [sp, #12]
 801546e:	2301      	movs	r3, #1
 8015470:	e7e8      	b.n	8015444 <__kernel_rem_pio2+0x27c>
 8015472:	9902      	ldr	r1, [sp, #8]
 8015474:	f8dd c004 	ldr.w	ip, [sp, #4]
 8015478:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801547c:	9104      	str	r1, [sp, #16]
 801547e:	ee07 1a90 	vmov	s15, r1
 8015482:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015486:	2400      	movs	r4, #0
 8015488:	eca0 7b02 	vstmia	r0!, {d7}
 801548c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80154b0 <__kernel_rem_pio2+0x2e8>
 8015490:	4686      	mov	lr, r0
 8015492:	4554      	cmp	r4, sl
 8015494:	dd03      	ble.n	801549e <__kernel_rem_pio2+0x2d6>
 8015496:	eca2 7b02 	vstmia	r2!, {d7}
 801549a:	3601      	adds	r6, #1
 801549c:	e7e2      	b.n	8015464 <__kernel_rem_pio2+0x29c>
 801549e:	ecbc 5b02 	vldmia	ip!, {d5}
 80154a2:	ed3e 6b02 	vldmdb	lr!, {d6}
 80154a6:	3401      	adds	r4, #1
 80154a8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80154ac:	e7f1      	b.n	8015492 <__kernel_rem_pio2+0x2ca>
 80154ae:	bf00      	nop
	...
 80154bc:	3e700000 	.word	0x3e700000
 80154c0:	00000000 	.word	0x00000000
 80154c4:	41700000 	.word	0x41700000
 80154c8:	08018330 	.word	0x08018330
 80154cc:	080182f0 	.word	0x080182f0
 80154d0:	4268      	negs	r0, r5
 80154d2:	eeb0 0b48 	vmov.f64	d0, d8
 80154d6:	f000 f9c7 	bl	8015868 <scalbn>
 80154da:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 80156a8 <__kernel_rem_pio2+0x4e0>
 80154de:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80154e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154e6:	db17      	blt.n	8015518 <__kernel_rem_pio2+0x350>
 80154e8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 80156b0 <__kernel_rem_pio2+0x4e8>
 80154ec:	ee20 7b07 	vmul.f64	d7, d0, d7
 80154f0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80154f4:	aa06      	add	r2, sp, #24
 80154f6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80154fa:	eea5 0b46 	vfms.f64	d0, d5, d6
 80154fe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015502:	3518      	adds	r5, #24
 8015504:	ee10 3a10 	vmov	r3, s0
 8015508:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801550c:	ee17 3a10 	vmov	r3, s14
 8015510:	3401      	adds	r4, #1
 8015512:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8015516:	e74d      	b.n	80153b4 <__kernel_rem_pio2+0x1ec>
 8015518:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801551c:	aa06      	add	r2, sp, #24
 801551e:	ee10 3a10 	vmov	r3, s0
 8015522:	e7f6      	b.n	8015512 <__kernel_rem_pio2+0x34a>
 8015524:	a806      	add	r0, sp, #24
 8015526:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801552a:	9001      	str	r0, [sp, #4]
 801552c:	ee07 0a90 	vmov	s15, r0
 8015530:	3a01      	subs	r2, #1
 8015532:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015536:	ee27 7b00 	vmul.f64	d7, d7, d0
 801553a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801553e:	ed21 7b02 	vstmdb	r1!, {d7}
 8015542:	e744      	b.n	80153ce <__kernel_rem_pio2+0x206>
 8015544:	ecbc 5b02 	vldmia	ip!, {d5}
 8015548:	ecb5 6b02 	vldmia	r5!, {d6}
 801554c:	3001      	adds	r0, #1
 801554e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015552:	4548      	cmp	r0, r9
 8015554:	dc01      	bgt.n	801555a <__kernel_rem_pio2+0x392>
 8015556:	4281      	cmp	r1, r0
 8015558:	daf4      	bge.n	8015544 <__kernel_rem_pio2+0x37c>
 801555a:	a842      	add	r0, sp, #264	@ 0x108
 801555c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8015560:	ed81 7b00 	vstr	d7, [r1]
 8015564:	3a01      	subs	r2, #1
 8015566:	e736      	b.n	80153d6 <__kernel_rem_pio2+0x20e>
 8015568:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801556a:	2a02      	cmp	r2, #2
 801556c:	dc0a      	bgt.n	8015584 <__kernel_rem_pio2+0x3bc>
 801556e:	2a00      	cmp	r2, #0
 8015570:	dc2d      	bgt.n	80155ce <__kernel_rem_pio2+0x406>
 8015572:	d046      	beq.n	8015602 <__kernel_rem_pio2+0x43a>
 8015574:	f008 0007 	and.w	r0, r8, #7
 8015578:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801557c:	ecbd 8b06 	vpop	{d8-d10}
 8015580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015584:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8015586:	2a03      	cmp	r2, #3
 8015588:	d1f4      	bne.n	8015574 <__kernel_rem_pio2+0x3ac>
 801558a:	a942      	add	r1, sp, #264	@ 0x108
 801558c:	f1a3 0208 	sub.w	r2, r3, #8
 8015590:	440a      	add	r2, r1
 8015592:	4611      	mov	r1, r2
 8015594:	4620      	mov	r0, r4
 8015596:	2800      	cmp	r0, #0
 8015598:	f1a1 0108 	sub.w	r1, r1, #8
 801559c:	dc52      	bgt.n	8015644 <__kernel_rem_pio2+0x47c>
 801559e:	4621      	mov	r1, r4
 80155a0:	2901      	cmp	r1, #1
 80155a2:	f1a2 0208 	sub.w	r2, r2, #8
 80155a6:	dc5d      	bgt.n	8015664 <__kernel_rem_pio2+0x49c>
 80155a8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80156b8 <__kernel_rem_pio2+0x4f0>
 80155ac:	aa42      	add	r2, sp, #264	@ 0x108
 80155ae:	4413      	add	r3, r2
 80155b0:	2c01      	cmp	r4, #1
 80155b2:	dc67      	bgt.n	8015684 <__kernel_rem_pio2+0x4bc>
 80155b4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80155b8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80155bc:	2e00      	cmp	r6, #0
 80155be:	d167      	bne.n	8015690 <__kernel_rem_pio2+0x4c8>
 80155c0:	ed87 5b00 	vstr	d5, [r7]
 80155c4:	ed87 6b02 	vstr	d6, [r7, #8]
 80155c8:	ed87 7b04 	vstr	d7, [r7, #16]
 80155cc:	e7d2      	b.n	8015574 <__kernel_rem_pio2+0x3ac>
 80155ce:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80156b8 <__kernel_rem_pio2+0x4f0>
 80155d2:	aa42      	add	r2, sp, #264	@ 0x108
 80155d4:	4413      	add	r3, r2
 80155d6:	4622      	mov	r2, r4
 80155d8:	2a00      	cmp	r2, #0
 80155da:	da24      	bge.n	8015626 <__kernel_rem_pio2+0x45e>
 80155dc:	b34e      	cbz	r6, 8015632 <__kernel_rem_pio2+0x46a>
 80155de:	eeb1 7b46 	vneg.f64	d7, d6
 80155e2:	ed87 7b00 	vstr	d7, [r7]
 80155e6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 80155ea:	aa44      	add	r2, sp, #272	@ 0x110
 80155ec:	2301      	movs	r3, #1
 80155ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80155f2:	429c      	cmp	r4, r3
 80155f4:	da20      	bge.n	8015638 <__kernel_rem_pio2+0x470>
 80155f6:	b10e      	cbz	r6, 80155fc <__kernel_rem_pio2+0x434>
 80155f8:	eeb1 7b47 	vneg.f64	d7, d7
 80155fc:	ed87 7b02 	vstr	d7, [r7, #8]
 8015600:	e7b8      	b.n	8015574 <__kernel_rem_pio2+0x3ac>
 8015602:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80156b8 <__kernel_rem_pio2+0x4f0>
 8015606:	aa42      	add	r2, sp, #264	@ 0x108
 8015608:	4413      	add	r3, r2
 801560a:	2c00      	cmp	r4, #0
 801560c:	da05      	bge.n	801561a <__kernel_rem_pio2+0x452>
 801560e:	b10e      	cbz	r6, 8015614 <__kernel_rem_pio2+0x44c>
 8015610:	eeb1 7b47 	vneg.f64	d7, d7
 8015614:	ed87 7b00 	vstr	d7, [r7]
 8015618:	e7ac      	b.n	8015574 <__kernel_rem_pio2+0x3ac>
 801561a:	ed33 6b02 	vldmdb	r3!, {d6}
 801561e:	3c01      	subs	r4, #1
 8015620:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015624:	e7f1      	b.n	801560a <__kernel_rem_pio2+0x442>
 8015626:	ed33 7b02 	vldmdb	r3!, {d7}
 801562a:	3a01      	subs	r2, #1
 801562c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8015630:	e7d2      	b.n	80155d8 <__kernel_rem_pio2+0x410>
 8015632:	eeb0 7b46 	vmov.f64	d7, d6
 8015636:	e7d4      	b.n	80155e2 <__kernel_rem_pio2+0x41a>
 8015638:	ecb2 6b02 	vldmia	r2!, {d6}
 801563c:	3301      	adds	r3, #1
 801563e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015642:	e7d6      	b.n	80155f2 <__kernel_rem_pio2+0x42a>
 8015644:	ed91 7b00 	vldr	d7, [r1]
 8015648:	ed91 5b02 	vldr	d5, [r1, #8]
 801564c:	3801      	subs	r0, #1
 801564e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015652:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015656:	ed81 6b00 	vstr	d6, [r1]
 801565a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801565e:	ed81 7b02 	vstr	d7, [r1, #8]
 8015662:	e798      	b.n	8015596 <__kernel_rem_pio2+0x3ce>
 8015664:	ed92 7b00 	vldr	d7, [r2]
 8015668:	ed92 5b02 	vldr	d5, [r2, #8]
 801566c:	3901      	subs	r1, #1
 801566e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015672:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015676:	ed82 6b00 	vstr	d6, [r2]
 801567a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801567e:	ed82 7b02 	vstr	d7, [r2, #8]
 8015682:	e78d      	b.n	80155a0 <__kernel_rem_pio2+0x3d8>
 8015684:	ed33 6b02 	vldmdb	r3!, {d6}
 8015688:	3c01      	subs	r4, #1
 801568a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801568e:	e78f      	b.n	80155b0 <__kernel_rem_pio2+0x3e8>
 8015690:	eeb1 5b45 	vneg.f64	d5, d5
 8015694:	eeb1 6b46 	vneg.f64	d6, d6
 8015698:	ed87 5b00 	vstr	d5, [r7]
 801569c:	eeb1 7b47 	vneg.f64	d7, d7
 80156a0:	ed87 6b02 	vstr	d6, [r7, #8]
 80156a4:	e790      	b.n	80155c8 <__kernel_rem_pio2+0x400>
 80156a6:	bf00      	nop
 80156a8:	00000000 	.word	0x00000000
 80156ac:	41700000 	.word	0x41700000
 80156b0:	00000000 	.word	0x00000000
 80156b4:	3e700000 	.word	0x3e700000
	...

080156c0 <__kernel_cos>:
 80156c0:	eeb0 5b40 	vmov.f64	d5, d0
 80156c4:	ee15 1a90 	vmov	r1, s11
 80156c8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80156cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80156d0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 80156d4:	d204      	bcs.n	80156e0 <__kernel_cos+0x20>
 80156d6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 80156da:	ee17 3a90 	vmov	r3, s15
 80156de:	b343      	cbz	r3, 8015732 <__kernel_cos+0x72>
 80156e0:	ee25 6b05 	vmul.f64	d6, d5, d5
 80156e4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 80156e8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8015758 <__kernel_cos+0x98>
 80156ec:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015760 <__kernel_cos+0xa0>
 80156f0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80156f4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8015768 <__kernel_cos+0xa8>
 80156f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80156fc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015770 <__kernel_cos+0xb0>
 8015700:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015704:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8015778 <__kernel_cos+0xb8>
 8015708:	4b1f      	ldr	r3, [pc, #124]	@ (8015788 <__kernel_cos+0xc8>)
 801570a:	eea4 7b06 	vfma.f64	d7, d4, d6
 801570e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015780 <__kernel_cos+0xc0>
 8015712:	4299      	cmp	r1, r3
 8015714:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015718:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801571c:	ee24 4b06 	vmul.f64	d4, d4, d6
 8015720:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015724:	eea6 1b04 	vfma.f64	d1, d6, d4
 8015728:	d804      	bhi.n	8015734 <__kernel_cos+0x74>
 801572a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801572e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015732:	4770      	bx	lr
 8015734:	4b15      	ldr	r3, [pc, #84]	@ (801578c <__kernel_cos+0xcc>)
 8015736:	4299      	cmp	r1, r3
 8015738:	d809      	bhi.n	801574e <__kernel_cos+0x8e>
 801573a:	2200      	movs	r2, #0
 801573c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8015740:	ec43 2b16 	vmov	d6, r2, r3
 8015744:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015748:	ee37 7b46 	vsub.f64	d7, d7, d6
 801574c:	e7ed      	b.n	801572a <__kernel_cos+0x6a>
 801574e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8015752:	e7f7      	b.n	8015744 <__kernel_cos+0x84>
 8015754:	f3af 8000 	nop.w
 8015758:	be8838d4 	.word	0xbe8838d4
 801575c:	bda8fae9 	.word	0xbda8fae9
 8015760:	bdb4b1c4 	.word	0xbdb4b1c4
 8015764:	3e21ee9e 	.word	0x3e21ee9e
 8015768:	809c52ad 	.word	0x809c52ad
 801576c:	be927e4f 	.word	0xbe927e4f
 8015770:	19cb1590 	.word	0x19cb1590
 8015774:	3efa01a0 	.word	0x3efa01a0
 8015778:	16c15177 	.word	0x16c15177
 801577c:	bf56c16c 	.word	0xbf56c16c
 8015780:	5555554c 	.word	0x5555554c
 8015784:	3fa55555 	.word	0x3fa55555
 8015788:	3fd33332 	.word	0x3fd33332
 801578c:	3fe90000 	.word	0x3fe90000

08015790 <__kernel_sin>:
 8015790:	ee10 3a90 	vmov	r3, s1
 8015794:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015798:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801579c:	d204      	bcs.n	80157a8 <__kernel_sin+0x18>
 801579e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80157a2:	ee17 3a90 	vmov	r3, s15
 80157a6:	b35b      	cbz	r3, 8015800 <__kernel_sin+0x70>
 80157a8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80157ac:	ee20 5b06 	vmul.f64	d5, d0, d6
 80157b0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8015808 <__kernel_sin+0x78>
 80157b4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015810 <__kernel_sin+0x80>
 80157b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80157bc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015818 <__kernel_sin+0x88>
 80157c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80157c4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015820 <__kernel_sin+0x90>
 80157c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80157cc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015828 <__kernel_sin+0x98>
 80157d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80157d4:	b930      	cbnz	r0, 80157e4 <__kernel_sin+0x54>
 80157d6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015830 <__kernel_sin+0xa0>
 80157da:	eea6 4b07 	vfma.f64	d4, d6, d7
 80157de:	eea4 0b05 	vfma.f64	d0, d4, d5
 80157e2:	4770      	bx	lr
 80157e4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80157e8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 80157ec:	eea1 7b04 	vfma.f64	d7, d1, d4
 80157f0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80157f4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8015838 <__kernel_sin+0xa8>
 80157f8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80157fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8015800:	4770      	bx	lr
 8015802:	bf00      	nop
 8015804:	f3af 8000 	nop.w
 8015808:	5acfd57c 	.word	0x5acfd57c
 801580c:	3de5d93a 	.word	0x3de5d93a
 8015810:	8a2b9ceb 	.word	0x8a2b9ceb
 8015814:	be5ae5e6 	.word	0xbe5ae5e6
 8015818:	57b1fe7d 	.word	0x57b1fe7d
 801581c:	3ec71de3 	.word	0x3ec71de3
 8015820:	19c161d5 	.word	0x19c161d5
 8015824:	bf2a01a0 	.word	0xbf2a01a0
 8015828:	1110f8a6 	.word	0x1110f8a6
 801582c:	3f811111 	.word	0x3f811111
 8015830:	55555549 	.word	0x55555549
 8015834:	bfc55555 	.word	0xbfc55555
 8015838:	55555549 	.word	0x55555549
 801583c:	3fc55555 	.word	0x3fc55555

08015840 <fabs>:
 8015840:	ec51 0b10 	vmov	r0, r1, d0
 8015844:	4602      	mov	r2, r0
 8015846:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801584a:	ec43 2b10 	vmov	d0, r2, r3
 801584e:	4770      	bx	lr

08015850 <finite>:
 8015850:	b082      	sub	sp, #8
 8015852:	ed8d 0b00 	vstr	d0, [sp]
 8015856:	9801      	ldr	r0, [sp, #4]
 8015858:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801585c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015860:	0fc0      	lsrs	r0, r0, #31
 8015862:	b002      	add	sp, #8
 8015864:	4770      	bx	lr
	...

08015868 <scalbn>:
 8015868:	ee10 1a90 	vmov	r1, s1
 801586c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015870:	b98b      	cbnz	r3, 8015896 <scalbn+0x2e>
 8015872:	ee10 3a10 	vmov	r3, s0
 8015876:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801587a:	4319      	orrs	r1, r3
 801587c:	d00a      	beq.n	8015894 <scalbn+0x2c>
 801587e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8015930 <scalbn+0xc8>
 8015882:	4b37      	ldr	r3, [pc, #220]	@ (8015960 <scalbn+0xf8>)
 8015884:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015888:	4298      	cmp	r0, r3
 801588a:	da0b      	bge.n	80158a4 <scalbn+0x3c>
 801588c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8015938 <scalbn+0xd0>
 8015890:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015894:	4770      	bx	lr
 8015896:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801589a:	4293      	cmp	r3, r2
 801589c:	d107      	bne.n	80158ae <scalbn+0x46>
 801589e:	ee30 0b00 	vadd.f64	d0, d0, d0
 80158a2:	4770      	bx	lr
 80158a4:	ee10 1a90 	vmov	r1, s1
 80158a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80158ac:	3b36      	subs	r3, #54	@ 0x36
 80158ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80158b2:	4290      	cmp	r0, r2
 80158b4:	dd0d      	ble.n	80158d2 <scalbn+0x6a>
 80158b6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8015940 <scalbn+0xd8>
 80158ba:	ee10 3a90 	vmov	r3, s1
 80158be:	eeb0 6b47 	vmov.f64	d6, d7
 80158c2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8015948 <scalbn+0xe0>
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80158cc:	ee27 0b06 	vmul.f64	d0, d7, d6
 80158d0:	4770      	bx	lr
 80158d2:	4418      	add	r0, r3
 80158d4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 80158d8:	4298      	cmp	r0, r3
 80158da:	dcec      	bgt.n	80158b6 <scalbn+0x4e>
 80158dc:	2800      	cmp	r0, #0
 80158de:	dd0a      	ble.n	80158f6 <scalbn+0x8e>
 80158e0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80158e4:	ec53 2b10 	vmov	r2, r3, d0
 80158e8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80158ec:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80158f0:	ec43 2b10 	vmov	d0, r2, r3
 80158f4:	4770      	bx	lr
 80158f6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 80158fa:	da09      	bge.n	8015910 <scalbn+0xa8>
 80158fc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8015938 <scalbn+0xd0>
 8015900:	ee10 3a90 	vmov	r3, s1
 8015904:	eeb0 6b47 	vmov.f64	d6, d7
 8015908:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8015950 <scalbn+0xe8>
 801590c:	2b00      	cmp	r3, #0
 801590e:	e7db      	b.n	80158c8 <scalbn+0x60>
 8015910:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8015914:	ec53 2b10 	vmov	r2, r3, d0
 8015918:	3036      	adds	r0, #54	@ 0x36
 801591a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801591e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8015922:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8015958 <scalbn+0xf0>
 8015926:	ec43 2b10 	vmov	d0, r2, r3
 801592a:	e7b1      	b.n	8015890 <scalbn+0x28>
 801592c:	f3af 8000 	nop.w
 8015930:	00000000 	.word	0x00000000
 8015934:	43500000 	.word	0x43500000
 8015938:	c2f8f359 	.word	0xc2f8f359
 801593c:	01a56e1f 	.word	0x01a56e1f
 8015940:	8800759c 	.word	0x8800759c
 8015944:	7e37e43c 	.word	0x7e37e43c
 8015948:	8800759c 	.word	0x8800759c
 801594c:	fe37e43c 	.word	0xfe37e43c
 8015950:	c2f8f359 	.word	0xc2f8f359
 8015954:	81a56e1f 	.word	0x81a56e1f
 8015958:	00000000 	.word	0x00000000
 801595c:	3c900000 	.word	0x3c900000
 8015960:	ffff3cb0 	.word	0xffff3cb0
 8015964:	00000000 	.word	0x00000000

08015968 <__ieee754_hypot>:
 8015968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801596a:	ec51 0b10 	vmov	r0, r1, d0
 801596e:	ec53 2b11 	vmov	r2, r3, d1
 8015972:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8015976:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801597a:	42a5      	cmp	r5, r4
 801597c:	da05      	bge.n	801598a <__ieee754_hypot+0x22>
 801597e:	462e      	mov	r6, r5
 8015980:	4625      	mov	r5, r4
 8015982:	4634      	mov	r4, r6
 8015984:	4606      	mov	r6, r0
 8015986:	4610      	mov	r0, r2
 8015988:	4632      	mov	r2, r6
 801598a:	4623      	mov	r3, r4
 801598c:	ec43 2b14 	vmov	d4, r2, r3
 8015990:	1b2b      	subs	r3, r5, r4
 8015992:	4629      	mov	r1, r5
 8015994:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8015998:	ec41 0b10 	vmov	d0, r0, r1
 801599c:	dd02      	ble.n	80159a4 <__ieee754_hypot+0x3c>
 801599e:	ee30 0b04 	vadd.f64	d0, d0, d4
 80159a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159a4:	4b46      	ldr	r3, [pc, #280]	@ (8015ac0 <__ieee754_hypot+0x158>)
 80159a6:	429d      	cmp	r5, r3
 80159a8:	dd58      	ble.n	8015a5c <__ieee754_hypot+0xf4>
 80159aa:	4b46      	ldr	r3, [pc, #280]	@ (8015ac4 <__ieee754_hypot+0x15c>)
 80159ac:	429d      	cmp	r5, r3
 80159ae:	dd0f      	ble.n	80159d0 <__ieee754_hypot+0x68>
 80159b0:	ee14 3a10 	vmov	r3, s8
 80159b4:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 80159b8:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80159bc:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 80159c0:	4305      	orrs	r5, r0
 80159c2:	bf18      	it	ne
 80159c4:	ee30 0b04 	vaddne.f64	d0, d0, d4
 80159c8:	431c      	orrs	r4, r3
 80159ca:	fe04 0b00 	vseleq.f64	d0, d4, d0
 80159ce:	e7e8      	b.n	80159a2 <__ieee754_hypot+0x3a>
 80159d0:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 80159d4:	4602      	mov	r2, r0
 80159d6:	462b      	mov	r3, r5
 80159d8:	ec43 2b10 	vmov	d0, r2, r3
 80159dc:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 80159e0:	ec53 2b14 	vmov	r2, r3, d4
 80159e4:	4623      	mov	r3, r4
 80159e6:	ec43 2b14 	vmov	d4, r2, r3
 80159ea:	f44f 7616 	mov.w	r6, #600	@ 0x258
 80159ee:	4b36      	ldr	r3, [pc, #216]	@ (8015ac8 <__ieee754_hypot+0x160>)
 80159f0:	429c      	cmp	r4, r3
 80159f2:	dc0e      	bgt.n	8015a12 <__ieee754_hypot+0xaa>
 80159f4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80159f8:	da32      	bge.n	8015a60 <__ieee754_hypot+0xf8>
 80159fa:	ee14 3a10 	vmov	r3, s8
 80159fe:	4323      	orrs	r3, r4
 8015a00:	d0cf      	beq.n	80159a2 <__ieee754_hypot+0x3a>
 8015a02:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8015ab8 <__ieee754_hypot+0x150>
 8015a06:	f2a6 36fe 	subw	r6, r6, #1022	@ 0x3fe
 8015a0a:	ee24 4b07 	vmul.f64	d4, d4, d7
 8015a0e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015a12:	ee30 5b44 	vsub.f64	d5, d0, d4
 8015a16:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8015a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a1e:	f04f 0200 	mov.w	r2, #0
 8015a22:	d52e      	bpl.n	8015a82 <__ieee754_hypot+0x11a>
 8015a24:	462b      	mov	r3, r5
 8015a26:	ec43 2b17 	vmov	d7, r2, r3
 8015a2a:	ee30 6b07 	vadd.f64	d6, d0, d7
 8015a2e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015a32:	ee26 0b00 	vmul.f64	d0, d6, d0
 8015a36:	eea4 0b04 	vfma.f64	d0, d4, d4
 8015a3a:	eea7 0b07 	vfma.f64	d0, d7, d7
 8015a3e:	f000 f845 	bl	8015acc <__ieee754_sqrt>
 8015a42:	2e00      	cmp	r6, #0
 8015a44:	d0ad      	beq.n	80159a2 <__ieee754_hypot+0x3a>
 8015a46:	0533      	lsls	r3, r6, #20
 8015a48:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8015a4c:	2000      	movs	r0, #0
 8015a4e:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8015a52:	ec41 0b17 	vmov	d7, r0, r1
 8015a56:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015a5a:	e7a2      	b.n	80159a2 <__ieee754_hypot+0x3a>
 8015a5c:	2600      	movs	r6, #0
 8015a5e:	e7c6      	b.n	80159ee <__ieee754_hypot+0x86>
 8015a60:	ec53 2b10 	vmov	r2, r3, d0
 8015a64:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 8015a68:	462b      	mov	r3, r5
 8015a6a:	ec43 2b10 	vmov	d0, r2, r3
 8015a6e:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 8015a72:	ec53 2b14 	vmov	r2, r3, d4
 8015a76:	4623      	mov	r3, r4
 8015a78:	ec43 2b14 	vmov	d4, r2, r3
 8015a7c:	f5a6 7616 	sub.w	r6, r6, #600	@ 0x258
 8015a80:	e7c7      	b.n	8015a12 <__ieee754_hypot+0xaa>
 8015a82:	4623      	mov	r3, r4
 8015a84:	ec43 2b16 	vmov	d6, r2, r3
 8015a88:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 8015a92:	ec43 2b17 	vmov	d7, r2, r3
 8015a96:	ee34 3b46 	vsub.f64	d3, d4, d6
 8015a9a:	eeb0 2b47 	vmov.f64	d2, d7
 8015a9e:	ee90 2b01 	vfnms.f64	d2, d0, d1
 8015aa2:	ee24 0b02 	vmul.f64	d0, d4, d2
 8015aa6:	eea3 0b07 	vfma.f64	d0, d3, d7
 8015aaa:	eea5 0b05 	vfma.f64	d0, d5, d5
 8015aae:	eea6 0b07 	vfma.f64	d0, d6, d7
 8015ab2:	e7c4      	b.n	8015a3e <__ieee754_hypot+0xd6>
 8015ab4:	f3af 8000 	nop.w
 8015ab8:	00000000 	.word	0x00000000
 8015abc:	7fd00000 	.word	0x7fd00000
 8015ac0:	5f300000 	.word	0x5f300000
 8015ac4:	7fefffff 	.word	0x7fefffff
 8015ac8:	20afffff 	.word	0x20afffff

08015acc <__ieee754_sqrt>:
 8015acc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8015ad0:	4770      	bx	lr
	...

08015ad4 <_init>:
 8015ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ad6:	bf00      	nop
 8015ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ada:	bc08      	pop	{r3}
 8015adc:	469e      	mov	lr, r3
 8015ade:	4770      	bx	lr

08015ae0 <_fini>:
 8015ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ae2:	bf00      	nop
 8015ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ae6:	bc08      	pop	{r3}
 8015ae8:	469e      	mov	lr, r3
 8015aea:	4770      	bx	lr
