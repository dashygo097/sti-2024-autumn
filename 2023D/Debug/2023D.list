
2023D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000146b4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002898  08014958  08014958  00015958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080171f0  080171f0  000181f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080171f8  080171f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017200  08017200  00018200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000006c4  24000000  08017204  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ARM.__at_0x30000000 00004000  240006e0  080178c8  000196e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ARM.__at_0x38000000 00000190  240046e0  0801b8c8  0001d6e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010cac  24004870  0801ba58  0001d870  2**3
                  ALLOC
 10 ._user_heap_stack 00004004  2401551c  0801ba58  0001e51c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001d870  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e0a  00000000  00000000  0001d89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004846  00000000  00000000  000426a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b48  00000000  00000000  00046ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001530  00000000  00000000  00048a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d76d  00000000  00000000  00049f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027457  00000000  00000000  000876d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017bcb5  00000000  00000000  000aeb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0022a7e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bc0  00000000  00000000  0022a868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00233428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004870 	.word	0x24004870
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801493c 	.word	0x0801493c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004874 	.word	0x24004874
 80002dc:	0801493c 	.word	0x0801493c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 bac6 	b.w	8000934 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f962 	bl	8000678 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__muldc3>:
 80003c0:	ee20 5b02 	vmul.f64	d5, d0, d2
 80003c4:	ee21 4b03 	vmul.f64	d4, d1, d3
 80003c8:	ee35 7b44 	vsub.f64	d7, d5, d4
 80003cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80003d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d4:	ed2d 8b0a 	vpush	{d8-d12}
 80003d8:	ee20 9b03 	vmul.f64	d9, d0, d3
 80003dc:	ee22 8b01 	vmul.f64	d8, d2, d1
 80003e0:	ee39 6b08 	vadd.f64	d6, d9, d8
 80003e4:	d606      	bvs.n	80003f4 <__muldc3+0x34>
 80003e6:	eeb0 0b47 	vmov.f64	d0, d7
 80003ea:	eeb0 1b46 	vmov.f64	d1, d6
 80003ee:	ecbd 8b0a 	vpop	{d8-d12}
 80003f2:	4770      	bx	lr
 80003f4:	eeb4 6b46 	vcmp.f64	d6, d6
 80003f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003fc:	d7f3      	bvc.n	80003e6 <__muldc3+0x26>
 80003fe:	eeb0 bbc0 	vabs.f64	d11, d0
 8000402:	eeb0 cbc1 	vabs.f64	d12, d1
 8000406:	ed9f ab94 	vldr	d10, [pc, #592]	@ 8000658 <__muldc3+0x298>
 800040a:	eeb4 bb4a 	vcmp.f64	d11, d10
 800040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000412:	f300 809d 	bgt.w	8000550 <__muldc3+0x190>
 8000416:	eeb4 cb4a 	vcmp.f64	d12, d10
 800041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041e:	f300 8097 	bgt.w	8000550 <__muldc3+0x190>
 8000422:	2300      	movs	r3, #0
 8000424:	ed9f ab8c 	vldr	d10, [pc, #560]	@ 8000658 <__muldc3+0x298>
 8000428:	eeb0 bbc2 	vabs.f64	d11, d2
 800042c:	eeb0 cbc3 	vabs.f64	d12, d3
 8000430:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000438:	dc48      	bgt.n	80004cc <__muldc3+0x10c>
 800043a:	eeb4 cb4a 	vcmp.f64	d12, d10
 800043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000442:	dc43      	bgt.n	80004cc <__muldc3+0x10c>
 8000444:	bb9b      	cbnz	r3, 80004ae <__muldc3+0xee>
 8000446:	eeb0 5bc5 	vabs.f64	d5, d5
 800044a:	eeb4 5b4a 	vcmp.f64	d5, d10
 800044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000452:	dc14      	bgt.n	800047e <__muldc3+0xbe>
 8000454:	eeb0 4bc4 	vabs.f64	d4, d4
 8000458:	eeb4 4b4a 	vcmp.f64	d4, d10
 800045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000460:	dc0d      	bgt.n	800047e <__muldc3+0xbe>
 8000462:	eeb0 9bc9 	vabs.f64	d9, d9
 8000466:	eeb4 9b4a 	vcmp.f64	d9, d10
 800046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046e:	dc06      	bgt.n	800047e <__muldc3+0xbe>
 8000470:	eeb0 8bc8 	vabs.f64	d8, d8
 8000474:	eeb4 8b4a 	vcmp.f64	d8, d10
 8000478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047c:	ddb3      	ble.n	80003e6 <__muldc3+0x26>
 800047e:	eeb4 0b40 	vcmp.f64	d0, d0
 8000482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000486:	f180 80dc 	bvs.w	8000642 <__muldc3+0x282>
 800048a:	eeb4 1b41 	vcmp.f64	d1, d1
 800048e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000492:	f180 80cc 	bvs.w	800062e <__muldc3+0x26e>
 8000496:	eeb4 2b42 	vcmp.f64	d2, d2
 800049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049e:	f180 80bc 	bvs.w	800061a <__muldc3+0x25a>
 80004a2:	eeb4 3b43 	vcmp.f64	d3, d3
 80004a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004aa:	f180 80ac 	bvs.w	8000606 <__muldc3+0x246>
 80004ae:	ee23 7b41 	vnmul.f64	d7, d3, d1
 80004b2:	ee21 1b02 	vmul.f64	d1, d1, d2
 80004b6:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000660 <__muldc3+0x2a0>
 80004ba:	eea0 7b02 	vfma.f64	d7, d0, d2
 80004be:	eea0 1b03 	vfma.f64	d1, d0, d3
 80004c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80004c6:	ee21 6b06 	vmul.f64	d6, d1, d6
 80004ca:	e78c      	b.n	80003e6 <__muldc3+0x26>
 80004cc:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8000658 <__muldc3+0x298>
 80004d0:	eeb4 bb47 	vcmp.f64	d11, d7
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	bfcc      	ite	gt
 80004da:	2301      	movgt	r3, #1
 80004dc:	2300      	movle	r3, #0
 80004de:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000658 <__muldc3+0x298>
 80004e2:	ee07 3a10 	vmov	s14, r3
 80004e6:	eeb4 cb46 	vcmp.f64	d12, d6
 80004ea:	ee12 3a90 	vmov	r3, s5
 80004ee:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80004f8:	bfb8      	it	lt
 80004fa:	eeb1 7b47 	vneglt.f64	d7, d7
 80004fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000502:	bfcc      	ite	gt
 8000504:	2301      	movgt	r3, #1
 8000506:	2300      	movle	r3, #0
 8000508:	eeb0 2b47 	vmov.f64	d2, d7
 800050c:	ee07 3a10 	vmov	s14, r3
 8000510:	eeb4 0b40 	vcmp.f64	d0, d0
 8000514:	ee13 3a90 	vmov	r3, s7
 8000518:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800051c:	2b00      	cmp	r3, #0
 800051e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000522:	bfb8      	it	lt
 8000524:	eeb1 7b47 	vneglt.f64	d7, d7
 8000528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052c:	eeb0 3b47 	vmov.f64	d3, d7
 8000530:	d655      	bvs.n	80005de <__muldc3+0x21e>
 8000532:	eeb4 1b41 	vcmp.f64	d1, d1
 8000536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053a:	d7b8      	bvc.n	80004ae <__muldc3+0xee>
 800053c:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000668 <__muldc3+0x2a8>
 8000540:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 8000670 <__muldc3+0x2b0>
 8000544:	ee11 3a90 	vmov	r3, s3
 8000548:	2b00      	cmp	r3, #0
 800054a:	fe26 1b07 	vselge.f64	d1, d6, d7
 800054e:	e7ae      	b.n	80004ae <__muldc3+0xee>
 8000550:	ed9f ab41 	vldr	d10, [pc, #260]	@ 8000658 <__muldc3+0x298>
 8000554:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055c:	bfcc      	ite	gt
 800055e:	2301      	movgt	r3, #1
 8000560:	2300      	movle	r3, #0
 8000562:	ee0a 3a10 	vmov	s20, r3
 8000566:	ee10 3a90 	vmov	r3, s1
 800056a:	eeb8 abca 	vcvt.f64.s32	d10, s20
 800056e:	2b00      	cmp	r3, #0
 8000570:	eeb0 abca 	vabs.f64	d10, d10
 8000574:	bfb8      	it	lt
 8000576:	eeb1 ab4a 	vneglt.f64	d10, d10
 800057a:	eeb0 0b4a 	vmov.f64	d0, d10
 800057e:	ed9f ab36 	vldr	d10, [pc, #216]	@ 8000658 <__muldc3+0x298>
 8000582:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	bfcc      	ite	gt
 800058c:	2301      	movgt	r3, #1
 800058e:	2300      	movle	r3, #0
 8000590:	ee0a 3a10 	vmov	s20, r3
 8000594:	eeb4 2b42 	vcmp.f64	d2, d2
 8000598:	ee11 3a90 	vmov	r3, s3
 800059c:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	eeb0 abca 	vabs.f64	d10, d10
 80005a6:	bfb8      	it	lt
 80005a8:	eeb1 ab4a 	vneglt.f64	d10, d10
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	eeb0 1b4a 	vmov.f64	d1, d10
 80005b4:	d61d      	bvs.n	80005f2 <__muldc3+0x232>
 80005b6:	eeb4 3b43 	vcmp.f64	d3, d3
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	bf78      	it	vc
 80005c0:	2301      	movvc	r3, #1
 80005c2:	f5ff af2f 	bvc.w	8000424 <__muldc3+0x64>
 80005c6:	ee13 3a90 	vmov	r3, s7
 80005ca:	ed9f ab29 	vldr	d10, [pc, #164]	@ 8000670 <__muldc3+0x2b0>
 80005ce:	ed9f 3b26 	vldr	d3, [pc, #152]	@ 8000668 <__muldc3+0x2a8>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f04f 0301 	mov.w	r3, #1
 80005d8:	fe23 3b0a 	vselge.f64	d3, d3, d10
 80005dc:	e722      	b.n	8000424 <__muldc3+0x64>
 80005de:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8000668 <__muldc3+0x2a8>
 80005e2:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8000670 <__muldc3+0x2b0>
 80005e6:	ee10 3a90 	vmov	r3, s1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	fe26 0b07 	vselge.f64	d0, d6, d7
 80005f0:	e79f      	b.n	8000532 <__muldc3+0x172>
 80005f2:	ee12 3a90 	vmov	r3, s5
 80005f6:	ed9f ab1e 	vldr	d10, [pc, #120]	@ 8000670 <__muldc3+0x2b0>
 80005fa:	ed9f 2b1b 	vldr	d2, [pc, #108]	@ 8000668 <__muldc3+0x2a8>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	fe22 2b0a 	vselge.f64	d2, d2, d10
 8000604:	e7d7      	b.n	80005b6 <__muldc3+0x1f6>
 8000606:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000668 <__muldc3+0x2a8>
 800060a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8000670 <__muldc3+0x2b0>
 800060e:	ee13 3a90 	vmov	r3, s7
 8000612:	2b00      	cmp	r3, #0
 8000614:	fe26 3b07 	vselge.f64	d3, d6, d7
 8000618:	e749      	b.n	80004ae <__muldc3+0xee>
 800061a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000668 <__muldc3+0x2a8>
 800061e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000670 <__muldc3+0x2b0>
 8000622:	ee12 3a90 	vmov	r3, s5
 8000626:	2b00      	cmp	r3, #0
 8000628:	fe26 2b07 	vselge.f64	d2, d6, d7
 800062c:	e739      	b.n	80004a2 <__muldc3+0xe2>
 800062e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000668 <__muldc3+0x2a8>
 8000632:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8000670 <__muldc3+0x2b0>
 8000636:	ee11 3a90 	vmov	r3, s3
 800063a:	2b00      	cmp	r3, #0
 800063c:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000640:	e729      	b.n	8000496 <__muldc3+0xd6>
 8000642:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000668 <__muldc3+0x2a8>
 8000646:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8000670 <__muldc3+0x2b0>
 800064a:	ee10 3a90 	vmov	r3, s1
 800064e:	2b00      	cmp	r3, #0
 8000650:	fe26 0b07 	vselge.f64	d0, d6, d7
 8000654:	e719      	b.n	800048a <__muldc3+0xca>
 8000656:	bf00      	nop
 8000658:	ffffffff 	.word	0xffffffff
 800065c:	7fefffff 	.word	0x7fefffff
 8000660:	00000000 	.word	0x00000000
 8000664:	7ff00000 	.word	0x7ff00000
	...
 8000674:	80000000 	.word	0x80000000

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	460c      	mov	r4, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d14e      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000684:	4694      	mov	ip, r2
 8000686:	458c      	cmp	ip, r1
 8000688:	4686      	mov	lr, r0
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	d962      	bls.n	8000756 <__udivmoddi4+0xde>
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	4091      	lsls	r1, r2
 8000698:	fa20 f303 	lsr.w	r3, r0, r3
 800069c:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a0:	4319      	orrs	r1, r3
 80006a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006aa:	fa1f f68c 	uxth.w	r6, ip
 80006ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80006b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006b6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006be:	fb04 f106 	mul.w	r1, r4, r6
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80006ce:	f080 8112 	bcs.w	80008f6 <__udivmoddi4+0x27e>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 810f 	bls.w	80008f6 <__udivmoddi4+0x27e>
 80006d8:	3c02      	subs	r4, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a59      	subs	r1, r3, r1
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006e6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ee:	fb00 f606 	mul.w	r6, r0, r6
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x94>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80006fe:	f080 80fc 	bcs.w	80008fa <__udivmoddi4+0x282>
 8000702:	429e      	cmp	r6, r3
 8000704:	f240 80f9 	bls.w	80008fa <__udivmoddi4+0x282>
 8000708:	4463      	add	r3, ip
 800070a:	3802      	subs	r0, #2
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000712:	2100      	movs	r1, #0
 8000714:	b11d      	cbz	r5, 800071e <__udivmoddi4+0xa6>
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	e9c5 3200 	strd	r3, r2, [r5]
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d905      	bls.n	8000732 <__udivmoddi4+0xba>
 8000726:	b10d      	cbz	r5, 800072c <__udivmoddi4+0xb4>
 8000728:	e9c5 0100 	strd	r0, r1, [r5]
 800072c:	2100      	movs	r1, #0
 800072e:	4608      	mov	r0, r1
 8000730:	e7f5      	b.n	800071e <__udivmoddi4+0xa6>
 8000732:	fab3 f183 	clz	r1, r3
 8000736:	2900      	cmp	r1, #0
 8000738:	d146      	bne.n	80007c8 <__udivmoddi4+0x150>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xcc>
 800073e:	4290      	cmp	r0, r2
 8000740:	f0c0 80f0 	bcc.w	8000924 <__udivmoddi4+0x2ac>
 8000744:	1a86      	subs	r6, r0, r2
 8000746:	eb64 0303 	sbc.w	r3, r4, r3
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0e6      	beq.n	800071e <__udivmoddi4+0xa6>
 8000750:	e9c5 6300 	strd	r6, r3, [r5]
 8000754:	e7e3      	b.n	800071e <__udivmoddi4+0xa6>
 8000756:	2a00      	cmp	r2, #0
 8000758:	f040 8090 	bne.w	800087c <__udivmoddi4+0x204>
 800075c:	eba1 040c 	sub.w	r4, r1, ip
 8000760:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000764:	fa1f f78c 	uxth.w	r7, ip
 8000768:	2101      	movs	r1, #1
 800076a:	fbb4 f6f8 	udiv	r6, r4, r8
 800076e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000772:	fb08 4416 	mls	r4, r8, r6, r4
 8000776:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077a:	fb07 f006 	mul.w	r0, r7, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x11c>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x11a>
 800078c:	4298      	cmp	r0, r3
 800078e:	f200 80cd 	bhi.w	800092c <__udivmoddi4+0x2b4>
 8000792:	4626      	mov	r6, r4
 8000794:	1a1c      	subs	r4, r3, r0
 8000796:	fa1f f38e 	uxth.w	r3, lr
 800079a:	fbb4 f0f8 	udiv	r0, r4, r8
 800079e:	fb08 4410 	mls	r4, r8, r0, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb00 f707 	mul.w	r7, r0, r7
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x148>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x146>
 80007b8:	429f      	cmp	r7, r3
 80007ba:	f200 80b0 	bhi.w	800091e <__udivmoddi4+0x2a6>
 80007be:	4620      	mov	r0, r4
 80007c0:	1bdb      	subs	r3, r3, r7
 80007c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c6:	e7a5      	b.n	8000714 <__udivmoddi4+0x9c>
 80007c8:	f1c1 0620 	rsb	r6, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 f706 	lsr.w	r7, r2, r6
 80007d2:	431f      	orrs	r7, r3
 80007d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007d8:	fa04 f301 	lsl.w	r3, r4, r1
 80007dc:	ea43 030c 	orr.w	r3, r3, ip
 80007e0:	40f4      	lsrs	r4, r6
 80007e2:	fa00 f801 	lsl.w	r8, r0, r1
 80007e6:	0c38      	lsrs	r0, r7, #16
 80007e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ec:	fbb4 fef0 	udiv	lr, r4, r0
 80007f0:	fa1f fc87 	uxth.w	ip, r7
 80007f4:	fb00 441e 	mls	r4, r0, lr, r4
 80007f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000800:	45a1      	cmp	r9, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90a      	bls.n	800081e <__udivmoddi4+0x1a6>
 8000808:	193c      	adds	r4, r7, r4
 800080a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800080e:	f080 8084 	bcs.w	800091a <__udivmoddi4+0x2a2>
 8000812:	45a1      	cmp	r9, r4
 8000814:	f240 8081 	bls.w	800091a <__udivmoddi4+0x2a2>
 8000818:	f1ae 0e02 	sub.w	lr, lr, #2
 800081c:	443c      	add	r4, r7
 800081e:	eba4 0409 	sub.w	r4, r4, r9
 8000822:	fa1f f983 	uxth.w	r9, r3
 8000826:	fbb4 f3f0 	udiv	r3, r4, r0
 800082a:	fb00 4413 	mls	r4, r0, r3, r4
 800082e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000832:	fb03 fc0c 	mul.w	ip, r3, ip
 8000836:	45a4      	cmp	ip, r4
 8000838:	d907      	bls.n	800084a <__udivmoddi4+0x1d2>
 800083a:	193c      	adds	r4, r7, r4
 800083c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000840:	d267      	bcs.n	8000912 <__udivmoddi4+0x29a>
 8000842:	45a4      	cmp	ip, r4
 8000844:	d965      	bls.n	8000912 <__udivmoddi4+0x29a>
 8000846:	3b02      	subs	r3, #2
 8000848:	443c      	add	r4, r7
 800084a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800084e:	fba0 9302 	umull	r9, r3, r0, r2
 8000852:	eba4 040c 	sub.w	r4, r4, ip
 8000856:	429c      	cmp	r4, r3
 8000858:	46ce      	mov	lr, r9
 800085a:	469c      	mov	ip, r3
 800085c:	d351      	bcc.n	8000902 <__udivmoddi4+0x28a>
 800085e:	d04e      	beq.n	80008fe <__udivmoddi4+0x286>
 8000860:	b155      	cbz	r5, 8000878 <__udivmoddi4+0x200>
 8000862:	ebb8 030e 	subs.w	r3, r8, lr
 8000866:	eb64 040c 	sbc.w	r4, r4, ip
 800086a:	fa04 f606 	lsl.w	r6, r4, r6
 800086e:	40cb      	lsrs	r3, r1
 8000870:	431e      	orrs	r6, r3
 8000872:	40cc      	lsrs	r4, r1
 8000874:	e9c5 6400 	strd	r6, r4, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	e750      	b.n	800071e <__udivmoddi4+0xa6>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f103 	lsr.w	r1, r0, r3
 8000884:	fa0c fc02 	lsl.w	ip, ip, r2
 8000888:	fa24 f303 	lsr.w	r3, r4, r3
 800088c:	4094      	lsls	r4, r2
 800088e:	430c      	orrs	r4, r1
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa00 fe02 	lsl.w	lr, r0, r2
 8000898:	fa1f f78c 	uxth.w	r7, ip
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3110 	mls	r1, r8, r0, r3
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb00 f107 	mul.w	r1, r0, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x24c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80008ba:	d22c      	bcs.n	8000916 <__udivmoddi4+0x29e>
 80008bc:	4299      	cmp	r1, r3
 80008be:	d92a      	bls.n	8000916 <__udivmoddi4+0x29e>
 80008c0:	3802      	subs	r0, #2
 80008c2:	4463      	add	r3, ip
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008cc:	fb08 3311 	mls	r3, r8, r1, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb01 f307 	mul.w	r3, r1, r7
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x276>
 80008dc:	eb1c 0404 	adds.w	r4, ip, r4
 80008e0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80008e4:	d213      	bcs.n	800090e <__udivmoddi4+0x296>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d911      	bls.n	800090e <__udivmoddi4+0x296>
 80008ea:	3902      	subs	r1, #2
 80008ec:	4464      	add	r4, ip
 80008ee:	1ae4      	subs	r4, r4, r3
 80008f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008f4:	e739      	b.n	800076a <__udivmoddi4+0xf2>
 80008f6:	4604      	mov	r4, r0
 80008f8:	e6f0      	b.n	80006dc <__udivmoddi4+0x64>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e706      	b.n	800070c <__udivmoddi4+0x94>
 80008fe:	45c8      	cmp	r8, r9
 8000900:	d2ae      	bcs.n	8000860 <__udivmoddi4+0x1e8>
 8000902:	ebb9 0e02 	subs.w	lr, r9, r2
 8000906:	eb63 0c07 	sbc.w	ip, r3, r7
 800090a:	3801      	subs	r0, #1
 800090c:	e7a8      	b.n	8000860 <__udivmoddi4+0x1e8>
 800090e:	4631      	mov	r1, r6
 8000910:	e7ed      	b.n	80008ee <__udivmoddi4+0x276>
 8000912:	4603      	mov	r3, r0
 8000914:	e799      	b.n	800084a <__udivmoddi4+0x1d2>
 8000916:	4630      	mov	r0, r6
 8000918:	e7d4      	b.n	80008c4 <__udivmoddi4+0x24c>
 800091a:	46d6      	mov	lr, sl
 800091c:	e77f      	b.n	800081e <__udivmoddi4+0x1a6>
 800091e:	4463      	add	r3, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e74d      	b.n	80007c0 <__udivmoddi4+0x148>
 8000924:	4606      	mov	r6, r0
 8000926:	4623      	mov	r3, r4
 8000928:	4608      	mov	r0, r1
 800092a:	e70f      	b.n	800074c <__udivmoddi4+0xd4>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	e730      	b.n	8000794 <__udivmoddi4+0x11c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <rev>:
    }
    return A;
}

int rev(int size , int index)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	ed2d 8b02 	vpush	{d8}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
    int k = floor(log2(size)) , reg = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000950:	eeb0 0b47 	vmov.f64	d0, d7
 8000954:	f012 fd00 	bl	8013358 <log>
 8000958:	eeb0 6b40 	vmov.f64	d6, d0
 800095c:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000a18 <rev+0xe0>
 8000960:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000964:	eeb0 0b47 	vmov.f64	d0, d7
 8000968:	f013 f90a 	bl	8013b80 <floor>
 800096c:	eeb0 7b40 	vmov.f64	d7, d0
 8000970:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000974:	ee17 3a90 	vmov	r3, s15
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
    int ans = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
    for (int i =size/2 ; i>0 ; i/=2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da00      	bge.n	800098a <rev+0x52>
 8000988:	3301      	adds	r3, #1
 800098a:	105b      	asrs	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e036      	b.n	80009fe <rev+0xc6>
    {
        reg = index%2;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	60bb      	str	r3, [r7, #8]
        ans += reg * pow(2 , k - 1) ;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009b4:	eeb0 1b47 	vmov.f64	d1, d7
 80009b8:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 80009bc:	f012 fdf4 	bl	80135a8 <pow>
 80009c0:	eeb0 7b40 	vmov.f64	d7, d0
 80009c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	ee07 3a90 	vmov	s15, r3
 80009ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009da:	ee17 3a90 	vmov	r3, s15
 80009de:	613b      	str	r3, [r7, #16]
        k--;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
        index/= 2;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	da00      	bge.n	80009ee <rev+0xb6>
 80009ec:	3301      	adds	r3, #1
 80009ee:	105b      	asrs	r3, r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
    for (int i =size/2 ; i>0 ; i/=2)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	da00      	bge.n	80009fa <rev+0xc2>
 80009f8:	3301      	adds	r3, #1
 80009fa:	105b      	asrs	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dcc5      	bgt.n	8000990 <rev+0x58>
    }
    return ans;
 8000a04:	693b      	ldr	r3, [r7, #16]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	ecbd 8b02 	vpop	{d8}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	f3af 8000 	nop.w
 8000a18:	fefa39ef 	.word	0xfefa39ef
 8000a1c:	3fe62e42 	.word	0x3fe62e42

08000a20 <FFT>:
    }
    return X;
}

double complex* FFT(int size , double x[])
{
 8000a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	ed2d 8b02 	vpush	{d8}
 8000a28:	b0a9      	sub	sp, #164	@ 0xa4
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	466b      	mov	r3, sp
 8000a32:	461e      	mov	r6, r3
    double complex W[size/2];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <FFT+0x1c>
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	105b      	asrs	r3, r3, #1
 8000a3e:	4619      	mov	r1, r3
 8000a40:	1e4b      	subs	r3, r1, #1
 8000a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a46:	460a      	mov	r2, r1
 8000a48:	2300      	movs	r3, #0
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	01c3      	lsls	r3, r0, #7
 8000a5a:	6838      	ldr	r0, [r7, #0]
 8000a5c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	01c2      	lsls	r2, r0, #7
 8000a64:	460a      	mov	r2, r1
 8000a66:	2300      	movs	r3, #0
 8000a68:	4692      	mov	sl, r2
 8000a6a:	469b      	mov	fp, r3
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8000a78:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8000a7c:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8000a80:	460b      	mov	r3, r1
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	3307      	adds	r3, #7
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8e:	466b      	mov	r3, sp
 8000a90:	3307      	adds	r3, #7
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    for (int i = 0 ; i < size/2 ; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000aa0:	e049      	b.n	8000b36 <FFT+0x116>
    {
        W[i] = cos(2*M_PI*i/size) + I*sin(2*M_PI*i/size);
 8000aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aae:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8000c50 <FFT+0x230>
 8000ab2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ac0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ac4:	eeb0 0b45 	vmov.f64	d0, d5
 8000ac8:	f013 f80a 	bl	8013ae0 <sin>
 8000acc:	eeb0 8b40 	vmov.f64	d8, d0
 8000ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000adc:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 8000c50 <FFT+0x230>
 8000ae0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000af2:	eeb0 0b45 	vmov.f64	d0, d5
 8000af6:	f012 ffa7 	bl	8013a48 <cos>
 8000afa:	eeb0 6b40 	vmov.f64	d6, d0
 8000afe:	ed9f 7b56 	vldr	d7, [pc, #344]	@ 8000c58 <FFT+0x238>
 8000b02:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	4413      	add	r3, r2
 8000b16:	ed83 7b00 	vstr	d7, [r3]
 8000b1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	4413      	add	r3, r2
 8000b26:	3308      	adds	r3, #8
 8000b28:	ed83 8b00 	vstr	d8, [r3]
    for (int i = 0 ; i < size/2 ; i++)
 8000b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da00      	bge.n	8000b3e <FFT+0x11e>
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	105b      	asrs	r3, r3, #1
 8000b40:	461a      	mov	r2, r3
 8000b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b46:	4293      	cmp	r3, r2
 8000b48:	dbab      	blt.n	8000aa2 <FFT+0x82>
    }

    double complex A[size];
 8000b4a:	68f9      	ldr	r1, [r7, #12]
 8000b4c:	1e4b      	subs	r3, r1, #1
 8000b4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b52:	460a      	mov	r2, r1
 8000b54:	2300      	movs	r3, #0
 8000b56:	4690      	mov	r8, r2
 8000b58:	4699      	mov	r9, r3
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000b66:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000b6a:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000b6e:	460a      	mov	r2, r1
 8000b70:	2300      	movs	r3, #0
 8000b72:	4614      	mov	r4, r2
 8000b74:	461d      	mov	r5, r3
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	01eb      	lsls	r3, r5, #7
 8000b80:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000b84:	01e2      	lsls	r2, r4, #7
 8000b86:	460b      	mov	r3, r1
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	3307      	adds	r3, #7
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	ebad 0d03 	sub.w	sp, sp, r3
 8000b94:	466b      	mov	r3, sp
 8000b96:	3307      	adds	r3, #7
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    double complex *X = A;
 8000b9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0;i < size ; i ++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ba8:	e027      	b.n	8000bfa <FFT+0x1da>
    {
    	A[i] = x[rev(size,i)] + 0*I;
 8000baa:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff fec2 	bl	8000938 <rev>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	4413      	add	r3, r2
 8000bbc:	ed93 7b00 	vldr	d7, [r3]
 8000bc0:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8000c58 <FFT+0x238>
 8000bc4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bc8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	ed83 7b00 	vstr	d7, [r3]
 8000bd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	4413      	add	r3, r2
 8000be0:	f103 0108 	add.w	r1, r3, #8
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0;i < size ; i ++)
 8000bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbd2      	blt.n	8000baa <FFT+0x18a>
    }
    
    int s ,m ,k ,j;
    double complex omega , t, u;

    for(s = 1 ; s <size ; s*=2)
 8000c04:	2301      	movs	r3, #1
 8000c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000c0a:	e0f6      	b.n	8000dfa <FFT+0x3da>
    {
        m = s * 2;
 8000c0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	677b      	str	r3, [r7, #116]	@ 0x74
        for ( k = 0 ; k< size ; k += m)
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000c1a:	e0e3      	b.n	8000de4 <FFT+0x3c4>
        {
            omega = 1;
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <FFT+0x240>)
 8000c22:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
            for (j = 0; j < m/2; j++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <FFT+0x240>)
 8000c4a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000c4e:	e0b8      	b.n	8000dc2 <FFT+0x3a2>
 8000c50:	54442d18 	.word	0x54442d18
 8000c54:	401921fb 	.word	0x401921fb
	...
 8000c60:	3ff00000 	.word	0x3ff00000
            {
                t = omega * A[k+j+m/2];
 8000c64:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c6c:	441a      	add	r2, r3
 8000c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	da00      	bge.n	8000c76 <FFT+0x256>
 8000c74:	3301      	adds	r3, #1
 8000c76:	105b      	asrs	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000c7c:	011a      	lsls	r2, r3, #4
 8000c7e:	440a      	add	r2, r1
 8000c80:	ed92 7b00 	vldr	d7, [r2]
 8000c84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	4413      	add	r3, r2
 8000c8a:	ed93 6b02 	vldr	d6, [r3, #8]
 8000c8e:	eeb0 3b46 	vmov.f64	d3, d6
 8000c92:	eeb0 2b47 	vmov.f64	d2, d7
 8000c96:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000c9a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000c9e:	f7ff fb8f 	bl	80003c0 <__muldc3>
 8000ca2:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
 8000ca6:	ed87 1b16 	vstr	d1, [r7, #88]	@ 0x58
 8000caa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000cae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000cb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
                u = A[k+j];
 8000cba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cc2:	18d1      	adds	r1, r2, r3
 8000cc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cc6:	010b      	lsls	r3, r1, #4
 8000cc8:	4413      	add	r3, r2
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cd2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cd4:	010b      	lsls	r3, r1, #4
 8000cd6:	4413      	add	r3, r2
 8000cd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ce4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ce8:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8000cec:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
                A[k+j] = u + t;
 8000cf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cf8:	4413      	add	r3, r2
 8000cfa:	ed97 6b06 	vldr	d6, [r7, #24]
 8000cfe:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d02:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d06:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d0a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d0e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d14:	011a      	lsls	r2, r3, #4
 8000d16:	440a      	add	r2, r1
 8000d18:	ed82 6b00 	vstr	d6, [r2]
 8000d1c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4413      	add	r3, r2
 8000d22:	3308      	adds	r3, #8
 8000d24:	ed83 7b00 	vstr	d7, [r3]
                A[k+j+m/2] = u - t;
 8000d28:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d30:	441a      	add	r2, r3
 8000d32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da00      	bge.n	8000d3a <FFT+0x31a>
 8000d38:	3301      	adds	r3, #1
 8000d3a:	105b      	asrs	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d42:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d4a:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d4e:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d58:	011a      	lsls	r2, r3, #4
 8000d5a:	440a      	add	r2, r1
 8000d5c:	ed82 6b00 	vstr	d6, [r2]
 8000d60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	4413      	add	r3, r2
 8000d66:	3308      	adds	r3, #8
 8000d68:	ed83 7b00 	vstr	d7, [r3]
                omega = omega * W[size/m];
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d74:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000d78:	011a      	lsls	r2, r3, #4
 8000d7a:	440a      	add	r2, r1
 8000d7c:	ed92 7b00 	vldr	d7, [r2]
 8000d80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	4413      	add	r3, r2
 8000d88:	ed93 6b02 	vldr	d6, [r3, #8]
 8000d8c:	eeb0 3b46 	vmov.f64	d3, d6
 8000d90:	eeb0 2b47 	vmov.f64	d2, d7
 8000d94:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000d98:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000d9c:	f7ff fb10 	bl	80003c0 <__muldc3>
 8000da0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 8000da4:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8000da8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000dac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000db0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000db4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            for (j = 0; j < m/2; j++)
 8000db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da00      	bge.n	8000dca <FFT+0x3aa>
 8000dc8:	3301      	adds	r3, #1
 8000dca:	105b      	asrs	r3, r3, #1
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f6ff af46 	blt.w	8000c64 <FFT+0x244>
        for ( k = 0 ; k< size ; k += m)
 8000dd8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000ddc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dde:	4413      	add	r3, r2
 8000de0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000de4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	f6ff af16 	blt.w	8000c1c <FFT+0x1fc>
    for(s = 1 ; s <size ; s*=2)
 8000df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f6ff af03 	blt.w	8000c0c <FFT+0x1ec>
            } 
        }
    }
    return X;
 8000e06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e08:	46b5      	mov	sp, r6

}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	37a4      	adds	r7, #164	@ 0xa4
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	ecbd 8b02 	vpop	{d8}
 8000e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e18 <FFT_Mag_sqrt>:
    }
}


void FFT_Mag_sqrt(int size , double x[])
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    double complex* X = FFT(size , x);
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fdfb 	bl	8000a20 <FFT>
 8000e2a:	60b8      	str	r0, [r7, #8]
    for (int i = 0 ; i < size ; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	e01c      	b.n	8000e6c <FFT_Mag_sqrt+0x54>
    {
        x[i] = cabs(X[i]);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	4413      	add	r3, r2
 8000e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e42:	68fc      	ldr	r4, [r7, #12]
 8000e44:	00e4      	lsls	r4, r4, #3
 8000e46:	683d      	ldr	r5, [r7, #0]
 8000e48:	442c      	add	r4, r5
 8000e4a:	ec41 0b16 	vmov	d6, r0, r1
 8000e4e:	ec43 2b17 	vmov	d7, r2, r3
 8000e52:	eeb0 0b46 	vmov.f64	d0, d6
 8000e56:	eeb0 1b47 	vmov.f64	d1, d7
 8000e5a:	f012 fa61 	bl	8013320 <cabs>
 8000e5e:	eeb0 7b40 	vmov.f64	d7, d0
 8000e62:	ed84 7b00 	vstr	d7, [r4]
    for (int i = 0 ; i < size ; i++)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbde      	blt.n	8000e32 <FFT_Mag_sqrt+0x1a>
    }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e80 <Blackman>:




void Blackman(int size , int left , int right , double x[])
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	ed2d 8b04 	vpush	{d8-d9}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]

    for (int i = 0 ; i < size ; i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e06b      	b.n	8000f70 <Blackman+0xf0>
    {
    	if (i < right && i >=  left)
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	da5a      	bge.n	8000f56 <Blackman+0xd6>
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	db56      	blt.n	8000f56 <Blackman+0xd6>
    	{
    		x[i] = 10* x[i] * ( 0.42 + 0.08* cos(4*M_PI*(i - left )/(right - left - 1)) - 0.5*cos(2*M_PI*(i - left )/(right - left - 1)));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	ed93 7b00 	vldr	d7, [r3]
 8000eb4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000eb8:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000eca:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8000f88 <Blackman+0x108>
 8000ece:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ee2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ee6:	eeb0 0b45 	vmov.f64	d0, d5
 8000eea:	f012 fdad 	bl	8013a48 <cos>
 8000eee:	eeb0 7b40 	vmov.f64	d7, d0
 8000ef2:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8000f90 <Blackman+0x110>
 8000ef6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000efa:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8000f98 <Blackman+0x118>
 8000efe:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	ee07 3a90 	vmov	s15, r3
 8000f0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f10:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8000fa0 <Blackman+0x120>
 8000f14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f28:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000f2c:	eeb0 0b45 	vmov.f64	d0, d5
 8000f30:	f012 fd8a 	bl	8013a48 <cos>
 8000f34:	eeb0 7b40 	vmov.f64	d7, d0
 8000f38:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000f3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f40:	ee39 7b47 	vsub.f64	d7, d9, d7
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000f50:	ed83 7b00 	vstr	d7, [r3]
 8000f54:	e009      	b.n	8000f6a <Blackman+0xea>
    	}
    	else
    	{
    		x[i] = 0;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	18d1      	adds	r1, r2, r3
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0 ; i < size ; i++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	db8f      	blt.n	8000e98 <Blackman+0x18>
    	}
    }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	ecbd 8b04 	vpop	{d8-d9}
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	54442d18 	.word	0x54442d18
 8000f8c:	402921fb 	.word	0x402921fb
 8000f90:	47ae147b 	.word	0x47ae147b
 8000f94:	3fb47ae1 	.word	0x3fb47ae1
 8000f98:	ae147ae1 	.word	0xae147ae1
 8000f9c:	3fdae147 	.word	0x3fdae147
 8000fa0:	54442d18 	.word	0x54442d18
 8000fa4:	401921fb 	.word	0x401921fb

08000fa8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fcc:	4b30      	ldr	r3, [pc, #192]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fce:	4a31      	ldr	r2, [pc, #196]	@ (8001094 <MX_ADC1_Init+0xec>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fde:	4b2c      	ldr	r3, [pc, #176]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fea:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ff0:	4b27      	ldr	r3, [pc, #156]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001002:	4b23      	ldr	r3, [pc, #140]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001004:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800100a:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <MX_ADC1_Init+0xe8>)
 800100c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001010:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001012:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001014:	2203      	movs	r2, #3
 8001016:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001018:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <MX_ADC1_Init+0xe8>)
 800101a:	2200      	movs	r2, #0
 800101c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001020:	2200      	movs	r2, #0
 8001022:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	4818      	ldr	r0, [pc, #96]	@ (8001090 <MX_ADC1_Init+0xe8>)
 800102e:	f002 fa31 	bl	8003494 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001038:	f001 fb28 	bl	800268c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4812      	ldr	r0, [pc, #72]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001048:	f003 fd72 	bl	8004b30 <HAL_ADCEx_MultiModeConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001052:	f001 fb1b 	bl	800268c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <MX_ADC1_Init+0xf0>)
 8001058:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105a:	2306      	movs	r3, #6
 800105c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800105e:	2306      	movs	r3, #6
 8001060:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001062:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001066:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001068:	2304      	movs	r3, #4
 800106a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	@ (8001090 <MX_ADC1_Init+0xe8>)
 800107a:	f002 fe05 	bl	8003c88 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001084:	f001 fb02 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	@ 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2400488c 	.word	0x2400488c
 8001094:	40022000 	.word	0x40022000
 8001098:	0c900008 	.word	0x0c900008

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0bc      	sub	sp, #240	@ 0xf0
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0318 	add.w	r3, r7, #24
 80010b8:	22c0      	movs	r2, #192	@ 0xc0
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f00e fd7d 	bl	800fbbc <memset>
  if(adcHandle->Instance==ADC1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a53      	ldr	r2, [pc, #332]	@ (8001214 <HAL_ADC_MspInit+0x178>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	f040 809e 	bne.w	800120a <HAL_ADC_MspInit+0x16e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ce:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 10;
 80010da:	230a      	movs	r3, #10
 80010dc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 384;
 80010de:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 12;
 80010e4:	230c      	movs	r3, #12
 80010e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80010f0:	2340      	movs	r3, #64	@ 0x40
 80010f2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	4618      	mov	r0, r3
 8001108:	f008 fe60 	bl	8009dcc <HAL_RCCEx_PeriphCLKConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8001112:	f001 fabb 	bl	800268c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001116:	4b40      	ldr	r3, [pc, #256]	@ (8001218 <HAL_ADC_MspInit+0x17c>)
 8001118:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800111c:	4a3e      	ldr	r2, [pc, #248]	@ (8001218 <HAL_ADC_MspInit+0x17c>)
 800111e:	f043 0320 	orr.w	r3, r3, #32
 8001122:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001126:	4b3c      	ldr	r3, [pc, #240]	@ (8001218 <HAL_ADC_MspInit+0x17c>)
 8001128:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b38      	ldr	r3, [pc, #224]	@ (8001218 <HAL_ADC_MspInit+0x17c>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113a:	4a37      	ldr	r2, [pc, #220]	@ (8001218 <HAL_ADC_MspInit+0x17c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001144:	4b34      	ldr	r3, [pc, #208]	@ (8001218 <HAL_ADC_MspInit+0x17c>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <HAL_ADC_MspInit+0x17c>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001158:	4a2f      	ldr	r2, [pc, #188]	@ (8001218 <HAL_ADC_MspInit+0x17c>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001162:	4b2d      	ldr	r3, [pc, #180]	@ (8001218 <HAL_ADC_MspInit+0x17c>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001170:	2340      	movs	r3, #64	@ 0x40
 8001172:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001186:	4619      	mov	r1, r3
 8001188:	4824      	ldr	r0, [pc, #144]	@ (800121c <HAL_ADC_MspInit+0x180>)
 800118a:	f007 fa01 	bl	8008590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800118e:	2310      	movs	r3, #16
 8001190:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001194:	2303      	movs	r3, #3
 8001196:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011a4:	4619      	mov	r1, r3
 80011a6:	481e      	ldr	r0, [pc, #120]	@ (8001220 <HAL_ADC_MspInit+0x184>)
 80011a8:	f007 f9f2 	bl	8008590 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 80011ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001228 <HAL_ADC_MspInit+0x18c>)
 80011b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 80011b4:	2209      	movs	r2, #9
 80011b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c4:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 80011c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 80011ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 80011d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011da:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ee:	480d      	ldr	r0, [pc, #52]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 80011f0:	f004 f9dc 	bl	80055ac <HAL_DMA_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_ADC_MspInit+0x162>
    {
      Error_Handler();
 80011fa:	f001 fa47 	bl	800268c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a08      	ldr	r2, [pc, #32]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 8001202:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001204:	4a07      	ldr	r2, [pc, #28]	@ (8001224 <HAL_ADC_MspInit+0x188>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800120a:	bf00      	nop
 800120c:	37f0      	adds	r7, #240	@ 0xf0
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40022000 	.word	0x40022000
 8001218:	58024400 	.word	0x58024400
 800121c:	58020000 	.word	0x58020000
 8001220:	58020800 	.word	0x58020800
 8001224:	240048f0 	.word	0x240048f0
 8001228:	40020010 	.word	0x40020010

0800122c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0d      	ldr	r2, [pc, #52]	@ (8001270 <HAL_ADC_MspDeInit+0x44>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d114      	bne.n	8001268 <HAL_ADC_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 800123e:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <HAL_ADC_MspDeInit+0x48>)
 8001240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001244:	4a0b      	ldr	r2, [pc, #44]	@ (8001274 <HAL_ADC_MspDeInit+0x48>)
 8001246:	f023 0320 	bic.w	r3, r3, #32
 800124a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 800124e:	2140      	movs	r1, #64	@ 0x40
 8001250:	4809      	ldr	r0, [pc, #36]	@ (8001278 <HAL_ADC_MspDeInit+0x4c>)
 8001252:	f007 fb4d 	bl	80088f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 8001256:	2110      	movs	r1, #16
 8001258:	4808      	ldr	r0, [pc, #32]	@ (800127c <HAL_ADC_MspDeInit+0x50>)
 800125a:	f007 fb49 	bl	80088f0 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	4618      	mov	r0, r3
 8001264:	f004 fcfe 	bl	8005c64 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40022000 	.word	0x40022000
 8001274:	58024400 	.word	0x58024400
 8001278:	58020000 	.word	0x58020000
 800127c:	58020800 	.word	0x58020800

08001280 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	@ 0x28
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2224      	movs	r2, #36	@ 0x24
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f00e fc95 	bl	800fbbc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001292:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <MX_DAC1_Init+0x5c>)
 8001294:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <MX_DAC1_Init+0x60>)
 8001296:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001298:	4810      	ldr	r0, [pc, #64]	@ (80012dc <MX_DAC1_Init+0x5c>)
 800129a:	f003 feb3 	bl	8005004 <HAL_DAC_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012a4:	f001 f9f2 	bl	800268c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80012ac:	2316      	movs	r3, #22
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80012b0:	2302      	movs	r3, #2
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80012b4:	2301      	movs	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2210      	movs	r2, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	@ (80012dc <MX_DAC1_Init+0x5c>)
 80012c4:	f003 ffaa 	bl	800521c <HAL_DAC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80012ce:	f001 f9dd 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	@ 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	24004968 	.word	0x24004968
 80012e0:	40007400 	.word	0x40007400

080012e4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a30      	ldr	r2, [pc, #192]	@ (80013c4 <HAL_DAC_MspInit+0xe0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d159      	bne.n	80013ba <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001306:	4b30      	ldr	r3, [pc, #192]	@ (80013c8 <HAL_DAC_MspInit+0xe4>)
 8001308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800130c:	4a2e      	ldr	r2, [pc, #184]	@ (80013c8 <HAL_DAC_MspInit+0xe4>)
 800130e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001312:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001316:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <HAL_DAC_MspInit+0xe4>)
 8001318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800131c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b28      	ldr	r3, [pc, #160]	@ (80013c8 <HAL_DAC_MspInit+0xe4>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	4a27      	ldr	r2, [pc, #156]	@ (80013c8 <HAL_DAC_MspInit+0xe4>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001334:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <HAL_DAC_MspInit+0xe4>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001342:	2320      	movs	r3, #32
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001346:	2303      	movs	r3, #3
 8001348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	481d      	ldr	r0, [pc, #116]	@ (80013cc <HAL_DAC_MspInit+0xe8>)
 8001356:	f007 f91b 	bl	8008590 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 800135c:	4a1d      	ldr	r2, [pc, #116]	@ (80013d4 <HAL_DAC_MspInit+0xf0>)
 800135e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 8001362:	2244      	movs	r2, #68	@ 0x44
 8001364:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 8001368:	2240      	movs	r2, #64	@ 0x40
 800136a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 8001374:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001378:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 800137c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001380:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 8001384:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001388:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 800138c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001390:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001398:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800139e:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 80013a0:	f004 f904 	bl	80055ac <HAL_DMA_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80013aa:	f001 f96f 	bl	800268c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a07      	ldr	r2, [pc, #28]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	4a06      	ldr	r2, [pc, #24]	@ (80013d0 <HAL_DAC_MspInit+0xec>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	@ 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40007400 	.word	0x40007400
 80013c8:	58024400 	.word	0x58024400
 80013cc:	58020000 	.word	0x58020000
 80013d0:	2400497c 	.word	0x2400497c
 80013d4:	40020028 	.word	0x40020028

080013d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <MX_DMA_Init+0x4c>)
 80013e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001424 <MX_DMA_Init+0x4c>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <MX_DMA_Init+0x4c>)
 80013f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	200b      	movs	r0, #11
 8001402:	f003 fd4e 	bl	8004ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001406:	200b      	movs	r0, #11
 8001408:	f003 fd65 	bl	8004ed6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	200c      	movs	r0, #12
 8001412:	f003 fd46 	bl	8004ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001416:	200c      	movs	r0, #12
 8001418:	f003 fd5d 	bl	8004ed6 <HAL_NVIC_EnableIRQ>

}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	58024400 	.word	0x58024400

08001428 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143e:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <MX_GPIO_Init+0xfc>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001444:	4a37      	ldr	r2, [pc, #220]	@ (8001524 <MX_GPIO_Init+0xfc>)
 8001446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800144a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144e:	4b35      	ldr	r3, [pc, #212]	@ (8001524 <MX_GPIO_Init+0xfc>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <MX_GPIO_Init+0xfc>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001462:	4a30      	ldr	r2, [pc, #192]	@ (8001524 <MX_GPIO_Init+0xfc>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800146c:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <MX_GPIO_Init+0xfc>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <MX_GPIO_Init+0xfc>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001480:	4a28      	ldr	r2, [pc, #160]	@ (8001524 <MX_GPIO_Init+0xfc>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800148a:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <MX_GPIO_Init+0xfc>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <MX_GPIO_Init+0xfc>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149e:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <MX_GPIO_Init+0xfc>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <MX_GPIO_Init+0xfc>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <MX_GPIO_Init+0xfc>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014bc:	4a19      	ldr	r2, [pc, #100]	@ (8001524 <MX_GPIO_Init+0xfc>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_GPIO_Init+0xfc>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2
 80014d4:	2200      	movs	r2, #0
 80014d6:	f24c 011e 	movw	r1, #49182	@ 0xc01e
 80014da:	4813      	ldr	r0, [pc, #76]	@ (8001528 <MX_GPIO_Init+0x100>)
 80014dc:	f007 fb12 	bl	8008b04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014e0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	480b      	ldr	r0, [pc, #44]	@ (8001528 <MX_GPIO_Init+0x100>)
 80014fa:	f007 f849 	bl	8008590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80014fe:	231e      	movs	r3, #30
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150a:	2302      	movs	r3, #2
 800150c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4804      	ldr	r0, [pc, #16]	@ (8001528 <MX_GPIO_Init+0x100>)
 8001516:	f007 f83b 	bl	8008590 <HAL_GPIO_Init>

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	@ 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	58024400 	.word	0x58024400
 8001528:	58020c00 	.word	0x58020c00

0800152c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001530:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <MX_I2C1_Init+0x74>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	@ (80015a4 <MX_I2C1_Init+0x78>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8001536:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <MX_I2C1_Init+0x74>)
 8001538:	4a1b      	ldr	r2, [pc, #108]	@ (80015a8 <MX_I2C1_Init+0x7c>)
 800153a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800153c:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <MX_I2C1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001542:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <MX_I2C1_Init+0x74>)
 8001544:	2201      	movs	r2, #1
 8001546:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <MX_I2C1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <MX_I2C1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <MX_I2C1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155a:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <MX_I2C1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <MX_I2C1_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001566:	480e      	ldr	r0, [pc, #56]	@ (80015a0 <MX_I2C1_Init+0x74>)
 8001568:	f007 fae6 	bl	8008b38 <HAL_I2C_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001572:	f001 f88b 	bl	800268c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001576:	2100      	movs	r1, #0
 8001578:	4809      	ldr	r0, [pc, #36]	@ (80015a0 <MX_I2C1_Init+0x74>)
 800157a:	f007 fb6d 	bl	8008c58 <HAL_I2CEx_ConfigAnalogFilter>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001584:	f001 f882 	bl	800268c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001588:	2100      	movs	r1, #0
 800158a:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <MX_I2C1_Init+0x74>)
 800158c:	f007 fbaf 	bl	8008cee <HAL_I2CEx_ConfigDigitalFilter>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001596:	f001 f879 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	240049f4 	.word	0x240049f4
 80015a4:	40005400 	.word	0x40005400
 80015a8:	00b03fdb 	.word	0x00b03fdb

080015ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0ba      	sub	sp, #232	@ 0xe8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	22c0      	movs	r2, #192	@ 0xc0
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f00e faf5 	bl	800fbbc <memset>
  if(i2cHandle->Instance==I2C1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a26      	ldr	r2, [pc, #152]	@ (8001670 <HAL_I2C_MspInit+0xc4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d145      	bne.n	8001668 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015dc:	f04f 0208 	mov.w	r2, #8
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	4618      	mov	r0, r3
 80015f4:	f008 fbea 	bl	8009dcc <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80015fe:	f001 f845 	bl	800268c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <HAL_I2C_MspInit+0xc8>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001608:	4a1a      	ldr	r2, [pc, #104]	@ (8001674 <HAL_I2C_MspInit+0xc8>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <HAL_I2C_MspInit+0xc8>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001620:	23c0      	movs	r3, #192	@ 0xc0
 8001622:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001626:	2312      	movs	r3, #18
 8001628:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001638:	2304      	movs	r3, #4
 800163a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001642:	4619      	mov	r1, r3
 8001644:	480c      	ldr	r0, [pc, #48]	@ (8001678 <HAL_I2C_MspInit+0xcc>)
 8001646:	f006 ffa3 	bl	8008590 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_I2C_MspInit+0xc8>)
 800164c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001650:	4a08      	ldr	r2, [pc, #32]	@ (8001674 <HAL_I2C_MspInit+0xc8>)
 8001652:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001656:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_I2C_MspInit+0xc8>)
 800165c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001668:	bf00      	nop
 800166a:	37e8      	adds	r7, #232	@ 0xe8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40005400 	.word	0x40005400
 8001674:	58024400 	.word	0x58024400
 8001678:	58020400 	.word	0x58020400
 800167c:	00000000 	.word	0x00000000

08001680 <Analog_Judge>:
#include "tim.h"
#include "usart.h"
#include "gpio.h"

int Analog_Judge(double x[], double v[])
{
 8001680:	b580      	push	{r7, lr}
 8001682:	f5ad 5dc3 	sub.w	sp, sp, #6240	@ 0x1860
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800168e:	f6a3 0374 	subw	r3, r3, #2164	@ 0x874
 8001692:	6018      	str	r0, [r3, #0]
 8001694:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001698:	f6a3 0378 	subw	r3, r3, #2168	@ 0x878
 800169c:	6019      	str	r1, [r3, #0]
    double bands[FO_LENGTH / 16];
    int bands_idx[FO_LENGTH / 16];
    double bands_sum = 0;
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	f641 0170 	movw	r1, #6256	@ 0x1870
 80016aa:	4439      	add	r1, r7
 80016ac:	e9c1 2300 	strd	r2, r3, [r1]
    int main_band_idx = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f641 026c 	movw	r2, #6252	@ 0x186c
 80016b6:	443a      	add	r2, r7
 80016b8:	6013      	str	r3, [r2, #0]
    int n_bands = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f641 0268 	movw	r2, #6248	@ 0x1868
 80016c0:	443a      	add	r2, r7
 80016c2:	6013      	str	r3, [r2, #0]
    int bands_gap = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f641 024c 	movw	r2, #6220	@ 0x184c
 80016ca:	443a      	add	r2, r7
 80016cc:	6013      	str	r3, [r2, #0]
    char str[50];


    // This can be optimized with specific threshold
    double main_band = 0;
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	f507 51c3 	add.w	r1, r7, #6240	@ 0x1860
 80016da:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 100; i < FO_LENGTH / 2 - 100; i++)
 80016de:	2364      	movs	r3, #100	@ 0x64
 80016e0:	f641 025c 	movw	r2, #6236	@ 0x185c
 80016e4:	443a      	add	r2, r7
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e037      	b.n	800175a <Analog_Judge+0xda>
    {
        if (x[i] > main_band)
 80016ea:	f641 035c 	movw	r3, #6236	@ 0x185c
 80016ee:	443b      	add	r3, r7
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80016f8:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	ed93 7b00 	vldr	d7, [r3]
 8001704:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 8001708:	ed93 6b00 	vldr	d6, [r3]
 800170c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	d518      	bpl.n	8001748 <Analog_Judge+0xc8>
        {
            main_band = x[i];
 8001716:	f641 035c 	movw	r3, #6236	@ 0x185c
 800171a:	443b      	add	r3, r7
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001724:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	4413      	add	r3, r2
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f507 51c3 	add.w	r1, r7, #6240	@ 0x1860
 8001734:	e9c1 2300 	strd	r2, r3, [r1]
            main_band_idx = i;
 8001738:	f641 035c 	movw	r3, #6236	@ 0x185c
 800173c:	443b      	add	r3, r7
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f641 026c 	movw	r2, #6252	@ 0x186c
 8001744:	443a      	add	r2, r7
 8001746:	6013      	str	r3, [r2, #0]
    for (int i = 100; i < FO_LENGTH / 2 - 100; i++)
 8001748:	f641 035c 	movw	r3, #6236	@ 0x185c
 800174c:	443b      	add	r3, r7
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	f641 025c 	movw	r2, #6236	@ 0x185c
 8001756:	443a      	add	r2, r7
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	f641 035c 	movw	r3, #6236	@ 0x185c
 800175e:	443b      	add	r3, r7
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f640 729b 	movw	r2, #3995	@ 0xf9b
 8001766:	4293      	cmp	r3, r2
 8001768:	ddbf      	ble.n	80016ea <Analog_Judge+0x6a>
        }
    }
    double threshold = main_band * 0.1;
 800176a:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 800176e:	ed93 7b00 	vldr	d7, [r3]
 8001772:	ed9f 6b9f 	vldr	d6, [pc, #636]	@ 80019f0 <Analog_Judge+0x370>
 8001776:	ee27 7b06 	vmul.f64	d7, d7, d6
 800177a:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 800177e:	ed83 7b00 	vstr	d7, [r3]
    
    for(int i = main_band_idx - FO_LENGTH / 8; i < main_band_idx +  FO_LENGTH / 8 ; i++)
 8001782:	f641 036c 	movw	r3, #6252	@ 0x186c
 8001786:	443b      	add	r3, r7
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800178e:	f641 0258 	movw	r2, #6232	@ 0x1858
 8001792:	443a      	add	r2, r7
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e0ca      	b.n	800192e <Analog_Judge+0x2ae>
    {
        if(x[i] > threshold && x[i] > 50)
 8001798:	f641 0358 	movw	r3, #6232	@ 0x1858
 800179c:	443b      	add	r3, r7
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80017a6:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	ed93 7b00 	vldr	d7, [r3]
 80017b2:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 80017b6:	ed93 6b00 	vldr	d6, [r3]
 80017ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	f140 80ab 	bpl.w	800191c <Analog_Judge+0x29c>
 80017c6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80017ca:	443b      	add	r3, r7
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80017d4:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	ed93 7b00 	vldr	d7, [r3]
 80017e0:	ed9f 6b85 	vldr	d6, [pc, #532]	@ 80019f8 <Analog_Judge+0x378>
 80017e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80017e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ec:	f340 8096 	ble.w	800191c <Analog_Judge+0x29c>
        {
        	int flag = 1 ;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f641 0254 	movw	r2, #6228	@ 0x1854
 80017f6:	443a      	add	r2, r7
 80017f8:	6013      	str	r3, [r2, #0]
        	for (int j = i - 2 ; j < i + 2 ; j++)
 80017fa:	f641 0358 	movw	r3, #6232	@ 0x1858
 80017fe:	443b      	add	r3, r7
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	3b02      	subs	r3, #2
 8001804:	f641 0250 	movw	r2, #6224	@ 0x1850
 8001808:	443a      	add	r2, r7
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e02c      	b.n	8001868 <Analog_Judge+0x1e8>
        	{
        		if (x[j] > x[i])flag = 0;
 800180e:	f641 0350 	movw	r3, #6224	@ 0x1850
 8001812:	443b      	add	r3, r7
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 800181c:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	4413      	add	r3, r2
 8001824:	ed93 6b00 	vldr	d6, [r3]
 8001828:	f641 0358 	movw	r3, #6232	@ 0x1858
 800182c:	443b      	add	r3, r7
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001836:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	4413      	add	r3, r2
 800183e:	ed93 7b00 	vldr	d7, [r3]
 8001842:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	dd04      	ble.n	8001856 <Analog_Judge+0x1d6>
 800184c:	2300      	movs	r3, #0
 800184e:	f641 0254 	movw	r2, #6228	@ 0x1854
 8001852:	443a      	add	r2, r7
 8001854:	6013      	str	r3, [r2, #0]
        	for (int j = i - 2 ; j < i + 2 ; j++)
 8001856:	f641 0350 	movw	r3, #6224	@ 0x1850
 800185a:	443b      	add	r3, r7
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	f641 0250 	movw	r2, #6224	@ 0x1850
 8001864:	443a      	add	r2, r7
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	f641 0358 	movw	r3, #6232	@ 0x1858
 800186c:	443b      	add	r3, r7
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	f641 0250 	movw	r2, #6224	@ 0x1850
 8001876:	443a      	add	r2, r7
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	ddc7      	ble.n	800180e <Analog_Judge+0x18e>
        	}
        	if (flag == 1)
 800187e:	f641 0354 	movw	r3, #6228	@ 0x1854
 8001882:	443b      	add	r3, r7
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d148      	bne.n	800191c <Analog_Judge+0x29c>
        	{
        		bands_sum += x[i];
 800188a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800188e:	443b      	add	r3, r7
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001898:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	ed93 7b00 	vldr	d7, [r3]
 80018a4:	f641 0370 	movw	r3, #6256	@ 0x1870
 80018a8:	443b      	add	r3, r7
 80018aa:	ed93 6b00 	vldr	d6, [r3]
 80018ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018b2:	f641 0370 	movw	r3, #6256	@ 0x1870
 80018b6:	443b      	add	r3, r7
 80018b8:	ed83 7b00 	vstr	d7, [r3]
        		bands[n_bands] = x[i];
 80018bc:	f641 0358 	movw	r3, #6232	@ 0x1858
 80018c0:	443b      	add	r3, r7
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80018ca:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 80018da:	4608      	mov	r0, r1
 80018dc:	f641 0168 	movw	r1, #6248	@ 0x1868
 80018e0:	4439      	add	r1, r7
 80018e2:	6809      	ldr	r1, [r1, #0]
 80018e4:	00c9      	lsls	r1, r1, #3
 80018e6:	4401      	add	r1, r0
 80018e8:	3938      	subs	r1, #56	@ 0x38
 80018ea:	e9c1 2300 	strd	r2, r3, [r1]
        		bands_idx[n_bands] = i;
 80018ee:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80018f2:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 80018f6:	f641 0268 	movw	r2, #6248	@ 0x1868
 80018fa:	443a      	add	r2, r7
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	f641 0158 	movw	r1, #6232	@ 0x1858
 8001902:	4439      	add	r1, r7
 8001904:	6809      	ldr	r1, [r1, #0]
 8001906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        		n_bands++;
 800190a:	f641 0368 	movw	r3, #6248	@ 0x1868
 800190e:	443b      	add	r3, r7
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	f641 0268 	movw	r2, #6248	@ 0x1868
 8001918:	443a      	add	r2, r7
 800191a:	6013      	str	r3, [r2, #0]
    for(int i = main_band_idx - FO_LENGTH / 8; i < main_band_idx +  FO_LENGTH / 8 ; i++)
 800191c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001920:	443b      	add	r3, r7
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	f641 0258 	movw	r2, #6232	@ 0x1858
 800192a:	443a      	add	r2, r7
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	f641 036c 	movw	r3, #6252	@ 0x186c
 8001932:	443b      	add	r3, r7
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800193a:	f641 0258 	movw	r2, #6232	@ 0x1858
 800193e:	443a      	add	r2, r7
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	f77f af28 	ble.w	8001798 <Analog_Judge+0x118>
        	}
        }
    }


    bands_gap = bands_idx[n_bands / 2 + 1] - bands_idx[n_bands / 2];
 8001948:	f641 0368 	movw	r3, #6248	@ 0x1868
 800194c:	443b      	add	r3, r7
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	da00      	bge.n	8001956 <Analog_Judge+0x2d6>
 8001954:	3301      	adds	r3, #1
 8001956:	105b      	asrs	r3, r3, #1
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800195e:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 8001962:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001966:	f641 0368 	movw	r3, #6248	@ 0x1868
 800196a:	443b      	add	r3, r7
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	da00      	bge.n	8001974 <Analog_Judge+0x2f4>
 8001972:	3301      	adds	r3, #1
 8001974:	105b      	asrs	r3, r3, #1
 8001976:	4619      	mov	r1, r3
 8001978:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800197c:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 8001980:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f641 024c 	movw	r2, #6220	@ 0x184c
 800198a:	443a      	add	r2, r7
 800198c:	6013      	str	r3, [r2, #0]
	sprintf(str , "number of separated bands: %d." , n_bands);
 800198e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <Analog_Judge+0x380>)
 8001990:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8001994:	f103 0318 	add.w	r3, r3, #24
 8001998:	443b      	add	r3, r7
 800199a:	f641 0268 	movw	r2, #6248	@ 0x1868
 800199e:	443a      	add	r2, r7
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	4918      	ldr	r1, [pc, #96]	@ (8001a04 <Analog_Judge+0x384>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00d fe01 	bl	800f5ac <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 30   ,HAL_MAX_DELAY);
 80019aa:	4915      	ldr	r1, [pc, #84]	@ (8001a00 <Analog_Judge+0x380>)
 80019ac:	f641 0378 	movw	r3, #6264	@ 0x1878
 80019b0:	440b      	add	r3, r1
 80019b2:	19d9      	adds	r1, r3, r7
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019b8:	221e      	movs	r2, #30
 80019ba:	4813      	ldr	r0, [pc, #76]	@ (8001a08 <Analog_Judge+0x388>)
 80019bc:	f00b fb02 	bl	800cfc4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019c4:	2201      	movs	r2, #1
 80019c6:	4911      	ldr	r1, [pc, #68]	@ (8001a0c <Analog_Judge+0x38c>)
 80019c8:	480f      	ldr	r0, [pc, #60]	@ (8001a08 <Analog_Judge+0x388>)
 80019ca:	f00b fafb 	bl	800cfc4 <HAL_UART_Transmit>


	if (n_bands == 0)
 80019ce:	f641 0368 	movw	r3, #6248	@ 0x1868
 80019d2:	443b      	add	r3, r7
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <Analog_Judge+0x360>
	{
		return -1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019de:	e13d      	b.n	8001c5c <Analog_Judge+0x5dc>
	}
	else if (n_bands == 1)
 80019e0:	f641 0368 	movw	r3, #6248	@ 0x1868
 80019e4:	443b      	add	r3, r7
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d111      	bne.n	8001a10 <Analog_Judge+0x390>
    {
        return 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e135      	b.n	8001c5c <Analog_Judge+0x5dc>
 80019f0:	9999999a 	.word	0x9999999a
 80019f4:	3fb99999 	.word	0x3fb99999
 80019f8:	00000000 	.word	0x00000000
 80019fc:	40490000 	.word	0x40490000
 8001a00:	ffffe794 	.word	0xffffe794
 8001a04:	08014958 	.word	0x08014958
 8001a08:	24015178 	.word	0x24015178
 8001a0c:	08014978 	.word	0x08014978
    }
    else if (n_bands <= 3 )
 8001a10:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001a14:	443b      	add	r3, r7
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	f300 808d 	bgt.w	8001b38 <Analog_Judge+0x4b8>
    {
    	sprintf(str , "bands' gap: %d." , bands_gap);
 8001a1e:	4b98      	ldr	r3, [pc, #608]	@ (8001c80 <Analog_Judge+0x600>)
 8001a20:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8001a24:	f103 0318 	add.w	r3, r3, #24
 8001a28:	443b      	add	r3, r7
 8001a2a:	f641 024c 	movw	r2, #6220	@ 0x184c
 8001a2e:	443a      	add	r2, r7
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	4994      	ldr	r1, [pc, #592]	@ (8001c84 <Analog_Judge+0x604>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00d fdb9 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 15   ,HAL_MAX_DELAY);
 8001a3a:	4991      	ldr	r1, [pc, #580]	@ (8001c80 <Analog_Judge+0x600>)
 8001a3c:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001a40:	440b      	add	r3, r1
 8001a42:	19d9      	adds	r1, r3, r7
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a48:	220f      	movs	r2, #15
 8001a4a:	488f      	ldr	r0, [pc, #572]	@ (8001c88 <Analog_Judge+0x608>)
 8001a4c:	f00b faba 	bl	800cfc4 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a54:	2201      	movs	r2, #1
 8001a56:	498d      	ldr	r1, [pc, #564]	@ (8001c8c <Analog_Judge+0x60c>)
 8001a58:	488b      	ldr	r0, [pc, #556]	@ (8001c88 <Analog_Judge+0x608>)
 8001a5a:	f00b fab3 	bl	800cfc4 <HAL_UART_Transmit>

    	sprintf(str , "frequency: %.2lf kHz." , (double)bands_gap / 81.000);
 8001a5e:	f641 034c 	movw	r3, #6220	@ 0x184c
 8001a62:	443b      	add	r3, r7
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a6e:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8001c68 <Analog_Judge+0x5e8>
 8001a72:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001a76:	4882      	ldr	r0, [pc, #520]	@ (8001c80 <Analog_Judge+0x600>)
 8001a78:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001a7c:	4403      	add	r3, r0
 8001a7e:	19d8      	adds	r0, r3, r7
 8001a80:	ec53 2b15 	vmov	r2, r3, d5
 8001a84:	4982      	ldr	r1, [pc, #520]	@ (8001c90 <Analog_Judge+0x610>)
 8001a86:	f00d fd91 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 8001a8a:	497d      	ldr	r1, [pc, #500]	@ (8001c80 <Analog_Judge+0x600>)
 8001a8c:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001a90:	440b      	add	r3, r1
 8001a92:	19d9      	adds	r1, r3, r7
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a98:	2214      	movs	r2, #20
 8001a9a:	487b      	ldr	r0, [pc, #492]	@ (8001c88 <Analog_Judge+0x608>)
 8001a9c:	f00b fa92 	bl	800cfc4 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4979      	ldr	r1, [pc, #484]	@ (8001c8c <Analog_Judge+0x60c>)
 8001aa8:	4877      	ldr	r0, [pc, #476]	@ (8001c88 <Analog_Judge+0x608>)
 8001aaa:	f00b fa8b 	bl	800cfc4 <HAL_UART_Transmit>

    	sprintf(str , "degree of moderation: %.2lf" ,(bands_sum - bands[n_bands / 2]) / bands[n_bands / 2]);
 8001aae:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001ab2:	443b      	add	r3, r7
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da00      	bge.n	8001abc <Analog_Judge+0x43c>
 8001aba:	3301      	adds	r3, #1
 8001abc:	105b      	asrs	r3, r3, #1
 8001abe:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3b38      	subs	r3, #56	@ 0x38
 8001ac8:	ed93 7b00 	vldr	d7, [r3]
 8001acc:	f641 0370 	movw	r3, #6256	@ 0x1870
 8001ad0:	443b      	add	r3, r7
 8001ad2:	ed93 6b00 	vldr	d6, [r3]
 8001ad6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001ada:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001ade:	443b      	add	r3, r7
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	da00      	bge.n	8001ae8 <Analog_Judge+0x468>
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	105b      	asrs	r3, r3, #1
 8001aea:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	3b38      	subs	r3, #56	@ 0x38
 8001af4:	ed93 7b00 	vldr	d7, [r3]
 8001af8:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001afc:	4860      	ldr	r0, [pc, #384]	@ (8001c80 <Analog_Judge+0x600>)
 8001afe:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001b02:	4403      	add	r3, r0
 8001b04:	19d8      	adds	r0, r3, r7
 8001b06:	ec53 2b15 	vmov	r2, r3, d5
 8001b0a:	4962      	ldr	r1, [pc, #392]	@ (8001c94 <Analog_Judge+0x614>)
 8001b0c:	f00d fd4e 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 26   ,HAL_MAX_DELAY);
 8001b10:	495b      	ldr	r1, [pc, #364]	@ (8001c80 <Analog_Judge+0x600>)
 8001b12:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001b16:	440b      	add	r3, r1
 8001b18:	19d9      	adds	r1, r3, r7
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b1e:	221a      	movs	r2, #26
 8001b20:	4859      	ldr	r0, [pc, #356]	@ (8001c88 <Analog_Judge+0x608>)
 8001b22:	f00b fa4f 	bl	800cfc4 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4957      	ldr	r1, [pc, #348]	@ (8001c8c <Analog_Judge+0x60c>)
 8001b2e:	4856      	ldr	r0, [pc, #344]	@ (8001c88 <Analog_Judge+0x608>)
 8001b30:	f00b fa48 	bl	800cfc4 <HAL_UART_Transmit>
        return 1; 
 8001b34:	2301      	movs	r3, #1
 8001b36:	e091      	b.n	8001c5c <Analog_Judge+0x5dc>
    } 
    else if (n_bands > 3 && n_bands < 20)
 8001b38:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001b3c:	443b      	add	r3, r7
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	dd7e      	ble.n	8001c42 <Analog_Judge+0x5c2>
 8001b44:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001b48:	443b      	add	r3, r7
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b13      	cmp	r3, #19
 8001b4e:	dc78      	bgt.n	8001c42 <Analog_Judge+0x5c2>
    {
    	sprintf(str , "bands' gap: %d." , bands_gap);
 8001b50:	4b4b      	ldr	r3, [pc, #300]	@ (8001c80 <Analog_Judge+0x600>)
 8001b52:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8001b56:	f103 0318 	add.w	r3, r3, #24
 8001b5a:	443b      	add	r3, r7
 8001b5c:	f641 024c 	movw	r2, #6220	@ 0x184c
 8001b60:	443a      	add	r2, r7
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	4947      	ldr	r1, [pc, #284]	@ (8001c84 <Analog_Judge+0x604>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f00d fd20 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 15   ,HAL_MAX_DELAY);
 8001b6c:	4944      	ldr	r1, [pc, #272]	@ (8001c80 <Analog_Judge+0x600>)
 8001b6e:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001b72:	440b      	add	r3, r1
 8001b74:	19d9      	adds	r1, r3, r7
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	4842      	ldr	r0, [pc, #264]	@ (8001c88 <Analog_Judge+0x608>)
 8001b7e:	f00b fa21 	bl	800cfc4 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b86:	2201      	movs	r2, #1
 8001b88:	4940      	ldr	r1, [pc, #256]	@ (8001c8c <Analog_Judge+0x60c>)
 8001b8a:	483f      	ldr	r0, [pc, #252]	@ (8001c88 <Analog_Judge+0x608>)
 8001b8c:	f00b fa1a 	bl	800cfc4 <HAL_UART_Transmit>

    	sprintf(str , "frequency: %.2lf kHz." , (double)bands_gap / 81.000);
 8001b90:	f641 034c 	movw	r3, #6220	@ 0x184c
 8001b94:	443b      	add	r3, r7
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	ee07 3a90 	vmov	s15, r3
 8001b9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ba0:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8001c68 <Analog_Judge+0x5e8>
 8001ba4:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001ba8:	4835      	ldr	r0, [pc, #212]	@ (8001c80 <Analog_Judge+0x600>)
 8001baa:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001bae:	4403      	add	r3, r0
 8001bb0:	19d8      	adds	r0, r3, r7
 8001bb2:	ec53 2b15 	vmov	r2, r3, d5
 8001bb6:	4936      	ldr	r1, [pc, #216]	@ (8001c90 <Analog_Judge+0x610>)
 8001bb8:	f00d fcf8 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 8001bbc:	4930      	ldr	r1, [pc, #192]	@ (8001c80 <Analog_Judge+0x600>)
 8001bbe:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001bc2:	440b      	add	r3, r1
 8001bc4:	19d9      	adds	r1, r3, r7
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bca:	2214      	movs	r2, #20
 8001bcc:	482e      	ldr	r0, [pc, #184]	@ (8001c88 <Analog_Judge+0x608>)
 8001bce:	f00b f9f9 	bl	800cfc4 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	492c      	ldr	r1, [pc, #176]	@ (8001c8c <Analog_Judge+0x60c>)
 8001bda:	482b      	ldr	r0, [pc, #172]	@ (8001c88 <Analog_Judge+0x608>)
 8001bdc:	f00b f9f2 	bl	800cfc4 <HAL_UART_Transmit>
    	// This params come from LR with maximum error about 1.0(often non-int modulation degree). So this should be optimized.
    	sprintf(str , "degree of modulation: %.3lf." ,(bands_sum / main_band - 1.119) / 1.479);
 8001be0:	f641 0370 	movw	r3, #6256	@ 0x1870
 8001be4:	443b      	add	r3, r7
 8001be6:	ed93 5b00 	vldr	d5, [r3]
 8001bea:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 8001bee:	ed93 6b00 	vldr	d6, [r3]
 8001bf2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001bf6:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8001c70 <Analog_Judge+0x5f0>
 8001bfa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bfe:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8001c78 <Analog_Judge+0x5f8>
 8001c02:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001c06:	481e      	ldr	r0, [pc, #120]	@ (8001c80 <Analog_Judge+0x600>)
 8001c08:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001c0c:	4403      	add	r3, r0
 8001c0e:	19d8      	adds	r0, r3, r7
 8001c10:	ec53 2b15 	vmov	r2, r3, d5
 8001c14:	4920      	ldr	r1, [pc, #128]	@ (8001c98 <Analog_Judge+0x618>)
 8001c16:	f00d fcc9 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 29   ,HAL_MAX_DELAY);
 8001c1a:	4919      	ldr	r1, [pc, #100]	@ (8001c80 <Analog_Judge+0x600>)
 8001c1c:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001c20:	440b      	add	r3, r1
 8001c22:	19d9      	adds	r1, r3, r7
 8001c24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c28:	221d      	movs	r2, #29
 8001c2a:	4817      	ldr	r0, [pc, #92]	@ (8001c88 <Analog_Judge+0x608>)
 8001c2c:	f00b f9ca 	bl	800cfc4 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c34:	2201      	movs	r2, #1
 8001c36:	4915      	ldr	r1, [pc, #84]	@ (8001c8c <Analog_Judge+0x60c>)
 8001c38:	4813      	ldr	r0, [pc, #76]	@ (8001c88 <Analog_Judge+0x608>)
 8001c3a:	f00b f9c3 	bl	800cfc4 <HAL_UART_Transmit>
        return 2; 
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e00c      	b.n	8001c5c <Analog_Judge+0x5dc>
    }
    else
    {
        return Digital_Judge(x, v);
 8001c42:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001c46:	f6a3 0278 	subw	r2, r3, #2168	@ 0x878
 8001c4a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001c4e:	f6a3 0374 	subw	r3, r3, #2164	@ 0x874
 8001c52:	6811      	ldr	r1, [r2, #0]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	f000 f823 	bl	8001ca0 <Digital_Judge>
 8001c5a:	4603      	mov	r3, r0
    }
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f507 57c3 	add.w	r7, r7, #6240	@ 0x1860
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	00000000 	.word	0x00000000
 8001c6c:	40544000 	.word	0x40544000
 8001c70:	8b439581 	.word	0x8b439581
 8001c74:	3ff1e76c 	.word	0x3ff1e76c
 8001c78:	e76c8b44 	.word	0xe76c8b44
 8001c7c:	3ff7a9fb 	.word	0x3ff7a9fb
 8001c80:	ffffe794 	.word	0xffffe794
 8001c84:	0801497c 	.word	0x0801497c
 8001c88:	24015178 	.word	0x24015178
 8001c8c:	08014978 	.word	0x08014978
 8001c90:	0801498c 	.word	0x0801498c
 8001c94:	080149a4 	.word	0x080149a4
 8001c98:	080149c0 	.word	0x080149c0
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <Digital_Judge>:
    

int Digital_Judge(double x[], double v[])
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b09e      	sub	sp, #120	@ 0x78
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
    double main_band = 0;
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    int main_band_idx = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    char str[50];

    for (int i = 50; i < FO_LENGTH / 2 - 50; i++)
 8001cba:	2332      	movs	r3, #50	@ 0x32
 8001cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001cbe:	e019      	b.n	8001cf4 <Digital_Judge+0x54>
    {
        if (x[i] > main_band)
 8001cc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	ed93 7b00 	vldr	d7, [r3]
 8001ccc:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8001cd0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd8:	d509      	bpl.n	8001cee <Digital_Judge+0x4e>
        {
            main_band = x[i];
 8001cda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
            main_band_idx = i;
 8001cea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    for (int i = 50; i < FO_LENGTH / 2 - 50; i++)
 8001cee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001cf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cf6:	f640 72cd 	movw	r2, #4045	@ 0xfcd
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	dde0      	ble.n	8001cc0 <Digital_Judge+0x20>
        }
    }

    double threshold = main_band * 0.2;
 8001cfe:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 8001d02:	ed9f 6b55 	vldr	d6, [pc, #340]	@ 8001e58 <Digital_Judge+0x1b8>
 8001d06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d0a:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
    int significant_bands = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	667b      	str	r3, [r7, #100]	@ 0x64
    double band_sum = 0;
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    for (int i = main_band_idx - 100; i <= main_band_idx + 100; i++)
 8001d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d20:	3b64      	subs	r3, #100	@ 0x64
 8001d22:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d24:	e04a      	b.n	8001dbc <Digital_Judge+0x11c>
    {
        if (i >= 100 && i < FO_LENGTH / 2 - 100 && x[i] > threshold)
 8001d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d28:	2b63      	cmp	r3, #99	@ 0x63
 8001d2a:	dd44      	ble.n	8001db6 <Digital_Judge+0x116>
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d2e:	f640 729b 	movw	r2, #3995	@ 0xf9b
 8001d32:	4293      	cmp	r3, r2
 8001d34:	dc3f      	bgt.n	8001db6 <Digital_Judge+0x116>
 8001d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	ed93 7b00 	vldr	d7, [r3]
 8001d42:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 8001d46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d532      	bpl.n	8001db6 <Digital_Judge+0x116>
        {
            int flag = 1;
 8001d50:	2301      	movs	r3, #1
 8001d52:	653b      	str	r3, [r7, #80]	@ 0x50
            for (int j = i - 2; j < i + 2; j++)
 8001d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d56:	3b02      	subs	r3, #2
 8001d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d5a:	e015      	b.n	8001d88 <Digital_Judge+0xe8>
            {
                if (x[j] > x[i])
 8001d5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	ed93 6b00 	vldr	d6, [r3]
 8001d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	ed93 7b00 	vldr	d7, [r3]
 8001d74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	dd01      	ble.n	8001d82 <Digital_Judge+0xe2>
                    flag = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	653b      	str	r3, [r7, #80]	@ 0x50
            for (int j = i - 2; j < i + 2; j++)
 8001d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d84:	3301      	adds	r3, #1
 8001d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	dde4      	ble.n	8001d5c <Digital_Judge+0xbc>
            }
            if (flag == 1)
 8001d92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d10e      	bne.n	8001db6 <Digital_Judge+0x116>
            {
                significant_bands++;
 8001d98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	667b      	str	r3, [r7, #100]	@ 0x64
                band_sum += x[i];
 8001d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	ed93 7b00 	vldr	d7, [r3]
 8001daa:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8001dae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001db2:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (int i = main_band_idx - 100; i <= main_band_idx + 100; i++)
 8001db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db8:	3301      	adds	r3, #1
 8001dba:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dbe:	3364      	adds	r3, #100	@ 0x64
 8001dc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	ddaf      	ble.n	8001d26 <Digital_Judge+0x86>
            }
        }
    }

    for (int i = 50 ; i < FO_LENGTH / 2;  i++)
 8001dc6:	2332      	movs	r3, #50	@ 0x32
 8001dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dca:	e01e      	b.n	8001e0a <Digital_Judge+0x16a>
    {
    	if (abs(v[i] - v[i-1]) > 1)
 8001dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	ed93 6b00 	vldr	d6, [r3]
 8001dd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001dda:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	ed93 7b00 	vldr	d7, [r3]
 8001dea:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001dee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001df2:	ee17 3a90 	vmov	r3, s15
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bfb8      	it	lt
 8001dfa:	425b      	neglt	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	dd01      	ble.n	8001e04 <Digital_Judge+0x164>
    	{
    		return 5;
 8001e00:	2305      	movs	r3, #5
 8001e02:	e022      	b.n	8001e4a <Digital_Judge+0x1aa>
    for (int i = 50 ; i < FO_LENGTH / 2;  i++)
 8001e04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e06:	3301      	adds	r3, #1
 8001e08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e10:	dbdc      	blt.n	8001dcc <Digital_Judge+0x12c>
    	}
    }

	sprintf(str , "number of significant bands: %d." , significant_bands);
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001e18:	4911      	ldr	r1, [pc, #68]	@ (8001e60 <Digital_Judge+0x1c0>)
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00d fbc6 	bl	800f5ac <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 31   ,HAL_MAX_DELAY);
 8001e20:	f107 010c 	add.w	r1, r7, #12
 8001e24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e28:	221f      	movs	r2, #31
 8001e2a:	480e      	ldr	r0, [pc, #56]	@ (8001e64 <Digital_Judge+0x1c4>)
 8001e2c:	f00b f8ca 	bl	800cfc4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e34:	2201      	movs	r2, #1
 8001e36:	490c      	ldr	r1, [pc, #48]	@ (8001e68 <Digital_Judge+0x1c8>)
 8001e38:	480a      	ldr	r0, [pc, #40]	@ (8001e64 <Digital_Judge+0x1c4>)
 8001e3a:	f00b f8c3 	bl	800cfc4 <HAL_UART_Transmit>

    if (significant_bands < 2)
 8001e3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	dc01      	bgt.n	8001e48 <Digital_Judge+0x1a8>
    {
        return 3;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e000      	b.n	8001e4a <Digital_Judge+0x1aa>
    }
    else
    {
        return 4;
 8001e48:	2304      	movs	r3, #4
    }
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3778      	adds	r7, #120	@ 0x78
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	f3af 8000 	nop.w
 8001e58:	9999999a 	.word	0x9999999a
 8001e5c:	3fc99999 	.word	0x3fc99999
 8001e60:	080149e0 	.word	0x080149e0
 8001e64:	24015178 	.word	0x24015178
 8001e68:	08014978 	.word	0x08014978

08001e6c <Judger>:

 


void Judger(int value)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0b4      	sub	sp, #208	@ 0xd0
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	char str[200];

	if (value == -1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e7a:	d10e      	bne.n	8001e9a <Judger+0x2e>
	{
    	sprintf(str , "No signal.\n");
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	4945      	ldr	r1, [pc, #276]	@ (8001f98 <Judger+0x12c>)
 8001e82:	4618      	mov	r0, r3
 8001e84:	f00d fb92 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 12   ,HAL_MAX_DELAY);
 8001e88:	f107 0108 	add.w	r1, r7, #8
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e90:	220c      	movs	r2, #12
 8001e92:	4842      	ldr	r0, [pc, #264]	@ (8001f9c <Judger+0x130>)
 8001e94:	f00b f896 	bl	800cfc4 <HAL_UART_Transmit>
    else
    {
    	sprintf(str , "Unknown signal.\n");
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
	}
}
 8001e98:	e079      	b.n	8001f8e <Judger+0x122>
	else if (value == 0)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10e      	bne.n	8001ebe <Judger+0x52>
    	sprintf(str , "CW signal.\n");
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	493e      	ldr	r1, [pc, #248]	@ (8001fa0 <Judger+0x134>)
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f00d fb80 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 12   ,HAL_MAX_DELAY);
 8001eac:	f107 0108 	add.w	r1, r7, #8
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eb4:	220c      	movs	r2, #12
 8001eb6:	4839      	ldr	r0, [pc, #228]	@ (8001f9c <Judger+0x130>)
 8001eb8:	f00b f884 	bl	800cfc4 <HAL_UART_Transmit>
}
 8001ebc:	e067      	b.n	8001f8e <Judger+0x122>
    else if (value == 1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10e      	bne.n	8001ee2 <Judger+0x76>
    	sprintf(str , "AM signal.\n");
 8001ec4:	f107 0308 	add.w	r3, r7, #8
 8001ec8:	4936      	ldr	r1, [pc, #216]	@ (8001fa4 <Judger+0x138>)
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f00d fb6e 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 11   ,HAL_MAX_DELAY);
 8001ed0:	f107 0108 	add.w	r1, r7, #8
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ed8:	220b      	movs	r2, #11
 8001eda:	4830      	ldr	r0, [pc, #192]	@ (8001f9c <Judger+0x130>)
 8001edc:	f00b f872 	bl	800cfc4 <HAL_UART_Transmit>
}
 8001ee0:	e055      	b.n	8001f8e <Judger+0x122>
    else if (value == 2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d10e      	bne.n	8001f06 <Judger+0x9a>
    	sprintf(str , "FM signal.\n");
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	492e      	ldr	r1, [pc, #184]	@ (8001fa8 <Judger+0x13c>)
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f00d fb5c 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 11   ,HAL_MAX_DELAY);
 8001ef4:	f107 0108 	add.w	r1, r7, #8
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001efc:	220b      	movs	r2, #11
 8001efe:	4827      	ldr	r0, [pc, #156]	@ (8001f9c <Judger+0x130>)
 8001f00:	f00b f860 	bl	800cfc4 <HAL_UART_Transmit>
}
 8001f04:	e043      	b.n	8001f8e <Judger+0x122>
    else if (value == 3)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d10e      	bne.n	8001f2a <Judger+0xbe>
    	sprintf(str , "ASK signal.\n");
 8001f0c:	f107 0308 	add.w	r3, r7, #8
 8001f10:	4926      	ldr	r1, [pc, #152]	@ (8001fac <Judger+0x140>)
 8001f12:	4618      	mov	r0, r3
 8001f14:	f00d fb4a 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001f18:	f107 0108 	add.w	r1, r7, #8
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f20:	221c      	movs	r2, #28
 8001f22:	481e      	ldr	r0, [pc, #120]	@ (8001f9c <Judger+0x130>)
 8001f24:	f00b f84e 	bl	800cfc4 <HAL_UART_Transmit>
}
 8001f28:	e031      	b.n	8001f8e <Judger+0x122>
    else if (value == 4)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d10e      	bne.n	8001f4e <Judger+0xe2>
    	sprintf(str , "FSK signal.\n");
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	491e      	ldr	r1, [pc, #120]	@ (8001fb0 <Judger+0x144>)
 8001f36:	4618      	mov	r0, r3
 8001f38:	f00d fb38 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001f3c:	f107 0108 	add.w	r1, r7, #8
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f44:	221c      	movs	r2, #28
 8001f46:	4815      	ldr	r0, [pc, #84]	@ (8001f9c <Judger+0x130>)
 8001f48:	f00b f83c 	bl	800cfc4 <HAL_UART_Transmit>
}
 8001f4c:	e01f      	b.n	8001f8e <Judger+0x122>
    else if (value == 5)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d10e      	bne.n	8001f72 <Judger+0x106>
    	sprintf(str, "PSK signal.\n");
 8001f54:	f107 0308 	add.w	r3, r7, #8
 8001f58:	4916      	ldr	r1, [pc, #88]	@ (8001fb4 <Judger+0x148>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f00d fb26 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001f60:	f107 0108 	add.w	r1, r7, #8
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f68:	221c      	movs	r2, #28
 8001f6a:	480c      	ldr	r0, [pc, #48]	@ (8001f9c <Judger+0x130>)
 8001f6c:	f00b f82a 	bl	800cfc4 <HAL_UART_Transmit>
}
 8001f70:	e00d      	b.n	8001f8e <Judger+0x122>
    	sprintf(str , "Unknown signal.\n");
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	4910      	ldr	r1, [pc, #64]	@ (8001fb8 <Judger+0x14c>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f00d fb17 	bl	800f5ac <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001f7e:	f107 0108 	add.w	r1, r7, #8
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f86:	221c      	movs	r2, #28
 8001f88:	4804      	ldr	r0, [pc, #16]	@ (8001f9c <Judger+0x130>)
 8001f8a:	f00b f81b 	bl	800cfc4 <HAL_UART_Transmit>
}
 8001f8e:	bf00      	nop
 8001f90:	37d0      	adds	r7, #208	@ 0xd0
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	08014a04 	.word	0x08014a04
 8001f9c:	24015178 	.word	0x24015178
 8001fa0:	08014a10 	.word	0x08014a10
 8001fa4:	08014a1c 	.word	0x08014a1c
 8001fa8:	08014a28 	.word	0x08014a28
 8001fac:	08014a34 	.word	0x08014a34
 8001fb0:	08014a44 	.word	0x08014a44
 8001fb4:	08014a54 	.word	0x08014a54
 8001fb8:	08014a64 	.word	0x08014a64

08001fbc <adc_init>:

double v[FO_LENGTH];
double demodulated_signal[200];

void adc_init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fc4:	220b      	movs	r2, #11
 8001fc6:	4920      	ldr	r1, [pc, #128]	@ (8002048 <adc_init+0x8c>)
 8001fc8:	4820      	ldr	r0, [pc, #128]	@ (800204c <adc_init+0x90>)
 8001fca:	f00a fffb 	bl	800cfc4 <HAL_UART_Transmit>
	MX_ADC1_Init();
 8001fce:	f7fe ffeb 	bl	8000fa8 <MX_ADC1_Init>
	HAL_Delay(1);
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f000 fff6 	bl	8002fc4 <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8001fd8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001fdc:	2100      	movs	r1, #0
 8001fde:	481c      	ldr	r0, [pc, #112]	@ (8002050 <adc_init+0x94>)
 8001fe0:	f002 fd42 	bl	8004a68 <HAL_ADCEx_Calibration_Start>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <adc_init+0x40>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fee:	222f      	movs	r2, #47	@ 0x2f
 8001ff0:	4918      	ldr	r1, [pc, #96]	@ (8002054 <adc_init+0x98>)
 8001ff2:	4816      	ldr	r0, [pc, #88]	@ (800204c <adc_init+0x90>)
 8001ff4:	f00a ffe6 	bl	800cfc4 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001ff8:	f000 fb48 	bl	800268c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data, FO_LENGTH) != HAL_OK)
 8001ffc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002000:	4915      	ldr	r1, [pc, #84]	@ (8002058 <adc_init+0x9c>)
 8002002:	4813      	ldr	r0, [pc, #76]	@ (8002050 <adc_init+0x94>)
 8002004:	f001 fd68 	bl	8003ad8 <HAL_ADC_Start_DMA>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <adc_init+0x64>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 800200e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002012:	2225      	movs	r2, #37	@ 0x25
 8002014:	4911      	ldr	r1, [pc, #68]	@ (800205c <adc_init+0xa0>)
 8002016:	480d      	ldr	r0, [pc, #52]	@ (800204c <adc_init+0x90>)
 8002018:	f00a ffd4 	bl	800cfc4 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 800201c:	f000 fb36 	bl	800268c <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8002020:	480f      	ldr	r0, [pc, #60]	@ (8002060 <adc_init+0xa4>)
 8002022:	f00a fc29 	bl	800c878 <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 8002026:	bf00      	nop
 8002028:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <adc_init+0xa8>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0fa      	beq.n	8002028 <adc_init+0x6c>
	AdcConvEnd = 0;
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <adc_init+0xa8>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 8002038:	4805      	ldr	r0, [pc, #20]	@ (8002050 <adc_init+0x94>)
 800203a:	f001 fbcd 	bl	80037d8 <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 800203e:	4808      	ldr	r0, [pc, #32]	@ (8002060 <adc_init+0xa4>)
 8002040:	f00a fc8a 	bl	800c958 <HAL_TIM_Base_Stop>
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	08014a78 	.word	0x08014a78
 800204c:	24015178 	.word	0x24015178
 8002050:	2400488c 	.word	0x2400488c
 8002054:	08014a84 	.word	0x08014a84
 8002058:	240006e0 	.word	0x240006e0
 800205c:	08014ab4 	.word	0x08014ab4
 8002060:	2401512c 	.word	0x2401512c
 8002064:	24004a48 	.word	0x24004a48

08002068 <ADC_Get>:


void ADC_Get(double arr[])
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	adc_init();
 8002070:	f7ff ffa4 	bl	8001fbc <adc_init>
	double voltage;
//	char str[50];

	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 8002074:	2300      	movs	r3, #0
 8002076:	82fb      	strh	r3, [r7, #22]
 8002078:	e020      	b.n	80020bc <ADC_Get+0x54>
		voltage = ((double)adc1_data[temp]*3.3)/65535 *3;
 800207a:	8afb      	ldrh	r3, [r7, #22]
 800207c:	4a18      	ldr	r2, [pc, #96]	@ (80020e0 <ADC_Get+0x78>)
 800207e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800208a:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 80020d0 <ADC_Get+0x68>
 800208e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002092:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80020d8 <ADC_Get+0x70>
 8002096:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800209a:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 800209e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020a2:	ed87 7b02 	vstr	d7, [r7, #8]

		arr[temp] = voltage;
 80020a6:	8afb      	ldrh	r3, [r7, #22]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	18d1      	adds	r1, r2, r3
 80020ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020b2:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 80020b6:	8afb      	ldrh	r3, [r7, #22]
 80020b8:	3301      	adds	r3, #1
 80020ba:	82fb      	strh	r3, [r7, #22]
 80020bc:	8afb      	ldrh	r3, [r7, #22]
 80020be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020c2:	d3da      	bcc.n	800207a <ADC_Get+0x12>
//		sprintf(str , "%.5f" , v[temp]);
//		HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
//		HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
	}
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	66666666 	.word	0x66666666
 80020d4:	400a6666 	.word	0x400a6666
 80020d8:	00000000 	.word	0x00000000
 80020dc:	40efffe0 	.word	0x40efffe0
 80020e0:	240006e0 	.word	0x240006e0
 80020e4:	00000000 	.word	0x00000000

080020e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	f5ad 3d80 	sub.w	sp, sp, #65536	@ 0x10000
 80020ee:	b09c      	sub	sp, #112	@ 0x70
 80020f0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80020f2:	f000 fa6d 	bl	80025d0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80020f6:	4b9f      	ldr	r3, [pc, #636]	@ (8002374 <main+0x28c>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d11b      	bne.n	800213a <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002102:	f3bf 8f4f 	dsb	sy
}
 8002106:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002108:	f3bf 8f6f 	isb	sy
}
 800210c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800210e:	4b99      	ldr	r3, [pc, #612]	@ (8002374 <main+0x28c>)
 8002110:	2200      	movs	r2, #0
 8002112:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002116:	f3bf 8f4f 	dsb	sy
}
 800211a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800211c:	f3bf 8f6f 	isb	sy
}
 8002120:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002122:	4b94      	ldr	r3, [pc, #592]	@ (8002374 <main+0x28c>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	4a93      	ldr	r2, [pc, #588]	@ (8002374 <main+0x28c>)
 8002128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800212c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800212e:	f3bf 8f4f 	dsb	sy
}
 8002132:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002134:	f3bf 8f6f 	isb	sy
}
 8002138:	e000      	b.n	800213c <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800213a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800213c:	4b8d      	ldr	r3, [pc, #564]	@ (8002374 <main+0x28c>)
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d14e      	bne.n	80021e6 <main+0xfe>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002148:	4b8a      	ldr	r3, [pc, #552]	@ (8002374 <main+0x28c>)
 800214a:	2200      	movs	r2, #0
 800214c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002150:	f3bf 8f4f 	dsb	sy
}
 8002154:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002156:	4b87      	ldr	r3, [pc, #540]	@ (8002374 <main+0x28c>)
 8002158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800215c:	4a86      	ldr	r2, [pc, #536]	@ (8002378 <main+0x290>)
 800215e:	443a      	add	r2, r7
 8002160:	6013      	str	r3, [r2, #0]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002162:	4b85      	ldr	r3, [pc, #532]	@ (8002378 <main+0x290>)
 8002164:	443b      	add	r3, r7
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	0b5b      	lsrs	r3, r3, #13
 800216a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800216e:	4a83      	ldr	r2, [pc, #524]	@ (800237c <main+0x294>)
 8002170:	443a      	add	r2, r7
 8002172:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002174:	4b80      	ldr	r3, [pc, #512]	@ (8002378 <main+0x290>)
 8002176:	443b      	add	r3, r7
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	08db      	lsrs	r3, r3, #3
 800217c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002180:	4a7f      	ldr	r2, [pc, #508]	@ (8002380 <main+0x298>)
 8002182:	443a      	add	r2, r7
 8002184:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002186:	4b7d      	ldr	r3, [pc, #500]	@ (800237c <main+0x294>)
 8002188:	443b      	add	r3, r7
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8002192:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002194:	4a7a      	ldr	r2, [pc, #488]	@ (8002380 <main+0x298>)
 8002196:	443a      	add	r2, r7
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800219c:	4975      	ldr	r1, [pc, #468]	@ (8002374 <main+0x28c>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80021a4:	4b76      	ldr	r3, [pc, #472]	@ (8002380 <main+0x298>)
 80021a6:	443b      	add	r3, r7
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1e5a      	subs	r2, r3, #1
 80021ac:	4974      	ldr	r1, [pc, #464]	@ (8002380 <main+0x298>)
 80021ae:	4439      	add	r1, r7
 80021b0:	600a      	str	r2, [r1, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1e7      	bne.n	8002186 <main+0x9e>
    } while(sets-- != 0U);
 80021b6:	4b71      	ldr	r3, [pc, #452]	@ (800237c <main+0x294>)
 80021b8:	443b      	add	r3, r7
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	496f      	ldr	r1, [pc, #444]	@ (800237c <main+0x294>)
 80021c0:	4439      	add	r1, r7
 80021c2:	600a      	str	r2, [r1, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1d5      	bne.n	8002174 <main+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 80021c8:	f3bf 8f4f 	dsb	sy
}
 80021cc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80021ce:	4b69      	ldr	r3, [pc, #420]	@ (8002374 <main+0x28c>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	4a68      	ldr	r2, [pc, #416]	@ (8002374 <main+0x28c>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80021da:	f3bf 8f4f 	dsb	sy
}
 80021de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021e0:	f3bf 8f6f 	isb	sy
}
 80021e4:	e000      	b.n	80021e8 <main+0x100>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80021e6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e8:	f000 fe5a 	bl	8002ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ec:	f000 f92a 	bl	8002444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f0:	f7ff f91a 	bl	8001428 <MX_GPIO_Init>
  MX_DMA_Init();
 80021f4:	f7ff f8f0 	bl	80013d8 <MX_DMA_Init>
  MX_I2C1_Init();
 80021f8:	f7ff f998 	bl	800152c <MX_I2C1_Init>
  MX_TIM15_Init();
 80021fc:	f000 fcc6 	bl	8002b8c <MX_TIM15_Init>
  MX_DAC1_Init();
 8002200:	f7ff f83e 	bl	8001280 <MX_DAC1_Init>
  MX_TIM7_Init();
 8002204:	f000 fc8c 	bl	8002b20 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002208:	f000 fd62 	bl	8002cd0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800220c:	f7fe fecc 	bl	8000fa8 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002210:	f000 fc50 	bl	8002ab4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  char str[50];
  double v_cpy[FO_LENGTH];
  ADC_Get(v);
 8002214:	485b      	ldr	r0, [pc, #364]	@ (8002384 <main+0x29c>)
 8002216:	f7ff ff27 	bl	8002068 <ADC_Get>
  for (int i = 1 ;i < FO_LENGTH	; i++)
 800221a:	2301      	movs	r3, #1
 800221c:	4a5a      	ldr	r2, [pc, #360]	@ (8002388 <main+0x2a0>)
 800221e:	443a      	add	r2, r7
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e022      	b.n	800226a <main+0x182>
  {
	  sprintf(str , "%.5f" , v[i]);
 8002224:	4a57      	ldr	r2, [pc, #348]	@ (8002384 <main+0x29c>)
 8002226:	4b58      	ldr	r3, [pc, #352]	@ (8002388 <main+0x2a0>)
 8002228:	443b      	add	r3, r7
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	4855      	ldr	r0, [pc, #340]	@ (800238c <main+0x2a4>)
 8002236:	4438      	add	r0, r7
 8002238:	4955      	ldr	r1, [pc, #340]	@ (8002390 <main+0x2a8>)
 800223a:	f00d f9b7 	bl	800f5ac <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 800223e:	4953      	ldr	r1, [pc, #332]	@ (800238c <main+0x2a4>)
 8002240:	4439      	add	r1, r7
 8002242:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002246:	2207      	movs	r2, #7
 8002248:	4852      	ldr	r0, [pc, #328]	@ (8002394 <main+0x2ac>)
 800224a:	f00a febb 	bl	800cfc4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 800224e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002252:	2201      	movs	r2, #1
 8002254:	4950      	ldr	r1, [pc, #320]	@ (8002398 <main+0x2b0>)
 8002256:	484f      	ldr	r0, [pc, #316]	@ (8002394 <main+0x2ac>)
 8002258:	f00a feb4 	bl	800cfc4 <HAL_UART_Transmit>
  for (int i = 1 ;i < FO_LENGTH	; i++)
 800225c:	4b4a      	ldr	r3, [pc, #296]	@ (8002388 <main+0x2a0>)
 800225e:	443b      	add	r3, r7
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	4a48      	ldr	r2, [pc, #288]	@ (8002388 <main+0x2a0>)
 8002266:	443a      	add	r2, r7
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b47      	ldr	r3, [pc, #284]	@ (8002388 <main+0x2a0>)
 800226c:	443b      	add	r3, r7
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002274:	dbd6      	blt.n	8002224 <main+0x13c>
  }
  memcpy(v_cpy, v, FO_LENGTH);
 8002276:	4b49      	ldr	r3, [pc, #292]	@ (800239c <main+0x2b4>)
 8002278:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800227c:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8002280:	443b      	add	r3, r7
 8002282:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002286:	493f      	ldr	r1, [pc, #252]	@ (8002384 <main+0x29c>)
 8002288:	4618      	mov	r0, r3
 800228a:	f00d fceb 	bl	800fc64 <memcpy>

  Blackman(FO_LENGTH, (2457 - FO_LENGTH/ 4), (2457 + FO_LENGTH / 4), v);
 800228e:	4b3d      	ldr	r3, [pc, #244]	@ (8002384 <main+0x29c>)
 8002290:	f241 1299 	movw	r2, #4505	@ 0x1199
 8002294:	f240 1199 	movw	r1, #409	@ 0x199
 8002298:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800229c:	f7fe fdf0 	bl	8000e80 <Blackman>
  FFT_Mag_sqrt(FO_LENGTH, v);
 80022a0:	4938      	ldr	r1, [pc, #224]	@ (8002384 <main+0x29c>)
 80022a2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022a6:	f7fe fdb7 	bl	8000e18 <FFT_Mag_sqrt>

  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	4a3c      	ldr	r2, [pc, #240]	@ (80023a0 <main+0x2b8>)
 80022ae:	443a      	add	r2, r7
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e022      	b.n	80022fa <main+0x212>
  {
	  sprintf(str , "%.5f" , v[i]);
 80022b4:	4a33      	ldr	r2, [pc, #204]	@ (8002384 <main+0x29c>)
 80022b6:	4b3a      	ldr	r3, [pc, #232]	@ (80023a0 <main+0x2b8>)
 80022b8:	443b      	add	r3, r7
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	4831      	ldr	r0, [pc, #196]	@ (800238c <main+0x2a4>)
 80022c6:	4438      	add	r0, r7
 80022c8:	4931      	ldr	r1, [pc, #196]	@ (8002390 <main+0x2a8>)
 80022ca:	f00d f96f 	bl	800f5ac <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 80022ce:	492f      	ldr	r1, [pc, #188]	@ (800238c <main+0x2a4>)
 80022d0:	4439      	add	r1, r7
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022d6:	2207      	movs	r2, #7
 80022d8:	482e      	ldr	r0, [pc, #184]	@ (8002394 <main+0x2ac>)
 80022da:	f00a fe73 	bl	800cfc4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 80022de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022e2:	2201      	movs	r2, #1
 80022e4:	492c      	ldr	r1, [pc, #176]	@ (8002398 <main+0x2b0>)
 80022e6:	482b      	ldr	r0, [pc, #172]	@ (8002394 <main+0x2ac>)
 80022e8:	f00a fe6c 	bl	800cfc4 <HAL_UART_Transmit>
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 80022ec:	4b2c      	ldr	r3, [pc, #176]	@ (80023a0 <main+0x2b8>)
 80022ee:	443b      	add	r3, r7
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a2a      	ldr	r2, [pc, #168]	@ (80023a0 <main+0x2b8>)
 80022f6:	443a      	add	r2, r7
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b29      	ldr	r3, [pc, #164]	@ (80023a0 <main+0x2b8>)
 80022fc:	443b      	add	r3, r7
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002304:	dbd6      	blt.n	80022b4 <main+0x1cc>
  }
  int value = Analog_Judge(v, v_cpy);
 8002306:	4b25      	ldr	r3, [pc, #148]	@ (800239c <main+0x2b4>)
 8002308:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800230c:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8002310:	443b      	add	r3, r7
 8002312:	4619      	mov	r1, r3
 8002314:	481b      	ldr	r0, [pc, #108]	@ (8002384 <main+0x29c>)
 8002316:	f7ff f9b3 	bl	8001680 <Analog_Judge>
 800231a:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <main+0x2bc>)
 800231c:	443b      	add	r3, r7
 800231e:	6018      	str	r0, [r3, #0]
  Judger(value);
 8002320:	4b20      	ldr	r3, [pc, #128]	@ (80023a4 <main+0x2bc>)
 8002322:	443b      	add	r3, r7
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	f7ff fda1 	bl	8001e6c <Judger>

  wave_arg arg = {0.5, 1000.0, 0.0};
 800232a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800232e:	4a1e      	ldr	r2, [pc, #120]	@ (80023a8 <main+0x2c0>)
 8002330:	f1a3 0468 	sub.w	r4, r3, #104	@ 0x68
 8002334:	4615      	mov	r5, r2
 8002336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800233a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800233e:	e884 0003 	stmia.w	r4, {r0, r1}



  SineWave_Generator(demodulated_signal, 200, 1, arg);
 8002342:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002346:	ed13 5b1a 	vldr	d5, [r3, #-104]	@ 0xffffff98
 800234a:	ed13 6b18 	vldr	d6, [r3, #-96]	@ 0xffffffa0
 800234e:	ed13 7b16 	vldr	d7, [r3, #-88]	@ 0xffffffa8
 8002352:	eeb0 1b45 	vmov.f64	d1, d5
 8002356:	eeb0 2b46 	vmov.f64	d2, d6
 800235a:	eeb0 3b47 	vmov.f64	d3, d7
 800235e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8002362:	21c8      	movs	r1, #200	@ 0xc8
 8002364:	4811      	ldr	r0, [pc, #68]	@ (80023ac <main+0x2c4>)
 8002366:	f000 f997 	bl	8002698 <SineWave_Generator>
  for (int i = 0 ; i < 200 ; i++)
 800236a:	2300      	movs	r3, #0
 800236c:	4a10      	ldr	r2, [pc, #64]	@ (80023b0 <main+0x2c8>)
 800236e:	443a      	add	r2, r7
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e041      	b.n	80023f8 <main+0x310>
 8002374:	e000ed00 	.word	0xe000ed00
 8002378:	00010054 	.word	0x00010054
 800237c:	00010050 	.word	0x00010050
 8002380:	0001004c 	.word	0x0001004c
 8002384:	24004a50 	.word	0x24004a50
 8002388:	00010064 	.word	0x00010064
 800238c:	00010018 	.word	0x00010018
 8002390:	08014adc 	.word	0x08014adc
 8002394:	24015178 	.word	0x24015178
 8002398:	08014ae4 	.word	0x08014ae4
 800239c:	fffeffb0 	.word	0xfffeffb0
 80023a0:	00010060 	.word	0x00010060
 80023a4:	00010058 	.word	0x00010058
 80023a8:	08014ae8 	.word	0x08014ae8
 80023ac:	24014a50 	.word	0x24014a50
 80023b0:	0001005c 	.word	0x0001005c
  {
	  Dat[i] = (uint16_t)(demodulated_signal[i] * 4095 + 2048);
 80023b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002430 <main+0x348>)
 80023b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <main+0x34c>)
 80023b8:	443b      	add	r3, r7
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	ed93 7b00 	vldr	d7, [r3]
 80023c4:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8002420 <main+0x338>
 80023c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023cc:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8002428 <main+0x340>
 80023d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023d8:	ee17 3a90 	vmov	r3, s15
 80023dc:	b299      	uxth	r1, r3
 80023de:	4a16      	ldr	r2, [pc, #88]	@ (8002438 <main+0x350>)
 80023e0:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <main+0x34c>)
 80023e2:	443b      	add	r3, r7
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0 ; i < 200 ; i++)
 80023ea:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <main+0x34c>)
 80023ec:	443b      	add	r3, r7
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	4a10      	ldr	r2, [pc, #64]	@ (8002434 <main+0x34c>)
 80023f4:	443a      	add	r2, r7
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <main+0x34c>)
 80023fa:	443b      	add	r3, r7
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8002400:	ddd8      	ble.n	80023b4 <main+0x2cc>
  }
  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2,(uint32_t *)Dat,200,DAC_ALIGN_12B_R);
 8002402:	2300      	movs	r3, #0
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	23c8      	movs	r3, #200	@ 0xc8
 8002408:	4a0b      	ldr	r2, [pc, #44]	@ (8002438 <main+0x350>)
 800240a:	2110      	movs	r1, #16
 800240c:	480b      	ldr	r0, [pc, #44]	@ (800243c <main+0x354>)
 800240e:	f002 fe1b 	bl	8005048 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8002412:	480b      	ldr	r0, [pc, #44]	@ (8002440 <main+0x358>)
 8002414:	f00a fa30 	bl	800c878 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <main+0x330>
 800241c:	f3af 8000 	nop.w
 8002420:	00000000 	.word	0x00000000
 8002424:	40affe00 	.word	0x40affe00
 8002428:	00000000 	.word	0x00000000
 800242c:	40a00000 	.word	0x40a00000
 8002430:	24014a50 	.word	0x24014a50
 8002434:	0001005c 	.word	0x0001005c
 8002438:	240046e0 	.word	0x240046e0
 800243c:	24004968 	.word	0x24004968
 8002440:	24015094 	.word	0x24015094

08002444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b09e      	sub	sp, #120	@ 0x78
 8002448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800244a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800244e:	224c      	movs	r2, #76	@ 0x4c
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f00d fbb2 	bl	800fbbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	2220      	movs	r2, #32
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f00d fbab 	bl	800fbbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002466:	2002      	movs	r0, #2
 8002468:	f006 fc8e 	bl	8008d88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	4b4c      	ldr	r3, [pc, #304]	@ (80025a4 <SystemClock_Config+0x160>)
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	4a4b      	ldr	r2, [pc, #300]	@ (80025a4 <SystemClock_Config+0x160>)
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800247c:	4b49      	ldr	r3, [pc, #292]	@ (80025a4 <SystemClock_Config+0x160>)
 800247e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	4b48      	ldr	r3, [pc, #288]	@ (80025a8 <SystemClock_Config+0x164>)
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	4a47      	ldr	r2, [pc, #284]	@ (80025a8 <SystemClock_Config+0x164>)
 800248c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002490:	6193      	str	r3, [r2, #24]
 8002492:	4b45      	ldr	r3, [pc, #276]	@ (80025a8 <SystemClock_Config+0x164>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800249e:	bf00      	nop
 80024a0:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <SystemClock_Config+0x164>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ac:	d1f8      	bne.n	80024a0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ae:	4b3f      	ldr	r3, [pc, #252]	@ (80025ac <SystemClock_Config+0x168>)
 80024b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024b4:	4a3d      	ldr	r2, [pc, #244]	@ (80025ac <SystemClock_Config+0x168>)
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024be:	4b3b      	ldr	r3, [pc, #236]	@ (80025ac <SystemClock_Config+0x168>)
 80024c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80024cc:	2300      	movs	r3, #0
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4b35      	ldr	r3, [pc, #212]	@ (80025a8 <SystemClock_Config+0x164>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4a34      	ldr	r2, [pc, #208]	@ (80025a8 <SystemClock_Config+0x164>)
 80024d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024da:	6193      	str	r3, [r2, #24]
 80024dc:	4b32      	ldr	r3, [pc, #200]	@ (80025a8 <SystemClock_Config+0x164>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	4b2f      	ldr	r3, [pc, #188]	@ (80025a4 <SystemClock_Config+0x160>)
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	4a2e      	ldr	r2, [pc, #184]	@ (80025a4 <SystemClock_Config+0x160>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80024f2:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <SystemClock_Config+0x160>)
 80024f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80024fe:	bf00      	nop
 8002500:	4b29      	ldr	r3, [pc, #164]	@ (80025a8 <SystemClock_Config+0x164>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800250c:	d1f8      	bne.n	8002500 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800250e:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <SystemClock_Config+0x168>)
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	4a25      	ldr	r2, [pc, #148]	@ (80025ac <SystemClock_Config+0x168>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800251e:	2301      	movs	r3, #1
 8002520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002522:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002526:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002528:	2302      	movs	r3, #2
 800252a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800252c:	2302      	movs	r3, #2
 800252e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002530:	2305      	movs	r3, #5
 8002532:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002534:	23c0      	movs	r3, #192	@ 0xc0
 8002536:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002538:	2302      	movs	r3, #2
 800253a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800253c:	2302      	movs	r3, #2
 800253e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002540:	2302      	movs	r3, #2
 8002542:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002544:	2308      	movs	r3, #8
 8002546:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002548:	2300      	movs	r3, #0
 800254a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002550:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002554:	4618      	mov	r0, r3
 8002556:	f006 fc51 	bl	8008dfc <HAL_RCC_OscConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8002560:	f000 f894 	bl	800268c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002564:	233f      	movs	r3, #63	@ 0x3f
 8002566:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002568:	2303      	movs	r3, #3
 800256a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002570:	2308      	movs	r3, #8
 8002572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002574:	2340      	movs	r3, #64	@ 0x40
 8002576:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002578:	2340      	movs	r3, #64	@ 0x40
 800257a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800257c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002582:	2340      	movs	r3, #64	@ 0x40
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002586:	f107 030c 	add.w	r3, r7, #12
 800258a:	2104      	movs	r1, #4
 800258c:	4618      	mov	r0, r3
 800258e:	f007 f891 	bl	80096b4 <HAL_RCC_ClockConfig>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8002598:	f000 f878 	bl	800268c <Error_Handler>
  }
}
 800259c:	bf00      	nop
 800259e:	3778      	adds	r7, #120	@ 0x78
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	58000400 	.word	0x58000400
 80025a8:	58024800 	.word	0x58024800
 80025ac:	58024400 	.word	0x58024400

080025b0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
   if(hadc->Instance == ADC1)
	{
      //SCB_InvalidateDCache_by_Addr((uint32_t *) &adc1_data[0], ADC1_BUFFER_SIZE);
   }
	 AdcConvEnd = 1;
 80025b8:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <HAL_ADC_ConvCpltCallback+0x1c>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	24004a48 	.word	0x24004a48

080025d0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80025d6:	463b      	mov	r3, r7
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80025e2:	f002 fc93 	bl	8004f0c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80025e6:	2301      	movs	r3, #1
 80025e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80025ee:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 80025f2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80025f4:	2312      	movs	r3, #18
 80025f6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80025fc:	2301      	movs	r3, #1
 80025fe:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002600:	2303      	movs	r3, #3
 8002602:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800260c:	2301      	movs	r3, #1
 800260e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002614:	463b      	mov	r3, r7
 8002616:	4618      	mov	r0, r3
 8002618:	f002 fcb0 	bl	8004f7c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800261c:	2301      	movs	r3, #1
 800261e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002620:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002624:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002626:	2310      	movs	r3, #16
 8002628:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800262a:	2300      	movs	r3, #0
 800262c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002632:	463b      	mov	r3, r7
 8002634:	4618      	mov	r0, r3
 8002636:	f002 fca1 	bl	8004f7c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800263a:	2302      	movs	r3, #2
 800263c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 800263e:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <MPU_Config+0xb4>)
 8002640:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002642:	463b      	mov	r3, r7
 8002644:	4618      	mov	r0, r3
 8002646:	f002 fc99 	bl	8004f7c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800264a:	2303      	movs	r3, #3
 800264c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <MPU_Config+0xb8>)
 8002650:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8002652:	230e      	movs	r3, #14
 8002654:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002656:	463b      	mov	r3, r7
 8002658:	4618      	mov	r0, r3
 800265a:	f002 fc8f 	bl	8004f7c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800265e:	2304      	movs	r3, #4
 8002660:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8002662:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8002666:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002668:	230f      	movs	r3, #15
 800266a:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800266c:	463b      	mov	r3, r7
 800266e:	4618      	mov	r0, r3
 8002670:	f002 fc84 	bl	8004f7c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002674:	2004      	movs	r0, #4
 8002676:	f002 fc61 	bl	8004f3c <HAL_MPU_Enable>

}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	30020000 	.word	0x30020000
 8002688:	30040000 	.word	0x30040000

0800268c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002690:	b672      	cpsid	i
}
 8002692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <Error_Handler+0x8>

08002698 <SineWave_Generator>:
#include "signals.h"

void SineWave_Generator(double wave[], int size, double time, wave_arg arg)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	ed2d 8b02 	vpush	{d8}
 800269e:	b08e      	sub	sp, #56	@ 0x38
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6278      	str	r0, [r7, #36]	@ 0x24
 80026a4:	6239      	str	r1, [r7, #32]
 80026a6:	ed87 0b06 	vstr	d0, [r7, #24]
 80026aa:	eeb0 5b41 	vmov.f64	d5, d1
 80026ae:	eeb0 6b42 	vmov.f64	d6, d2
 80026b2:	eeb0 7b43 	vmov.f64	d7, d3
 80026b6:	ed87 5b00 	vstr	d5, [r7]
 80026ba:	ed87 6b02 	vstr	d6, [r7, #8]
 80026be:	ed87 7b04 	vstr	d7, [r7, #16]
    double time_step = (double)time / size;
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80026cc:	ed97 5b06 	vldr	d5, [r7, #24]
 80026d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80026d4:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    for (int i = 0; i < size; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	637b      	str	r3, [r7, #52]	@ 0x34
 80026dc:	e023      	b.n	8002726 <SineWave_Generator+0x8e>
    {
        wave[i] = arg.amp * sin(2 * M_PI * i * time_step + arg.phase);
 80026de:	ed97 8b00 	vldr	d8, [r7]
 80026e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e4:	ee07 3a90 	vmov	s15, r3
 80026e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026ec:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8002740 <SineWave_Generator+0xa8>
 80026f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80026f4:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80026f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80026fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8002700:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002704:	eeb0 0b47 	vmov.f64	d0, d7
 8002708:	f011 f9ea 	bl	8013ae0 <sin>
 800270c:	eeb0 7b40 	vmov.f64	d7, d0
 8002710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002716:	4413      	add	r3, r2
 8002718:	ee28 7b07 	vmul.f64	d7, d8, d7
 800271c:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0; i < size; i++)
 8002720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002722:	3301      	adds	r3, #1
 8002724:	637b      	str	r3, [r7, #52]	@ 0x34
 8002726:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	429a      	cmp	r2, r3
 800272c:	dbd7      	blt.n	80026de <SineWave_Generator+0x46>
    }
}
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	3738      	adds	r7, #56	@ 0x38
 8002734:	46bd      	mov	sp, r7
 8002736:	ecbd 8b02 	vpop	{d8}
 800273a:	bd80      	pop	{r7, pc}
 800273c:	f3af 8000 	nop.w
 8002740:	54442d18 	.word	0x54442d18
 8002744:	401921fb 	.word	0x401921fb

08002748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <HAL_MspInit+0x30>)
 8002750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002754:	4a08      	ldr	r2, [pc, #32]	@ (8002778 <HAL_MspInit+0x30>)
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800275e:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_MspInit+0x30>)
 8002760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	58024400 	.word	0x58024400

0800277c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <NMI_Handler+0x4>

08002784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <HardFault_Handler+0x4>

0800278c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <MemManage_Handler+0x4>

08002794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <BusFault_Handler+0x4>

0800279c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <UsageFault_Handler+0x4>

080027a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d2:	f000 fbd7 	bl	8002f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027e0:	4802      	ldr	r0, [pc, #8]	@ (80027ec <DMA1_Stream0_IRQHandler+0x10>)
 80027e2:	f004 fbc3 	bl	8006f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	240048f0 	.word	0x240048f0

080027f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80027f4:	4802      	ldr	r0, [pc, #8]	@ (8002800 <DMA1_Stream1_IRQHandler+0x10>)
 80027f6:	f004 fbb9 	bl	8006f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2400497c 	.word	0x2400497c

08002804 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002808:	4802      	ldr	r0, [pc, #8]	@ (8002814 <USART1_IRQHandler+0x10>)
 800280a:	f00a fc69 	bl	800d0e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	24015178 	.word	0x24015178

08002818 <_getpid>:
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
 800281c:	2301      	movs	r3, #1
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <_kill>:
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	f00d f9e9 	bl	800fc08 <__errno>
 8002836:	4603      	mov	r3, r0
 8002838:	2216      	movs	r2, #22
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_exit>:
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ffe7 	bl	8002828 <_kill>
 800285a:	bf00      	nop
 800285c:	e7fd      	b.n	800285a <_exit+0x12>

0800285e <_read>:
 800285e:	b580      	push	{r7, lr}
 8002860:	b086      	sub	sp, #24
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e00a      	b.n	8002886 <_read+0x28>
 8002870:	f3af 8000 	nop.w
 8002874:	4601      	mov	r1, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	60ba      	str	r2, [r7, #8]
 800287c:	b2ca      	uxtb	r2, r1
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3301      	adds	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	dbf0      	blt.n	8002870 <_read+0x12>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <_write>:
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e009      	b.n	80028be <_write+0x26>
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	60ba      	str	r2, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f3af 8000 	nop.w
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3301      	adds	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	dbf1      	blt.n	80028aa <_write+0x12>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_close>:
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <_fstat>:
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	2300      	movs	r3, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <_isatty>:
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	2301      	movs	r3, #1
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_lseek>:
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	2300      	movs	r3, #0
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <_sbrk>:
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	4a14      	ldr	r2, [pc, #80]	@ (8002994 <_sbrk+0x5c>)
 8002942:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <_sbrk+0x60>)
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	4b13      	ldr	r3, [pc, #76]	@ (800299c <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <_sbrk+0x22>
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <_sbrk+0x64>)
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <_sbrk+0x68>)
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	429a      	cmp	r2, r3
 8002966:	d207      	bcs.n	8002978 <_sbrk+0x40>
 8002968:	f00d f94e 	bl	800fc08 <__errno>
 800296c:	4603      	mov	r3, r0
 800296e:	220c      	movs	r2, #12
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002976:	e009      	b.n	800298c <_sbrk+0x54>
 8002978:	4b08      	ldr	r3, [pc, #32]	@ (800299c <_sbrk+0x64>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <_sbrk+0x64>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	4a05      	ldr	r2, [pc, #20]	@ (800299c <_sbrk+0x64>)
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	24080000 	.word	0x24080000
 8002998:	00001000 	.word	0x00001000
 800299c:	24015090 	.word	0x24015090
 80029a0:	24015520 	.word	0x24015520

080029a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029a8:	4b37      	ldr	r3, [pc, #220]	@ (8002a88 <SystemInit+0xe4>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	4a36      	ldr	r2, [pc, #216]	@ (8002a88 <SystemInit+0xe4>)
 80029b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029b8:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <SystemInit+0xe8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d807      	bhi.n	80029d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029c4:	4b31      	ldr	r3, [pc, #196]	@ (8002a8c <SystemInit+0xe8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 030f 	bic.w	r3, r3, #15
 80029cc:	4a2f      	ldr	r2, [pc, #188]	@ (8002a8c <SystemInit+0xe8>)
 80029ce:	f043 0307 	orr.w	r3, r3, #7
 80029d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a90 <SystemInit+0xec>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002a90 <SystemInit+0xec>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <SystemInit+0xec>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80029e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a90 <SystemInit+0xec>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4929      	ldr	r1, [pc, #164]	@ (8002a90 <SystemInit+0xec>)
 80029ec:	4b29      	ldr	r3, [pc, #164]	@ (8002a94 <SystemInit+0xf0>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029f2:	4b26      	ldr	r3, [pc, #152]	@ (8002a8c <SystemInit+0xe8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029fe:	4b23      	ldr	r3, [pc, #140]	@ (8002a8c <SystemInit+0xe8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 030f 	bic.w	r3, r3, #15
 8002a06:	4a21      	ldr	r2, [pc, #132]	@ (8002a8c <SystemInit+0xe8>)
 8002a08:	f043 0307 	orr.w	r3, r3, #7
 8002a0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a0e:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <SystemInit+0xec>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a14:	4b1e      	ldr	r3, [pc, #120]	@ (8002a90 <SystemInit+0xec>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a90 <SystemInit+0xec>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <SystemInit+0xec>)
 8002a22:	4a1d      	ldr	r2, [pc, #116]	@ (8002a98 <SystemInit+0xf4>)
 8002a24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a26:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <SystemInit+0xec>)
 8002a28:	4a1c      	ldr	r2, [pc, #112]	@ (8002a9c <SystemInit+0xf8>)
 8002a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a2c:	4b18      	ldr	r3, [pc, #96]	@ (8002a90 <SystemInit+0xec>)
 8002a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa0 <SystemInit+0xfc>)
 8002a30:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a32:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <SystemInit+0xec>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a38:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <SystemInit+0xec>)
 8002a3a:	4a19      	ldr	r2, [pc, #100]	@ (8002aa0 <SystemInit+0xfc>)
 8002a3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a3e:	4b14      	ldr	r3, [pc, #80]	@ (8002a90 <SystemInit+0xec>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a44:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <SystemInit+0xec>)
 8002a46:	4a16      	ldr	r2, [pc, #88]	@ (8002aa0 <SystemInit+0xfc>)
 8002a48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a4a:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <SystemInit+0xec>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a50:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <SystemInit+0xec>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0e      	ldr	r2, [pc, #56]	@ (8002a90 <SystemInit+0xec>)
 8002a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <SystemInit+0xec>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002a62:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <SystemInit+0x100>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <SystemInit+0x104>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a6e:	d202      	bcs.n	8002a76 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002a70:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <SystemInit+0x108>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a76:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab0 <SystemInit+0x10c>)
 8002a78:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002a7c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00
 8002a8c:	52002000 	.word	0x52002000
 8002a90:	58024400 	.word	0x58024400
 8002a94:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a98:	02020200 	.word	0x02020200
 8002a9c:	01ff0000 	.word	0x01ff0000
 8002aa0:	01010280 	.word	0x01010280
 8002aa4:	5c001000 	.word	0x5c001000
 8002aa8:	ffff0000 	.word	0xffff0000
 8002aac:	51008108 	.word	0x51008108
 8002ab0:	52004000 	.word	0x52004000

08002ab4 <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ac4:	4b14      	ldr	r3, [pc, #80]	@ (8002b18 <MX_TIM6_Init+0x64>)
 8002ac6:	4a15      	ldr	r2, [pc, #84]	@ (8002b1c <MX_TIM6_Init+0x68>)
 8002ac8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 12 - 1;
 8002aca:	4b13      	ldr	r3, [pc, #76]	@ (8002b18 <MX_TIM6_Init+0x64>)
 8002acc:	220b      	movs	r2, #11
 8002ace:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <MX_TIM6_Init+0x64>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200 - 1;
 8002ad6:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <MX_TIM6_Init+0x64>)
 8002ad8:	22c7      	movs	r2, #199	@ 0xc7
 8002ada:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002adc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b18 <MX_TIM6_Init+0x64>)
 8002ade:	2280      	movs	r2, #128	@ 0x80
 8002ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ae2:	480d      	ldr	r0, [pc, #52]	@ (8002b18 <MX_TIM6_Init+0x64>)
 8002ae4:	f009 fe70 	bl	800c7c8 <HAL_TIM_Base_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002aee:	f7ff fdcd 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002af2:	2320      	movs	r3, #32
 8002af4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	4619      	mov	r1, r3
 8002afe:	4806      	ldr	r0, [pc, #24]	@ (8002b18 <MX_TIM6_Init+0x64>)
 8002b00:	f00a f982 	bl	800ce08 <HAL_TIMEx_MasterConfigSynchronization>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002b0a:	f7ff fdbf 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	24015094 	.word	0x24015094
 8002b1c:	40001000 	.word	0x40001000

08002b20 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002b30:	4b14      	ldr	r3, [pc, #80]	@ (8002b84 <MX_TIM7_Init+0x64>)
 8002b32:	4a15      	ldr	r2, [pc, #84]	@ (8002b88 <MX_TIM7_Init+0x68>)
 8002b34:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8002b36:	4b13      	ldr	r3, [pc, #76]	@ (8002b84 <MX_TIM7_Init+0x64>)
 8002b38:	22ef      	movs	r2, #239	@ 0xef
 8002b3a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <MX_TIM7_Init+0x64>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002b42:	4b10      	ldr	r3, [pc, #64]	@ (8002b84 <MX_TIM7_Init+0x64>)
 8002b44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b48:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <MX_TIM7_Init+0x64>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002b50:	480c      	ldr	r0, [pc, #48]	@ (8002b84 <MX_TIM7_Init+0x64>)
 8002b52:	f009 fe39 	bl	800c7c8 <HAL_TIM_Base_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002b5c:	f7ff fd96 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b60:	2300      	movs	r3, #0
 8002b62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4805      	ldr	r0, [pc, #20]	@ (8002b84 <MX_TIM7_Init+0x64>)
 8002b6e:	f00a f94b 	bl	800ce08 <HAL_TIMEx_MasterConfigSynchronization>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002b78:	f7ff fd88 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	240150e0 	.word	0x240150e0
 8002b88:	40001400 	.word	0x40001400

08002b8c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002baa:	4b1f      	ldr	r3, [pc, #124]	@ (8002c28 <MX_TIM15_Init+0x9c>)
 8002bac:	4a1f      	ldr	r2, [pc, #124]	@ (8002c2c <MX_TIM15_Init+0xa0>)
 8002bae:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2-1;
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c28 <MX_TIM15_Init+0x9c>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c28 <MX_TIM15_Init+0x9c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2-1;
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <MX_TIM15_Init+0x9c>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002bc2:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <MX_TIM15_Init+0x9c>)
 8002bc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bc8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002bca:	4b17      	ldr	r3, [pc, #92]	@ (8002c28 <MX_TIM15_Init+0x9c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <MX_TIM15_Init+0x9c>)
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002bd6:	4814      	ldr	r0, [pc, #80]	@ (8002c28 <MX_TIM15_Init+0x9c>)
 8002bd8:	f009 fdf6 	bl	800c7c8 <HAL_TIM_Base_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002be2:	f7ff fd53 	bl	800268c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002be6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002bec:	f107 0310 	add.w	r3, r7, #16
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	480d      	ldr	r0, [pc, #52]	@ (8002c28 <MX_TIM15_Init+0x9c>)
 8002bf4:	f009 fed8 	bl	800c9a8 <HAL_TIM_ConfigClockSource>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002bfe:	f7ff fd45 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002c02:	2310      	movs	r3, #16
 8002c04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4806      	ldr	r0, [pc, #24]	@ (8002c28 <MX_TIM15_Init+0x9c>)
 8002c10:	f00a f8fa 	bl	800ce08 <HAL_TIMEx_MasterConfigSynchronization>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002c1a:	f7ff fd37 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002c1e:	bf00      	nop
 8002c20:	3720      	adds	r7, #32
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	2401512c 	.word	0x2401512c
 8002c2c:	40014000 	.word	0x40014000

08002c30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a20      	ldr	r2, [pc, #128]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x90>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d10f      	bne.n	8002c62 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c42:	4b20      	ldr	r3, [pc, #128]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x94>)
 8002c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c48:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x94>)
 8002c4a:	f043 0310 	orr.w	r3, r3, #16
 8002c4e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c52:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x94>)
 8002c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002c60:	e028      	b.n	8002cb4 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM7)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a18      	ldr	r2, [pc, #96]	@ (8002cc8 <HAL_TIM_Base_MspInit+0x98>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10f      	bne.n	8002c8c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c6c:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x94>)
 8002c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c72:	4a14      	ldr	r2, [pc, #80]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x94>)
 8002c74:	f043 0320 	orr.w	r3, r3, #32
 8002c78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x94>)
 8002c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]
}
 8002c8a:	e013      	b.n	8002cb4 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM15)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0e      	ldr	r2, [pc, #56]	@ (8002ccc <HAL_TIM_Base_MspInit+0x9c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d10e      	bne.n	8002cb4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002c96:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x94>)
 8002c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c9c:	4a09      	ldr	r2, [pc, #36]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x94>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ca6:	4b07      	ldr	r3, [pc, #28]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x94>)
 8002ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
}
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40001000 	.word	0x40001000
 8002cc4:	58024400 	.word	0x58024400
 8002cc8:	40001400 	.word	0x40001400
 8002ccc:	40014000 	.word	0x40014000

08002cd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cd4:	4b22      	ldr	r3, [pc, #136]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002cd6:	4a23      	ldr	r2, [pc, #140]	@ (8002d64 <MX_USART1_UART_Init+0x94>)
 8002cd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cda:	4b21      	ldr	r3, [pc, #132]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002cdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ce0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cee:	4b1c      	ldr	r3, [pc, #112]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cfa:	4b19      	ldr	r3, [pc, #100]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d00:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d06:	4b16      	ldr	r3, [pc, #88]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d0c:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d12:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d18:	4811      	ldr	r0, [pc, #68]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002d1a:	f00a f903 	bl	800cf24 <HAL_UART_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d24:	f7ff fcb2 	bl	800268c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d28:	2100      	movs	r1, #0
 8002d2a:	480d      	ldr	r0, [pc, #52]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002d2c:	f00b fdcc 	bl	800e8c8 <HAL_UARTEx_SetTxFifoThreshold>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d36:	f7ff fca9 	bl	800268c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4808      	ldr	r0, [pc, #32]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002d3e:	f00b fe01 	bl	800e944 <HAL_UARTEx_SetRxFifoThreshold>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d48:	f7ff fca0 	bl	800268c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d4c:	4804      	ldr	r0, [pc, #16]	@ (8002d60 <MX_USART1_UART_Init+0x90>)
 8002d4e:	f00b fd82 	bl	800e856 <HAL_UARTEx_DisableFifoMode>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d58:	f7ff fc98 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	24015178 	.word	0x24015178
 8002d64:	40011000 	.word	0x40011000

08002d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b0ba      	sub	sp, #232	@ 0xe8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	22c0      	movs	r2, #192	@ 0xc0
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f00c ff17 	bl	800fbbc <memset>
  if(uartHandle->Instance==USART1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a2b      	ldr	r2, [pc, #172]	@ (8002e40 <HAL_UART_MspInit+0xd8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d14e      	bne.n	8002e36 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d98:	f04f 0201 	mov.w	r2, #1
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002daa:	f107 0310 	add.w	r3, r7, #16
 8002dae:	4618      	mov	r0, r3
 8002db0:	f007 f80c 	bl	8009dcc <HAL_RCCEx_PeriphCLKConfig>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002dba:	f7ff fc67 	bl	800268c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dbe:	4b21      	ldr	r3, [pc, #132]	@ (8002e44 <HAL_UART_MspInit+0xdc>)
 8002dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e44 <HAL_UART_MspInit+0xdc>)
 8002dc6:	f043 0310 	orr.w	r3, r3, #16
 8002dca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002dce:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <HAL_UART_MspInit+0xdc>)
 8002dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ddc:	4b19      	ldr	r3, [pc, #100]	@ (8002e44 <HAL_UART_MspInit+0xdc>)
 8002dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002de2:	4a18      	ldr	r2, [pc, #96]	@ (8002e44 <HAL_UART_MspInit+0xdc>)
 8002de4:	f043 0302 	orr.w	r3, r3, #2
 8002de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dec:	4b15      	ldr	r3, [pc, #84]	@ (8002e44 <HAL_UART_MspInit+0xdc>)
 8002dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002dfa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002e14:	2304      	movs	r3, #4
 8002e16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4809      	ldr	r0, [pc, #36]	@ (8002e48 <HAL_UART_MspInit+0xe0>)
 8002e22:	f005 fbb5 	bl	8008590 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2025      	movs	r0, #37	@ 0x25
 8002e2c:	f002 f839 	bl	8004ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e30:	2025      	movs	r0, #37	@ 0x25
 8002e32:	f002 f850 	bl	8004ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e36:	bf00      	nop
 8002e38:	37e8      	adds	r7, #232	@ 0xe8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40011000 	.word	0x40011000
 8002e44:	58024400 	.word	0x58024400
 8002e48:	58020400 	.word	0x58020400

08002e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e50:	f7ff fda8 	bl	80029a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e54:	480c      	ldr	r0, [pc, #48]	@ (8002e88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e56:	490d      	ldr	r1, [pc, #52]	@ (8002e8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e58:	4a0d      	ldr	r2, [pc, #52]	@ (8002e90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e5c:	e002      	b.n	8002e64 <LoopCopyDataInit>

08002e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e62:	3304      	adds	r3, #4

08002e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e68:	d3f9      	bcc.n	8002e5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e6c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e70:	e001      	b.n	8002e76 <LoopFillZerobss>

08002e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e74:	3204      	adds	r2, #4

08002e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e78:	d3fb      	bcc.n	8002e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e7a:	f00c fecb 	bl	800fc14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e7e:	f7ff f933 	bl	80020e8 <main>
  bx  lr
 8002e82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e8c:	240006c4 	.word	0x240006c4
  ldr r2, =_sidata
 8002e90:	08017204 	.word	0x08017204
  ldr r2, =_sbss
 8002e94:	24004870 	.word	0x24004870
  ldr r4, =_ebss
 8002e98:	2401551c 	.word	0x2401551c

08002e9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e9c:	e7fe      	b.n	8002e9c <ADC3_IRQHandler>
	...

08002ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea6:	2003      	movs	r0, #3
 8002ea8:	f001 fff0 	bl	8004e8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002eac:	f006 fdb8 	bl	8009a20 <HAL_RCC_GetSysClockFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <HAL_Init+0x68>)
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	4913      	ldr	r1, [pc, #76]	@ (8002f0c <HAL_Init+0x6c>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eca:	4b0f      	ldr	r3, [pc, #60]	@ (8002f08 <HAL_Init+0x68>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8002f0c <HAL_Init+0x6c>)
 8002ed4:	5cd3      	ldrb	r3, [r2, r3]
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8002f10 <HAL_Init+0x70>)
 8002ee2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <HAL_Init+0x74>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eea:	200f      	movs	r0, #15
 8002eec:	f000 f814 	bl	8002f18 <HAL_InitTick>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e002      	b.n	8002f00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002efa:	f7ff fc25 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	58024400 	.word	0x58024400
 8002f0c:	08014b00 	.word	0x08014b00
 8002f10:	24000004 	.word	0x24000004
 8002f14:	24000000 	.word	0x24000000

08002f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f20:	4b15      	ldr	r3, [pc, #84]	@ (8002f78 <HAL_InitTick+0x60>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e021      	b.n	8002f70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f2c:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <HAL_InitTick+0x64>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b11      	ldr	r3, [pc, #68]	@ (8002f78 <HAL_InitTick+0x60>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	4619      	mov	r1, r3
 8002f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 ffd5 	bl	8004ef2 <HAL_SYSTICK_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00e      	b.n	8002f70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0f      	cmp	r3, #15
 8002f56:	d80a      	bhi.n	8002f6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f60:	f001 ff9f 	bl	8004ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f64:	4a06      	ldr	r2, [pc, #24]	@ (8002f80 <HAL_InitTick+0x68>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	2400000c 	.word	0x2400000c
 8002f7c:	24000000 	.word	0x24000000
 8002f80:	24000008 	.word	0x24000008

08002f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_IncTick+0x20>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <HAL_IncTick+0x24>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <HAL_IncTick+0x24>)
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	2400000c 	.word	0x2400000c
 8002fa8:	2401520c 	.word	0x2401520c

08002fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	@ (8002fc0 <HAL_GetTick+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	2401520c 	.word	0x2401520c

08002fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff ffee 	bl	8002fac <HAL_GetTick>
 8002fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fdc:	d005      	beq.n	8002fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_Delay+0x44>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fea:	bf00      	nop
 8002fec:	f7ff ffde 	bl	8002fac <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d8f7      	bhi.n	8002fec <HAL_Delay+0x28>
  {
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	2400000c 	.word	0x2400000c

0800300c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003010:	4b03      	ldr	r3, [pc, #12]	@ (8003020 <HAL_GetREVID+0x14>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0c1b      	lsrs	r3, r3, #16
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	5c001000 	.word	0x5c001000

08003024 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	609a      	str	r2, [r3, #8]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3360      	adds	r3, #96	@ 0x60
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	431a      	orrs	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	431a      	orrs	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	611a      	str	r2, [r3, #16]
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3360      	adds	r3, #96	@ 0x60
 800310e:	461a      	mov	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	431a      	orrs	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	601a      	str	r2, [r3, #0]
  }
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800315a:	b480      	push	{r7}
 800315c:	b087      	sub	sp, #28
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3330      	adds	r3, #48	@ 0x30
 800316a:	461a      	mov	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	4413      	add	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	211f      	movs	r1, #31
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	401a      	ands	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0e9b      	lsrs	r3, r3, #26
 8003192:	f003 011f 	and.w	r1, r3, #31
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	431a      	orrs	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f023 0203 	bic.w	r2, r3, #3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	60da      	str	r2, [r3, #12]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3314      	adds	r3, #20
 80031e8:	461a      	mov	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	0e5b      	lsrs	r3, r3, #25
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	4413      	add	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	0d1b      	lsrs	r3, r3, #20
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2107      	movs	r1, #7
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	401a      	ands	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	0d1b      	lsrs	r3, r3, #20
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	431a      	orrs	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003248:	43db      	mvns	r3, r3
 800324a:	401a      	ands	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f003 0318 	and.w	r3, r3, #24
 8003252:	4908      	ldr	r1, [pc, #32]	@ (8003274 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003254:	40d9      	lsrs	r1, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	400b      	ands	r3, r1
 800325a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800325e:	431a      	orrs	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	000fffff 	.word	0x000fffff

08003278 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 031f 	and.w	r3, r3, #31
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4b04      	ldr	r3, [pc, #16]	@ (80032b4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6093      	str	r3, [r2, #8]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	5fffffc0 	.word	0x5fffffc0

080032b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032cc:	d101      	bne.n	80032d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <LL_ADC_EnableInternalRegulator+0x24>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	6fffffc0 	.word	0x6fffffc0

08003308 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800331c:	d101      	bne.n	8003322 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <LL_ADC_Enable+0x24>)
 800333e:	4013      	ands	r3, r2
 8003340:	f043 0201 	orr.w	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	7fffffc0 	.word	0x7fffffc0

08003358 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <LL_ADC_Disable+0x24>)
 8003366:	4013      	ands	r3, r2
 8003368:	f043 0202 	orr.w	r2, r3, #2
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	7fffffc0 	.word	0x7fffffc0

08003380 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <LL_ADC_IsEnabled+0x18>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <LL_ADC_IsEnabled+0x1a>
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d101      	bne.n	80033be <LL_ADC_IsDisableOngoing+0x18>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <LL_ADC_IsDisableOngoing+0x1a>
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <LL_ADC_REG_StartConversion+0x24>)
 80033da:	4013      	ands	r3, r2
 80033dc:	f043 0204 	orr.w	r2, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	7fffffc0 	.word	0x7fffffc0

080033f4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <LL_ADC_REG_StopConversion+0x24>)
 8003402:	4013      	ands	r3, r2
 8003404:	f043 0210 	orr.w	r2, r3, #16
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	7fffffc0 	.word	0x7fffffc0

0800341c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b04      	cmp	r3, #4
 800342e:	d101      	bne.n	8003434 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <LL_ADC_INJ_StopConversion+0x24>)
 8003452:	4013      	ands	r3, r2
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	7fffffc0 	.word	0x7fffffc0

0800346c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b08      	cmp	r3, #8
 800347e:	d101      	bne.n	8003484 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b089      	sub	sp, #36	@ 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e18f      	b.n	80037ce <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7fd fded 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff feef 	bl	80032b8 <LL_ADC_IsDeepPowerDownEnabled>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d004      	beq.n	80034ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fed5 	bl	8003294 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff ff0a 	bl	8003308 <LL_ADC_IsInternalRegulatorEnabled>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d114      	bne.n	8003524 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff feee 	bl	80032e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003504:	4b87      	ldr	r3, [pc, #540]	@ (8003724 <HAL_ADC_Init+0x290>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	4a87      	ldr	r2, [pc, #540]	@ (8003728 <HAL_ADC_Init+0x294>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	099b      	lsrs	r3, r3, #6
 8003512:	3301      	adds	r3, #1
 8003514:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003516:	e002      	b.n	800351e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	3b01      	subs	r3, #1
 800351c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f9      	bne.n	8003518 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff feed 	bl	8003308 <LL_ADC_IsInternalRegulatorEnabled>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10d      	bne.n	8003550 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003538:	f043 0210 	orr.w	r2, r3, #16
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff61 	bl	800341c <LL_ADC_REG_IsConversionOngoing>
 800355a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	f040 8129 	bne.w	80037bc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f040 8125 	bne.w	80037bc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003576:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800357a:	f043 0202 	orr.w	r2, r3, #2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fefa 	bl	8003380 <LL_ADC_IsEnabled>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d136      	bne.n	8003600 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a65      	ldr	r2, [pc, #404]	@ (800372c <HAL_ADC_Init+0x298>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_ADC_Init+0x112>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a63      	ldr	r2, [pc, #396]	@ (8003730 <HAL_ADC_Init+0x29c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10e      	bne.n	80035c4 <HAL_ADC_Init+0x130>
 80035a6:	4861      	ldr	r0, [pc, #388]	@ (800372c <HAL_ADC_Init+0x298>)
 80035a8:	f7ff feea 	bl	8003380 <LL_ADC_IsEnabled>
 80035ac:	4604      	mov	r4, r0
 80035ae:	4860      	ldr	r0, [pc, #384]	@ (8003730 <HAL_ADC_Init+0x29c>)
 80035b0:	f7ff fee6 	bl	8003380 <LL_ADC_IsEnabled>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4323      	orrs	r3, r4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e008      	b.n	80035d6 <HAL_ADC_Init+0x142>
 80035c4:	485b      	ldr	r0, [pc, #364]	@ (8003734 <HAL_ADC_Init+0x2a0>)
 80035c6:	f7ff fedb 	bl	8003380 <LL_ADC_IsEnabled>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d012      	beq.n	8003600 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a53      	ldr	r2, [pc, #332]	@ (800372c <HAL_ADC_Init+0x298>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_ADC_Init+0x15a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a51      	ldr	r2, [pc, #324]	@ (8003730 <HAL_ADC_Init+0x29c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_ADC_Init+0x15e>
 80035ee:	4a52      	ldr	r2, [pc, #328]	@ (8003738 <HAL_ADC_Init+0x2a4>)
 80035f0:	e000      	b.n	80035f4 <HAL_ADC_Init+0x160>
 80035f2:	4a52      	ldr	r2, [pc, #328]	@ (800373c <HAL_ADC_Init+0x2a8>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4619      	mov	r1, r3
 80035fa:	4610      	mov	r0, r2
 80035fc:	f7ff fd12 	bl	8003024 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003600:	f7ff fd04 	bl	800300c <HAL_GetREVID>
 8003604:	4603      	mov	r3, r0
 8003606:	f241 0203 	movw	r2, #4099	@ 0x1003
 800360a:	4293      	cmp	r3, r2
 800360c:	d914      	bls.n	8003638 <HAL_ADC_Init+0x1a4>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b10      	cmp	r3, #16
 8003614:	d110      	bne.n	8003638 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	7d5b      	ldrb	r3, [r3, #21]
 800361a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003620:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003626:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	7f1b      	ldrb	r3, [r3, #28]
 800362c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800362e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003630:	f043 030c 	orr.w	r3, r3, #12
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	e00d      	b.n	8003654 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7d5b      	ldrb	r3, [r3, #21]
 800363c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003642:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003648:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7f1b      	ldrb	r3, [r3, #28]
 800364e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	7f1b      	ldrb	r3, [r3, #28]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d106      	bne.n	800366a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	3b01      	subs	r3, #1
 8003662:	045b      	lsls	r3, r3, #17
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	4b2c      	ldr	r3, [pc, #176]	@ (8003740 <HAL_ADC_Init+0x2ac>)
 800368e:	4013      	ands	r3, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	69b9      	ldr	r1, [r7, #24]
 8003696:	430b      	orrs	r3, r1
 8003698:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff febc 	bl	800341c <LL_ADC_REG_IsConversionOngoing>
 80036a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fede 	bl	800346c <LL_ADC_INJ_IsConversionOngoing>
 80036b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d15f      	bne.n	8003778 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d15c      	bne.n	8003778 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	7d1b      	ldrb	r3, [r3, #20]
 80036c2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003744 <HAL_ADC_Init+0x2b0>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	69b9      	ldr	r1, [r7, #24]
 80036dc:	430b      	orrs	r3, r1
 80036de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d130      	bne.n	800374c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	4b14      	ldr	r3, [pc, #80]	@ (8003748 <HAL_ADC_Init+0x2b4>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036fe:	3a01      	subs	r2, #1
 8003700:	0411      	lsls	r1, r2, #16
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003706:	4311      	orrs	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800370c:	4311      	orrs	r1, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003712:	430a      	orrs	r2, r1
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	611a      	str	r2, [r3, #16]
 8003720:	e01c      	b.n	800375c <HAL_ADC_Init+0x2c8>
 8003722:	bf00      	nop
 8003724:	24000000 	.word	0x24000000
 8003728:	053e2d63 	.word	0x053e2d63
 800372c:	40022000 	.word	0x40022000
 8003730:	40022100 	.word	0x40022100
 8003734:	58026000 	.word	0x58026000
 8003738:	40022300 	.word	0x40022300
 800373c:	58026300 	.word	0x58026300
 8003740:	fff0c003 	.word	0xfff0c003
 8003744:	ffffbffc 	.word	0xffffbffc
 8003748:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f001 f812 	bl	800479c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10c      	bne.n	800379a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003786:	f023 010f 	bic.w	r1, r3, #15
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	1e5a      	subs	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	631a      	str	r2, [r3, #48]	@ 0x30
 8003798:	e007      	b.n	80037aa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 020f 	bic.w	r2, r2, #15
 80037a8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ae:	f023 0303 	bic.w	r3, r3, #3
 80037b2:	f043 0201 	orr.w	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80037ba:	e007      	b.n	80037cc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c0:	f043 0210 	orr.w	r2, r3, #16
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3724      	adds	r7, #36	@ 0x24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd90      	pop	{r4, r7, pc}
 80037d6:	bf00      	nop

080037d8 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e16e      	b.n	8003ac8 <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ee:	f043 0202 	orr.w	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80037f6:	2103      	movs	r1, #3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fd95 	bl	8004328 <ADC_ConversionStop>
 80037fe:	4603      	mov	r3, r0
 8003800:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003810:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10a      	bne.n	800382e <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fecb 	bl	80045b4 <ADC_Disable>
 800381e:	4603      	mov	r3, r0
 8003820:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b8c      	ldr	r3, [pc, #560]	@ (8003a6c <HAL_ADC_DeInit+0x294>)
 800383a:	400b      	ands	r3, r1
 800383c:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003846:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 8003856:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003866:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 8003876:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003886:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6919      	ldr	r1, [r3, #16]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4b77      	ldr	r3, [pc, #476]	@ (8003a70 <HAL_ADC_DeInit+0x298>)
 8003894:	400b      	ands	r3, r1
 8003896:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80038a6:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 80038b6:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80038c6:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80038d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80038e8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80038fc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003910:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003924:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b50      	ldr	r3, [pc, #320]	@ (8003a74 <HAL_ADC_DeInit+0x29c>)
 8003934:	400b      	ands	r3, r1
 8003936:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b4d      	ldr	r3, [pc, #308]	@ (8003a78 <HAL_ADC_DeInit+0x2a0>)
 8003944:	400b      	ands	r3, r1
 8003946:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b49      	ldr	r3, [pc, #292]	@ (8003a78 <HAL_ADC_DeInit+0x2a0>)
 8003954:	400b      	ands	r3, r1
 8003956:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b46      	ldr	r3, [pc, #280]	@ (8003a7c <HAL_ADC_DeInit+0x2a4>)
 8003964:	400b      	ands	r3, r1
 8003966:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2200      	movs	r2, #0
 8003982:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2200      	movs	r2, #0
 8003990:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b34      	ldr	r3, [pc, #208]	@ (8003a80 <HAL_ADC_DeInit+0x2a8>)
 80039ae:	400b      	ands	r3, r1
 80039b0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003a80 <HAL_ADC_DeInit+0x2a8>)
 80039c2:	400b      	ands	r3, r1
 80039c4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a80 <HAL_ADC_DeInit+0x2a8>)
 80039d6:	400b      	ands	r3, r1
 80039d8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 80039ec:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a23      	ldr	r2, [pc, #140]	@ (8003a84 <HAL_ADC_DeInit+0x2ac>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_ADC_DeInit+0x22c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a22      	ldr	r2, [pc, #136]	@ (8003a88 <HAL_ADC_DeInit+0x2b0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10e      	bne.n	8003a22 <HAL_ADC_DeInit+0x24a>
 8003a04:	481f      	ldr	r0, [pc, #124]	@ (8003a84 <HAL_ADC_DeInit+0x2ac>)
 8003a06:	f7ff fcbb 	bl	8003380 <LL_ADC_IsEnabled>
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	481e      	ldr	r0, [pc, #120]	@ (8003a88 <HAL_ADC_DeInit+0x2b0>)
 8003a0e:	f7ff fcb7 	bl	8003380 <LL_ADC_IsEnabled>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4323      	orrs	r3, r4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bf0c      	ite	eq
 8003a1a:	2301      	moveq	r3, #1
 8003a1c:	2300      	movne	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	e008      	b.n	8003a34 <HAL_ADC_DeInit+0x25c>
 8003a22:	481a      	ldr	r0, [pc, #104]	@ (8003a8c <HAL_ADC_DeInit+0x2b4>)
 8003a24:	f7ff fcac 	bl	8003380 <LL_ADC_IsEnabled>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d036      	beq.n	8003aa6 <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a11      	ldr	r2, [pc, #68]	@ (8003a84 <HAL_ADC_DeInit+0x2ac>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_ADC_DeInit+0x274>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a10      	ldr	r2, [pc, #64]	@ (8003a88 <HAL_ADC_DeInit+0x2b0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_ADC_DeInit+0x278>
 8003a4c:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <HAL_ADC_DeInit+0x2b8>)
 8003a4e:	e000      	b.n	8003a52 <HAL_ADC_DeInit+0x27a>
 8003a50:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <HAL_ADC_DeInit+0x2bc>)
 8003a52:	6899      	ldr	r1, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0a      	ldr	r2, [pc, #40]	@ (8003a84 <HAL_ADC_DeInit+0x2ac>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <HAL_ADC_DeInit+0x290>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a09      	ldr	r2, [pc, #36]	@ (8003a88 <HAL_ADC_DeInit+0x2b0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d117      	bne.n	8003a98 <HAL_ADC_DeInit+0x2c0>
 8003a68:	4a09      	ldr	r2, [pc, #36]	@ (8003a90 <HAL_ADC_DeInit+0x2b8>)
 8003a6a:	e016      	b.n	8003a9a <HAL_ADC_DeInit+0x2c2>
 8003a6c:	fffff800 	.word	0xfffff800
 8003a70:	fc00f81c 	.word	0xfc00f81c
 8003a74:	e0820830 	.word	0xe0820830
 8003a78:	e0820820 	.word	0xe0820820
 8003a7c:	fffff820 	.word	0xfffff820
 8003a80:	fff00000 	.word	0xfff00000
 8003a84:	40022000 	.word	0x40022000
 8003a88:	40022100 	.word	0x40022100
 8003a8c:	58026000 	.word	0x58026000
 8003a90:	40022300 	.word	0x40022300
 8003a94:	58026300 	.word	0x58026300
 8003a98:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad0 <HAL_ADC_DeInit+0x2f8>)
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad4 <HAL_ADC_DeInit+0x2fc>)
 8003a9c:	400b      	ands	r3, r1
 8003a9e:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7fd fbc3 	bl	800122c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd90      	pop	{r4, r7, pc}
 8003ad0:	58026300 	.word	0x58026300
 8003ad4:	fe0030e0 	.word	0xfe0030e0

08003ad8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a55      	ldr	r2, [pc, #340]	@ (8003c40 <HAL_ADC_Start_DMA+0x168>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_ADC_Start_DMA+0x20>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a54      	ldr	r2, [pc, #336]	@ (8003c44 <HAL_ADC_Start_DMA+0x16c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_ADC_Start_DMA+0x24>
 8003af8:	4b53      	ldr	r3, [pc, #332]	@ (8003c48 <HAL_ADC_Start_DMA+0x170>)
 8003afa:	e000      	b.n	8003afe <HAL_ADC_Start_DMA+0x26>
 8003afc:	4b53      	ldr	r3, [pc, #332]	@ (8003c4c <HAL_ADC_Start_DMA+0x174>)
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fbba 	bl	8003278 <LL_ADC_GetMultimode>
 8003b04:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fc86 	bl	800341c <LL_ADC_REG_IsConversionOngoing>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 808c 	bne.w	8003c30 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_ADC_Start_DMA+0x4e>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e087      	b.n	8003c36 <HAL_ADC_Start_DMA+0x15e>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b05      	cmp	r3, #5
 8003b38:	d002      	beq.n	8003b40 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b09      	cmp	r3, #9
 8003b3e:	d170      	bne.n	8003c22 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fcad 	bl	80044a0 <ADC_Enable>
 8003b46:	4603      	mov	r3, r0
 8003b48:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d163      	bne.n	8003c18 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b54:	4b3e      	ldr	r3, [pc, #248]	@ (8003c50 <HAL_ADC_Start_DMA+0x178>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a37      	ldr	r2, [pc, #220]	@ (8003c44 <HAL_ADC_Start_DMA+0x16c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d002      	beq.n	8003b70 <HAL_ADC_Start_DMA+0x98>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	e000      	b.n	8003b72 <HAL_ADC_Start_DMA+0x9a>
 8003b70:	4b33      	ldr	r3, [pc, #204]	@ (8003c40 <HAL_ADC_Start_DMA+0x168>)
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d002      	beq.n	8003b80 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d006      	beq.n	8003ba6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9c:	f023 0206 	bic.w	r2, r3, #6
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ba4:	e002      	b.n	8003bac <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb0:	4a28      	ldr	r2, [pc, #160]	@ (8003c54 <HAL_ADC_Start_DMA+0x17c>)
 8003bb2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb8:	4a27      	ldr	r2, [pc, #156]	@ (8003c58 <HAL_ADC_Start_DMA+0x180>)
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc0:	4a26      	ldr	r2, [pc, #152]	@ (8003c5c <HAL_ADC_Start_DMA+0x184>)
 8003bc2:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	221c      	movs	r2, #28
 8003bca:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0210 	orr.w	r2, r2, #16
 8003be2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f7ff fadf 	bl	80031b2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3340      	adds	r3, #64	@ 0x40
 8003bfe:	4619      	mov	r1, r3
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f002 f9e4 	bl	8005fd0 <HAL_DMA_Start_IT>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fbdb 	bl	80033cc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003c16:	e00d      	b.n	8003c34 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003c20:	e008      	b.n	8003c34 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003c2e:	e001      	b.n	8003c34 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
 8003c32:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40022000 	.word	0x40022000
 8003c44:	40022100 	.word	0x40022100
 8003c48:	40022300 	.word	0x40022300
 8003c4c:	58026300 	.word	0x58026300
 8003c50:	fffff0fe 	.word	0xfffff0fe
 8003c54:	08004673 	.word	0x08004673
 8003c58:	0800474b 	.word	0x0800474b
 8003c5c:	08004767 	.word	0x08004767

08003c60 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	b0a1      	sub	sp, #132	@ 0x84
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a9d      	ldr	r2, [pc, #628]	@ (8003f18 <HAL_ADC_ConfigChannel+0x290>)
 8003ca2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x2a>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e321      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x66e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fbac 	bl	800341c <LL_ADC_REG_IsConversionOngoing>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f040 8306 	bne.w	80042d8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d108      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x62>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	0e9b      	lsrs	r3, r3, #26
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	e016      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x90>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003cfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003d02:	2320      	movs	r3, #32
 8003d04:	e003      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003d06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d08:	fab3 f383 	clz	r3, r3
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	2201      	movs	r2, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	69d1      	ldr	r1, [r2, #28]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	430b      	orrs	r3, r1
 8003d24:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f7ff fa11 	bl	800315a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fb6d 	bl	800341c <LL_ADC_REG_IsConversionOngoing>
 8003d42:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fb8f 	bl	800346c <LL_ADC_INJ_IsConversionOngoing>
 8003d4e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f040 80b3 	bne.w	8003ebe <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 80af 	bne.w	8003ebe <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f7ff fa33 	bl	80031d8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d72:	4b6a      	ldr	r3, [pc, #424]	@ (8003f1c <HAL_ADC_ConfigChannel+0x294>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003d7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d7e:	d10b      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x110>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	e01d      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x14c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10b      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x136>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	e00a      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x14c>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d027      	beq.n	8003e2e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6919      	ldr	r1, [r3, #16]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dec:	f7ff f94e 	bl	800308c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6919      	ldr	r1, [r3, #16]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	7e5b      	ldrb	r3, [r3, #25]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x17e>
 8003e00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e04:	e000      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x180>
 8003e06:	2300      	movs	r3, #0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f7ff f978 	bl	80030fe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6919      	ldr	r1, [r3, #16]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	7e1b      	ldrb	r3, [r3, #24]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d102      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x19c>
 8003e1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e22:	e000      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x19e>
 8003e24:	2300      	movs	r3, #0
 8003e26:	461a      	mov	r2, r3
 8003e28:	f7ff f950 	bl	80030cc <LL_ADC_SetDataRightShift>
 8003e2c:	e047      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	069b      	lsls	r3, r3, #26
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d107      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e50:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	069b      	lsls	r3, r3, #26
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d107      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e74:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	069b      	lsls	r3, r3, #26
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d107      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e98:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ea0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	069b      	lsls	r3, r3, #26
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d107      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ebc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fa5c 	bl	8003380 <LL_ADC_IsEnabled>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 820d 	bne.w	80042ea <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	461a      	mov	r2, r3
 8003ede:	f7ff f9a7 	bl	8003230 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8003f18 <HAL_ADC_ConfigChannel+0x290>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	f040 8133 	bne.w	8004154 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d110      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x298>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	0e9b      	lsrs	r3, r3, #26
 8003f04:	3301      	adds	r3, #1
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	2b09      	cmp	r3, #9
 8003f0c:	bf94      	ite	ls
 8003f0e:	2301      	movls	r3, #1
 8003f10:	2300      	movhi	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	e01e      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x2cc>
 8003f16:	bf00      	nop
 8003f18:	47ff0000 	.word	0x47ff0000
 8003f1c:	5c001000 	.word	0x5c001000
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f28:	fa93 f3a3 	rbit	r3, r3
 8003f2c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003f38:	2320      	movs	r3, #32
 8003f3a:	e003      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003f3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	3301      	adds	r3, #1
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	2b09      	cmp	r3, #9
 8003f4c:	bf94      	ite	ls
 8003f4e:	2301      	movls	r3, #1
 8003f50:	2300      	movhi	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d079      	beq.n	800404c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d107      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x2ec>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	0e9b      	lsrs	r3, r3, #26
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	069b      	lsls	r3, r3, #26
 8003f6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f72:	e015      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x318>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f7c:	fa93 f3a3 	rbit	r3, r3
 8003f80:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f84:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	e003      	b.n	8003f98 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	3301      	adds	r3, #1
 8003f9a:	069b      	lsls	r3, r3, #26
 8003f9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x338>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	0e9b      	lsrs	r3, r3, #26
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	2101      	movs	r1, #1
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	e017      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x368>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fc8:	fa93 f3a3 	rbit	r3, r3
 8003fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003fd8:	2320      	movs	r3, #32
 8003fda:	e003      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fde:	fab3 f383 	clz	r3, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f003 031f 	and.w	r3, r3, #31
 8003fea:	2101      	movs	r1, #1
 8003fec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff0:	ea42 0103 	orr.w	r1, r2, r3
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x38e>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0e9b      	lsrs	r3, r3, #26
 8004006:	3301      	adds	r3, #1
 8004008:	f003 021f 	and.w	r2, r3, #31
 800400c:	4613      	mov	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4413      	add	r3, r2
 8004012:	051b      	lsls	r3, r3, #20
 8004014:	e018      	b.n	8004048 <HAL_ADC_ConfigChannel+0x3c0>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004026:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800402e:	2320      	movs	r3, #32
 8004030:	e003      	b.n	800403a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004034:	fab3 f383 	clz	r3, r3
 8004038:	b2db      	uxtb	r3, r3
 800403a:	3301      	adds	r3, #1
 800403c:	f003 021f 	and.w	r2, r3, #31
 8004040:	4613      	mov	r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	4413      	add	r3, r2
 8004046:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004048:	430b      	orrs	r3, r1
 800404a:	e07e      	b.n	800414a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004054:	2b00      	cmp	r3, #0
 8004056:	d107      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x3e0>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	0e9b      	lsrs	r3, r3, #26
 800405e:	3301      	adds	r3, #1
 8004060:	069b      	lsls	r3, r3, #26
 8004062:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004066:	e015      	b.n	8004094 <HAL_ADC_ConfigChannel+0x40c>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004070:	fa93 f3a3 	rbit	r3, r3
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800407a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004080:	2320      	movs	r3, #32
 8004082:	e003      	b.n	800408c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004086:	fab3 f383 	clz	r3, r3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	3301      	adds	r3, #1
 800408e:	069b      	lsls	r3, r3, #26
 8004090:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x42c>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	3301      	adds	r3, #1
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2101      	movs	r1, #1
 80040ae:	fa01 f303 	lsl.w	r3, r1, r3
 80040b2:	e017      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x45c>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	fa93 f3a3 	rbit	r3, r3
 80040c0:	61bb      	str	r3, [r7, #24]
  return result;
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80040cc:	2320      	movs	r3, #32
 80040ce:	e003      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	3301      	adds	r3, #1
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	ea42 0103 	orr.w	r1, r2, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10d      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x488>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	0e9b      	lsrs	r3, r3, #26
 80040fa:	3301      	adds	r3, #1
 80040fc:	f003 021f 	and.w	r2, r3, #31
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	3b1e      	subs	r3, #30
 8004108:	051b      	lsls	r3, r3, #20
 800410a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800410e:	e01b      	b.n	8004148 <HAL_ADC_ConfigChannel+0x4c0>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	60fb      	str	r3, [r7, #12]
  return result;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004128:	2320      	movs	r3, #32
 800412a:	e003      	b.n	8004134 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	fab3 f383 	clz	r3, r3
 8004132:	b2db      	uxtb	r3, r3
 8004134:	3301      	adds	r3, #1
 8004136:	f003 021f 	and.w	r2, r3, #31
 800413a:	4613      	mov	r3, r2
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	4413      	add	r3, r2
 8004140:	3b1e      	subs	r3, #30
 8004142:	051b      	lsls	r3, r3, #20
 8004144:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004148:	430b      	orrs	r3, r1
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	6892      	ldr	r2, [r2, #8]
 800414e:	4619      	mov	r1, r3
 8004150:	f7ff f842 	bl	80031d8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f280 80c6 	bge.w	80042ea <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a67      	ldr	r2, [pc, #412]	@ (8004300 <HAL_ADC_ConfigChannel+0x678>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d004      	beq.n	8004172 <HAL_ADC_ConfigChannel+0x4ea>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a65      	ldr	r2, [pc, #404]	@ (8004304 <HAL_ADC_ConfigChannel+0x67c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d101      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x4ee>
 8004172:	4b65      	ldr	r3, [pc, #404]	@ (8004308 <HAL_ADC_ConfigChannel+0x680>)
 8004174:	e000      	b.n	8004178 <HAL_ADC_ConfigChannel+0x4f0>
 8004176:	4b65      	ldr	r3, [pc, #404]	@ (800430c <HAL_ADC_ConfigChannel+0x684>)
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe ff79 	bl	8003070 <LL_ADC_GetCommonPathInternalCh>
 800417e:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a5e      	ldr	r2, [pc, #376]	@ (8004300 <HAL_ADC_ConfigChannel+0x678>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_ADC_ConfigChannel+0x50c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a5d      	ldr	r2, [pc, #372]	@ (8004304 <HAL_ADC_ConfigChannel+0x67c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d10e      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x52a>
 8004194:	485a      	ldr	r0, [pc, #360]	@ (8004300 <HAL_ADC_ConfigChannel+0x678>)
 8004196:	f7ff f8f3 	bl	8003380 <LL_ADC_IsEnabled>
 800419a:	4604      	mov	r4, r0
 800419c:	4859      	ldr	r0, [pc, #356]	@ (8004304 <HAL_ADC_ConfigChannel+0x67c>)
 800419e:	f7ff f8ef 	bl	8003380 <LL_ADC_IsEnabled>
 80041a2:	4603      	mov	r3, r0
 80041a4:	4323      	orrs	r3, r4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	e008      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x53c>
 80041b2:	4857      	ldr	r0, [pc, #348]	@ (8004310 <HAL_ADC_ConfigChannel+0x688>)
 80041b4:	f7ff f8e4 	bl	8003380 <LL_ADC_IsEnabled>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	bf0c      	ite	eq
 80041be:	2301      	moveq	r3, #1
 80041c0:	2300      	movne	r3, #0
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d07d      	beq.n	80042c4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a51      	ldr	r2, [pc, #324]	@ (8004314 <HAL_ADC_ConfigChannel+0x68c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d130      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x5ac>
 80041d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d12b      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004310 <HAL_ADC_ConfigChannel+0x688>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	f040 8081 	bne.w	80042ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a44      	ldr	r2, [pc, #272]	@ (8004300 <HAL_ADC_ConfigChannel+0x678>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <HAL_ADC_ConfigChannel+0x574>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a43      	ldr	r2, [pc, #268]	@ (8004304 <HAL_ADC_ConfigChannel+0x67c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d101      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x578>
 80041fc:	4a42      	ldr	r2, [pc, #264]	@ (8004308 <HAL_ADC_ConfigChannel+0x680>)
 80041fe:	e000      	b.n	8004202 <HAL_ADC_ConfigChannel+0x57a>
 8004200:	4a42      	ldr	r2, [pc, #264]	@ (800430c <HAL_ADC_ConfigChannel+0x684>)
 8004202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004204:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f7fe ff1d 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004210:	4b41      	ldr	r3, [pc, #260]	@ (8004318 <HAL_ADC_ConfigChannel+0x690>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	099b      	lsrs	r3, r3, #6
 8004216:	4a41      	ldr	r2, [pc, #260]	@ (800431c <HAL_ADC_ConfigChannel+0x694>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	3301      	adds	r3, #1
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004224:	e002      	b.n	800422c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	3b01      	subs	r3, #1
 800422a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f9      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004232:	e05a      	b.n	80042ea <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a39      	ldr	r2, [pc, #228]	@ (8004320 <HAL_ADC_ConfigChannel+0x698>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d11e      	bne.n	800427c <HAL_ADC_ConfigChannel+0x5f4>
 800423e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004240:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d119      	bne.n	800427c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a30      	ldr	r2, [pc, #192]	@ (8004310 <HAL_ADC_ConfigChannel+0x688>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d14b      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a2a      	ldr	r2, [pc, #168]	@ (8004300 <HAL_ADC_ConfigChannel+0x678>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d004      	beq.n	8004266 <HAL_ADC_ConfigChannel+0x5de>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a28      	ldr	r2, [pc, #160]	@ (8004304 <HAL_ADC_ConfigChannel+0x67c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d101      	bne.n	800426a <HAL_ADC_ConfigChannel+0x5e2>
 8004266:	4a28      	ldr	r2, [pc, #160]	@ (8004308 <HAL_ADC_ConfigChannel+0x680>)
 8004268:	e000      	b.n	800426c <HAL_ADC_ConfigChannel+0x5e4>
 800426a:	4a28      	ldr	r2, [pc, #160]	@ (800430c <HAL_ADC_ConfigChannel+0x684>)
 800426c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800426e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f7fe fee8 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800427a:	e036      	b.n	80042ea <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a28      	ldr	r2, [pc, #160]	@ (8004324 <HAL_ADC_ConfigChannel+0x69c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d131      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x662>
 8004286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004288:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d12c      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1e      	ldr	r2, [pc, #120]	@ (8004310 <HAL_ADC_ConfigChannel+0x688>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d127      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a18      	ldr	r2, [pc, #96]	@ (8004300 <HAL_ADC_ConfigChannel+0x678>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_ADC_ConfigChannel+0x626>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a16      	ldr	r2, [pc, #88]	@ (8004304 <HAL_ADC_ConfigChannel+0x67c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x62a>
 80042ae:	4a16      	ldr	r2, [pc, #88]	@ (8004308 <HAL_ADC_ConfigChannel+0x680>)
 80042b0:	e000      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x62c>
 80042b2:	4a16      	ldr	r2, [pc, #88]	@ (800430c <HAL_ADC_ConfigChannel+0x684>)
 80042b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042ba:	4619      	mov	r1, r3
 80042bc:	4610      	mov	r0, r2
 80042be:	f7fe fec4 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
 80042c2:	e012      	b.n	80042ea <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80042d6:	e008      	b.n	80042ea <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042dc:	f043 0220 	orr.w	r2, r3, #32
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80042f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3784      	adds	r7, #132	@ 0x84
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd90      	pop	{r4, r7, pc}
 80042fe:	bf00      	nop
 8004300:	40022000 	.word	0x40022000
 8004304:	40022100 	.word	0x40022100
 8004308:	40022300 	.word	0x40022300
 800430c:	58026300 	.word	0x58026300
 8004310:	58026000 	.word	0x58026000
 8004314:	cb840000 	.word	0xcb840000
 8004318:	24000000 	.word	0x24000000
 800431c:	053e2d63 	.word	0x053e2d63
 8004320:	c7520000 	.word	0xc7520000
 8004324:	cfb80000 	.word	0xcfb80000

08004328 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff f86c 	bl	800341c <LL_ADC_REG_IsConversionOngoing>
 8004344:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff f88e 	bl	800346c <LL_ADC_INJ_IsConversionOngoing>
 8004350:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d103      	bne.n	8004360 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8098 	beq.w	8004490 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d02a      	beq.n	80043c4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	7d5b      	ldrb	r3, [r3, #21]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d126      	bne.n	80043c4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	7d1b      	ldrb	r3, [r3, #20]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d122      	bne.n	80043c4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800437e:	2301      	movs	r3, #1
 8004380:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004382:	e014      	b.n	80043ae <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	4a45      	ldr	r2, [pc, #276]	@ (800449c <ADC_ConversionStop+0x174>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d90d      	bls.n	80043a8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004390:	f043 0210 	orr.w	r2, r3, #16
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439c:	f043 0201 	orr.w	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e074      	b.n	8004492 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	3301      	adds	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b8:	2b40      	cmp	r3, #64	@ 0x40
 80043ba:	d1e3      	bne.n	8004384 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2240      	movs	r2, #64	@ 0x40
 80043c2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d014      	beq.n	80043f4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff f824 	bl	800341c <LL_ADC_REG_IsConversionOngoing>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00c      	beq.n	80043f4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe ffe1 	bl	80033a6 <LL_ADC_IsDisableOngoing>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d104      	bne.n	80043f4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff f800 	bl	80033f4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d014      	beq.n	8004424 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff f834 	bl	800346c <LL_ADC_INJ_IsConversionOngoing>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00c      	beq.n	8004424 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe ffc9 	bl	80033a6 <LL_ADC_IsDisableOngoing>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff f810 	bl	8003444 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d005      	beq.n	8004436 <ADC_ConversionStop+0x10e>
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d105      	bne.n	800443c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004430:	230c      	movs	r3, #12
 8004432:	617b      	str	r3, [r7, #20]
        break;
 8004434:	e005      	b.n	8004442 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004436:	2308      	movs	r3, #8
 8004438:	617b      	str	r3, [r7, #20]
        break;
 800443a:	e002      	b.n	8004442 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800443c:	2304      	movs	r3, #4
 800443e:	617b      	str	r3, [r7, #20]
        break;
 8004440:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004442:	f7fe fdb3 	bl	8002fac <HAL_GetTick>
 8004446:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004448:	e01b      	b.n	8004482 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800444a:	f7fe fdaf 	bl	8002fac <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b05      	cmp	r3, #5
 8004456:	d914      	bls.n	8004482 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446a:	f043 0210 	orr.w	r2, r3, #16
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004476:	f043 0201 	orr.w	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e007      	b.n	8004492 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1dc      	bne.n	800444a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	000cdbff 	.word	0x000cdbff

080044a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe ff67 	bl	8003380 <LL_ADC_IsEnabled>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d16e      	bne.n	8004596 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	4b38      	ldr	r3, [pc, #224]	@ (80045a0 <ADC_Enable+0x100>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00d      	beq.n	80044e2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ca:	f043 0210 	orr.w	r2, r3, #16
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d6:	f043 0201 	orr.w	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e05a      	b.n	8004598 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe ff22 	bl	8003330 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044ec:	f7fe fd5e 	bl	8002fac <HAL_GetTick>
 80044f0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2b      	ldr	r2, [pc, #172]	@ (80045a4 <ADC_Enable+0x104>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <ADC_Enable+0x66>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a29      	ldr	r2, [pc, #164]	@ (80045a8 <ADC_Enable+0x108>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <ADC_Enable+0x6a>
 8004506:	4b29      	ldr	r3, [pc, #164]	@ (80045ac <ADC_Enable+0x10c>)
 8004508:	e000      	b.n	800450c <ADC_Enable+0x6c>
 800450a:	4b29      	ldr	r3, [pc, #164]	@ (80045b0 <ADC_Enable+0x110>)
 800450c:	4618      	mov	r0, r3
 800450e:	f7fe feb3 	bl	8003278 <LL_ADC_GetMultimode>
 8004512:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a23      	ldr	r2, [pc, #140]	@ (80045a8 <ADC_Enable+0x108>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d002      	beq.n	8004524 <ADC_Enable+0x84>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	e000      	b.n	8004526 <ADC_Enable+0x86>
 8004524:	4b1f      	ldr	r3, [pc, #124]	@ (80045a4 <ADC_Enable+0x104>)
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	4293      	cmp	r3, r2
 800452c:	d02c      	beq.n	8004588 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d130      	bne.n	8004596 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004534:	e028      	b.n	8004588 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe ff20 	bl	8003380 <LL_ADC_IsEnabled>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d104      	bne.n	8004550 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe fef0 	bl	8003330 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004550:	f7fe fd2c 	bl	8002fac <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d914      	bls.n	8004588 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d00d      	beq.n	8004588 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004570:	f043 0210 	orr.w	r2, r3, #16
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457c:	f043 0201 	orr.w	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e007      	b.n	8004598 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b01      	cmp	r3, #1
 8004594:	d1cf      	bne.n	8004536 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	8000003f 	.word	0x8000003f
 80045a4:	40022000 	.word	0x40022000
 80045a8:	40022100 	.word	0x40022100
 80045ac:	40022300 	.word	0x40022300
 80045b0:	58026300 	.word	0x58026300

080045b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fef0 	bl	80033a6 <LL_ADC_IsDisableOngoing>
 80045c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fe fed7 	bl	8003380 <LL_ADC_IsEnabled>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d047      	beq.n	8004668 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d144      	bne.n	8004668 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030d 	and.w	r3, r3, #13
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10c      	bne.n	8004606 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe feb1 	bl	8003358 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2203      	movs	r2, #3
 80045fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045fe:	f7fe fcd5 	bl	8002fac <HAL_GetTick>
 8004602:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004604:	e029      	b.n	800465a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460a:	f043 0210 	orr.w	r2, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004616:	f043 0201 	orr.w	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e023      	b.n	800466a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004622:	f7fe fcc3 	bl	8002fac <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d914      	bls.n	800465a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00d      	beq.n	800465a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	f043 0210 	orr.w	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e007      	b.n	800466a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1dc      	bne.n	8004622 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004684:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004688:	2b00      	cmp	r3, #0
 800468a:	d14b      	bne.n	8004724 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004690:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d021      	beq.n	80046ea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fd42 	bl	8003134 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d032      	beq.n	800471c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d12b      	bne.n	800471c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d11f      	bne.n	800471c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e0:	f043 0201 	orr.w	r2, r3, #1
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80046e8:	e018      	b.n	800471c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d111      	bne.n	800471c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004708:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004714:	f043 0201 	orr.w	r2, r3, #1
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7fd ff47 	bl	80025b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004722:	e00e      	b.n	8004742 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff fa9f 	bl	8003c74 <HAL_ADC_ErrorCallback>
}
 8004736:	e004      	b.n	8004742 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	4798      	blx	r3
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004756:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f7ff fa81 	bl	8003c60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004772:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004778:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004784:	f043 0204 	orr.w	r2, r3, #4
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff fa71 	bl	8003c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a7a      	ldr	r2, [pc, #488]	@ (8004994 <ADC_ConfigureBoostMode+0x1f8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <ADC_ConfigureBoostMode+0x1c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a79      	ldr	r2, [pc, #484]	@ (8004998 <ADC_ConfigureBoostMode+0x1fc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d109      	bne.n	80047cc <ADC_ConfigureBoostMode+0x30>
 80047b8:	4b78      	ldr	r3, [pc, #480]	@ (800499c <ADC_ConfigureBoostMode+0x200>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e008      	b.n	80047de <ADC_ConfigureBoostMode+0x42>
 80047cc:	4b74      	ldr	r3, [pc, #464]	@ (80049a0 <ADC_ConfigureBoostMode+0x204>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01c      	beq.n	800481c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80047e2:	f005 fa97 	bl	8009d14 <HAL_RCC_GetHCLKFreq>
 80047e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047f0:	d010      	beq.n	8004814 <ADC_ConfigureBoostMode+0x78>
 80047f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047f6:	d873      	bhi.n	80048e0 <ADC_ConfigureBoostMode+0x144>
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047fc:	d002      	beq.n	8004804 <ADC_ConfigureBoostMode+0x68>
 80047fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004802:	d16d      	bne.n	80048e0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	60fb      	str	r3, [r7, #12]
        break;
 8004812:	e068      	b.n	80048e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	089b      	lsrs	r3, r3, #2
 8004818:	60fb      	str	r3, [r7, #12]
        break;
 800481a:	e064      	b.n	80048e6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800481c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004820:	f04f 0100 	mov.w	r1, #0
 8004824:	f006 fcdc 	bl	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004828:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004832:	d051      	beq.n	80048d8 <ADC_ConfigureBoostMode+0x13c>
 8004834:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004838:	d854      	bhi.n	80048e4 <ADC_ConfigureBoostMode+0x148>
 800483a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800483e:	d047      	beq.n	80048d0 <ADC_ConfigureBoostMode+0x134>
 8004840:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004844:	d84e      	bhi.n	80048e4 <ADC_ConfigureBoostMode+0x148>
 8004846:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800484a:	d03d      	beq.n	80048c8 <ADC_ConfigureBoostMode+0x12c>
 800484c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004850:	d848      	bhi.n	80048e4 <ADC_ConfigureBoostMode+0x148>
 8004852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004856:	d033      	beq.n	80048c0 <ADC_ConfigureBoostMode+0x124>
 8004858:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800485c:	d842      	bhi.n	80048e4 <ADC_ConfigureBoostMode+0x148>
 800485e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004862:	d029      	beq.n	80048b8 <ADC_ConfigureBoostMode+0x11c>
 8004864:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004868:	d83c      	bhi.n	80048e4 <ADC_ConfigureBoostMode+0x148>
 800486a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800486e:	d01a      	beq.n	80048a6 <ADC_ConfigureBoostMode+0x10a>
 8004870:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004874:	d836      	bhi.n	80048e4 <ADC_ConfigureBoostMode+0x148>
 8004876:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800487a:	d014      	beq.n	80048a6 <ADC_ConfigureBoostMode+0x10a>
 800487c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004880:	d830      	bhi.n	80048e4 <ADC_ConfigureBoostMode+0x148>
 8004882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004886:	d00e      	beq.n	80048a6 <ADC_ConfigureBoostMode+0x10a>
 8004888:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800488c:	d82a      	bhi.n	80048e4 <ADC_ConfigureBoostMode+0x148>
 800488e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004892:	d008      	beq.n	80048a6 <ADC_ConfigureBoostMode+0x10a>
 8004894:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004898:	d824      	bhi.n	80048e4 <ADC_ConfigureBoostMode+0x148>
 800489a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800489e:	d002      	beq.n	80048a6 <ADC_ConfigureBoostMode+0x10a>
 80048a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80048a4:	d11e      	bne.n	80048e4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	0c9b      	lsrs	r3, r3, #18
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	60fb      	str	r3, [r7, #12]
        break;
 80048b6:	e016      	b.n	80048e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	091b      	lsrs	r3, r3, #4
 80048bc:	60fb      	str	r3, [r7, #12]
        break;
 80048be:	e012      	b.n	80048e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	60fb      	str	r3, [r7, #12]
        break;
 80048c6:	e00e      	b.n	80048e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	099b      	lsrs	r3, r3, #6
 80048cc:	60fb      	str	r3, [r7, #12]
        break;
 80048ce:	e00a      	b.n	80048e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	09db      	lsrs	r3, r3, #7
 80048d4:	60fb      	str	r3, [r7, #12]
        break;
 80048d6:	e006      	b.n	80048e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	60fb      	str	r3, [r7, #12]
        break;
 80048de:	e002      	b.n	80048e6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80048e0:	bf00      	nop
 80048e2:	e000      	b.n	80048e6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80048e4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80048e6:	f7fe fb91 	bl	800300c <HAL_GetREVID>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d815      	bhi.n	8004920 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a2b      	ldr	r2, [pc, #172]	@ (80049a4 <ADC_ConfigureBoostMode+0x208>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d908      	bls.n	800490e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800490a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800490c:	e03e      	b.n	800498c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800491c:	609a      	str	r2, [r3, #8]
}
 800491e:	e035      	b.n	800498c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a1f      	ldr	r2, [pc, #124]	@ (80049a8 <ADC_ConfigureBoostMode+0x20c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d808      	bhi.n	8004940 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800493c:	609a      	str	r2, [r3, #8]
}
 800493e:	e025      	b.n	800498c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a1a      	ldr	r2, [pc, #104]	@ (80049ac <ADC_ConfigureBoostMode+0x210>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d80a      	bhi.n	800495e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800495a:	609a      	str	r2, [r3, #8]
}
 800495c:	e016      	b.n	800498c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4a13      	ldr	r2, [pc, #76]	@ (80049b0 <ADC_ConfigureBoostMode+0x214>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d80a      	bhi.n	800497c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004978:	609a      	str	r2, [r3, #8]
}
 800497a:	e007      	b.n	800498c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800498a:	609a      	str	r2, [r3, #8]
}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40022000 	.word	0x40022000
 8004998:	40022100 	.word	0x40022100
 800499c:	40022300 	.word	0x40022300
 80049a0:	58026300 	.word	0x58026300
 80049a4:	01312d00 	.word	0x01312d00
 80049a8:	005f5e10 	.word	0x005f5e10
 80049ac:	00bebc20 	.word	0x00bebc20
 80049b0:	017d7840 	.word	0x017d7840

080049b4 <LL_ADC_IsEnabled>:
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <LL_ADC_IsEnabled+0x18>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <LL_ADC_IsEnabled+0x1a>
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <LL_ADC_StartCalibration>:
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	4b09      	ldr	r3, [pc, #36]	@ (8004a14 <LL_ADC_StartCalibration+0x38>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80049fc:	430a      	orrs	r2, r1
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	609a      	str	r2, [r3, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	3ffeffc0 	.word	0x3ffeffc0

08004a18 <LL_ADC_IsCalibrationOnGoing>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a2c:	d101      	bne.n	8004a32 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <LL_ADC_REG_IsConversionOngoing>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d101      	bne.n	8004a58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
	...

08004a68 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_ADCEx_Calibration_Start+0x1e>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e04c      	b.n	8004b20 <HAL_ADCEx_Calibration_Start+0xb8>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f7ff fd90 	bl	80045b4 <ADC_Disable>
 8004a94:	4603      	mov	r3, r0
 8004a96:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d135      	bne.n	8004b0a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004aa2:	4b21      	ldr	r3, [pc, #132]	@ (8004b28 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	f043 0202 	orr.w	r2, r3, #2
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff ff90 	bl	80049dc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004abc:	e014      	b.n	8004ae8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4a19      	ldr	r2, [pc, #100]	@ (8004b2c <HAL_ADCEx_Calibration_Start+0xc4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d30d      	bcc.n	8004ae8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad0:	f023 0312 	bic.w	r3, r3, #18
 8004ad4:	f043 0210 	orr.w	r2, r3, #16
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e01b      	b.n	8004b20 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff ff93 	bl	8004a18 <LL_ADC_IsCalibrationOnGoing>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e2      	bne.n	8004abe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afc:	f023 0303 	bic.w	r3, r3, #3
 8004b00:	f043 0201 	orr.w	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	655a      	str	r2, [r3, #84]	@ 0x54
 8004b08:	e005      	b.n	8004b16 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0e:	f043 0210 	orr.w	r2, r3, #16
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	ffffeefd 	.word	0xffffeefd
 8004b2c:	25c3f800 	.word	0x25c3f800

08004b30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b09f      	sub	sp, #124	@ 0x7c
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e0be      	b.n	8004ccc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004b56:	2300      	movs	r3, #0
 8004b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a5c      	ldr	r2, [pc, #368]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d102      	bne.n	8004b6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b68:	4b5b      	ldr	r3, [pc, #364]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	e001      	b.n	8004b72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10b      	bne.n	8004b90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e09d      	b.n	8004ccc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff ff54 	bl	8004a40 <LL_ADC_REG_IsConversionOngoing>
 8004b98:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff ff4e 	bl	8004a40 <LL_ADC_REG_IsConversionOngoing>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d17f      	bne.n	8004caa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004baa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d17c      	bne.n	8004caa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a47      	ldr	r2, [pc, #284]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a46      	ldr	r2, [pc, #280]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d101      	bne.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004bc4:	4b45      	ldr	r3, [pc, #276]	@ (8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bc6:	e000      	b.n	8004bca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004bc8:	4b45      	ldr	r3, [pc, #276]	@ (8004ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bca:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d039      	beq.n	8004c48 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004bd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004be4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a3a      	ldr	r2, [pc, #232]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a38      	ldr	r2, [pc, #224]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d10e      	bne.n	8004c18 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004bfa:	4836      	ldr	r0, [pc, #216]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004bfc:	f7ff feda 	bl	80049b4 <LL_ADC_IsEnabled>
 8004c00:	4604      	mov	r4, r0
 8004c02:	4835      	ldr	r0, [pc, #212]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c04:	f7ff fed6 	bl	80049b4 <LL_ADC_IsEnabled>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4323      	orrs	r3, r4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf0c      	ite	eq
 8004c10:	2301      	moveq	r3, #1
 8004c12:	2300      	movne	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e008      	b.n	8004c2a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004c18:	4832      	ldr	r0, [pc, #200]	@ (8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c1a:	f7ff fecb 	bl	80049b4 <LL_ADC_IsEnabled>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d047      	beq.n	8004cbe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	4b2d      	ldr	r3, [pc, #180]	@ (8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	6811      	ldr	r1, [r2, #0]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	6892      	ldr	r2, [r2, #8]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	431a      	orrs	r2, r3
 8004c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c44:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c46:	e03a      	b.n	8004cbe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c52:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d10e      	bne.n	8004c86 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004c68:	481a      	ldr	r0, [pc, #104]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c6a:	f7ff fea3 	bl	80049b4 <LL_ADC_IsEnabled>
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4819      	ldr	r0, [pc, #100]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c72:	f7ff fe9f 	bl	80049b4 <LL_ADC_IsEnabled>
 8004c76:	4603      	mov	r3, r0
 8004c78:	4323      	orrs	r3, r4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bf0c      	ite	eq
 8004c7e:	2301      	moveq	r3, #1
 8004c80:	2300      	movne	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	e008      	b.n	8004c98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004c86:	4817      	ldr	r0, [pc, #92]	@ (8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c88:	f7ff fe94 	bl	80049b4 <LL_ADC_IsEnabled>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d010      	beq.n	8004cbe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	4b11      	ldr	r3, [pc, #68]	@ (8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ca6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ca8:	e009      	b.n	8004cbe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004cbc:	e000      	b.n	8004cc0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cbe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004cc8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	377c      	adds	r7, #124	@ 0x7c
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd90      	pop	{r4, r7, pc}
 8004cd4:	40022000 	.word	0x40022000
 8004cd8:	40022100 	.word	0x40022100
 8004cdc:	40022300 	.word	0x40022300
 8004ce0:	58026300 	.word	0x58026300
 8004ce4:	58026000 	.word	0x58026000
 8004ce8:	fffff0e0 	.word	0xfffff0e0

08004cec <__NVIC_SetPriorityGrouping>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004d2c <__NVIC_SetPriorityGrouping+0x40>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d14:	4b06      	ldr	r3, [pc, #24]	@ (8004d30 <__NVIC_SetPriorityGrouping+0x44>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d1a:	4a04      	ldr	r2, [pc, #16]	@ (8004d2c <__NVIC_SetPriorityGrouping+0x40>)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	60d3      	str	r3, [r2, #12]
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	e000ed00 	.word	0xe000ed00
 8004d30:	05fa0000 	.word	0x05fa0000

08004d34 <__NVIC_GetPriorityGrouping>:
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d38:	4b04      	ldr	r3, [pc, #16]	@ (8004d4c <__NVIC_GetPriorityGrouping+0x18>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	0a1b      	lsrs	r3, r3, #8
 8004d3e:	f003 0307 	and.w	r3, r3, #7
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	e000ed00 	.word	0xe000ed00

08004d50 <__NVIC_EnableIRQ>:
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	db0b      	blt.n	8004d7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	f003 021f 	and.w	r2, r3, #31
 8004d68:	4907      	ldr	r1, [pc, #28]	@ (8004d88 <__NVIC_EnableIRQ+0x38>)
 8004d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	2001      	movs	r0, #1
 8004d72:	fa00 f202 	lsl.w	r2, r0, r2
 8004d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	e000e100 	.word	0xe000e100

08004d8c <__NVIC_SetPriority>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	6039      	str	r1, [r7, #0]
 8004d96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	db0a      	blt.n	8004db6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	490c      	ldr	r1, [pc, #48]	@ (8004dd8 <__NVIC_SetPriority+0x4c>)
 8004da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004daa:	0112      	lsls	r2, r2, #4
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	440b      	add	r3, r1
 8004db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004db4:	e00a      	b.n	8004dcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	4908      	ldr	r1, [pc, #32]	@ (8004ddc <__NVIC_SetPriority+0x50>)
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	3b04      	subs	r3, #4
 8004dc4:	0112      	lsls	r2, r2, #4
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	440b      	add	r3, r1
 8004dca:	761a      	strb	r2, [r3, #24]
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	e000e100 	.word	0xe000e100
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <NVIC_EncodePriority>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	@ 0x24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f1c3 0307 	rsb	r3, r3, #7
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	bf28      	it	cs
 8004dfe:	2304      	movcs	r3, #4
 8004e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3304      	adds	r3, #4
 8004e06:	2b06      	cmp	r3, #6
 8004e08:	d902      	bls.n	8004e10 <NVIC_EncodePriority+0x30>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	3b03      	subs	r3, #3
 8004e0e:	e000      	b.n	8004e12 <NVIC_EncodePriority+0x32>
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43da      	mvns	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	401a      	ands	r2, r3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e32:	43d9      	mvns	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e38:	4313      	orrs	r3, r2
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3724      	adds	r7, #36	@ 0x24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e58:	d301      	bcc.n	8004e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e00f      	b.n	8004e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e88 <SysTick_Config+0x40>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e66:	210f      	movs	r1, #15
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e6c:	f7ff ff8e 	bl	8004d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e70:	4b05      	ldr	r3, [pc, #20]	@ (8004e88 <SysTick_Config+0x40>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e76:	4b04      	ldr	r3, [pc, #16]	@ (8004e88 <SysTick_Config+0x40>)
 8004e78:	2207      	movs	r2, #7
 8004e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	e000e010 	.word	0xe000e010

08004e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ff29 	bl	8004cec <__NVIC_SetPriorityGrouping>
}
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004eb0:	f7ff ff40 	bl	8004d34 <__NVIC_GetPriorityGrouping>
 8004eb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	6978      	ldr	r0, [r7, #20]
 8004ebc:	f7ff ff90 	bl	8004de0 <NVIC_EncodePriority>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff ff5f 	bl	8004d8c <__NVIC_SetPriority>
}
 8004ece:	bf00      	nop
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	4603      	mov	r3, r0
 8004ede:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff ff33 	bl	8004d50 <__NVIC_EnableIRQ>
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff ffa4 	bl	8004e48 <SysTick_Config>
 8004f00:	4603      	mov	r3, r0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004f10:	f3bf 8f5f 	dmb	sy
}
 8004f14:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004f16:	4b07      	ldr	r3, [pc, #28]	@ (8004f34 <HAL_MPU_Disable+0x28>)
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	4a06      	ldr	r2, [pc, #24]	@ (8004f34 <HAL_MPU_Disable+0x28>)
 8004f1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f20:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004f22:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <HAL_MPU_Disable+0x2c>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	605a      	str	r2, [r3, #4]
}
 8004f28:	bf00      	nop
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	e000ed00 	.word	0xe000ed00
 8004f38:	e000ed90 	.word	0xe000ed90

08004f3c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004f44:	4a0b      	ldr	r2, [pc, #44]	@ (8004f74 <HAL_MPU_Enable+0x38>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <HAL_MPU_Enable+0x3c>)
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	4a09      	ldr	r2, [pc, #36]	@ (8004f78 <HAL_MPU_Enable+0x3c>)
 8004f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f58:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004f5a:	f3bf 8f4f 	dsb	sy
}
 8004f5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f60:	f3bf 8f6f 	isb	sy
}
 8004f64:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	e000ed90 	.word	0xe000ed90
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	785a      	ldrb	r2, [r3, #1]
 8004f88:	4b1d      	ldr	r3, [pc, #116]	@ (8005000 <HAL_MPU_ConfigRegion+0x84>)
 8004f8a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d029      	beq.n	8004fe8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004f94:	4a1a      	ldr	r2, [pc, #104]	@ (8005000 <HAL_MPU_ConfigRegion+0x84>)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	7b1b      	ldrb	r3, [r3, #12]
 8004fa0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	7adb      	ldrb	r3, [r3, #11]
 8004fa6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fa8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	7a9b      	ldrb	r3, [r3, #10]
 8004fae:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004fb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	7b5b      	ldrb	r3, [r3, #13]
 8004fb6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004fb8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	7b9b      	ldrb	r3, [r3, #14]
 8004fbe:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004fc0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	7bdb      	ldrb	r3, [r3, #15]
 8004fc6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004fc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	7a5b      	ldrb	r3, [r3, #9]
 8004fce:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004fd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	7a1b      	ldrb	r3, [r3, #8]
 8004fd6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004fd8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	7812      	ldrb	r2, [r2, #0]
 8004fde:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fe0:	4a07      	ldr	r2, [pc, #28]	@ (8005000 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004fe2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fe4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004fe6:	e005      	b.n	8004ff4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004fe8:	4b05      	ldr	r3, [pc, #20]	@ (8005000 <HAL_MPU_ConfigRegion+0x84>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004fee:	4b04      	ldr	r3, [pc, #16]	@ (8005000 <HAL_MPU_ConfigRegion+0x84>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	611a      	str	r2, [r3, #16]
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	e000ed90 	.word	0xe000ed90

08005004 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e014      	b.n	8005040 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	791b      	ldrb	r3, [r3, #4]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d105      	bne.n	800502c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fc f95c 	bl	80012e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	795b      	ldrb	r3, [r3, #5]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_DAC_Start_DMA+0x1e>
 8005062:	2302      	movs	r3, #2
 8005064:	e0ab      	b.n	80051be <HAL_DAC_Start_DMA+0x176>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2202      	movs	r2, #2
 8005070:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d12f      	bne.n	80050d8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4a52      	ldr	r2, [pc, #328]	@ (80051c8 <HAL_DAC_Start_DMA+0x180>)
 800507e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4a51      	ldr	r2, [pc, #324]	@ (80051cc <HAL_DAC_Start_DMA+0x184>)
 8005086:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	4a50      	ldr	r2, [pc, #320]	@ (80051d0 <HAL_DAC_Start_DMA+0x188>)
 800508e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800509e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d013      	beq.n	80050ce <HAL_DAC_Start_DMA+0x86>
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d845      	bhi.n	8005138 <HAL_DAC_Start_DMA+0xf0>
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_DAC_Start_DMA+0x72>
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d005      	beq.n	80050c4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80050b8:	e03e      	b.n	8005138 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	613b      	str	r3, [r7, #16]
        break;
 80050c2:	e03c      	b.n	800513e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	330c      	adds	r3, #12
 80050ca:	613b      	str	r3, [r7, #16]
        break;
 80050cc:	e037      	b.n	800513e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3310      	adds	r3, #16
 80050d4:	613b      	str	r3, [r7, #16]
        break;
 80050d6:	e032      	b.n	800513e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4a3d      	ldr	r2, [pc, #244]	@ (80051d4 <HAL_DAC_Start_DMA+0x18c>)
 80050de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4a3c      	ldr	r2, [pc, #240]	@ (80051d8 <HAL_DAC_Start_DMA+0x190>)
 80050e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4a3b      	ldr	r2, [pc, #236]	@ (80051dc <HAL_DAC_Start_DMA+0x194>)
 80050ee:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80050fe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	2b08      	cmp	r3, #8
 8005104:	d013      	beq.n	800512e <HAL_DAC_Start_DMA+0xe6>
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d817      	bhi.n	800513c <HAL_DAC_Start_DMA+0xf4>
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_DAC_Start_DMA+0xd2>
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	2b04      	cmp	r3, #4
 8005116:	d005      	beq.n	8005124 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8005118:	e010      	b.n	800513c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3314      	adds	r3, #20
 8005120:	613b      	str	r3, [r7, #16]
        break;
 8005122:	e00c      	b.n	800513e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3318      	adds	r3, #24
 800512a:	613b      	str	r3, [r7, #16]
        break;
 800512c:	e007      	b.n	800513e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	331c      	adds	r3, #28
 8005134:	613b      	str	r3, [r7, #16]
        break;
 8005136:	e002      	b.n	800513e <HAL_DAC_Start_DMA+0xf6>
        break;
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <HAL_DAC_Start_DMA+0xf6>
        break;
 800513c:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d111      	bne.n	8005168 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005152:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6898      	ldr	r0, [r3, #8]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	f000 ff37 	bl	8005fd0 <HAL_DMA_Start_IT>
 8005162:	4603      	mov	r3, r0
 8005164:	75fb      	strb	r3, [r7, #23]
 8005166:	e010      	b.n	800518a <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8005176:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68d8      	ldr	r0, [r3, #12]
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	f000 ff25 	bl	8005fd0 <HAL_DMA_Start_IT>
 8005186:	4603      	mov	r3, r0
 8005188:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10c      	bne.n	80051b0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6819      	ldr	r1, [r3, #0]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2201      	movs	r2, #1
 80051a4:	409a      	lsls	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e005      	b.n	80051bc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f043 0204 	orr.w	r2, r3, #4
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	08005499 	.word	0x08005499
 80051cc:	080054bb 	.word	0x080054bb
 80051d0:	080054d7 	.word	0x080054d7
 80051d4:	08005541 	.word	0x08005541
 80051d8:	08005563 	.word	0x08005563
 80051dc:	0800557f 	.word	0x0800557f

080051e0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	795b      	ldrb	r3, [r3, #5]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_DAC_ConfigChannel+0x18>
 8005230:	2302      	movs	r3, #2
 8005232:	e12a      	b.n	800548a <HAL_DAC_ConfigChannel+0x26e>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2202      	movs	r2, #2
 800523e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b04      	cmp	r3, #4
 8005246:	f040 8081 	bne.w	800534c <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800524a:	f7fd feaf 	bl	8002fac <HAL_GetTick>
 800524e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d140      	bne.n	80052d8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005256:	e018      	b.n	800528a <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005258:	f7fd fea8 	bl	8002fac <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b01      	cmp	r3, #1
 8005264:	d911      	bls.n	800528a <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800526c:	4b89      	ldr	r3, [pc, #548]	@ (8005494 <HAL_DAC_ConfigChannel+0x278>)
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f043 0208 	orr.w	r2, r3, #8
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2203      	movs	r2, #3
 8005284:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e0ff      	b.n	800548a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005290:	4b80      	ldr	r3, [pc, #512]	@ (8005494 <HAL_DAC_ConfigChannel+0x278>)
 8005292:	4013      	ands	r3, r2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1df      	bne.n	8005258 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8005298:	2001      	movs	r0, #1
 800529a:	f7fd fe93 	bl	8002fc4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	6992      	ldr	r2, [r2, #24]
 80052a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80052a8:	e023      	b.n	80052f2 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80052aa:	f7fd fe7f 	bl	8002fac <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d90f      	bls.n	80052d8 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052be:	2b00      	cmp	r3, #0
 80052c0:	da0a      	bge.n	80052d8 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f043 0208 	orr.w	r2, r3, #8
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2203      	movs	r2, #3
 80052d2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e0d8      	b.n	800548a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052de:	2b00      	cmp	r3, #0
 80052e0:	dbe3      	blt.n	80052aa <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80052e2:	2001      	movs	r0, #1
 80052e4:	f7fd fe6e 	bl	8002fc4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	6992      	ldr	r2, [r2, #24]
 80052f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005302:	fa01 f303 	lsl.w	r3, r1, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	ea02 0103 	and.w	r1, r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	409a      	lsls	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	21ff      	movs	r1, #255	@ 0xff
 800532e:	fa01 f303 	lsl.w	r3, r1, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	ea02 0103 	and.w	r1, r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	409a      	lsls	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d11d      	bne.n	8005390 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	221f      	movs	r2, #31
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	43db      	mvns	r3, r3
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4013      	ands	r3, r2
 800536e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005396:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	2207      	movs	r2, #7
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	43db      	mvns	r3, r3
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4013      	ands	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d102      	bne.n	80053ba <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61fb      	str	r3, [r7, #28]
 80053b8:	e00f      	b.n	80053da <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d102      	bne.n	80053c8 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80053c2:	2301      	movs	r3, #1
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	e008      	b.n	80053da <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80053d0:	2301      	movs	r3, #1
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	e001      	b.n	80053da <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6819      	ldr	r1, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43da      	mvns	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	400a      	ands	r2, r1
 8005420:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4013      	ands	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6819      	ldr	r1, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	22c0      	movs	r2, #192	@ 0xc0
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43da      	mvns	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	400a      	ands	r2, r1
 800547a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20008000 	.word	0x20008000

08005498 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7ff fe9a 	bl	80051e0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	711a      	strb	r2, [r3, #4]
}
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f7ff fe93 	bl	80051f4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f043 0204 	orr.w	r2, r3, #4
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff fe89 	bl	8005208 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	711a      	strb	r2, [r3, #4]
}
 80054fc:	bf00      	nop
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff ffd8 	bl	8005504 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	711a      	strb	r2, [r3, #4]
}
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff ffd1 	bl	8005518 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f043 0204 	orr.w	r2, r3, #4
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f7ff ffc7 	bl	800552c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	711a      	strb	r2, [r3, #4]
}
 80055a4:	bf00      	nop
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80055b4:	f7fd fcfa 	bl	8002fac <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e316      	b.n	8005bf2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a66      	ldr	r2, [pc, #408]	@ (8005764 <HAL_DMA_Init+0x1b8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d04a      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a65      	ldr	r2, [pc, #404]	@ (8005768 <HAL_DMA_Init+0x1bc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d045      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a63      	ldr	r2, [pc, #396]	@ (800576c <HAL_DMA_Init+0x1c0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d040      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a62      	ldr	r2, [pc, #392]	@ (8005770 <HAL_DMA_Init+0x1c4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d03b      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a60      	ldr	r2, [pc, #384]	@ (8005774 <HAL_DMA_Init+0x1c8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d036      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a5f      	ldr	r2, [pc, #380]	@ (8005778 <HAL_DMA_Init+0x1cc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d031      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a5d      	ldr	r2, [pc, #372]	@ (800577c <HAL_DMA_Init+0x1d0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d02c      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a5c      	ldr	r2, [pc, #368]	@ (8005780 <HAL_DMA_Init+0x1d4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d027      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a5a      	ldr	r2, [pc, #360]	@ (8005784 <HAL_DMA_Init+0x1d8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d022      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a59      	ldr	r2, [pc, #356]	@ (8005788 <HAL_DMA_Init+0x1dc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d01d      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a57      	ldr	r2, [pc, #348]	@ (800578c <HAL_DMA_Init+0x1e0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d018      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a56      	ldr	r2, [pc, #344]	@ (8005790 <HAL_DMA_Init+0x1e4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a54      	ldr	r2, [pc, #336]	@ (8005794 <HAL_DMA_Init+0x1e8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00e      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a53      	ldr	r2, [pc, #332]	@ (8005798 <HAL_DMA_Init+0x1ec>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d009      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a51      	ldr	r2, [pc, #324]	@ (800579c <HAL_DMA_Init+0x1f0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_DMA_Init+0xb8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a50      	ldr	r2, [pc, #320]	@ (80057a0 <HAL_DMA_Init+0x1f4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d101      	bne.n	8005668 <HAL_DMA_Init+0xbc>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <HAL_DMA_Init+0xbe>
 8005668:	2300      	movs	r3, #0
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 813b 	beq.w	80058e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a37      	ldr	r2, [pc, #220]	@ (8005764 <HAL_DMA_Init+0x1b8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d04a      	beq.n	8005720 <HAL_DMA_Init+0x174>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a36      	ldr	r2, [pc, #216]	@ (8005768 <HAL_DMA_Init+0x1bc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d045      	beq.n	8005720 <HAL_DMA_Init+0x174>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a34      	ldr	r2, [pc, #208]	@ (800576c <HAL_DMA_Init+0x1c0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d040      	beq.n	8005720 <HAL_DMA_Init+0x174>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a33      	ldr	r2, [pc, #204]	@ (8005770 <HAL_DMA_Init+0x1c4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d03b      	beq.n	8005720 <HAL_DMA_Init+0x174>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a31      	ldr	r2, [pc, #196]	@ (8005774 <HAL_DMA_Init+0x1c8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d036      	beq.n	8005720 <HAL_DMA_Init+0x174>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a30      	ldr	r2, [pc, #192]	@ (8005778 <HAL_DMA_Init+0x1cc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d031      	beq.n	8005720 <HAL_DMA_Init+0x174>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a2e      	ldr	r2, [pc, #184]	@ (800577c <HAL_DMA_Init+0x1d0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d02c      	beq.n	8005720 <HAL_DMA_Init+0x174>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005780 <HAL_DMA_Init+0x1d4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d027      	beq.n	8005720 <HAL_DMA_Init+0x174>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005784 <HAL_DMA_Init+0x1d8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d022      	beq.n	8005720 <HAL_DMA_Init+0x174>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a2a      	ldr	r2, [pc, #168]	@ (8005788 <HAL_DMA_Init+0x1dc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d01d      	beq.n	8005720 <HAL_DMA_Init+0x174>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a28      	ldr	r2, [pc, #160]	@ (800578c <HAL_DMA_Init+0x1e0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d018      	beq.n	8005720 <HAL_DMA_Init+0x174>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a27      	ldr	r2, [pc, #156]	@ (8005790 <HAL_DMA_Init+0x1e4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d013      	beq.n	8005720 <HAL_DMA_Init+0x174>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a25      	ldr	r2, [pc, #148]	@ (8005794 <HAL_DMA_Init+0x1e8>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00e      	beq.n	8005720 <HAL_DMA_Init+0x174>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a24      	ldr	r2, [pc, #144]	@ (8005798 <HAL_DMA_Init+0x1ec>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d009      	beq.n	8005720 <HAL_DMA_Init+0x174>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a22      	ldr	r2, [pc, #136]	@ (800579c <HAL_DMA_Init+0x1f0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d004      	beq.n	8005720 <HAL_DMA_Init+0x174>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a21      	ldr	r2, [pc, #132]	@ (80057a0 <HAL_DMA_Init+0x1f4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d108      	bne.n	8005732 <HAL_DMA_Init+0x186>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	e007      	b.n	8005742 <HAL_DMA_Init+0x196>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005742:	e02f      	b.n	80057a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005744:	f7fd fc32 	bl	8002fac <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b05      	cmp	r3, #5
 8005750:	d928      	bls.n	80057a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2203      	movs	r2, #3
 800575c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e246      	b.n	8005bf2 <HAL_DMA_Init+0x646>
 8005764:	40020010 	.word	0x40020010
 8005768:	40020028 	.word	0x40020028
 800576c:	40020040 	.word	0x40020040
 8005770:	40020058 	.word	0x40020058
 8005774:	40020070 	.word	0x40020070
 8005778:	40020088 	.word	0x40020088
 800577c:	400200a0 	.word	0x400200a0
 8005780:	400200b8 	.word	0x400200b8
 8005784:	40020410 	.word	0x40020410
 8005788:	40020428 	.word	0x40020428
 800578c:	40020440 	.word	0x40020440
 8005790:	40020458 	.word	0x40020458
 8005794:	40020470 	.word	0x40020470
 8005798:	40020488 	.word	0x40020488
 800579c:	400204a0 	.word	0x400204a0
 80057a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1c8      	bne.n	8005744 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4b83      	ldr	r3, [pc, #524]	@ (80059cc <HAL_DMA_Init+0x420>)
 80057be:	4013      	ands	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80057ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d107      	bne.n	8005808 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005800:	4313      	orrs	r3, r2
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005808:	4b71      	ldr	r3, [pc, #452]	@ (80059d0 <HAL_DMA_Init+0x424>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4b71      	ldr	r3, [pc, #452]	@ (80059d4 <HAL_DMA_Init+0x428>)
 800580e:	4013      	ands	r3, r2
 8005810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005814:	d328      	bcc.n	8005868 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b28      	cmp	r3, #40	@ 0x28
 800581c:	d903      	bls.n	8005826 <HAL_DMA_Init+0x27a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b2e      	cmp	r3, #46	@ 0x2e
 8005824:	d917      	bls.n	8005856 <HAL_DMA_Init+0x2aa>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b3e      	cmp	r3, #62	@ 0x3e
 800582c:	d903      	bls.n	8005836 <HAL_DMA_Init+0x28a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b42      	cmp	r3, #66	@ 0x42
 8005834:	d90f      	bls.n	8005856 <HAL_DMA_Init+0x2aa>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b46      	cmp	r3, #70	@ 0x46
 800583c:	d903      	bls.n	8005846 <HAL_DMA_Init+0x29a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b48      	cmp	r3, #72	@ 0x48
 8005844:	d907      	bls.n	8005856 <HAL_DMA_Init+0x2aa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b4e      	cmp	r3, #78	@ 0x4e
 800584c:	d905      	bls.n	800585a <HAL_DMA_Init+0x2ae>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b52      	cmp	r3, #82	@ 0x52
 8005854:	d801      	bhi.n	800585a <HAL_DMA_Init+0x2ae>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <HAL_DMA_Init+0x2b0>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005866:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0307 	bic.w	r3, r3, #7
 800587e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	2b04      	cmp	r3, #4
 8005890:	d117      	bne.n	80058c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00e      	beq.n	80058c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f002 fce9 	bl	800827c <DMA_CheckFifoParam>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2240      	movs	r2, #64	@ 0x40
 80058b4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e197      	b.n	8005bf2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f002 fc24 	bl	8008118 <DMA_CalcBaseAndBitshift>
 80058d0:	4603      	mov	r3, r0
 80058d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	223f      	movs	r2, #63	@ 0x3f
 80058de:	409a      	lsls	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	609a      	str	r2, [r3, #8]
 80058e4:	e0cd      	b.n	8005a82 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a3b      	ldr	r2, [pc, #236]	@ (80059d8 <HAL_DMA_Init+0x42c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d022      	beq.n	8005936 <HAL_DMA_Init+0x38a>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a39      	ldr	r2, [pc, #228]	@ (80059dc <HAL_DMA_Init+0x430>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d01d      	beq.n	8005936 <HAL_DMA_Init+0x38a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a38      	ldr	r2, [pc, #224]	@ (80059e0 <HAL_DMA_Init+0x434>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d018      	beq.n	8005936 <HAL_DMA_Init+0x38a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a36      	ldr	r2, [pc, #216]	@ (80059e4 <HAL_DMA_Init+0x438>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d013      	beq.n	8005936 <HAL_DMA_Init+0x38a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a35      	ldr	r2, [pc, #212]	@ (80059e8 <HAL_DMA_Init+0x43c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00e      	beq.n	8005936 <HAL_DMA_Init+0x38a>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a33      	ldr	r2, [pc, #204]	@ (80059ec <HAL_DMA_Init+0x440>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d009      	beq.n	8005936 <HAL_DMA_Init+0x38a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a32      	ldr	r2, [pc, #200]	@ (80059f0 <HAL_DMA_Init+0x444>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d004      	beq.n	8005936 <HAL_DMA_Init+0x38a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a30      	ldr	r2, [pc, #192]	@ (80059f4 <HAL_DMA_Init+0x448>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d101      	bne.n	800593a <HAL_DMA_Init+0x38e>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <HAL_DMA_Init+0x390>
 800593a:	2300      	movs	r3, #0
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8097 	beq.w	8005a70 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a24      	ldr	r2, [pc, #144]	@ (80059d8 <HAL_DMA_Init+0x42c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d021      	beq.n	8005990 <HAL_DMA_Init+0x3e4>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a22      	ldr	r2, [pc, #136]	@ (80059dc <HAL_DMA_Init+0x430>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d01c      	beq.n	8005990 <HAL_DMA_Init+0x3e4>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a21      	ldr	r2, [pc, #132]	@ (80059e0 <HAL_DMA_Init+0x434>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d017      	beq.n	8005990 <HAL_DMA_Init+0x3e4>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1f      	ldr	r2, [pc, #124]	@ (80059e4 <HAL_DMA_Init+0x438>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d012      	beq.n	8005990 <HAL_DMA_Init+0x3e4>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1e      	ldr	r2, [pc, #120]	@ (80059e8 <HAL_DMA_Init+0x43c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00d      	beq.n	8005990 <HAL_DMA_Init+0x3e4>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1c      	ldr	r2, [pc, #112]	@ (80059ec <HAL_DMA_Init+0x440>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d008      	beq.n	8005990 <HAL_DMA_Init+0x3e4>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1b      	ldr	r2, [pc, #108]	@ (80059f0 <HAL_DMA_Init+0x444>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <HAL_DMA_Init+0x3e4>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a19      	ldr	r2, [pc, #100]	@ (80059f4 <HAL_DMA_Init+0x448>)
 800598e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4b13      	ldr	r3, [pc, #76]	@ (80059f8 <HAL_DMA_Init+0x44c>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2b40      	cmp	r3, #64	@ 0x40
 80059b6:	d021      	beq.n	80059fc <HAL_DMA_Init+0x450>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b80      	cmp	r3, #128	@ 0x80
 80059be:	d102      	bne.n	80059c6 <HAL_DMA_Init+0x41a>
 80059c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80059c4:	e01b      	b.n	80059fe <HAL_DMA_Init+0x452>
 80059c6:	2300      	movs	r3, #0
 80059c8:	e019      	b.n	80059fe <HAL_DMA_Init+0x452>
 80059ca:	bf00      	nop
 80059cc:	fe10803f 	.word	0xfe10803f
 80059d0:	5c001000 	.word	0x5c001000
 80059d4:	ffff0000 	.word	0xffff0000
 80059d8:	58025408 	.word	0x58025408
 80059dc:	5802541c 	.word	0x5802541c
 80059e0:	58025430 	.word	0x58025430
 80059e4:	58025444 	.word	0x58025444
 80059e8:	58025458 	.word	0x58025458
 80059ec:	5802546c 	.word	0x5802546c
 80059f0:	58025480 	.word	0x58025480
 80059f4:	58025494 	.word	0x58025494
 80059f8:	fffe000f 	.word	0xfffe000f
 80059fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	68d2      	ldr	r2, [r2, #12]
 8005a02:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a2c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	4b6e      	ldr	r3, [pc, #440]	@ (8005bfc <HAL_DMA_Init+0x650>)
 8005a44:	4413      	add	r3, r2
 8005a46:	4a6e      	ldr	r2, [pc, #440]	@ (8005c00 <HAL_DMA_Init+0x654>)
 8005a48:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	009a      	lsls	r2, r3, #2
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f002 fb5f 	bl	8008118 <DMA_CalcBaseAndBitshift>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	2201      	movs	r2, #1
 8005a68:	409a      	lsls	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	e008      	b.n	8005a82 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2240      	movs	r2, #64	@ 0x40
 8005a74:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2203      	movs	r2, #3
 8005a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e0b7      	b.n	8005bf2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a5f      	ldr	r2, [pc, #380]	@ (8005c04 <HAL_DMA_Init+0x658>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d072      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a5d      	ldr	r2, [pc, #372]	@ (8005c08 <HAL_DMA_Init+0x65c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d06d      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a5c      	ldr	r2, [pc, #368]	@ (8005c0c <HAL_DMA_Init+0x660>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d068      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a5a      	ldr	r2, [pc, #360]	@ (8005c10 <HAL_DMA_Init+0x664>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d063      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a59      	ldr	r2, [pc, #356]	@ (8005c14 <HAL_DMA_Init+0x668>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d05e      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a57      	ldr	r2, [pc, #348]	@ (8005c18 <HAL_DMA_Init+0x66c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d059      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a56      	ldr	r2, [pc, #344]	@ (8005c1c <HAL_DMA_Init+0x670>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d054      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a54      	ldr	r2, [pc, #336]	@ (8005c20 <HAL_DMA_Init+0x674>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d04f      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a53      	ldr	r2, [pc, #332]	@ (8005c24 <HAL_DMA_Init+0x678>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d04a      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a51      	ldr	r2, [pc, #324]	@ (8005c28 <HAL_DMA_Init+0x67c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d045      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a50      	ldr	r2, [pc, #320]	@ (8005c2c <HAL_DMA_Init+0x680>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d040      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a4e      	ldr	r2, [pc, #312]	@ (8005c30 <HAL_DMA_Init+0x684>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d03b      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a4d      	ldr	r2, [pc, #308]	@ (8005c34 <HAL_DMA_Init+0x688>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d036      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a4b      	ldr	r2, [pc, #300]	@ (8005c38 <HAL_DMA_Init+0x68c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d031      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a4a      	ldr	r2, [pc, #296]	@ (8005c3c <HAL_DMA_Init+0x690>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d02c      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a48      	ldr	r2, [pc, #288]	@ (8005c40 <HAL_DMA_Init+0x694>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d027      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a47      	ldr	r2, [pc, #284]	@ (8005c44 <HAL_DMA_Init+0x698>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d022      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a45      	ldr	r2, [pc, #276]	@ (8005c48 <HAL_DMA_Init+0x69c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01d      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a44      	ldr	r2, [pc, #272]	@ (8005c4c <HAL_DMA_Init+0x6a0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d018      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a42      	ldr	r2, [pc, #264]	@ (8005c50 <HAL_DMA_Init+0x6a4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a41      	ldr	r2, [pc, #260]	@ (8005c54 <HAL_DMA_Init+0x6a8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00e      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a3f      	ldr	r2, [pc, #252]	@ (8005c58 <HAL_DMA_Init+0x6ac>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d009      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a3e      	ldr	r2, [pc, #248]	@ (8005c5c <HAL_DMA_Init+0x6b0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d004      	beq.n	8005b72 <HAL_DMA_Init+0x5c6>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a3c      	ldr	r2, [pc, #240]	@ (8005c60 <HAL_DMA_Init+0x6b4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d101      	bne.n	8005b76 <HAL_DMA_Init+0x5ca>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <HAL_DMA_Init+0x5cc>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d032      	beq.n	8005be2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f002 fbf9 	bl	8008374 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b80      	cmp	r3, #128	@ 0x80
 8005b88:	d102      	bne.n	8005b90 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005ba4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d010      	beq.n	8005bd0 <HAL_DMA_Init+0x624>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d80c      	bhi.n	8005bd0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f002 fc76 	bl	80084a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	e008      	b.n	8005be2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	a7fdabf8 	.word	0xa7fdabf8
 8005c00:	cccccccd 	.word	0xcccccccd
 8005c04:	40020010 	.word	0x40020010
 8005c08:	40020028 	.word	0x40020028
 8005c0c:	40020040 	.word	0x40020040
 8005c10:	40020058 	.word	0x40020058
 8005c14:	40020070 	.word	0x40020070
 8005c18:	40020088 	.word	0x40020088
 8005c1c:	400200a0 	.word	0x400200a0
 8005c20:	400200b8 	.word	0x400200b8
 8005c24:	40020410 	.word	0x40020410
 8005c28:	40020428 	.word	0x40020428
 8005c2c:	40020440 	.word	0x40020440
 8005c30:	40020458 	.word	0x40020458
 8005c34:	40020470 	.word	0x40020470
 8005c38:	40020488 	.word	0x40020488
 8005c3c:	400204a0 	.word	0x400204a0
 8005c40:	400204b8 	.word	0x400204b8
 8005c44:	58025408 	.word	0x58025408
 8005c48:	5802541c 	.word	0x5802541c
 8005c4c:	58025430 	.word	0x58025430
 8005c50:	58025444 	.word	0x58025444
 8005c54:	58025458 	.word	0x58025458
 8005c58:	5802546c 	.word	0x5802546c
 8005c5c:	58025480 	.word	0x58025480
 8005c60:	58025494 	.word	0x58025494

08005c64 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e1a8      	b.n	8005fc8 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a82      	ldr	r2, [pc, #520]	@ (8005e84 <HAL_DMA_DeInit+0x220>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d04a      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a80      	ldr	r2, [pc, #512]	@ (8005e88 <HAL_DMA_DeInit+0x224>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d045      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a7f      	ldr	r2, [pc, #508]	@ (8005e8c <HAL_DMA_DeInit+0x228>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d040      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a7d      	ldr	r2, [pc, #500]	@ (8005e90 <HAL_DMA_DeInit+0x22c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d03b      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a7c      	ldr	r2, [pc, #496]	@ (8005e94 <HAL_DMA_DeInit+0x230>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d036      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a7a      	ldr	r2, [pc, #488]	@ (8005e98 <HAL_DMA_DeInit+0x234>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d031      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a79      	ldr	r2, [pc, #484]	@ (8005e9c <HAL_DMA_DeInit+0x238>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d02c      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a77      	ldr	r2, [pc, #476]	@ (8005ea0 <HAL_DMA_DeInit+0x23c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d027      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a76      	ldr	r2, [pc, #472]	@ (8005ea4 <HAL_DMA_DeInit+0x240>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d022      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a74      	ldr	r2, [pc, #464]	@ (8005ea8 <HAL_DMA_DeInit+0x244>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01d      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a73      	ldr	r2, [pc, #460]	@ (8005eac <HAL_DMA_DeInit+0x248>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d018      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a71      	ldr	r2, [pc, #452]	@ (8005eb0 <HAL_DMA_DeInit+0x24c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d013      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a70      	ldr	r2, [pc, #448]	@ (8005eb4 <HAL_DMA_DeInit+0x250>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00e      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a6e      	ldr	r2, [pc, #440]	@ (8005eb8 <HAL_DMA_DeInit+0x254>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d009      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a6d      	ldr	r2, [pc, #436]	@ (8005ebc <HAL_DMA_DeInit+0x258>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d004      	beq.n	8005d16 <HAL_DMA_DeInit+0xb2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a6b      	ldr	r2, [pc, #428]	@ (8005ec0 <HAL_DMA_DeInit+0x25c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d108      	bne.n	8005d28 <HAL_DMA_DeInit+0xc4>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	e007      	b.n	8005d38 <HAL_DMA_DeInit+0xd4>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0201 	bic.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a51      	ldr	r2, [pc, #324]	@ (8005e84 <HAL_DMA_DeInit+0x220>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d04a      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a50      	ldr	r2, [pc, #320]	@ (8005e88 <HAL_DMA_DeInit+0x224>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d045      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a4e      	ldr	r2, [pc, #312]	@ (8005e8c <HAL_DMA_DeInit+0x228>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d040      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a4d      	ldr	r2, [pc, #308]	@ (8005e90 <HAL_DMA_DeInit+0x22c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d03b      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a4b      	ldr	r2, [pc, #300]	@ (8005e94 <HAL_DMA_DeInit+0x230>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d036      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8005e98 <HAL_DMA_DeInit+0x234>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d031      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a48      	ldr	r2, [pc, #288]	@ (8005e9c <HAL_DMA_DeInit+0x238>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d02c      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a47      	ldr	r2, [pc, #284]	@ (8005ea0 <HAL_DMA_DeInit+0x23c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d027      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a45      	ldr	r2, [pc, #276]	@ (8005ea4 <HAL_DMA_DeInit+0x240>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d022      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a44      	ldr	r2, [pc, #272]	@ (8005ea8 <HAL_DMA_DeInit+0x244>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d01d      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a42      	ldr	r2, [pc, #264]	@ (8005eac <HAL_DMA_DeInit+0x248>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d018      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a41      	ldr	r2, [pc, #260]	@ (8005eb0 <HAL_DMA_DeInit+0x24c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d013      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a3f      	ldr	r2, [pc, #252]	@ (8005eb4 <HAL_DMA_DeInit+0x250>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00e      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8005eb8 <HAL_DMA_DeInit+0x254>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d009      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8005ebc <HAL_DMA_DeInit+0x258>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_DMA_DeInit+0x174>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a3b      	ldr	r2, [pc, #236]	@ (8005ec0 <HAL_DMA_DeInit+0x25c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d101      	bne.n	8005ddc <HAL_DMA_DeInit+0x178>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <HAL_DMA_DeInit+0x17a>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d025      	beq.n	8005e2e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2200      	movs	r2, #0
 8005df0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2200      	movs	r2, #0
 8005df8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2200      	movs	r2, #0
 8005e08:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2221      	movs	r2, #33	@ 0x21
 8005e10:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f002 f980 	bl	8008118 <DMA_CalcBaseAndBitshift>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e20:	f003 031f 	and.w	r3, r3, #31
 8005e24:	223f      	movs	r2, #63	@ 0x3f
 8005e26:	409a      	lsls	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	609a      	str	r2, [r3, #8]
 8005e2c:	e081      	b.n	8005f32 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a24      	ldr	r2, [pc, #144]	@ (8005ec4 <HAL_DMA_DeInit+0x260>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d022      	beq.n	8005e7e <HAL_DMA_DeInit+0x21a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a22      	ldr	r2, [pc, #136]	@ (8005ec8 <HAL_DMA_DeInit+0x264>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01d      	beq.n	8005e7e <HAL_DMA_DeInit+0x21a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a21      	ldr	r2, [pc, #132]	@ (8005ecc <HAL_DMA_DeInit+0x268>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d018      	beq.n	8005e7e <HAL_DMA_DeInit+0x21a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1f      	ldr	r2, [pc, #124]	@ (8005ed0 <HAL_DMA_DeInit+0x26c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <HAL_DMA_DeInit+0x21a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed4 <HAL_DMA_DeInit+0x270>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00e      	beq.n	8005e7e <HAL_DMA_DeInit+0x21a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed8 <HAL_DMA_DeInit+0x274>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d009      	beq.n	8005e7e <HAL_DMA_DeInit+0x21a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8005edc <HAL_DMA_DeInit+0x278>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d004      	beq.n	8005e7e <HAL_DMA_DeInit+0x21a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a19      	ldr	r2, [pc, #100]	@ (8005ee0 <HAL_DMA_DeInit+0x27c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d132      	bne.n	8005ee4 <HAL_DMA_DeInit+0x280>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e031      	b.n	8005ee6 <HAL_DMA_DeInit+0x282>
 8005e82:	bf00      	nop
 8005e84:	40020010 	.word	0x40020010
 8005e88:	40020028 	.word	0x40020028
 8005e8c:	40020040 	.word	0x40020040
 8005e90:	40020058 	.word	0x40020058
 8005e94:	40020070 	.word	0x40020070
 8005e98:	40020088 	.word	0x40020088
 8005e9c:	400200a0 	.word	0x400200a0
 8005ea0:	400200b8 	.word	0x400200b8
 8005ea4:	40020410 	.word	0x40020410
 8005ea8:	40020428 	.word	0x40020428
 8005eac:	40020440 	.word	0x40020440
 8005eb0:	40020458 	.word	0x40020458
 8005eb4:	40020470 	.word	0x40020470
 8005eb8:	40020488 	.word	0x40020488
 8005ebc:	400204a0 	.word	0x400204a0
 8005ec0:	400204b8 	.word	0x400204b8
 8005ec4:	58025408 	.word	0x58025408
 8005ec8:	5802541c 	.word	0x5802541c
 8005ecc:	58025430 	.word	0x58025430
 8005ed0:	58025444 	.word	0x58025444
 8005ed4:	58025458 	.word	0x58025458
 8005ed8:	5802546c 	.word	0x5802546c
 8005edc:	58025480 	.word	0x58025480
 8005ee0:	58025494 	.word	0x58025494
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d021      	beq.n	8005f2e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2200      	movs	r2, #0
 8005f00:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2200      	movs	r2, #0
 8005f08:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f002 f900 	bl	8008118 <DMA_CalcBaseAndBitshift>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f20:	f003 031f 	and.w	r3, r3, #31
 8005f24:	2201      	movs	r2, #1
 8005f26:	409a      	lsls	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	605a      	str	r2, [r3, #4]
 8005f2c:	e001      	b.n	8005f32 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e04a      	b.n	8005fc8 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f002 fa1e 	bl	8008374 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005f50:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00f      	beq.n	8005f7a <HAL_DMA_DeInit+0x316>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d80b      	bhi.n	8005f7a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f002 faa0 	bl	80084a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f78:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e226      	b.n	800643a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_DMA_Start_IT+0x2a>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e21f      	b.n	800643a <HAL_DMA_Start_IT+0x46a>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	f040 820a 	bne.w	8006424 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a68      	ldr	r2, [pc, #416]	@ (80061c4 <HAL_DMA_Start_IT+0x1f4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d04a      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a66      	ldr	r2, [pc, #408]	@ (80061c8 <HAL_DMA_Start_IT+0x1f8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d045      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a65      	ldr	r2, [pc, #404]	@ (80061cc <HAL_DMA_Start_IT+0x1fc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d040      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a63      	ldr	r2, [pc, #396]	@ (80061d0 <HAL_DMA_Start_IT+0x200>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d03b      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a62      	ldr	r2, [pc, #392]	@ (80061d4 <HAL_DMA_Start_IT+0x204>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d036      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a60      	ldr	r2, [pc, #384]	@ (80061d8 <HAL_DMA_Start_IT+0x208>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d031      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a5f      	ldr	r2, [pc, #380]	@ (80061dc <HAL_DMA_Start_IT+0x20c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d02c      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a5d      	ldr	r2, [pc, #372]	@ (80061e0 <HAL_DMA_Start_IT+0x210>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d027      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a5c      	ldr	r2, [pc, #368]	@ (80061e4 <HAL_DMA_Start_IT+0x214>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d022      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a5a      	ldr	r2, [pc, #360]	@ (80061e8 <HAL_DMA_Start_IT+0x218>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01d      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a59      	ldr	r2, [pc, #356]	@ (80061ec <HAL_DMA_Start_IT+0x21c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d018      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a57      	ldr	r2, [pc, #348]	@ (80061f0 <HAL_DMA_Start_IT+0x220>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a56      	ldr	r2, [pc, #344]	@ (80061f4 <HAL_DMA_Start_IT+0x224>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a54      	ldr	r2, [pc, #336]	@ (80061f8 <HAL_DMA_Start_IT+0x228>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a53      	ldr	r2, [pc, #332]	@ (80061fc <HAL_DMA_Start_IT+0x22c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_DMA_Start_IT+0xee>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a51      	ldr	r2, [pc, #324]	@ (8006200 <HAL_DMA_Start_IT+0x230>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d108      	bne.n	80060d0 <HAL_DMA_Start_IT+0x100>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0201 	bic.w	r2, r2, #1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e007      	b.n	80060e0 <HAL_DMA_Start_IT+0x110>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0201 	bic.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f001 fe6a 	bl	8007dc0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a34      	ldr	r2, [pc, #208]	@ (80061c4 <HAL_DMA_Start_IT+0x1f4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d04a      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a33      	ldr	r2, [pc, #204]	@ (80061c8 <HAL_DMA_Start_IT+0x1f8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d045      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a31      	ldr	r2, [pc, #196]	@ (80061cc <HAL_DMA_Start_IT+0x1fc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d040      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a30      	ldr	r2, [pc, #192]	@ (80061d0 <HAL_DMA_Start_IT+0x200>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d03b      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a2e      	ldr	r2, [pc, #184]	@ (80061d4 <HAL_DMA_Start_IT+0x204>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d036      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a2d      	ldr	r2, [pc, #180]	@ (80061d8 <HAL_DMA_Start_IT+0x208>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d031      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2b      	ldr	r2, [pc, #172]	@ (80061dc <HAL_DMA_Start_IT+0x20c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d02c      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2a      	ldr	r2, [pc, #168]	@ (80061e0 <HAL_DMA_Start_IT+0x210>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d027      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a28      	ldr	r2, [pc, #160]	@ (80061e4 <HAL_DMA_Start_IT+0x214>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a27      	ldr	r2, [pc, #156]	@ (80061e8 <HAL_DMA_Start_IT+0x218>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d01d      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a25      	ldr	r2, [pc, #148]	@ (80061ec <HAL_DMA_Start_IT+0x21c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a24      	ldr	r2, [pc, #144]	@ (80061f0 <HAL_DMA_Start_IT+0x220>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a22      	ldr	r2, [pc, #136]	@ (80061f4 <HAL_DMA_Start_IT+0x224>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a21      	ldr	r2, [pc, #132]	@ (80061f8 <HAL_DMA_Start_IT+0x228>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a1f      	ldr	r2, [pc, #124]	@ (80061fc <HAL_DMA_Start_IT+0x22c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_DMA_Start_IT+0x1bc>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1e      	ldr	r2, [pc, #120]	@ (8006200 <HAL_DMA_Start_IT+0x230>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d101      	bne.n	8006190 <HAL_DMA_Start_IT+0x1c0>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <HAL_DMA_Start_IT+0x1c2>
 8006190:	2300      	movs	r3, #0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d036      	beq.n	8006204 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f023 021e 	bic.w	r2, r3, #30
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0216 	orr.w	r2, r2, #22
 80061a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d03e      	beq.n	8006230 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0208 	orr.w	r2, r2, #8
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	e035      	b.n	8006230 <HAL_DMA_Start_IT+0x260>
 80061c4:	40020010 	.word	0x40020010
 80061c8:	40020028 	.word	0x40020028
 80061cc:	40020040 	.word	0x40020040
 80061d0:	40020058 	.word	0x40020058
 80061d4:	40020070 	.word	0x40020070
 80061d8:	40020088 	.word	0x40020088
 80061dc:	400200a0 	.word	0x400200a0
 80061e0:	400200b8 	.word	0x400200b8
 80061e4:	40020410 	.word	0x40020410
 80061e8:	40020428 	.word	0x40020428
 80061ec:	40020440 	.word	0x40020440
 80061f0:	40020458 	.word	0x40020458
 80061f4:	40020470 	.word	0x40020470
 80061f8:	40020488 	.word	0x40020488
 80061fc:	400204a0 	.word	0x400204a0
 8006200:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f023 020e 	bic.w	r2, r3, #14
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 020a 	orr.w	r2, r2, #10
 8006216:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0204 	orr.w	r2, r2, #4
 800622e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a83      	ldr	r2, [pc, #524]	@ (8006444 <HAL_DMA_Start_IT+0x474>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d072      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a82      	ldr	r2, [pc, #520]	@ (8006448 <HAL_DMA_Start_IT+0x478>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d06d      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a80      	ldr	r2, [pc, #512]	@ (800644c <HAL_DMA_Start_IT+0x47c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d068      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a7f      	ldr	r2, [pc, #508]	@ (8006450 <HAL_DMA_Start_IT+0x480>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d063      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a7d      	ldr	r2, [pc, #500]	@ (8006454 <HAL_DMA_Start_IT+0x484>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d05e      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a7c      	ldr	r2, [pc, #496]	@ (8006458 <HAL_DMA_Start_IT+0x488>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d059      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a7a      	ldr	r2, [pc, #488]	@ (800645c <HAL_DMA_Start_IT+0x48c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d054      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a79      	ldr	r2, [pc, #484]	@ (8006460 <HAL_DMA_Start_IT+0x490>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d04f      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a77      	ldr	r2, [pc, #476]	@ (8006464 <HAL_DMA_Start_IT+0x494>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d04a      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a76      	ldr	r2, [pc, #472]	@ (8006468 <HAL_DMA_Start_IT+0x498>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d045      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a74      	ldr	r2, [pc, #464]	@ (800646c <HAL_DMA_Start_IT+0x49c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d040      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a73      	ldr	r2, [pc, #460]	@ (8006470 <HAL_DMA_Start_IT+0x4a0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d03b      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a71      	ldr	r2, [pc, #452]	@ (8006474 <HAL_DMA_Start_IT+0x4a4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d036      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a70      	ldr	r2, [pc, #448]	@ (8006478 <HAL_DMA_Start_IT+0x4a8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d031      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a6e      	ldr	r2, [pc, #440]	@ (800647c <HAL_DMA_Start_IT+0x4ac>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d02c      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a6d      	ldr	r2, [pc, #436]	@ (8006480 <HAL_DMA_Start_IT+0x4b0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d027      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a6b      	ldr	r2, [pc, #428]	@ (8006484 <HAL_DMA_Start_IT+0x4b4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d022      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a6a      	ldr	r2, [pc, #424]	@ (8006488 <HAL_DMA_Start_IT+0x4b8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d01d      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a68      	ldr	r2, [pc, #416]	@ (800648c <HAL_DMA_Start_IT+0x4bc>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d018      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a67      	ldr	r2, [pc, #412]	@ (8006490 <HAL_DMA_Start_IT+0x4c0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a65      	ldr	r2, [pc, #404]	@ (8006494 <HAL_DMA_Start_IT+0x4c4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00e      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a64      	ldr	r2, [pc, #400]	@ (8006498 <HAL_DMA_Start_IT+0x4c8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a62      	ldr	r2, [pc, #392]	@ (800649c <HAL_DMA_Start_IT+0x4cc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_DMA_Start_IT+0x350>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a61      	ldr	r2, [pc, #388]	@ (80064a0 <HAL_DMA_Start_IT+0x4d0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d101      	bne.n	8006324 <HAL_DMA_Start_IT+0x354>
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <HAL_DMA_Start_IT+0x356>
 8006324:	2300      	movs	r3, #0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01a      	beq.n	8006360 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006342:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006346:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800635a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800635e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a37      	ldr	r2, [pc, #220]	@ (8006444 <HAL_DMA_Start_IT+0x474>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d04a      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a36      	ldr	r2, [pc, #216]	@ (8006448 <HAL_DMA_Start_IT+0x478>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d045      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a34      	ldr	r2, [pc, #208]	@ (800644c <HAL_DMA_Start_IT+0x47c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d040      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a33      	ldr	r2, [pc, #204]	@ (8006450 <HAL_DMA_Start_IT+0x480>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d03b      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a31      	ldr	r2, [pc, #196]	@ (8006454 <HAL_DMA_Start_IT+0x484>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d036      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a30      	ldr	r2, [pc, #192]	@ (8006458 <HAL_DMA_Start_IT+0x488>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d031      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a2e      	ldr	r2, [pc, #184]	@ (800645c <HAL_DMA_Start_IT+0x48c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d02c      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a2d      	ldr	r2, [pc, #180]	@ (8006460 <HAL_DMA_Start_IT+0x490>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d027      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a2b      	ldr	r2, [pc, #172]	@ (8006464 <HAL_DMA_Start_IT+0x494>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d022      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a2a      	ldr	r2, [pc, #168]	@ (8006468 <HAL_DMA_Start_IT+0x498>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d01d      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a28      	ldr	r2, [pc, #160]	@ (800646c <HAL_DMA_Start_IT+0x49c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d018      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a27      	ldr	r2, [pc, #156]	@ (8006470 <HAL_DMA_Start_IT+0x4a0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d013      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a25      	ldr	r2, [pc, #148]	@ (8006474 <HAL_DMA_Start_IT+0x4a4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00e      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a24      	ldr	r2, [pc, #144]	@ (8006478 <HAL_DMA_Start_IT+0x4a8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d009      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a22      	ldr	r2, [pc, #136]	@ (800647c <HAL_DMA_Start_IT+0x4ac>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d004      	beq.n	8006400 <HAL_DMA_Start_IT+0x430>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a21      	ldr	r2, [pc, #132]	@ (8006480 <HAL_DMA_Start_IT+0x4b0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d108      	bne.n	8006412 <HAL_DMA_Start_IT+0x442>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e012      	b.n	8006438 <HAL_DMA_Start_IT+0x468>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0201 	orr.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	e009      	b.n	8006438 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800642a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40020010 	.word	0x40020010
 8006448:	40020028 	.word	0x40020028
 800644c:	40020040 	.word	0x40020040
 8006450:	40020058 	.word	0x40020058
 8006454:	40020070 	.word	0x40020070
 8006458:	40020088 	.word	0x40020088
 800645c:	400200a0 	.word	0x400200a0
 8006460:	400200b8 	.word	0x400200b8
 8006464:	40020410 	.word	0x40020410
 8006468:	40020428 	.word	0x40020428
 800646c:	40020440 	.word	0x40020440
 8006470:	40020458 	.word	0x40020458
 8006474:	40020470 	.word	0x40020470
 8006478:	40020488 	.word	0x40020488
 800647c:	400204a0 	.word	0x400204a0
 8006480:	400204b8 	.word	0x400204b8
 8006484:	58025408 	.word	0x58025408
 8006488:	5802541c 	.word	0x5802541c
 800648c:	58025430 	.word	0x58025430
 8006490:	58025444 	.word	0x58025444
 8006494:	58025458 	.word	0x58025458
 8006498:	5802546c 	.word	0x5802546c
 800649c:	58025480 	.word	0x58025480
 80064a0:	58025494 	.word	0x58025494

080064a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80064ac:	f7fc fd7e 	bl	8002fac <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e2dc      	b.n	8006a76 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d008      	beq.n	80064da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2280      	movs	r2, #128	@ 0x80
 80064cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e2cd      	b.n	8006a76 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a76      	ldr	r2, [pc, #472]	@ (80066b8 <HAL_DMA_Abort+0x214>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d04a      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a74      	ldr	r2, [pc, #464]	@ (80066bc <HAL_DMA_Abort+0x218>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d045      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a73      	ldr	r2, [pc, #460]	@ (80066c0 <HAL_DMA_Abort+0x21c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d040      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a71      	ldr	r2, [pc, #452]	@ (80066c4 <HAL_DMA_Abort+0x220>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d03b      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a70      	ldr	r2, [pc, #448]	@ (80066c8 <HAL_DMA_Abort+0x224>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d036      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a6e      	ldr	r2, [pc, #440]	@ (80066cc <HAL_DMA_Abort+0x228>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d031      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a6d      	ldr	r2, [pc, #436]	@ (80066d0 <HAL_DMA_Abort+0x22c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d02c      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a6b      	ldr	r2, [pc, #428]	@ (80066d4 <HAL_DMA_Abort+0x230>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d027      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a6a      	ldr	r2, [pc, #424]	@ (80066d8 <HAL_DMA_Abort+0x234>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d022      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a68      	ldr	r2, [pc, #416]	@ (80066dc <HAL_DMA_Abort+0x238>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d01d      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a67      	ldr	r2, [pc, #412]	@ (80066e0 <HAL_DMA_Abort+0x23c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d018      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a65      	ldr	r2, [pc, #404]	@ (80066e4 <HAL_DMA_Abort+0x240>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d013      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a64      	ldr	r2, [pc, #400]	@ (80066e8 <HAL_DMA_Abort+0x244>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00e      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a62      	ldr	r2, [pc, #392]	@ (80066ec <HAL_DMA_Abort+0x248>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d009      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a61      	ldr	r2, [pc, #388]	@ (80066f0 <HAL_DMA_Abort+0x24c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d004      	beq.n	800657a <HAL_DMA_Abort+0xd6>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a5f      	ldr	r2, [pc, #380]	@ (80066f4 <HAL_DMA_Abort+0x250>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d101      	bne.n	800657e <HAL_DMA_Abort+0xda>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <HAL_DMA_Abort+0xdc>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d013      	beq.n	80065ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 021e 	bic.w	r2, r2, #30
 8006592:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	e00a      	b.n	80065c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 020e 	bic.w	r2, r2, #14
 80065ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a3c      	ldr	r2, [pc, #240]	@ (80066b8 <HAL_DMA_Abort+0x214>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d072      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a3a      	ldr	r2, [pc, #232]	@ (80066bc <HAL_DMA_Abort+0x218>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d06d      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a39      	ldr	r2, [pc, #228]	@ (80066c0 <HAL_DMA_Abort+0x21c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d068      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a37      	ldr	r2, [pc, #220]	@ (80066c4 <HAL_DMA_Abort+0x220>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d063      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a36      	ldr	r2, [pc, #216]	@ (80066c8 <HAL_DMA_Abort+0x224>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d05e      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a34      	ldr	r2, [pc, #208]	@ (80066cc <HAL_DMA_Abort+0x228>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d059      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a33      	ldr	r2, [pc, #204]	@ (80066d0 <HAL_DMA_Abort+0x22c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d054      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a31      	ldr	r2, [pc, #196]	@ (80066d4 <HAL_DMA_Abort+0x230>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d04f      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a30      	ldr	r2, [pc, #192]	@ (80066d8 <HAL_DMA_Abort+0x234>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d04a      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a2e      	ldr	r2, [pc, #184]	@ (80066dc <HAL_DMA_Abort+0x238>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d045      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a2d      	ldr	r2, [pc, #180]	@ (80066e0 <HAL_DMA_Abort+0x23c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d040      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a2b      	ldr	r2, [pc, #172]	@ (80066e4 <HAL_DMA_Abort+0x240>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d03b      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a2a      	ldr	r2, [pc, #168]	@ (80066e8 <HAL_DMA_Abort+0x244>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d036      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a28      	ldr	r2, [pc, #160]	@ (80066ec <HAL_DMA_Abort+0x248>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d031      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a27      	ldr	r2, [pc, #156]	@ (80066f0 <HAL_DMA_Abort+0x24c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d02c      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a25      	ldr	r2, [pc, #148]	@ (80066f4 <HAL_DMA_Abort+0x250>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d027      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a24      	ldr	r2, [pc, #144]	@ (80066f8 <HAL_DMA_Abort+0x254>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d022      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a22      	ldr	r2, [pc, #136]	@ (80066fc <HAL_DMA_Abort+0x258>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01d      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a21      	ldr	r2, [pc, #132]	@ (8006700 <HAL_DMA_Abort+0x25c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d018      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a1f      	ldr	r2, [pc, #124]	@ (8006704 <HAL_DMA_Abort+0x260>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d013      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a1e      	ldr	r2, [pc, #120]	@ (8006708 <HAL_DMA_Abort+0x264>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00e      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a1c      	ldr	r2, [pc, #112]	@ (800670c <HAL_DMA_Abort+0x268>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d009      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006710 <HAL_DMA_Abort+0x26c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_DMA_Abort+0x20e>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a19      	ldr	r2, [pc, #100]	@ (8006714 <HAL_DMA_Abort+0x270>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d132      	bne.n	8006718 <HAL_DMA_Abort+0x274>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e031      	b.n	800671a <HAL_DMA_Abort+0x276>
 80066b6:	bf00      	nop
 80066b8:	40020010 	.word	0x40020010
 80066bc:	40020028 	.word	0x40020028
 80066c0:	40020040 	.word	0x40020040
 80066c4:	40020058 	.word	0x40020058
 80066c8:	40020070 	.word	0x40020070
 80066cc:	40020088 	.word	0x40020088
 80066d0:	400200a0 	.word	0x400200a0
 80066d4:	400200b8 	.word	0x400200b8
 80066d8:	40020410 	.word	0x40020410
 80066dc:	40020428 	.word	0x40020428
 80066e0:	40020440 	.word	0x40020440
 80066e4:	40020458 	.word	0x40020458
 80066e8:	40020470 	.word	0x40020470
 80066ec:	40020488 	.word	0x40020488
 80066f0:	400204a0 	.word	0x400204a0
 80066f4:	400204b8 	.word	0x400204b8
 80066f8:	58025408 	.word	0x58025408
 80066fc:	5802541c 	.word	0x5802541c
 8006700:	58025430 	.word	0x58025430
 8006704:	58025444 	.word	0x58025444
 8006708:	58025458 	.word	0x58025458
 800670c:	5802546c 	.word	0x5802546c
 8006710:	58025480 	.word	0x58025480
 8006714:	58025494 	.word	0x58025494
 8006718:	2300      	movs	r3, #0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d007      	beq.n	800672e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006728:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800672c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a6d      	ldr	r2, [pc, #436]	@ (80068e8 <HAL_DMA_Abort+0x444>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d04a      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a6b      	ldr	r2, [pc, #428]	@ (80068ec <HAL_DMA_Abort+0x448>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d045      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a6a      	ldr	r2, [pc, #424]	@ (80068f0 <HAL_DMA_Abort+0x44c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d040      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a68      	ldr	r2, [pc, #416]	@ (80068f4 <HAL_DMA_Abort+0x450>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d03b      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a67      	ldr	r2, [pc, #412]	@ (80068f8 <HAL_DMA_Abort+0x454>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d036      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a65      	ldr	r2, [pc, #404]	@ (80068fc <HAL_DMA_Abort+0x458>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d031      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a64      	ldr	r2, [pc, #400]	@ (8006900 <HAL_DMA_Abort+0x45c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d02c      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a62      	ldr	r2, [pc, #392]	@ (8006904 <HAL_DMA_Abort+0x460>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d027      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a61      	ldr	r2, [pc, #388]	@ (8006908 <HAL_DMA_Abort+0x464>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d022      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a5f      	ldr	r2, [pc, #380]	@ (800690c <HAL_DMA_Abort+0x468>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d01d      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a5e      	ldr	r2, [pc, #376]	@ (8006910 <HAL_DMA_Abort+0x46c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d018      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a5c      	ldr	r2, [pc, #368]	@ (8006914 <HAL_DMA_Abort+0x470>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d013      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a5b      	ldr	r2, [pc, #364]	@ (8006918 <HAL_DMA_Abort+0x474>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00e      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a59      	ldr	r2, [pc, #356]	@ (800691c <HAL_DMA_Abort+0x478>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d009      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a58      	ldr	r2, [pc, #352]	@ (8006920 <HAL_DMA_Abort+0x47c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d004      	beq.n	80067ce <HAL_DMA_Abort+0x32a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a56      	ldr	r2, [pc, #344]	@ (8006924 <HAL_DMA_Abort+0x480>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d108      	bne.n	80067e0 <HAL_DMA_Abort+0x33c>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0201 	bic.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e007      	b.n	80067f0 <HAL_DMA_Abort+0x34c>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0201 	bic.w	r2, r2, #1
 80067ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80067f0:	e013      	b.n	800681a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067f2:	f7fc fbdb 	bl	8002fac <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b05      	cmp	r3, #5
 80067fe:	d90c      	bls.n	800681a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2203      	movs	r2, #3
 800680a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e12d      	b.n	8006a76 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e5      	bne.n	80067f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a2f      	ldr	r2, [pc, #188]	@ (80068e8 <HAL_DMA_Abort+0x444>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d04a      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a2d      	ldr	r2, [pc, #180]	@ (80068ec <HAL_DMA_Abort+0x448>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d045      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a2c      	ldr	r2, [pc, #176]	@ (80068f0 <HAL_DMA_Abort+0x44c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d040      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a2a      	ldr	r2, [pc, #168]	@ (80068f4 <HAL_DMA_Abort+0x450>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d03b      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a29      	ldr	r2, [pc, #164]	@ (80068f8 <HAL_DMA_Abort+0x454>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d036      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a27      	ldr	r2, [pc, #156]	@ (80068fc <HAL_DMA_Abort+0x458>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d031      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a26      	ldr	r2, [pc, #152]	@ (8006900 <HAL_DMA_Abort+0x45c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d02c      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a24      	ldr	r2, [pc, #144]	@ (8006904 <HAL_DMA_Abort+0x460>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d027      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a23      	ldr	r2, [pc, #140]	@ (8006908 <HAL_DMA_Abort+0x464>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d022      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a21      	ldr	r2, [pc, #132]	@ (800690c <HAL_DMA_Abort+0x468>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d01d      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a20      	ldr	r2, [pc, #128]	@ (8006910 <HAL_DMA_Abort+0x46c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d018      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a1e      	ldr	r2, [pc, #120]	@ (8006914 <HAL_DMA_Abort+0x470>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d013      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006918 <HAL_DMA_Abort+0x474>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00e      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1b      	ldr	r2, [pc, #108]	@ (800691c <HAL_DMA_Abort+0x478>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d009      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006920 <HAL_DMA_Abort+0x47c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d004      	beq.n	80068c6 <HAL_DMA_Abort+0x422>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a18      	ldr	r2, [pc, #96]	@ (8006924 <HAL_DMA_Abort+0x480>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d101      	bne.n	80068ca <HAL_DMA_Abort+0x426>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <HAL_DMA_Abort+0x428>
 80068ca:	2300      	movs	r3, #0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d02b      	beq.n	8006928 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	223f      	movs	r2, #63	@ 0x3f
 80068e0:	409a      	lsls	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	609a      	str	r2, [r3, #8]
 80068e6:	e02a      	b.n	800693e <HAL_DMA_Abort+0x49a>
 80068e8:	40020010 	.word	0x40020010
 80068ec:	40020028 	.word	0x40020028
 80068f0:	40020040 	.word	0x40020040
 80068f4:	40020058 	.word	0x40020058
 80068f8:	40020070 	.word	0x40020070
 80068fc:	40020088 	.word	0x40020088
 8006900:	400200a0 	.word	0x400200a0
 8006904:	400200b8 	.word	0x400200b8
 8006908:	40020410 	.word	0x40020410
 800690c:	40020428 	.word	0x40020428
 8006910:	40020440 	.word	0x40020440
 8006914:	40020458 	.word	0x40020458
 8006918:	40020470 	.word	0x40020470
 800691c:	40020488 	.word	0x40020488
 8006920:	400204a0 	.word	0x400204a0
 8006924:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800692c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006932:	f003 031f 	and.w	r3, r3, #31
 8006936:	2201      	movs	r2, #1
 8006938:	409a      	lsls	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a4f      	ldr	r2, [pc, #316]	@ (8006a80 <HAL_DMA_Abort+0x5dc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d072      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a4d      	ldr	r2, [pc, #308]	@ (8006a84 <HAL_DMA_Abort+0x5e0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d06d      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a4c      	ldr	r2, [pc, #304]	@ (8006a88 <HAL_DMA_Abort+0x5e4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d068      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a4a      	ldr	r2, [pc, #296]	@ (8006a8c <HAL_DMA_Abort+0x5e8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d063      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a49      	ldr	r2, [pc, #292]	@ (8006a90 <HAL_DMA_Abort+0x5ec>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d05e      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a47      	ldr	r2, [pc, #284]	@ (8006a94 <HAL_DMA_Abort+0x5f0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d059      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a46      	ldr	r2, [pc, #280]	@ (8006a98 <HAL_DMA_Abort+0x5f4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d054      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a44      	ldr	r2, [pc, #272]	@ (8006a9c <HAL_DMA_Abort+0x5f8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d04f      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a43      	ldr	r2, [pc, #268]	@ (8006aa0 <HAL_DMA_Abort+0x5fc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d04a      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a41      	ldr	r2, [pc, #260]	@ (8006aa4 <HAL_DMA_Abort+0x600>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d045      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a40      	ldr	r2, [pc, #256]	@ (8006aa8 <HAL_DMA_Abort+0x604>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d040      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a3e      	ldr	r2, [pc, #248]	@ (8006aac <HAL_DMA_Abort+0x608>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d03b      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a3d      	ldr	r2, [pc, #244]	@ (8006ab0 <HAL_DMA_Abort+0x60c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d036      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a3b      	ldr	r2, [pc, #236]	@ (8006ab4 <HAL_DMA_Abort+0x610>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d031      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a3a      	ldr	r2, [pc, #232]	@ (8006ab8 <HAL_DMA_Abort+0x614>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d02c      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a38      	ldr	r2, [pc, #224]	@ (8006abc <HAL_DMA_Abort+0x618>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d027      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a37      	ldr	r2, [pc, #220]	@ (8006ac0 <HAL_DMA_Abort+0x61c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d022      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a35      	ldr	r2, [pc, #212]	@ (8006ac4 <HAL_DMA_Abort+0x620>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d01d      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a34      	ldr	r2, [pc, #208]	@ (8006ac8 <HAL_DMA_Abort+0x624>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d018      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a32      	ldr	r2, [pc, #200]	@ (8006acc <HAL_DMA_Abort+0x628>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d013      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a31      	ldr	r2, [pc, #196]	@ (8006ad0 <HAL_DMA_Abort+0x62c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00e      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a2f      	ldr	r2, [pc, #188]	@ (8006ad4 <HAL_DMA_Abort+0x630>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d009      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8006ad8 <HAL_DMA_Abort+0x634>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d004      	beq.n	8006a2e <HAL_DMA_Abort+0x58a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a2c      	ldr	r2, [pc, #176]	@ (8006adc <HAL_DMA_Abort+0x638>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d101      	bne.n	8006a32 <HAL_DMA_Abort+0x58e>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <HAL_DMA_Abort+0x590>
 8006a32:	2300      	movs	r3, #0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d015      	beq.n	8006a64 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006a40:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00c      	beq.n	8006a64 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a58:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a62:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40020010 	.word	0x40020010
 8006a84:	40020028 	.word	0x40020028
 8006a88:	40020040 	.word	0x40020040
 8006a8c:	40020058 	.word	0x40020058
 8006a90:	40020070 	.word	0x40020070
 8006a94:	40020088 	.word	0x40020088
 8006a98:	400200a0 	.word	0x400200a0
 8006a9c:	400200b8 	.word	0x400200b8
 8006aa0:	40020410 	.word	0x40020410
 8006aa4:	40020428 	.word	0x40020428
 8006aa8:	40020440 	.word	0x40020440
 8006aac:	40020458 	.word	0x40020458
 8006ab0:	40020470 	.word	0x40020470
 8006ab4:	40020488 	.word	0x40020488
 8006ab8:	400204a0 	.word	0x400204a0
 8006abc:	400204b8 	.word	0x400204b8
 8006ac0:	58025408 	.word	0x58025408
 8006ac4:	5802541c 	.word	0x5802541c
 8006ac8:	58025430 	.word	0x58025430
 8006acc:	58025444 	.word	0x58025444
 8006ad0:	58025458 	.word	0x58025458
 8006ad4:	5802546c 	.word	0x5802546c
 8006ad8:	58025480 	.word	0x58025480
 8006adc:	58025494 	.word	0x58025494

08006ae0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e237      	b.n	8006f62 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d004      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2280      	movs	r2, #128	@ 0x80
 8006b02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e22c      	b.n	8006f62 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a5c      	ldr	r2, [pc, #368]	@ (8006c80 <HAL_DMA_Abort_IT+0x1a0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d04a      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a5b      	ldr	r2, [pc, #364]	@ (8006c84 <HAL_DMA_Abort_IT+0x1a4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d045      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a59      	ldr	r2, [pc, #356]	@ (8006c88 <HAL_DMA_Abort_IT+0x1a8>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d040      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a58      	ldr	r2, [pc, #352]	@ (8006c8c <HAL_DMA_Abort_IT+0x1ac>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d03b      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a56      	ldr	r2, [pc, #344]	@ (8006c90 <HAL_DMA_Abort_IT+0x1b0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d036      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a55      	ldr	r2, [pc, #340]	@ (8006c94 <HAL_DMA_Abort_IT+0x1b4>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d031      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a53      	ldr	r2, [pc, #332]	@ (8006c98 <HAL_DMA_Abort_IT+0x1b8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d02c      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a52      	ldr	r2, [pc, #328]	@ (8006c9c <HAL_DMA_Abort_IT+0x1bc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d027      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a50      	ldr	r2, [pc, #320]	@ (8006ca0 <HAL_DMA_Abort_IT+0x1c0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d022      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a4f      	ldr	r2, [pc, #316]	@ (8006ca4 <HAL_DMA_Abort_IT+0x1c4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d01d      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a4d      	ldr	r2, [pc, #308]	@ (8006ca8 <HAL_DMA_Abort_IT+0x1c8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d018      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a4c      	ldr	r2, [pc, #304]	@ (8006cac <HAL_DMA_Abort_IT+0x1cc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d013      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a4a      	ldr	r2, [pc, #296]	@ (8006cb0 <HAL_DMA_Abort_IT+0x1d0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00e      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a49      	ldr	r2, [pc, #292]	@ (8006cb4 <HAL_DMA_Abort_IT+0x1d4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d009      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a47      	ldr	r2, [pc, #284]	@ (8006cb8 <HAL_DMA_Abort_IT+0x1d8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d004      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0xc8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a46      	ldr	r2, [pc, #280]	@ (8006cbc <HAL_DMA_Abort_IT+0x1dc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d101      	bne.n	8006bac <HAL_DMA_Abort_IT+0xcc>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <HAL_DMA_Abort_IT+0xce>
 8006bac:	2300      	movs	r3, #0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 8086 	beq.w	8006cc0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8006c80 <HAL_DMA_Abort_IT+0x1a0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d04a      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a2e      	ldr	r2, [pc, #184]	@ (8006c84 <HAL_DMA_Abort_IT+0x1a4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d045      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8006c88 <HAL_DMA_Abort_IT+0x1a8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d040      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a2b      	ldr	r2, [pc, #172]	@ (8006c8c <HAL_DMA_Abort_IT+0x1ac>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d03b      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a29      	ldr	r2, [pc, #164]	@ (8006c90 <HAL_DMA_Abort_IT+0x1b0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d036      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a28      	ldr	r2, [pc, #160]	@ (8006c94 <HAL_DMA_Abort_IT+0x1b4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d031      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a26      	ldr	r2, [pc, #152]	@ (8006c98 <HAL_DMA_Abort_IT+0x1b8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d02c      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a25      	ldr	r2, [pc, #148]	@ (8006c9c <HAL_DMA_Abort_IT+0x1bc>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d027      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a23      	ldr	r2, [pc, #140]	@ (8006ca0 <HAL_DMA_Abort_IT+0x1c0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d022      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a22      	ldr	r2, [pc, #136]	@ (8006ca4 <HAL_DMA_Abort_IT+0x1c4>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d01d      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a20      	ldr	r2, [pc, #128]	@ (8006ca8 <HAL_DMA_Abort_IT+0x1c8>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d018      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8006cac <HAL_DMA_Abort_IT+0x1cc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d013      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb0 <HAL_DMA_Abort_IT+0x1d0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00e      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb4 <HAL_DMA_Abort_IT+0x1d4>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d009      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8006cb8 <HAL_DMA_Abort_IT+0x1d8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d004      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x17c>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a19      	ldr	r2, [pc, #100]	@ (8006cbc <HAL_DMA_Abort_IT+0x1dc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d108      	bne.n	8006c6e <HAL_DMA_Abort_IT+0x18e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0201 	bic.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	e178      	b.n	8006f60 <HAL_DMA_Abort_IT+0x480>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0201 	bic.w	r2, r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e16f      	b.n	8006f60 <HAL_DMA_Abort_IT+0x480>
 8006c80:	40020010 	.word	0x40020010
 8006c84:	40020028 	.word	0x40020028
 8006c88:	40020040 	.word	0x40020040
 8006c8c:	40020058 	.word	0x40020058
 8006c90:	40020070 	.word	0x40020070
 8006c94:	40020088 	.word	0x40020088
 8006c98:	400200a0 	.word	0x400200a0
 8006c9c:	400200b8 	.word	0x400200b8
 8006ca0:	40020410 	.word	0x40020410
 8006ca4:	40020428 	.word	0x40020428
 8006ca8:	40020440 	.word	0x40020440
 8006cac:	40020458 	.word	0x40020458
 8006cb0:	40020470 	.word	0x40020470
 8006cb4:	40020488 	.word	0x40020488
 8006cb8:	400204a0 	.word	0x400204a0
 8006cbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 020e 	bic.w	r2, r2, #14
 8006cce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a6c      	ldr	r2, [pc, #432]	@ (8006e88 <HAL_DMA_Abort_IT+0x3a8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d04a      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a6b      	ldr	r2, [pc, #428]	@ (8006e8c <HAL_DMA_Abort_IT+0x3ac>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d045      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a69      	ldr	r2, [pc, #420]	@ (8006e90 <HAL_DMA_Abort_IT+0x3b0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d040      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a68      	ldr	r2, [pc, #416]	@ (8006e94 <HAL_DMA_Abort_IT+0x3b4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d03b      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a66      	ldr	r2, [pc, #408]	@ (8006e98 <HAL_DMA_Abort_IT+0x3b8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d036      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a65      	ldr	r2, [pc, #404]	@ (8006e9c <HAL_DMA_Abort_IT+0x3bc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d031      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a63      	ldr	r2, [pc, #396]	@ (8006ea0 <HAL_DMA_Abort_IT+0x3c0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d02c      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a62      	ldr	r2, [pc, #392]	@ (8006ea4 <HAL_DMA_Abort_IT+0x3c4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d027      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a60      	ldr	r2, [pc, #384]	@ (8006ea8 <HAL_DMA_Abort_IT+0x3c8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d022      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a5f      	ldr	r2, [pc, #380]	@ (8006eac <HAL_DMA_Abort_IT+0x3cc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d01d      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a5d      	ldr	r2, [pc, #372]	@ (8006eb0 <HAL_DMA_Abort_IT+0x3d0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d018      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a5c      	ldr	r2, [pc, #368]	@ (8006eb4 <HAL_DMA_Abort_IT+0x3d4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a5a      	ldr	r2, [pc, #360]	@ (8006eb8 <HAL_DMA_Abort_IT+0x3d8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a59      	ldr	r2, [pc, #356]	@ (8006ebc <HAL_DMA_Abort_IT+0x3dc>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a57      	ldr	r2, [pc, #348]	@ (8006ec0 <HAL_DMA_Abort_IT+0x3e0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_DMA_Abort_IT+0x290>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a56      	ldr	r2, [pc, #344]	@ (8006ec4 <HAL_DMA_Abort_IT+0x3e4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d108      	bne.n	8006d82 <HAL_DMA_Abort_IT+0x2a2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0201 	bic.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e007      	b.n	8006d92 <HAL_DMA_Abort_IT+0x2b2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0201 	bic.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a3c      	ldr	r2, [pc, #240]	@ (8006e88 <HAL_DMA_Abort_IT+0x3a8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d072      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a3a      	ldr	r2, [pc, #232]	@ (8006e8c <HAL_DMA_Abort_IT+0x3ac>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d06d      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a39      	ldr	r2, [pc, #228]	@ (8006e90 <HAL_DMA_Abort_IT+0x3b0>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d068      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a37      	ldr	r2, [pc, #220]	@ (8006e94 <HAL_DMA_Abort_IT+0x3b4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d063      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a36      	ldr	r2, [pc, #216]	@ (8006e98 <HAL_DMA_Abort_IT+0x3b8>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d05e      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a34      	ldr	r2, [pc, #208]	@ (8006e9c <HAL_DMA_Abort_IT+0x3bc>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d059      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a33      	ldr	r2, [pc, #204]	@ (8006ea0 <HAL_DMA_Abort_IT+0x3c0>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d054      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a31      	ldr	r2, [pc, #196]	@ (8006ea4 <HAL_DMA_Abort_IT+0x3c4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d04f      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a30      	ldr	r2, [pc, #192]	@ (8006ea8 <HAL_DMA_Abort_IT+0x3c8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d04a      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a2e      	ldr	r2, [pc, #184]	@ (8006eac <HAL_DMA_Abort_IT+0x3cc>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d045      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb0 <HAL_DMA_Abort_IT+0x3d0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d040      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a2b      	ldr	r2, [pc, #172]	@ (8006eb4 <HAL_DMA_Abort_IT+0x3d4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d03b      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8006eb8 <HAL_DMA_Abort_IT+0x3d8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d036      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a28      	ldr	r2, [pc, #160]	@ (8006ebc <HAL_DMA_Abort_IT+0x3dc>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d031      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a27      	ldr	r2, [pc, #156]	@ (8006ec0 <HAL_DMA_Abort_IT+0x3e0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d02c      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a25      	ldr	r2, [pc, #148]	@ (8006ec4 <HAL_DMA_Abort_IT+0x3e4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d027      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a24      	ldr	r2, [pc, #144]	@ (8006ec8 <HAL_DMA_Abort_IT+0x3e8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d022      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a22      	ldr	r2, [pc, #136]	@ (8006ecc <HAL_DMA_Abort_IT+0x3ec>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d01d      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a21      	ldr	r2, [pc, #132]	@ (8006ed0 <HAL_DMA_Abort_IT+0x3f0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d018      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a1f      	ldr	r2, [pc, #124]	@ (8006ed4 <HAL_DMA_Abort_IT+0x3f4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d013      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ed8 <HAL_DMA_Abort_IT+0x3f8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00e      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a1c      	ldr	r2, [pc, #112]	@ (8006edc <HAL_DMA_Abort_IT+0x3fc>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d009      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a1b      	ldr	r2, [pc, #108]	@ (8006ee0 <HAL_DMA_Abort_IT+0x400>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d004      	beq.n	8006e82 <HAL_DMA_Abort_IT+0x3a2>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a19      	ldr	r2, [pc, #100]	@ (8006ee4 <HAL_DMA_Abort_IT+0x404>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d132      	bne.n	8006ee8 <HAL_DMA_Abort_IT+0x408>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e031      	b.n	8006eea <HAL_DMA_Abort_IT+0x40a>
 8006e86:	bf00      	nop
 8006e88:	40020010 	.word	0x40020010
 8006e8c:	40020028 	.word	0x40020028
 8006e90:	40020040 	.word	0x40020040
 8006e94:	40020058 	.word	0x40020058
 8006e98:	40020070 	.word	0x40020070
 8006e9c:	40020088 	.word	0x40020088
 8006ea0:	400200a0 	.word	0x400200a0
 8006ea4:	400200b8 	.word	0x400200b8
 8006ea8:	40020410 	.word	0x40020410
 8006eac:	40020428 	.word	0x40020428
 8006eb0:	40020440 	.word	0x40020440
 8006eb4:	40020458 	.word	0x40020458
 8006eb8:	40020470 	.word	0x40020470
 8006ebc:	40020488 	.word	0x40020488
 8006ec0:	400204a0 	.word	0x400204a0
 8006ec4:	400204b8 	.word	0x400204b8
 8006ec8:	58025408 	.word	0x58025408
 8006ecc:	5802541c 	.word	0x5802541c
 8006ed0:	58025430 	.word	0x58025430
 8006ed4:	58025444 	.word	0x58025444
 8006ed8:	58025458 	.word	0x58025458
 8006edc:	5802546c 	.word	0x5802546c
 8006ee0:	58025480 	.word	0x58025480
 8006ee4:	58025494 	.word	0x58025494
 8006ee8:	2300      	movs	r3, #0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d028      	beq.n	8006f40 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ef8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006efc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006f1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00c      	beq.n	8006f40 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006f3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop

08006f6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	@ 0x28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f78:	4b67      	ldr	r3, [pc, #412]	@ (8007118 <HAL_DMA_IRQHandler+0x1ac>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a67      	ldr	r2, [pc, #412]	@ (800711c <HAL_DMA_IRQHandler+0x1b0>)
 8006f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f82:	0a9b      	lsrs	r3, r3, #10
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f8a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f90:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a5f      	ldr	r2, [pc, #380]	@ (8007120 <HAL_DMA_IRQHandler+0x1b4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d04a      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a5d      	ldr	r2, [pc, #372]	@ (8007124 <HAL_DMA_IRQHandler+0x1b8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d045      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a5c      	ldr	r2, [pc, #368]	@ (8007128 <HAL_DMA_IRQHandler+0x1bc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d040      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a5a      	ldr	r2, [pc, #360]	@ (800712c <HAL_DMA_IRQHandler+0x1c0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d03b      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a59      	ldr	r2, [pc, #356]	@ (8007130 <HAL_DMA_IRQHandler+0x1c4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d036      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a57      	ldr	r2, [pc, #348]	@ (8007134 <HAL_DMA_IRQHandler+0x1c8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d031      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a56      	ldr	r2, [pc, #344]	@ (8007138 <HAL_DMA_IRQHandler+0x1cc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d02c      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a54      	ldr	r2, [pc, #336]	@ (800713c <HAL_DMA_IRQHandler+0x1d0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d027      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a53      	ldr	r2, [pc, #332]	@ (8007140 <HAL_DMA_IRQHandler+0x1d4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d022      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a51      	ldr	r2, [pc, #324]	@ (8007144 <HAL_DMA_IRQHandler+0x1d8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01d      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a50      	ldr	r2, [pc, #320]	@ (8007148 <HAL_DMA_IRQHandler+0x1dc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a4e      	ldr	r2, [pc, #312]	@ (800714c <HAL_DMA_IRQHandler+0x1e0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a4d      	ldr	r2, [pc, #308]	@ (8007150 <HAL_DMA_IRQHandler+0x1e4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a4b      	ldr	r2, [pc, #300]	@ (8007154 <HAL_DMA_IRQHandler+0x1e8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a4a      	ldr	r2, [pc, #296]	@ (8007158 <HAL_DMA_IRQHandler+0x1ec>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_DMA_IRQHandler+0xd2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a48      	ldr	r2, [pc, #288]	@ (800715c <HAL_DMA_IRQHandler+0x1f0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d101      	bne.n	8007042 <HAL_DMA_IRQHandler+0xd6>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <HAL_DMA_IRQHandler+0xd8>
 8007042:	2300      	movs	r3, #0
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 842b 	beq.w	80078a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800704e:	f003 031f 	and.w	r3, r3, #31
 8007052:	2208      	movs	r2, #8
 8007054:	409a      	lsls	r2, r3
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	4013      	ands	r3, r2
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 80a2 	beq.w	80071a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a2e      	ldr	r2, [pc, #184]	@ (8007120 <HAL_DMA_IRQHandler+0x1b4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d04a      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a2d      	ldr	r2, [pc, #180]	@ (8007124 <HAL_DMA_IRQHandler+0x1b8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d045      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a2b      	ldr	r2, [pc, #172]	@ (8007128 <HAL_DMA_IRQHandler+0x1bc>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d040      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a2a      	ldr	r2, [pc, #168]	@ (800712c <HAL_DMA_IRQHandler+0x1c0>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d03b      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a28      	ldr	r2, [pc, #160]	@ (8007130 <HAL_DMA_IRQHandler+0x1c4>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d036      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a27      	ldr	r2, [pc, #156]	@ (8007134 <HAL_DMA_IRQHandler+0x1c8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d031      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a25      	ldr	r2, [pc, #148]	@ (8007138 <HAL_DMA_IRQHandler+0x1cc>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d02c      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a24      	ldr	r2, [pc, #144]	@ (800713c <HAL_DMA_IRQHandler+0x1d0>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d027      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a22      	ldr	r2, [pc, #136]	@ (8007140 <HAL_DMA_IRQHandler+0x1d4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d022      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a21      	ldr	r2, [pc, #132]	@ (8007144 <HAL_DMA_IRQHandler+0x1d8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d01d      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007148 <HAL_DMA_IRQHandler+0x1dc>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d018      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a1e      	ldr	r2, [pc, #120]	@ (800714c <HAL_DMA_IRQHandler+0x1e0>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d013      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1c      	ldr	r2, [pc, #112]	@ (8007150 <HAL_DMA_IRQHandler+0x1e4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d00e      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1b      	ldr	r2, [pc, #108]	@ (8007154 <HAL_DMA_IRQHandler+0x1e8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d009      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a19      	ldr	r2, [pc, #100]	@ (8007158 <HAL_DMA_IRQHandler+0x1ec>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d004      	beq.n	8007100 <HAL_DMA_IRQHandler+0x194>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a18      	ldr	r2, [pc, #96]	@ (800715c <HAL_DMA_IRQHandler+0x1f0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d12f      	bne.n	8007160 <HAL_DMA_IRQHandler+0x1f4>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	2b00      	cmp	r3, #0
 800710c:	bf14      	ite	ne
 800710e:	2301      	movne	r3, #1
 8007110:	2300      	moveq	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	e02e      	b.n	8007174 <HAL_DMA_IRQHandler+0x208>
 8007116:	bf00      	nop
 8007118:	24000000 	.word	0x24000000
 800711c:	1b4e81b5 	.word	0x1b4e81b5
 8007120:	40020010 	.word	0x40020010
 8007124:	40020028 	.word	0x40020028
 8007128:	40020040 	.word	0x40020040
 800712c:	40020058 	.word	0x40020058
 8007130:	40020070 	.word	0x40020070
 8007134:	40020088 	.word	0x40020088
 8007138:	400200a0 	.word	0x400200a0
 800713c:	400200b8 	.word	0x400200b8
 8007140:	40020410 	.word	0x40020410
 8007144:	40020428 	.word	0x40020428
 8007148:	40020440 	.word	0x40020440
 800714c:	40020458 	.word	0x40020458
 8007150:	40020470 	.word	0x40020470
 8007154:	40020488 	.word	0x40020488
 8007158:	400204a0 	.word	0x400204a0
 800715c:	400204b8 	.word	0x400204b8
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b00      	cmp	r3, #0
 800716c:	bf14      	ite	ne
 800716e:	2301      	movne	r3, #1
 8007170:	2300      	moveq	r3, #0
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d015      	beq.n	80071a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0204 	bic.w	r2, r2, #4
 8007186:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800718c:	f003 031f 	and.w	r3, r3, #31
 8007190:	2208      	movs	r2, #8
 8007192:	409a      	lsls	r2, r3
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800719c:	f043 0201 	orr.w	r2, r3, #1
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	fa22 f303 	lsr.w	r3, r2, r3
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d06e      	beq.n	8007298 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a69      	ldr	r2, [pc, #420]	@ (8007364 <HAL_DMA_IRQHandler+0x3f8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d04a      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a67      	ldr	r2, [pc, #412]	@ (8007368 <HAL_DMA_IRQHandler+0x3fc>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d045      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a66      	ldr	r2, [pc, #408]	@ (800736c <HAL_DMA_IRQHandler+0x400>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d040      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a64      	ldr	r2, [pc, #400]	@ (8007370 <HAL_DMA_IRQHandler+0x404>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d03b      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a63      	ldr	r2, [pc, #396]	@ (8007374 <HAL_DMA_IRQHandler+0x408>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d036      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a61      	ldr	r2, [pc, #388]	@ (8007378 <HAL_DMA_IRQHandler+0x40c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d031      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a60      	ldr	r2, [pc, #384]	@ (800737c <HAL_DMA_IRQHandler+0x410>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d02c      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a5e      	ldr	r2, [pc, #376]	@ (8007380 <HAL_DMA_IRQHandler+0x414>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d027      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a5d      	ldr	r2, [pc, #372]	@ (8007384 <HAL_DMA_IRQHandler+0x418>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d022      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a5b      	ldr	r2, [pc, #364]	@ (8007388 <HAL_DMA_IRQHandler+0x41c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d01d      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a5a      	ldr	r2, [pc, #360]	@ (800738c <HAL_DMA_IRQHandler+0x420>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d018      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a58      	ldr	r2, [pc, #352]	@ (8007390 <HAL_DMA_IRQHandler+0x424>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d013      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a57      	ldr	r2, [pc, #348]	@ (8007394 <HAL_DMA_IRQHandler+0x428>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d00e      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a55      	ldr	r2, [pc, #340]	@ (8007398 <HAL_DMA_IRQHandler+0x42c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d009      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a54      	ldr	r2, [pc, #336]	@ (800739c <HAL_DMA_IRQHandler+0x430>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d004      	beq.n	800725a <HAL_DMA_IRQHandler+0x2ee>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a52      	ldr	r2, [pc, #328]	@ (80073a0 <HAL_DMA_IRQHandler+0x434>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d10a      	bne.n	8007270 <HAL_DMA_IRQHandler+0x304>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007264:	2b00      	cmp	r3, #0
 8007266:	bf14      	ite	ne
 8007268:	2301      	movne	r3, #1
 800726a:	2300      	moveq	r3, #0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	e003      	b.n	8007278 <HAL_DMA_IRQHandler+0x30c>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2300      	movs	r3, #0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00d      	beq.n	8007298 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	2201      	movs	r2, #1
 8007286:	409a      	lsls	r2, r3
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007290:	f043 0202 	orr.w	r2, r3, #2
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	2204      	movs	r2, #4
 80072a2:	409a      	lsls	r2, r3
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	4013      	ands	r3, r2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 808f 	beq.w	80073cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a2c      	ldr	r2, [pc, #176]	@ (8007364 <HAL_DMA_IRQHandler+0x3f8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d04a      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a2a      	ldr	r2, [pc, #168]	@ (8007368 <HAL_DMA_IRQHandler+0x3fc>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d045      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a29      	ldr	r2, [pc, #164]	@ (800736c <HAL_DMA_IRQHandler+0x400>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d040      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a27      	ldr	r2, [pc, #156]	@ (8007370 <HAL_DMA_IRQHandler+0x404>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d03b      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a26      	ldr	r2, [pc, #152]	@ (8007374 <HAL_DMA_IRQHandler+0x408>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d036      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a24      	ldr	r2, [pc, #144]	@ (8007378 <HAL_DMA_IRQHandler+0x40c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d031      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a23      	ldr	r2, [pc, #140]	@ (800737c <HAL_DMA_IRQHandler+0x410>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d02c      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a21      	ldr	r2, [pc, #132]	@ (8007380 <HAL_DMA_IRQHandler+0x414>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d027      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a20      	ldr	r2, [pc, #128]	@ (8007384 <HAL_DMA_IRQHandler+0x418>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d022      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1e      	ldr	r2, [pc, #120]	@ (8007388 <HAL_DMA_IRQHandler+0x41c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d01d      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1d      	ldr	r2, [pc, #116]	@ (800738c <HAL_DMA_IRQHandler+0x420>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d018      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1b      	ldr	r2, [pc, #108]	@ (8007390 <HAL_DMA_IRQHandler+0x424>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d013      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1a      	ldr	r2, [pc, #104]	@ (8007394 <HAL_DMA_IRQHandler+0x428>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00e      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a18      	ldr	r2, [pc, #96]	@ (8007398 <HAL_DMA_IRQHandler+0x42c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d009      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a17      	ldr	r2, [pc, #92]	@ (800739c <HAL_DMA_IRQHandler+0x430>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d004      	beq.n	800734e <HAL_DMA_IRQHandler+0x3e2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a15      	ldr	r2, [pc, #84]	@ (80073a0 <HAL_DMA_IRQHandler+0x434>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d12a      	bne.n	80073a4 <HAL_DMA_IRQHandler+0x438>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	bf14      	ite	ne
 800735c:	2301      	movne	r3, #1
 800735e:	2300      	moveq	r3, #0
 8007360:	b2db      	uxtb	r3, r3
 8007362:	e023      	b.n	80073ac <HAL_DMA_IRQHandler+0x440>
 8007364:	40020010 	.word	0x40020010
 8007368:	40020028 	.word	0x40020028
 800736c:	40020040 	.word	0x40020040
 8007370:	40020058 	.word	0x40020058
 8007374:	40020070 	.word	0x40020070
 8007378:	40020088 	.word	0x40020088
 800737c:	400200a0 	.word	0x400200a0
 8007380:	400200b8 	.word	0x400200b8
 8007384:	40020410 	.word	0x40020410
 8007388:	40020428 	.word	0x40020428
 800738c:	40020440 	.word	0x40020440
 8007390:	40020458 	.word	0x40020458
 8007394:	40020470 	.word	0x40020470
 8007398:	40020488 	.word	0x40020488
 800739c:	400204a0 	.word	0x400204a0
 80073a0:	400204b8 	.word	0x400204b8
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2300      	movs	r3, #0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00d      	beq.n	80073cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b4:	f003 031f 	and.w	r3, r3, #31
 80073b8:	2204      	movs	r2, #4
 80073ba:	409a      	lsls	r2, r3
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c4:	f043 0204 	orr.w	r2, r3, #4
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	2210      	movs	r2, #16
 80073d6:	409a      	lsls	r2, r3
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	4013      	ands	r3, r2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 80a6 	beq.w	800752e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a85      	ldr	r2, [pc, #532]	@ (80075fc <HAL_DMA_IRQHandler+0x690>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d04a      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a83      	ldr	r2, [pc, #524]	@ (8007600 <HAL_DMA_IRQHandler+0x694>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d045      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a82      	ldr	r2, [pc, #520]	@ (8007604 <HAL_DMA_IRQHandler+0x698>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d040      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a80      	ldr	r2, [pc, #512]	@ (8007608 <HAL_DMA_IRQHandler+0x69c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d03b      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a7f      	ldr	r2, [pc, #508]	@ (800760c <HAL_DMA_IRQHandler+0x6a0>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d036      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a7d      	ldr	r2, [pc, #500]	@ (8007610 <HAL_DMA_IRQHandler+0x6a4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d031      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a7c      	ldr	r2, [pc, #496]	@ (8007614 <HAL_DMA_IRQHandler+0x6a8>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d02c      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a7a      	ldr	r2, [pc, #488]	@ (8007618 <HAL_DMA_IRQHandler+0x6ac>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d027      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a79      	ldr	r2, [pc, #484]	@ (800761c <HAL_DMA_IRQHandler+0x6b0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d022      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a77      	ldr	r2, [pc, #476]	@ (8007620 <HAL_DMA_IRQHandler+0x6b4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d01d      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a76      	ldr	r2, [pc, #472]	@ (8007624 <HAL_DMA_IRQHandler+0x6b8>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d018      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a74      	ldr	r2, [pc, #464]	@ (8007628 <HAL_DMA_IRQHandler+0x6bc>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d013      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a73      	ldr	r2, [pc, #460]	@ (800762c <HAL_DMA_IRQHandler+0x6c0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00e      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a71      	ldr	r2, [pc, #452]	@ (8007630 <HAL_DMA_IRQHandler+0x6c4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d009      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a70      	ldr	r2, [pc, #448]	@ (8007634 <HAL_DMA_IRQHandler+0x6c8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d004      	beq.n	8007482 <HAL_DMA_IRQHandler+0x516>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a6e      	ldr	r2, [pc, #440]	@ (8007638 <HAL_DMA_IRQHandler+0x6cc>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d10a      	bne.n	8007498 <HAL_DMA_IRQHandler+0x52c>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0308 	and.w	r3, r3, #8
 800748c:	2b00      	cmp	r3, #0
 800748e:	bf14      	ite	ne
 8007490:	2301      	movne	r3, #1
 8007492:	2300      	moveq	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	e009      	b.n	80074ac <HAL_DMA_IRQHandler+0x540>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	bf14      	ite	ne
 80074a6:	2301      	movne	r3, #1
 80074a8:	2300      	moveq	r3, #0
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d03e      	beq.n	800752e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	2210      	movs	r2, #16
 80074ba:	409a      	lsls	r2, r3
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d018      	beq.n	8007500 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d108      	bne.n	80074ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d024      	beq.n	800752e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
 80074ec:	e01f      	b.n	800752e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d01b      	beq.n	800752e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
 80074fe:	e016      	b.n	800752e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800750a:	2b00      	cmp	r3, #0
 800750c:	d107      	bne.n	800751e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0208 	bic.w	r2, r2, #8
 800751c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007532:	f003 031f 	and.w	r3, r3, #31
 8007536:	2220      	movs	r2, #32
 8007538:	409a      	lsls	r2, r3
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	4013      	ands	r3, r2
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 8110 	beq.w	8007764 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a2c      	ldr	r2, [pc, #176]	@ (80075fc <HAL_DMA_IRQHandler+0x690>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d04a      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a2b      	ldr	r2, [pc, #172]	@ (8007600 <HAL_DMA_IRQHandler+0x694>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d045      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a29      	ldr	r2, [pc, #164]	@ (8007604 <HAL_DMA_IRQHandler+0x698>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d040      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a28      	ldr	r2, [pc, #160]	@ (8007608 <HAL_DMA_IRQHandler+0x69c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d03b      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a26      	ldr	r2, [pc, #152]	@ (800760c <HAL_DMA_IRQHandler+0x6a0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d036      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a25      	ldr	r2, [pc, #148]	@ (8007610 <HAL_DMA_IRQHandler+0x6a4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d031      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a23      	ldr	r2, [pc, #140]	@ (8007614 <HAL_DMA_IRQHandler+0x6a8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d02c      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a22      	ldr	r2, [pc, #136]	@ (8007618 <HAL_DMA_IRQHandler+0x6ac>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d027      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a20      	ldr	r2, [pc, #128]	@ (800761c <HAL_DMA_IRQHandler+0x6b0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d022      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007620 <HAL_DMA_IRQHandler+0x6b4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d01d      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007624 <HAL_DMA_IRQHandler+0x6b8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d018      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007628 <HAL_DMA_IRQHandler+0x6bc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d013      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1a      	ldr	r2, [pc, #104]	@ (800762c <HAL_DMA_IRQHandler+0x6c0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00e      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a19      	ldr	r2, [pc, #100]	@ (8007630 <HAL_DMA_IRQHandler+0x6c4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d009      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a17      	ldr	r2, [pc, #92]	@ (8007634 <HAL_DMA_IRQHandler+0x6c8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d004      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x678>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a16      	ldr	r2, [pc, #88]	@ (8007638 <HAL_DMA_IRQHandler+0x6cc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d12b      	bne.n	800763c <HAL_DMA_IRQHandler+0x6d0>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0310 	and.w	r3, r3, #16
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	bf14      	ite	ne
 80075f2:	2301      	movne	r3, #1
 80075f4:	2300      	moveq	r3, #0
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	e02a      	b.n	8007650 <HAL_DMA_IRQHandler+0x6e4>
 80075fa:	bf00      	nop
 80075fc:	40020010 	.word	0x40020010
 8007600:	40020028 	.word	0x40020028
 8007604:	40020040 	.word	0x40020040
 8007608:	40020058 	.word	0x40020058
 800760c:	40020070 	.word	0x40020070
 8007610:	40020088 	.word	0x40020088
 8007614:	400200a0 	.word	0x400200a0
 8007618:	400200b8 	.word	0x400200b8
 800761c:	40020410 	.word	0x40020410
 8007620:	40020428 	.word	0x40020428
 8007624:	40020440 	.word	0x40020440
 8007628:	40020458 	.word	0x40020458
 800762c:	40020470 	.word	0x40020470
 8007630:	40020488 	.word	0x40020488
 8007634:	400204a0 	.word	0x400204a0
 8007638:	400204b8 	.word	0x400204b8
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	bf14      	ite	ne
 800764a:	2301      	movne	r3, #1
 800764c:	2300      	moveq	r3, #0
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 8087 	beq.w	8007764 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800765a:	f003 031f 	and.w	r3, r3, #31
 800765e:	2220      	movs	r2, #32
 8007660:	409a      	lsls	r2, r3
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b04      	cmp	r3, #4
 8007670:	d139      	bne.n	80076e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0216 	bic.w	r2, r2, #22
 8007680:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	695a      	ldr	r2, [r3, #20]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007690:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <HAL_DMA_IRQHandler+0x736>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0208 	bic.w	r2, r2, #8
 80076b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076b6:	f003 031f 	and.w	r3, r3, #31
 80076ba:	223f      	movs	r2, #63	@ 0x3f
 80076bc:	409a      	lsls	r2, r3
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 834a 	beq.w	8007d70 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
          }
          return;
 80076e4:	e344      	b.n	8007d70 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d018      	beq.n	8007726 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d108      	bne.n	8007714 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007706:	2b00      	cmp	r3, #0
 8007708:	d02c      	beq.n	8007764 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
 8007712:	e027      	b.n	8007764 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d023      	beq.n	8007764 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
 8007724:	e01e      	b.n	8007764 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10f      	bne.n	8007754 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0210 	bic.w	r2, r2, #16
 8007742:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 8306 	beq.w	8007d7a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 8088 	beq.w	800788c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2204      	movs	r2, #4
 8007780:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a7a      	ldr	r2, [pc, #488]	@ (8007974 <HAL_DMA_IRQHandler+0xa08>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d04a      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a79      	ldr	r2, [pc, #484]	@ (8007978 <HAL_DMA_IRQHandler+0xa0c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d045      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a77      	ldr	r2, [pc, #476]	@ (800797c <HAL_DMA_IRQHandler+0xa10>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d040      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a76      	ldr	r2, [pc, #472]	@ (8007980 <HAL_DMA_IRQHandler+0xa14>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d03b      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a74      	ldr	r2, [pc, #464]	@ (8007984 <HAL_DMA_IRQHandler+0xa18>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d036      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a73      	ldr	r2, [pc, #460]	@ (8007988 <HAL_DMA_IRQHandler+0xa1c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d031      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a71      	ldr	r2, [pc, #452]	@ (800798c <HAL_DMA_IRQHandler+0xa20>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d02c      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a70      	ldr	r2, [pc, #448]	@ (8007990 <HAL_DMA_IRQHandler+0xa24>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d027      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a6e      	ldr	r2, [pc, #440]	@ (8007994 <HAL_DMA_IRQHandler+0xa28>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d022      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a6d      	ldr	r2, [pc, #436]	@ (8007998 <HAL_DMA_IRQHandler+0xa2c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d01d      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a6b      	ldr	r2, [pc, #428]	@ (800799c <HAL_DMA_IRQHandler+0xa30>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d018      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a6a      	ldr	r2, [pc, #424]	@ (80079a0 <HAL_DMA_IRQHandler+0xa34>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d013      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a68      	ldr	r2, [pc, #416]	@ (80079a4 <HAL_DMA_IRQHandler+0xa38>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d00e      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a67      	ldr	r2, [pc, #412]	@ (80079a8 <HAL_DMA_IRQHandler+0xa3c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d009      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a65      	ldr	r2, [pc, #404]	@ (80079ac <HAL_DMA_IRQHandler+0xa40>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d004      	beq.n	8007824 <HAL_DMA_IRQHandler+0x8b8>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a64      	ldr	r2, [pc, #400]	@ (80079b0 <HAL_DMA_IRQHandler+0xa44>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d108      	bne.n	8007836 <HAL_DMA_IRQHandler+0x8ca>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0201 	bic.w	r2, r2, #1
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	e007      	b.n	8007846 <HAL_DMA_IRQHandler+0x8da>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 0201 	bic.w	r2, r2, #1
 8007844:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3301      	adds	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800784e:	429a      	cmp	r2, r3
 8007850:	d307      	bcc.n	8007862 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f2      	bne.n	8007846 <HAL_DMA_IRQHandler+0x8da>
 8007860:	e000      	b.n	8007864 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007862:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d004      	beq.n	800787c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2203      	movs	r2, #3
 8007876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800787a:	e003      	b.n	8007884 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8272 	beq.w	8007d7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	4798      	blx	r3
 800789e:	e26c      	b.n	8007d7a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a43      	ldr	r2, [pc, #268]	@ (80079b4 <HAL_DMA_IRQHandler+0xa48>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d022      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x984>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a42      	ldr	r2, [pc, #264]	@ (80079b8 <HAL_DMA_IRQHandler+0xa4c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d01d      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x984>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a40      	ldr	r2, [pc, #256]	@ (80079bc <HAL_DMA_IRQHandler+0xa50>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d018      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x984>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a3f      	ldr	r2, [pc, #252]	@ (80079c0 <HAL_DMA_IRQHandler+0xa54>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d013      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x984>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a3d      	ldr	r2, [pc, #244]	@ (80079c4 <HAL_DMA_IRQHandler+0xa58>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00e      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x984>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a3c      	ldr	r2, [pc, #240]	@ (80079c8 <HAL_DMA_IRQHandler+0xa5c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d009      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x984>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a3a      	ldr	r2, [pc, #232]	@ (80079cc <HAL_DMA_IRQHandler+0xa60>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d004      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x984>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a39      	ldr	r2, [pc, #228]	@ (80079d0 <HAL_DMA_IRQHandler+0xa64>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d101      	bne.n	80078f4 <HAL_DMA_IRQHandler+0x988>
 80078f0:	2301      	movs	r3, #1
 80078f2:	e000      	b.n	80078f6 <HAL_DMA_IRQHandler+0x98a>
 80078f4:	2300      	movs	r3, #0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 823f 	beq.w	8007d7a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	2204      	movs	r2, #4
 800790e:	409a      	lsls	r2, r3
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	4013      	ands	r3, r2
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 80cd 	beq.w	8007ab4 <HAL_DMA_IRQHandler+0xb48>
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 80c7 	beq.w	8007ab4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800792a:	f003 031f 	and.w	r3, r3, #31
 800792e:	2204      	movs	r2, #4
 8007930:	409a      	lsls	r2, r3
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d049      	beq.n	80079d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d109      	bne.n	800795e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 8210 	beq.w	8007d74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800795c:	e20a      	b.n	8007d74 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 8206 	beq.w	8007d74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007970:	e200      	b.n	8007d74 <HAL_DMA_IRQHandler+0xe08>
 8007972:	bf00      	nop
 8007974:	40020010 	.word	0x40020010
 8007978:	40020028 	.word	0x40020028
 800797c:	40020040 	.word	0x40020040
 8007980:	40020058 	.word	0x40020058
 8007984:	40020070 	.word	0x40020070
 8007988:	40020088 	.word	0x40020088
 800798c:	400200a0 	.word	0x400200a0
 8007990:	400200b8 	.word	0x400200b8
 8007994:	40020410 	.word	0x40020410
 8007998:	40020428 	.word	0x40020428
 800799c:	40020440 	.word	0x40020440
 80079a0:	40020458 	.word	0x40020458
 80079a4:	40020470 	.word	0x40020470
 80079a8:	40020488 	.word	0x40020488
 80079ac:	400204a0 	.word	0x400204a0
 80079b0:	400204b8 	.word	0x400204b8
 80079b4:	58025408 	.word	0x58025408
 80079b8:	5802541c 	.word	0x5802541c
 80079bc:	58025430 	.word	0x58025430
 80079c0:	58025444 	.word	0x58025444
 80079c4:	58025458 	.word	0x58025458
 80079c8:	5802546c 	.word	0x5802546c
 80079cc:	58025480 	.word	0x58025480
 80079d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d160      	bne.n	8007aa0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a7f      	ldr	r2, [pc, #508]	@ (8007be0 <HAL_DMA_IRQHandler+0xc74>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d04a      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a7d      	ldr	r2, [pc, #500]	@ (8007be4 <HAL_DMA_IRQHandler+0xc78>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d045      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a7c      	ldr	r2, [pc, #496]	@ (8007be8 <HAL_DMA_IRQHandler+0xc7c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d040      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a7a      	ldr	r2, [pc, #488]	@ (8007bec <HAL_DMA_IRQHandler+0xc80>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d03b      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a79      	ldr	r2, [pc, #484]	@ (8007bf0 <HAL_DMA_IRQHandler+0xc84>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d036      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a77      	ldr	r2, [pc, #476]	@ (8007bf4 <HAL_DMA_IRQHandler+0xc88>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d031      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a76      	ldr	r2, [pc, #472]	@ (8007bf8 <HAL_DMA_IRQHandler+0xc8c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d02c      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a74      	ldr	r2, [pc, #464]	@ (8007bfc <HAL_DMA_IRQHandler+0xc90>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d027      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a73      	ldr	r2, [pc, #460]	@ (8007c00 <HAL_DMA_IRQHandler+0xc94>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d022      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a71      	ldr	r2, [pc, #452]	@ (8007c04 <HAL_DMA_IRQHandler+0xc98>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d01d      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a70      	ldr	r2, [pc, #448]	@ (8007c08 <HAL_DMA_IRQHandler+0xc9c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d018      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a6e      	ldr	r2, [pc, #440]	@ (8007c0c <HAL_DMA_IRQHandler+0xca0>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d013      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a6d      	ldr	r2, [pc, #436]	@ (8007c10 <HAL_DMA_IRQHandler+0xca4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00e      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a6b      	ldr	r2, [pc, #428]	@ (8007c14 <HAL_DMA_IRQHandler+0xca8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d009      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a6a      	ldr	r2, [pc, #424]	@ (8007c18 <HAL_DMA_IRQHandler+0xcac>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d004      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xb12>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a68      	ldr	r2, [pc, #416]	@ (8007c1c <HAL_DMA_IRQHandler+0xcb0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d108      	bne.n	8007a90 <HAL_DMA_IRQHandler+0xb24>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0208 	bic.w	r2, r2, #8
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e007      	b.n	8007aa0 <HAL_DMA_IRQHandler+0xb34>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0204 	bic.w	r2, r2, #4
 8007a9e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 8165 	beq.w	8007d74 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ab2:	e15f      	b.n	8007d74 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ab8:	f003 031f 	and.w	r3, r3, #31
 8007abc:	2202      	movs	r2, #2
 8007abe:	409a      	lsls	r2, r3
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80c5 	beq.w	8007c54 <HAL_DMA_IRQHandler+0xce8>
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 80bf 	beq.w	8007c54 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ada:	f003 031f 	and.w	r3, r3, #31
 8007ade:	2202      	movs	r2, #2
 8007ae0:	409a      	lsls	r2, r3
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d018      	beq.n	8007b22 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d109      	bne.n	8007b0e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 813a 	beq.w	8007d78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b0c:	e134      	b.n	8007d78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 8130 	beq.w	8007d78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b20:	e12a      	b.n	8007d78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f040 8089 	bne.w	8007c40 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a2b      	ldr	r2, [pc, #172]	@ (8007be0 <HAL_DMA_IRQHandler+0xc74>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d04a      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a29      	ldr	r2, [pc, #164]	@ (8007be4 <HAL_DMA_IRQHandler+0xc78>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d045      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a28      	ldr	r2, [pc, #160]	@ (8007be8 <HAL_DMA_IRQHandler+0xc7c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d040      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a26      	ldr	r2, [pc, #152]	@ (8007bec <HAL_DMA_IRQHandler+0xc80>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d03b      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a25      	ldr	r2, [pc, #148]	@ (8007bf0 <HAL_DMA_IRQHandler+0xc84>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d036      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a23      	ldr	r2, [pc, #140]	@ (8007bf4 <HAL_DMA_IRQHandler+0xc88>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d031      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a22      	ldr	r2, [pc, #136]	@ (8007bf8 <HAL_DMA_IRQHandler+0xc8c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d02c      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a20      	ldr	r2, [pc, #128]	@ (8007bfc <HAL_DMA_IRQHandler+0xc90>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d027      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1f      	ldr	r2, [pc, #124]	@ (8007c00 <HAL_DMA_IRQHandler+0xc94>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d022      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007c04 <HAL_DMA_IRQHandler+0xc98>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d01d      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1c      	ldr	r2, [pc, #112]	@ (8007c08 <HAL_DMA_IRQHandler+0xc9c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d018      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8007c0c <HAL_DMA_IRQHandler+0xca0>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d013      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a19      	ldr	r2, [pc, #100]	@ (8007c10 <HAL_DMA_IRQHandler+0xca4>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d00e      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a17      	ldr	r2, [pc, #92]	@ (8007c14 <HAL_DMA_IRQHandler+0xca8>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d009      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a16      	ldr	r2, [pc, #88]	@ (8007c18 <HAL_DMA_IRQHandler+0xcac>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d004      	beq.n	8007bce <HAL_DMA_IRQHandler+0xc62>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a14      	ldr	r2, [pc, #80]	@ (8007c1c <HAL_DMA_IRQHandler+0xcb0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d128      	bne.n	8007c20 <HAL_DMA_IRQHandler+0xcb4>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0214 	bic.w	r2, r2, #20
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	e027      	b.n	8007c30 <HAL_DMA_IRQHandler+0xcc4>
 8007be0:	40020010 	.word	0x40020010
 8007be4:	40020028 	.word	0x40020028
 8007be8:	40020040 	.word	0x40020040
 8007bec:	40020058 	.word	0x40020058
 8007bf0:	40020070 	.word	0x40020070
 8007bf4:	40020088 	.word	0x40020088
 8007bf8:	400200a0 	.word	0x400200a0
 8007bfc:	400200b8 	.word	0x400200b8
 8007c00:	40020410 	.word	0x40020410
 8007c04:	40020428 	.word	0x40020428
 8007c08:	40020440 	.word	0x40020440
 8007c0c:	40020458 	.word	0x40020458
 8007c10:	40020470 	.word	0x40020470
 8007c14:	40020488 	.word	0x40020488
 8007c18:	400204a0 	.word	0x400204a0
 8007c1c:	400204b8 	.word	0x400204b8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 020a 	bic.w	r2, r2, #10
 8007c2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8097 	beq.w	8007d78 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c52:	e091      	b.n	8007d78 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c58:	f003 031f 	and.w	r3, r3, #31
 8007c5c:	2208      	movs	r2, #8
 8007c5e:	409a      	lsls	r2, r3
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	4013      	ands	r3, r2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 8088 	beq.w	8007d7a <HAL_DMA_IRQHandler+0xe0e>
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f003 0308 	and.w	r3, r3, #8
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 8082 	beq.w	8007d7a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a41      	ldr	r2, [pc, #260]	@ (8007d80 <HAL_DMA_IRQHandler+0xe14>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d04a      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a3f      	ldr	r2, [pc, #252]	@ (8007d84 <HAL_DMA_IRQHandler+0xe18>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d045      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a3e      	ldr	r2, [pc, #248]	@ (8007d88 <HAL_DMA_IRQHandler+0xe1c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d040      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a3c      	ldr	r2, [pc, #240]	@ (8007d8c <HAL_DMA_IRQHandler+0xe20>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d03b      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a3b      	ldr	r2, [pc, #236]	@ (8007d90 <HAL_DMA_IRQHandler+0xe24>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d036      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a39      	ldr	r2, [pc, #228]	@ (8007d94 <HAL_DMA_IRQHandler+0xe28>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d031      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a38      	ldr	r2, [pc, #224]	@ (8007d98 <HAL_DMA_IRQHandler+0xe2c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d02c      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a36      	ldr	r2, [pc, #216]	@ (8007d9c <HAL_DMA_IRQHandler+0xe30>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d027      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a35      	ldr	r2, [pc, #212]	@ (8007da0 <HAL_DMA_IRQHandler+0xe34>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d022      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a33      	ldr	r2, [pc, #204]	@ (8007da4 <HAL_DMA_IRQHandler+0xe38>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d01d      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a32      	ldr	r2, [pc, #200]	@ (8007da8 <HAL_DMA_IRQHandler+0xe3c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d018      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a30      	ldr	r2, [pc, #192]	@ (8007dac <HAL_DMA_IRQHandler+0xe40>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d013      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8007db0 <HAL_DMA_IRQHandler+0xe44>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00e      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8007db4 <HAL_DMA_IRQHandler+0xe48>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d009      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a2c      	ldr	r2, [pc, #176]	@ (8007db8 <HAL_DMA_IRQHandler+0xe4c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d004      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xdaa>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a2a      	ldr	r2, [pc, #168]	@ (8007dbc <HAL_DMA_IRQHandler+0xe50>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d108      	bne.n	8007d28 <HAL_DMA_IRQHandler+0xdbc>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 021c 	bic.w	r2, r2, #28
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	e007      	b.n	8007d38 <HAL_DMA_IRQHandler+0xdcc>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 020e 	bic.w	r2, r2, #14
 8007d36:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d3c:	f003 031f 	and.w	r3, r3, #31
 8007d40:	2201      	movs	r2, #1
 8007d42:	409a      	lsls	r2, r3
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d009      	beq.n	8007d7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	4798      	blx	r3
 8007d6e:	e004      	b.n	8007d7a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007d70:	bf00      	nop
 8007d72:	e002      	b.n	8007d7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d74:	bf00      	nop
 8007d76:	e000      	b.n	8007d7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d78:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007d7a:	3728      	adds	r7, #40	@ 0x28
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	40020010 	.word	0x40020010
 8007d84:	40020028 	.word	0x40020028
 8007d88:	40020040 	.word	0x40020040
 8007d8c:	40020058 	.word	0x40020058
 8007d90:	40020070 	.word	0x40020070
 8007d94:	40020088 	.word	0x40020088
 8007d98:	400200a0 	.word	0x400200a0
 8007d9c:	400200b8 	.word	0x400200b8
 8007da0:	40020410 	.word	0x40020410
 8007da4:	40020428 	.word	0x40020428
 8007da8:	40020440 	.word	0x40020440
 8007dac:	40020458 	.word	0x40020458
 8007db0:	40020470 	.word	0x40020470
 8007db4:	40020488 	.word	0x40020488
 8007db8:	400204a0 	.word	0x400204a0
 8007dbc:	400204b8 	.word	0x400204b8

08007dc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a7f      	ldr	r2, [pc, #508]	@ (8007fdc <DMA_SetConfig+0x21c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d072      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a7d      	ldr	r2, [pc, #500]	@ (8007fe0 <DMA_SetConfig+0x220>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d06d      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a7c      	ldr	r2, [pc, #496]	@ (8007fe4 <DMA_SetConfig+0x224>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d068      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a7a      	ldr	r2, [pc, #488]	@ (8007fe8 <DMA_SetConfig+0x228>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d063      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a79      	ldr	r2, [pc, #484]	@ (8007fec <DMA_SetConfig+0x22c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d05e      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a77      	ldr	r2, [pc, #476]	@ (8007ff0 <DMA_SetConfig+0x230>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d059      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a76      	ldr	r2, [pc, #472]	@ (8007ff4 <DMA_SetConfig+0x234>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d054      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a74      	ldr	r2, [pc, #464]	@ (8007ff8 <DMA_SetConfig+0x238>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d04f      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a73      	ldr	r2, [pc, #460]	@ (8007ffc <DMA_SetConfig+0x23c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d04a      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a71      	ldr	r2, [pc, #452]	@ (8008000 <DMA_SetConfig+0x240>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d045      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a70      	ldr	r2, [pc, #448]	@ (8008004 <DMA_SetConfig+0x244>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d040      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8008008 <DMA_SetConfig+0x248>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d03b      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a6d      	ldr	r2, [pc, #436]	@ (800800c <DMA_SetConfig+0x24c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d036      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a6b      	ldr	r2, [pc, #428]	@ (8008010 <DMA_SetConfig+0x250>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d031      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a6a      	ldr	r2, [pc, #424]	@ (8008014 <DMA_SetConfig+0x254>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d02c      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a68      	ldr	r2, [pc, #416]	@ (8008018 <DMA_SetConfig+0x258>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d027      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a67      	ldr	r2, [pc, #412]	@ (800801c <DMA_SetConfig+0x25c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d022      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a65      	ldr	r2, [pc, #404]	@ (8008020 <DMA_SetConfig+0x260>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d01d      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a64      	ldr	r2, [pc, #400]	@ (8008024 <DMA_SetConfig+0x264>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d018      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a62      	ldr	r2, [pc, #392]	@ (8008028 <DMA_SetConfig+0x268>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d013      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a61      	ldr	r2, [pc, #388]	@ (800802c <DMA_SetConfig+0x26c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00e      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a5f      	ldr	r2, [pc, #380]	@ (8008030 <DMA_SetConfig+0x270>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d009      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a5e      	ldr	r2, [pc, #376]	@ (8008034 <DMA_SetConfig+0x274>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d004      	beq.n	8007eca <DMA_SetConfig+0x10a>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a5c      	ldr	r2, [pc, #368]	@ (8008038 <DMA_SetConfig+0x278>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d101      	bne.n	8007ece <DMA_SetConfig+0x10e>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e000      	b.n	8007ed0 <DMA_SetConfig+0x110>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00d      	beq.n	8007ef0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007edc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d004      	beq.n	8007ef0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007eee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a39      	ldr	r2, [pc, #228]	@ (8007fdc <DMA_SetConfig+0x21c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d04a      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a38      	ldr	r2, [pc, #224]	@ (8007fe0 <DMA_SetConfig+0x220>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d045      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a36      	ldr	r2, [pc, #216]	@ (8007fe4 <DMA_SetConfig+0x224>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d040      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a35      	ldr	r2, [pc, #212]	@ (8007fe8 <DMA_SetConfig+0x228>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d03b      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a33      	ldr	r2, [pc, #204]	@ (8007fec <DMA_SetConfig+0x22c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d036      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a32      	ldr	r2, [pc, #200]	@ (8007ff0 <DMA_SetConfig+0x230>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d031      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a30      	ldr	r2, [pc, #192]	@ (8007ff4 <DMA_SetConfig+0x234>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d02c      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8007ff8 <DMA_SetConfig+0x238>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d027      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a2d      	ldr	r2, [pc, #180]	@ (8007ffc <DMA_SetConfig+0x23c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d022      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8008000 <DMA_SetConfig+0x240>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d01d      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a2a      	ldr	r2, [pc, #168]	@ (8008004 <DMA_SetConfig+0x244>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d018      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a29      	ldr	r2, [pc, #164]	@ (8008008 <DMA_SetConfig+0x248>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d013      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a27      	ldr	r2, [pc, #156]	@ (800800c <DMA_SetConfig+0x24c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d00e      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a26      	ldr	r2, [pc, #152]	@ (8008010 <DMA_SetConfig+0x250>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d009      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a24      	ldr	r2, [pc, #144]	@ (8008014 <DMA_SetConfig+0x254>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d004      	beq.n	8007f90 <DMA_SetConfig+0x1d0>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a23      	ldr	r2, [pc, #140]	@ (8008018 <DMA_SetConfig+0x258>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d101      	bne.n	8007f94 <DMA_SetConfig+0x1d4>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <DMA_SetConfig+0x1d6>
 8007f94:	2300      	movs	r3, #0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d059      	beq.n	800804e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f9e:	f003 031f 	and.w	r3, r3, #31
 8007fa2:	223f      	movs	r2, #63	@ 0x3f
 8007fa4:	409a      	lsls	r2, r3
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007fb8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	2b40      	cmp	r3, #64	@ 0x40
 8007fc8:	d138      	bne.n	800803c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007fda:	e086      	b.n	80080ea <DMA_SetConfig+0x32a>
 8007fdc:	40020010 	.word	0x40020010
 8007fe0:	40020028 	.word	0x40020028
 8007fe4:	40020040 	.word	0x40020040
 8007fe8:	40020058 	.word	0x40020058
 8007fec:	40020070 	.word	0x40020070
 8007ff0:	40020088 	.word	0x40020088
 8007ff4:	400200a0 	.word	0x400200a0
 8007ff8:	400200b8 	.word	0x400200b8
 8007ffc:	40020410 	.word	0x40020410
 8008000:	40020428 	.word	0x40020428
 8008004:	40020440 	.word	0x40020440
 8008008:	40020458 	.word	0x40020458
 800800c:	40020470 	.word	0x40020470
 8008010:	40020488 	.word	0x40020488
 8008014:	400204a0 	.word	0x400204a0
 8008018:	400204b8 	.word	0x400204b8
 800801c:	58025408 	.word	0x58025408
 8008020:	5802541c 	.word	0x5802541c
 8008024:	58025430 	.word	0x58025430
 8008028:	58025444 	.word	0x58025444
 800802c:	58025458 	.word	0x58025458
 8008030:	5802546c 	.word	0x5802546c
 8008034:	58025480 	.word	0x58025480
 8008038:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	60da      	str	r2, [r3, #12]
}
 800804c:	e04d      	b.n	80080ea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a29      	ldr	r2, [pc, #164]	@ (80080f8 <DMA_SetConfig+0x338>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d022      	beq.n	800809e <DMA_SetConfig+0x2de>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a27      	ldr	r2, [pc, #156]	@ (80080fc <DMA_SetConfig+0x33c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d01d      	beq.n	800809e <DMA_SetConfig+0x2de>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a26      	ldr	r2, [pc, #152]	@ (8008100 <DMA_SetConfig+0x340>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d018      	beq.n	800809e <DMA_SetConfig+0x2de>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a24      	ldr	r2, [pc, #144]	@ (8008104 <DMA_SetConfig+0x344>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d013      	beq.n	800809e <DMA_SetConfig+0x2de>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a23      	ldr	r2, [pc, #140]	@ (8008108 <DMA_SetConfig+0x348>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00e      	beq.n	800809e <DMA_SetConfig+0x2de>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a21      	ldr	r2, [pc, #132]	@ (800810c <DMA_SetConfig+0x34c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d009      	beq.n	800809e <DMA_SetConfig+0x2de>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a20      	ldr	r2, [pc, #128]	@ (8008110 <DMA_SetConfig+0x350>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d004      	beq.n	800809e <DMA_SetConfig+0x2de>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a1e      	ldr	r2, [pc, #120]	@ (8008114 <DMA_SetConfig+0x354>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d101      	bne.n	80080a2 <DMA_SetConfig+0x2e2>
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <DMA_SetConfig+0x2e4>
 80080a2:	2300      	movs	r3, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d020      	beq.n	80080ea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080ac:	f003 031f 	and.w	r3, r3, #31
 80080b0:	2201      	movs	r2, #1
 80080b2:	409a      	lsls	r2, r3
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	2b40      	cmp	r3, #64	@ 0x40
 80080c6:	d108      	bne.n	80080da <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	60da      	str	r2, [r3, #12]
}
 80080d8:	e007      	b.n	80080ea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	60da      	str	r2, [r3, #12]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	58025408 	.word	0x58025408
 80080fc:	5802541c 	.word	0x5802541c
 8008100:	58025430 	.word	0x58025430
 8008104:	58025444 	.word	0x58025444
 8008108:	58025458 	.word	0x58025458
 800810c:	5802546c 	.word	0x5802546c
 8008110:	58025480 	.word	0x58025480
 8008114:	58025494 	.word	0x58025494

08008118 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a42      	ldr	r2, [pc, #264]	@ (8008230 <DMA_CalcBaseAndBitshift+0x118>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d04a      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a41      	ldr	r2, [pc, #260]	@ (8008234 <DMA_CalcBaseAndBitshift+0x11c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d045      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a3f      	ldr	r2, [pc, #252]	@ (8008238 <DMA_CalcBaseAndBitshift+0x120>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d040      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a3e      	ldr	r2, [pc, #248]	@ (800823c <DMA_CalcBaseAndBitshift+0x124>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d03b      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a3c      	ldr	r2, [pc, #240]	@ (8008240 <DMA_CalcBaseAndBitshift+0x128>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d036      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a3b      	ldr	r2, [pc, #236]	@ (8008244 <DMA_CalcBaseAndBitshift+0x12c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d031      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a39      	ldr	r2, [pc, #228]	@ (8008248 <DMA_CalcBaseAndBitshift+0x130>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d02c      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a38      	ldr	r2, [pc, #224]	@ (800824c <DMA_CalcBaseAndBitshift+0x134>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d027      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a36      	ldr	r2, [pc, #216]	@ (8008250 <DMA_CalcBaseAndBitshift+0x138>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d022      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a35      	ldr	r2, [pc, #212]	@ (8008254 <DMA_CalcBaseAndBitshift+0x13c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d01d      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a33      	ldr	r2, [pc, #204]	@ (8008258 <DMA_CalcBaseAndBitshift+0x140>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d018      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a32      	ldr	r2, [pc, #200]	@ (800825c <DMA_CalcBaseAndBitshift+0x144>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d013      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a30      	ldr	r2, [pc, #192]	@ (8008260 <DMA_CalcBaseAndBitshift+0x148>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00e      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008264 <DMA_CalcBaseAndBitshift+0x14c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d009      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008268 <DMA_CalcBaseAndBitshift+0x150>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d004      	beq.n	80081c0 <DMA_CalcBaseAndBitshift+0xa8>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a2c      	ldr	r2, [pc, #176]	@ (800826c <DMA_CalcBaseAndBitshift+0x154>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d101      	bne.n	80081c4 <DMA_CalcBaseAndBitshift+0xac>
 80081c0:	2301      	movs	r3, #1
 80081c2:	e000      	b.n	80081c6 <DMA_CalcBaseAndBitshift+0xae>
 80081c4:	2300      	movs	r3, #0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d024      	beq.n	8008214 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	3b10      	subs	r3, #16
 80081d2:	4a27      	ldr	r2, [pc, #156]	@ (8008270 <DMA_CalcBaseAndBitshift+0x158>)
 80081d4:	fba2 2303 	umull	r2, r3, r2, r3
 80081d8:	091b      	lsrs	r3, r3, #4
 80081da:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f003 0307 	and.w	r3, r3, #7
 80081e2:	4a24      	ldr	r2, [pc, #144]	@ (8008274 <DMA_CalcBaseAndBitshift+0x15c>)
 80081e4:	5cd3      	ldrb	r3, [r2, r3]
 80081e6:	461a      	mov	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d908      	bls.n	8008204 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	4b1f      	ldr	r3, [pc, #124]	@ (8008278 <DMA_CalcBaseAndBitshift+0x160>)
 80081fa:	4013      	ands	r3, r2
 80081fc:	1d1a      	adds	r2, r3, #4
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	659a      	str	r2, [r3, #88]	@ 0x58
 8008202:	e00d      	b.n	8008220 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	4b1b      	ldr	r3, [pc, #108]	@ (8008278 <DMA_CalcBaseAndBitshift+0x160>)
 800820c:	4013      	ands	r3, r2
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6593      	str	r3, [r2, #88]	@ 0x58
 8008212:	e005      	b.n	8008220 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	40020010 	.word	0x40020010
 8008234:	40020028 	.word	0x40020028
 8008238:	40020040 	.word	0x40020040
 800823c:	40020058 	.word	0x40020058
 8008240:	40020070 	.word	0x40020070
 8008244:	40020088 	.word	0x40020088
 8008248:	400200a0 	.word	0x400200a0
 800824c:	400200b8 	.word	0x400200b8
 8008250:	40020410 	.word	0x40020410
 8008254:	40020428 	.word	0x40020428
 8008258:	40020440 	.word	0x40020440
 800825c:	40020458 	.word	0x40020458
 8008260:	40020470 	.word	0x40020470
 8008264:	40020488 	.word	0x40020488
 8008268:	400204a0 	.word	0x400204a0
 800826c:	400204b8 	.word	0x400204b8
 8008270:	aaaaaaab 	.word	0xaaaaaaab
 8008274:	08014b10 	.word	0x08014b10
 8008278:	fffffc00 	.word	0xfffffc00

0800827c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d120      	bne.n	80082d2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	2b03      	cmp	r3, #3
 8008296:	d858      	bhi.n	800834a <DMA_CheckFifoParam+0xce>
 8008298:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <DMA_CheckFifoParam+0x24>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	080082b1 	.word	0x080082b1
 80082a4:	080082c3 	.word	0x080082c3
 80082a8:	080082b1 	.word	0x080082b1
 80082ac:	0800834b 	.word	0x0800834b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d048      	beq.n	800834e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082c0:	e045      	b.n	800834e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80082ca:	d142      	bne.n	8008352 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082d0:	e03f      	b.n	8008352 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082da:	d123      	bne.n	8008324 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d838      	bhi.n	8008356 <DMA_CheckFifoParam+0xda>
 80082e4:	a201      	add	r2, pc, #4	@ (adr r2, 80082ec <DMA_CheckFifoParam+0x70>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	080082fd 	.word	0x080082fd
 80082f0:	08008303 	.word	0x08008303
 80082f4:	080082fd 	.word	0x080082fd
 80082f8:	08008315 	.word	0x08008315
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	73fb      	strb	r3, [r7, #15]
        break;
 8008300:	e030      	b.n	8008364 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008306:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d025      	beq.n	800835a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008312:	e022      	b.n	800835a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008318:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800831c:	d11f      	bne.n	800835e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008322:	e01c      	b.n	800835e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008328:	2b02      	cmp	r3, #2
 800832a:	d902      	bls.n	8008332 <DMA_CheckFifoParam+0xb6>
 800832c:	2b03      	cmp	r3, #3
 800832e:	d003      	beq.n	8008338 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008330:	e018      	b.n	8008364 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	73fb      	strb	r3, [r7, #15]
        break;
 8008336:	e015      	b.n	8008364 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00e      	beq.n	8008362 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
    break;
 8008348:	e00b      	b.n	8008362 <DMA_CheckFifoParam+0xe6>
        break;
 800834a:	bf00      	nop
 800834c:	e00a      	b.n	8008364 <DMA_CheckFifoParam+0xe8>
        break;
 800834e:	bf00      	nop
 8008350:	e008      	b.n	8008364 <DMA_CheckFifoParam+0xe8>
        break;
 8008352:	bf00      	nop
 8008354:	e006      	b.n	8008364 <DMA_CheckFifoParam+0xe8>
        break;
 8008356:	bf00      	nop
 8008358:	e004      	b.n	8008364 <DMA_CheckFifoParam+0xe8>
        break;
 800835a:	bf00      	nop
 800835c:	e002      	b.n	8008364 <DMA_CheckFifoParam+0xe8>
        break;
 800835e:	bf00      	nop
 8008360:	e000      	b.n	8008364 <DMA_CheckFifoParam+0xe8>
    break;
 8008362:	bf00      	nop
    }
  }

  return status;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop

08008374 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a38      	ldr	r2, [pc, #224]	@ (8008468 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d022      	beq.n	80083d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a36      	ldr	r2, [pc, #216]	@ (800846c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d01d      	beq.n	80083d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a35      	ldr	r2, [pc, #212]	@ (8008470 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d018      	beq.n	80083d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a33      	ldr	r2, [pc, #204]	@ (8008474 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d013      	beq.n	80083d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a32      	ldr	r2, [pc, #200]	@ (8008478 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00e      	beq.n	80083d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a30      	ldr	r2, [pc, #192]	@ (800847c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d009      	beq.n	80083d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a2f      	ldr	r2, [pc, #188]	@ (8008480 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d004      	beq.n	80083d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a2d      	ldr	r2, [pc, #180]	@ (8008484 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d101      	bne.n	80083d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e000      	b.n	80083d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80083d6:	2300      	movs	r3, #0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d01a      	beq.n	8008412 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	3b08      	subs	r3, #8
 80083e4:	4a28      	ldr	r2, [pc, #160]	@ (8008488 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80083e6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ea:	091b      	lsrs	r3, r3, #4
 80083ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	4b26      	ldr	r3, [pc, #152]	@ (800848c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	461a      	mov	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a24      	ldr	r2, [pc, #144]	@ (8008490 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008400:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f003 031f 	and.w	r3, r3, #31
 8008408:	2201      	movs	r2, #1
 800840a:	409a      	lsls	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008410:	e024      	b.n	800845c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	b2db      	uxtb	r3, r3
 8008418:	3b10      	subs	r3, #16
 800841a:	4a1e      	ldr	r2, [pc, #120]	@ (8008494 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800841c:	fba2 2303 	umull	r2, r3, r2, r3
 8008420:	091b      	lsrs	r3, r3, #4
 8008422:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	4a1c      	ldr	r2, [pc, #112]	@ (8008498 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d806      	bhi.n	800843a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	4a1b      	ldr	r2, [pc, #108]	@ (800849c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d902      	bls.n	800843a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3308      	adds	r3, #8
 8008438:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4b18      	ldr	r3, [pc, #96]	@ (80084a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a16      	ldr	r2, [pc, #88]	@ (80084a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800844c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f003 031f 	and.w	r3, r3, #31
 8008454:	2201      	movs	r2, #1
 8008456:	409a      	lsls	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800845c:	bf00      	nop
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	58025408 	.word	0x58025408
 800846c:	5802541c 	.word	0x5802541c
 8008470:	58025430 	.word	0x58025430
 8008474:	58025444 	.word	0x58025444
 8008478:	58025458 	.word	0x58025458
 800847c:	5802546c 	.word	0x5802546c
 8008480:	58025480 	.word	0x58025480
 8008484:	58025494 	.word	0x58025494
 8008488:	cccccccd 	.word	0xcccccccd
 800848c:	16009600 	.word	0x16009600
 8008490:	58025880 	.word	0x58025880
 8008494:	aaaaaaab 	.word	0xaaaaaaab
 8008498:	400204b8 	.word	0x400204b8
 800849c:	4002040f 	.word	0x4002040f
 80084a0:	10008200 	.word	0x10008200
 80084a4:	40020880 	.word	0x40020880

080084a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d04a      	beq.n	8008554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d847      	bhi.n	8008554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a25      	ldr	r2, [pc, #148]	@ (8008560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d022      	beq.n	8008514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a24      	ldr	r2, [pc, #144]	@ (8008564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d01d      	beq.n	8008514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a22      	ldr	r2, [pc, #136]	@ (8008568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d018      	beq.n	8008514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a21      	ldr	r2, [pc, #132]	@ (800856c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d013      	beq.n	8008514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00e      	beq.n	8008514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d009      	beq.n	8008514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a1c      	ldr	r2, [pc, #112]	@ (8008578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d004      	beq.n	8008514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a1b      	ldr	r2, [pc, #108]	@ (800857c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d101      	bne.n	8008518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008514:	2301      	movs	r3, #1
 8008516:	e000      	b.n	800851a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008518:	2300      	movs	r3, #0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4b17      	ldr	r3, [pc, #92]	@ (8008580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008522:	4413      	add	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	461a      	mov	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a15      	ldr	r2, [pc, #84]	@ (8008584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008530:	671a      	str	r2, [r3, #112]	@ 0x70
 8008532:	e009      	b.n	8008548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	4b14      	ldr	r3, [pc, #80]	@ (8008588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	461a      	mov	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a11      	ldr	r2, [pc, #68]	@ (800858c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008546:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3b01      	subs	r3, #1
 800854c:	2201      	movs	r2, #1
 800854e:	409a      	lsls	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008554:	bf00      	nop
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	58025408 	.word	0x58025408
 8008564:	5802541c 	.word	0x5802541c
 8008568:	58025430 	.word	0x58025430
 800856c:	58025444 	.word	0x58025444
 8008570:	58025458 	.word	0x58025458
 8008574:	5802546c 	.word	0x5802546c
 8008578:	58025480 	.word	0x58025480
 800857c:	58025494 	.word	0x58025494
 8008580:	1600963f 	.word	0x1600963f
 8008584:	58025940 	.word	0x58025940
 8008588:	1000823f 	.word	0x1000823f
 800858c:	40020940 	.word	0x40020940

08008590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008590:	b480      	push	{r7}
 8008592:	b089      	sub	sp, #36	@ 0x24
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800859e:	4b89      	ldr	r3, [pc, #548]	@ (80087c4 <HAL_GPIO_Init+0x234>)
 80085a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80085a2:	e194      	b.n	80088ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	2101      	movs	r1, #1
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	fa01 f303 	lsl.w	r3, r1, r3
 80085b0:	4013      	ands	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 8186 	beq.w	80088c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f003 0303 	and.w	r3, r3, #3
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d005      	beq.n	80085d4 <HAL_GPIO_Init+0x44>
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f003 0303 	and.w	r3, r3, #3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d130      	bne.n	8008636 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	005b      	lsls	r3, r3, #1
 80085de:	2203      	movs	r2, #3
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	43db      	mvns	r3, r3
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	4013      	ands	r3, r2
 80085ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	005b      	lsls	r3, r3, #1
 80085f4:	fa02 f303 	lsl.w	r3, r2, r3
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	69ba      	ldr	r2, [r7, #24]
 8008602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800860a:	2201      	movs	r2, #1
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	fa02 f303 	lsl.w	r3, r2, r3
 8008612:	43db      	mvns	r3, r3
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	4013      	ands	r3, r2
 8008618:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	091b      	lsrs	r3, r3, #4
 8008620:	f003 0201 	and.w	r2, r3, #1
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	fa02 f303 	lsl.w	r3, r2, r3
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	4313      	orrs	r3, r2
 800862e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	69ba      	ldr	r2, [r7, #24]
 8008634:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f003 0303 	and.w	r3, r3, #3
 800863e:	2b03      	cmp	r3, #3
 8008640:	d017      	beq.n	8008672 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	2203      	movs	r2, #3
 800864e:	fa02 f303 	lsl.w	r3, r2, r3
 8008652:	43db      	mvns	r3, r3
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	4013      	ands	r3, r2
 8008658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	689a      	ldr	r2, [r3, #8]
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	fa02 f303 	lsl.w	r3, r2, r3
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	4313      	orrs	r3, r2
 800866a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f003 0303 	and.w	r3, r3, #3
 800867a:	2b02      	cmp	r3, #2
 800867c:	d123      	bne.n	80086c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	08da      	lsrs	r2, r3, #3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	3208      	adds	r2, #8
 8008686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	220f      	movs	r2, #15
 8008696:	fa02 f303 	lsl.w	r3, r2, r3
 800869a:	43db      	mvns	r3, r3
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	4013      	ands	r3, r2
 80086a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	691a      	ldr	r2, [r3, #16]
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	f003 0307 	and.w	r3, r3, #7
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	fa02 f303 	lsl.w	r3, r2, r3
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	08da      	lsrs	r2, r3, #3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3208      	adds	r2, #8
 80086c0:	69b9      	ldr	r1, [r7, #24]
 80086c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	005b      	lsls	r3, r3, #1
 80086d0:	2203      	movs	r2, #3
 80086d2:	fa02 f303 	lsl.w	r3, r2, r3
 80086d6:	43db      	mvns	r3, r3
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	4013      	ands	r3, r2
 80086dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f003 0203 	and.w	r2, r3, #3
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	fa02 f303 	lsl.w	r3, r2, r3
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 80e0 	beq.w	80088c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008708:	4b2f      	ldr	r3, [pc, #188]	@ (80087c8 <HAL_GPIO_Init+0x238>)
 800870a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800870e:	4a2e      	ldr	r2, [pc, #184]	@ (80087c8 <HAL_GPIO_Init+0x238>)
 8008710:	f043 0302 	orr.w	r3, r3, #2
 8008714:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008718:	4b2b      	ldr	r3, [pc, #172]	@ (80087c8 <HAL_GPIO_Init+0x238>)
 800871a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	60fb      	str	r3, [r7, #12]
 8008724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008726:	4a29      	ldr	r2, [pc, #164]	@ (80087cc <HAL_GPIO_Init+0x23c>)
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	089b      	lsrs	r3, r3, #2
 800872c:	3302      	adds	r3, #2
 800872e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	220f      	movs	r2, #15
 800873e:	fa02 f303 	lsl.w	r3, r2, r3
 8008742:	43db      	mvns	r3, r3
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	4013      	ands	r3, r2
 8008748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a20      	ldr	r2, [pc, #128]	@ (80087d0 <HAL_GPIO_Init+0x240>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d052      	beq.n	80087f8 <HAL_GPIO_Init+0x268>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a1f      	ldr	r2, [pc, #124]	@ (80087d4 <HAL_GPIO_Init+0x244>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d031      	beq.n	80087be <HAL_GPIO_Init+0x22e>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a1e      	ldr	r2, [pc, #120]	@ (80087d8 <HAL_GPIO_Init+0x248>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d02b      	beq.n	80087ba <HAL_GPIO_Init+0x22a>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a1d      	ldr	r2, [pc, #116]	@ (80087dc <HAL_GPIO_Init+0x24c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d025      	beq.n	80087b6 <HAL_GPIO_Init+0x226>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a1c      	ldr	r2, [pc, #112]	@ (80087e0 <HAL_GPIO_Init+0x250>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d01f      	beq.n	80087b2 <HAL_GPIO_Init+0x222>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a1b      	ldr	r2, [pc, #108]	@ (80087e4 <HAL_GPIO_Init+0x254>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d019      	beq.n	80087ae <HAL_GPIO_Init+0x21e>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a1a      	ldr	r2, [pc, #104]	@ (80087e8 <HAL_GPIO_Init+0x258>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d013      	beq.n	80087aa <HAL_GPIO_Init+0x21a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a19      	ldr	r2, [pc, #100]	@ (80087ec <HAL_GPIO_Init+0x25c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00d      	beq.n	80087a6 <HAL_GPIO_Init+0x216>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a18      	ldr	r2, [pc, #96]	@ (80087f0 <HAL_GPIO_Init+0x260>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d007      	beq.n	80087a2 <HAL_GPIO_Init+0x212>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a17      	ldr	r2, [pc, #92]	@ (80087f4 <HAL_GPIO_Init+0x264>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d101      	bne.n	800879e <HAL_GPIO_Init+0x20e>
 800879a:	2309      	movs	r3, #9
 800879c:	e02d      	b.n	80087fa <HAL_GPIO_Init+0x26a>
 800879e:	230a      	movs	r3, #10
 80087a0:	e02b      	b.n	80087fa <HAL_GPIO_Init+0x26a>
 80087a2:	2308      	movs	r3, #8
 80087a4:	e029      	b.n	80087fa <HAL_GPIO_Init+0x26a>
 80087a6:	2307      	movs	r3, #7
 80087a8:	e027      	b.n	80087fa <HAL_GPIO_Init+0x26a>
 80087aa:	2306      	movs	r3, #6
 80087ac:	e025      	b.n	80087fa <HAL_GPIO_Init+0x26a>
 80087ae:	2305      	movs	r3, #5
 80087b0:	e023      	b.n	80087fa <HAL_GPIO_Init+0x26a>
 80087b2:	2304      	movs	r3, #4
 80087b4:	e021      	b.n	80087fa <HAL_GPIO_Init+0x26a>
 80087b6:	2303      	movs	r3, #3
 80087b8:	e01f      	b.n	80087fa <HAL_GPIO_Init+0x26a>
 80087ba:	2302      	movs	r3, #2
 80087bc:	e01d      	b.n	80087fa <HAL_GPIO_Init+0x26a>
 80087be:	2301      	movs	r3, #1
 80087c0:	e01b      	b.n	80087fa <HAL_GPIO_Init+0x26a>
 80087c2:	bf00      	nop
 80087c4:	58000080 	.word	0x58000080
 80087c8:	58024400 	.word	0x58024400
 80087cc:	58000400 	.word	0x58000400
 80087d0:	58020000 	.word	0x58020000
 80087d4:	58020400 	.word	0x58020400
 80087d8:	58020800 	.word	0x58020800
 80087dc:	58020c00 	.word	0x58020c00
 80087e0:	58021000 	.word	0x58021000
 80087e4:	58021400 	.word	0x58021400
 80087e8:	58021800 	.word	0x58021800
 80087ec:	58021c00 	.word	0x58021c00
 80087f0:	58022000 	.word	0x58022000
 80087f4:	58022400 	.word	0x58022400
 80087f8:	2300      	movs	r3, #0
 80087fa:	69fa      	ldr	r2, [r7, #28]
 80087fc:	f002 0203 	and.w	r2, r2, #3
 8008800:	0092      	lsls	r2, r2, #2
 8008802:	4093      	lsls	r3, r2
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	4313      	orrs	r3, r2
 8008808:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800880a:	4938      	ldr	r1, [pc, #224]	@ (80088ec <HAL_GPIO_Init+0x35c>)
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	089b      	lsrs	r3, r3, #2
 8008810:	3302      	adds	r3, #2
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	43db      	mvns	r3, r3
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	4013      	ands	r3, r2
 8008828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d003      	beq.n	800883e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	4313      	orrs	r3, r2
 800883c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800883e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	43db      	mvns	r3, r3
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	4013      	ands	r3, r2
 8008856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800886c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	43db      	mvns	r3, r3
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	4013      	ands	r3, r2
 8008882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	43db      	mvns	r3, r3
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	4013      	ands	r3, r2
 80088ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	4313      	orrs	r3, r2
 80088c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	3301      	adds	r3, #1
 80088cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	fa22 f303 	lsr.w	r3, r2, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f47f ae63 	bne.w	80085a4 <HAL_GPIO_Init+0x14>
  }
}
 80088de:	bf00      	nop
 80088e0:	bf00      	nop
 80088e2:	3724      	adds	r7, #36	@ 0x24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	58000400 	.word	0x58000400

080088f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80088fe:	4b75      	ldr	r3, [pc, #468]	@ (8008ad4 <HAL_GPIO_DeInit+0x1e4>)
 8008900:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008902:	e0d9      	b.n	8008ab8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008904:	2201      	movs	r2, #1
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	fa02 f303 	lsl.w	r3, r2, r3
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	4013      	ands	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 80cc 	beq.w	8008ab2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800891a:	4a6f      	ldr	r2, [pc, #444]	@ (8008ad8 <HAL_GPIO_DeInit+0x1e8>)
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	089b      	lsrs	r3, r3, #2
 8008920:	3302      	adds	r3, #2
 8008922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008926:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f003 0303 	and.w	r3, r3, #3
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	220f      	movs	r2, #15
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	4013      	ands	r3, r2
 800893a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a67      	ldr	r2, [pc, #412]	@ (8008adc <HAL_GPIO_DeInit+0x1ec>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d037      	beq.n	80089b4 <HAL_GPIO_DeInit+0xc4>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a66      	ldr	r2, [pc, #408]	@ (8008ae0 <HAL_GPIO_DeInit+0x1f0>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d031      	beq.n	80089b0 <HAL_GPIO_DeInit+0xc0>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a65      	ldr	r2, [pc, #404]	@ (8008ae4 <HAL_GPIO_DeInit+0x1f4>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d02b      	beq.n	80089ac <HAL_GPIO_DeInit+0xbc>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a64      	ldr	r2, [pc, #400]	@ (8008ae8 <HAL_GPIO_DeInit+0x1f8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d025      	beq.n	80089a8 <HAL_GPIO_DeInit+0xb8>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a63      	ldr	r2, [pc, #396]	@ (8008aec <HAL_GPIO_DeInit+0x1fc>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d01f      	beq.n	80089a4 <HAL_GPIO_DeInit+0xb4>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a62      	ldr	r2, [pc, #392]	@ (8008af0 <HAL_GPIO_DeInit+0x200>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d019      	beq.n	80089a0 <HAL_GPIO_DeInit+0xb0>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a61      	ldr	r2, [pc, #388]	@ (8008af4 <HAL_GPIO_DeInit+0x204>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d013      	beq.n	800899c <HAL_GPIO_DeInit+0xac>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a60      	ldr	r2, [pc, #384]	@ (8008af8 <HAL_GPIO_DeInit+0x208>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d00d      	beq.n	8008998 <HAL_GPIO_DeInit+0xa8>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a5f      	ldr	r2, [pc, #380]	@ (8008afc <HAL_GPIO_DeInit+0x20c>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d007      	beq.n	8008994 <HAL_GPIO_DeInit+0xa4>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a5e      	ldr	r2, [pc, #376]	@ (8008b00 <HAL_GPIO_DeInit+0x210>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d101      	bne.n	8008990 <HAL_GPIO_DeInit+0xa0>
 800898c:	2309      	movs	r3, #9
 800898e:	e012      	b.n	80089b6 <HAL_GPIO_DeInit+0xc6>
 8008990:	230a      	movs	r3, #10
 8008992:	e010      	b.n	80089b6 <HAL_GPIO_DeInit+0xc6>
 8008994:	2308      	movs	r3, #8
 8008996:	e00e      	b.n	80089b6 <HAL_GPIO_DeInit+0xc6>
 8008998:	2307      	movs	r3, #7
 800899a:	e00c      	b.n	80089b6 <HAL_GPIO_DeInit+0xc6>
 800899c:	2306      	movs	r3, #6
 800899e:	e00a      	b.n	80089b6 <HAL_GPIO_DeInit+0xc6>
 80089a0:	2305      	movs	r3, #5
 80089a2:	e008      	b.n	80089b6 <HAL_GPIO_DeInit+0xc6>
 80089a4:	2304      	movs	r3, #4
 80089a6:	e006      	b.n	80089b6 <HAL_GPIO_DeInit+0xc6>
 80089a8:	2303      	movs	r3, #3
 80089aa:	e004      	b.n	80089b6 <HAL_GPIO_DeInit+0xc6>
 80089ac:	2302      	movs	r3, #2
 80089ae:	e002      	b.n	80089b6 <HAL_GPIO_DeInit+0xc6>
 80089b0:	2301      	movs	r3, #1
 80089b2:	e000      	b.n	80089b6 <HAL_GPIO_DeInit+0xc6>
 80089b4:	2300      	movs	r3, #0
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	f002 0203 	and.w	r2, r2, #3
 80089bc:	0092      	lsls	r2, r2, #2
 80089be:	4093      	lsls	r3, r2
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d136      	bne.n	8008a34 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	43db      	mvns	r3, r3
 80089ce:	401a      	ands	r2, r3
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	43db      	mvns	r3, r3
 80089dc:	401a      	ands	r2, r3
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80089e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	43db      	mvns	r3, r3
 80089ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80089f0:	4013      	ands	r3, r2
 80089f2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80089f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	43db      	mvns	r3, r3
 80089fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008a02:	4013      	ands	r3, r2
 8008a04:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f003 0303 	and.w	r3, r3, #3
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	220f      	movs	r2, #15
 8008a10:	fa02 f303 	lsl.w	r3, r2, r3
 8008a14:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008a16:	4a30      	ldr	r2, [pc, #192]	@ (8008ad8 <HAL_GPIO_DeInit+0x1e8>)
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	089b      	lsrs	r3, r3, #2
 8008a1c:	3302      	adds	r3, #2
 8008a1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	43da      	mvns	r2, r3
 8008a26:	482c      	ldr	r0, [pc, #176]	@ (8008ad8 <HAL_GPIO_DeInit+0x1e8>)
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	089b      	lsrs	r3, r3, #2
 8008a2c:	400a      	ands	r2, r1
 8008a2e:	3302      	adds	r3, #2
 8008a30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	2103      	movs	r1, #3
 8008a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a42:	431a      	orrs	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	08da      	lsrs	r2, r3, #3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3208      	adds	r2, #8
 8008a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	220f      	movs	r2, #15
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	43db      	mvns	r3, r3
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	08d2      	lsrs	r2, r2, #3
 8008a68:	4019      	ands	r1, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3208      	adds	r2, #8
 8008a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	005b      	lsls	r3, r3, #1
 8008a7a:	2103      	movs	r1, #3
 8008a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a80:	43db      	mvns	r3, r3
 8008a82:	401a      	ands	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	fa01 f303 	lsl.w	r3, r1, r3
 8008a94:	43db      	mvns	r3, r3
 8008a96:	401a      	ands	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689a      	ldr	r2, [r3, #8]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	2103      	movs	r1, #3
 8008aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8008aaa:	43db      	mvns	r3, r3
 8008aac:	401a      	ands	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f47f af1f 	bne.w	8008904 <HAL_GPIO_DeInit+0x14>
  }
}
 8008ac6:	bf00      	nop
 8008ac8:	bf00      	nop
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	58000080 	.word	0x58000080
 8008ad8:	58000400 	.word	0x58000400
 8008adc:	58020000 	.word	0x58020000
 8008ae0:	58020400 	.word	0x58020400
 8008ae4:	58020800 	.word	0x58020800
 8008ae8:	58020c00 	.word	0x58020c00
 8008aec:	58021000 	.word	0x58021000
 8008af0:	58021400 	.word	0x58021400
 8008af4:	58021800 	.word	0x58021800
 8008af8:	58021c00 	.word	0x58021c00
 8008afc:	58022000 	.word	0x58022000
 8008b00:	58022400 	.word	0x58022400

08008b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	807b      	strh	r3, [r7, #2]
 8008b10:	4613      	mov	r3, r2
 8008b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b14:	787b      	ldrb	r3, [r7, #1]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b1a:	887a      	ldrh	r2, [r7, #2]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008b20:	e003      	b.n	8008b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008b22:	887b      	ldrh	r3, [r7, #2]
 8008b24:	041a      	lsls	r2, r3, #16
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	619a      	str	r2, [r3, #24]
}
 8008b2a:	bf00      	nop
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
	...

08008b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e07f      	b.n	8008c4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7f8 fd24 	bl	80015ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2224      	movs	r2, #36	@ 0x24
 8008b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0201 	bic.w	r2, r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008b88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d107      	bne.n	8008bb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bae:	609a      	str	r2, [r3, #8]
 8008bb0:	e006      	b.n	8008bc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008bbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d104      	bne.n	8008bd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6859      	ldr	r1, [r3, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c54 <HAL_I2C_Init+0x11c>)
 8008bde:	430b      	orrs	r3, r1
 8008be0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008bf0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	691a      	ldr	r2, [r3, #16]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	69d9      	ldr	r1, [r3, #28]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a1a      	ldr	r2, [r3, #32]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f042 0201 	orr.w	r2, r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	02008000 	.word	0x02008000

08008c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d138      	bne.n	8008ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e032      	b.n	8008ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2224      	movs	r2, #36	@ 0x24
 8008c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6819      	ldr	r1, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f042 0201 	orr.w	r2, r2, #1
 8008cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	e000      	b.n	8008ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ce0:	2302      	movs	r3, #2
  }
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b085      	sub	sp, #20
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	d139      	bne.n	8008d78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d101      	bne.n	8008d12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d0e:	2302      	movs	r3, #2
 8008d10:	e033      	b.n	8008d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2224      	movs	r2, #36	@ 0x24
 8008d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0201 	bic.w	r2, r2, #1
 8008d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008d40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	021b      	lsls	r3, r3, #8
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0201 	orr.w	r2, r2, #1
 8008d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	e000      	b.n	8008d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d78:	2302      	movs	r3, #2
  }
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
	...

08008d88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d90:	4b19      	ldr	r3, [pc, #100]	@ (8008df8 <HAL_PWREx_ConfigSupply+0x70>)
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b04      	cmp	r3, #4
 8008d9a:	d00a      	beq.n	8008db2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d9c:	4b16      	ldr	r3, [pc, #88]	@ (8008df8 <HAL_PWREx_ConfigSupply+0x70>)
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f003 0307 	and.w	r3, r3, #7
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d001      	beq.n	8008dae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e01f      	b.n	8008dee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	e01d      	b.n	8008dee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008db2:	4b11      	ldr	r3, [pc, #68]	@ (8008df8 <HAL_PWREx_ConfigSupply+0x70>)
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f023 0207 	bic.w	r2, r3, #7
 8008dba:	490f      	ldr	r1, [pc, #60]	@ (8008df8 <HAL_PWREx_ConfigSupply+0x70>)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008dc2:	f7fa f8f3 	bl	8002fac <HAL_GetTick>
 8008dc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dc8:	e009      	b.n	8008dde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008dca:	f7fa f8ef 	bl	8002fac <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008dd8:	d901      	bls.n	8008dde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e007      	b.n	8008dee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dde:	4b06      	ldr	r3, [pc, #24]	@ (8008df8 <HAL_PWREx_ConfigSupply+0x70>)
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dea:	d1ee      	bne.n	8008dca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	58024800 	.word	0x58024800

08008dfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08c      	sub	sp, #48	@ 0x30
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d102      	bne.n	8008e10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	f000 bc48 	b.w	80096a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0301 	and.w	r3, r3, #1
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 808c 	beq.w	8008f36 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e1e:	4b96      	ldr	r3, [pc, #600]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e28:	4b93      	ldr	r3, [pc, #588]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e30:	2b10      	cmp	r3, #16
 8008e32:	d007      	beq.n	8008e44 <HAL_RCC_OscConfig+0x48>
 8008e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e36:	2b18      	cmp	r3, #24
 8008e38:	d111      	bne.n	8008e5e <HAL_RCC_OscConfig+0x62>
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	f003 0303 	and.w	r3, r3, #3
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d10c      	bne.n	8008e5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e44:	4b8c      	ldr	r3, [pc, #560]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d071      	beq.n	8008f34 <HAL_RCC_OscConfig+0x138>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d16d      	bne.n	8008f34 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	f000 bc21 	b.w	80096a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e66:	d106      	bne.n	8008e76 <HAL_RCC_OscConfig+0x7a>
 8008e68:	4b83      	ldr	r3, [pc, #524]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a82      	ldr	r2, [pc, #520]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008e6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	e02e      	b.n	8008ed4 <HAL_RCC_OscConfig+0xd8>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10c      	bne.n	8008e98 <HAL_RCC_OscConfig+0x9c>
 8008e7e:	4b7e      	ldr	r3, [pc, #504]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a7d      	ldr	r2, [pc, #500]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008e84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	4b7b      	ldr	r3, [pc, #492]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a7a      	ldr	r2, [pc, #488]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008e90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	e01d      	b.n	8008ed4 <HAL_RCC_OscConfig+0xd8>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ea0:	d10c      	bne.n	8008ebc <HAL_RCC_OscConfig+0xc0>
 8008ea2:	4b75      	ldr	r3, [pc, #468]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a74      	ldr	r2, [pc, #464]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	4b72      	ldr	r3, [pc, #456]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a71      	ldr	r2, [pc, #452]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	e00b      	b.n	8008ed4 <HAL_RCC_OscConfig+0xd8>
 8008ebc:	4b6e      	ldr	r3, [pc, #440]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a6d      	ldr	r2, [pc, #436]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ec6:	6013      	str	r3, [r2, #0]
 8008ec8:	4b6b      	ldr	r3, [pc, #428]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a6a      	ldr	r2, [pc, #424]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d015      	beq.n	8008f08 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008edc:	f7fa f866 	bl	8002fac <HAL_GetTick>
 8008ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ee2:	e00a      	b.n	8008efa <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ee4:	f7fa f862 	bl	8002fac <HAL_GetTick>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d901      	bls.n	8008efa <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e3d2      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008efa:	4b5f      	ldr	r3, [pc, #380]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d0ee      	beq.n	8008ee4 <HAL_RCC_OscConfig+0xe8>
 8008f06:	e016      	b.n	8008f36 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f08:	f7fa f850 	bl	8002fac <HAL_GetTick>
 8008f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f0e:	e00a      	b.n	8008f26 <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f10:	f7fa f84c 	bl	8002fac <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e3bc      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f26:	4b54      	ldr	r3, [pc, #336]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1ee      	bne.n	8008f10 <HAL_RCC_OscConfig+0x114>
 8008f32:	e000      	b.n	8008f36 <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0302 	and.w	r3, r3, #2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 80cb 	beq.w	80090da <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f44:	4b4c      	ldr	r3, [pc, #304]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d007      	beq.n	8008f6a <HAL_RCC_OscConfig+0x16e>
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	2b18      	cmp	r3, #24
 8008f5e:	d156      	bne.n	800900e <HAL_RCC_OscConfig+0x212>
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	f003 0303 	and.w	r3, r3, #3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d151      	bne.n	800900e <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f6a:	4b43      	ldr	r3, [pc, #268]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d005      	beq.n	8008f82 <HAL_RCC_OscConfig+0x186>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e38e      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f82:	4b3d      	ldr	r3, [pc, #244]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f023 0219 	bic.w	r2, r3, #25
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	493a      	ldr	r1, [pc, #232]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f94:	f7fa f80a 	bl	8002fac <HAL_GetTick>
 8008f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f9a:	e008      	b.n	8008fae <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f9c:	f7fa f806 	bl	8002fac <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d901      	bls.n	8008fae <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e378      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fae:	4b32      	ldr	r3, [pc, #200]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0f0      	beq.n	8008f9c <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fba:	f7fa f827 	bl	800300c <HAL_GetREVID>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d817      	bhi.n	8008ff8 <HAL_RCC_OscConfig+0x1fc>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b40      	cmp	r3, #64	@ 0x40
 8008fce:	d108      	bne.n	8008fe2 <HAL_RCC_OscConfig+0x1e6>
 8008fd0:	4b29      	ldr	r3, [pc, #164]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008fd8:	4a27      	ldr	r2, [pc, #156]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fde:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fe0:	e07b      	b.n	80090da <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fe2:	4b25      	ldr	r3, [pc, #148]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	031b      	lsls	r3, r3, #12
 8008ff0:	4921      	ldr	r1, [pc, #132]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ff6:	e070      	b.n	80090da <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	061b      	lsls	r3, r3, #24
 8009006:	491c      	ldr	r1, [pc, #112]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8009008:	4313      	orrs	r3, r2
 800900a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800900c:	e065      	b.n	80090da <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d048      	beq.n	80090a8 <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009016:	4b18      	ldr	r3, [pc, #96]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f023 0219 	bic.w	r2, r3, #25
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	4915      	ldr	r1, [pc, #84]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8009024:	4313      	orrs	r3, r2
 8009026:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009028:	f7f9 ffc0 	bl	8002fac <HAL_GetTick>
 800902c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800902e:	e008      	b.n	8009042 <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009030:	f7f9 ffbc 	bl	8002fac <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	2b02      	cmp	r3, #2
 800903c:	d901      	bls.n	8009042 <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e32e      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009042:	4b0d      	ldr	r3, [pc, #52]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0304 	and.w	r3, r3, #4
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0f0      	beq.n	8009030 <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800904e:	f7f9 ffdd 	bl	800300c <HAL_GetREVID>
 8009052:	4603      	mov	r3, r0
 8009054:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009058:	4293      	cmp	r3, r2
 800905a:	d81a      	bhi.n	8009092 <HAL_RCC_OscConfig+0x296>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	2b40      	cmp	r3, #64	@ 0x40
 8009062:	d10b      	bne.n	800907c <HAL_RCC_OscConfig+0x280>
 8009064:	4b04      	ldr	r3, [pc, #16]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800906c:	4a02      	ldr	r2, [pc, #8]	@ (8009078 <HAL_RCC_OscConfig+0x27c>)
 800906e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009072:	6053      	str	r3, [r2, #4]
 8009074:	e031      	b.n	80090da <HAL_RCC_OscConfig+0x2de>
 8009076:	bf00      	nop
 8009078:	58024400 	.word	0x58024400
 800907c:	4b9c      	ldr	r3, [pc, #624]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	031b      	lsls	r3, r3, #12
 800908a:	4999      	ldr	r1, [pc, #612]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 800908c:	4313      	orrs	r3, r2
 800908e:	604b      	str	r3, [r1, #4]
 8009090:	e023      	b.n	80090da <HAL_RCC_OscConfig+0x2de>
 8009092:	4b97      	ldr	r3, [pc, #604]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	061b      	lsls	r3, r3, #24
 80090a0:	4993      	ldr	r1, [pc, #588]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	604b      	str	r3, [r1, #4]
 80090a6:	e018      	b.n	80090da <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090a8:	4b91      	ldr	r3, [pc, #580]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a90      	ldr	r2, [pc, #576]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80090ae:	f023 0301 	bic.w	r3, r3, #1
 80090b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090b4:	f7f9 ff7a 	bl	8002fac <HAL_GetTick>
 80090b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090ba:	e008      	b.n	80090ce <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090bc:	f7f9 ff76 	bl	8002fac <HAL_GetTick>
 80090c0:	4602      	mov	r2, r0
 80090c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d901      	bls.n	80090ce <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e2e8      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090ce:	4b88      	ldr	r3, [pc, #544]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0304 	and.w	r3, r3, #4
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1f0      	bne.n	80090bc <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0310 	and.w	r3, r3, #16
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 80a9 	beq.w	800923a <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090e8:	4b81      	ldr	r3, [pc, #516]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80090f2:	4b7f      	ldr	r3, [pc, #508]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80090f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	2b08      	cmp	r3, #8
 80090fc:	d007      	beq.n	800910e <HAL_RCC_OscConfig+0x312>
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	2b18      	cmp	r3, #24
 8009102:	d13a      	bne.n	800917a <HAL_RCC_OscConfig+0x37e>
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f003 0303 	and.w	r3, r3, #3
 800910a:	2b01      	cmp	r3, #1
 800910c:	d135      	bne.n	800917a <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800910e:	4b78      	ldr	r3, [pc, #480]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009116:	2b00      	cmp	r3, #0
 8009118:	d005      	beq.n	8009126 <HAL_RCC_OscConfig+0x32a>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	2b80      	cmp	r3, #128	@ 0x80
 8009120:	d001      	beq.n	8009126 <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e2bc      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009126:	f7f9 ff71 	bl	800300c <HAL_GetREVID>
 800912a:	4603      	mov	r3, r0
 800912c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009130:	4293      	cmp	r3, r2
 8009132:	d817      	bhi.n	8009164 <HAL_RCC_OscConfig+0x368>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	2b20      	cmp	r3, #32
 800913a:	d108      	bne.n	800914e <HAL_RCC_OscConfig+0x352>
 800913c:	4b6c      	ldr	r3, [pc, #432]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009144:	4a6a      	ldr	r2, [pc, #424]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009146:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800914a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800914c:	e075      	b.n	800923a <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800914e:	4b68      	ldr	r3, [pc, #416]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	069b      	lsls	r3, r3, #26
 800915c:	4964      	ldr	r1, [pc, #400]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 800915e:	4313      	orrs	r3, r2
 8009160:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009162:	e06a      	b.n	800923a <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009164:	4b62      	ldr	r3, [pc, #392]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	061b      	lsls	r3, r3, #24
 8009172:	495f      	ldr	r1, [pc, #380]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009174:	4313      	orrs	r3, r2
 8009176:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009178:	e05f      	b.n	800923a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d042      	beq.n	8009208 <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009182:	4b5b      	ldr	r3, [pc, #364]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a5a      	ldr	r2, [pc, #360]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800918c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800918e:	f7f9 ff0d 	bl	8002fac <HAL_GetTick>
 8009192:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009194:	e008      	b.n	80091a8 <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009196:	f7f9 ff09 	bl	8002fac <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d901      	bls.n	80091a8 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e27b      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091a8:	4b51      	ldr	r3, [pc, #324]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0f0      	beq.n	8009196 <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091b4:	f7f9 ff2a 	bl	800300c <HAL_GetREVID>
 80091b8:	4603      	mov	r3, r0
 80091ba:	f241 0203 	movw	r2, #4099	@ 0x1003
 80091be:	4293      	cmp	r3, r2
 80091c0:	d817      	bhi.n	80091f2 <HAL_RCC_OscConfig+0x3f6>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	d108      	bne.n	80091dc <HAL_RCC_OscConfig+0x3e0>
 80091ca:	4b49      	ldr	r3, [pc, #292]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80091d2:	4a47      	ldr	r2, [pc, #284]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80091d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091d8:	6053      	str	r3, [r2, #4]
 80091da:	e02e      	b.n	800923a <HAL_RCC_OscConfig+0x43e>
 80091dc:	4b44      	ldr	r3, [pc, #272]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	069b      	lsls	r3, r3, #26
 80091ea:	4941      	ldr	r1, [pc, #260]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	604b      	str	r3, [r1, #4]
 80091f0:	e023      	b.n	800923a <HAL_RCC_OscConfig+0x43e>
 80091f2:	4b3f      	ldr	r3, [pc, #252]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	061b      	lsls	r3, r3, #24
 8009200:	493b      	ldr	r1, [pc, #236]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009202:	4313      	orrs	r3, r2
 8009204:	60cb      	str	r3, [r1, #12]
 8009206:	e018      	b.n	800923a <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009208:	4b39      	ldr	r3, [pc, #228]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a38      	ldr	r2, [pc, #224]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 800920e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009214:	f7f9 feca 	bl	8002fac <HAL_GetTick>
 8009218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800921a:	e008      	b.n	800922e <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800921c:	f7f9 fec6 	bl	8002fac <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	2b02      	cmp	r3, #2
 8009228:	d901      	bls.n	800922e <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e238      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800922e:	4b30      	ldr	r3, [pc, #192]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1f0      	bne.n	800921c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	2b00      	cmp	r3, #0
 8009244:	d036      	beq.n	80092b4 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d019      	beq.n	8009282 <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800924e:	4b28      	ldr	r3, [pc, #160]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009252:	4a27      	ldr	r2, [pc, #156]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009254:	f043 0301 	orr.w	r3, r3, #1
 8009258:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800925a:	f7f9 fea7 	bl	8002fac <HAL_GetTick>
 800925e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009260:	e008      	b.n	8009274 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009262:	f7f9 fea3 	bl	8002fac <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	2b02      	cmp	r3, #2
 800926e:	d901      	bls.n	8009274 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e215      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009274:	4b1e      	ldr	r3, [pc, #120]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009278:	f003 0302 	and.w	r3, r3, #2
 800927c:	2b00      	cmp	r3, #0
 800927e:	d0f0      	beq.n	8009262 <HAL_RCC_OscConfig+0x466>
 8009280:	e018      	b.n	80092b4 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009282:	4b1b      	ldr	r3, [pc, #108]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009286:	4a1a      	ldr	r2, [pc, #104]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 8009288:	f023 0301 	bic.w	r3, r3, #1
 800928c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800928e:	f7f9 fe8d 	bl	8002fac <HAL_GetTick>
 8009292:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009294:	e008      	b.n	80092a8 <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009296:	f7f9 fe89 	bl	8002fac <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d901      	bls.n	80092a8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e1fb      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80092a8:	4b11      	ldr	r3, [pc, #68]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80092aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1f0      	bne.n	8009296 <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0320 	and.w	r3, r3, #32
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d039      	beq.n	8009334 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d01c      	beq.n	8009302 <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80092c8:	4b09      	ldr	r3, [pc, #36]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a08      	ldr	r2, [pc, #32]	@ (80092f0 <HAL_RCC_OscConfig+0x4f4>)
 80092ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80092d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092d4:	f7f9 fe6a 	bl	8002fac <HAL_GetTick>
 80092d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092da:	e00b      	b.n	80092f4 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092dc:	f7f9 fe66 	bl	8002fac <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d904      	bls.n	80092f4 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e1d8      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
 80092ee:	bf00      	nop
 80092f0:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092f4:	4b65      	ldr	r3, [pc, #404]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0ed      	beq.n	80092dc <HAL_RCC_OscConfig+0x4e0>
 8009300:	e018      	b.n	8009334 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009302:	4b62      	ldr	r3, [pc, #392]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a61      	ldr	r2, [pc, #388]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 8009308:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800930c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800930e:	f7f9 fe4d 	bl	8002fac <HAL_GetTick>
 8009312:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009314:	e008      	b.n	8009328 <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009316:	f7f9 fe49 	bl	8002fac <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d901      	bls.n	8009328 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e1bb      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009328:	4b58      	ldr	r3, [pc, #352]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1f0      	bne.n	8009316 <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b00      	cmp	r3, #0
 800933e:	f000 8081 	beq.w	8009444 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009342:	4b53      	ldr	r3, [pc, #332]	@ (8009490 <HAL_RCC_OscConfig+0x694>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a52      	ldr	r2, [pc, #328]	@ (8009490 <HAL_RCC_OscConfig+0x694>)
 8009348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800934c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800934e:	f7f9 fe2d 	bl	8002fac <HAL_GetTick>
 8009352:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009354:	e008      	b.n	8009368 <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009356:	f7f9 fe29 	bl	8002fac <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	2b64      	cmp	r3, #100	@ 0x64
 8009362:	d901      	bls.n	8009368 <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e19b      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009368:	4b49      	ldr	r3, [pc, #292]	@ (8009490 <HAL_RCC_OscConfig+0x694>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0f0      	beq.n	8009356 <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d106      	bne.n	800938a <HAL_RCC_OscConfig+0x58e>
 800937c:	4b43      	ldr	r3, [pc, #268]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 800937e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009380:	4a42      	ldr	r2, [pc, #264]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 8009382:	f043 0301 	orr.w	r3, r3, #1
 8009386:	6713      	str	r3, [r2, #112]	@ 0x70
 8009388:	e02d      	b.n	80093e6 <HAL_RCC_OscConfig+0x5ea>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10c      	bne.n	80093ac <HAL_RCC_OscConfig+0x5b0>
 8009392:	4b3e      	ldr	r3, [pc, #248]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 8009394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009396:	4a3d      	ldr	r2, [pc, #244]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 8009398:	f023 0301 	bic.w	r3, r3, #1
 800939c:	6713      	str	r3, [r2, #112]	@ 0x70
 800939e:	4b3b      	ldr	r3, [pc, #236]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 80093a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093a2:	4a3a      	ldr	r2, [pc, #232]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 80093a4:	f023 0304 	bic.w	r3, r3, #4
 80093a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80093aa:	e01c      	b.n	80093e6 <HAL_RCC_OscConfig+0x5ea>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	2b05      	cmp	r3, #5
 80093b2:	d10c      	bne.n	80093ce <HAL_RCC_OscConfig+0x5d2>
 80093b4:	4b35      	ldr	r3, [pc, #212]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 80093b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093b8:	4a34      	ldr	r2, [pc, #208]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 80093ba:	f043 0304 	orr.w	r3, r3, #4
 80093be:	6713      	str	r3, [r2, #112]	@ 0x70
 80093c0:	4b32      	ldr	r3, [pc, #200]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 80093c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093c4:	4a31      	ldr	r2, [pc, #196]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 80093c6:	f043 0301 	orr.w	r3, r3, #1
 80093ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80093cc:	e00b      	b.n	80093e6 <HAL_RCC_OscConfig+0x5ea>
 80093ce:	4b2f      	ldr	r3, [pc, #188]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 80093d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093d2:	4a2e      	ldr	r2, [pc, #184]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 80093d4:	f023 0301 	bic.w	r3, r3, #1
 80093d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80093da:	4b2c      	ldr	r3, [pc, #176]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 80093dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093de:	4a2b      	ldr	r2, [pc, #172]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 80093e0:	f023 0304 	bic.w	r3, r3, #4
 80093e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d015      	beq.n	800941a <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ee:	f7f9 fddd 	bl	8002fac <HAL_GetTick>
 80093f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093f4:	e00a      	b.n	800940c <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093f6:	f7f9 fdd9 	bl	8002fac <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009404:	4293      	cmp	r3, r2
 8009406:	d901      	bls.n	800940c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e149      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800940c:	4b1f      	ldr	r3, [pc, #124]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 800940e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d0ee      	beq.n	80093f6 <HAL_RCC_OscConfig+0x5fa>
 8009418:	e014      	b.n	8009444 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800941a:	f7f9 fdc7 	bl	8002fac <HAL_GetTick>
 800941e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009420:	e00a      	b.n	8009438 <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009422:	f7f9 fdc3 	bl	8002fac <HAL_GetTick>
 8009426:	4602      	mov	r2, r0
 8009428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009430:	4293      	cmp	r3, r2
 8009432:	d901      	bls.n	8009438 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e133      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009438:	4b14      	ldr	r3, [pc, #80]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 800943a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1ee      	bne.n	8009422 <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 8128 	beq.w	800969e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800944e:	4b0f      	ldr	r3, [pc, #60]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009456:	2b18      	cmp	r3, #24
 8009458:	f000 80b8 	beq.w	80095cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009460:	2b02      	cmp	r3, #2
 8009462:	f040 8099 	bne.w	8009598 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009466:	4b09      	ldr	r3, [pc, #36]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a08      	ldr	r2, [pc, #32]	@ (800948c <HAL_RCC_OscConfig+0x690>)
 800946c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009472:	f7f9 fd9b 	bl	8002fac <HAL_GetTick>
 8009476:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009478:	e00c      	b.n	8009494 <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800947a:	f7f9 fd97 	bl	8002fac <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	2b02      	cmp	r3, #2
 8009486:	d905      	bls.n	8009494 <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e109      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
 800948c:	58024400 	.word	0x58024400
 8009490:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009494:	4b84      	ldr	r3, [pc, #528]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1ec      	bne.n	800947a <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094a0:	4b81      	ldr	r3, [pc, #516]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 80094a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80094a4:	4b81      	ldr	r3, [pc, #516]	@ (80096ac <HAL_RCC_OscConfig+0x8b0>)
 80094a6:	4013      	ands	r3, r2
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80094b0:	0112      	lsls	r2, r2, #4
 80094b2:	430a      	orrs	r2, r1
 80094b4:	497c      	ldr	r1, [pc, #496]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	628b      	str	r3, [r1, #40]	@ 0x28
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094be:	3b01      	subs	r3, #1
 80094c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c8:	3b01      	subs	r3, #1
 80094ca:	025b      	lsls	r3, r3, #9
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d4:	3b01      	subs	r3, #1
 80094d6:	041b      	lsls	r3, r3, #16
 80094d8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80094dc:	431a      	orrs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e2:	3b01      	subs	r3, #1
 80094e4:	061b      	lsls	r3, r3, #24
 80094e6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80094ea:	496f      	ldr	r1, [pc, #444]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80094f0:	4b6d      	ldr	r3, [pc, #436]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 80094f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f4:	4a6c      	ldr	r2, [pc, #432]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 80094f6:	f023 0301 	bic.w	r3, r3, #1
 80094fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094fc:	4b6a      	ldr	r3, [pc, #424]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 80094fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009500:	4b6b      	ldr	r3, [pc, #428]	@ (80096b0 <HAL_RCC_OscConfig+0x8b4>)
 8009502:	4013      	ands	r3, r2
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009508:	00d2      	lsls	r2, r2, #3
 800950a:	4967      	ldr	r1, [pc, #412]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 800950c:	4313      	orrs	r3, r2
 800950e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009510:	4b65      	ldr	r3, [pc, #404]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009514:	f023 020c 	bic.w	r2, r3, #12
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800951c:	4962      	ldr	r1, [pc, #392]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 800951e:	4313      	orrs	r3, r2
 8009520:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009522:	4b61      	ldr	r3, [pc, #388]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009526:	f023 0202 	bic.w	r2, r3, #2
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800952e:	495e      	ldr	r1, [pc, #376]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009530:	4313      	orrs	r3, r2
 8009532:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009534:	4b5c      	ldr	r3, [pc, #368]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009538:	4a5b      	ldr	r2, [pc, #364]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 800953a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800953e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009540:	4b59      	ldr	r3, [pc, #356]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009544:	4a58      	ldr	r2, [pc, #352]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800954a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800954c:	4b56      	ldr	r3, [pc, #344]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 800954e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009550:	4a55      	ldr	r2, [pc, #340]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009552:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009558:	4b53      	ldr	r3, [pc, #332]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 800955a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955c:	4a52      	ldr	r2, [pc, #328]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 800955e:	f043 0301 	orr.w	r3, r3, #1
 8009562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009564:	4b50      	ldr	r3, [pc, #320]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a4f      	ldr	r2, [pc, #316]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 800956a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800956e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009570:	f7f9 fd1c 	bl	8002fac <HAL_GetTick>
 8009574:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009576:	e008      	b.n	800958a <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009578:	f7f9 fd18 	bl	8002fac <HAL_GetTick>
 800957c:	4602      	mov	r2, r0
 800957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	2b02      	cmp	r3, #2
 8009584:	d901      	bls.n	800958a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e08a      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800958a:	4b47      	ldr	r3, [pc, #284]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d0f0      	beq.n	8009578 <HAL_RCC_OscConfig+0x77c>
 8009596:	e082      	b.n	800969e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009598:	4b43      	ldr	r3, [pc, #268]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a42      	ldr	r2, [pc, #264]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 800959e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a4:	f7f9 fd02 	bl	8002fac <HAL_GetTick>
 80095a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095aa:	e008      	b.n	80095be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095ac:	f7f9 fcfe 	bl	8002fac <HAL_GetTick>
 80095b0:	4602      	mov	r2, r0
 80095b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d901      	bls.n	80095be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e070      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095be:	4b3a      	ldr	r3, [pc, #232]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1f0      	bne.n	80095ac <HAL_RCC_OscConfig+0x7b0>
 80095ca:	e068      	b.n	800969e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80095cc:	4b36      	ldr	r3, [pc, #216]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 80095ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80095d2:	4b35      	ldr	r3, [pc, #212]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 80095d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d031      	beq.n	8009644 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	f003 0203 	and.w	r2, r3, #3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d12a      	bne.n	8009644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	091b      	lsrs	r3, r3, #4
 80095f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d122      	bne.n	8009644 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009608:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800960a:	429a      	cmp	r2, r3
 800960c:	d11a      	bne.n	8009644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	0a5b      	lsrs	r3, r3, #9
 8009612:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800961a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800961c:	429a      	cmp	r2, r3
 800961e:	d111      	bne.n	8009644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	0c1b      	lsrs	r3, r3, #16
 8009624:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800962e:	429a      	cmp	r2, r3
 8009630:	d108      	bne.n	8009644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	0e1b      	lsrs	r3, r3, #24
 8009636:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800963e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009640:	429a      	cmp	r2, r3
 8009642:	d001      	beq.n	8009648 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e02b      	b.n	80096a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009648:	4b17      	ldr	r3, [pc, #92]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 800964a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800964c:	08db      	lsrs	r3, r3, #3
 800964e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009652:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	429a      	cmp	r2, r3
 800965c:	d01f      	beq.n	800969e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800965e:	4b12      	ldr	r3, [pc, #72]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009662:	4a11      	ldr	r2, [pc, #68]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009664:	f023 0301 	bic.w	r3, r3, #1
 8009668:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800966a:	f7f9 fc9f 	bl	8002fac <HAL_GetTick>
 800966e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009670:	bf00      	nop
 8009672:	f7f9 fc9b 	bl	8002fac <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967a:	4293      	cmp	r3, r2
 800967c:	d0f9      	beq.n	8009672 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800967e:	4b0a      	ldr	r3, [pc, #40]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009682:	4b0b      	ldr	r3, [pc, #44]	@ (80096b0 <HAL_RCC_OscConfig+0x8b4>)
 8009684:	4013      	ands	r3, r2
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800968a:	00d2      	lsls	r2, r2, #3
 800968c:	4906      	ldr	r1, [pc, #24]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 800968e:	4313      	orrs	r3, r2
 8009690:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009692:	4b05      	ldr	r3, [pc, #20]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009696:	4a04      	ldr	r2, [pc, #16]	@ (80096a8 <HAL_RCC_OscConfig+0x8ac>)
 8009698:	f043 0301 	orr.w	r3, r3, #1
 800969c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3730      	adds	r7, #48	@ 0x30
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	58024400 	.word	0x58024400
 80096ac:	fffffc0c 	.word	0xfffffc0c
 80096b0:	ffff0007 	.word	0xffff0007

080096b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e19c      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096c8:	4b8a      	ldr	r3, [pc, #552]	@ (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 030f 	and.w	r3, r3, #15
 80096d0:	683a      	ldr	r2, [r7, #0]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d910      	bls.n	80096f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096d6:	4b87      	ldr	r3, [pc, #540]	@ (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f023 020f 	bic.w	r2, r3, #15
 80096de:	4985      	ldr	r1, [pc, #532]	@ (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096e6:	4b83      	ldr	r3, [pc, #524]	@ (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 030f 	and.w	r3, r3, #15
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d001      	beq.n	80096f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e184      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0304 	and.w	r3, r3, #4
 8009700:	2b00      	cmp	r3, #0
 8009702:	d010      	beq.n	8009726 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	691a      	ldr	r2, [r3, #16]
 8009708:	4b7b      	ldr	r3, [pc, #492]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009710:	429a      	cmp	r2, r3
 8009712:	d908      	bls.n	8009726 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009714:	4b78      	ldr	r3, [pc, #480]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	4975      	ldr	r1, [pc, #468]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009722:	4313      	orrs	r3, r2
 8009724:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0308 	and.w	r3, r3, #8
 800972e:	2b00      	cmp	r3, #0
 8009730:	d010      	beq.n	8009754 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	695a      	ldr	r2, [r3, #20]
 8009736:	4b70      	ldr	r3, [pc, #448]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800973e:	429a      	cmp	r2, r3
 8009740:	d908      	bls.n	8009754 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009742:	4b6d      	ldr	r3, [pc, #436]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	496a      	ldr	r1, [pc, #424]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009750:	4313      	orrs	r3, r2
 8009752:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0310 	and.w	r3, r3, #16
 800975c:	2b00      	cmp	r3, #0
 800975e:	d010      	beq.n	8009782 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	699a      	ldr	r2, [r3, #24]
 8009764:	4b64      	ldr	r3, [pc, #400]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800976c:	429a      	cmp	r2, r3
 800976e:	d908      	bls.n	8009782 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009770:	4b61      	ldr	r3, [pc, #388]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	495e      	ldr	r1, [pc, #376]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 800977e:	4313      	orrs	r3, r2
 8009780:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0320 	and.w	r3, r3, #32
 800978a:	2b00      	cmp	r3, #0
 800978c:	d010      	beq.n	80097b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	69da      	ldr	r2, [r3, #28]
 8009792:	4b59      	ldr	r3, [pc, #356]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800979a:	429a      	cmp	r2, r3
 800979c:	d908      	bls.n	80097b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800979e:	4b56      	ldr	r3, [pc, #344]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	4953      	ldr	r1, [pc, #332]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097ac:	4313      	orrs	r3, r2
 80097ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0302 	and.w	r3, r3, #2
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d010      	beq.n	80097de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68da      	ldr	r2, [r3, #12]
 80097c0:	4b4d      	ldr	r3, [pc, #308]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	f003 030f 	and.w	r3, r3, #15
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d908      	bls.n	80097de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097cc:	4b4a      	ldr	r3, [pc, #296]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	f023 020f 	bic.w	r2, r3, #15
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	4947      	ldr	r1, [pc, #284]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d055      	beq.n	8009896 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80097ea:	4b43      	ldr	r3, [pc, #268]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	4940      	ldr	r1, [pc, #256]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	2b02      	cmp	r3, #2
 8009802:	d107      	bne.n	8009814 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009804:	4b3c      	ldr	r3, [pc, #240]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d121      	bne.n	8009854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e0f6      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	2b03      	cmp	r3, #3
 800981a:	d107      	bne.n	800982c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800981c:	4b36      	ldr	r3, [pc, #216]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d115      	bne.n	8009854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e0ea      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d107      	bne.n	8009844 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009834:	4b30      	ldr	r3, [pc, #192]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800983c:	2b00      	cmp	r3, #0
 800983e:	d109      	bne.n	8009854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e0de      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009844:	4b2c      	ldr	r3, [pc, #176]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e0d6      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009854:	4b28      	ldr	r3, [pc, #160]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	f023 0207 	bic.w	r2, r3, #7
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	4925      	ldr	r1, [pc, #148]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009862:	4313      	orrs	r3, r2
 8009864:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009866:	f7f9 fba1 	bl	8002fac <HAL_GetTick>
 800986a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800986c:	e00a      	b.n	8009884 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800986e:	f7f9 fb9d 	bl	8002fac <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800987c:	4293      	cmp	r3, r2
 800987e:	d901      	bls.n	8009884 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e0be      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009884:	4b1c      	ldr	r3, [pc, #112]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	00db      	lsls	r3, r3, #3
 8009892:	429a      	cmp	r2, r3
 8009894:	d1eb      	bne.n	800986e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0302 	and.w	r3, r3, #2
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d010      	beq.n	80098c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68da      	ldr	r2, [r3, #12]
 80098a6:	4b14      	ldr	r3, [pc, #80]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	f003 030f 	and.w	r3, r3, #15
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d208      	bcs.n	80098c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098b2:	4b11      	ldr	r3, [pc, #68]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	f023 020f 	bic.w	r2, r3, #15
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	490e      	ldr	r1, [pc, #56]	@ (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80098c4:	4b0b      	ldr	r3, [pc, #44]	@ (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 030f 	and.w	r3, r3, #15
 80098cc:	683a      	ldr	r2, [r7, #0]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d214      	bcs.n	80098fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098d2:	4b08      	ldr	r3, [pc, #32]	@ (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f023 020f 	bic.w	r2, r3, #15
 80098da:	4906      	ldr	r1, [pc, #24]	@ (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	4313      	orrs	r3, r2
 80098e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098e2:	4b04      	ldr	r3, [pc, #16]	@ (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 030f 	and.w	r3, r3, #15
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d005      	beq.n	80098fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e086      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
 80098f4:	52002000 	.word	0x52002000
 80098f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0304 	and.w	r3, r3, #4
 8009904:	2b00      	cmp	r3, #0
 8009906:	d010      	beq.n	800992a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	691a      	ldr	r2, [r3, #16]
 800990c:	4b3f      	ldr	r3, [pc, #252]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009914:	429a      	cmp	r2, r3
 8009916:	d208      	bcs.n	800992a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009918:	4b3c      	ldr	r3, [pc, #240]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	4939      	ldr	r1, [pc, #228]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 8009926:	4313      	orrs	r3, r2
 8009928:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0308 	and.w	r3, r3, #8
 8009932:	2b00      	cmp	r3, #0
 8009934:	d010      	beq.n	8009958 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	695a      	ldr	r2, [r3, #20]
 800993a:	4b34      	ldr	r3, [pc, #208]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009942:	429a      	cmp	r2, r3
 8009944:	d208      	bcs.n	8009958 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009946:	4b31      	ldr	r3, [pc, #196]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	492e      	ldr	r1, [pc, #184]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 8009954:	4313      	orrs	r3, r2
 8009956:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0310 	and.w	r3, r3, #16
 8009960:	2b00      	cmp	r3, #0
 8009962:	d010      	beq.n	8009986 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	699a      	ldr	r2, [r3, #24]
 8009968:	4b28      	ldr	r3, [pc, #160]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009970:	429a      	cmp	r2, r3
 8009972:	d208      	bcs.n	8009986 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009974:	4b25      	ldr	r3, [pc, #148]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	4922      	ldr	r1, [pc, #136]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 8009982:	4313      	orrs	r3, r2
 8009984:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b00      	cmp	r3, #0
 8009990:	d010      	beq.n	80099b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	69da      	ldr	r2, [r3, #28]
 8009996:	4b1d      	ldr	r3, [pc, #116]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800999e:	429a      	cmp	r2, r3
 80099a0:	d208      	bcs.n	80099b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80099a2:	4b1a      	ldr	r3, [pc, #104]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	69db      	ldr	r3, [r3, #28]
 80099ae:	4917      	ldr	r1, [pc, #92]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 80099b0:	4313      	orrs	r3, r2
 80099b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80099b4:	f000 f834 	bl	8009a20 <HAL_RCC_GetSysClockFreq>
 80099b8:	4602      	mov	r2, r0
 80099ba:	4b14      	ldr	r3, [pc, #80]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	f003 030f 	and.w	r3, r3, #15
 80099c4:	4912      	ldr	r1, [pc, #72]	@ (8009a10 <HAL_RCC_ClockConfig+0x35c>)
 80099c6:	5ccb      	ldrb	r3, [r1, r3]
 80099c8:	f003 031f 	and.w	r3, r3, #31
 80099cc:	fa22 f303 	lsr.w	r3, r2, r3
 80099d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099d2:	4b0e      	ldr	r3, [pc, #56]	@ (8009a0c <HAL_RCC_ClockConfig+0x358>)
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	f003 030f 	and.w	r3, r3, #15
 80099da:	4a0d      	ldr	r2, [pc, #52]	@ (8009a10 <HAL_RCC_ClockConfig+0x35c>)
 80099dc:	5cd3      	ldrb	r3, [r2, r3]
 80099de:	f003 031f 	and.w	r3, r3, #31
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	fa22 f303 	lsr.w	r3, r2, r3
 80099e8:	4a0a      	ldr	r2, [pc, #40]	@ (8009a14 <HAL_RCC_ClockConfig+0x360>)
 80099ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009a18 <HAL_RCC_ClockConfig+0x364>)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80099f2:	4b0a      	ldr	r3, [pc, #40]	@ (8009a1c <HAL_RCC_ClockConfig+0x368>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f9 fa8e 	bl	8002f18 <HAL_InitTick>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	58024400 	.word	0x58024400
 8009a10:	08014b00 	.word	0x08014b00
 8009a14:	24000004 	.word	0x24000004
 8009a18:	24000000 	.word	0x24000000
 8009a1c:	24000008 	.word	0x24000008

08009a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b089      	sub	sp, #36	@ 0x24
 8009a24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a26:	4bb3      	ldr	r3, [pc, #716]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a2e:	2b18      	cmp	r3, #24
 8009a30:	f200 8155 	bhi.w	8009cde <HAL_RCC_GetSysClockFreq+0x2be>
 8009a34:	a201      	add	r2, pc, #4	@ (adr r2, 8009a3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3a:	bf00      	nop
 8009a3c:	08009aa1 	.word	0x08009aa1
 8009a40:	08009cdf 	.word	0x08009cdf
 8009a44:	08009cdf 	.word	0x08009cdf
 8009a48:	08009cdf 	.word	0x08009cdf
 8009a4c:	08009cdf 	.word	0x08009cdf
 8009a50:	08009cdf 	.word	0x08009cdf
 8009a54:	08009cdf 	.word	0x08009cdf
 8009a58:	08009cdf 	.word	0x08009cdf
 8009a5c:	08009ac7 	.word	0x08009ac7
 8009a60:	08009cdf 	.word	0x08009cdf
 8009a64:	08009cdf 	.word	0x08009cdf
 8009a68:	08009cdf 	.word	0x08009cdf
 8009a6c:	08009cdf 	.word	0x08009cdf
 8009a70:	08009cdf 	.word	0x08009cdf
 8009a74:	08009cdf 	.word	0x08009cdf
 8009a78:	08009cdf 	.word	0x08009cdf
 8009a7c:	08009acd 	.word	0x08009acd
 8009a80:	08009cdf 	.word	0x08009cdf
 8009a84:	08009cdf 	.word	0x08009cdf
 8009a88:	08009cdf 	.word	0x08009cdf
 8009a8c:	08009cdf 	.word	0x08009cdf
 8009a90:	08009cdf 	.word	0x08009cdf
 8009a94:	08009cdf 	.word	0x08009cdf
 8009a98:	08009cdf 	.word	0x08009cdf
 8009a9c:	08009ad3 	.word	0x08009ad3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aa0:	4b94      	ldr	r3, [pc, #592]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0320 	and.w	r3, r3, #32
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d009      	beq.n	8009ac0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009aac:	4b91      	ldr	r3, [pc, #580]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	08db      	lsrs	r3, r3, #3
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	4a90      	ldr	r2, [pc, #576]	@ (8009cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8009abc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009abe:	e111      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ac0:	4b8d      	ldr	r3, [pc, #564]	@ (8009cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ac2:	61bb      	str	r3, [r7, #24]
      break;
 8009ac4:	e10e      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009ac6:	4b8d      	ldr	r3, [pc, #564]	@ (8009cfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ac8:	61bb      	str	r3, [r7, #24]
      break;
 8009aca:	e10b      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009acc:	4b8c      	ldr	r3, [pc, #560]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009ace:	61bb      	str	r3, [r7, #24]
      break;
 8009ad0:	e108      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ad2:	4b88      	ldr	r3, [pc, #544]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad6:	f003 0303 	and.w	r3, r3, #3
 8009ada:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009adc:	4b85      	ldr	r3, [pc, #532]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae0:	091b      	lsrs	r3, r3, #4
 8009ae2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ae6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009ae8:	4b82      	ldr	r3, [pc, #520]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009af2:	4b80      	ldr	r3, [pc, #512]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009af6:	08db      	lsrs	r3, r3, #3
 8009af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	fb02 f303 	mul.w	r3, r2, r3
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 80e1 	beq.w	8009cd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	f000 8083 	beq.w	8009c24 <HAL_RCC_GetSysClockFreq+0x204>
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	f200 80a1 	bhi.w	8009c68 <HAL_RCC_GetSysClockFreq+0x248>
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <HAL_RCC_GetSysClockFreq+0x114>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d056      	beq.n	8009be0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009b32:	e099      	b.n	8009c68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b34:	4b6f      	ldr	r3, [pc, #444]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0320 	and.w	r3, r3, #32
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d02d      	beq.n	8009b9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b40:	4b6c      	ldr	r3, [pc, #432]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	08db      	lsrs	r3, r3, #3
 8009b46:	f003 0303 	and.w	r3, r3, #3
 8009b4a:	4a6b      	ldr	r2, [pc, #428]	@ (8009cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	ee07 3a90 	vmov	s15, r3
 8009b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6a:	4b62      	ldr	r3, [pc, #392]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b7e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009b9a:	e087      	b.n	8009cac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	ee07 3a90 	vmov	s15, r3
 8009ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009d08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bae:	4b51      	ldr	r3, [pc, #324]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb6:	ee07 3a90 	vmov	s15, r3
 8009bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bc2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bde:	e065      	b.n	8009cac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009d0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf2:	4b40      	ldr	r3, [pc, #256]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfa:	ee07 3a90 	vmov	s15, r3
 8009bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c06:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c22:	e043      	b.n	8009cac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	ee07 3a90 	vmov	s15, r3
 8009c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009d10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c36:	4b2f      	ldr	r3, [pc, #188]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c4a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c66:	e021      	b.n	8009cac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	ee07 3a90 	vmov	s15, r3
 8009c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009d0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c8e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009caa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009cac:	4b11      	ldr	r3, [pc, #68]	@ (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb0:	0a5b      	lsrs	r3, r3, #9
 8009cb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	ee07 3a90 	vmov	s15, r3
 8009cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cd0:	ee17 3a90 	vmov	r3, s15
 8009cd4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009cd6:	e005      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	61bb      	str	r3, [r7, #24]
      break;
 8009cdc:	e002      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009cde:	4b07      	ldr	r3, [pc, #28]	@ (8009cfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ce0:	61bb      	str	r3, [r7, #24]
      break;
 8009ce2:	bf00      	nop
  }

  return sysclockfreq;
 8009ce4:	69bb      	ldr	r3, [r7, #24]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3724      	adds	r7, #36	@ 0x24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	58024400 	.word	0x58024400
 8009cf8:	03d09000 	.word	0x03d09000
 8009cfc:	003d0900 	.word	0x003d0900
 8009d00:	017d7840 	.word	0x017d7840
 8009d04:	46000000 	.word	0x46000000
 8009d08:	4c742400 	.word	0x4c742400
 8009d0c:	4a742400 	.word	0x4a742400
 8009d10:	4bbebc20 	.word	0x4bbebc20

08009d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d1a:	f7ff fe81 	bl	8009a20 <HAL_RCC_GetSysClockFreq>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	4b10      	ldr	r3, [pc, #64]	@ (8009d64 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	0a1b      	lsrs	r3, r3, #8
 8009d26:	f003 030f 	and.w	r3, r3, #15
 8009d2a:	490f      	ldr	r1, [pc, #60]	@ (8009d68 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d2c:	5ccb      	ldrb	r3, [r1, r3]
 8009d2e:	f003 031f 	and.w	r3, r3, #31
 8009d32:	fa22 f303 	lsr.w	r3, r2, r3
 8009d36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d38:	4b0a      	ldr	r3, [pc, #40]	@ (8009d64 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	f003 030f 	and.w	r3, r3, #15
 8009d40:	4a09      	ldr	r2, [pc, #36]	@ (8009d68 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d42:	5cd3      	ldrb	r3, [r2, r3]
 8009d44:	f003 031f 	and.w	r3, r3, #31
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d4e:	4a07      	ldr	r2, [pc, #28]	@ (8009d6c <HAL_RCC_GetHCLKFreq+0x58>)
 8009d50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009d52:	4a07      	ldr	r2, [pc, #28]	@ (8009d70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009d58:	4b04      	ldr	r3, [pc, #16]	@ (8009d6c <HAL_RCC_GetHCLKFreq+0x58>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	58024400 	.word	0x58024400
 8009d68:	08014b00 	.word	0x08014b00
 8009d6c:	24000004 	.word	0x24000004
 8009d70:	24000000 	.word	0x24000000

08009d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d78:	f7ff ffcc 	bl	8009d14 <HAL_RCC_GetHCLKFreq>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	4b06      	ldr	r3, [pc, #24]	@ (8009d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	091b      	lsrs	r3, r3, #4
 8009d84:	f003 0307 	and.w	r3, r3, #7
 8009d88:	4904      	ldr	r1, [pc, #16]	@ (8009d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d8a:	5ccb      	ldrb	r3, [r1, r3]
 8009d8c:	f003 031f 	and.w	r3, r3, #31
 8009d90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	58024400 	.word	0x58024400
 8009d9c:	08014b00 	.word	0x08014b00

08009da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009da4:	f7ff ffb6 	bl	8009d14 <HAL_RCC_GetHCLKFreq>
 8009da8:	4602      	mov	r2, r0
 8009daa:	4b06      	ldr	r3, [pc, #24]	@ (8009dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	0a1b      	lsrs	r3, r3, #8
 8009db0:	f003 0307 	and.w	r3, r3, #7
 8009db4:	4904      	ldr	r1, [pc, #16]	@ (8009dc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009db6:	5ccb      	ldrb	r3, [r1, r3]
 8009db8:	f003 031f 	and.w	r3, r3, #31
 8009dbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	58024400 	.word	0x58024400
 8009dc8:	08014b00 	.word	0x08014b00

08009dcc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dd0:	b0ca      	sub	sp, #296	@ 0x128
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009dde:	2300      	movs	r3, #0
 8009de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009df0:	2500      	movs	r5, #0
 8009df2:	ea54 0305 	orrs.w	r3, r4, r5
 8009df6:	d049      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e02:	d02f      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009e04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e08:	d828      	bhi.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e0e:	d01a      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009e10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e14:	d822      	bhi.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e1e:	d007      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009e20:	e01c      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e22:	4bb8      	ldr	r3, [pc, #736]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e26:	4ab7      	ldr	r2, [pc, #732]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e2e:	e01a      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e34:	3308      	adds	r3, #8
 8009e36:	2102      	movs	r1, #2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f002 fb61 	bl	800c500 <RCCEx_PLL2_Config>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e44:	e00f      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e4a:	3328      	adds	r3, #40	@ 0x28
 8009e4c:	2102      	movs	r1, #2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f002 fc08 	bl	800c664 <RCCEx_PLL3_Config>
 8009e54:	4603      	mov	r3, r0
 8009e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e5a:	e004      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e62:	e000      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10a      	bne.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009e6e:	4ba5      	ldr	r3, [pc, #660]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e7c:	4aa1      	ldr	r2, [pc, #644]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e7e:	430b      	orrs	r3, r1
 8009e80:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e82:	e003      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009e98:	f04f 0900 	mov.w	r9, #0
 8009e9c:	ea58 0309 	orrs.w	r3, r8, r9
 8009ea0:	d047      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d82a      	bhi.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009eac:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb2:	bf00      	nop
 8009eb4:	08009ec9 	.word	0x08009ec9
 8009eb8:	08009ed7 	.word	0x08009ed7
 8009ebc:	08009eed 	.word	0x08009eed
 8009ec0:	08009f0b 	.word	0x08009f0b
 8009ec4:	08009f0b 	.word	0x08009f0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec8:	4b8e      	ldr	r3, [pc, #568]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ecc:	4a8d      	ldr	r2, [pc, #564]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ed4:	e01a      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eda:	3308      	adds	r3, #8
 8009edc:	2100      	movs	r1, #0
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f002 fb0e 	bl	800c500 <RCCEx_PLL2_Config>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009eea:	e00f      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef0:	3328      	adds	r3, #40	@ 0x28
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f002 fbb5 	bl	800c664 <RCCEx_PLL3_Config>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f00:	e004      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f08:	e000      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f14:	4b7b      	ldr	r3, [pc, #492]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f18:	f023 0107 	bic.w	r1, r3, #7
 8009f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f22:	4a78      	ldr	r2, [pc, #480]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f24:	430b      	orrs	r3, r1
 8009f26:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f28:	e003      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009f3e:	f04f 0b00 	mov.w	fp, #0
 8009f42:	ea5a 030b 	orrs.w	r3, sl, fp
 8009f46:	d04c      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f52:	d030      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f58:	d829      	bhi.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f5c:	d02d      	beq.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009f5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f60:	d825      	bhi.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f62:	2b80      	cmp	r3, #128	@ 0x80
 8009f64:	d018      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009f66:	2b80      	cmp	r3, #128	@ 0x80
 8009f68:	d821      	bhi.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d002      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009f6e:	2b40      	cmp	r3, #64	@ 0x40
 8009f70:	d007      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009f72:	e01c      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f74:	4b63      	ldr	r3, [pc, #396]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f78:	4a62      	ldr	r2, [pc, #392]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f80:	e01c      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f86:	3308      	adds	r3, #8
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f002 fab8 	bl	800c500 <RCCEx_PLL2_Config>
 8009f90:	4603      	mov	r3, r0
 8009f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f96:	e011      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9c:	3328      	adds	r3, #40	@ 0x28
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f002 fb5f 	bl	800c664 <RCCEx_PLL3_Config>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009fac:	e006      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fb4:	e002      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009fb6:	bf00      	nop
 8009fb8:	e000      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10a      	bne.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009fc4:	4b4f      	ldr	r3, [pc, #316]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fc8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fd2:	4a4c      	ldr	r2, [pc, #304]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fd4:	430b      	orrs	r3, r1
 8009fd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8009fd8:	e003      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009fee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009ff8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	4313      	orrs	r3, r2
 800a000:	d053      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a006:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a00a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a00e:	d035      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a010:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a014:	d82e      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a016:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a01a:	d031      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a01c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a020:	d828      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a026:	d01a      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a028:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a02c:	d822      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d003      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a032:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a036:	d007      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a038:	e01c      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a03a:	4b32      	ldr	r3, [pc, #200]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03e:	4a31      	ldr	r2, [pc, #196]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a044:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a046:	e01c      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a04c:	3308      	adds	r3, #8
 800a04e:	2100      	movs	r1, #0
 800a050:	4618      	mov	r0, r3
 800a052:	f002 fa55 	bl	800c500 <RCCEx_PLL2_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a05c:	e011      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a062:	3328      	adds	r3, #40	@ 0x28
 800a064:	2100      	movs	r1, #0
 800a066:	4618      	mov	r0, r3
 800a068:	f002 fafc 	bl	800c664 <RCCEx_PLL3_Config>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a072:	e006      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a07a:	e002      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a07c:	bf00      	nop
 800a07e:	e000      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a080:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10b      	bne.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a08a:	4b1e      	ldr	r3, [pc, #120]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a08c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a08e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a096:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a09a:	4a1a      	ldr	r2, [pc, #104]	@ (800a104 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a09c:	430b      	orrs	r3, r1
 800a09e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0a0:	e003      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a0b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a0c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	d056      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a0d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a0d6:	d038      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a0d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a0dc:	d831      	bhi.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a0de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a0e2:	d034      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a0e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a0e8:	d82b      	bhi.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a0ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0ee:	d01d      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a0f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0f4:	d825      	bhi.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d006      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a0fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0fe:	d00a      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a100:	e01f      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a102:	bf00      	nop
 800a104:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a108:	4ba2      	ldr	r3, [pc, #648]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10c:	4aa1      	ldr	r2, [pc, #644]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a10e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a114:	e01c      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a11a:	3308      	adds	r3, #8
 800a11c:	2100      	movs	r1, #0
 800a11e:	4618      	mov	r0, r3
 800a120:	f002 f9ee 	bl	800c500 <RCCEx_PLL2_Config>
 800a124:	4603      	mov	r3, r0
 800a126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a12a:	e011      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a130:	3328      	adds	r3, #40	@ 0x28
 800a132:	2100      	movs	r1, #0
 800a134:	4618      	mov	r0, r3
 800a136:	f002 fa95 	bl	800c664 <RCCEx_PLL3_Config>
 800a13a:	4603      	mov	r3, r0
 800a13c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a140:	e006      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a148:	e002      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a14a:	bf00      	nop
 800a14c:	e000      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a14e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10b      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a158:	4b8e      	ldr	r3, [pc, #568]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a15a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a15c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a164:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a168:	4a8a      	ldr	r2, [pc, #552]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a16a:	430b      	orrs	r3, r1
 800a16c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a16e:	e003      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a174:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a184:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a188:	2300      	movs	r3, #0
 800a18a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a18e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a192:	460b      	mov	r3, r1
 800a194:	4313      	orrs	r3, r2
 800a196:	d03a      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a19e:	2b30      	cmp	r3, #48	@ 0x30
 800a1a0:	d01f      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a1a2:	2b30      	cmp	r3, #48	@ 0x30
 800a1a4:	d819      	bhi.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	d00c      	beq.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a1aa:	2b20      	cmp	r3, #32
 800a1ac:	d815      	bhi.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d019      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a1b2:	2b10      	cmp	r3, #16
 800a1b4:	d111      	bne.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1b6:	4b77      	ldr	r3, [pc, #476]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ba:	4a76      	ldr	r2, [pc, #472]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a1c2:	e011      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	2102      	movs	r1, #2
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f002 f997 	bl	800c500 <RCCEx_PLL2_Config>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a1d8:	e006      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1e0:	e002      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a1e2:	bf00      	nop
 800a1e4:	e000      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a1e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a1f0:	4b68      	ldr	r3, [pc, #416]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a1f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1fe:	4a65      	ldr	r2, [pc, #404]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a200:	430b      	orrs	r3, r1
 800a202:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a204:	e003      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a20a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a21a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a21e:	2300      	movs	r3, #0
 800a220:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a224:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a228:	460b      	mov	r3, r1
 800a22a:	4313      	orrs	r3, r2
 800a22c:	d051      	beq.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a238:	d035      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a23a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a23e:	d82e      	bhi.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a240:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a244:	d031      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a246:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a24a:	d828      	bhi.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a24c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a250:	d01a      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a256:	d822      	bhi.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a25c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a260:	d007      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a262:	e01c      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a264:	4b4b      	ldr	r3, [pc, #300]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a268:	4a4a      	ldr	r2, [pc, #296]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a26a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a26e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a270:	e01c      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a276:	3308      	adds	r3, #8
 800a278:	2100      	movs	r1, #0
 800a27a:	4618      	mov	r0, r3
 800a27c:	f002 f940 	bl	800c500 <RCCEx_PLL2_Config>
 800a280:	4603      	mov	r3, r0
 800a282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a286:	e011      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a28c:	3328      	adds	r3, #40	@ 0x28
 800a28e:	2100      	movs	r1, #0
 800a290:	4618      	mov	r0, r3
 800a292:	f002 f9e7 	bl	800c664 <RCCEx_PLL3_Config>
 800a296:	4603      	mov	r3, r0
 800a298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a29c:	e006      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2a4:	e002      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a2a6:	bf00      	nop
 800a2a8:	e000      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a2aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10a      	bne.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a2b4:	4b37      	ldr	r3, [pc, #220]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2c2:	4a34      	ldr	r2, [pc, #208]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2c4:	430b      	orrs	r3, r1
 800a2c6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2c8:	e003      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a2de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a2e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	d056      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a2fc:	d033      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a2fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a302:	d82c      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a304:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a308:	d02f      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a30a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a30e:	d826      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a310:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a314:	d02b      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a316:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a31a:	d820      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a31c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a320:	d012      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a322:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a326:	d81a      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d022      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a32c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a330:	d115      	bne.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a336:	3308      	adds	r3, #8
 800a338:	2101      	movs	r1, #1
 800a33a:	4618      	mov	r0, r3
 800a33c:	f002 f8e0 	bl	800c500 <RCCEx_PLL2_Config>
 800a340:	4603      	mov	r3, r0
 800a342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a346:	e015      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a34c:	3328      	adds	r3, #40	@ 0x28
 800a34e:	2101      	movs	r1, #1
 800a350:	4618      	mov	r0, r3
 800a352:	f002 f987 	bl	800c664 <RCCEx_PLL3_Config>
 800a356:	4603      	mov	r3, r0
 800a358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a35c:	e00a      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a364:	e006      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a366:	bf00      	nop
 800a368:	e004      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a36a:	bf00      	nop
 800a36c:	e002      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a36e:	bf00      	nop
 800a370:	e000      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a372:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10d      	bne.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a37c:	4b05      	ldr	r3, [pc, #20]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a37e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a380:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a388:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a38a:	4a02      	ldr	r2, [pc, #8]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a38c:	430b      	orrs	r3, r1
 800a38e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a390:	e006      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a392:	bf00      	nop
 800a394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a39c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a3ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a3b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	d055      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a3c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3cc:	d033      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a3ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3d2:	d82c      	bhi.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3d8:	d02f      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a3da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3de:	d826      	bhi.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a3e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a3e4:	d02b      	beq.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a3e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a3ea:	d820      	bhi.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a3ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3f0:	d012      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a3f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3f6:	d81a      	bhi.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d022      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a3fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a400:	d115      	bne.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a406:	3308      	adds	r3, #8
 800a408:	2101      	movs	r1, #1
 800a40a:	4618      	mov	r0, r3
 800a40c:	f002 f878 	bl	800c500 <RCCEx_PLL2_Config>
 800a410:	4603      	mov	r3, r0
 800a412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a416:	e015      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a41c:	3328      	adds	r3, #40	@ 0x28
 800a41e:	2101      	movs	r1, #1
 800a420:	4618      	mov	r0, r3
 800a422:	f002 f91f 	bl	800c664 <RCCEx_PLL3_Config>
 800a426:	4603      	mov	r3, r0
 800a428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a42c:	e00a      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a434:	e006      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a436:	bf00      	nop
 800a438:	e004      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a43a:	bf00      	nop
 800a43c:	e002      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a43e:	bf00      	nop
 800a440:	e000      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a442:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10b      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a44c:	4ba3      	ldr	r3, [pc, #652]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a44e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a450:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a458:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a45c:	4a9f      	ldr	r2, [pc, #636]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a45e:	430b      	orrs	r3, r1
 800a460:	6593      	str	r3, [r2, #88]	@ 0x58
 800a462:	e003      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a478:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a47c:	2300      	movs	r3, #0
 800a47e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a486:	460b      	mov	r3, r1
 800a488:	4313      	orrs	r3, r2
 800a48a:	d037      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a496:	d00e      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a49c:	d816      	bhi.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d018      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a4a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4a6:	d111      	bne.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4a8:	4b8c      	ldr	r3, [pc, #560]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ac:	4a8b      	ldr	r2, [pc, #556]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a4b4:	e00f      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	2101      	movs	r1, #1
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f002 f81e 	bl	800c500 <RCCEx_PLL2_Config>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a4ca:	e004      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a4d2:	e000      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a4d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10a      	bne.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a4de:	4b7f      	ldr	r3, [pc, #508]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ec:	4a7b      	ldr	r2, [pc, #492]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4ee:	430b      	orrs	r3, r1
 800a4f0:	6513      	str	r3, [r2, #80]	@ 0x50
 800a4f2:	e003      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a508:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a50c:	2300      	movs	r3, #0
 800a50e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a512:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a516:	460b      	mov	r3, r1
 800a518:	4313      	orrs	r3, r2
 800a51a:	d039      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a522:	2b03      	cmp	r3, #3
 800a524:	d81c      	bhi.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a526:	a201      	add	r2, pc, #4	@ (adr r2, 800a52c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a569 	.word	0x0800a569
 800a530:	0800a53d 	.word	0x0800a53d
 800a534:	0800a54b 	.word	0x0800a54b
 800a538:	0800a569 	.word	0x0800a569
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a53c:	4b67      	ldr	r3, [pc, #412]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a53e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a540:	4a66      	ldr	r2, [pc, #408]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a548:	e00f      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a54e:	3308      	adds	r3, #8
 800a550:	2102      	movs	r1, #2
 800a552:	4618      	mov	r0, r3
 800a554:	f001 ffd4 	bl	800c500 <RCCEx_PLL2_Config>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a55e:	e004      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a566:	e000      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a56a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10a      	bne.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a572:	4b5a      	ldr	r3, [pc, #360]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a576:	f023 0103 	bic.w	r1, r3, #3
 800a57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a57e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a580:	4a56      	ldr	r2, [pc, #344]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a582:	430b      	orrs	r3, r1
 800a584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a586:	e003      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a58c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a59c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a5a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	f000 809f 	beq.w	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a5b2:	4b4b      	ldr	r3, [pc, #300]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a4a      	ldr	r2, [pc, #296]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a5b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a5be:	f7f8 fcf5 	bl	8002fac <HAL_GetTick>
 800a5c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5c6:	e00b      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5c8:	f7f8 fcf0 	bl	8002fac <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	2b64      	cmp	r3, #100	@ 0x64
 800a5d6:	d903      	bls.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a5de:	e005      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5e0:	4b3f      	ldr	r3, [pc, #252]	@ (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0ed      	beq.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a5ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d179      	bne.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a5f4:	4b39      	ldr	r3, [pc, #228]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a600:	4053      	eors	r3, r2
 800a602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a606:	2b00      	cmp	r3, #0
 800a608:	d015      	beq.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a60a:	4b34      	ldr	r3, [pc, #208]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a60c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a60e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a612:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a616:	4b31      	ldr	r3, [pc, #196]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a61a:	4a30      	ldr	r2, [pc, #192]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a61c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a620:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a622:	4b2e      	ldr	r3, [pc, #184]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a626:	4a2d      	ldr	r2, [pc, #180]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a62c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a62e:	4a2b      	ldr	r2, [pc, #172]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a630:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a634:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a63a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a63e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a642:	d118      	bne.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a644:	f7f8 fcb2 	bl	8002fac <HAL_GetTick>
 800a648:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a64c:	e00d      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a64e:	f7f8 fcad 	bl	8002fac <HAL_GetTick>
 800a652:	4602      	mov	r2, r0
 800a654:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a658:	1ad2      	subs	r2, r2, r3
 800a65a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a65e:	429a      	cmp	r2, r3
 800a660:	d903      	bls.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a668:	e005      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a66a:	4b1c      	ldr	r3, [pc, #112]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a66c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a66e:	f003 0302 	and.w	r3, r3, #2
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0eb      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d129      	bne.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a682:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a68a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a68e:	d10e      	bne.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a690:	4b12      	ldr	r3, [pc, #72]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a69c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a6a0:	091a      	lsrs	r2, r3, #4
 800a6a2:	4b10      	ldr	r3, [pc, #64]	@ (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	4a0d      	ldr	r2, [pc, #52]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6a8:	430b      	orrs	r3, r1
 800a6aa:	6113      	str	r3, [r2, #16]
 800a6ac:	e005      	b.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	4a0a      	ldr	r2, [pc, #40]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a6b8:	6113      	str	r3, [r2, #16]
 800a6ba:	4b08      	ldr	r3, [pc, #32]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a6c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6ca:	4a04      	ldr	r2, [pc, #16]	@ (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6cc:	430b      	orrs	r3, r1
 800a6ce:	6713      	str	r3, [r2, #112]	@ 0x70
 800a6d0:	e00e      	b.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a6d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a6da:	e009      	b.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a6dc:	58024400 	.word	0x58024400
 800a6e0:	58024800 	.word	0x58024800
 800a6e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f8:	f002 0301 	and.w	r3, r2, #1
 800a6fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a700:	2300      	movs	r3, #0
 800a702:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a706:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4313      	orrs	r3, r2
 800a70e:	f000 8089 	beq.w	800a824 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a716:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a718:	2b28      	cmp	r3, #40	@ 0x28
 800a71a:	d86b      	bhi.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a71c:	a201      	add	r2, pc, #4	@ (adr r2, 800a724 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a722:	bf00      	nop
 800a724:	0800a7fd 	.word	0x0800a7fd
 800a728:	0800a7f5 	.word	0x0800a7f5
 800a72c:	0800a7f5 	.word	0x0800a7f5
 800a730:	0800a7f5 	.word	0x0800a7f5
 800a734:	0800a7f5 	.word	0x0800a7f5
 800a738:	0800a7f5 	.word	0x0800a7f5
 800a73c:	0800a7f5 	.word	0x0800a7f5
 800a740:	0800a7f5 	.word	0x0800a7f5
 800a744:	0800a7c9 	.word	0x0800a7c9
 800a748:	0800a7f5 	.word	0x0800a7f5
 800a74c:	0800a7f5 	.word	0x0800a7f5
 800a750:	0800a7f5 	.word	0x0800a7f5
 800a754:	0800a7f5 	.word	0x0800a7f5
 800a758:	0800a7f5 	.word	0x0800a7f5
 800a75c:	0800a7f5 	.word	0x0800a7f5
 800a760:	0800a7f5 	.word	0x0800a7f5
 800a764:	0800a7df 	.word	0x0800a7df
 800a768:	0800a7f5 	.word	0x0800a7f5
 800a76c:	0800a7f5 	.word	0x0800a7f5
 800a770:	0800a7f5 	.word	0x0800a7f5
 800a774:	0800a7f5 	.word	0x0800a7f5
 800a778:	0800a7f5 	.word	0x0800a7f5
 800a77c:	0800a7f5 	.word	0x0800a7f5
 800a780:	0800a7f5 	.word	0x0800a7f5
 800a784:	0800a7fd 	.word	0x0800a7fd
 800a788:	0800a7f5 	.word	0x0800a7f5
 800a78c:	0800a7f5 	.word	0x0800a7f5
 800a790:	0800a7f5 	.word	0x0800a7f5
 800a794:	0800a7f5 	.word	0x0800a7f5
 800a798:	0800a7f5 	.word	0x0800a7f5
 800a79c:	0800a7f5 	.word	0x0800a7f5
 800a7a0:	0800a7f5 	.word	0x0800a7f5
 800a7a4:	0800a7fd 	.word	0x0800a7fd
 800a7a8:	0800a7f5 	.word	0x0800a7f5
 800a7ac:	0800a7f5 	.word	0x0800a7f5
 800a7b0:	0800a7f5 	.word	0x0800a7f5
 800a7b4:	0800a7f5 	.word	0x0800a7f5
 800a7b8:	0800a7f5 	.word	0x0800a7f5
 800a7bc:	0800a7f5 	.word	0x0800a7f5
 800a7c0:	0800a7f5 	.word	0x0800a7f5
 800a7c4:	0800a7fd 	.word	0x0800a7fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7cc:	3308      	adds	r3, #8
 800a7ce:	2101      	movs	r1, #1
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 fe95 	bl	800c500 <RCCEx_PLL2_Config>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a7dc:	e00f      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7e2:	3328      	adds	r3, #40	@ 0x28
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f001 ff3c 	bl	800c664 <RCCEx_PLL3_Config>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a7f2:	e004      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7fa:	e000      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a7fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10a      	bne.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a806:	4bbf      	ldr	r3, [pc, #764]	@ (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a80a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a812:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a814:	4abb      	ldr	r2, [pc, #748]	@ (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a816:	430b      	orrs	r3, r1
 800a818:	6553      	str	r3, [r2, #84]	@ 0x54
 800a81a:	e003      	b.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	f002 0302 	and.w	r3, r2, #2
 800a830:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a834:	2300      	movs	r3, #0
 800a836:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a83a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a83e:	460b      	mov	r3, r1
 800a840:	4313      	orrs	r3, r2
 800a842:	d041      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a848:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a84a:	2b05      	cmp	r3, #5
 800a84c:	d824      	bhi.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a84e:	a201      	add	r2, pc, #4	@ (adr r2, 800a854 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a854:	0800a8a1 	.word	0x0800a8a1
 800a858:	0800a86d 	.word	0x0800a86d
 800a85c:	0800a883 	.word	0x0800a883
 800a860:	0800a8a1 	.word	0x0800a8a1
 800a864:	0800a8a1 	.word	0x0800a8a1
 800a868:	0800a8a1 	.word	0x0800a8a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a870:	3308      	adds	r3, #8
 800a872:	2101      	movs	r1, #1
 800a874:	4618      	mov	r0, r3
 800a876:	f001 fe43 	bl	800c500 <RCCEx_PLL2_Config>
 800a87a:	4603      	mov	r3, r0
 800a87c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a880:	e00f      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a886:	3328      	adds	r3, #40	@ 0x28
 800a888:	2101      	movs	r1, #1
 800a88a:	4618      	mov	r0, r3
 800a88c:	f001 feea 	bl	800c664 <RCCEx_PLL3_Config>
 800a890:	4603      	mov	r3, r0
 800a892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a896:	e004      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a89e:	e000      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a8a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10a      	bne.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a8aa:	4b96      	ldr	r3, [pc, #600]	@ (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ae:	f023 0107 	bic.w	r1, r3, #7
 800a8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8b8:	4a92      	ldr	r2, [pc, #584]	@ (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8ba:	430b      	orrs	r3, r1
 800a8bc:	6553      	str	r3, [r2, #84]	@ 0x54
 800a8be:	e003      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f002 0304 	and.w	r3, r2, #4
 800a8d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8d8:	2300      	movs	r3, #0
 800a8da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	d044      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8f0:	2b05      	cmp	r3, #5
 800a8f2:	d825      	bhi.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a8f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fa:	bf00      	nop
 800a8fc:	0800a949 	.word	0x0800a949
 800a900:	0800a915 	.word	0x0800a915
 800a904:	0800a92b 	.word	0x0800a92b
 800a908:	0800a949 	.word	0x0800a949
 800a90c:	0800a949 	.word	0x0800a949
 800a910:	0800a949 	.word	0x0800a949
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a918:	3308      	adds	r3, #8
 800a91a:	2101      	movs	r1, #1
 800a91c:	4618      	mov	r0, r3
 800a91e:	f001 fdef 	bl	800c500 <RCCEx_PLL2_Config>
 800a922:	4603      	mov	r3, r0
 800a924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a928:	e00f      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a92e:	3328      	adds	r3, #40	@ 0x28
 800a930:	2101      	movs	r1, #1
 800a932:	4618      	mov	r0, r3
 800a934:	f001 fe96 	bl	800c664 <RCCEx_PLL3_Config>
 800a938:	4603      	mov	r3, r0
 800a93a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a93e:	e004      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a946:	e000      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a94a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10b      	bne.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a952:	4b6c      	ldr	r3, [pc, #432]	@ (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a956:	f023 0107 	bic.w	r1, r3, #7
 800a95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a95e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a962:	4a68      	ldr	r2, [pc, #416]	@ (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a964:	430b      	orrs	r3, r1
 800a966:	6593      	str	r3, [r2, #88]	@ 0x58
 800a968:	e003      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a96a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a96e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f002 0320 	and.w	r3, r2, #32
 800a97e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a982:	2300      	movs	r3, #0
 800a984:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a988:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a98c:	460b      	mov	r3, r1
 800a98e:	4313      	orrs	r3, r2
 800a990:	d055      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a99a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a99e:	d033      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a9a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9a4:	d82c      	bhi.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9aa:	d02f      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a9ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9b0:	d826      	bhi.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a9b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9b6:	d02b      	beq.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a9b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9bc:	d820      	bhi.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a9be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9c2:	d012      	beq.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a9c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9c8:	d81a      	bhi.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d022      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a9ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9d2:	d115      	bne.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9d8:	3308      	adds	r3, #8
 800a9da:	2100      	movs	r1, #0
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f001 fd8f 	bl	800c500 <RCCEx_PLL2_Config>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a9e8:	e015      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9ee:	3328      	adds	r3, #40	@ 0x28
 800a9f0:	2102      	movs	r1, #2
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f001 fe36 	bl	800c664 <RCCEx_PLL3_Config>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a9fe:	e00a      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa06:	e006      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa08:	bf00      	nop
 800aa0a:	e004      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa0c:	bf00      	nop
 800aa0e:	e002      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa10:	bf00      	nop
 800aa12:	e000      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10b      	bne.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa1e:	4b39      	ldr	r3, [pc, #228]	@ (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800aa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa2e:	4a35      	ldr	r2, [pc, #212]	@ (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa30:	430b      	orrs	r3, r1
 800aa32:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa34:	e003      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aa3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800aa4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aa54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	d058      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aa5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aa6a:	d033      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aa6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aa70:	d82c      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa76:	d02f      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800aa78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa7c:	d826      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa82:	d02b      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800aa84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa88:	d820      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa8e:	d012      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800aa90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa94:	d81a      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d022      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800aa9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa9e:	d115      	bne.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaa4:	3308      	adds	r3, #8
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f001 fd29 	bl	800c500 <RCCEx_PLL2_Config>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aab4:	e015      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaba:	3328      	adds	r3, #40	@ 0x28
 800aabc:	2102      	movs	r1, #2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f001 fdd0 	bl	800c664 <RCCEx_PLL3_Config>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aaca:	e00a      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aad2:	e006      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aad4:	bf00      	nop
 800aad6:	e004      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aad8:	bf00      	nop
 800aada:	e002      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aadc:	bf00      	nop
 800aade:	e000      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10e      	bne.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aaea:	4b06      	ldr	r3, [pc, #24]	@ (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aaec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800aaf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aafa:	4a02      	ldr	r2, [pc, #8]	@ (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aafc:	430b      	orrs	r3, r1
 800aafe:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab00:	e006      	b.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ab02:	bf00      	nop
 800ab04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ab1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab20:	2300      	movs	r3, #0
 800ab22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	d055      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ab30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ab3c:	d033      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800ab3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ab42:	d82c      	bhi.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ab44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab48:	d02f      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800ab4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab4e:	d826      	bhi.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ab50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ab54:	d02b      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800ab56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ab5a:	d820      	bhi.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ab5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab60:	d012      	beq.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ab62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab66:	d81a      	bhi.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d022      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ab6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab70:	d115      	bne.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab76:	3308      	adds	r3, #8
 800ab78:	2100      	movs	r1, #0
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f001 fcc0 	bl	800c500 <RCCEx_PLL2_Config>
 800ab80:	4603      	mov	r3, r0
 800ab82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab86:	e015      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab8c:	3328      	adds	r3, #40	@ 0x28
 800ab8e:	2102      	movs	r1, #2
 800ab90:	4618      	mov	r0, r3
 800ab92:	f001 fd67 	bl	800c664 <RCCEx_PLL3_Config>
 800ab96:	4603      	mov	r3, r0
 800ab98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab9c:	e00a      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aba4:	e006      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aba6:	bf00      	nop
 800aba8:	e004      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800abaa:	bf00      	nop
 800abac:	e002      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800abae:	bf00      	nop
 800abb0:	e000      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800abb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10b      	bne.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800abbc:	4ba1      	ldr	r3, [pc, #644]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abc0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800abc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800abcc:	4a9d      	ldr	r2, [pc, #628]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abce:	430b      	orrs	r3, r1
 800abd0:	6593      	str	r3, [r2, #88]	@ 0x58
 800abd2:	e003      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800abdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe4:	f002 0308 	and.w	r3, r2, #8
 800abe8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800abec:	2300      	movs	r3, #0
 800abee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800abf2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800abf6:	460b      	mov	r3, r1
 800abf8:	4313      	orrs	r3, r2
 800abfa:	d01e      	beq.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800abfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac08:	d10c      	bne.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac0e:	3328      	adds	r3, #40	@ 0x28
 800ac10:	2102      	movs	r1, #2
 800ac12:	4618      	mov	r0, r3
 800ac14:	f001 fd26 	bl	800c664 <RCCEx_PLL3_Config>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ac24:	4b87      	ldr	r3, [pc, #540]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ac2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac34:	4a83      	ldr	r2, [pc, #524]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac36:	430b      	orrs	r3, r1
 800ac38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac42:	f002 0310 	and.w	r3, r2, #16
 800ac46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ac50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ac54:	460b      	mov	r3, r1
 800ac56:	4313      	orrs	r3, r2
 800ac58:	d01e      	beq.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ac5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac66:	d10c      	bne.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac6c:	3328      	adds	r3, #40	@ 0x28
 800ac6e:	2102      	movs	r1, #2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f001 fcf7 	bl	800c664 <RCCEx_PLL3_Config>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac82:	4b70      	ldr	r3, [pc, #448]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ac8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac92:	4a6c      	ldr	r2, [pc, #432]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac94:	430b      	orrs	r3, r1
 800ac96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800aca4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aca8:	2300      	movs	r3, #0
 800acaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800acae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800acb2:	460b      	mov	r3, r1
 800acb4:	4313      	orrs	r3, r2
 800acb6:	d03e      	beq.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800acb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800acc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acc4:	d022      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800acc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acca:	d81b      	bhi.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800accc:	2b00      	cmp	r3, #0
 800acce:	d003      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800acd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acd4:	d00b      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800acd6:	e015      	b.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acdc:	3308      	adds	r3, #8
 800acde:	2100      	movs	r1, #0
 800ace0:	4618      	mov	r0, r3
 800ace2:	f001 fc0d 	bl	800c500 <RCCEx_PLL2_Config>
 800ace6:	4603      	mov	r3, r0
 800ace8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800acec:	e00f      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800acee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acf2:	3328      	adds	r3, #40	@ 0x28
 800acf4:	2102      	movs	r1, #2
 800acf6:	4618      	mov	r0, r3
 800acf8:	f001 fcb4 	bl	800c664 <RCCEx_PLL3_Config>
 800acfc:	4603      	mov	r3, r0
 800acfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad02:	e004      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad0a:	e000      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ad0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10b      	bne.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad16:	4b4b      	ldr	r3, [pc, #300]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ad1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ad26:	4a47      	ldr	r2, [pc, #284]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad28:	430b      	orrs	r3, r1
 800ad2a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad2c:	e003      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ad42:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ad44:	2300      	movs	r3, #0
 800ad46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	d03b      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ad52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad5e:	d01f      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ad60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad64:	d818      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ad66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad6a:	d003      	beq.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ad6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad70:	d007      	beq.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ad72:	e011      	b.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad74:	4b33      	ldr	r3, [pc, #204]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad78:	4a32      	ldr	r2, [pc, #200]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad80:	e00f      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad86:	3328      	adds	r3, #40	@ 0x28
 800ad88:	2101      	movs	r1, #1
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f001 fc6a 	bl	800c664 <RCCEx_PLL3_Config>
 800ad90:	4603      	mov	r3, r0
 800ad92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad96:	e004      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad9e:	e000      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ada0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ada2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10b      	bne.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800adaa:	4b26      	ldr	r3, [pc, #152]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800adb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adba:	4a22      	ldr	r2, [pc, #136]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adbc:	430b      	orrs	r3, r1
 800adbe:	6553      	str	r3, [r2, #84]	@ 0x54
 800adc0:	e003      	b.n	800adca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800adca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800add6:	673b      	str	r3, [r7, #112]	@ 0x70
 800add8:	2300      	movs	r3, #0
 800adda:	677b      	str	r3, [r7, #116]	@ 0x74
 800addc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ade0:	460b      	mov	r3, r1
 800ade2:	4313      	orrs	r3, r2
 800ade4:	d034      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ade6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adec:	2b00      	cmp	r3, #0
 800adee:	d003      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800adf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adf4:	d007      	beq.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800adf6:	e011      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adf8:	4b12      	ldr	r3, [pc, #72]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adfc:	4a11      	ldr	r2, [pc, #68]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae04:	e00e      	b.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	2102      	movs	r1, #2
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f001 fb76 	bl	800c500 <RCCEx_PLL2_Config>
 800ae14:	4603      	mov	r3, r0
 800ae16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae1a:	e003      	b.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10d      	bne.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ae2c:	4b05      	ldr	r3, [pc, #20]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ae34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae3a:	4a02      	ldr	r2, [pc, #8]	@ (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae3c:	430b      	orrs	r3, r1
 800ae3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ae40:	e006      	b.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ae42:	bf00      	nop
 800ae44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae58:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ae5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae5e:	2300      	movs	r3, #0
 800ae60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae62:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ae66:	460b      	mov	r3, r1
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	d00c      	beq.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae70:	3328      	adds	r3, #40	@ 0x28
 800ae72:	2102      	movs	r1, #2
 800ae74:	4618      	mov	r0, r3
 800ae76:	f001 fbf5 	bl	800c664 <RCCEx_PLL3_Config>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ae86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ae92:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae94:	2300      	movs	r3, #0
 800ae96:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae98:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	d038      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800aea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aeae:	d018      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800aeb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aeb4:	d811      	bhi.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800aeb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeba:	d014      	beq.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800aebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aec0:	d80b      	bhi.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d011      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800aec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aeca:	d106      	bne.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aecc:	4bc3      	ldr	r3, [pc, #780]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed0:	4ac2      	ldr	r2, [pc, #776]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aed6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800aed8:	e008      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aee0:	e004      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800aee2:	bf00      	nop
 800aee4:	e002      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800aee6:	bf00      	nop
 800aee8:	e000      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800aeea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10b      	bne.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aef4:	4bb9      	ldr	r3, [pc, #740]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aef8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aefc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af04:	4ab5      	ldr	r2, [pc, #724]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af06:	430b      	orrs	r3, r1
 800af08:	6553      	str	r3, [r2, #84]	@ 0x54
 800af0a:	e003      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800af14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800af20:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af22:	2300      	movs	r3, #0
 800af24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800af2a:	460b      	mov	r3, r1
 800af2c:	4313      	orrs	r3, r2
 800af2e:	d009      	beq.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800af30:	4baa      	ldr	r3, [pc, #680]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800af38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af3e:	4aa7      	ldr	r2, [pc, #668]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af40:	430b      	orrs	r3, r1
 800af42:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800af44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800af50:	653b      	str	r3, [r7, #80]	@ 0x50
 800af52:	2300      	movs	r3, #0
 800af54:	657b      	str	r3, [r7, #84]	@ 0x54
 800af56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800af5a:	460b      	mov	r3, r1
 800af5c:	4313      	orrs	r3, r2
 800af5e:	d00a      	beq.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800af60:	4b9e      	ldr	r3, [pc, #632]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800af68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800af70:	4a9a      	ldr	r2, [pc, #616]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af72:	430b      	orrs	r3, r1
 800af74:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800af82:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af84:	2300      	movs	r3, #0
 800af86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800af8c:	460b      	mov	r3, r1
 800af8e:	4313      	orrs	r3, r2
 800af90:	d009      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af92:	4b92      	ldr	r3, [pc, #584]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af96:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800af9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afa0:	4a8e      	ldr	r2, [pc, #568]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afa2:	430b      	orrs	r3, r1
 800afa4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800afa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800afb2:	643b      	str	r3, [r7, #64]	@ 0x40
 800afb4:	2300      	movs	r3, #0
 800afb6:	647b      	str	r3, [r7, #68]	@ 0x44
 800afb8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800afbc:	460b      	mov	r3, r1
 800afbe:	4313      	orrs	r3, r2
 800afc0:	d00e      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800afc2:	4b86      	ldr	r3, [pc, #536]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	4a85      	ldr	r2, [pc, #532]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800afcc:	6113      	str	r3, [r2, #16]
 800afce:	4b83      	ldr	r3, [pc, #524]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afd0:	6919      	ldr	r1, [r3, #16]
 800afd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800afda:	4a80      	ldr	r2, [pc, #512]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afdc:	430b      	orrs	r3, r1
 800afde:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800afe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800afec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800afee:	2300      	movs	r3, #0
 800aff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aff2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800aff6:	460b      	mov	r3, r1
 800aff8:	4313      	orrs	r3, r2
 800affa:	d009      	beq.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800affc:	4b77      	ldr	r3, [pc, #476]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800affe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b000:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b00a:	4a74      	ldr	r2, [pc, #464]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b00c:	430b      	orrs	r3, r1
 800b00e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b018:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b01c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b01e:	2300      	movs	r3, #0
 800b020:	637b      	str	r3, [r7, #52]	@ 0x34
 800b022:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b026:	460b      	mov	r3, r1
 800b028:	4313      	orrs	r3, r2
 800b02a:	d00a      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b02c:	4b6b      	ldr	r3, [pc, #428]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b02e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b030:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b03c:	4a67      	ldr	r2, [pc, #412]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b03e:	430b      	orrs	r3, r1
 800b040:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	2100      	movs	r1, #0
 800b04c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b04e:	f003 0301 	and.w	r3, r3, #1
 800b052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b054:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b058:	460b      	mov	r3, r1
 800b05a:	4313      	orrs	r3, r2
 800b05c:	d011      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b062:	3308      	adds	r3, #8
 800b064:	2100      	movs	r1, #0
 800b066:	4618      	mov	r0, r3
 800b068:	f001 fa4a 	bl	800c500 <RCCEx_PLL2_Config>
 800b06c:	4603      	mov	r3, r0
 800b06e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b076:	2b00      	cmp	r3, #0
 800b078:	d003      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b07a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b07e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08a:	2100      	movs	r1, #0
 800b08c:	6239      	str	r1, [r7, #32]
 800b08e:	f003 0302 	and.w	r3, r3, #2
 800b092:	627b      	str	r3, [r7, #36]	@ 0x24
 800b094:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b098:	460b      	mov	r3, r1
 800b09a:	4313      	orrs	r3, r2
 800b09c:	d011      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	2101      	movs	r1, #1
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f001 fa2a 	bl	800c500 <RCCEx_PLL2_Config>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b0b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d003      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	61b9      	str	r1, [r7, #24]
 800b0ce:	f003 0304 	and.w	r3, r3, #4
 800b0d2:	61fb      	str	r3, [r7, #28]
 800b0d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	d011      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	2102      	movs	r1, #2
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f001 fa0a 	bl	800c500 <RCCEx_PLL2_Config>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b0f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d003      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	2100      	movs	r1, #0
 800b10c:	6139      	str	r1, [r7, #16]
 800b10e:	f003 0308 	and.w	r3, r3, #8
 800b112:	617b      	str	r3, [r7, #20]
 800b114:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b118:	460b      	mov	r3, r1
 800b11a:	4313      	orrs	r3, r2
 800b11c:	d011      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b122:	3328      	adds	r3, #40	@ 0x28
 800b124:	2100      	movs	r1, #0
 800b126:	4618      	mov	r0, r3
 800b128:	f001 fa9c 	bl	800c664 <RCCEx_PLL3_Config>
 800b12c:	4603      	mov	r3, r0
 800b12e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b13a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b13e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	2100      	movs	r1, #0
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	f003 0310 	and.w	r3, r3, #16
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b158:	460b      	mov	r3, r1
 800b15a:	4313      	orrs	r3, r2
 800b15c:	d011      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b162:	3328      	adds	r3, #40	@ 0x28
 800b164:	2101      	movs	r1, #1
 800b166:	4618      	mov	r0, r3
 800b168:	f001 fa7c 	bl	800c664 <RCCEx_PLL3_Config>
 800b16c:	4603      	mov	r3, r0
 800b16e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b17a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b17e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18a:	2100      	movs	r1, #0
 800b18c:	6039      	str	r1, [r7, #0]
 800b18e:	f003 0320 	and.w	r3, r3, #32
 800b192:	607b      	str	r3, [r7, #4]
 800b194:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b198:	460b      	mov	r3, r1
 800b19a:	4313      	orrs	r3, r2
 800b19c:	d011      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1a2:	3328      	adds	r3, #40	@ 0x28
 800b1a4:	2102      	movs	r1, #2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f001 fa5c 	bl	800c664 <RCCEx_PLL3_Config>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b1b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b1c2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d101      	bne.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e000      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1dc:	58024400 	.word	0x58024400

0800b1e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b090      	sub	sp, #64	@ 0x40
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ee:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b1f2:	430b      	orrs	r3, r1
 800b1f4:	f040 8094 	bne.w	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b1f8:	4b9e      	ldr	r3, [pc, #632]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1fc:	f003 0307 	and.w	r3, r3, #7
 800b200:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b204:	2b04      	cmp	r3, #4
 800b206:	f200 8087 	bhi.w	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b20a:	a201      	add	r2, pc, #4	@ (adr r2, 800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b210:	0800b225 	.word	0x0800b225
 800b214:	0800b24d 	.word	0x0800b24d
 800b218:	0800b275 	.word	0x0800b275
 800b21c:	0800b311 	.word	0x0800b311
 800b220:	0800b29d 	.word	0x0800b29d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b224:	4b93      	ldr	r3, [pc, #588]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b22c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b230:	d108      	bne.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b236:	4618      	mov	r0, r3
 800b238:	f001 f810 	bl	800c25c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b240:	f000 bd45 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b244:	2300      	movs	r3, #0
 800b246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b248:	f000 bd41 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b24c:	4b89      	ldr	r3, [pc, #548]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b258:	d108      	bne.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b25a:	f107 0318 	add.w	r3, r7, #24
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 fd54 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b268:	f000 bd31 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b26c:	2300      	movs	r3, #0
 800b26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b270:	f000 bd2d 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b274:	4b7f      	ldr	r3, [pc, #508]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b27c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b280:	d108      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b282:	f107 030c 	add.w	r3, r7, #12
 800b286:	4618      	mov	r0, r3
 800b288:	f000 fe94 	bl	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b290:	f000 bd1d 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b298:	f000 bd19 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b29c:	4b75      	ldr	r3, [pc, #468]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b29e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b2a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2a6:	4b73      	ldr	r3, [pc, #460]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 0304 	and.w	r3, r3, #4
 800b2ae:	2b04      	cmp	r3, #4
 800b2b0:	d10c      	bne.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d109      	bne.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2b8:	4b6e      	ldr	r3, [pc, #440]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	08db      	lsrs	r3, r3, #3
 800b2be:	f003 0303 	and.w	r3, r3, #3
 800b2c2:	4a6d      	ldr	r2, [pc, #436]	@ (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b2c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2ca:	e01f      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2cc:	4b69      	ldr	r3, [pc, #420]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2d8:	d106      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2e0:	d102      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2e2:	4b66      	ldr	r3, [pc, #408]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2e6:	e011      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2e8:	4b62      	ldr	r3, [pc, #392]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2f4:	d106      	bne.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2fc:	d102      	bne.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2fe:	4b60      	ldr	r3, [pc, #384]	@ (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b302:	e003      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b308:	f000 bce1 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b30c:	f000 bcdf 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b310:	4b5c      	ldr	r3, [pc, #368]	@ (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b314:	f000 bcdb 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b31c:	f000 bcd7 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b324:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b328:	430b      	orrs	r3, r1
 800b32a:	f040 80ad 	bne.w	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b32e:	4b51      	ldr	r3, [pc, #324]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b332:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b336:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b33e:	d056      	beq.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b346:	f200 8090 	bhi.w	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34c:	2bc0      	cmp	r3, #192	@ 0xc0
 800b34e:	f000 8088 	beq.w	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b354:	2bc0      	cmp	r3, #192	@ 0xc0
 800b356:	f200 8088 	bhi.w	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35c:	2b80      	cmp	r3, #128	@ 0x80
 800b35e:	d032      	beq.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	2b80      	cmp	r3, #128	@ 0x80
 800b364:	f200 8081 	bhi.w	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b370:	2b40      	cmp	r3, #64	@ 0x40
 800b372:	d014      	beq.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b374:	e079      	b.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b376:	4b3f      	ldr	r3, [pc, #252]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b37e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b382:	d108      	bne.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 ff67 	bl	800c25c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b392:	f000 bc9c 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b396:	2300      	movs	r3, #0
 800b398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b39a:	f000 bc98 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b39e:	4b35      	ldr	r3, [pc, #212]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3aa:	d108      	bne.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3ac:	f107 0318 	add.w	r3, r7, #24
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 fcab 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ba:	f000 bc88 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3c2:	f000 bc84 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3c6:	4b2b      	ldr	r3, [pc, #172]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3d2:	d108      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3d4:	f107 030c 	add.w	r3, r7, #12
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f000 fdeb 	bl	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3e2:	f000 bc74 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ea:	f000 bc70 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3ee:	4b21      	ldr	r3, [pc, #132]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b3f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3f8:	4b1e      	ldr	r3, [pc, #120]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f003 0304 	and.w	r3, r3, #4
 800b400:	2b04      	cmp	r3, #4
 800b402:	d10c      	bne.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b406:	2b00      	cmp	r3, #0
 800b408:	d109      	bne.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b40a:	4b1a      	ldr	r3, [pc, #104]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	08db      	lsrs	r3, r3, #3
 800b410:	f003 0303 	and.w	r3, r3, #3
 800b414:	4a18      	ldr	r2, [pc, #96]	@ (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b416:	fa22 f303 	lsr.w	r3, r2, r3
 800b41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b41c:	e01f      	b.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b41e:	4b15      	ldr	r3, [pc, #84]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b42a:	d106      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b42c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b42e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b432:	d102      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b434:	4b11      	ldr	r3, [pc, #68]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b438:	e011      	b.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b43a:	4b0e      	ldr	r3, [pc, #56]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b446:	d106      	bne.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b44a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b44e:	d102      	bne.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b450:	4b0b      	ldr	r3, [pc, #44]	@ (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b454:	e003      	b.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b456:	2300      	movs	r3, #0
 800b458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b45a:	f000 bc38 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b45e:	f000 bc36 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b462:	4b08      	ldr	r3, [pc, #32]	@ (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b466:	f000 bc32 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b46e:	f000 bc2e 	b.w	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b472:	bf00      	nop
 800b474:	58024400 	.word	0x58024400
 800b478:	03d09000 	.word	0x03d09000
 800b47c:	003d0900 	.word	0x003d0900
 800b480:	017d7840 	.word	0x017d7840
 800b484:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b48c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b490:	430b      	orrs	r3, r1
 800b492:	f040 809c 	bne.w	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b496:	4b9e      	ldr	r3, [pc, #632]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b49a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b49e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b4a6:	d054      	beq.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b4ae:	f200 808b 	bhi.w	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b4b8:	f000 8083 	beq.w	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b4c2:	f200 8081 	bhi.w	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b4cc:	d02f      	beq.n	800b52e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b4d4:	d878      	bhi.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d004      	beq.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4e2:	d012      	beq.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b4e4:	e070      	b.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4e6:	4b8a      	ldr	r3, [pc, #552]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4f2:	d107      	bne.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f000 feaf 	bl	800c25c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b502:	e3e4      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b508:	e3e1      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b50a:	4b81      	ldr	r3, [pc, #516]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b512:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b516:	d107      	bne.n	800b528 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b518:	f107 0318 	add.w	r3, r7, #24
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 fbf5 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b526:	e3d2      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b528:	2300      	movs	r3, #0
 800b52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b52c:	e3cf      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b52e:	4b78      	ldr	r3, [pc, #480]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b53a:	d107      	bne.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b53c:	f107 030c 	add.w	r3, r7, #12
 800b540:	4618      	mov	r0, r3
 800b542:	f000 fd37 	bl	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b54a:	e3c0      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b550:	e3bd      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b552:	4b6f      	ldr	r3, [pc, #444]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b556:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b55a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b55c:	4b6c      	ldr	r3, [pc, #432]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0304 	and.w	r3, r3, #4
 800b564:	2b04      	cmp	r3, #4
 800b566:	d10c      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d109      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b56e:	4b68      	ldr	r3, [pc, #416]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	08db      	lsrs	r3, r3, #3
 800b574:	f003 0303 	and.w	r3, r3, #3
 800b578:	4a66      	ldr	r2, [pc, #408]	@ (800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b57a:	fa22 f303 	lsr.w	r3, r2, r3
 800b57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b580:	e01e      	b.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b582:	4b63      	ldr	r3, [pc, #396]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b58a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b58e:	d106      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b596:	d102      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b598:	4b5f      	ldr	r3, [pc, #380]	@ (800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b59c:	e010      	b.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b59e:	4b5c      	ldr	r3, [pc, #368]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5aa:	d106      	bne.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b5ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5b2:	d102      	bne.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b5b4:	4b59      	ldr	r3, [pc, #356]	@ (800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5b8:	e002      	b.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b5be:	e386      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b5c0:	e385      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5c2:	4b57      	ldr	r3, [pc, #348]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c6:	e382      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5cc:	e37f      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b5ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5d2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b5d6:	430b      	orrs	r3, r1
 800b5d8:	f040 80a7 	bne.w	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b5dc:	4b4c      	ldr	r3, [pc, #304]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5e0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b5e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b5ec:	d055      	beq.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b5f4:	f200 8096 	bhi.w	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b5fe:	f000 8084 	beq.w	800b70a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b604:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b608:	f200 808c 	bhi.w	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b612:	d030      	beq.n	800b676 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b61a:	f200 8083 	bhi.w	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b620:	2b00      	cmp	r3, #0
 800b622:	d004      	beq.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b626:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b62a:	d012      	beq.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b62c:	e07a      	b.n	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b62e:	4b38      	ldr	r3, [pc, #224]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b63a:	d107      	bne.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b63c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b640:	4618      	mov	r0, r3
 800b642:	f000 fe0b 	bl	800c25c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b64a:	e340      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b650:	e33d      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b652:	4b2f      	ldr	r3, [pc, #188]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b65a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b65e:	d107      	bne.n	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b660:	f107 0318 	add.w	r3, r7, #24
 800b664:	4618      	mov	r0, r3
 800b666:	f000 fb51 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b66e:	e32e      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b674:	e32b      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b676:	4b26      	ldr	r3, [pc, #152]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b67e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b682:	d107      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b684:	f107 030c 	add.w	r3, r7, #12
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 fc93 	bl	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b692:	e31c      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b694:	2300      	movs	r3, #0
 800b696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b698:	e319      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b69a:	4b1d      	ldr	r3, [pc, #116]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b69c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b69e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b6a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0304 	and.w	r3, r3, #4
 800b6ac:	2b04      	cmp	r3, #4
 800b6ae:	d10c      	bne.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b6b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d109      	bne.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6b6:	4b16      	ldr	r3, [pc, #88]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	08db      	lsrs	r3, r3, #3
 800b6bc:	f003 0303 	and.w	r3, r3, #3
 800b6c0:	4a14      	ldr	r2, [pc, #80]	@ (800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b6c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6c8:	e01e      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6ca:	4b11      	ldr	r3, [pc, #68]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6d6:	d106      	bne.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6de:	d102      	bne.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6e4:	e010      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6f2:	d106      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6fa:	d102      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6fc:	4b07      	ldr	r3, [pc, #28]	@ (800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b700:	e002      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b702:	2300      	movs	r3, #0
 800b704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b706:	e2e2      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b708:	e2e1      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b70a:	4b05      	ldr	r3, [pc, #20]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b70e:	e2de      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b710:	58024400 	.word	0x58024400
 800b714:	03d09000 	.word	0x03d09000
 800b718:	003d0900 	.word	0x003d0900
 800b71c:	017d7840 	.word	0x017d7840
 800b720:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b724:	2300      	movs	r3, #0
 800b726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b728:	e2d1      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b72a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b72e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b732:	430b      	orrs	r3, r1
 800b734:	f040 809c 	bne.w	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b738:	4b93      	ldr	r3, [pc, #588]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b73a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b73c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b740:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b744:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b748:	d054      	beq.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b750:	f200 808b 	bhi.w	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b756:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b75a:	f000 8083 	beq.w	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b760:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b764:	f200 8081 	bhi.w	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b76a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b76e:	d02f      	beq.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b776:	d878      	bhi.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d004      	beq.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b784:	d012      	beq.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b786:	e070      	b.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b788:	4b7f      	ldr	r3, [pc, #508]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b790:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b794:	d107      	bne.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b79a:	4618      	mov	r0, r3
 800b79c:	f000 fd5e 	bl	800c25c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7a4:	e293      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7aa:	e290      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7ac:	4b76      	ldr	r3, [pc, #472]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7b8:	d107      	bne.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7ba:	f107 0318 	add.w	r3, r7, #24
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f000 faa4 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7c8:	e281      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7ce:	e27e      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7d0:	4b6d      	ldr	r3, [pc, #436]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7dc:	d107      	bne.n	800b7ee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7de:	f107 030c 	add.w	r3, r7, #12
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 fbe6 	bl	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7ec:	e26f      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7f2:	e26c      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b7f4:	4b64      	ldr	r3, [pc, #400]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b7fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b7fe:	4b62      	ldr	r3, [pc, #392]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f003 0304 	and.w	r3, r3, #4
 800b806:	2b04      	cmp	r3, #4
 800b808:	d10c      	bne.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d109      	bne.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b810:	4b5d      	ldr	r3, [pc, #372]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	08db      	lsrs	r3, r3, #3
 800b816:	f003 0303 	and.w	r3, r3, #3
 800b81a:	4a5c      	ldr	r2, [pc, #368]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b81c:	fa22 f303 	lsr.w	r3, r2, r3
 800b820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b822:	e01e      	b.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b824:	4b58      	ldr	r3, [pc, #352]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b82c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b830:	d106      	bne.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b838:	d102      	bne.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b83a:	4b55      	ldr	r3, [pc, #340]	@ (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b83e:	e010      	b.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b840:	4b51      	ldr	r3, [pc, #324]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b848:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b84c:	d106      	bne.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b84e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b854:	d102      	bne.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b856:	4b4f      	ldr	r3, [pc, #316]	@ (800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b85a:	e002      	b.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b85c:	2300      	movs	r3, #0
 800b85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b860:	e235      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b862:	e234      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b864:	4b4c      	ldr	r3, [pc, #304]	@ (800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b868:	e231      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b86e:	e22e      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b870:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b874:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b878:	430b      	orrs	r3, r1
 800b87a:	f040 808f 	bne.w	800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b87e:	4b42      	ldr	r3, [pc, #264]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b882:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b886:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b88e:	d06b      	beq.n	800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b892:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b896:	d874      	bhi.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b89e:	d056      	beq.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b8a6:	d86c      	bhi.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b8ae:	d03b      	beq.n	800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b8b6:	d864      	bhi.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8be:	d021      	beq.n	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8c6:	d85c      	bhi.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d004      	beq.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8d4:	d004      	beq.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b8d6:	e054      	b.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b8d8:	f7fe fa4c 	bl	8009d74 <HAL_RCC_GetPCLK1Freq>
 800b8dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8de:	e1f6      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8e0:	4b29      	ldr	r3, [pc, #164]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8ec:	d107      	bne.n	800b8fe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8ee:	f107 0318 	add.w	r3, r7, #24
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f000 fa0a 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8fc:	e1e7      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b902:	e1e4      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b904:	4b20      	ldr	r3, [pc, #128]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b90c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b910:	d107      	bne.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b912:	f107 030c 	add.w	r3, r7, #12
 800b916:	4618      	mov	r0, r3
 800b918:	f000 fb4c 	bl	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b920:	e1d5      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b926:	e1d2      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b928:	4b17      	ldr	r3, [pc, #92]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 0304 	and.w	r3, r3, #4
 800b930:	2b04      	cmp	r3, #4
 800b932:	d109      	bne.n	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b934:	4b14      	ldr	r3, [pc, #80]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	08db      	lsrs	r3, r3, #3
 800b93a:	f003 0303 	and.w	r3, r3, #3
 800b93e:	4a13      	ldr	r2, [pc, #76]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b940:	fa22 f303 	lsr.w	r3, r2, r3
 800b944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b946:	e1c2      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b94c:	e1bf      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b94e:	4b0e      	ldr	r3, [pc, #56]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b95a:	d102      	bne.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b95c:	4b0c      	ldr	r3, [pc, #48]	@ (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b960:	e1b5      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b962:	2300      	movs	r3, #0
 800b964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b966:	e1b2      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b968:	4b07      	ldr	r3, [pc, #28]	@ (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b970:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b974:	d102      	bne.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b976:	4b07      	ldr	r3, [pc, #28]	@ (800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b97a:	e1a8      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b980:	e1a5      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b986:	e1a2      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b988:	58024400 	.word	0x58024400
 800b98c:	03d09000 	.word	0x03d09000
 800b990:	003d0900 	.word	0x003d0900
 800b994:	017d7840 	.word	0x017d7840
 800b998:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b99c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9a0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b9a4:	430b      	orrs	r3, r1
 800b9a6:	d173      	bne.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b9a8:	4b9c      	ldr	r3, [pc, #624]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b9b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9b8:	d02f      	beq.n	800ba1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9c0:	d863      	bhi.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d004      	beq.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9ce:	d012      	beq.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b9d0:	e05b      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9d2:	4b92      	ldr	r3, [pc, #584]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9de:	d107      	bne.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9e0:	f107 0318 	add.w	r3, r7, #24
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 f991 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9ee:	e16e      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9f4:	e16b      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9f6:	4b89      	ldr	r3, [pc, #548]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba02:	d107      	bne.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba04:	f107 030c 	add.w	r3, r7, #12
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 fad3 	bl	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba12:	e15c      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba18:	e159      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ba1a:	4b80      	ldr	r3, [pc, #512]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ba22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba24:	4b7d      	ldr	r3, [pc, #500]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f003 0304 	and.w	r3, r3, #4
 800ba2c:	2b04      	cmp	r3, #4
 800ba2e:	d10c      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ba30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d109      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba36:	4b79      	ldr	r3, [pc, #484]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	08db      	lsrs	r3, r3, #3
 800ba3c:	f003 0303 	and.w	r3, r3, #3
 800ba40:	4a77      	ldr	r2, [pc, #476]	@ (800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ba42:	fa22 f303 	lsr.w	r3, r2, r3
 800ba46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba48:	e01e      	b.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ba4a:	4b74      	ldr	r3, [pc, #464]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba56:	d106      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ba58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba5e:	d102      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ba60:	4b70      	ldr	r3, [pc, #448]	@ (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ba62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba64:	e010      	b.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba66:	4b6d      	ldr	r3, [pc, #436]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba72:	d106      	bne.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ba74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba7a:	d102      	bne.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba7c:	4b6a      	ldr	r3, [pc, #424]	@ (800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ba7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba80:	e002      	b.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba82:	2300      	movs	r3, #0
 800ba84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ba86:	e122      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba88:	e121      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba8e:	e11e      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ba90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba94:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ba98:	430b      	orrs	r3, r1
 800ba9a:	d133      	bne.n	800bb04 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ba9c:	4b5f      	ldr	r3, [pc, #380]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800baa4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800baa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d004      	beq.n	800bab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800baac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bab2:	d012      	beq.n	800bada <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800bab4:	e023      	b.n	800bafe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bab6:	4b59      	ldr	r3, [pc, #356]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800babe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bac2:	d107      	bne.n	800bad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bac8:	4618      	mov	r0, r3
 800baca:	f000 fbc7 	bl	800c25c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bad2:	e0fc      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bad4:	2300      	movs	r3, #0
 800bad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bad8:	e0f9      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bada:	4b50      	ldr	r3, [pc, #320]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bae6:	d107      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bae8:	f107 0318 	add.w	r3, r7, #24
 800baec:	4618      	mov	r0, r3
 800baee:	f000 f90d 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baf6:	e0ea      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800baf8:	2300      	movs	r3, #0
 800bafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bafc:	e0e7      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bafe:	2300      	movs	r3, #0
 800bb00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb02:	e0e4      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bb04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb08:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800bb0c:	430b      	orrs	r3, r1
 800bb0e:	f040 808d 	bne.w	800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bb12:	4b42      	ldr	r3, [pc, #264]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb16:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800bb1a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb22:	d06b      	beq.n	800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800bb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb2a:	d874      	bhi.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb32:	d056      	beq.n	800bbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bb34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb3a:	d86c      	bhi.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb42:	d03b      	beq.n	800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800bb44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb4a:	d864      	bhi.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb52:	d021      	beq.n	800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800bb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb5a:	d85c      	bhi.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d004      	beq.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb68:	d004      	beq.n	800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bb6a:	e054      	b.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bb6c:	f000 f8b8 	bl	800bce0 <HAL_RCCEx_GetD3PCLK1Freq>
 800bb70:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb72:	e0ac      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb74:	4b29      	ldr	r3, [pc, #164]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb80:	d107      	bne.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb82:	f107 0318 	add.w	r3, r7, #24
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 f8c0 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb90:	e09d      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb92:	2300      	movs	r3, #0
 800bb94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb96:	e09a      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb98:	4b20      	ldr	r3, [pc, #128]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bba4:	d107      	bne.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bba6:	f107 030c 	add.w	r3, r7, #12
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 fa02 	bl	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbb4:	e08b      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbba:	e088      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bbbc:	4b17      	ldr	r3, [pc, #92]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f003 0304 	and.w	r3, r3, #4
 800bbc4:	2b04      	cmp	r3, #4
 800bbc6:	d109      	bne.n	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbc8:	4b14      	ldr	r3, [pc, #80]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	08db      	lsrs	r3, r3, #3
 800bbce:	f003 0303 	and.w	r3, r3, #3
 800bbd2:	4a13      	ldr	r2, [pc, #76]	@ (800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bbd4:	fa22 f303 	lsr.w	r3, r2, r3
 800bbd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbda:	e078      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbe0:	e075      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bbe2:	4b0e      	ldr	r3, [pc, #56]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbee:	d102      	bne.n	800bbf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bbf0:	4b0c      	ldr	r3, [pc, #48]	@ (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bbf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbf4:	e06b      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbfa:	e068      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bbfc:	4b07      	ldr	r3, [pc, #28]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc08:	d102      	bne.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bc0a:	4b07      	ldr	r3, [pc, #28]	@ (800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bc0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc0e:	e05e      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc10:	2300      	movs	r3, #0
 800bc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc14:	e05b      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc1a:	e058      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc1c:	58024400 	.word	0x58024400
 800bc20:	03d09000 	.word	0x03d09000
 800bc24:	003d0900 	.word	0x003d0900
 800bc28:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bc2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc30:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800bc34:	430b      	orrs	r3, r1
 800bc36:	d148      	bne.n	800bcca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bc38:	4b27      	ldr	r3, [pc, #156]	@ (800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bc40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bc42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc48:	d02a      	beq.n	800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc50:	d838      	bhi.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d004      	beq.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bc58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc5e:	d00d      	beq.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bc60:	e030      	b.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc62:	4b1d      	ldr	r3, [pc, #116]	@ (800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc6e:	d102      	bne.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bc70:	4b1a      	ldr	r3, [pc, #104]	@ (800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bc72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc74:	e02b      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc7a:	e028      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc7c:	4b16      	ldr	r3, [pc, #88]	@ (800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc88:	d107      	bne.n	800bc9a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 fae4 	bl	800c25c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc98:	e019      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc9e:	e016      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bca0:	4b0d      	ldr	r3, [pc, #52]	@ (800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bcac:	d107      	bne.n	800bcbe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcae:	f107 0318 	add.w	r3, r7, #24
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f000 f82a 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcbc:	e007      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcc2:	e004      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcc8:	e001      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bcce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3740      	adds	r7, #64	@ 0x40
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	58024400 	.word	0x58024400
 800bcdc:	017d7840 	.word	0x017d7840

0800bce0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bce4:	f7fe f816 	bl	8009d14 <HAL_RCC_GetHCLKFreq>
 800bce8:	4602      	mov	r2, r0
 800bcea:	4b06      	ldr	r3, [pc, #24]	@ (800bd04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bcec:	6a1b      	ldr	r3, [r3, #32]
 800bcee:	091b      	lsrs	r3, r3, #4
 800bcf0:	f003 0307 	and.w	r3, r3, #7
 800bcf4:	4904      	ldr	r1, [pc, #16]	@ (800bd08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bcf6:	5ccb      	ldrb	r3, [r1, r3]
 800bcf8:	f003 031f 	and.w	r3, r3, #31
 800bcfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	58024400 	.word	0x58024400
 800bd08:	08014b00 	.word	0x08014b00

0800bd0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b089      	sub	sp, #36	@ 0x24
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd14:	4ba1      	ldr	r3, [pc, #644]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd18:	f003 0303 	and.w	r3, r3, #3
 800bd1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bd1e:	4b9f      	ldr	r3, [pc, #636]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd22:	0b1b      	lsrs	r3, r3, #12
 800bd24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bd2a:	4b9c      	ldr	r3, [pc, #624]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd2e:	091b      	lsrs	r3, r3, #4
 800bd30:	f003 0301 	and.w	r3, r3, #1
 800bd34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bd36:	4b99      	ldr	r3, [pc, #612]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd3a:	08db      	lsrs	r3, r3, #3
 800bd3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd40:	693a      	ldr	r2, [r7, #16]
 800bd42:	fb02 f303 	mul.w	r3, r2, r3
 800bd46:	ee07 3a90 	vmov	s15, r3
 800bd4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f000 8111 	beq.w	800bf7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	f000 8083 	beq.w	800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	f200 80a1 	bhi.w	800beac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d003      	beq.n	800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d056      	beq.n	800be24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bd76:	e099      	b.n	800beac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd78:	4b88      	ldr	r3, [pc, #544]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f003 0320 	and.w	r3, r3, #32
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d02d      	beq.n	800bde0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd84:	4b85      	ldr	r3, [pc, #532]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	08db      	lsrs	r3, r3, #3
 800bd8a:	f003 0303 	and.w	r3, r3, #3
 800bd8e:	4a84      	ldr	r2, [pc, #528]	@ (800bfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bd90:	fa22 f303 	lsr.w	r3, r2, r3
 800bd94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	ee07 3a90 	vmov	s15, r3
 800bd9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	ee07 3a90 	vmov	s15, r3
 800bda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdae:	4b7b      	ldr	r3, [pc, #492]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdb6:	ee07 3a90 	vmov	s15, r3
 800bdba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bfa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bdde:	e087      	b.n	800bef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	ee07 3a90 	vmov	s15, r3
 800bde6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bfa8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bdee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdf2:	4b6a      	ldr	r3, [pc, #424]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdfa:	ee07 3a90 	vmov	s15, r3
 800bdfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be02:	ed97 6a03 	vldr	s12, [r7, #12]
 800be06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bfa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be22:	e065      	b.n	800bef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	ee07 3a90 	vmov	s15, r3
 800be2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bfac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be36:	4b59      	ldr	r3, [pc, #356]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be3e:	ee07 3a90 	vmov	s15, r3
 800be42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be46:	ed97 6a03 	vldr	s12, [r7, #12]
 800be4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bfa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be66:	e043      	b.n	800bef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	ee07 3a90 	vmov	s15, r3
 800be6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800be76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be7a:	4b48      	ldr	r3, [pc, #288]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be82:	ee07 3a90 	vmov	s15, r3
 800be86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bfa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800beaa:	e021      	b.n	800bef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	ee07 3a90 	vmov	s15, r3
 800beb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bfac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800beba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bebe:	4b37      	ldr	r3, [pc, #220]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bec6:	ee07 3a90 	vmov	s15, r3
 800beca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bece:	ed97 6a03 	vldr	s12, [r7, #12]
 800bed2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bfa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800beee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bef0:	4b2a      	ldr	r3, [pc, #168]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef4:	0a5b      	lsrs	r3, r3, #9
 800bef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800befa:	ee07 3a90 	vmov	s15, r3
 800befe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf16:	ee17 2a90 	vmov	r2, s15
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bf1e:	4b1f      	ldr	r3, [pc, #124]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf22:	0c1b      	lsrs	r3, r3, #16
 800bf24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf28:	ee07 3a90 	vmov	s15, r3
 800bf2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf38:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf44:	ee17 2a90 	vmov	r2, s15
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bf4c:	4b13      	ldr	r3, [pc, #76]	@ (800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf50:	0e1b      	lsrs	r3, r3, #24
 800bf52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf56:	ee07 3a90 	vmov	s15, r3
 800bf5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf66:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf72:	ee17 2a90 	vmov	r2, s15
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bf7a:	e008      	b.n	800bf8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	609a      	str	r2, [r3, #8]
}
 800bf8e:	bf00      	nop
 800bf90:	3724      	adds	r7, #36	@ 0x24
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	58024400 	.word	0x58024400
 800bfa0:	03d09000 	.word	0x03d09000
 800bfa4:	46000000 	.word	0x46000000
 800bfa8:	4c742400 	.word	0x4c742400
 800bfac:	4a742400 	.word	0x4a742400
 800bfb0:	4bbebc20 	.word	0x4bbebc20

0800bfb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b089      	sub	sp, #36	@ 0x24
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bfbc:	4ba1      	ldr	r3, [pc, #644]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc0:	f003 0303 	and.w	r3, r3, #3
 800bfc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bfc6:	4b9f      	ldr	r3, [pc, #636]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfca:	0d1b      	lsrs	r3, r3, #20
 800bfcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bfd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bfd2:	4b9c      	ldr	r3, [pc, #624]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfd6:	0a1b      	lsrs	r3, r3, #8
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bfde:	4b99      	ldr	r3, [pc, #612]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfe2:	08db      	lsrs	r3, r3, #3
 800bfe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	fb02 f303 	mul.w	r3, r2, r3
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f000 8111 	beq.w	800c224 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	2b02      	cmp	r3, #2
 800c006:	f000 8083 	beq.w	800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	2b02      	cmp	r3, #2
 800c00e:	f200 80a1 	bhi.w	800c154 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d003      	beq.n	800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d056      	beq.n	800c0cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c01e:	e099      	b.n	800c154 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c020:	4b88      	ldr	r3, [pc, #544]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 0320 	and.w	r3, r3, #32
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d02d      	beq.n	800c088 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c02c:	4b85      	ldr	r3, [pc, #532]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	08db      	lsrs	r3, r3, #3
 800c032:	f003 0303 	and.w	r3, r3, #3
 800c036:	4a84      	ldr	r2, [pc, #528]	@ (800c248 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c038:	fa22 f303 	lsr.w	r3, r2, r3
 800c03c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	ee07 3a90 	vmov	s15, r3
 800c044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	ee07 3a90 	vmov	s15, r3
 800c04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c056:	4b7b      	ldr	r3, [pc, #492]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c05a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c05e:	ee07 3a90 	vmov	s15, r3
 800c062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c066:	ed97 6a03 	vldr	s12, [r7, #12]
 800c06a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c24c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c06e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c07a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c082:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c086:	e087      	b.n	800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	ee07 3a90 	vmov	s15, r3
 800c08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c092:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c250 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c09a:	4b6a      	ldr	r3, [pc, #424]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c09c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0a2:	ee07 3a90 	vmov	s15, r3
 800c0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c24c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0ca:	e065      	b.n	800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	ee07 3a90 	vmov	s15, r3
 800c0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0de:	4b59      	ldr	r3, [pc, #356]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0e6:	ee07 3a90 	vmov	s15, r3
 800c0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c24c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c10a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c10e:	e043      	b.n	800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	ee07 3a90 	vmov	s15, r3
 800c116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c11a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c11e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c122:	4b48      	ldr	r3, [pc, #288]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c12a:	ee07 3a90 	vmov	s15, r3
 800c12e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c132:	ed97 6a03 	vldr	s12, [r7, #12]
 800c136:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c24c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c13a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c13e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c14a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c14e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c152:	e021      	b.n	800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	ee07 3a90 	vmov	s15, r3
 800c15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c15e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c166:	4b37      	ldr	r3, [pc, #220]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c16e:	ee07 3a90 	vmov	s15, r3
 800c172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c176:	ed97 6a03 	vldr	s12, [r7, #12]
 800c17a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c24c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c17e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c18a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c196:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c198:	4b2a      	ldr	r3, [pc, #168]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c19c:	0a5b      	lsrs	r3, r3, #9
 800c19e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1a2:	ee07 3a90 	vmov	s15, r3
 800c1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1be:	ee17 2a90 	vmov	r2, s15
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c1c6:	4b1f      	ldr	r3, [pc, #124]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ca:	0c1b      	lsrs	r3, r3, #16
 800c1cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1d0:	ee07 3a90 	vmov	s15, r3
 800c1d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ec:	ee17 2a90 	vmov	r2, s15
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c1f4:	4b13      	ldr	r3, [pc, #76]	@ (800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1f8:	0e1b      	lsrs	r3, r3, #24
 800c1fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1fe:	ee07 3a90 	vmov	s15, r3
 800c202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c20a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c20e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c21a:	ee17 2a90 	vmov	r2, s15
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c222:	e008      	b.n	800c236 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	609a      	str	r2, [r3, #8]
}
 800c236:	bf00      	nop
 800c238:	3724      	adds	r7, #36	@ 0x24
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	58024400 	.word	0x58024400
 800c248:	03d09000 	.word	0x03d09000
 800c24c:	46000000 	.word	0x46000000
 800c250:	4c742400 	.word	0x4c742400
 800c254:	4a742400 	.word	0x4a742400
 800c258:	4bbebc20 	.word	0x4bbebc20

0800c25c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b089      	sub	sp, #36	@ 0x24
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c264:	4ba0      	ldr	r3, [pc, #640]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c268:	f003 0303 	and.w	r3, r3, #3
 800c26c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c26e:	4b9e      	ldr	r3, [pc, #632]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c272:	091b      	lsrs	r3, r3, #4
 800c274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c278:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c27a:	4b9b      	ldr	r3, [pc, #620]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c284:	4b98      	ldr	r3, [pc, #608]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c288:	08db      	lsrs	r3, r3, #3
 800c28a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c28e:	693a      	ldr	r2, [r7, #16]
 800c290:	fb02 f303 	mul.w	r3, r2, r3
 800c294:	ee07 3a90 	vmov	s15, r3
 800c298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c29c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 8111 	beq.w	800c4ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	f000 8083 	beq.w	800c3b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	f200 80a1 	bhi.w	800c3fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d056      	beq.n	800c372 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c2c4:	e099      	b.n	800c3fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2c6:	4b88      	ldr	r3, [pc, #544]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 0320 	and.w	r3, r3, #32
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d02d      	beq.n	800c32e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2d2:	4b85      	ldr	r3, [pc, #532]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	08db      	lsrs	r3, r3, #3
 800c2d8:	f003 0303 	and.w	r3, r3, #3
 800c2dc:	4a83      	ldr	r2, [pc, #524]	@ (800c4ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c2de:	fa22 f303 	lsr.w	r3, r2, r3
 800c2e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	ee07 3a90 	vmov	s15, r3
 800c2ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	ee07 3a90 	vmov	s15, r3
 800c2f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2fc:	4b7a      	ldr	r3, [pc, #488]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c304:	ee07 3a90 	vmov	s15, r3
 800c308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c30c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c310:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c31c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c324:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c328:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c32c:	e087      	b.n	800c43e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	ee07 3a90 	vmov	s15, r3
 800c334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c338:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c33c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c340:	4b69      	ldr	r3, [pc, #420]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c348:	ee07 3a90 	vmov	s15, r3
 800c34c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c350:	ed97 6a03 	vldr	s12, [r7, #12]
 800c354:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c358:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c35c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c360:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c36c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c370:	e065      	b.n	800c43e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	ee07 3a90 	vmov	s15, r3
 800c378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c37c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c4f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c384:	4b58      	ldr	r3, [pc, #352]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c38c:	ee07 3a90 	vmov	s15, r3
 800c390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c394:	ed97 6a03 	vldr	s12, [r7, #12]
 800c398:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c39c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3b4:	e043      	b.n	800c43e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	ee07 3a90 	vmov	s15, r3
 800c3bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c3c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3c8:	4b47      	ldr	r3, [pc, #284]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d0:	ee07 3a90 	vmov	s15, r3
 800c3d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3f8:	e021      	b.n	800c43e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	ee07 3a90 	vmov	s15, r3
 800c400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c404:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c40c:	4b36      	ldr	r3, [pc, #216]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c40e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c414:	ee07 3a90 	vmov	s15, r3
 800c418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c41c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c420:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c42c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c434:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c438:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c43c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c43e:	4b2a      	ldr	r3, [pc, #168]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c442:	0a5b      	lsrs	r3, r3, #9
 800c444:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c448:	ee07 3a90 	vmov	s15, r3
 800c44c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c450:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c454:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c458:	edd7 6a07 	vldr	s13, [r7, #28]
 800c45c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c464:	ee17 2a90 	vmov	r2, s15
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c46c:	4b1e      	ldr	r3, [pc, #120]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c470:	0c1b      	lsrs	r3, r3, #16
 800c472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c476:	ee07 3a90 	vmov	s15, r3
 800c47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c47e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c482:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c486:	edd7 6a07 	vldr	s13, [r7, #28]
 800c48a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c48e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c492:	ee17 2a90 	vmov	r2, s15
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c49a:	4b13      	ldr	r3, [pc, #76]	@ (800c4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c49c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c49e:	0e1b      	lsrs	r3, r3, #24
 800c4a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4a4:	ee07 3a90 	vmov	s15, r3
 800c4a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4c0:	ee17 2a90 	vmov	r2, s15
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c4c8:	e008      	b.n	800c4dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	609a      	str	r2, [r3, #8]
}
 800c4dc:	bf00      	nop
 800c4de:	3724      	adds	r7, #36	@ 0x24
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr
 800c4e8:	58024400 	.word	0x58024400
 800c4ec:	03d09000 	.word	0x03d09000
 800c4f0:	46000000 	.word	0x46000000
 800c4f4:	4c742400 	.word	0x4c742400
 800c4f8:	4a742400 	.word	0x4a742400
 800c4fc:	4bbebc20 	.word	0x4bbebc20

0800c500 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c50a:	2300      	movs	r3, #0
 800c50c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c50e:	4b53      	ldr	r3, [pc, #332]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c512:	f003 0303 	and.w	r3, r3, #3
 800c516:	2b03      	cmp	r3, #3
 800c518:	d101      	bne.n	800c51e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	e099      	b.n	800c652 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c51e:	4b4f      	ldr	r3, [pc, #316]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a4e      	ldr	r2, [pc, #312]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c524:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c52a:	f7f6 fd3f 	bl	8002fac <HAL_GetTick>
 800c52e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c530:	e008      	b.n	800c544 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c532:	f7f6 fd3b 	bl	8002fac <HAL_GetTick>
 800c536:	4602      	mov	r2, r0
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	1ad3      	subs	r3, r2, r3
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d901      	bls.n	800c544 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c540:	2303      	movs	r3, #3
 800c542:	e086      	b.n	800c652 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c544:	4b45      	ldr	r3, [pc, #276]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1f0      	bne.n	800c532 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c550:	4b42      	ldr	r3, [pc, #264]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c554:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	031b      	lsls	r3, r3, #12
 800c55e:	493f      	ldr	r1, [pc, #252]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c560:	4313      	orrs	r3, r2
 800c562:	628b      	str	r3, [r1, #40]	@ 0x28
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	3b01      	subs	r3, #1
 800c56a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	3b01      	subs	r3, #1
 800c574:	025b      	lsls	r3, r3, #9
 800c576:	b29b      	uxth	r3, r3
 800c578:	431a      	orrs	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	3b01      	subs	r3, #1
 800c580:	041b      	lsls	r3, r3, #16
 800c582:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c586:	431a      	orrs	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	3b01      	subs	r3, #1
 800c58e:	061b      	lsls	r3, r3, #24
 800c590:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c594:	4931      	ldr	r1, [pc, #196]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c596:	4313      	orrs	r3, r2
 800c598:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c59a:	4b30      	ldr	r3, [pc, #192]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c59e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	695b      	ldr	r3, [r3, #20]
 800c5a6:	492d      	ldr	r1, [pc, #180]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c5ac:	4b2b      	ldr	r3, [pc, #172]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b0:	f023 0220 	bic.w	r2, r3, #32
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	4928      	ldr	r1, [pc, #160]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c5be:	4b27      	ldr	r3, [pc, #156]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5c2:	4a26      	ldr	r2, [pc, #152]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c5c4:	f023 0310 	bic.w	r3, r3, #16
 800c5c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c5ca:	4b24      	ldr	r3, [pc, #144]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c5cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5ce:	4b24      	ldr	r3, [pc, #144]	@ (800c660 <RCCEx_PLL2_Config+0x160>)
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	69d2      	ldr	r2, [r2, #28]
 800c5d6:	00d2      	lsls	r2, r2, #3
 800c5d8:	4920      	ldr	r1, [pc, #128]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c5de:	4b1f      	ldr	r3, [pc, #124]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c5e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5e2:	4a1e      	ldr	r2, [pc, #120]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c5e4:	f043 0310 	orr.w	r3, r3, #16
 800c5e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d106      	bne.n	800c5fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c5f0:	4b1a      	ldr	r3, [pc, #104]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f4:	4a19      	ldr	r2, [pc, #100]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c5f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c5fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c5fc:	e00f      	b.n	800c61e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d106      	bne.n	800c612 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c604:	4b15      	ldr	r3, [pc, #84]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c608:	4a14      	ldr	r2, [pc, #80]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c60a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c60e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c610:	e005      	b.n	800c61e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c612:	4b12      	ldr	r3, [pc, #72]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c616:	4a11      	ldr	r2, [pc, #68]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c618:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c61c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c61e:	4b0f      	ldr	r3, [pc, #60]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a0e      	ldr	r2, [pc, #56]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c624:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c62a:	f7f6 fcbf 	bl	8002fac <HAL_GetTick>
 800c62e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c630:	e008      	b.n	800c644 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c632:	f7f6 fcbb 	bl	8002fac <HAL_GetTick>
 800c636:	4602      	mov	r2, r0
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	2b02      	cmp	r3, #2
 800c63e:	d901      	bls.n	800c644 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c640:	2303      	movs	r3, #3
 800c642:	e006      	b.n	800c652 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c644:	4b05      	ldr	r3, [pc, #20]	@ (800c65c <RCCEx_PLL2_Config+0x15c>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d0f0      	beq.n	800c632 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c650:	7bfb      	ldrb	r3, [r7, #15]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3710      	adds	r7, #16
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	58024400 	.word	0x58024400
 800c660:	ffff0007 	.word	0xffff0007

0800c664 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c66e:	2300      	movs	r3, #0
 800c670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c672:	4b53      	ldr	r3, [pc, #332]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c676:	f003 0303 	and.w	r3, r3, #3
 800c67a:	2b03      	cmp	r3, #3
 800c67c:	d101      	bne.n	800c682 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e099      	b.n	800c7b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c682:	4b4f      	ldr	r3, [pc, #316]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a4e      	ldr	r2, [pc, #312]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c68c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c68e:	f7f6 fc8d 	bl	8002fac <HAL_GetTick>
 800c692:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c694:	e008      	b.n	800c6a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c696:	f7f6 fc89 	bl	8002fac <HAL_GetTick>
 800c69a:	4602      	mov	r2, r0
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	1ad3      	subs	r3, r2, r3
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	d901      	bls.n	800c6a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	e086      	b.n	800c7b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c6a8:	4b45      	ldr	r3, [pc, #276]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1f0      	bne.n	800c696 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c6b4:	4b42      	ldr	r3, [pc, #264]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	051b      	lsls	r3, r3, #20
 800c6c2:	493f      	ldr	r1, [pc, #252]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	628b      	str	r3, [r1, #40]	@ 0x28
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	689b      	ldr	r3, [r3, #8]
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	025b      	lsls	r3, r3, #9
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	431a      	orrs	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	3b01      	subs	r3, #1
 800c6e4:	041b      	lsls	r3, r3, #16
 800c6e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c6ea:	431a      	orrs	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	061b      	lsls	r3, r3, #24
 800c6f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c6f8:	4931      	ldr	r1, [pc, #196]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c6fe:	4b30      	ldr	r3, [pc, #192]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c702:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	695b      	ldr	r3, [r3, #20]
 800c70a:	492d      	ldr	r1, [pc, #180]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c70c:	4313      	orrs	r3, r2
 800c70e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c710:	4b2b      	ldr	r3, [pc, #172]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c714:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	4928      	ldr	r1, [pc, #160]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c71e:	4313      	orrs	r3, r2
 800c720:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c722:	4b27      	ldr	r3, [pc, #156]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c726:	4a26      	ldr	r2, [pc, #152]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c72c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c72e:	4b24      	ldr	r3, [pc, #144]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c732:	4b24      	ldr	r3, [pc, #144]	@ (800c7c4 <RCCEx_PLL3_Config+0x160>)
 800c734:	4013      	ands	r3, r2
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	69d2      	ldr	r2, [r2, #28]
 800c73a:	00d2      	lsls	r2, r2, #3
 800c73c:	4920      	ldr	r1, [pc, #128]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c73e:	4313      	orrs	r3, r2
 800c740:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c742:	4b1f      	ldr	r3, [pc, #124]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c746:	4a1e      	ldr	r2, [pc, #120]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c74c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d106      	bne.n	800c762 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c754:	4b1a      	ldr	r3, [pc, #104]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c758:	4a19      	ldr	r2, [pc, #100]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c75a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c75e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c760:	e00f      	b.n	800c782 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d106      	bne.n	800c776 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c768:	4b15      	ldr	r3, [pc, #84]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c76a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c76c:	4a14      	ldr	r2, [pc, #80]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c76e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c772:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c774:	e005      	b.n	800c782 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c776:	4b12      	ldr	r3, [pc, #72]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c77a:	4a11      	ldr	r2, [pc, #68]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c77c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c780:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c782:	4b0f      	ldr	r3, [pc, #60]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a0e      	ldr	r2, [pc, #56]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c78c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c78e:	f7f6 fc0d 	bl	8002fac <HAL_GetTick>
 800c792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c794:	e008      	b.n	800c7a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c796:	f7f6 fc09 	bl	8002fac <HAL_GetTick>
 800c79a:	4602      	mov	r2, r0
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d901      	bls.n	800c7a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	e006      	b.n	800c7b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c7a8:	4b05      	ldr	r3, [pc, #20]	@ (800c7c0 <RCCEx_PLL3_Config+0x15c>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d0f0      	beq.n	800c796 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	58024400 	.word	0x58024400
 800c7c4:	ffff0007 	.word	0xffff0007

0800c7c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e049      	b.n	800c86e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d106      	bne.n	800c7f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7f6 fa1e 	bl	8002c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	3304      	adds	r3, #4
 800c804:	4619      	mov	r1, r3
 800c806:	4610      	mov	r0, r2
 800c808:	f000 f9c6 	bl	800cb98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2201      	movs	r2, #1
 800c810:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2201      	movs	r2, #1
 800c818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2201      	movs	r2, #1
 800c820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2201      	movs	r2, #1
 800c848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2201      	movs	r2, #1
 800c850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2201      	movs	r2, #1
 800c858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
	...

0800c878 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c886:	b2db      	uxtb	r3, r3
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d001      	beq.n	800c890 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c88c:	2301      	movs	r3, #1
 800c88e:	e04c      	b.n	800c92a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2202      	movs	r2, #2
 800c894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a26      	ldr	r2, [pc, #152]	@ (800c938 <HAL_TIM_Base_Start+0xc0>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d022      	beq.n	800c8e8 <HAL_TIM_Base_Start+0x70>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8aa:	d01d      	beq.n	800c8e8 <HAL_TIM_Base_Start+0x70>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a22      	ldr	r2, [pc, #136]	@ (800c93c <HAL_TIM_Base_Start+0xc4>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d018      	beq.n	800c8e8 <HAL_TIM_Base_Start+0x70>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a21      	ldr	r2, [pc, #132]	@ (800c940 <HAL_TIM_Base_Start+0xc8>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d013      	beq.n	800c8e8 <HAL_TIM_Base_Start+0x70>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a1f      	ldr	r2, [pc, #124]	@ (800c944 <HAL_TIM_Base_Start+0xcc>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d00e      	beq.n	800c8e8 <HAL_TIM_Base_Start+0x70>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a1e      	ldr	r2, [pc, #120]	@ (800c948 <HAL_TIM_Base_Start+0xd0>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d009      	beq.n	800c8e8 <HAL_TIM_Base_Start+0x70>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a1c      	ldr	r2, [pc, #112]	@ (800c94c <HAL_TIM_Base_Start+0xd4>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d004      	beq.n	800c8e8 <HAL_TIM_Base_Start+0x70>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a1b      	ldr	r2, [pc, #108]	@ (800c950 <HAL_TIM_Base_Start+0xd8>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d115      	bne.n	800c914 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	689a      	ldr	r2, [r3, #8]
 800c8ee:	4b19      	ldr	r3, [pc, #100]	@ (800c954 <HAL_TIM_Base_Start+0xdc>)
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2b06      	cmp	r3, #6
 800c8f8:	d015      	beq.n	800c926 <HAL_TIM_Base_Start+0xae>
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c900:	d011      	beq.n	800c926 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f042 0201 	orr.w	r2, r2, #1
 800c910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c912:	e008      	b.n	800c926 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f042 0201 	orr.w	r2, r2, #1
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	e000      	b.n	800c928 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3714      	adds	r7, #20
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	40010000 	.word	0x40010000
 800c93c:	40000400 	.word	0x40000400
 800c940:	40000800 	.word	0x40000800
 800c944:	40000c00 	.word	0x40000c00
 800c948:	40010400 	.word	0x40010400
 800c94c:	40001800 	.word	0x40001800
 800c950:	40014000 	.word	0x40014000
 800c954:	00010007 	.word	0x00010007

0800c958 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6a1a      	ldr	r2, [r3, #32]
 800c966:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c96a:	4013      	ands	r3, r2
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d10f      	bne.n	800c990 <HAL_TIM_Base_Stop+0x38>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	6a1a      	ldr	r2, [r3, #32]
 800c976:	f240 4344 	movw	r3, #1092	@ 0x444
 800c97a:	4013      	ands	r3, r2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d107      	bne.n	800c990 <HAL_TIM_Base_Stop+0x38>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f022 0201 	bic.w	r2, r2, #1
 800c98e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	370c      	adds	r7, #12
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
	...

0800c9a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d101      	bne.n	800c9c4 <HAL_TIM_ConfigClockSource+0x1c>
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	e0dc      	b.n	800cb7e <HAL_TIM_ConfigClockSource+0x1d6>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2202      	movs	r2, #2
 800c9d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	4b6a      	ldr	r3, [pc, #424]	@ (800cb88 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c9ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a64      	ldr	r2, [pc, #400]	@ (800cb8c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	f000 80a9 	beq.w	800cb52 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca00:	4a62      	ldr	r2, [pc, #392]	@ (800cb8c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	f200 80ae 	bhi.w	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca08:	4a61      	ldr	r2, [pc, #388]	@ (800cb90 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	f000 80a1 	beq.w	800cb52 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca10:	4a5f      	ldr	r2, [pc, #380]	@ (800cb90 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	f200 80a6 	bhi.w	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca18:	4a5e      	ldr	r2, [pc, #376]	@ (800cb94 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	f000 8099 	beq.w	800cb52 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca20:	4a5c      	ldr	r2, [pc, #368]	@ (800cb94 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	f200 809e 	bhi.w	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ca2c:	f000 8091 	beq.w	800cb52 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ca34:	f200 8096 	bhi.w	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca3c:	f000 8089 	beq.w	800cb52 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca44:	f200 808e 	bhi.w	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca4c:	d03e      	beq.n	800cacc <HAL_TIM_ConfigClockSource+0x124>
 800ca4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca52:	f200 8087 	bhi.w	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca5a:	f000 8086 	beq.w	800cb6a <HAL_TIM_ConfigClockSource+0x1c2>
 800ca5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca62:	d87f      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca64:	2b70      	cmp	r3, #112	@ 0x70
 800ca66:	d01a      	beq.n	800ca9e <HAL_TIM_ConfigClockSource+0xf6>
 800ca68:	2b70      	cmp	r3, #112	@ 0x70
 800ca6a:	d87b      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca6c:	2b60      	cmp	r3, #96	@ 0x60
 800ca6e:	d050      	beq.n	800cb12 <HAL_TIM_ConfigClockSource+0x16a>
 800ca70:	2b60      	cmp	r3, #96	@ 0x60
 800ca72:	d877      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca74:	2b50      	cmp	r3, #80	@ 0x50
 800ca76:	d03c      	beq.n	800caf2 <HAL_TIM_ConfigClockSource+0x14a>
 800ca78:	2b50      	cmp	r3, #80	@ 0x50
 800ca7a:	d873      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca7c:	2b40      	cmp	r3, #64	@ 0x40
 800ca7e:	d058      	beq.n	800cb32 <HAL_TIM_ConfigClockSource+0x18a>
 800ca80:	2b40      	cmp	r3, #64	@ 0x40
 800ca82:	d86f      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca84:	2b30      	cmp	r3, #48	@ 0x30
 800ca86:	d064      	beq.n	800cb52 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca88:	2b30      	cmp	r3, #48	@ 0x30
 800ca8a:	d86b      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca8c:	2b20      	cmp	r3, #32
 800ca8e:	d060      	beq.n	800cb52 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca90:	2b20      	cmp	r3, #32
 800ca92:	d867      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d05c      	beq.n	800cb52 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca98:	2b10      	cmp	r3, #16
 800ca9a:	d05a      	beq.n	800cb52 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca9c:	e062      	b.n	800cb64 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800caae:	f000 f98b 	bl	800cdc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	609a      	str	r2, [r3, #8]
      break;
 800caca:	e04f      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cadc:	f000 f974 	bl	800cdc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	689a      	ldr	r2, [r3, #8]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800caee:	609a      	str	r2, [r3, #8]
      break;
 800caf0:	e03c      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cafe:	461a      	mov	r2, r3
 800cb00:	f000 f8e4 	bl	800cccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2150      	movs	r1, #80	@ 0x50
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 f93e 	bl	800cd8c <TIM_ITRx_SetConfig>
      break;
 800cb10:	e02c      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb1e:	461a      	mov	r2, r3
 800cb20:	f000 f903 	bl	800cd2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2160      	movs	r1, #96	@ 0x60
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f000 f92e 	bl	800cd8c <TIM_ITRx_SetConfig>
      break;
 800cb30:	e01c      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb3e:	461a      	mov	r2, r3
 800cb40:	f000 f8c4 	bl	800cccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2140      	movs	r1, #64	@ 0x40
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f000 f91e 	bl	800cd8c <TIM_ITRx_SetConfig>
      break;
 800cb50:	e00c      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	4610      	mov	r0, r2
 800cb5e:	f000 f915 	bl	800cd8c <TIM_ITRx_SetConfig>
      break;
 800cb62:	e003      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	73fb      	strb	r3, [r7, #15]
      break;
 800cb68:	e000      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cb6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	ffceff88 	.word	0xffceff88
 800cb8c:	00100040 	.word	0x00100040
 800cb90:	00100030 	.word	0x00100030
 800cb94:	00100020 	.word	0x00100020

0800cb98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4a40      	ldr	r2, [pc, #256]	@ (800ccac <TIM_Base_SetConfig+0x114>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d013      	beq.n	800cbd8 <TIM_Base_SetConfig+0x40>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbb6:	d00f      	beq.n	800cbd8 <TIM_Base_SetConfig+0x40>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4a3d      	ldr	r2, [pc, #244]	@ (800ccb0 <TIM_Base_SetConfig+0x118>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d00b      	beq.n	800cbd8 <TIM_Base_SetConfig+0x40>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4a3c      	ldr	r2, [pc, #240]	@ (800ccb4 <TIM_Base_SetConfig+0x11c>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d007      	beq.n	800cbd8 <TIM_Base_SetConfig+0x40>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4a3b      	ldr	r2, [pc, #236]	@ (800ccb8 <TIM_Base_SetConfig+0x120>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d003      	beq.n	800cbd8 <TIM_Base_SetConfig+0x40>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	4a3a      	ldr	r2, [pc, #232]	@ (800ccbc <TIM_Base_SetConfig+0x124>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d108      	bne.n	800cbea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a2f      	ldr	r2, [pc, #188]	@ (800ccac <TIM_Base_SetConfig+0x114>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d01f      	beq.n	800cc32 <TIM_Base_SetConfig+0x9a>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbf8:	d01b      	beq.n	800cc32 <TIM_Base_SetConfig+0x9a>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a2c      	ldr	r2, [pc, #176]	@ (800ccb0 <TIM_Base_SetConfig+0x118>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d017      	beq.n	800cc32 <TIM_Base_SetConfig+0x9a>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a2b      	ldr	r2, [pc, #172]	@ (800ccb4 <TIM_Base_SetConfig+0x11c>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d013      	beq.n	800cc32 <TIM_Base_SetConfig+0x9a>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a2a      	ldr	r2, [pc, #168]	@ (800ccb8 <TIM_Base_SetConfig+0x120>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d00f      	beq.n	800cc32 <TIM_Base_SetConfig+0x9a>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a29      	ldr	r2, [pc, #164]	@ (800ccbc <TIM_Base_SetConfig+0x124>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d00b      	beq.n	800cc32 <TIM_Base_SetConfig+0x9a>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a28      	ldr	r2, [pc, #160]	@ (800ccc0 <TIM_Base_SetConfig+0x128>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d007      	beq.n	800cc32 <TIM_Base_SetConfig+0x9a>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4a27      	ldr	r2, [pc, #156]	@ (800ccc4 <TIM_Base_SetConfig+0x12c>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d003      	beq.n	800cc32 <TIM_Base_SetConfig+0x9a>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a26      	ldr	r2, [pc, #152]	@ (800ccc8 <TIM_Base_SetConfig+0x130>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d108      	bne.n	800cc44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cc38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	68db      	ldr	r3, [r3, #12]
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	695b      	ldr	r3, [r3, #20]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	689a      	ldr	r2, [r3, #8]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4a10      	ldr	r2, [pc, #64]	@ (800ccac <TIM_Base_SetConfig+0x114>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d00f      	beq.n	800cc90 <TIM_Base_SetConfig+0xf8>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	4a12      	ldr	r2, [pc, #72]	@ (800ccbc <TIM_Base_SetConfig+0x124>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d00b      	beq.n	800cc90 <TIM_Base_SetConfig+0xf8>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4a11      	ldr	r2, [pc, #68]	@ (800ccc0 <TIM_Base_SetConfig+0x128>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d007      	beq.n	800cc90 <TIM_Base_SetConfig+0xf8>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4a10      	ldr	r2, [pc, #64]	@ (800ccc4 <TIM_Base_SetConfig+0x12c>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d003      	beq.n	800cc90 <TIM_Base_SetConfig+0xf8>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4a0f      	ldr	r2, [pc, #60]	@ (800ccc8 <TIM_Base_SetConfig+0x130>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d103      	bne.n	800cc98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	691a      	ldr	r2, [r3, #16]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	615a      	str	r2, [r3, #20]
}
 800cc9e:	bf00      	nop
 800cca0:	3714      	adds	r7, #20
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	40010000 	.word	0x40010000
 800ccb0:	40000400 	.word	0x40000400
 800ccb4:	40000800 	.word	0x40000800
 800ccb8:	40000c00 	.word	0x40000c00
 800ccbc:	40010400 	.word	0x40010400
 800ccc0:	40014000 	.word	0x40014000
 800ccc4:	40014400 	.word	0x40014400
 800ccc8:	40014800 	.word	0x40014800

0800cccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b087      	sub	sp, #28
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6a1b      	ldr	r3, [r3, #32]
 800ccdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6a1b      	ldr	r3, [r3, #32]
 800cce2:	f023 0201 	bic.w	r2, r3, #1
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	699b      	ldr	r3, [r3, #24]
 800ccee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ccf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	011b      	lsls	r3, r3, #4
 800ccfc:	693a      	ldr	r2, [r7, #16]
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	f023 030a 	bic.w	r3, r3, #10
 800cd08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd0a:	697a      	ldr	r2, [r7, #20]
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	693a      	ldr	r2, [r7, #16]
 800cd16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	697a      	ldr	r2, [r7, #20]
 800cd1c:	621a      	str	r2, [r3, #32]
}
 800cd1e:	bf00      	nop
 800cd20:	371c      	adds	r7, #28
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	b087      	sub	sp, #28
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	60f8      	str	r0, [r7, #12]
 800cd32:	60b9      	str	r1, [r7, #8]
 800cd34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6a1b      	ldr	r3, [r3, #32]
 800cd3a:	f023 0210 	bic.w	r2, r3, #16
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	699b      	ldr	r3, [r3, #24]
 800cd46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	6a1b      	ldr	r3, [r3, #32]
 800cd4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cd54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	031b      	lsls	r3, r3, #12
 800cd5a:	697a      	ldr	r2, [r7, #20]
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cd66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	011b      	lsls	r3, r3, #4
 800cd6c:	693a      	ldr	r2, [r7, #16]
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	697a      	ldr	r2, [r7, #20]
 800cd76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	693a      	ldr	r2, [r7, #16]
 800cd7c:	621a      	str	r2, [r3, #32]
}
 800cd7e:	bf00      	nop
 800cd80:	371c      	adds	r7, #28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
	...

0800cd8c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b085      	sub	sp, #20
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	4b09      	ldr	r3, [pc, #36]	@ (800cdc4 <TIM_ITRx_SetConfig+0x38>)
 800cda0:	4013      	ands	r3, r2
 800cda2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cda4:	683a      	ldr	r2, [r7, #0]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	f043 0307 	orr.w	r3, r3, #7
 800cdae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	609a      	str	r2, [r3, #8]
}
 800cdb6:	bf00      	nop
 800cdb8:	3714      	adds	r7, #20
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	ffcfff8f 	.word	0xffcfff8f

0800cdc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b087      	sub	sp, #28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
 800cdd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cde2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	021a      	lsls	r2, r3, #8
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	431a      	orrs	r2, r3
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	697a      	ldr	r2, [r7, #20]
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	609a      	str	r2, [r3, #8]
}
 800cdfc:	bf00      	nop
 800cdfe:	371c      	adds	r7, #28
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d101      	bne.n	800ce20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce1c:	2302      	movs	r3, #2
 800ce1e:	e06d      	b.n	800cefc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2202      	movs	r2, #2
 800ce2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a30      	ldr	r2, [pc, #192]	@ (800cf08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d004      	beq.n	800ce54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a2f      	ldr	r2, [pc, #188]	@ (800cf0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d108      	bne.n	800ce66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ce5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	4313      	orrs	r3, r2
 800ce64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	4313      	orrs	r3, r2
 800ce76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a20      	ldr	r2, [pc, #128]	@ (800cf08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d022      	beq.n	800ced0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce92:	d01d      	beq.n	800ced0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a1d      	ldr	r2, [pc, #116]	@ (800cf10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d018      	beq.n	800ced0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4a1c      	ldr	r2, [pc, #112]	@ (800cf14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d013      	beq.n	800ced0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a1a      	ldr	r2, [pc, #104]	@ (800cf18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d00e      	beq.n	800ced0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a15      	ldr	r2, [pc, #84]	@ (800cf0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d009      	beq.n	800ced0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a16      	ldr	r2, [pc, #88]	@ (800cf1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d004      	beq.n	800ced0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a15      	ldr	r2, [pc, #84]	@ (800cf20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d10c      	bne.n	800ceea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ced6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	4313      	orrs	r3, r2
 800cee0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68ba      	ldr	r2, [r7, #8]
 800cee8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2201      	movs	r2, #1
 800ceee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cefa:	2300      	movs	r3, #0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3714      	adds	r7, #20
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr
 800cf08:	40010000 	.word	0x40010000
 800cf0c:	40010400 	.word	0x40010400
 800cf10:	40000400 	.word	0x40000400
 800cf14:	40000800 	.word	0x40000800
 800cf18:	40000c00 	.word	0x40000c00
 800cf1c:	40001800 	.word	0x40001800
 800cf20:	40014000 	.word	0x40014000

0800cf24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e042      	b.n	800cfbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d106      	bne.n	800cf4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f7f5 ff0d 	bl	8002d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2224      	movs	r2, #36	@ 0x24
 800cf52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f022 0201 	bic.w	r2, r2, #1
 800cf64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fc94 	bl	800d894 <UART_SetConfig>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d101      	bne.n	800cf76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	e022      	b.n	800cfbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d002      	beq.n	800cf84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f001 f9f0 	bl	800e364 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	685a      	ldr	r2, [r3, #4]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cf92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	689a      	ldr	r2, [r3, #8]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cfa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f042 0201 	orr.w	r2, r2, #1
 800cfb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f001 fa77 	bl	800e4a8 <UART_CheckIdleState>
 800cfba:	4603      	mov	r3, r0
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b08a      	sub	sp, #40	@ 0x28
 800cfc8:	af02      	add	r7, sp, #8
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	603b      	str	r3, [r7, #0]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfda:	2b20      	cmp	r3, #32
 800cfdc:	d17b      	bne.n	800d0d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d002      	beq.n	800cfea <HAL_UART_Transmit+0x26>
 800cfe4:	88fb      	ldrh	r3, [r7, #6]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d101      	bne.n	800cfee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cfea:	2301      	movs	r3, #1
 800cfec:	e074      	b.n	800d0d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2200      	movs	r2, #0
 800cff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2221      	movs	r2, #33	@ 0x21
 800cffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cffe:	f7f5 ffd5 	bl	8002fac <HAL_GetTick>
 800d002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	88fa      	ldrh	r2, [r7, #6]
 800d008:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	88fa      	ldrh	r2, [r7, #6]
 800d010:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d01c:	d108      	bne.n	800d030 <HAL_UART_Transmit+0x6c>
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d104      	bne.n	800d030 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d026:	2300      	movs	r3, #0
 800d028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	61bb      	str	r3, [r7, #24]
 800d02e:	e003      	b.n	800d038 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d034:	2300      	movs	r3, #0
 800d036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d038:	e030      	b.n	800d09c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	9300      	str	r3, [sp, #0]
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	2200      	movs	r2, #0
 800d042:	2180      	movs	r1, #128	@ 0x80
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f001 fad9 	bl	800e5fc <UART_WaitOnFlagUntilTimeout>
 800d04a:	4603      	mov	r3, r0
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d005      	beq.n	800d05c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2220      	movs	r2, #32
 800d054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d058:	2303      	movs	r3, #3
 800d05a:	e03d      	b.n	800d0d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10b      	bne.n	800d07a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	881b      	ldrh	r3, [r3, #0]
 800d066:	461a      	mov	r2, r3
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d070:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	3302      	adds	r3, #2
 800d076:	61bb      	str	r3, [r7, #24]
 800d078:	e007      	b.n	800d08a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	781a      	ldrb	r2, [r3, #0]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	3301      	adds	r3, #1
 800d088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d090:	b29b      	uxth	r3, r3
 800d092:	3b01      	subs	r3, #1
 800d094:	b29a      	uxth	r2, r3
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d1c8      	bne.n	800d03a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	9300      	str	r3, [sp, #0]
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	2140      	movs	r1, #64	@ 0x40
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f001 faa2 	bl	800e5fc <UART_WaitOnFlagUntilTimeout>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d005      	beq.n	800d0ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2220      	movs	r2, #32
 800d0c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	e006      	b.n	800d0d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2220      	movs	r2, #32
 800d0ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	e000      	b.n	800d0d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d0d6:	2302      	movs	r3, #2
  }
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3720      	adds	r7, #32
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b0ba      	sub	sp, #232	@ 0xe8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	69db      	ldr	r3, [r3, #28]
 800d0ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d106:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d10a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d10e:	4013      	ands	r3, r2
 800d110:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d11b      	bne.n	800d154 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d120:	f003 0320 	and.w	r3, r3, #32
 800d124:	2b00      	cmp	r3, #0
 800d126:	d015      	beq.n	800d154 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d12c:	f003 0320 	and.w	r3, r3, #32
 800d130:	2b00      	cmp	r3, #0
 800d132:	d105      	bne.n	800d140 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d009      	beq.n	800d154 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d144:	2b00      	cmp	r3, #0
 800d146:	f000 8377 	beq.w	800d838 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	4798      	blx	r3
      }
      return;
 800d152:	e371      	b.n	800d838 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f000 8123 	beq.w	800d3a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d15e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d162:	4b8d      	ldr	r3, [pc, #564]	@ (800d398 <HAL_UART_IRQHandler+0x2b8>)
 800d164:	4013      	ands	r3, r2
 800d166:	2b00      	cmp	r3, #0
 800d168:	d106      	bne.n	800d178 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d16a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d16e:	4b8b      	ldr	r3, [pc, #556]	@ (800d39c <HAL_UART_IRQHandler+0x2bc>)
 800d170:	4013      	ands	r3, r2
 800d172:	2b00      	cmp	r3, #0
 800d174:	f000 8116 	beq.w	800d3a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d17c:	f003 0301 	and.w	r3, r3, #1
 800d180:	2b00      	cmp	r3, #0
 800d182:	d011      	beq.n	800d1a8 <HAL_UART_IRQHandler+0xc8>
 800d184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00b      	beq.n	800d1a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2201      	movs	r2, #1
 800d196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d19e:	f043 0201 	orr.w	r2, r3, #1
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1ac:	f003 0302 	and.w	r3, r3, #2
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d011      	beq.n	800d1d8 <HAL_UART_IRQHandler+0xf8>
 800d1b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1b8:	f003 0301 	and.w	r3, r3, #1
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00b      	beq.n	800d1d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2202      	movs	r2, #2
 800d1c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1ce:	f043 0204 	orr.w	r2, r3, #4
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1dc:	f003 0304 	and.w	r3, r3, #4
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d011      	beq.n	800d208 <HAL_UART_IRQHandler+0x128>
 800d1e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1e8:	f003 0301 	and.w	r3, r3, #1
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d00b      	beq.n	800d208 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2204      	movs	r2, #4
 800d1f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1fe:	f043 0202 	orr.w	r2, r3, #2
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d20c:	f003 0308 	and.w	r3, r3, #8
 800d210:	2b00      	cmp	r3, #0
 800d212:	d017      	beq.n	800d244 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d218:	f003 0320 	and.w	r3, r3, #32
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d105      	bne.n	800d22c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d220:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d224:	4b5c      	ldr	r3, [pc, #368]	@ (800d398 <HAL_UART_IRQHandler+0x2b8>)
 800d226:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00b      	beq.n	800d244 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2208      	movs	r2, #8
 800d232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d23a:	f043 0208 	orr.w	r2, r3, #8
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d012      	beq.n	800d276 <HAL_UART_IRQHandler+0x196>
 800d250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d254:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d00c      	beq.n	800d276 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d26c:	f043 0220 	orr.w	r2, r3, #32
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 82dd 	beq.w	800d83c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d286:	f003 0320 	and.w	r3, r3, #32
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d013      	beq.n	800d2b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d28e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d292:	f003 0320 	and.w	r3, r3, #32
 800d296:	2b00      	cmp	r3, #0
 800d298:	d105      	bne.n	800d2a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d29a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d29e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d007      	beq.n	800d2b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d003      	beq.n	800d2b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2ca:	2b40      	cmp	r3, #64	@ 0x40
 800d2cc:	d005      	beq.n	800d2da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d2ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d2d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d054      	beq.n	800d384 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f001 f9f6 	bl	800e6cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2ea:	2b40      	cmp	r3, #64	@ 0x40
 800d2ec:	d146      	bne.n	800d37c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3308      	adds	r3, #8
 800d2f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d2fc:	e853 3f00 	ldrex	r3, [r3]
 800d300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d304:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d30c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3308      	adds	r3, #8
 800d316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d31a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d31e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d32a:	e841 2300 	strex	r3, r2, [r1]
 800d32e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1d9      	bne.n	800d2ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d340:	2b00      	cmp	r3, #0
 800d342:	d017      	beq.n	800d374 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d34a:	4a15      	ldr	r2, [pc, #84]	@ (800d3a0 <HAL_UART_IRQHandler+0x2c0>)
 800d34c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d354:	4618      	mov	r0, r3
 800d356:	f7f9 fbc3 	bl	8006ae0 <HAL_DMA_Abort_IT>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d019      	beq.n	800d394 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d36e:	4610      	mov	r0, r2
 800d370:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d372:	e00f      	b.n	800d394 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 fa77 	bl	800d868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d37a:	e00b      	b.n	800d394 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 fa73 	bl	800d868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d382:	e007      	b.n	800d394 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fa6f 	bl	800d868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d392:	e253      	b.n	800d83c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d394:	bf00      	nop
    return;
 800d396:	e251      	b.n	800d83c <HAL_UART_IRQHandler+0x75c>
 800d398:	10000001 	.word	0x10000001
 800d39c:	04000120 	.word	0x04000120
 800d3a0:	0800e799 	.word	0x0800e799

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	f040 81e7 	bne.w	800d77c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3b2:	f003 0310 	and.w	r3, r3, #16
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	f000 81e0 	beq.w	800d77c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d3bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3c0:	f003 0310 	and.w	r3, r3, #16
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	f000 81d9 	beq.w	800d77c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2210      	movs	r2, #16
 800d3d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3dc:	2b40      	cmp	r3, #64	@ 0x40
 800d3de:	f040 8151 	bne.w	800d684 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a96      	ldr	r2, [pc, #600]	@ (800d644 <HAL_UART_IRQHandler+0x564>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d068      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a93      	ldr	r2, [pc, #588]	@ (800d648 <HAL_UART_IRQHandler+0x568>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d061      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a91      	ldr	r2, [pc, #580]	@ (800d64c <HAL_UART_IRQHandler+0x56c>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d05a      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a8e      	ldr	r2, [pc, #568]	@ (800d650 <HAL_UART_IRQHandler+0x570>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d053      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a8c      	ldr	r2, [pc, #560]	@ (800d654 <HAL_UART_IRQHandler+0x574>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d04c      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a89      	ldr	r2, [pc, #548]	@ (800d658 <HAL_UART_IRQHandler+0x578>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d045      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4a87      	ldr	r2, [pc, #540]	@ (800d65c <HAL_UART_IRQHandler+0x57c>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d03e      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a84      	ldr	r2, [pc, #528]	@ (800d660 <HAL_UART_IRQHandler+0x580>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d037      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a82      	ldr	r2, [pc, #520]	@ (800d664 <HAL_UART_IRQHandler+0x584>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d030      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a7f      	ldr	r2, [pc, #508]	@ (800d668 <HAL_UART_IRQHandler+0x588>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d029      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a7d      	ldr	r2, [pc, #500]	@ (800d66c <HAL_UART_IRQHandler+0x58c>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d022      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a7a      	ldr	r2, [pc, #488]	@ (800d670 <HAL_UART_IRQHandler+0x590>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d01b      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a78      	ldr	r2, [pc, #480]	@ (800d674 <HAL_UART_IRQHandler+0x594>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d014      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a75      	ldr	r2, [pc, #468]	@ (800d678 <HAL_UART_IRQHandler+0x598>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d00d      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4a73      	ldr	r2, [pc, #460]	@ (800d67c <HAL_UART_IRQHandler+0x59c>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d006      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x3e2>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a70      	ldr	r2, [pc, #448]	@ (800d680 <HAL_UART_IRQHandler+0x5a0>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d106      	bne.n	800d4d0 <HAL_UART_IRQHandler+0x3f0>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	e005      	b.n	800d4dc <HAL_UART_IRQHandler+0x3fc>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d4e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	f000 81ab 	beq.w	800d840 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d4f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	f080 81a3 	bcs.w	800d840 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d500:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d50a:	69db      	ldr	r3, [r3, #28]
 800d50c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d510:	f000 8087 	beq.w	800d622 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d520:	e853 3f00 	ldrex	r3, [r3]
 800d524:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d528:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d52c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d530:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	461a      	mov	r2, r3
 800d53a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d53e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d542:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d546:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d54a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d54e:	e841 2300 	strex	r3, r2, [r1]
 800d552:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d556:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1da      	bne.n	800d514 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3308      	adds	r3, #8
 800d564:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d566:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d568:	e853 3f00 	ldrex	r3, [r3]
 800d56c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d56e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d570:	f023 0301 	bic.w	r3, r3, #1
 800d574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3308      	adds	r3, #8
 800d57e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d582:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d586:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d588:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d58a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d58e:	e841 2300 	strex	r3, r2, [r1]
 800d592:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d594:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d596:	2b00      	cmp	r3, #0
 800d598:	d1e1      	bne.n	800d55e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	3308      	adds	r3, #8
 800d5a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d5a4:	e853 3f00 	ldrex	r3, [r3]
 800d5a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d5aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	3308      	adds	r3, #8
 800d5ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d5be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d5c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d5c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d5c6:	e841 2300 	strex	r3, r2, [r1]
 800d5ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d5cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d1e3      	bne.n	800d59a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2220      	movs	r2, #32
 800d5d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5e8:	e853 3f00 	ldrex	r3, [r3]
 800d5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d5ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5f0:	f023 0310 	bic.w	r3, r3, #16
 800d5f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d602:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d604:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d606:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d608:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d60a:	e841 2300 	strex	r3, r2, [r1]
 800d60e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1e4      	bne.n	800d5e0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7f8 ff41 	bl	80064a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2202      	movs	r2, #2
 800d626:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d634:	b29b      	uxth	r3, r3
 800d636:	1ad3      	subs	r3, r2, r3
 800d638:	b29b      	uxth	r3, r3
 800d63a:	4619      	mov	r1, r3
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 f91d 	bl	800d87c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d642:	e0fd      	b.n	800d840 <HAL_UART_IRQHandler+0x760>
 800d644:	40020010 	.word	0x40020010
 800d648:	40020028 	.word	0x40020028
 800d64c:	40020040 	.word	0x40020040
 800d650:	40020058 	.word	0x40020058
 800d654:	40020070 	.word	0x40020070
 800d658:	40020088 	.word	0x40020088
 800d65c:	400200a0 	.word	0x400200a0
 800d660:	400200b8 	.word	0x400200b8
 800d664:	40020410 	.word	0x40020410
 800d668:	40020428 	.word	0x40020428
 800d66c:	40020440 	.word	0x40020440
 800d670:	40020458 	.word	0x40020458
 800d674:	40020470 	.word	0x40020470
 800d678:	40020488 	.word	0x40020488
 800d67c:	400204a0 	.word	0x400204a0
 800d680:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d690:	b29b      	uxth	r3, r3
 800d692:	1ad3      	subs	r3, r2, r3
 800d694:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f000 80cf 	beq.w	800d844 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d6a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f000 80ca 	beq.w	800d844 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b8:	e853 3f00 	ldrex	r3, [r3]
 800d6bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d6be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d6c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d6d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6d4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d6d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6da:	e841 2300 	strex	r3, r2, [r1]
 800d6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d6e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d1e4      	bne.n	800d6b0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	3308      	adds	r3, #8
 800d6ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f0:	e853 3f00 	ldrex	r3, [r3]
 800d6f4:	623b      	str	r3, [r7, #32]
   return(result);
 800d6f6:	6a3a      	ldr	r2, [r7, #32]
 800d6f8:	4b55      	ldr	r3, [pc, #340]	@ (800d850 <HAL_UART_IRQHandler+0x770>)
 800d6fa:	4013      	ands	r3, r2
 800d6fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3308      	adds	r3, #8
 800d706:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d70a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d70c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d712:	e841 2300 	strex	r3, r2, [r1]
 800d716:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1e3      	bne.n	800d6e6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2220      	movs	r2, #32
 800d722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	e853 3f00 	ldrex	r3, [r3]
 800d73e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f023 0310 	bic.w	r3, r3, #16
 800d746:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	461a      	mov	r2, r3
 800d750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d754:	61fb      	str	r3, [r7, #28]
 800d756:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d758:	69b9      	ldr	r1, [r7, #24]
 800d75a:	69fa      	ldr	r2, [r7, #28]
 800d75c:	e841 2300 	strex	r3, r2, [r1]
 800d760:	617b      	str	r3, [r7, #20]
   return(result);
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d1e4      	bne.n	800d732 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2202      	movs	r2, #2
 800d76c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d76e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d772:	4619      	mov	r1, r3
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 f881 	bl	800d87c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d77a:	e063      	b.n	800d844 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d780:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00e      	beq.n	800d7a6 <HAL_UART_IRQHandler+0x6c6>
 800d788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d78c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d790:	2b00      	cmp	r3, #0
 800d792:	d008      	beq.n	800d7a6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d79c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f001 f83b 	bl	800e81a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7a4:	e051      	b.n	800d84a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d7a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d014      	beq.n	800d7dc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d7b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d105      	bne.n	800d7ca <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d7be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d7c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d008      	beq.n	800d7dc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d03a      	beq.n	800d848 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	4798      	blx	r3
    }
    return;
 800d7da:	e035      	b.n	800d848 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d009      	beq.n	800d7fc <HAL_UART_IRQHandler+0x71c>
 800d7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d003      	beq.n	800d7fc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 ffe5 	bl	800e7c4 <UART_EndTransmit_IT>
    return;
 800d7fa:	e026      	b.n	800d84a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d804:	2b00      	cmp	r3, #0
 800d806:	d009      	beq.n	800d81c <HAL_UART_IRQHandler+0x73c>
 800d808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d80c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d810:	2b00      	cmp	r3, #0
 800d812:	d003      	beq.n	800d81c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f001 f814 	bl	800e842 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d81a:	e016      	b.n	800d84a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d824:	2b00      	cmp	r3, #0
 800d826:	d010      	beq.n	800d84a <HAL_UART_IRQHandler+0x76a>
 800d828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	da0c      	bge.n	800d84a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 fffc 	bl	800e82e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d836:	e008      	b.n	800d84a <HAL_UART_IRQHandler+0x76a>
      return;
 800d838:	bf00      	nop
 800d83a:	e006      	b.n	800d84a <HAL_UART_IRQHandler+0x76a>
    return;
 800d83c:	bf00      	nop
 800d83e:	e004      	b.n	800d84a <HAL_UART_IRQHandler+0x76a>
      return;
 800d840:	bf00      	nop
 800d842:	e002      	b.n	800d84a <HAL_UART_IRQHandler+0x76a>
      return;
 800d844:	bf00      	nop
 800d846:	e000      	b.n	800d84a <HAL_UART_IRQHandler+0x76a>
    return;
 800d848:	bf00      	nop
  }
}
 800d84a:	37e8      	adds	r7, #232	@ 0xe8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	effffffe 	.word	0xeffffffe

0800d854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d85c:	bf00      	nop
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr

0800d868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d870:	bf00      	nop
 800d872:	370c      	adds	r7, #12
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	460b      	mov	r3, r1
 800d886:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d888:	bf00      	nop
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d898:	b092      	sub	sp, #72	@ 0x48
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	689a      	ldr	r2, [r3, #8]
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	431a      	orrs	r2, r3
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	695b      	ldr	r3, [r3, #20]
 800d8b2:	431a      	orrs	r2, r3
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	69db      	ldr	r3, [r3, #28]
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	4bbe      	ldr	r3, [pc, #760]	@ (800dbbc <UART_SetConfig+0x328>)
 800d8c4:	4013      	ands	r3, r2
 800d8c6:	697a      	ldr	r2, [r7, #20]
 800d8c8:	6812      	ldr	r2, [r2, #0]
 800d8ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d8cc:	430b      	orrs	r3, r1
 800d8ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	68da      	ldr	r2, [r3, #12]
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	430a      	orrs	r2, r1
 800d8e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	699b      	ldr	r3, [r3, #24]
 800d8ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4ab3      	ldr	r2, [pc, #716]	@ (800dbc0 <UART_SetConfig+0x32c>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d004      	beq.n	800d900 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	689a      	ldr	r2, [r3, #8]
 800d906:	4baf      	ldr	r3, [pc, #700]	@ (800dbc4 <UART_SetConfig+0x330>)
 800d908:	4013      	ands	r3, r2
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	6812      	ldr	r2, [r2, #0]
 800d90e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d910:	430b      	orrs	r3, r1
 800d912:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d91a:	f023 010f 	bic.w	r1, r3, #15
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	430a      	orrs	r2, r1
 800d928:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4aa6      	ldr	r2, [pc, #664]	@ (800dbc8 <UART_SetConfig+0x334>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d177      	bne.n	800da24 <UART_SetConfig+0x190>
 800d934:	4ba5      	ldr	r3, [pc, #660]	@ (800dbcc <UART_SetConfig+0x338>)
 800d936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d938:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d93c:	2b28      	cmp	r3, #40	@ 0x28
 800d93e:	d86d      	bhi.n	800da1c <UART_SetConfig+0x188>
 800d940:	a201      	add	r2, pc, #4	@ (adr r2, 800d948 <UART_SetConfig+0xb4>)
 800d942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d946:	bf00      	nop
 800d948:	0800d9ed 	.word	0x0800d9ed
 800d94c:	0800da1d 	.word	0x0800da1d
 800d950:	0800da1d 	.word	0x0800da1d
 800d954:	0800da1d 	.word	0x0800da1d
 800d958:	0800da1d 	.word	0x0800da1d
 800d95c:	0800da1d 	.word	0x0800da1d
 800d960:	0800da1d 	.word	0x0800da1d
 800d964:	0800da1d 	.word	0x0800da1d
 800d968:	0800d9f5 	.word	0x0800d9f5
 800d96c:	0800da1d 	.word	0x0800da1d
 800d970:	0800da1d 	.word	0x0800da1d
 800d974:	0800da1d 	.word	0x0800da1d
 800d978:	0800da1d 	.word	0x0800da1d
 800d97c:	0800da1d 	.word	0x0800da1d
 800d980:	0800da1d 	.word	0x0800da1d
 800d984:	0800da1d 	.word	0x0800da1d
 800d988:	0800d9fd 	.word	0x0800d9fd
 800d98c:	0800da1d 	.word	0x0800da1d
 800d990:	0800da1d 	.word	0x0800da1d
 800d994:	0800da1d 	.word	0x0800da1d
 800d998:	0800da1d 	.word	0x0800da1d
 800d99c:	0800da1d 	.word	0x0800da1d
 800d9a0:	0800da1d 	.word	0x0800da1d
 800d9a4:	0800da1d 	.word	0x0800da1d
 800d9a8:	0800da05 	.word	0x0800da05
 800d9ac:	0800da1d 	.word	0x0800da1d
 800d9b0:	0800da1d 	.word	0x0800da1d
 800d9b4:	0800da1d 	.word	0x0800da1d
 800d9b8:	0800da1d 	.word	0x0800da1d
 800d9bc:	0800da1d 	.word	0x0800da1d
 800d9c0:	0800da1d 	.word	0x0800da1d
 800d9c4:	0800da1d 	.word	0x0800da1d
 800d9c8:	0800da0d 	.word	0x0800da0d
 800d9cc:	0800da1d 	.word	0x0800da1d
 800d9d0:	0800da1d 	.word	0x0800da1d
 800d9d4:	0800da1d 	.word	0x0800da1d
 800d9d8:	0800da1d 	.word	0x0800da1d
 800d9dc:	0800da1d 	.word	0x0800da1d
 800d9e0:	0800da1d 	.word	0x0800da1d
 800d9e4:	0800da1d 	.word	0x0800da1d
 800d9e8:	0800da15 	.word	0x0800da15
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9f2:	e222      	b.n	800de3a <UART_SetConfig+0x5a6>
 800d9f4:	2304      	movs	r3, #4
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fa:	e21e      	b.n	800de3a <UART_SetConfig+0x5a6>
 800d9fc:	2308      	movs	r3, #8
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da02:	e21a      	b.n	800de3a <UART_SetConfig+0x5a6>
 800da04:	2310      	movs	r3, #16
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0a:	e216      	b.n	800de3a <UART_SetConfig+0x5a6>
 800da0c:	2320      	movs	r3, #32
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da12:	e212      	b.n	800de3a <UART_SetConfig+0x5a6>
 800da14:	2340      	movs	r3, #64	@ 0x40
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da1a:	e20e      	b.n	800de3a <UART_SetConfig+0x5a6>
 800da1c:	2380      	movs	r3, #128	@ 0x80
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da22:	e20a      	b.n	800de3a <UART_SetConfig+0x5a6>
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a69      	ldr	r2, [pc, #420]	@ (800dbd0 <UART_SetConfig+0x33c>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d130      	bne.n	800da90 <UART_SetConfig+0x1fc>
 800da2e:	4b67      	ldr	r3, [pc, #412]	@ (800dbcc <UART_SetConfig+0x338>)
 800da30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da32:	f003 0307 	and.w	r3, r3, #7
 800da36:	2b05      	cmp	r3, #5
 800da38:	d826      	bhi.n	800da88 <UART_SetConfig+0x1f4>
 800da3a:	a201      	add	r2, pc, #4	@ (adr r2, 800da40 <UART_SetConfig+0x1ac>)
 800da3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da40:	0800da59 	.word	0x0800da59
 800da44:	0800da61 	.word	0x0800da61
 800da48:	0800da69 	.word	0x0800da69
 800da4c:	0800da71 	.word	0x0800da71
 800da50:	0800da79 	.word	0x0800da79
 800da54:	0800da81 	.word	0x0800da81
 800da58:	2300      	movs	r3, #0
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da5e:	e1ec      	b.n	800de3a <UART_SetConfig+0x5a6>
 800da60:	2304      	movs	r3, #4
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da66:	e1e8      	b.n	800de3a <UART_SetConfig+0x5a6>
 800da68:	2308      	movs	r3, #8
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6e:	e1e4      	b.n	800de3a <UART_SetConfig+0x5a6>
 800da70:	2310      	movs	r3, #16
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da76:	e1e0      	b.n	800de3a <UART_SetConfig+0x5a6>
 800da78:	2320      	movs	r3, #32
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da7e:	e1dc      	b.n	800de3a <UART_SetConfig+0x5a6>
 800da80:	2340      	movs	r3, #64	@ 0x40
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da86:	e1d8      	b.n	800de3a <UART_SetConfig+0x5a6>
 800da88:	2380      	movs	r3, #128	@ 0x80
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8e:	e1d4      	b.n	800de3a <UART_SetConfig+0x5a6>
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a4f      	ldr	r2, [pc, #316]	@ (800dbd4 <UART_SetConfig+0x340>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d130      	bne.n	800dafc <UART_SetConfig+0x268>
 800da9a:	4b4c      	ldr	r3, [pc, #304]	@ (800dbcc <UART_SetConfig+0x338>)
 800da9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da9e:	f003 0307 	and.w	r3, r3, #7
 800daa2:	2b05      	cmp	r3, #5
 800daa4:	d826      	bhi.n	800daf4 <UART_SetConfig+0x260>
 800daa6:	a201      	add	r2, pc, #4	@ (adr r2, 800daac <UART_SetConfig+0x218>)
 800daa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daac:	0800dac5 	.word	0x0800dac5
 800dab0:	0800dacd 	.word	0x0800dacd
 800dab4:	0800dad5 	.word	0x0800dad5
 800dab8:	0800dadd 	.word	0x0800dadd
 800dabc:	0800dae5 	.word	0x0800dae5
 800dac0:	0800daed 	.word	0x0800daed
 800dac4:	2300      	movs	r3, #0
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daca:	e1b6      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dacc:	2304      	movs	r3, #4
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dad2:	e1b2      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dad4:	2308      	movs	r3, #8
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dada:	e1ae      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dadc:	2310      	movs	r3, #16
 800dade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dae2:	e1aa      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dae4:	2320      	movs	r3, #32
 800dae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daea:	e1a6      	b.n	800de3a <UART_SetConfig+0x5a6>
 800daec:	2340      	movs	r3, #64	@ 0x40
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daf2:	e1a2      	b.n	800de3a <UART_SetConfig+0x5a6>
 800daf4:	2380      	movs	r3, #128	@ 0x80
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dafa:	e19e      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a35      	ldr	r2, [pc, #212]	@ (800dbd8 <UART_SetConfig+0x344>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d130      	bne.n	800db68 <UART_SetConfig+0x2d4>
 800db06:	4b31      	ldr	r3, [pc, #196]	@ (800dbcc <UART_SetConfig+0x338>)
 800db08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db0a:	f003 0307 	and.w	r3, r3, #7
 800db0e:	2b05      	cmp	r3, #5
 800db10:	d826      	bhi.n	800db60 <UART_SetConfig+0x2cc>
 800db12:	a201      	add	r2, pc, #4	@ (adr r2, 800db18 <UART_SetConfig+0x284>)
 800db14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db18:	0800db31 	.word	0x0800db31
 800db1c:	0800db39 	.word	0x0800db39
 800db20:	0800db41 	.word	0x0800db41
 800db24:	0800db49 	.word	0x0800db49
 800db28:	0800db51 	.word	0x0800db51
 800db2c:	0800db59 	.word	0x0800db59
 800db30:	2300      	movs	r3, #0
 800db32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db36:	e180      	b.n	800de3a <UART_SetConfig+0x5a6>
 800db38:	2304      	movs	r3, #4
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db3e:	e17c      	b.n	800de3a <UART_SetConfig+0x5a6>
 800db40:	2308      	movs	r3, #8
 800db42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db46:	e178      	b.n	800de3a <UART_SetConfig+0x5a6>
 800db48:	2310      	movs	r3, #16
 800db4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db4e:	e174      	b.n	800de3a <UART_SetConfig+0x5a6>
 800db50:	2320      	movs	r3, #32
 800db52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db56:	e170      	b.n	800de3a <UART_SetConfig+0x5a6>
 800db58:	2340      	movs	r3, #64	@ 0x40
 800db5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db5e:	e16c      	b.n	800de3a <UART_SetConfig+0x5a6>
 800db60:	2380      	movs	r3, #128	@ 0x80
 800db62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db66:	e168      	b.n	800de3a <UART_SetConfig+0x5a6>
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a1b      	ldr	r2, [pc, #108]	@ (800dbdc <UART_SetConfig+0x348>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d142      	bne.n	800dbf8 <UART_SetConfig+0x364>
 800db72:	4b16      	ldr	r3, [pc, #88]	@ (800dbcc <UART_SetConfig+0x338>)
 800db74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db76:	f003 0307 	and.w	r3, r3, #7
 800db7a:	2b05      	cmp	r3, #5
 800db7c:	d838      	bhi.n	800dbf0 <UART_SetConfig+0x35c>
 800db7e:	a201      	add	r2, pc, #4	@ (adr r2, 800db84 <UART_SetConfig+0x2f0>)
 800db80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db84:	0800db9d 	.word	0x0800db9d
 800db88:	0800dba5 	.word	0x0800dba5
 800db8c:	0800dbad 	.word	0x0800dbad
 800db90:	0800dbb5 	.word	0x0800dbb5
 800db94:	0800dbe1 	.word	0x0800dbe1
 800db98:	0800dbe9 	.word	0x0800dbe9
 800db9c:	2300      	movs	r3, #0
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dba2:	e14a      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dba4:	2304      	movs	r3, #4
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbaa:	e146      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dbac:	2308      	movs	r3, #8
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbb2:	e142      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dbb4:	2310      	movs	r3, #16
 800dbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbba:	e13e      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dbbc:	cfff69f3 	.word	0xcfff69f3
 800dbc0:	58000c00 	.word	0x58000c00
 800dbc4:	11fff4ff 	.word	0x11fff4ff
 800dbc8:	40011000 	.word	0x40011000
 800dbcc:	58024400 	.word	0x58024400
 800dbd0:	40004400 	.word	0x40004400
 800dbd4:	40004800 	.word	0x40004800
 800dbd8:	40004c00 	.word	0x40004c00
 800dbdc:	40005000 	.word	0x40005000
 800dbe0:	2320      	movs	r3, #32
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbe6:	e128      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dbe8:	2340      	movs	r3, #64	@ 0x40
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbee:	e124      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dbf0:	2380      	movs	r3, #128	@ 0x80
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbf6:	e120      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4acb      	ldr	r2, [pc, #812]	@ (800df2c <UART_SetConfig+0x698>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d176      	bne.n	800dcf0 <UART_SetConfig+0x45c>
 800dc02:	4bcb      	ldr	r3, [pc, #812]	@ (800df30 <UART_SetConfig+0x69c>)
 800dc04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dc0a:	2b28      	cmp	r3, #40	@ 0x28
 800dc0c:	d86c      	bhi.n	800dce8 <UART_SetConfig+0x454>
 800dc0e:	a201      	add	r2, pc, #4	@ (adr r2, 800dc14 <UART_SetConfig+0x380>)
 800dc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc14:	0800dcb9 	.word	0x0800dcb9
 800dc18:	0800dce9 	.word	0x0800dce9
 800dc1c:	0800dce9 	.word	0x0800dce9
 800dc20:	0800dce9 	.word	0x0800dce9
 800dc24:	0800dce9 	.word	0x0800dce9
 800dc28:	0800dce9 	.word	0x0800dce9
 800dc2c:	0800dce9 	.word	0x0800dce9
 800dc30:	0800dce9 	.word	0x0800dce9
 800dc34:	0800dcc1 	.word	0x0800dcc1
 800dc38:	0800dce9 	.word	0x0800dce9
 800dc3c:	0800dce9 	.word	0x0800dce9
 800dc40:	0800dce9 	.word	0x0800dce9
 800dc44:	0800dce9 	.word	0x0800dce9
 800dc48:	0800dce9 	.word	0x0800dce9
 800dc4c:	0800dce9 	.word	0x0800dce9
 800dc50:	0800dce9 	.word	0x0800dce9
 800dc54:	0800dcc9 	.word	0x0800dcc9
 800dc58:	0800dce9 	.word	0x0800dce9
 800dc5c:	0800dce9 	.word	0x0800dce9
 800dc60:	0800dce9 	.word	0x0800dce9
 800dc64:	0800dce9 	.word	0x0800dce9
 800dc68:	0800dce9 	.word	0x0800dce9
 800dc6c:	0800dce9 	.word	0x0800dce9
 800dc70:	0800dce9 	.word	0x0800dce9
 800dc74:	0800dcd1 	.word	0x0800dcd1
 800dc78:	0800dce9 	.word	0x0800dce9
 800dc7c:	0800dce9 	.word	0x0800dce9
 800dc80:	0800dce9 	.word	0x0800dce9
 800dc84:	0800dce9 	.word	0x0800dce9
 800dc88:	0800dce9 	.word	0x0800dce9
 800dc8c:	0800dce9 	.word	0x0800dce9
 800dc90:	0800dce9 	.word	0x0800dce9
 800dc94:	0800dcd9 	.word	0x0800dcd9
 800dc98:	0800dce9 	.word	0x0800dce9
 800dc9c:	0800dce9 	.word	0x0800dce9
 800dca0:	0800dce9 	.word	0x0800dce9
 800dca4:	0800dce9 	.word	0x0800dce9
 800dca8:	0800dce9 	.word	0x0800dce9
 800dcac:	0800dce9 	.word	0x0800dce9
 800dcb0:	0800dce9 	.word	0x0800dce9
 800dcb4:	0800dce1 	.word	0x0800dce1
 800dcb8:	2301      	movs	r3, #1
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcbe:	e0bc      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dcc0:	2304      	movs	r3, #4
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcc6:	e0b8      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dcc8:	2308      	movs	r3, #8
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcce:	e0b4      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dcd0:	2310      	movs	r3, #16
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcd6:	e0b0      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dcd8:	2320      	movs	r3, #32
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcde:	e0ac      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dce0:	2340      	movs	r3, #64	@ 0x40
 800dce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dce6:	e0a8      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dce8:	2380      	movs	r3, #128	@ 0x80
 800dcea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcee:	e0a4      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a8f      	ldr	r2, [pc, #572]	@ (800df34 <UART_SetConfig+0x6a0>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d130      	bne.n	800dd5c <UART_SetConfig+0x4c8>
 800dcfa:	4b8d      	ldr	r3, [pc, #564]	@ (800df30 <UART_SetConfig+0x69c>)
 800dcfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcfe:	f003 0307 	and.w	r3, r3, #7
 800dd02:	2b05      	cmp	r3, #5
 800dd04:	d826      	bhi.n	800dd54 <UART_SetConfig+0x4c0>
 800dd06:	a201      	add	r2, pc, #4	@ (adr r2, 800dd0c <UART_SetConfig+0x478>)
 800dd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0c:	0800dd25 	.word	0x0800dd25
 800dd10:	0800dd2d 	.word	0x0800dd2d
 800dd14:	0800dd35 	.word	0x0800dd35
 800dd18:	0800dd3d 	.word	0x0800dd3d
 800dd1c:	0800dd45 	.word	0x0800dd45
 800dd20:	0800dd4d 	.word	0x0800dd4d
 800dd24:	2300      	movs	r3, #0
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd2a:	e086      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dd2c:	2304      	movs	r3, #4
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd32:	e082      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dd34:	2308      	movs	r3, #8
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd3a:	e07e      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dd3c:	2310      	movs	r3, #16
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd42:	e07a      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dd44:	2320      	movs	r3, #32
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd4a:	e076      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dd4c:	2340      	movs	r3, #64	@ 0x40
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd52:	e072      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dd54:	2380      	movs	r3, #128	@ 0x80
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd5a:	e06e      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a75      	ldr	r2, [pc, #468]	@ (800df38 <UART_SetConfig+0x6a4>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d130      	bne.n	800ddc8 <UART_SetConfig+0x534>
 800dd66:	4b72      	ldr	r3, [pc, #456]	@ (800df30 <UART_SetConfig+0x69c>)
 800dd68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd6a:	f003 0307 	and.w	r3, r3, #7
 800dd6e:	2b05      	cmp	r3, #5
 800dd70:	d826      	bhi.n	800ddc0 <UART_SetConfig+0x52c>
 800dd72:	a201      	add	r2, pc, #4	@ (adr r2, 800dd78 <UART_SetConfig+0x4e4>)
 800dd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd78:	0800dd91 	.word	0x0800dd91
 800dd7c:	0800dd99 	.word	0x0800dd99
 800dd80:	0800dda1 	.word	0x0800dda1
 800dd84:	0800dda9 	.word	0x0800dda9
 800dd88:	0800ddb1 	.word	0x0800ddb1
 800dd8c:	0800ddb9 	.word	0x0800ddb9
 800dd90:	2300      	movs	r3, #0
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd96:	e050      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dd98:	2304      	movs	r3, #4
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd9e:	e04c      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dda0:	2308      	movs	r3, #8
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dda6:	e048      	b.n	800de3a <UART_SetConfig+0x5a6>
 800dda8:	2310      	movs	r3, #16
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddae:	e044      	b.n	800de3a <UART_SetConfig+0x5a6>
 800ddb0:	2320      	movs	r3, #32
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddb6:	e040      	b.n	800de3a <UART_SetConfig+0x5a6>
 800ddb8:	2340      	movs	r3, #64	@ 0x40
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddbe:	e03c      	b.n	800de3a <UART_SetConfig+0x5a6>
 800ddc0:	2380      	movs	r3, #128	@ 0x80
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddc6:	e038      	b.n	800de3a <UART_SetConfig+0x5a6>
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a5b      	ldr	r2, [pc, #364]	@ (800df3c <UART_SetConfig+0x6a8>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d130      	bne.n	800de34 <UART_SetConfig+0x5a0>
 800ddd2:	4b57      	ldr	r3, [pc, #348]	@ (800df30 <UART_SetConfig+0x69c>)
 800ddd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddd6:	f003 0307 	and.w	r3, r3, #7
 800ddda:	2b05      	cmp	r3, #5
 800dddc:	d826      	bhi.n	800de2c <UART_SetConfig+0x598>
 800ddde:	a201      	add	r2, pc, #4	@ (adr r2, 800dde4 <UART_SetConfig+0x550>)
 800dde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde4:	0800ddfd 	.word	0x0800ddfd
 800dde8:	0800de05 	.word	0x0800de05
 800ddec:	0800de0d 	.word	0x0800de0d
 800ddf0:	0800de15 	.word	0x0800de15
 800ddf4:	0800de1d 	.word	0x0800de1d
 800ddf8:	0800de25 	.word	0x0800de25
 800ddfc:	2302      	movs	r3, #2
 800ddfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de02:	e01a      	b.n	800de3a <UART_SetConfig+0x5a6>
 800de04:	2304      	movs	r3, #4
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de0a:	e016      	b.n	800de3a <UART_SetConfig+0x5a6>
 800de0c:	2308      	movs	r3, #8
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de12:	e012      	b.n	800de3a <UART_SetConfig+0x5a6>
 800de14:	2310      	movs	r3, #16
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de1a:	e00e      	b.n	800de3a <UART_SetConfig+0x5a6>
 800de1c:	2320      	movs	r3, #32
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de22:	e00a      	b.n	800de3a <UART_SetConfig+0x5a6>
 800de24:	2340      	movs	r3, #64	@ 0x40
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de2a:	e006      	b.n	800de3a <UART_SetConfig+0x5a6>
 800de2c:	2380      	movs	r3, #128	@ 0x80
 800de2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de32:	e002      	b.n	800de3a <UART_SetConfig+0x5a6>
 800de34:	2380      	movs	r3, #128	@ 0x80
 800de36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a3f      	ldr	r2, [pc, #252]	@ (800df3c <UART_SetConfig+0x6a8>)
 800de40:	4293      	cmp	r3, r2
 800de42:	f040 80f8 	bne.w	800e036 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800de46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800de4a:	2b20      	cmp	r3, #32
 800de4c:	dc46      	bgt.n	800dedc <UART_SetConfig+0x648>
 800de4e:	2b02      	cmp	r3, #2
 800de50:	f2c0 8082 	blt.w	800df58 <UART_SetConfig+0x6c4>
 800de54:	3b02      	subs	r3, #2
 800de56:	2b1e      	cmp	r3, #30
 800de58:	d87e      	bhi.n	800df58 <UART_SetConfig+0x6c4>
 800de5a:	a201      	add	r2, pc, #4	@ (adr r2, 800de60 <UART_SetConfig+0x5cc>)
 800de5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de60:	0800dee3 	.word	0x0800dee3
 800de64:	0800df59 	.word	0x0800df59
 800de68:	0800deeb 	.word	0x0800deeb
 800de6c:	0800df59 	.word	0x0800df59
 800de70:	0800df59 	.word	0x0800df59
 800de74:	0800df59 	.word	0x0800df59
 800de78:	0800defb 	.word	0x0800defb
 800de7c:	0800df59 	.word	0x0800df59
 800de80:	0800df59 	.word	0x0800df59
 800de84:	0800df59 	.word	0x0800df59
 800de88:	0800df59 	.word	0x0800df59
 800de8c:	0800df59 	.word	0x0800df59
 800de90:	0800df59 	.word	0x0800df59
 800de94:	0800df59 	.word	0x0800df59
 800de98:	0800df0b 	.word	0x0800df0b
 800de9c:	0800df59 	.word	0x0800df59
 800dea0:	0800df59 	.word	0x0800df59
 800dea4:	0800df59 	.word	0x0800df59
 800dea8:	0800df59 	.word	0x0800df59
 800deac:	0800df59 	.word	0x0800df59
 800deb0:	0800df59 	.word	0x0800df59
 800deb4:	0800df59 	.word	0x0800df59
 800deb8:	0800df59 	.word	0x0800df59
 800debc:	0800df59 	.word	0x0800df59
 800dec0:	0800df59 	.word	0x0800df59
 800dec4:	0800df59 	.word	0x0800df59
 800dec8:	0800df59 	.word	0x0800df59
 800decc:	0800df59 	.word	0x0800df59
 800ded0:	0800df59 	.word	0x0800df59
 800ded4:	0800df59 	.word	0x0800df59
 800ded8:	0800df4b 	.word	0x0800df4b
 800dedc:	2b40      	cmp	r3, #64	@ 0x40
 800dede:	d037      	beq.n	800df50 <UART_SetConfig+0x6bc>
 800dee0:	e03a      	b.n	800df58 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dee2:	f7fd fefd 	bl	800bce0 <HAL_RCCEx_GetD3PCLK1Freq>
 800dee6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dee8:	e03c      	b.n	800df64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800deee:	4618      	mov	r0, r3
 800def0:	f7fd ff0c 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800def4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800def8:	e034      	b.n	800df64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800defa:	f107 0318 	add.w	r3, r7, #24
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe f858 	bl	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df08:	e02c      	b.n	800df64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df0a:	4b09      	ldr	r3, [pc, #36]	@ (800df30 <UART_SetConfig+0x69c>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f003 0320 	and.w	r3, r3, #32
 800df12:	2b00      	cmp	r3, #0
 800df14:	d016      	beq.n	800df44 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df16:	4b06      	ldr	r3, [pc, #24]	@ (800df30 <UART_SetConfig+0x69c>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	08db      	lsrs	r3, r3, #3
 800df1c:	f003 0303 	and.w	r3, r3, #3
 800df20:	4a07      	ldr	r2, [pc, #28]	@ (800df40 <UART_SetConfig+0x6ac>)
 800df22:	fa22 f303 	lsr.w	r3, r2, r3
 800df26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df28:	e01c      	b.n	800df64 <UART_SetConfig+0x6d0>
 800df2a:	bf00      	nop
 800df2c:	40011400 	.word	0x40011400
 800df30:	58024400 	.word	0x58024400
 800df34:	40007800 	.word	0x40007800
 800df38:	40007c00 	.word	0x40007c00
 800df3c:	58000c00 	.word	0x58000c00
 800df40:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800df44:	4b9d      	ldr	r3, [pc, #628]	@ (800e1bc <UART_SetConfig+0x928>)
 800df46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df48:	e00c      	b.n	800df64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df4a:	4b9d      	ldr	r3, [pc, #628]	@ (800e1c0 <UART_SetConfig+0x92c>)
 800df4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df4e:	e009      	b.n	800df64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df56:	e005      	b.n	800df64 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800df58:	2300      	movs	r3, #0
 800df5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800df5c:	2301      	movs	r3, #1
 800df5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800df62:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800df64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df66:	2b00      	cmp	r3, #0
 800df68:	f000 81de 	beq.w	800e328 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df70:	4a94      	ldr	r2, [pc, #592]	@ (800e1c4 <UART_SetConfig+0x930>)
 800df72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df76:	461a      	mov	r2, r3
 800df78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800df7e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	685a      	ldr	r2, [r3, #4]
 800df84:	4613      	mov	r3, r2
 800df86:	005b      	lsls	r3, r3, #1
 800df88:	4413      	add	r3, r2
 800df8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d305      	bcc.n	800df9c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df98:	429a      	cmp	r2, r3
 800df9a:	d903      	bls.n	800dfa4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800df9c:	2301      	movs	r3, #1
 800df9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dfa2:	e1c1      	b.n	800e328 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	60bb      	str	r3, [r7, #8]
 800dfaa:	60fa      	str	r2, [r7, #12]
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfb0:	4a84      	ldr	r2, [pc, #528]	@ (800e1c4 <UART_SetConfig+0x930>)
 800dfb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	2200      	movs	r2, #0
 800dfba:	603b      	str	r3, [r7, #0]
 800dfbc:	607a      	str	r2, [r7, #4]
 800dfbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dfc6:	f7f2 f9e3 	bl	8000390 <__aeabi_uldivmod>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	460b      	mov	r3, r1
 800dfce:	4610      	mov	r0, r2
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	f04f 0200 	mov.w	r2, #0
 800dfd6:	f04f 0300 	mov.w	r3, #0
 800dfda:	020b      	lsls	r3, r1, #8
 800dfdc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dfe0:	0202      	lsls	r2, r0, #8
 800dfe2:	6979      	ldr	r1, [r7, #20]
 800dfe4:	6849      	ldr	r1, [r1, #4]
 800dfe6:	0849      	lsrs	r1, r1, #1
 800dfe8:	2000      	movs	r0, #0
 800dfea:	460c      	mov	r4, r1
 800dfec:	4605      	mov	r5, r0
 800dfee:	eb12 0804 	adds.w	r8, r2, r4
 800dff2:	eb43 0905 	adc.w	r9, r3, r5
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	2200      	movs	r2, #0
 800dffc:	469a      	mov	sl, r3
 800dffe:	4693      	mov	fp, r2
 800e000:	4652      	mov	r2, sl
 800e002:	465b      	mov	r3, fp
 800e004:	4640      	mov	r0, r8
 800e006:	4649      	mov	r1, r9
 800e008:	f7f2 f9c2 	bl	8000390 <__aeabi_uldivmod>
 800e00c:	4602      	mov	r2, r0
 800e00e:	460b      	mov	r3, r1
 800e010:	4613      	mov	r3, r2
 800e012:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e016:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e01a:	d308      	bcc.n	800e02e <UART_SetConfig+0x79a>
 800e01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e022:	d204      	bcs.n	800e02e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e02a:	60da      	str	r2, [r3, #12]
 800e02c:	e17c      	b.n	800e328 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e02e:	2301      	movs	r3, #1
 800e030:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e034:	e178      	b.n	800e328 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	69db      	ldr	r3, [r3, #28]
 800e03a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e03e:	f040 80c5 	bne.w	800e1cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e042:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e046:	2b20      	cmp	r3, #32
 800e048:	dc48      	bgt.n	800e0dc <UART_SetConfig+0x848>
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	db7b      	blt.n	800e146 <UART_SetConfig+0x8b2>
 800e04e:	2b20      	cmp	r3, #32
 800e050:	d879      	bhi.n	800e146 <UART_SetConfig+0x8b2>
 800e052:	a201      	add	r2, pc, #4	@ (adr r2, 800e058 <UART_SetConfig+0x7c4>)
 800e054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e058:	0800e0e3 	.word	0x0800e0e3
 800e05c:	0800e0eb 	.word	0x0800e0eb
 800e060:	0800e147 	.word	0x0800e147
 800e064:	0800e147 	.word	0x0800e147
 800e068:	0800e0f3 	.word	0x0800e0f3
 800e06c:	0800e147 	.word	0x0800e147
 800e070:	0800e147 	.word	0x0800e147
 800e074:	0800e147 	.word	0x0800e147
 800e078:	0800e103 	.word	0x0800e103
 800e07c:	0800e147 	.word	0x0800e147
 800e080:	0800e147 	.word	0x0800e147
 800e084:	0800e147 	.word	0x0800e147
 800e088:	0800e147 	.word	0x0800e147
 800e08c:	0800e147 	.word	0x0800e147
 800e090:	0800e147 	.word	0x0800e147
 800e094:	0800e147 	.word	0x0800e147
 800e098:	0800e113 	.word	0x0800e113
 800e09c:	0800e147 	.word	0x0800e147
 800e0a0:	0800e147 	.word	0x0800e147
 800e0a4:	0800e147 	.word	0x0800e147
 800e0a8:	0800e147 	.word	0x0800e147
 800e0ac:	0800e147 	.word	0x0800e147
 800e0b0:	0800e147 	.word	0x0800e147
 800e0b4:	0800e147 	.word	0x0800e147
 800e0b8:	0800e147 	.word	0x0800e147
 800e0bc:	0800e147 	.word	0x0800e147
 800e0c0:	0800e147 	.word	0x0800e147
 800e0c4:	0800e147 	.word	0x0800e147
 800e0c8:	0800e147 	.word	0x0800e147
 800e0cc:	0800e147 	.word	0x0800e147
 800e0d0:	0800e147 	.word	0x0800e147
 800e0d4:	0800e147 	.word	0x0800e147
 800e0d8:	0800e139 	.word	0x0800e139
 800e0dc:	2b40      	cmp	r3, #64	@ 0x40
 800e0de:	d02e      	beq.n	800e13e <UART_SetConfig+0x8aa>
 800e0e0:	e031      	b.n	800e146 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0e2:	f7fb fe47 	bl	8009d74 <HAL_RCC_GetPCLK1Freq>
 800e0e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e0e8:	e033      	b.n	800e152 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e0ea:	f7fb fe59 	bl	8009da0 <HAL_RCC_GetPCLK2Freq>
 800e0ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e0f0:	e02f      	b.n	800e152 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fd fe08 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e100:	e027      	b.n	800e152 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e102:	f107 0318 	add.w	r3, r7, #24
 800e106:	4618      	mov	r0, r3
 800e108:	f7fd ff54 	bl	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e110:	e01f      	b.n	800e152 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e112:	4b2d      	ldr	r3, [pc, #180]	@ (800e1c8 <UART_SetConfig+0x934>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f003 0320 	and.w	r3, r3, #32
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d009      	beq.n	800e132 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e11e:	4b2a      	ldr	r3, [pc, #168]	@ (800e1c8 <UART_SetConfig+0x934>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	08db      	lsrs	r3, r3, #3
 800e124:	f003 0303 	and.w	r3, r3, #3
 800e128:	4a24      	ldr	r2, [pc, #144]	@ (800e1bc <UART_SetConfig+0x928>)
 800e12a:	fa22 f303 	lsr.w	r3, r2, r3
 800e12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e130:	e00f      	b.n	800e152 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e132:	4b22      	ldr	r3, [pc, #136]	@ (800e1bc <UART_SetConfig+0x928>)
 800e134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e136:	e00c      	b.n	800e152 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e138:	4b21      	ldr	r3, [pc, #132]	@ (800e1c0 <UART_SetConfig+0x92c>)
 800e13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e13c:	e009      	b.n	800e152 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e13e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e144:	e005      	b.n	800e152 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e146:	2300      	movs	r3, #0
 800e148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e150:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e154:	2b00      	cmp	r3, #0
 800e156:	f000 80e7 	beq.w	800e328 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e15e:	4a19      	ldr	r2, [pc, #100]	@ (800e1c4 <UART_SetConfig+0x930>)
 800e160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e164:	461a      	mov	r2, r3
 800e166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e168:	fbb3 f3f2 	udiv	r3, r3, r2
 800e16c:	005a      	lsls	r2, r3, #1
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	085b      	lsrs	r3, r3, #1
 800e174:	441a      	add	r2, r3
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e17e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e182:	2b0f      	cmp	r3, #15
 800e184:	d916      	bls.n	800e1b4 <UART_SetConfig+0x920>
 800e186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e18c:	d212      	bcs.n	800e1b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e190:	b29b      	uxth	r3, r3
 800e192:	f023 030f 	bic.w	r3, r3, #15
 800e196:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e19a:	085b      	lsrs	r3, r3, #1
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	f003 0307 	and.w	r3, r3, #7
 800e1a2:	b29a      	uxth	r2, r3
 800e1a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e1b0:	60da      	str	r2, [r3, #12]
 800e1b2:	e0b9      	b.n	800e328 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e1ba:	e0b5      	b.n	800e328 <UART_SetConfig+0xa94>
 800e1bc:	03d09000 	.word	0x03d09000
 800e1c0:	003d0900 	.word	0x003d0900
 800e1c4:	08014b18 	.word	0x08014b18
 800e1c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e1cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e1d0:	2b20      	cmp	r3, #32
 800e1d2:	dc49      	bgt.n	800e268 <UART_SetConfig+0x9d4>
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	db7c      	blt.n	800e2d2 <UART_SetConfig+0xa3e>
 800e1d8:	2b20      	cmp	r3, #32
 800e1da:	d87a      	bhi.n	800e2d2 <UART_SetConfig+0xa3e>
 800e1dc:	a201      	add	r2, pc, #4	@ (adr r2, 800e1e4 <UART_SetConfig+0x950>)
 800e1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e2:	bf00      	nop
 800e1e4:	0800e26f 	.word	0x0800e26f
 800e1e8:	0800e277 	.word	0x0800e277
 800e1ec:	0800e2d3 	.word	0x0800e2d3
 800e1f0:	0800e2d3 	.word	0x0800e2d3
 800e1f4:	0800e27f 	.word	0x0800e27f
 800e1f8:	0800e2d3 	.word	0x0800e2d3
 800e1fc:	0800e2d3 	.word	0x0800e2d3
 800e200:	0800e2d3 	.word	0x0800e2d3
 800e204:	0800e28f 	.word	0x0800e28f
 800e208:	0800e2d3 	.word	0x0800e2d3
 800e20c:	0800e2d3 	.word	0x0800e2d3
 800e210:	0800e2d3 	.word	0x0800e2d3
 800e214:	0800e2d3 	.word	0x0800e2d3
 800e218:	0800e2d3 	.word	0x0800e2d3
 800e21c:	0800e2d3 	.word	0x0800e2d3
 800e220:	0800e2d3 	.word	0x0800e2d3
 800e224:	0800e29f 	.word	0x0800e29f
 800e228:	0800e2d3 	.word	0x0800e2d3
 800e22c:	0800e2d3 	.word	0x0800e2d3
 800e230:	0800e2d3 	.word	0x0800e2d3
 800e234:	0800e2d3 	.word	0x0800e2d3
 800e238:	0800e2d3 	.word	0x0800e2d3
 800e23c:	0800e2d3 	.word	0x0800e2d3
 800e240:	0800e2d3 	.word	0x0800e2d3
 800e244:	0800e2d3 	.word	0x0800e2d3
 800e248:	0800e2d3 	.word	0x0800e2d3
 800e24c:	0800e2d3 	.word	0x0800e2d3
 800e250:	0800e2d3 	.word	0x0800e2d3
 800e254:	0800e2d3 	.word	0x0800e2d3
 800e258:	0800e2d3 	.word	0x0800e2d3
 800e25c:	0800e2d3 	.word	0x0800e2d3
 800e260:	0800e2d3 	.word	0x0800e2d3
 800e264:	0800e2c5 	.word	0x0800e2c5
 800e268:	2b40      	cmp	r3, #64	@ 0x40
 800e26a:	d02e      	beq.n	800e2ca <UART_SetConfig+0xa36>
 800e26c:	e031      	b.n	800e2d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e26e:	f7fb fd81 	bl	8009d74 <HAL_RCC_GetPCLK1Freq>
 800e272:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e274:	e033      	b.n	800e2de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e276:	f7fb fd93 	bl	8009da0 <HAL_RCC_GetPCLK2Freq>
 800e27a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e27c:	e02f      	b.n	800e2de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e27e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e282:	4618      	mov	r0, r3
 800e284:	f7fd fd42 	bl	800bd0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e28c:	e027      	b.n	800e2de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e28e:	f107 0318 	add.w	r3, r7, #24
 800e292:	4618      	mov	r0, r3
 800e294:	f7fd fe8e 	bl	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e29c:	e01f      	b.n	800e2de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e29e:	4b2d      	ldr	r3, [pc, #180]	@ (800e354 <UART_SetConfig+0xac0>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f003 0320 	and.w	r3, r3, #32
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d009      	beq.n	800e2be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e2aa:	4b2a      	ldr	r3, [pc, #168]	@ (800e354 <UART_SetConfig+0xac0>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	08db      	lsrs	r3, r3, #3
 800e2b0:	f003 0303 	and.w	r3, r3, #3
 800e2b4:	4a28      	ldr	r2, [pc, #160]	@ (800e358 <UART_SetConfig+0xac4>)
 800e2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800e2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e2bc:	e00f      	b.n	800e2de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e2be:	4b26      	ldr	r3, [pc, #152]	@ (800e358 <UART_SetConfig+0xac4>)
 800e2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2c2:	e00c      	b.n	800e2de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e2c4:	4b25      	ldr	r3, [pc, #148]	@ (800e35c <UART_SetConfig+0xac8>)
 800e2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2c8:	e009      	b.n	800e2de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2d0:	e005      	b.n	800e2de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e2dc:	bf00      	nop
    }

    if (pclk != 0U)
 800e2de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d021      	beq.n	800e328 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2e8:	4a1d      	ldr	r2, [pc, #116]	@ (800e360 <UART_SetConfig+0xacc>)
 800e2ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	085b      	lsrs	r3, r3, #1
 800e2fc:	441a      	add	r2, r3
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	fbb2 f3f3 	udiv	r3, r2, r3
 800e306:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30a:	2b0f      	cmp	r3, #15
 800e30c:	d909      	bls.n	800e322 <UART_SetConfig+0xa8e>
 800e30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e314:	d205      	bcs.n	800e322 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e318:	b29a      	uxth	r2, r3
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	60da      	str	r2, [r3, #12]
 800e320:	e002      	b.n	800e328 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e322:	2301      	movs	r3, #1
 800e324:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	2201      	movs	r2, #1
 800e334:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	2200      	movs	r2, #0
 800e33c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	2200      	movs	r2, #0
 800e342:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e344:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3748      	adds	r7, #72	@ 0x48
 800e34c:	46bd      	mov	sp, r7
 800e34e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e352:	bf00      	nop
 800e354:	58024400 	.word	0x58024400
 800e358:	03d09000 	.word	0x03d09000
 800e35c:	003d0900 	.word	0x003d0900
 800e360:	08014b18 	.word	0x08014b18

0800e364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e370:	f003 0301 	and.w	r3, r3, #1
 800e374:	2b00      	cmp	r3, #0
 800e376:	d00a      	beq.n	800e38e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	430a      	orrs	r2, r1
 800e38c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e392:	f003 0302 	and.w	r3, r3, #2
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00a      	beq.n	800e3b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	430a      	orrs	r2, r1
 800e3ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3b4:	f003 0304 	and.w	r3, r3, #4
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d00a      	beq.n	800e3d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	430a      	orrs	r2, r1
 800e3d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3d6:	f003 0308 	and.w	r3, r3, #8
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00a      	beq.n	800e3f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	430a      	orrs	r2, r1
 800e3f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3f8:	f003 0310 	and.w	r3, r3, #16
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d00a      	beq.n	800e416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	689b      	ldr	r3, [r3, #8]
 800e406:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	430a      	orrs	r2, r1
 800e414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e41a:	f003 0320 	and.w	r3, r3, #32
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d00a      	beq.n	800e438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	430a      	orrs	r2, r1
 800e436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e43c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e440:	2b00      	cmp	r3, #0
 800e442:	d01a      	beq.n	800e47a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	430a      	orrs	r2, r1
 800e458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e45e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e462:	d10a      	bne.n	800e47a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	430a      	orrs	r2, r1
 800e478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e47e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e482:	2b00      	cmp	r3, #0
 800e484:	d00a      	beq.n	800e49c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	430a      	orrs	r2, r1
 800e49a:	605a      	str	r2, [r3, #4]
  }
}
 800e49c:	bf00      	nop
 800e49e:	370c      	adds	r7, #12
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr

0800e4a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b098      	sub	sp, #96	@ 0x60
 800e4ac:	af02      	add	r7, sp, #8
 800e4ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e4b8:	f7f4 fd78 	bl	8002fac <HAL_GetTick>
 800e4bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f003 0308 	and.w	r3, r3, #8
 800e4c8:	2b08      	cmp	r3, #8
 800e4ca:	d12f      	bne.n	800e52c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e4cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 f88e 	bl	800e5fc <UART_WaitOnFlagUntilTimeout>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d022      	beq.n	800e52c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ee:	e853 3f00 	ldrex	r3, [r3]
 800e4f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e4fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	461a      	mov	r2, r3
 800e502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e504:	647b      	str	r3, [r7, #68]	@ 0x44
 800e506:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e508:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e50a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e50c:	e841 2300 	strex	r3, r2, [r1]
 800e510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e514:	2b00      	cmp	r3, #0
 800e516:	d1e6      	bne.n	800e4e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2220      	movs	r2, #32
 800e51c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e528:	2303      	movs	r3, #3
 800e52a:	e063      	b.n	800e5f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f003 0304 	and.w	r3, r3, #4
 800e536:	2b04      	cmp	r3, #4
 800e538:	d149      	bne.n	800e5ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e53a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e53e:	9300      	str	r3, [sp, #0]
 800e540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e542:	2200      	movs	r2, #0
 800e544:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 f857 	bl	800e5fc <UART_WaitOnFlagUntilTimeout>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d03c      	beq.n	800e5ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e55c:	e853 3f00 	ldrex	r3, [r3]
 800e560:	623b      	str	r3, [r7, #32]
   return(result);
 800e562:	6a3b      	ldr	r3, [r7, #32]
 800e564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e568:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	461a      	mov	r2, r3
 800e570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e572:	633b      	str	r3, [r7, #48]	@ 0x30
 800e574:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e57a:	e841 2300 	strex	r3, r2, [r1]
 800e57e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1e6      	bne.n	800e554 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	3308      	adds	r3, #8
 800e58c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	e853 3f00 	ldrex	r3, [r3]
 800e594:	60fb      	str	r3, [r7, #12]
   return(result);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f023 0301 	bic.w	r3, r3, #1
 800e59c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	3308      	adds	r3, #8
 800e5a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e5a6:	61fa      	str	r2, [r7, #28]
 800e5a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5aa:	69b9      	ldr	r1, [r7, #24]
 800e5ac:	69fa      	ldr	r2, [r7, #28]
 800e5ae:	e841 2300 	strex	r3, r2, [r1]
 800e5b2:	617b      	str	r3, [r7, #20]
   return(result);
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d1e5      	bne.n	800e586 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2220      	movs	r2, #32
 800e5be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e5ca:	2303      	movs	r3, #3
 800e5cc:	e012      	b.n	800e5f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2220      	movs	r2, #32
 800e5d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2220      	movs	r2, #32
 800e5da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e5f2:	2300      	movs	r3, #0
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3758      	adds	r7, #88	@ 0x58
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	603b      	str	r3, [r7, #0]
 800e608:	4613      	mov	r3, r2
 800e60a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e60c:	e049      	b.n	800e6a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e614:	d045      	beq.n	800e6a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e616:	f7f4 fcc9 	bl	8002fac <HAL_GetTick>
 800e61a:	4602      	mov	r2, r0
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	1ad3      	subs	r3, r2, r3
 800e620:	69ba      	ldr	r2, [r7, #24]
 800e622:	429a      	cmp	r2, r3
 800e624:	d302      	bcc.n	800e62c <UART_WaitOnFlagUntilTimeout+0x30>
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d101      	bne.n	800e630 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e62c:	2303      	movs	r3, #3
 800e62e:	e048      	b.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f003 0304 	and.w	r3, r3, #4
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d031      	beq.n	800e6a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	69db      	ldr	r3, [r3, #28]
 800e644:	f003 0308 	and.w	r3, r3, #8
 800e648:	2b08      	cmp	r3, #8
 800e64a:	d110      	bne.n	800e66e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2208      	movs	r2, #8
 800e652:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f000 f839 	bl	800e6cc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2208      	movs	r2, #8
 800e65e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2200      	movs	r2, #0
 800e666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800e66a:	2301      	movs	r3, #1
 800e66c:	e029      	b.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	69db      	ldr	r3, [r3, #28]
 800e674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e67c:	d111      	bne.n	800e6a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f000 f81f 	bl	800e6cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2220      	movs	r2, #32
 800e692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2200      	movs	r2, #0
 800e69a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e69e:	2303      	movs	r3, #3
 800e6a0:	e00f      	b.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	69da      	ldr	r2, [r3, #28]
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	4013      	ands	r3, r2
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	bf0c      	ite	eq
 800e6b2:	2301      	moveq	r3, #1
 800e6b4:	2300      	movne	r3, #0
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	79fb      	ldrb	r3, [r7, #7]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d0a6      	beq.n	800e60e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e6c0:	2300      	movs	r3, #0
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
	...

0800e6cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b095      	sub	sp, #84	@ 0x54
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6dc:	e853 3f00 	ldrex	r3, [r3]
 800e6e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e6e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800e6f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e6f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e6fa:	e841 2300 	strex	r3, r2, [r1]
 800e6fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1e6      	bne.n	800e6d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	3308      	adds	r3, #8
 800e70c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70e:	6a3b      	ldr	r3, [r7, #32]
 800e710:	e853 3f00 	ldrex	r3, [r3]
 800e714:	61fb      	str	r3, [r7, #28]
   return(result);
 800e716:	69fa      	ldr	r2, [r7, #28]
 800e718:	4b1e      	ldr	r3, [pc, #120]	@ (800e794 <UART_EndRxTransfer+0xc8>)
 800e71a:	4013      	ands	r3, r2
 800e71c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	3308      	adds	r3, #8
 800e724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e728:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e72c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e72e:	e841 2300 	strex	r3, r2, [r1]
 800e732:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e736:	2b00      	cmp	r3, #0
 800e738:	d1e5      	bne.n	800e706 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d118      	bne.n	800e774 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	e853 3f00 	ldrex	r3, [r3]
 800e74e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	f023 0310 	bic.w	r3, r3, #16
 800e756:	647b      	str	r3, [r7, #68]	@ 0x44
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	461a      	mov	r2, r3
 800e75e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e760:	61bb      	str	r3, [r7, #24]
 800e762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e764:	6979      	ldr	r1, [r7, #20]
 800e766:	69ba      	ldr	r2, [r7, #24]
 800e768:	e841 2300 	strex	r3, r2, [r1]
 800e76c:	613b      	str	r3, [r7, #16]
   return(result);
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1e6      	bne.n	800e742 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2220      	movs	r2, #32
 800e778:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e788:	bf00      	nop
 800e78a:	3754      	adds	r7, #84	@ 0x54
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr
 800e794:	effffffe 	.word	0xeffffffe

0800e798 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f7ff f856 	bl	800d868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7bc:	bf00      	nop
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b088      	sub	sp, #32
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	e853 3f00 	ldrex	r3, [r3]
 800e7d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7e0:	61fb      	str	r3, [r7, #28]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	61bb      	str	r3, [r7, #24]
 800e7ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ee:	6979      	ldr	r1, [r7, #20]
 800e7f0:	69ba      	ldr	r2, [r7, #24]
 800e7f2:	e841 2300 	strex	r3, r2, [r1]
 800e7f6:	613b      	str	r3, [r7, #16]
   return(result);
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1e6      	bne.n	800e7cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2220      	movs	r2, #32
 800e802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f7ff f821 	bl	800d854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e812:	bf00      	nop
 800e814:	3720      	adds	r7, #32
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e81a:	b480      	push	{r7}
 800e81c:	b083      	sub	sp, #12
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e822:	bf00      	nop
 800e824:	370c      	adds	r7, #12
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr

0800e82e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e82e:	b480      	push	{r7}
 800e830:	b083      	sub	sp, #12
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e836:	bf00      	nop
 800e838:	370c      	adds	r7, #12
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr

0800e842 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e842:	b480      	push	{r7}
 800e844:	b083      	sub	sp, #12
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e84a:	bf00      	nop
 800e84c:	370c      	adds	r7, #12
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr

0800e856 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e856:	b480      	push	{r7}
 800e858:	b085      	sub	sp, #20
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e864:	2b01      	cmp	r3, #1
 800e866:	d101      	bne.n	800e86c <HAL_UARTEx_DisableFifoMode+0x16>
 800e868:	2302      	movs	r3, #2
 800e86a:	e027      	b.n	800e8bc <HAL_UARTEx_DisableFifoMode+0x66>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2201      	movs	r2, #1
 800e870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2224      	movs	r2, #36	@ 0x24
 800e878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f022 0201 	bic.w	r2, r2, #1
 800e892:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e89a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	68fa      	ldr	r2, [r7, #12]
 800e8a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2220      	movs	r2, #32
 800e8ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8ba:	2300      	movs	r3, #0
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3714      	adds	r7, #20
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d101      	bne.n	800e8e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e8dc:	2302      	movs	r3, #2
 800e8de:	e02d      	b.n	800e93c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2224      	movs	r2, #36	@ 0x24
 800e8ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f022 0201 	bic.w	r2, r2, #1
 800e906:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	683a      	ldr	r2, [r7, #0]
 800e918:	430a      	orrs	r2, r1
 800e91a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 f84f 	bl	800e9c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	68fa      	ldr	r2, [r7, #12]
 800e928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2220      	movs	r2, #32
 800e92e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2200      	movs	r2, #0
 800e936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3710      	adds	r7, #16
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e954:	2b01      	cmp	r3, #1
 800e956:	d101      	bne.n	800e95c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e958:	2302      	movs	r3, #2
 800e95a:	e02d      	b.n	800e9b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2201      	movs	r2, #1
 800e960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2224      	movs	r2, #36	@ 0x24
 800e968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f022 0201 	bic.w	r2, r2, #1
 800e982:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	689b      	ldr	r3, [r3, #8]
 800e98a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	430a      	orrs	r2, r1
 800e996:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 f811 	bl	800e9c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2220      	movs	r2, #32
 800e9aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e9b6:	2300      	movs	r3, #0
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3710      	adds	r7, #16
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d108      	bne.n	800e9e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e9e0:	e031      	b.n	800ea46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e9e2:	2310      	movs	r3, #16
 800e9e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e9e6:	2310      	movs	r3, #16
 800e9e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	0e5b      	lsrs	r3, r3, #25
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	f003 0307 	and.w	r3, r3, #7
 800e9f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	0f5b      	lsrs	r3, r3, #29
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	f003 0307 	and.w	r3, r3, #7
 800ea08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea0a:	7bbb      	ldrb	r3, [r7, #14]
 800ea0c:	7b3a      	ldrb	r2, [r7, #12]
 800ea0e:	4911      	ldr	r1, [pc, #68]	@ (800ea54 <UARTEx_SetNbDataToProcess+0x94>)
 800ea10:	5c8a      	ldrb	r2, [r1, r2]
 800ea12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ea16:	7b3a      	ldrb	r2, [r7, #12]
 800ea18:	490f      	ldr	r1, [pc, #60]	@ (800ea58 <UARTEx_SetNbDataToProcess+0x98>)
 800ea1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea20:	b29a      	uxth	r2, r3
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea28:	7bfb      	ldrb	r3, [r7, #15]
 800ea2a:	7b7a      	ldrb	r2, [r7, #13]
 800ea2c:	4909      	ldr	r1, [pc, #36]	@ (800ea54 <UARTEx_SetNbDataToProcess+0x94>)
 800ea2e:	5c8a      	ldrb	r2, [r1, r2]
 800ea30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ea34:	7b7a      	ldrb	r2, [r7, #13]
 800ea36:	4908      	ldr	r1, [pc, #32]	@ (800ea58 <UARTEx_SetNbDataToProcess+0x98>)
 800ea38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea3e:	b29a      	uxth	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ea46:	bf00      	nop
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	08014b30 	.word	0x08014b30
 800ea58:	08014b38 	.word	0x08014b38

0800ea5c <__sprint_r>:
 800ea5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea60:	6893      	ldr	r3, [r2, #8]
 800ea62:	4680      	mov	r8, r0
 800ea64:	460e      	mov	r6, r1
 800ea66:	4614      	mov	r4, r2
 800ea68:	b343      	cbz	r3, 800eabc <__sprint_r+0x60>
 800ea6a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800ea6c:	049d      	lsls	r5, r3, #18
 800ea6e:	d522      	bpl.n	800eab6 <__sprint_r+0x5a>
 800ea70:	6815      	ldr	r5, [r2, #0]
 800ea72:	68a0      	ldr	r0, [r4, #8]
 800ea74:	3508      	adds	r5, #8
 800ea76:	b928      	cbnz	r0, 800ea84 <__sprint_r+0x28>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	60a3      	str	r3, [r4, #8]
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	6063      	str	r3, [r4, #4]
 800ea80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea84:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800ea88:	f04f 0900 	mov.w	r9, #0
 800ea8c:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800ea90:	45ca      	cmp	sl, r9
 800ea92:	dc05      	bgt.n	800eaa0 <__sprint_r+0x44>
 800ea94:	68a3      	ldr	r3, [r4, #8]
 800ea96:	f027 0703 	bic.w	r7, r7, #3
 800ea9a:	1bdb      	subs	r3, r3, r7
 800ea9c:	60a3      	str	r3, [r4, #8]
 800ea9e:	e7e8      	b.n	800ea72 <__sprint_r+0x16>
 800eaa0:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800eaa4:	4632      	mov	r2, r6
 800eaa6:	4640      	mov	r0, r8
 800eaa8:	f001 f845 	bl	800fb36 <_fputwc_r>
 800eaac:	1c43      	adds	r3, r0, #1
 800eaae:	d0e3      	beq.n	800ea78 <__sprint_r+0x1c>
 800eab0:	f109 0901 	add.w	r9, r9, #1
 800eab4:	e7ec      	b.n	800ea90 <__sprint_r+0x34>
 800eab6:	f000 fe3d 	bl	800f734 <__sfvwrite_r>
 800eaba:	e7dd      	b.n	800ea78 <__sprint_r+0x1c>
 800eabc:	4618      	mov	r0, r3
 800eabe:	e7dd      	b.n	800ea7c <__sprint_r+0x20>

0800eac0 <_vfiprintf_r>:
 800eac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac4:	b0bb      	sub	sp, #236	@ 0xec
 800eac6:	460f      	mov	r7, r1
 800eac8:	4693      	mov	fp, r2
 800eaca:	461c      	mov	r4, r3
 800eacc:	461d      	mov	r5, r3
 800eace:	9000      	str	r0, [sp, #0]
 800ead0:	b118      	cbz	r0, 800eada <_vfiprintf_r+0x1a>
 800ead2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ead4:	b90b      	cbnz	r3, 800eada <_vfiprintf_r+0x1a>
 800ead6:	f000 fe15 	bl	800f704 <__sinit>
 800eada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eadc:	07db      	lsls	r3, r3, #31
 800eade:	d405      	bmi.n	800eaec <_vfiprintf_r+0x2c>
 800eae0:	89bb      	ldrh	r3, [r7, #12]
 800eae2:	059e      	lsls	r6, r3, #22
 800eae4:	d402      	bmi.n	800eaec <_vfiprintf_r+0x2c>
 800eae6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800eae8:	f001 f8ba 	bl	800fc60 <__retarget_lock_acquire_recursive>
 800eaec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800eaf0:	0498      	lsls	r0, r3, #18
 800eaf2:	d406      	bmi.n	800eb02 <_vfiprintf_r+0x42>
 800eaf4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800eaf8:	81bb      	strh	r3, [r7, #12]
 800eafa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eafc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eb00:	667b      	str	r3, [r7, #100]	@ 0x64
 800eb02:	89bb      	ldrh	r3, [r7, #12]
 800eb04:	0719      	lsls	r1, r3, #28
 800eb06:	d501      	bpl.n	800eb0c <_vfiprintf_r+0x4c>
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	b9ab      	cbnz	r3, 800eb38 <_vfiprintf_r+0x78>
 800eb0c:	9800      	ldr	r0, [sp, #0]
 800eb0e:	4639      	mov	r1, r7
 800eb10:	f000 ff7a 	bl	800fa08 <__swsetup_r>
 800eb14:	b180      	cbz	r0, 800eb38 <_vfiprintf_r+0x78>
 800eb16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb18:	07da      	lsls	r2, r3, #31
 800eb1a:	d506      	bpl.n	800eb2a <_vfiprintf_r+0x6a>
 800eb1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eb20:	9303      	str	r3, [sp, #12]
 800eb22:	9803      	ldr	r0, [sp, #12]
 800eb24:	b03b      	add	sp, #236	@ 0xec
 800eb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb2a:	89bb      	ldrh	r3, [r7, #12]
 800eb2c:	059b      	lsls	r3, r3, #22
 800eb2e:	d4f5      	bmi.n	800eb1c <_vfiprintf_r+0x5c>
 800eb30:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800eb32:	f001 f896 	bl	800fc62 <__retarget_lock_release_recursive>
 800eb36:	e7f1      	b.n	800eb1c <_vfiprintf_r+0x5c>
 800eb38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800eb3c:	f003 021a 	and.w	r2, r3, #26
 800eb40:	2a0a      	cmp	r2, #10
 800eb42:	d114      	bne.n	800eb6e <_vfiprintf_r+0xae>
 800eb44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800eb48:	2a00      	cmp	r2, #0
 800eb4a:	db10      	blt.n	800eb6e <_vfiprintf_r+0xae>
 800eb4c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eb4e:	07d6      	lsls	r6, r2, #31
 800eb50:	d404      	bmi.n	800eb5c <_vfiprintf_r+0x9c>
 800eb52:	059d      	lsls	r5, r3, #22
 800eb54:	d402      	bmi.n	800eb5c <_vfiprintf_r+0x9c>
 800eb56:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800eb58:	f001 f883 	bl	800fc62 <__retarget_lock_release_recursive>
 800eb5c:	9800      	ldr	r0, [sp, #0]
 800eb5e:	4623      	mov	r3, r4
 800eb60:	465a      	mov	r2, fp
 800eb62:	4639      	mov	r1, r7
 800eb64:	b03b      	add	sp, #236	@ 0xec
 800eb66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb6a:	f000 bc31 	b.w	800f3d0 <__sbprintf>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800eb74:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800eb78:	ae11      	add	r6, sp, #68	@ 0x44
 800eb7a:	960e      	str	r6, [sp, #56]	@ 0x38
 800eb7c:	9307      	str	r3, [sp, #28]
 800eb7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb80:	9303      	str	r3, [sp, #12]
 800eb82:	465b      	mov	r3, fp
 800eb84:	461c      	mov	r4, r3
 800eb86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb8a:	b10a      	cbz	r2, 800eb90 <_vfiprintf_r+0xd0>
 800eb8c:	2a25      	cmp	r2, #37	@ 0x25
 800eb8e:	d1f9      	bne.n	800eb84 <_vfiprintf_r+0xc4>
 800eb90:	ebb4 080b 	subs.w	r8, r4, fp
 800eb94:	d00d      	beq.n	800ebb2 <_vfiprintf_r+0xf2>
 800eb96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eb98:	4443      	add	r3, r8
 800eb9a:	9310      	str	r3, [sp, #64]	@ 0x40
 800eb9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb9e:	3301      	adds	r3, #1
 800eba0:	2b07      	cmp	r3, #7
 800eba2:	e9c6 b800 	strd	fp, r8, [r6]
 800eba6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eba8:	dc75      	bgt.n	800ec96 <_vfiprintf_r+0x1d6>
 800ebaa:	3608      	adds	r6, #8
 800ebac:	9b03      	ldr	r3, [sp, #12]
 800ebae:	4443      	add	r3, r8
 800ebb0:	9303      	str	r3, [sp, #12]
 800ebb2:	7823      	ldrb	r3, [r4, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f000 83cd 	beq.w	800f354 <_vfiprintf_r+0x894>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ebc0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800ebc4:	3401      	adds	r4, #1
 800ebc6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ebca:	469a      	mov	sl, r3
 800ebcc:	46a3      	mov	fp, r4
 800ebce:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800ebd2:	f1a3 0220 	sub.w	r2, r3, #32
 800ebd6:	2a5a      	cmp	r2, #90	@ 0x5a
 800ebd8:	f200 8316 	bhi.w	800f208 <_vfiprintf_r+0x748>
 800ebdc:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ebe0:	0314009a 	.word	0x0314009a
 800ebe4:	00a20314 	.word	0x00a20314
 800ebe8:	03140314 	.word	0x03140314
 800ebec:	00820314 	.word	0x00820314
 800ebf0:	03140314 	.word	0x03140314
 800ebf4:	00af00a5 	.word	0x00af00a5
 800ebf8:	00ac0314 	.word	0x00ac0314
 800ebfc:	031400b1 	.word	0x031400b1
 800ec00:	00d000cd 	.word	0x00d000cd
 800ec04:	00d000d0 	.word	0x00d000d0
 800ec08:	00d000d0 	.word	0x00d000d0
 800ec0c:	00d000d0 	.word	0x00d000d0
 800ec10:	00d000d0 	.word	0x00d000d0
 800ec14:	03140314 	.word	0x03140314
 800ec18:	03140314 	.word	0x03140314
 800ec1c:	03140314 	.word	0x03140314
 800ec20:	03140314 	.word	0x03140314
 800ec24:	00f70314 	.word	0x00f70314
 800ec28:	03140104 	.word	0x03140104
 800ec2c:	03140314 	.word	0x03140314
 800ec30:	03140314 	.word	0x03140314
 800ec34:	03140314 	.word	0x03140314
 800ec38:	03140314 	.word	0x03140314
 800ec3c:	01520314 	.word	0x01520314
 800ec40:	03140314 	.word	0x03140314
 800ec44:	019a0314 	.word	0x019a0314
 800ec48:	027a0314 	.word	0x027a0314
 800ec4c:	03140314 	.word	0x03140314
 800ec50:	0314029a 	.word	0x0314029a
 800ec54:	03140314 	.word	0x03140314
 800ec58:	03140314 	.word	0x03140314
 800ec5c:	03140314 	.word	0x03140314
 800ec60:	03140314 	.word	0x03140314
 800ec64:	00f70314 	.word	0x00f70314
 800ec68:	03140106 	.word	0x03140106
 800ec6c:	03140314 	.word	0x03140314
 800ec70:	010600e0 	.word	0x010600e0
 800ec74:	031400f1 	.word	0x031400f1
 800ec78:	031400eb 	.word	0x031400eb
 800ec7c:	01540132 	.word	0x01540132
 800ec80:	00f10189 	.word	0x00f10189
 800ec84:	019a0314 	.word	0x019a0314
 800ec88:	027c0098 	.word	0x027c0098
 800ec8c:	03140314 	.word	0x03140314
 800ec90:	03140065 	.word	0x03140065
 800ec94:	0098      	.short	0x0098
 800ec96:	9800      	ldr	r0, [sp, #0]
 800ec98:	aa0e      	add	r2, sp, #56	@ 0x38
 800ec9a:	4639      	mov	r1, r7
 800ec9c:	f7ff fede 	bl	800ea5c <__sprint_r>
 800eca0:	2800      	cmp	r0, #0
 800eca2:	f040 8336 	bne.w	800f312 <_vfiprintf_r+0x852>
 800eca6:	ae11      	add	r6, sp, #68	@ 0x44
 800eca8:	e780      	b.n	800ebac <_vfiprintf_r+0xec>
 800ecaa:	4a99      	ldr	r2, [pc, #612]	@ (800ef10 <_vfiprintf_r+0x450>)
 800ecac:	9205      	str	r2, [sp, #20]
 800ecae:	f01a 0220 	ands.w	r2, sl, #32
 800ecb2:	f000 8231 	beq.w	800f118 <_vfiprintf_r+0x658>
 800ecb6:	3507      	adds	r5, #7
 800ecb8:	f025 0507 	bic.w	r5, r5, #7
 800ecbc:	46a8      	mov	r8, r5
 800ecbe:	686d      	ldr	r5, [r5, #4]
 800ecc0:	f858 4b08 	ldr.w	r4, [r8], #8
 800ecc4:	f01a 0f01 	tst.w	sl, #1
 800ecc8:	d009      	beq.n	800ecde <_vfiprintf_r+0x21e>
 800ecca:	ea54 0205 	orrs.w	r2, r4, r5
 800ecce:	bf1f      	itttt	ne
 800ecd0:	2230      	movne	r2, #48	@ 0x30
 800ecd2:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800ecd6:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800ecda:	f04a 0a02 	orrne.w	sl, sl, #2
 800ecde:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800ece2:	e112      	b.n	800ef0a <_vfiprintf_r+0x44a>
 800ece4:	9800      	ldr	r0, [sp, #0]
 800ece6:	f000 ff8b 	bl	800fc00 <_localeconv_r>
 800ecea:	6843      	ldr	r3, [r0, #4]
 800ecec:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7f1 fb46 	bl	8000380 <strlen>
 800ecf4:	9007      	str	r0, [sp, #28]
 800ecf6:	9800      	ldr	r0, [sp, #0]
 800ecf8:	f000 ff82 	bl	800fc00 <_localeconv_r>
 800ecfc:	6883      	ldr	r3, [r0, #8]
 800ecfe:	9306      	str	r3, [sp, #24]
 800ed00:	9b07      	ldr	r3, [sp, #28]
 800ed02:	b12b      	cbz	r3, 800ed10 <_vfiprintf_r+0x250>
 800ed04:	9b06      	ldr	r3, [sp, #24]
 800ed06:	b11b      	cbz	r3, 800ed10 <_vfiprintf_r+0x250>
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	b10b      	cbz	r3, 800ed10 <_vfiprintf_r+0x250>
 800ed0c:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800ed10:	465c      	mov	r4, fp
 800ed12:	e75b      	b.n	800ebcc <_vfiprintf_r+0x10c>
 800ed14:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1f9      	bne.n	800ed10 <_vfiprintf_r+0x250>
 800ed1c:	2320      	movs	r3, #32
 800ed1e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ed22:	e7f5      	b.n	800ed10 <_vfiprintf_r+0x250>
 800ed24:	f04a 0a01 	orr.w	sl, sl, #1
 800ed28:	e7f2      	b.n	800ed10 <_vfiprintf_r+0x250>
 800ed2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed2e:	9302      	str	r3, [sp, #8]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	daed      	bge.n	800ed10 <_vfiprintf_r+0x250>
 800ed34:	425b      	negs	r3, r3
 800ed36:	9302      	str	r3, [sp, #8]
 800ed38:	f04a 0a04 	orr.w	sl, sl, #4
 800ed3c:	e7e8      	b.n	800ed10 <_vfiprintf_r+0x250>
 800ed3e:	232b      	movs	r3, #43	@ 0x2b
 800ed40:	e7ed      	b.n	800ed1e <_vfiprintf_r+0x25e>
 800ed42:	465a      	mov	r2, fp
 800ed44:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ed48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed4a:	d112      	bne.n	800ed72 <_vfiprintf_r+0x2b2>
 800ed4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed54:	9301      	str	r3, [sp, #4]
 800ed56:	4693      	mov	fp, r2
 800ed58:	e7da      	b.n	800ed10 <_vfiprintf_r+0x250>
 800ed5a:	9b01      	ldr	r3, [sp, #4]
 800ed5c:	fb00 1303 	mla	r3, r0, r3, r1
 800ed60:	9301      	str	r3, [sp, #4]
 800ed62:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ed66:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ed6a:	2909      	cmp	r1, #9
 800ed6c:	d9f5      	bls.n	800ed5a <_vfiprintf_r+0x29a>
 800ed6e:	4693      	mov	fp, r2
 800ed70:	e72f      	b.n	800ebd2 <_vfiprintf_r+0x112>
 800ed72:	2100      	movs	r1, #0
 800ed74:	9101      	str	r1, [sp, #4]
 800ed76:	200a      	movs	r0, #10
 800ed78:	e7f5      	b.n	800ed66 <_vfiprintf_r+0x2a6>
 800ed7a:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800ed7e:	e7c7      	b.n	800ed10 <_vfiprintf_r+0x250>
 800ed80:	2100      	movs	r1, #0
 800ed82:	465a      	mov	r2, fp
 800ed84:	9102      	str	r1, [sp, #8]
 800ed86:	200a      	movs	r0, #10
 800ed88:	9902      	ldr	r1, [sp, #8]
 800ed8a:	3b30      	subs	r3, #48	@ 0x30
 800ed8c:	fb00 3301 	mla	r3, r0, r1, r3
 800ed90:	9302      	str	r3, [sp, #8]
 800ed92:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ed96:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ed9a:	2909      	cmp	r1, #9
 800ed9c:	d9f4      	bls.n	800ed88 <_vfiprintf_r+0x2c8>
 800ed9e:	e7e6      	b.n	800ed6e <_vfiprintf_r+0x2ae>
 800eda0:	f89b 3000 	ldrb.w	r3, [fp]
 800eda4:	2b68      	cmp	r3, #104	@ 0x68
 800eda6:	bf06      	itte	eq
 800eda8:	f10b 0b01 	addeq.w	fp, fp, #1
 800edac:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800edb0:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800edb4:	e7ac      	b.n	800ed10 <_vfiprintf_r+0x250>
 800edb6:	f89b 3000 	ldrb.w	r3, [fp]
 800edba:	2b6c      	cmp	r3, #108	@ 0x6c
 800edbc:	d104      	bne.n	800edc8 <_vfiprintf_r+0x308>
 800edbe:	f10b 0b01 	add.w	fp, fp, #1
 800edc2:	f04a 0a20 	orr.w	sl, sl, #32
 800edc6:	e7a3      	b.n	800ed10 <_vfiprintf_r+0x250>
 800edc8:	f04a 0a10 	orr.w	sl, sl, #16
 800edcc:	e7a0      	b.n	800ed10 <_vfiprintf_r+0x250>
 800edce:	46a8      	mov	r8, r5
 800edd0:	2400      	movs	r4, #0
 800edd2:	f858 3b04 	ldr.w	r3, [r8], #4
 800edd6:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800edda:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800edde:	2301      	movs	r3, #1
 800ede0:	9301      	str	r3, [sp, #4]
 800ede2:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800ede6:	e0ab      	b.n	800ef40 <_vfiprintf_r+0x480>
 800ede8:	f04a 0a10 	orr.w	sl, sl, #16
 800edec:	f01a 0f20 	tst.w	sl, #32
 800edf0:	d011      	beq.n	800ee16 <_vfiprintf_r+0x356>
 800edf2:	3507      	adds	r5, #7
 800edf4:	f025 0507 	bic.w	r5, r5, #7
 800edf8:	46a8      	mov	r8, r5
 800edfa:	686d      	ldr	r5, [r5, #4]
 800edfc:	f858 4b08 	ldr.w	r4, [r8], #8
 800ee00:	2d00      	cmp	r5, #0
 800ee02:	da06      	bge.n	800ee12 <_vfiprintf_r+0x352>
 800ee04:	4264      	negs	r4, r4
 800ee06:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800ee0a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ee0e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ee12:	2301      	movs	r3, #1
 800ee14:	e048      	b.n	800eea8 <_vfiprintf_r+0x3e8>
 800ee16:	46a8      	mov	r8, r5
 800ee18:	f01a 0f10 	tst.w	sl, #16
 800ee1c:	f858 5b04 	ldr.w	r5, [r8], #4
 800ee20:	d002      	beq.n	800ee28 <_vfiprintf_r+0x368>
 800ee22:	462c      	mov	r4, r5
 800ee24:	17ed      	asrs	r5, r5, #31
 800ee26:	e7eb      	b.n	800ee00 <_vfiprintf_r+0x340>
 800ee28:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ee2c:	d003      	beq.n	800ee36 <_vfiprintf_r+0x376>
 800ee2e:	b22c      	sxth	r4, r5
 800ee30:	f345 35c0 	sbfx	r5, r5, #15, #1
 800ee34:	e7e4      	b.n	800ee00 <_vfiprintf_r+0x340>
 800ee36:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ee3a:	d0f2      	beq.n	800ee22 <_vfiprintf_r+0x362>
 800ee3c:	b26c      	sxtb	r4, r5
 800ee3e:	f345 15c0 	sbfx	r5, r5, #7, #1
 800ee42:	e7dd      	b.n	800ee00 <_vfiprintf_r+0x340>
 800ee44:	f01a 0f20 	tst.w	sl, #32
 800ee48:	d007      	beq.n	800ee5a <_vfiprintf_r+0x39a>
 800ee4a:	9a03      	ldr	r2, [sp, #12]
 800ee4c:	682b      	ldr	r3, [r5, #0]
 800ee4e:	9903      	ldr	r1, [sp, #12]
 800ee50:	17d2      	asrs	r2, r2, #31
 800ee52:	e9c3 1200 	strd	r1, r2, [r3]
 800ee56:	3504      	adds	r5, #4
 800ee58:	e693      	b.n	800eb82 <_vfiprintf_r+0xc2>
 800ee5a:	f01a 0f10 	tst.w	sl, #16
 800ee5e:	d003      	beq.n	800ee68 <_vfiprintf_r+0x3a8>
 800ee60:	682b      	ldr	r3, [r5, #0]
 800ee62:	9a03      	ldr	r2, [sp, #12]
 800ee64:	601a      	str	r2, [r3, #0]
 800ee66:	e7f6      	b.n	800ee56 <_vfiprintf_r+0x396>
 800ee68:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ee6c:	d003      	beq.n	800ee76 <_vfiprintf_r+0x3b6>
 800ee6e:	682b      	ldr	r3, [r5, #0]
 800ee70:	9a03      	ldr	r2, [sp, #12]
 800ee72:	801a      	strh	r2, [r3, #0]
 800ee74:	e7ef      	b.n	800ee56 <_vfiprintf_r+0x396>
 800ee76:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ee7a:	d0f1      	beq.n	800ee60 <_vfiprintf_r+0x3a0>
 800ee7c:	682b      	ldr	r3, [r5, #0]
 800ee7e:	9a03      	ldr	r2, [sp, #12]
 800ee80:	701a      	strb	r2, [r3, #0]
 800ee82:	e7e8      	b.n	800ee56 <_vfiprintf_r+0x396>
 800ee84:	f04a 0a10 	orr.w	sl, sl, #16
 800ee88:	f01a 0320 	ands.w	r3, sl, #32
 800ee8c:	d01f      	beq.n	800eece <_vfiprintf_r+0x40e>
 800ee8e:	3507      	adds	r5, #7
 800ee90:	f025 0507 	bic.w	r5, r5, #7
 800ee94:	46a8      	mov	r8, r5
 800ee96:	686d      	ldr	r5, [r5, #4]
 800ee98:	f858 4b08 	ldr.w	r4, [r8], #8
 800ee9c:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800eea0:	2300      	movs	r3, #0
 800eea2:	2200      	movs	r2, #0
 800eea4:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800eea8:	9a01      	ldr	r2, [sp, #4]
 800eeaa:	3201      	adds	r2, #1
 800eeac:	f000 825f 	beq.w	800f36e <_vfiprintf_r+0x8ae>
 800eeb0:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800eeb4:	9204      	str	r2, [sp, #16]
 800eeb6:	ea54 0205 	orrs.w	r2, r4, r5
 800eeba:	f040 825e 	bne.w	800f37a <_vfiprintf_r+0x8ba>
 800eebe:	9a01      	ldr	r2, [sp, #4]
 800eec0:	2a00      	cmp	r2, #0
 800eec2:	f000 8198 	beq.w	800f1f6 <_vfiprintf_r+0x736>
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	f040 825a 	bne.w	800f380 <_vfiprintf_r+0x8c0>
 800eecc:	e13b      	b.n	800f146 <_vfiprintf_r+0x686>
 800eece:	46a8      	mov	r8, r5
 800eed0:	f01a 0510 	ands.w	r5, sl, #16
 800eed4:	f858 4b04 	ldr.w	r4, [r8], #4
 800eed8:	d001      	beq.n	800eede <_vfiprintf_r+0x41e>
 800eeda:	461d      	mov	r5, r3
 800eedc:	e7de      	b.n	800ee9c <_vfiprintf_r+0x3dc>
 800eede:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800eee2:	d001      	beq.n	800eee8 <_vfiprintf_r+0x428>
 800eee4:	b2a4      	uxth	r4, r4
 800eee6:	e7d9      	b.n	800ee9c <_vfiprintf_r+0x3dc>
 800eee8:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800eeec:	d0d6      	beq.n	800ee9c <_vfiprintf_r+0x3dc>
 800eeee:	b2e4      	uxtb	r4, r4
 800eef0:	e7f3      	b.n	800eeda <_vfiprintf_r+0x41a>
 800eef2:	46a8      	mov	r8, r5
 800eef4:	f647 0330 	movw	r3, #30768	@ 0x7830
 800eef8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800eefc:	f858 4b04 	ldr.w	r4, [r8], #4
 800ef00:	4b03      	ldr	r3, [pc, #12]	@ (800ef10 <_vfiprintf_r+0x450>)
 800ef02:	9305      	str	r3, [sp, #20]
 800ef04:	2500      	movs	r5, #0
 800ef06:	f04a 0a02 	orr.w	sl, sl, #2
 800ef0a:	2302      	movs	r3, #2
 800ef0c:	e7c9      	b.n	800eea2 <_vfiprintf_r+0x3e2>
 800ef0e:	bf00      	nop
 800ef10:	08014b51 	.word	0x08014b51
 800ef14:	9b01      	ldr	r3, [sp, #4]
 800ef16:	46a8      	mov	r8, r5
 800ef18:	1c5c      	adds	r4, r3, #1
 800ef1a:	f04f 0500 	mov.w	r5, #0
 800ef1e:	f858 9b04 	ldr.w	r9, [r8], #4
 800ef22:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800ef26:	f000 80d0 	beq.w	800f0ca <_vfiprintf_r+0x60a>
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	4629      	mov	r1, r5
 800ef2e:	4648      	mov	r0, r9
 800ef30:	f7f1 f9d6 	bl	80002e0 <memchr>
 800ef34:	4604      	mov	r4, r0
 800ef36:	b118      	cbz	r0, 800ef40 <_vfiprintf_r+0x480>
 800ef38:	eba0 0309 	sub.w	r3, r0, r9
 800ef3c:	9301      	str	r3, [sp, #4]
 800ef3e:	462c      	mov	r4, r5
 800ef40:	9b01      	ldr	r3, [sp, #4]
 800ef42:	42a3      	cmp	r3, r4
 800ef44:	bfb8      	it	lt
 800ef46:	4623      	movlt	r3, r4
 800ef48:	9304      	str	r3, [sp, #16]
 800ef4a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ef4e:	b113      	cbz	r3, 800ef56 <_vfiprintf_r+0x496>
 800ef50:	9b04      	ldr	r3, [sp, #16]
 800ef52:	3301      	adds	r3, #1
 800ef54:	9304      	str	r3, [sp, #16]
 800ef56:	f01a 0302 	ands.w	r3, sl, #2
 800ef5a:	9308      	str	r3, [sp, #32]
 800ef5c:	bf1e      	ittt	ne
 800ef5e:	9b04      	ldrne	r3, [sp, #16]
 800ef60:	3302      	addne	r3, #2
 800ef62:	9304      	strne	r3, [sp, #16]
 800ef64:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800ef68:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef6a:	d11f      	bne.n	800efac <_vfiprintf_r+0x4ec>
 800ef6c:	9b02      	ldr	r3, [sp, #8]
 800ef6e:	9a04      	ldr	r2, [sp, #16]
 800ef70:	1a9d      	subs	r5, r3, r2
 800ef72:	2d00      	cmp	r5, #0
 800ef74:	dd1a      	ble.n	800efac <_vfiprintf_r+0x4ec>
 800ef76:	4ba9      	ldr	r3, [pc, #676]	@ (800f21c <_vfiprintf_r+0x75c>)
 800ef78:	6033      	str	r3, [r6, #0]
 800ef7a:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800ef7e:	2d10      	cmp	r5, #16
 800ef80:	f102 0201 	add.w	r2, r2, #1
 800ef84:	f106 0008 	add.w	r0, r6, #8
 800ef88:	f300 814e 	bgt.w	800f228 <_vfiprintf_r+0x768>
 800ef8c:	6075      	str	r5, [r6, #4]
 800ef8e:	2a07      	cmp	r2, #7
 800ef90:	4465      	add	r5, ip
 800ef92:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800ef96:	f340 815a 	ble.w	800f24e <_vfiprintf_r+0x78e>
 800ef9a:	9800      	ldr	r0, [sp, #0]
 800ef9c:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef9e:	4639      	mov	r1, r7
 800efa0:	f7ff fd5c 	bl	800ea5c <__sprint_r>
 800efa4:	2800      	cmp	r0, #0
 800efa6:	f040 81b4 	bne.w	800f312 <_vfiprintf_r+0x852>
 800efaa:	ae11      	add	r6, sp, #68	@ 0x44
 800efac:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800efb0:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800efb4:	b161      	cbz	r1, 800efd0 <_vfiprintf_r+0x510>
 800efb6:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800efba:	3301      	adds	r3, #1
 800efbc:	6031      	str	r1, [r6, #0]
 800efbe:	2101      	movs	r1, #1
 800efc0:	440a      	add	r2, r1
 800efc2:	2b07      	cmp	r3, #7
 800efc4:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800efc8:	6071      	str	r1, [r6, #4]
 800efca:	f300 8142 	bgt.w	800f252 <_vfiprintf_r+0x792>
 800efce:	3608      	adds	r6, #8
 800efd0:	9908      	ldr	r1, [sp, #32]
 800efd2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800efd6:	b159      	cbz	r1, 800eff0 <_vfiprintf_r+0x530>
 800efd8:	a90d      	add	r1, sp, #52	@ 0x34
 800efda:	3301      	adds	r3, #1
 800efdc:	6031      	str	r1, [r6, #0]
 800efde:	2102      	movs	r1, #2
 800efe0:	440a      	add	r2, r1
 800efe2:	2b07      	cmp	r3, #7
 800efe4:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800efe8:	6071      	str	r1, [r6, #4]
 800efea:	f300 813b 	bgt.w	800f264 <_vfiprintf_r+0x7a4>
 800efee:	3608      	adds	r6, #8
 800eff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eff2:	2b80      	cmp	r3, #128	@ 0x80
 800eff4:	d11f      	bne.n	800f036 <_vfiprintf_r+0x576>
 800eff6:	9b02      	ldr	r3, [sp, #8]
 800eff8:	9a04      	ldr	r2, [sp, #16]
 800effa:	1a9d      	subs	r5, r3, r2
 800effc:	2d00      	cmp	r5, #0
 800effe:	dd1a      	ble.n	800f036 <_vfiprintf_r+0x576>
 800f000:	4b87      	ldr	r3, [pc, #540]	@ (800f220 <_vfiprintf_r+0x760>)
 800f002:	6033      	str	r3, [r6, #0]
 800f004:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800f008:	2d10      	cmp	r5, #16
 800f00a:	f102 0201 	add.w	r2, r2, #1
 800f00e:	f106 0008 	add.w	r0, r6, #8
 800f012:	f300 8130 	bgt.w	800f276 <_vfiprintf_r+0x7b6>
 800f016:	6075      	str	r5, [r6, #4]
 800f018:	2a07      	cmp	r2, #7
 800f01a:	4465      	add	r5, ip
 800f01c:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800f020:	f340 813c 	ble.w	800f29c <_vfiprintf_r+0x7dc>
 800f024:	9800      	ldr	r0, [sp, #0]
 800f026:	aa0e      	add	r2, sp, #56	@ 0x38
 800f028:	4639      	mov	r1, r7
 800f02a:	f7ff fd17 	bl	800ea5c <__sprint_r>
 800f02e:	2800      	cmp	r0, #0
 800f030:	f040 816f 	bne.w	800f312 <_vfiprintf_r+0x852>
 800f034:	ae11      	add	r6, sp, #68	@ 0x44
 800f036:	9b01      	ldr	r3, [sp, #4]
 800f038:	1ae4      	subs	r4, r4, r3
 800f03a:	2c00      	cmp	r4, #0
 800f03c:	dd1a      	ble.n	800f074 <_vfiprintf_r+0x5b4>
 800f03e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800f042:	4877      	ldr	r0, [pc, #476]	@ (800f220 <_vfiprintf_r+0x760>)
 800f044:	6030      	str	r0, [r6, #0]
 800f046:	2c10      	cmp	r4, #16
 800f048:	f103 0301 	add.w	r3, r3, #1
 800f04c:	f106 0108 	add.w	r1, r6, #8
 800f050:	f300 8126 	bgt.w	800f2a0 <_vfiprintf_r+0x7e0>
 800f054:	6074      	str	r4, [r6, #4]
 800f056:	2b07      	cmp	r3, #7
 800f058:	4414      	add	r4, r2
 800f05a:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800f05e:	f340 8130 	ble.w	800f2c2 <_vfiprintf_r+0x802>
 800f062:	9800      	ldr	r0, [sp, #0]
 800f064:	aa0e      	add	r2, sp, #56	@ 0x38
 800f066:	4639      	mov	r1, r7
 800f068:	f7ff fcf8 	bl	800ea5c <__sprint_r>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	f040 8150 	bne.w	800f312 <_vfiprintf_r+0x852>
 800f072:	ae11      	add	r6, sp, #68	@ 0x44
 800f074:	9b01      	ldr	r3, [sp, #4]
 800f076:	9a01      	ldr	r2, [sp, #4]
 800f078:	6073      	str	r3, [r6, #4]
 800f07a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f07c:	f8c6 9000 	str.w	r9, [r6]
 800f080:	4413      	add	r3, r2
 800f082:	9310      	str	r3, [sp, #64]	@ 0x40
 800f084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f086:	3301      	adds	r3, #1
 800f088:	2b07      	cmp	r3, #7
 800f08a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f08c:	f300 811b 	bgt.w	800f2c6 <_vfiprintf_r+0x806>
 800f090:	f106 0308 	add.w	r3, r6, #8
 800f094:	f01a 0f04 	tst.w	sl, #4
 800f098:	f040 811d 	bne.w	800f2d6 <_vfiprintf_r+0x816>
 800f09c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0a0:	9904      	ldr	r1, [sp, #16]
 800f0a2:	428a      	cmp	r2, r1
 800f0a4:	bfac      	ite	ge
 800f0a6:	189b      	addge	r3, r3, r2
 800f0a8:	185b      	addlt	r3, r3, r1
 800f0aa:	9303      	str	r3, [sp, #12]
 800f0ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f0ae:	b13b      	cbz	r3, 800f0c0 <_vfiprintf_r+0x600>
 800f0b0:	9800      	ldr	r0, [sp, #0]
 800f0b2:	aa0e      	add	r2, sp, #56	@ 0x38
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	f7ff fcd1 	bl	800ea5c <__sprint_r>
 800f0ba:	2800      	cmp	r0, #0
 800f0bc:	f040 8129 	bne.w	800f312 <_vfiprintf_r+0x852>
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f0c4:	4645      	mov	r5, r8
 800f0c6:	ae11      	add	r6, sp, #68	@ 0x44
 800f0c8:	e55b      	b.n	800eb82 <_vfiprintf_r+0xc2>
 800f0ca:	4648      	mov	r0, r9
 800f0cc:	f7f1 f958 	bl	8000380 <strlen>
 800f0d0:	9001      	str	r0, [sp, #4]
 800f0d2:	e734      	b.n	800ef3e <_vfiprintf_r+0x47e>
 800f0d4:	f04a 0a10 	orr.w	sl, sl, #16
 800f0d8:	f01a 0320 	ands.w	r3, sl, #32
 800f0dc:	d008      	beq.n	800f0f0 <_vfiprintf_r+0x630>
 800f0de:	3507      	adds	r5, #7
 800f0e0:	f025 0507 	bic.w	r5, r5, #7
 800f0e4:	46a8      	mov	r8, r5
 800f0e6:	686d      	ldr	r5, [r5, #4]
 800f0e8:	f858 4b08 	ldr.w	r4, [r8], #8
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	e6d8      	b.n	800eea2 <_vfiprintf_r+0x3e2>
 800f0f0:	46a8      	mov	r8, r5
 800f0f2:	f01a 0510 	ands.w	r5, sl, #16
 800f0f6:	f858 4b04 	ldr.w	r4, [r8], #4
 800f0fa:	d001      	beq.n	800f100 <_vfiprintf_r+0x640>
 800f0fc:	461d      	mov	r5, r3
 800f0fe:	e7f5      	b.n	800f0ec <_vfiprintf_r+0x62c>
 800f100:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800f104:	d001      	beq.n	800f10a <_vfiprintf_r+0x64a>
 800f106:	b2a4      	uxth	r4, r4
 800f108:	e7f0      	b.n	800f0ec <_vfiprintf_r+0x62c>
 800f10a:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800f10e:	d0ed      	beq.n	800f0ec <_vfiprintf_r+0x62c>
 800f110:	b2e4      	uxtb	r4, r4
 800f112:	e7f3      	b.n	800f0fc <_vfiprintf_r+0x63c>
 800f114:	4a43      	ldr	r2, [pc, #268]	@ (800f224 <_vfiprintf_r+0x764>)
 800f116:	e5c9      	b.n	800ecac <_vfiprintf_r+0x1ec>
 800f118:	46a8      	mov	r8, r5
 800f11a:	f01a 0510 	ands.w	r5, sl, #16
 800f11e:	f858 4b04 	ldr.w	r4, [r8], #4
 800f122:	d001      	beq.n	800f128 <_vfiprintf_r+0x668>
 800f124:	4615      	mov	r5, r2
 800f126:	e5cd      	b.n	800ecc4 <_vfiprintf_r+0x204>
 800f128:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800f12c:	d001      	beq.n	800f132 <_vfiprintf_r+0x672>
 800f12e:	b2a4      	uxth	r4, r4
 800f130:	e5c8      	b.n	800ecc4 <_vfiprintf_r+0x204>
 800f132:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800f136:	f43f adc5 	beq.w	800ecc4 <_vfiprintf_r+0x204>
 800f13a:	b2e4      	uxtb	r4, r4
 800f13c:	e7f2      	b.n	800f124 <_vfiprintf_r+0x664>
 800f13e:	2c0a      	cmp	r4, #10
 800f140:	f175 0300 	sbcs.w	r3, r5, #0
 800f144:	d206      	bcs.n	800f154 <_vfiprintf_r+0x694>
 800f146:	3430      	adds	r4, #48	@ 0x30
 800f148:	b2e4      	uxtb	r4, r4
 800f14a:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800f14e:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800f152:	e131      	b.n	800f3b8 <_vfiprintf_r+0x8f8>
 800f154:	ab3a      	add	r3, sp, #232	@ 0xe8
 800f156:	9308      	str	r3, [sp, #32]
 800f158:	9b04      	ldr	r3, [sp, #16]
 800f15a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f15e:	f04f 0a00 	mov.w	sl, #0
 800f162:	930a      	str	r3, [sp, #40]	@ 0x28
 800f164:	220a      	movs	r2, #10
 800f166:	2300      	movs	r3, #0
 800f168:	4620      	mov	r0, r4
 800f16a:	4629      	mov	r1, r5
 800f16c:	f7f1 f910 	bl	8000390 <__aeabi_uldivmod>
 800f170:	460b      	mov	r3, r1
 800f172:	9908      	ldr	r1, [sp, #32]
 800f174:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f176:	3230      	adds	r2, #48	@ 0x30
 800f178:	f801 2c01 	strb.w	r2, [r1, #-1]
 800f17c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f17e:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 800f182:	f10a 0a01 	add.w	sl, sl, #1
 800f186:	b1e2      	cbz	r2, 800f1c2 <_vfiprintf_r+0x702>
 800f188:	9a06      	ldr	r2, [sp, #24]
 800f18a:	7812      	ldrb	r2, [r2, #0]
 800f18c:	4552      	cmp	r2, sl
 800f18e:	d118      	bne.n	800f1c2 <_vfiprintf_r+0x702>
 800f190:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800f194:	d015      	beq.n	800f1c2 <_vfiprintf_r+0x702>
 800f196:	2c0a      	cmp	r4, #10
 800f198:	f175 0200 	sbcs.w	r2, r5, #0
 800f19c:	d311      	bcc.n	800f1c2 <_vfiprintf_r+0x702>
 800f19e:	9308      	str	r3, [sp, #32]
 800f1a0:	9b07      	ldr	r3, [sp, #28]
 800f1a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f1a4:	eba9 0903 	sub.w	r9, r9, r3
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	4648      	mov	r0, r9
 800f1ac:	f000 fd0e 	bl	800fbcc <strncpy>
 800f1b0:	9b06      	ldr	r3, [sp, #24]
 800f1b2:	785a      	ldrb	r2, [r3, #1]
 800f1b4:	9b08      	ldr	r3, [sp, #32]
 800f1b6:	b172      	cbz	r2, 800f1d6 <_vfiprintf_r+0x716>
 800f1b8:	9a06      	ldr	r2, [sp, #24]
 800f1ba:	3201      	adds	r2, #1
 800f1bc:	9206      	str	r2, [sp, #24]
 800f1be:	f04f 0a00 	mov.w	sl, #0
 800f1c2:	2c0a      	cmp	r4, #10
 800f1c4:	f175 0500 	sbcs.w	r5, r5, #0
 800f1c8:	f0c0 80f6 	bcc.w	800f3b8 <_vfiprintf_r+0x8f8>
 800f1cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f1ce:	f8cd 9020 	str.w	r9, [sp, #32]
 800f1d2:	461d      	mov	r5, r3
 800f1d4:	e7c6      	b.n	800f164 <_vfiprintf_r+0x6a4>
 800f1d6:	4692      	mov	sl, r2
 800f1d8:	e7f3      	b.n	800f1c2 <_vfiprintf_r+0x702>
 800f1da:	f004 030f 	and.w	r3, r4, #15
 800f1de:	9a05      	ldr	r2, [sp, #20]
 800f1e0:	0924      	lsrs	r4, r4, #4
 800f1e2:	5cd3      	ldrb	r3, [r2, r3]
 800f1e4:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f1e8:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800f1ec:	092d      	lsrs	r5, r5, #4
 800f1ee:	ea54 0305 	orrs.w	r3, r4, r5
 800f1f2:	d1f2      	bne.n	800f1da <_vfiprintf_r+0x71a>
 800f1f4:	e0e0      	b.n	800f3b8 <_vfiprintf_r+0x8f8>
 800f1f6:	b923      	cbnz	r3, 800f202 <_vfiprintf_r+0x742>
 800f1f8:	f01a 0f01 	tst.w	sl, #1
 800f1fc:	d001      	beq.n	800f202 <_vfiprintf_r+0x742>
 800f1fe:	2430      	movs	r4, #48	@ 0x30
 800f200:	e7a3      	b.n	800f14a <_vfiprintf_r+0x68a>
 800f202:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800f206:	e0d7      	b.n	800f3b8 <_vfiprintf_r+0x8f8>
 800f208:	2b00      	cmp	r3, #0
 800f20a:	f000 80a3 	beq.w	800f354 <_vfiprintf_r+0x894>
 800f20e:	2400      	movs	r4, #0
 800f210:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800f214:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800f218:	46a8      	mov	r8, r5
 800f21a:	e5e0      	b.n	800edde <_vfiprintf_r+0x31e>
 800f21c:	08014b72 	.word	0x08014b72
 800f220:	08014b62 	.word	0x08014b62
 800f224:	08014b40 	.word	0x08014b40
 800f228:	2110      	movs	r1, #16
 800f22a:	6071      	str	r1, [r6, #4]
 800f22c:	2a07      	cmp	r2, #7
 800f22e:	4461      	add	r1, ip
 800f230:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f234:	dd08      	ble.n	800f248 <_vfiprintf_r+0x788>
 800f236:	9800      	ldr	r0, [sp, #0]
 800f238:	aa0e      	add	r2, sp, #56	@ 0x38
 800f23a:	4639      	mov	r1, r7
 800f23c:	f7ff fc0e 	bl	800ea5c <__sprint_r>
 800f240:	2800      	cmp	r0, #0
 800f242:	d166      	bne.n	800f312 <_vfiprintf_r+0x852>
 800f244:	4b60      	ldr	r3, [pc, #384]	@ (800f3c8 <_vfiprintf_r+0x908>)
 800f246:	a811      	add	r0, sp, #68	@ 0x44
 800f248:	3d10      	subs	r5, #16
 800f24a:	4606      	mov	r6, r0
 800f24c:	e694      	b.n	800ef78 <_vfiprintf_r+0x4b8>
 800f24e:	4606      	mov	r6, r0
 800f250:	e6ac      	b.n	800efac <_vfiprintf_r+0x4ec>
 800f252:	9800      	ldr	r0, [sp, #0]
 800f254:	aa0e      	add	r2, sp, #56	@ 0x38
 800f256:	4639      	mov	r1, r7
 800f258:	f7ff fc00 	bl	800ea5c <__sprint_r>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	d158      	bne.n	800f312 <_vfiprintf_r+0x852>
 800f260:	ae11      	add	r6, sp, #68	@ 0x44
 800f262:	e6b5      	b.n	800efd0 <_vfiprintf_r+0x510>
 800f264:	9800      	ldr	r0, [sp, #0]
 800f266:	aa0e      	add	r2, sp, #56	@ 0x38
 800f268:	4639      	mov	r1, r7
 800f26a:	f7ff fbf7 	bl	800ea5c <__sprint_r>
 800f26e:	2800      	cmp	r0, #0
 800f270:	d14f      	bne.n	800f312 <_vfiprintf_r+0x852>
 800f272:	ae11      	add	r6, sp, #68	@ 0x44
 800f274:	e6bc      	b.n	800eff0 <_vfiprintf_r+0x530>
 800f276:	2110      	movs	r1, #16
 800f278:	6071      	str	r1, [r6, #4]
 800f27a:	2a07      	cmp	r2, #7
 800f27c:	4461      	add	r1, ip
 800f27e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f282:	dd08      	ble.n	800f296 <_vfiprintf_r+0x7d6>
 800f284:	9800      	ldr	r0, [sp, #0]
 800f286:	aa0e      	add	r2, sp, #56	@ 0x38
 800f288:	4639      	mov	r1, r7
 800f28a:	f7ff fbe7 	bl	800ea5c <__sprint_r>
 800f28e:	2800      	cmp	r0, #0
 800f290:	d13f      	bne.n	800f312 <_vfiprintf_r+0x852>
 800f292:	4b4e      	ldr	r3, [pc, #312]	@ (800f3cc <_vfiprintf_r+0x90c>)
 800f294:	a811      	add	r0, sp, #68	@ 0x44
 800f296:	3d10      	subs	r5, #16
 800f298:	4606      	mov	r6, r0
 800f29a:	e6b2      	b.n	800f002 <_vfiprintf_r+0x542>
 800f29c:	4606      	mov	r6, r0
 800f29e:	e6ca      	b.n	800f036 <_vfiprintf_r+0x576>
 800f2a0:	2010      	movs	r0, #16
 800f2a2:	4402      	add	r2, r0
 800f2a4:	2b07      	cmp	r3, #7
 800f2a6:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800f2aa:	6070      	str	r0, [r6, #4]
 800f2ac:	dd06      	ble.n	800f2bc <_vfiprintf_r+0x7fc>
 800f2ae:	9800      	ldr	r0, [sp, #0]
 800f2b0:	aa0e      	add	r2, sp, #56	@ 0x38
 800f2b2:	4639      	mov	r1, r7
 800f2b4:	f7ff fbd2 	bl	800ea5c <__sprint_r>
 800f2b8:	bb58      	cbnz	r0, 800f312 <_vfiprintf_r+0x852>
 800f2ba:	a911      	add	r1, sp, #68	@ 0x44
 800f2bc:	3c10      	subs	r4, #16
 800f2be:	460e      	mov	r6, r1
 800f2c0:	e6bd      	b.n	800f03e <_vfiprintf_r+0x57e>
 800f2c2:	460e      	mov	r6, r1
 800f2c4:	e6d6      	b.n	800f074 <_vfiprintf_r+0x5b4>
 800f2c6:	9800      	ldr	r0, [sp, #0]
 800f2c8:	aa0e      	add	r2, sp, #56	@ 0x38
 800f2ca:	4639      	mov	r1, r7
 800f2cc:	f7ff fbc6 	bl	800ea5c <__sprint_r>
 800f2d0:	b9f8      	cbnz	r0, 800f312 <_vfiprintf_r+0x852>
 800f2d2:	ab11      	add	r3, sp, #68	@ 0x44
 800f2d4:	e6de      	b.n	800f094 <_vfiprintf_r+0x5d4>
 800f2d6:	9a02      	ldr	r2, [sp, #8]
 800f2d8:	9904      	ldr	r1, [sp, #16]
 800f2da:	1a54      	subs	r4, r2, r1
 800f2dc:	2c00      	cmp	r4, #0
 800f2de:	f77f aedd 	ble.w	800f09c <_vfiprintf_r+0x5dc>
 800f2e2:	4d39      	ldr	r5, [pc, #228]	@ (800f3c8 <_vfiprintf_r+0x908>)
 800f2e4:	2610      	movs	r6, #16
 800f2e6:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800f2ea:	2c10      	cmp	r4, #16
 800f2ec:	f102 0201 	add.w	r2, r2, #1
 800f2f0:	601d      	str	r5, [r3, #0]
 800f2f2:	dc1d      	bgt.n	800f330 <_vfiprintf_r+0x870>
 800f2f4:	605c      	str	r4, [r3, #4]
 800f2f6:	2a07      	cmp	r2, #7
 800f2f8:	440c      	add	r4, r1
 800f2fa:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800f2fe:	f77f aecd 	ble.w	800f09c <_vfiprintf_r+0x5dc>
 800f302:	9800      	ldr	r0, [sp, #0]
 800f304:	aa0e      	add	r2, sp, #56	@ 0x38
 800f306:	4639      	mov	r1, r7
 800f308:	f7ff fba8 	bl	800ea5c <__sprint_r>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	f43f aec5 	beq.w	800f09c <_vfiprintf_r+0x5dc>
 800f312:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f314:	07d9      	lsls	r1, r3, #31
 800f316:	d405      	bmi.n	800f324 <_vfiprintf_r+0x864>
 800f318:	89bb      	ldrh	r3, [r7, #12]
 800f31a:	059a      	lsls	r2, r3, #22
 800f31c:	d402      	bmi.n	800f324 <_vfiprintf_r+0x864>
 800f31e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f320:	f000 fc9f 	bl	800fc62 <__retarget_lock_release_recursive>
 800f324:	89bb      	ldrh	r3, [r7, #12]
 800f326:	065b      	lsls	r3, r3, #25
 800f328:	f57f abfb 	bpl.w	800eb22 <_vfiprintf_r+0x62>
 800f32c:	f7ff bbf6 	b.w	800eb1c <_vfiprintf_r+0x5c>
 800f330:	3110      	adds	r1, #16
 800f332:	2a07      	cmp	r2, #7
 800f334:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f338:	605e      	str	r6, [r3, #4]
 800f33a:	dc02      	bgt.n	800f342 <_vfiprintf_r+0x882>
 800f33c:	3308      	adds	r3, #8
 800f33e:	3c10      	subs	r4, #16
 800f340:	e7d1      	b.n	800f2e6 <_vfiprintf_r+0x826>
 800f342:	9800      	ldr	r0, [sp, #0]
 800f344:	aa0e      	add	r2, sp, #56	@ 0x38
 800f346:	4639      	mov	r1, r7
 800f348:	f7ff fb88 	bl	800ea5c <__sprint_r>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d1e0      	bne.n	800f312 <_vfiprintf_r+0x852>
 800f350:	ab11      	add	r3, sp, #68	@ 0x44
 800f352:	e7f4      	b.n	800f33e <_vfiprintf_r+0x87e>
 800f354:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f356:	b913      	cbnz	r3, 800f35e <_vfiprintf_r+0x89e>
 800f358:	2300      	movs	r3, #0
 800f35a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f35c:	e7d9      	b.n	800f312 <_vfiprintf_r+0x852>
 800f35e:	9800      	ldr	r0, [sp, #0]
 800f360:	aa0e      	add	r2, sp, #56	@ 0x38
 800f362:	4639      	mov	r1, r7
 800f364:	f7ff fb7a 	bl	800ea5c <__sprint_r>
 800f368:	2800      	cmp	r0, #0
 800f36a:	d0f5      	beq.n	800f358 <_vfiprintf_r+0x898>
 800f36c:	e7d1      	b.n	800f312 <_vfiprintf_r+0x852>
 800f36e:	ea54 0205 	orrs.w	r2, r4, r5
 800f372:	f8cd a010 	str.w	sl, [sp, #16]
 800f376:	f43f ada6 	beq.w	800eec6 <_vfiprintf_r+0x406>
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	f43f aedf 	beq.w	800f13e <_vfiprintf_r+0x67e>
 800f380:	2b02      	cmp	r3, #2
 800f382:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800f386:	f43f af28 	beq.w	800f1da <_vfiprintf_r+0x71a>
 800f38a:	f004 0307 	and.w	r3, r4, #7
 800f38e:	08e4      	lsrs	r4, r4, #3
 800f390:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800f394:	08ed      	lsrs	r5, r5, #3
 800f396:	3330      	adds	r3, #48	@ 0x30
 800f398:	ea54 0105 	orrs.w	r1, r4, r5
 800f39c:	464a      	mov	r2, r9
 800f39e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f3a2:	d1f2      	bne.n	800f38a <_vfiprintf_r+0x8ca>
 800f3a4:	9904      	ldr	r1, [sp, #16]
 800f3a6:	07c8      	lsls	r0, r1, #31
 800f3a8:	d506      	bpl.n	800f3b8 <_vfiprintf_r+0x8f8>
 800f3aa:	2b30      	cmp	r3, #48	@ 0x30
 800f3ac:	d004      	beq.n	800f3b8 <_vfiprintf_r+0x8f8>
 800f3ae:	2330      	movs	r3, #48	@ 0x30
 800f3b0:	f809 3c01 	strb.w	r3, [r9, #-1]
 800f3b4:	f1a2 0902 	sub.w	r9, r2, #2
 800f3b8:	ab3a      	add	r3, sp, #232	@ 0xe8
 800f3ba:	eba3 0309 	sub.w	r3, r3, r9
 800f3be:	9c01      	ldr	r4, [sp, #4]
 800f3c0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f3c4:	9301      	str	r3, [sp, #4]
 800f3c6:	e5bb      	b.n	800ef40 <_vfiprintf_r+0x480>
 800f3c8:	08014b72 	.word	0x08014b72
 800f3cc:	08014b62 	.word	0x08014b62

0800f3d0 <__sbprintf>:
 800f3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3d2:	461f      	mov	r7, r3
 800f3d4:	898b      	ldrh	r3, [r1, #12]
 800f3d6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800f3da:	f023 0302 	bic.w	r3, r3, #2
 800f3de:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f3e2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800f3e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800f3e6:	89cb      	ldrh	r3, [r1, #14]
 800f3e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f3ec:	69cb      	ldr	r3, [r1, #28]
 800f3ee:	9307      	str	r3, [sp, #28]
 800f3f0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800f3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3f4:	ab1a      	add	r3, sp, #104	@ 0x68
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	9304      	str	r3, [sp, #16]
 800f3fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f3fe:	4615      	mov	r5, r2
 800f400:	4606      	mov	r6, r0
 800f402:	9302      	str	r3, [sp, #8]
 800f404:	9305      	str	r3, [sp, #20]
 800f406:	a816      	add	r0, sp, #88	@ 0x58
 800f408:	2300      	movs	r3, #0
 800f40a:	460c      	mov	r4, r1
 800f40c:	9306      	str	r3, [sp, #24]
 800f40e:	f000 fc25 	bl	800fc5c <__retarget_lock_init_recursive>
 800f412:	462a      	mov	r2, r5
 800f414:	463b      	mov	r3, r7
 800f416:	4669      	mov	r1, sp
 800f418:	4630      	mov	r0, r6
 800f41a:	f7ff fb51 	bl	800eac0 <_vfiprintf_r>
 800f41e:	1e05      	subs	r5, r0, #0
 800f420:	db07      	blt.n	800f432 <__sbprintf+0x62>
 800f422:	4669      	mov	r1, sp
 800f424:	4630      	mov	r0, r6
 800f426:	f000 f89b 	bl	800f560 <_fflush_r>
 800f42a:	2800      	cmp	r0, #0
 800f42c:	bf18      	it	ne
 800f42e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 800f432:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f436:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800f438:	065b      	lsls	r3, r3, #25
 800f43a:	bf42      	ittt	mi
 800f43c:	89a3      	ldrhmi	r3, [r4, #12]
 800f43e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800f442:	81a3      	strhmi	r3, [r4, #12]
 800f444:	f000 fc0b 	bl	800fc5e <__retarget_lock_close_recursive>
 800f448:	4628      	mov	r0, r5
 800f44a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800f44e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f450 <__sflush_r>:
 800f450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f454:	4605      	mov	r5, r0
 800f456:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800f45a:	0706      	lsls	r6, r0, #28
 800f45c:	460c      	mov	r4, r1
 800f45e:	d457      	bmi.n	800f510 <__sflush_r+0xc0>
 800f460:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800f464:	818b      	strh	r3, [r1, #12]
 800f466:	684b      	ldr	r3, [r1, #4]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	dc02      	bgt.n	800f472 <__sflush_r+0x22>
 800f46c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800f46e:	2b00      	cmp	r3, #0
 800f470:	dd4c      	ble.n	800f50c <__sflush_r+0xbc>
 800f472:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f474:	2e00      	cmp	r6, #0
 800f476:	d049      	beq.n	800f50c <__sflush_r+0xbc>
 800f478:	2300      	movs	r3, #0
 800f47a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800f47e:	682f      	ldr	r7, [r5, #0]
 800f480:	69e1      	ldr	r1, [r4, #28]
 800f482:	602b      	str	r3, [r5, #0]
 800f484:	d034      	beq.n	800f4f0 <__sflush_r+0xa0>
 800f486:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	0759      	lsls	r1, r3, #29
 800f48c:	d505      	bpl.n	800f49a <__sflush_r+0x4a>
 800f48e:	6863      	ldr	r3, [r4, #4]
 800f490:	1ad2      	subs	r2, r2, r3
 800f492:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f494:	b10b      	cbz	r3, 800f49a <__sflush_r+0x4a>
 800f496:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f498:	1ad2      	subs	r2, r2, r3
 800f49a:	2300      	movs	r3, #0
 800f49c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f49e:	69e1      	ldr	r1, [r4, #28]
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	47b0      	blx	r6
 800f4a4:	1c43      	adds	r3, r0, #1
 800f4a6:	d106      	bne.n	800f4b6 <__sflush_r+0x66>
 800f4a8:	682a      	ldr	r2, [r5, #0]
 800f4aa:	2a1d      	cmp	r2, #29
 800f4ac:	d848      	bhi.n	800f540 <__sflush_r+0xf0>
 800f4ae:	4b2b      	ldr	r3, [pc, #172]	@ (800f55c <__sflush_r+0x10c>)
 800f4b0:	4113      	asrs	r3, r2
 800f4b2:	07de      	lsls	r6, r3, #31
 800f4b4:	d444      	bmi.n	800f540 <__sflush_r+0xf0>
 800f4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4ba:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f4be:	81a2      	strh	r2, [r4, #12]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	6062      	str	r2, [r4, #4]
 800f4c4:	04d9      	lsls	r1, r3, #19
 800f4c6:	6922      	ldr	r2, [r4, #16]
 800f4c8:	6022      	str	r2, [r4, #0]
 800f4ca:	d504      	bpl.n	800f4d6 <__sflush_r+0x86>
 800f4cc:	1c42      	adds	r2, r0, #1
 800f4ce:	d101      	bne.n	800f4d4 <__sflush_r+0x84>
 800f4d0:	682b      	ldr	r3, [r5, #0]
 800f4d2:	b903      	cbnz	r3, 800f4d6 <__sflush_r+0x86>
 800f4d4:	6520      	str	r0, [r4, #80]	@ 0x50
 800f4d6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f4d8:	602f      	str	r7, [r5, #0]
 800f4da:	b1b9      	cbz	r1, 800f50c <__sflush_r+0xbc>
 800f4dc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800f4e0:	4299      	cmp	r1, r3
 800f4e2:	d002      	beq.n	800f4ea <__sflush_r+0x9a>
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	f001 fa47 	bl	8010978 <_free_r>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800f4ee:	e00d      	b.n	800f50c <__sflush_r+0xbc>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	47b0      	blx	r6
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	1c50      	adds	r0, r2, #1
 800f4fa:	d1c5      	bne.n	800f488 <__sflush_r+0x38>
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d0c2      	beq.n	800f488 <__sflush_r+0x38>
 800f502:	2b1d      	cmp	r3, #29
 800f504:	d001      	beq.n	800f50a <__sflush_r+0xba>
 800f506:	2b16      	cmp	r3, #22
 800f508:	d11a      	bne.n	800f540 <__sflush_r+0xf0>
 800f50a:	602f      	str	r7, [r5, #0]
 800f50c:	2000      	movs	r0, #0
 800f50e:	e01e      	b.n	800f54e <__sflush_r+0xfe>
 800f510:	690f      	ldr	r7, [r1, #16]
 800f512:	2f00      	cmp	r7, #0
 800f514:	d0fa      	beq.n	800f50c <__sflush_r+0xbc>
 800f516:	0783      	lsls	r3, r0, #30
 800f518:	680e      	ldr	r6, [r1, #0]
 800f51a:	bf08      	it	eq
 800f51c:	694b      	ldreq	r3, [r1, #20]
 800f51e:	600f      	str	r7, [r1, #0]
 800f520:	bf18      	it	ne
 800f522:	2300      	movne	r3, #0
 800f524:	eba6 0807 	sub.w	r8, r6, r7
 800f528:	608b      	str	r3, [r1, #8]
 800f52a:	f1b8 0f00 	cmp.w	r8, #0
 800f52e:	dded      	ble.n	800f50c <__sflush_r+0xbc>
 800f530:	69e1      	ldr	r1, [r4, #28]
 800f532:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800f534:	4643      	mov	r3, r8
 800f536:	463a      	mov	r2, r7
 800f538:	4628      	mov	r0, r5
 800f53a:	47b0      	blx	r6
 800f53c:	2800      	cmp	r0, #0
 800f53e:	dc08      	bgt.n	800f552 <__sflush_r+0x102>
 800f540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f548:	81a3      	strh	r3, [r4, #12]
 800f54a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f552:	4407      	add	r7, r0
 800f554:	eba8 0800 	sub.w	r8, r8, r0
 800f558:	e7e7      	b.n	800f52a <__sflush_r+0xda>
 800f55a:	bf00      	nop
 800f55c:	dfbffffe 	.word	0xdfbffffe

0800f560 <_fflush_r>:
 800f560:	b538      	push	{r3, r4, r5, lr}
 800f562:	460c      	mov	r4, r1
 800f564:	4605      	mov	r5, r0
 800f566:	b118      	cbz	r0, 800f570 <_fflush_r+0x10>
 800f568:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f56a:	b90b      	cbnz	r3, 800f570 <_fflush_r+0x10>
 800f56c:	f000 f8ca 	bl	800f704 <__sinit>
 800f570:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800f574:	b1b8      	cbz	r0, 800f5a6 <_fflush_r+0x46>
 800f576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f578:	07db      	lsls	r3, r3, #31
 800f57a:	d404      	bmi.n	800f586 <_fflush_r+0x26>
 800f57c:	0581      	lsls	r1, r0, #22
 800f57e:	d402      	bmi.n	800f586 <_fflush_r+0x26>
 800f580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f582:	f000 fb6d 	bl	800fc60 <__retarget_lock_acquire_recursive>
 800f586:	4628      	mov	r0, r5
 800f588:	4621      	mov	r1, r4
 800f58a:	f7ff ff61 	bl	800f450 <__sflush_r>
 800f58e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f590:	07da      	lsls	r2, r3, #31
 800f592:	4605      	mov	r5, r0
 800f594:	d405      	bmi.n	800f5a2 <_fflush_r+0x42>
 800f596:	89a3      	ldrh	r3, [r4, #12]
 800f598:	059b      	lsls	r3, r3, #22
 800f59a:	d402      	bmi.n	800f5a2 <_fflush_r+0x42>
 800f59c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f59e:	f000 fb60 	bl	800fc62 <__retarget_lock_release_recursive>
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	bd38      	pop	{r3, r4, r5, pc}
 800f5a6:	4605      	mov	r5, r0
 800f5a8:	e7fb      	b.n	800f5a2 <_fflush_r+0x42>
	...

0800f5ac <sprintf>:
 800f5ac:	b40e      	push	{r1, r2, r3}
 800f5ae:	b500      	push	{lr}
 800f5b0:	b09c      	sub	sp, #112	@ 0x70
 800f5b2:	ab1d      	add	r3, sp, #116	@ 0x74
 800f5b4:	9002      	str	r0, [sp, #8]
 800f5b6:	9006      	str	r0, [sp, #24]
 800f5b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f5bc:	4809      	ldr	r0, [pc, #36]	@ (800f5e4 <sprintf+0x38>)
 800f5be:	9107      	str	r1, [sp, #28]
 800f5c0:	9104      	str	r1, [sp, #16]
 800f5c2:	4909      	ldr	r1, [pc, #36]	@ (800f5e8 <sprintf+0x3c>)
 800f5c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5c8:	9105      	str	r1, [sp, #20]
 800f5ca:	6800      	ldr	r0, [r0, #0]
 800f5cc:	9301      	str	r3, [sp, #4]
 800f5ce:	a902      	add	r1, sp, #8
 800f5d0:	f001 fcde 	bl	8010f90 <_svfprintf_r>
 800f5d4:	9b02      	ldr	r3, [sp, #8]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	701a      	strb	r2, [r3, #0]
 800f5da:	b01c      	add	sp, #112	@ 0x70
 800f5dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5e0:	b003      	add	sp, #12
 800f5e2:	4770      	bx	lr
 800f5e4:	24000188 	.word	0x24000188
 800f5e8:	ffff0208 	.word	0xffff0208

0800f5ec <std>:
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	b510      	push	{r4, lr}
 800f5f0:	4604      	mov	r4, r0
 800f5f2:	e9c0 3300 	strd	r3, r3, [r0]
 800f5f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5fa:	6083      	str	r3, [r0, #8]
 800f5fc:	8181      	strh	r1, [r0, #12]
 800f5fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800f600:	81c2      	strh	r2, [r0, #14]
 800f602:	6183      	str	r3, [r0, #24]
 800f604:	4619      	mov	r1, r3
 800f606:	2208      	movs	r2, #8
 800f608:	305c      	adds	r0, #92	@ 0x5c
 800f60a:	f000 fad7 	bl	800fbbc <memset>
 800f60e:	4b0d      	ldr	r3, [pc, #52]	@ (800f644 <std+0x58>)
 800f610:	6223      	str	r3, [r4, #32]
 800f612:	4b0d      	ldr	r3, [pc, #52]	@ (800f648 <std+0x5c>)
 800f614:	6263      	str	r3, [r4, #36]	@ 0x24
 800f616:	4b0d      	ldr	r3, [pc, #52]	@ (800f64c <std+0x60>)
 800f618:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f61a:	4b0d      	ldr	r3, [pc, #52]	@ (800f650 <std+0x64>)
 800f61c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f61e:	4b0d      	ldr	r3, [pc, #52]	@ (800f654 <std+0x68>)
 800f620:	61e4      	str	r4, [r4, #28]
 800f622:	429c      	cmp	r4, r3
 800f624:	d006      	beq.n	800f634 <std+0x48>
 800f626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f62a:	4294      	cmp	r4, r2
 800f62c:	d002      	beq.n	800f634 <std+0x48>
 800f62e:	33d0      	adds	r3, #208	@ 0xd0
 800f630:	429c      	cmp	r4, r3
 800f632:	d105      	bne.n	800f640 <std+0x54>
 800f634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f63c:	f000 bb0e 	b.w	800fc5c <__retarget_lock_init_recursive>
 800f640:	bd10      	pop	{r4, pc}
 800f642:	bf00      	nop
 800f644:	08012ddd 	.word	0x08012ddd
 800f648:	08012dff 	.word	0x08012dff
 800f64c:	08012e37 	.word	0x08012e37
 800f650:	08012e5b 	.word	0x08012e5b
 800f654:	24015210 	.word	0x24015210

0800f658 <stdio_exit_handler>:
 800f658:	4a02      	ldr	r2, [pc, #8]	@ (800f664 <stdio_exit_handler+0xc>)
 800f65a:	4903      	ldr	r1, [pc, #12]	@ (800f668 <stdio_exit_handler+0x10>)
 800f65c:	4803      	ldr	r0, [pc, #12]	@ (800f66c <stdio_exit_handler+0x14>)
 800f65e:	f000 b9b5 	b.w	800f9cc <_fwalk_sglue>
 800f662:	bf00      	nop
 800f664:	24000010 	.word	0x24000010
 800f668:	080129e1 	.word	0x080129e1
 800f66c:	24000190 	.word	0x24000190

0800f670 <cleanup_stdio>:
 800f670:	6841      	ldr	r1, [r0, #4]
 800f672:	4b0c      	ldr	r3, [pc, #48]	@ (800f6a4 <cleanup_stdio+0x34>)
 800f674:	4299      	cmp	r1, r3
 800f676:	b510      	push	{r4, lr}
 800f678:	4604      	mov	r4, r0
 800f67a:	d001      	beq.n	800f680 <cleanup_stdio+0x10>
 800f67c:	f003 f9b0 	bl	80129e0 <_fclose_r>
 800f680:	68a1      	ldr	r1, [r4, #8]
 800f682:	4b09      	ldr	r3, [pc, #36]	@ (800f6a8 <cleanup_stdio+0x38>)
 800f684:	4299      	cmp	r1, r3
 800f686:	d002      	beq.n	800f68e <cleanup_stdio+0x1e>
 800f688:	4620      	mov	r0, r4
 800f68a:	f003 f9a9 	bl	80129e0 <_fclose_r>
 800f68e:	68e1      	ldr	r1, [r4, #12]
 800f690:	4b06      	ldr	r3, [pc, #24]	@ (800f6ac <cleanup_stdio+0x3c>)
 800f692:	4299      	cmp	r1, r3
 800f694:	d004      	beq.n	800f6a0 <cleanup_stdio+0x30>
 800f696:	4620      	mov	r0, r4
 800f698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f69c:	f003 b9a0 	b.w	80129e0 <_fclose_r>
 800f6a0:	bd10      	pop	{r4, pc}
 800f6a2:	bf00      	nop
 800f6a4:	24015210 	.word	0x24015210
 800f6a8:	24015278 	.word	0x24015278
 800f6ac:	240152e0 	.word	0x240152e0

0800f6b0 <global_stdio_init.part.0>:
 800f6b0:	b510      	push	{r4, lr}
 800f6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800f6e0 <global_stdio_init.part.0+0x30>)
 800f6b4:	4c0b      	ldr	r4, [pc, #44]	@ (800f6e4 <global_stdio_init.part.0+0x34>)
 800f6b6:	4a0c      	ldr	r2, [pc, #48]	@ (800f6e8 <global_stdio_init.part.0+0x38>)
 800f6b8:	601a      	str	r2, [r3, #0]
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	2200      	movs	r2, #0
 800f6be:	2104      	movs	r1, #4
 800f6c0:	f7ff ff94 	bl	800f5ec <std>
 800f6c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	2109      	movs	r1, #9
 800f6cc:	f7ff ff8e 	bl	800f5ec <std>
 800f6d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f6d4:	2202      	movs	r2, #2
 800f6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6da:	2112      	movs	r1, #18
 800f6dc:	f7ff bf86 	b.w	800f5ec <std>
 800f6e0:	24015348 	.word	0x24015348
 800f6e4:	24015210 	.word	0x24015210
 800f6e8:	0800f659 	.word	0x0800f659

0800f6ec <__sfp_lock_acquire>:
 800f6ec:	4801      	ldr	r0, [pc, #4]	@ (800f6f4 <__sfp_lock_acquire+0x8>)
 800f6ee:	f000 bab7 	b.w	800fc60 <__retarget_lock_acquire_recursive>
 800f6f2:	bf00      	nop
 800f6f4:	2401534e 	.word	0x2401534e

0800f6f8 <__sfp_lock_release>:
 800f6f8:	4801      	ldr	r0, [pc, #4]	@ (800f700 <__sfp_lock_release+0x8>)
 800f6fa:	f000 bab2 	b.w	800fc62 <__retarget_lock_release_recursive>
 800f6fe:	bf00      	nop
 800f700:	2401534e 	.word	0x2401534e

0800f704 <__sinit>:
 800f704:	b510      	push	{r4, lr}
 800f706:	4604      	mov	r4, r0
 800f708:	f7ff fff0 	bl	800f6ec <__sfp_lock_acquire>
 800f70c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f70e:	b11b      	cbz	r3, 800f718 <__sinit+0x14>
 800f710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f714:	f7ff bff0 	b.w	800f6f8 <__sfp_lock_release>
 800f718:	4b04      	ldr	r3, [pc, #16]	@ (800f72c <__sinit+0x28>)
 800f71a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f71c:	4b04      	ldr	r3, [pc, #16]	@ (800f730 <__sinit+0x2c>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d1f5      	bne.n	800f710 <__sinit+0xc>
 800f724:	f7ff ffc4 	bl	800f6b0 <global_stdio_init.part.0>
 800f728:	e7f2      	b.n	800f710 <__sinit+0xc>
 800f72a:	bf00      	nop
 800f72c:	0800f671 	.word	0x0800f671
 800f730:	24015348 	.word	0x24015348

0800f734 <__sfvwrite_r>:
 800f734:	6893      	ldr	r3, [r2, #8]
 800f736:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73a:	4606      	mov	r6, r0
 800f73c:	460c      	mov	r4, r1
 800f73e:	4691      	mov	r9, r2
 800f740:	b91b      	cbnz	r3, 800f74a <__sfvwrite_r+0x16>
 800f742:	2000      	movs	r0, #0
 800f744:	b003      	add	sp, #12
 800f746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f74a:	898b      	ldrh	r3, [r1, #12]
 800f74c:	0718      	lsls	r0, r3, #28
 800f74e:	d550      	bpl.n	800f7f2 <__sfvwrite_r+0xbe>
 800f750:	690b      	ldr	r3, [r1, #16]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d04d      	beq.n	800f7f2 <__sfvwrite_r+0xbe>
 800f756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f75a:	f8d9 8000 	ldr.w	r8, [r9]
 800f75e:	f013 0702 	ands.w	r7, r3, #2
 800f762:	d16b      	bne.n	800f83c <__sfvwrite_r+0x108>
 800f764:	f013 0301 	ands.w	r3, r3, #1
 800f768:	f000 809c 	beq.w	800f8a4 <__sfvwrite_r+0x170>
 800f76c:	4638      	mov	r0, r7
 800f76e:	46ba      	mov	sl, r7
 800f770:	46bb      	mov	fp, r7
 800f772:	f1bb 0f00 	cmp.w	fp, #0
 800f776:	f000 8103 	beq.w	800f980 <__sfvwrite_r+0x24c>
 800f77a:	b950      	cbnz	r0, 800f792 <__sfvwrite_r+0x5e>
 800f77c:	465a      	mov	r2, fp
 800f77e:	210a      	movs	r1, #10
 800f780:	4650      	mov	r0, sl
 800f782:	f7f0 fdad 	bl	80002e0 <memchr>
 800f786:	2800      	cmp	r0, #0
 800f788:	f000 8100 	beq.w	800f98c <__sfvwrite_r+0x258>
 800f78c:	3001      	adds	r0, #1
 800f78e:	eba0 070a 	sub.w	r7, r0, sl
 800f792:	6820      	ldr	r0, [r4, #0]
 800f794:	6921      	ldr	r1, [r4, #16]
 800f796:	68a5      	ldr	r5, [r4, #8]
 800f798:	6963      	ldr	r3, [r4, #20]
 800f79a:	455f      	cmp	r7, fp
 800f79c:	463a      	mov	r2, r7
 800f79e:	bf28      	it	cs
 800f7a0:	465a      	movcs	r2, fp
 800f7a2:	4288      	cmp	r0, r1
 800f7a4:	f240 80f5 	bls.w	800f992 <__sfvwrite_r+0x25e>
 800f7a8:	441d      	add	r5, r3
 800f7aa:	42aa      	cmp	r2, r5
 800f7ac:	f340 80f1 	ble.w	800f992 <__sfvwrite_r+0x25e>
 800f7b0:	4651      	mov	r1, sl
 800f7b2:	462a      	mov	r2, r5
 800f7b4:	f000 f9e8 	bl	800fb88 <memmove>
 800f7b8:	6823      	ldr	r3, [r4, #0]
 800f7ba:	442b      	add	r3, r5
 800f7bc:	6023      	str	r3, [r4, #0]
 800f7be:	4621      	mov	r1, r4
 800f7c0:	4630      	mov	r0, r6
 800f7c2:	f7ff fecd 	bl	800f560 <_fflush_r>
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d167      	bne.n	800f89a <__sfvwrite_r+0x166>
 800f7ca:	1b7f      	subs	r7, r7, r5
 800f7cc:	f040 80f9 	bne.w	800f9c2 <__sfvwrite_r+0x28e>
 800f7d0:	4621      	mov	r1, r4
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	f7ff fec4 	bl	800f560 <_fflush_r>
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	d15e      	bne.n	800f89a <__sfvwrite_r+0x166>
 800f7dc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f7e0:	1b5b      	subs	r3, r3, r5
 800f7e2:	44aa      	add	sl, r5
 800f7e4:	ebab 0b05 	sub.w	fp, fp, r5
 800f7e8:	f8c9 3008 	str.w	r3, [r9, #8]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d1c0      	bne.n	800f772 <__sfvwrite_r+0x3e>
 800f7f0:	e7a7      	b.n	800f742 <__sfvwrite_r+0xe>
 800f7f2:	4621      	mov	r1, r4
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	f000 f907 	bl	800fa08 <__swsetup_r>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	d0ab      	beq.n	800f756 <__sfvwrite_r+0x22>
 800f7fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f802:	e79f      	b.n	800f744 <__sfvwrite_r+0x10>
 800f804:	e9d8 a500 	ldrd	sl, r5, [r8]
 800f808:	f108 0808 	add.w	r8, r8, #8
 800f80c:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f810:	69e1      	ldr	r1, [r4, #28]
 800f812:	2d00      	cmp	r5, #0
 800f814:	d0f6      	beq.n	800f804 <__sfvwrite_r+0xd0>
 800f816:	42bd      	cmp	r5, r7
 800f818:	462b      	mov	r3, r5
 800f81a:	4652      	mov	r2, sl
 800f81c:	bf28      	it	cs
 800f81e:	463b      	movcs	r3, r7
 800f820:	4630      	mov	r0, r6
 800f822:	47d8      	blx	fp
 800f824:	2800      	cmp	r0, #0
 800f826:	dd38      	ble.n	800f89a <__sfvwrite_r+0x166>
 800f828:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f82c:	1a1b      	subs	r3, r3, r0
 800f82e:	4482      	add	sl, r0
 800f830:	1a2d      	subs	r5, r5, r0
 800f832:	f8c9 3008 	str.w	r3, [r9, #8]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d1e8      	bne.n	800f80c <__sfvwrite_r+0xd8>
 800f83a:	e782      	b.n	800f742 <__sfvwrite_r+0xe>
 800f83c:	f04f 0a00 	mov.w	sl, #0
 800f840:	4f61      	ldr	r7, [pc, #388]	@ (800f9c8 <__sfvwrite_r+0x294>)
 800f842:	4655      	mov	r5, sl
 800f844:	e7e2      	b.n	800f80c <__sfvwrite_r+0xd8>
 800f846:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800f84a:	f108 0808 	add.w	r8, r8, #8
 800f84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f852:	6820      	ldr	r0, [r4, #0]
 800f854:	68a2      	ldr	r2, [r4, #8]
 800f856:	f1ba 0f00 	cmp.w	sl, #0
 800f85a:	d0f4      	beq.n	800f846 <__sfvwrite_r+0x112>
 800f85c:	0599      	lsls	r1, r3, #22
 800f85e:	d563      	bpl.n	800f928 <__sfvwrite_r+0x1f4>
 800f860:	4552      	cmp	r2, sl
 800f862:	d836      	bhi.n	800f8d2 <__sfvwrite_r+0x19e>
 800f864:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800f868:	d033      	beq.n	800f8d2 <__sfvwrite_r+0x19e>
 800f86a:	6921      	ldr	r1, [r4, #16]
 800f86c:	6965      	ldr	r5, [r4, #20]
 800f86e:	eba0 0b01 	sub.w	fp, r0, r1
 800f872:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f876:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f87a:	f10b 0201 	add.w	r2, fp, #1
 800f87e:	106d      	asrs	r5, r5, #1
 800f880:	4452      	add	r2, sl
 800f882:	4295      	cmp	r5, r2
 800f884:	bf38      	it	cc
 800f886:	4615      	movcc	r5, r2
 800f888:	055b      	lsls	r3, r3, #21
 800f88a:	d53d      	bpl.n	800f908 <__sfvwrite_r+0x1d4>
 800f88c:	4629      	mov	r1, r5
 800f88e:	4630      	mov	r0, r6
 800f890:	f001 f932 	bl	8010af8 <_malloc_r>
 800f894:	b948      	cbnz	r0, 800f8aa <__sfvwrite_r+0x176>
 800f896:	230c      	movs	r3, #12
 800f898:	6033      	str	r3, [r6, #0]
 800f89a:	89a3      	ldrh	r3, [r4, #12]
 800f89c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8a0:	81a3      	strh	r3, [r4, #12]
 800f8a2:	e7ac      	b.n	800f7fe <__sfvwrite_r+0xca>
 800f8a4:	461f      	mov	r7, r3
 800f8a6:	469a      	mov	sl, r3
 800f8a8:	e7d1      	b.n	800f84e <__sfvwrite_r+0x11a>
 800f8aa:	465a      	mov	r2, fp
 800f8ac:	6921      	ldr	r1, [r4, #16]
 800f8ae:	9001      	str	r0, [sp, #4]
 800f8b0:	f000 f9d8 	bl	800fc64 <memcpy>
 800f8b4:	89a2      	ldrh	r2, [r4, #12]
 800f8b6:	9b01      	ldr	r3, [sp, #4]
 800f8b8:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800f8bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800f8c0:	81a2      	strh	r2, [r4, #12]
 800f8c2:	6123      	str	r3, [r4, #16]
 800f8c4:	6165      	str	r5, [r4, #20]
 800f8c6:	445b      	add	r3, fp
 800f8c8:	eba5 050b 	sub.w	r5, r5, fp
 800f8cc:	6023      	str	r3, [r4, #0]
 800f8ce:	4652      	mov	r2, sl
 800f8d0:	60a5      	str	r5, [r4, #8]
 800f8d2:	4552      	cmp	r2, sl
 800f8d4:	bf28      	it	cs
 800f8d6:	4652      	movcs	r2, sl
 800f8d8:	6820      	ldr	r0, [r4, #0]
 800f8da:	9201      	str	r2, [sp, #4]
 800f8dc:	4639      	mov	r1, r7
 800f8de:	f000 f953 	bl	800fb88 <memmove>
 800f8e2:	68a3      	ldr	r3, [r4, #8]
 800f8e4:	9a01      	ldr	r2, [sp, #4]
 800f8e6:	1a9b      	subs	r3, r3, r2
 800f8e8:	60a3      	str	r3, [r4, #8]
 800f8ea:	6823      	ldr	r3, [r4, #0]
 800f8ec:	4413      	add	r3, r2
 800f8ee:	4655      	mov	r5, sl
 800f8f0:	6023      	str	r3, [r4, #0]
 800f8f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f8f6:	1b5b      	subs	r3, r3, r5
 800f8f8:	442f      	add	r7, r5
 800f8fa:	ebaa 0a05 	sub.w	sl, sl, r5
 800f8fe:	f8c9 3008 	str.w	r3, [r9, #8]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d1a3      	bne.n	800f84e <__sfvwrite_r+0x11a>
 800f906:	e71c      	b.n	800f742 <__sfvwrite_r+0xe>
 800f908:	462a      	mov	r2, r5
 800f90a:	4630      	mov	r0, r6
 800f90c:	f003 f8be 	bl	8012a8c <_realloc_r>
 800f910:	4603      	mov	r3, r0
 800f912:	2800      	cmp	r0, #0
 800f914:	d1d5      	bne.n	800f8c2 <__sfvwrite_r+0x18e>
 800f916:	6921      	ldr	r1, [r4, #16]
 800f918:	4630      	mov	r0, r6
 800f91a:	f001 f82d 	bl	8010978 <_free_r>
 800f91e:	89a3      	ldrh	r3, [r4, #12]
 800f920:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f924:	81a3      	strh	r3, [r4, #12]
 800f926:	e7b6      	b.n	800f896 <__sfvwrite_r+0x162>
 800f928:	6923      	ldr	r3, [r4, #16]
 800f92a:	4283      	cmp	r3, r0
 800f92c:	d302      	bcc.n	800f934 <__sfvwrite_r+0x200>
 800f92e:	6961      	ldr	r1, [r4, #20]
 800f930:	4551      	cmp	r1, sl
 800f932:	d915      	bls.n	800f960 <__sfvwrite_r+0x22c>
 800f934:	4552      	cmp	r2, sl
 800f936:	bf28      	it	cs
 800f938:	4652      	movcs	r2, sl
 800f93a:	4639      	mov	r1, r7
 800f93c:	4615      	mov	r5, r2
 800f93e:	f000 f923 	bl	800fb88 <memmove>
 800f942:	68a3      	ldr	r3, [r4, #8]
 800f944:	6822      	ldr	r2, [r4, #0]
 800f946:	1b5b      	subs	r3, r3, r5
 800f948:	442a      	add	r2, r5
 800f94a:	60a3      	str	r3, [r4, #8]
 800f94c:	6022      	str	r2, [r4, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1cf      	bne.n	800f8f2 <__sfvwrite_r+0x1be>
 800f952:	4621      	mov	r1, r4
 800f954:	4630      	mov	r0, r6
 800f956:	f7ff fe03 	bl	800f560 <_fflush_r>
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d0c9      	beq.n	800f8f2 <__sfvwrite_r+0x1be>
 800f95e:	e79c      	b.n	800f89a <__sfvwrite_r+0x166>
 800f960:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f964:	4553      	cmp	r3, sl
 800f966:	bf28      	it	cs
 800f968:	4653      	movcs	r3, sl
 800f96a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800f96c:	fb93 f3f1 	sdiv	r3, r3, r1
 800f970:	463a      	mov	r2, r7
 800f972:	434b      	muls	r3, r1
 800f974:	4630      	mov	r0, r6
 800f976:	69e1      	ldr	r1, [r4, #28]
 800f978:	47a8      	blx	r5
 800f97a:	1e05      	subs	r5, r0, #0
 800f97c:	dcb9      	bgt.n	800f8f2 <__sfvwrite_r+0x1be>
 800f97e:	e78c      	b.n	800f89a <__sfvwrite_r+0x166>
 800f980:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800f984:	2000      	movs	r0, #0
 800f986:	f108 0808 	add.w	r8, r8, #8
 800f98a:	e6f2      	b.n	800f772 <__sfvwrite_r+0x3e>
 800f98c:	f10b 0701 	add.w	r7, fp, #1
 800f990:	e6ff      	b.n	800f792 <__sfvwrite_r+0x5e>
 800f992:	4293      	cmp	r3, r2
 800f994:	dc08      	bgt.n	800f9a8 <__sfvwrite_r+0x274>
 800f996:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800f998:	69e1      	ldr	r1, [r4, #28]
 800f99a:	4652      	mov	r2, sl
 800f99c:	4630      	mov	r0, r6
 800f99e:	47a8      	blx	r5
 800f9a0:	1e05      	subs	r5, r0, #0
 800f9a2:	f73f af12 	bgt.w	800f7ca <__sfvwrite_r+0x96>
 800f9a6:	e778      	b.n	800f89a <__sfvwrite_r+0x166>
 800f9a8:	4651      	mov	r1, sl
 800f9aa:	9201      	str	r2, [sp, #4]
 800f9ac:	f000 f8ec 	bl	800fb88 <memmove>
 800f9b0:	9a01      	ldr	r2, [sp, #4]
 800f9b2:	68a3      	ldr	r3, [r4, #8]
 800f9b4:	1a9b      	subs	r3, r3, r2
 800f9b6:	60a3      	str	r3, [r4, #8]
 800f9b8:	6823      	ldr	r3, [r4, #0]
 800f9ba:	4413      	add	r3, r2
 800f9bc:	6023      	str	r3, [r4, #0]
 800f9be:	4615      	mov	r5, r2
 800f9c0:	e703      	b.n	800f7ca <__sfvwrite_r+0x96>
 800f9c2:	2001      	movs	r0, #1
 800f9c4:	e70a      	b.n	800f7dc <__sfvwrite_r+0xa8>
 800f9c6:	bf00      	nop
 800f9c8:	7ffffc00 	.word	0x7ffffc00

0800f9cc <_fwalk_sglue>:
 800f9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9d0:	4607      	mov	r7, r0
 800f9d2:	4688      	mov	r8, r1
 800f9d4:	4614      	mov	r4, r2
 800f9d6:	2600      	movs	r6, #0
 800f9d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f9dc:	f1b9 0901 	subs.w	r9, r9, #1
 800f9e0:	d505      	bpl.n	800f9ee <_fwalk_sglue+0x22>
 800f9e2:	6824      	ldr	r4, [r4, #0]
 800f9e4:	2c00      	cmp	r4, #0
 800f9e6:	d1f7      	bne.n	800f9d8 <_fwalk_sglue+0xc>
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ee:	89ab      	ldrh	r3, [r5, #12]
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d907      	bls.n	800fa04 <_fwalk_sglue+0x38>
 800f9f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	d003      	beq.n	800fa04 <_fwalk_sglue+0x38>
 800f9fc:	4629      	mov	r1, r5
 800f9fe:	4638      	mov	r0, r7
 800fa00:	47c0      	blx	r8
 800fa02:	4306      	orrs	r6, r0
 800fa04:	3568      	adds	r5, #104	@ 0x68
 800fa06:	e7e9      	b.n	800f9dc <_fwalk_sglue+0x10>

0800fa08 <__swsetup_r>:
 800fa08:	b538      	push	{r3, r4, r5, lr}
 800fa0a:	4b29      	ldr	r3, [pc, #164]	@ (800fab0 <__swsetup_r+0xa8>)
 800fa0c:	4605      	mov	r5, r0
 800fa0e:	6818      	ldr	r0, [r3, #0]
 800fa10:	460c      	mov	r4, r1
 800fa12:	b118      	cbz	r0, 800fa1c <__swsetup_r+0x14>
 800fa14:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800fa16:	b90b      	cbnz	r3, 800fa1c <__swsetup_r+0x14>
 800fa18:	f7ff fe74 	bl	800f704 <__sinit>
 800fa1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa20:	0719      	lsls	r1, r3, #28
 800fa22:	d422      	bmi.n	800fa6a <__swsetup_r+0x62>
 800fa24:	06da      	lsls	r2, r3, #27
 800fa26:	d407      	bmi.n	800fa38 <__swsetup_r+0x30>
 800fa28:	2209      	movs	r2, #9
 800fa2a:	602a      	str	r2, [r5, #0]
 800fa2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa30:	81a3      	strh	r3, [r4, #12]
 800fa32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa36:	e033      	b.n	800faa0 <__swsetup_r+0x98>
 800fa38:	0758      	lsls	r0, r3, #29
 800fa3a:	d512      	bpl.n	800fa62 <__swsetup_r+0x5a>
 800fa3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fa3e:	b141      	cbz	r1, 800fa52 <__swsetup_r+0x4a>
 800fa40:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800fa44:	4299      	cmp	r1, r3
 800fa46:	d002      	beq.n	800fa4e <__swsetup_r+0x46>
 800fa48:	4628      	mov	r0, r5
 800fa4a:	f000 ff95 	bl	8010978 <_free_r>
 800fa4e:	2300      	movs	r3, #0
 800fa50:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa52:	89a3      	ldrh	r3, [r4, #12]
 800fa54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa58:	81a3      	strh	r3, [r4, #12]
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	6063      	str	r3, [r4, #4]
 800fa5e:	6923      	ldr	r3, [r4, #16]
 800fa60:	6023      	str	r3, [r4, #0]
 800fa62:	89a3      	ldrh	r3, [r4, #12]
 800fa64:	f043 0308 	orr.w	r3, r3, #8
 800fa68:	81a3      	strh	r3, [r4, #12]
 800fa6a:	6923      	ldr	r3, [r4, #16]
 800fa6c:	b94b      	cbnz	r3, 800fa82 <__swsetup_r+0x7a>
 800fa6e:	89a3      	ldrh	r3, [r4, #12]
 800fa70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa78:	d003      	beq.n	800fa82 <__swsetup_r+0x7a>
 800fa7a:	4621      	mov	r1, r4
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	f002 fc33 	bl	80122e8 <__smakebuf_r>
 800fa82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa86:	f013 0201 	ands.w	r2, r3, #1
 800fa8a:	d00a      	beq.n	800faa2 <__swsetup_r+0x9a>
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	60a2      	str	r2, [r4, #8]
 800fa90:	6962      	ldr	r2, [r4, #20]
 800fa92:	4252      	negs	r2, r2
 800fa94:	61a2      	str	r2, [r4, #24]
 800fa96:	6922      	ldr	r2, [r4, #16]
 800fa98:	b942      	cbnz	r2, 800faac <__swsetup_r+0xa4>
 800fa9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa9e:	d1c5      	bne.n	800fa2c <__swsetup_r+0x24>
 800faa0:	bd38      	pop	{r3, r4, r5, pc}
 800faa2:	0799      	lsls	r1, r3, #30
 800faa4:	bf58      	it	pl
 800faa6:	6962      	ldrpl	r2, [r4, #20]
 800faa8:	60a2      	str	r2, [r4, #8]
 800faaa:	e7f4      	b.n	800fa96 <__swsetup_r+0x8e>
 800faac:	2000      	movs	r0, #0
 800faae:	e7f7      	b.n	800faa0 <__swsetup_r+0x98>
 800fab0:	24000188 	.word	0x24000188

0800fab4 <__fputwc>:
 800fab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fab8:	4680      	mov	r8, r0
 800faba:	460f      	mov	r7, r1
 800fabc:	4614      	mov	r4, r2
 800fabe:	f000 f899 	bl	800fbf4 <__locale_mb_cur_max>
 800fac2:	2801      	cmp	r0, #1
 800fac4:	4605      	mov	r5, r0
 800fac6:	d11b      	bne.n	800fb00 <__fputwc+0x4c>
 800fac8:	1e7b      	subs	r3, r7, #1
 800faca:	2bfe      	cmp	r3, #254	@ 0xfe
 800facc:	d818      	bhi.n	800fb00 <__fputwc+0x4c>
 800face:	f88d 7004 	strb.w	r7, [sp, #4]
 800fad2:	2600      	movs	r6, #0
 800fad4:	f10d 0904 	add.w	r9, sp, #4
 800fad8:	42ae      	cmp	r6, r5
 800fada:	d021      	beq.n	800fb20 <__fputwc+0x6c>
 800fadc:	68a3      	ldr	r3, [r4, #8]
 800fade:	f816 1009 	ldrb.w	r1, [r6, r9]
 800fae2:	3b01      	subs	r3, #1
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	60a3      	str	r3, [r4, #8]
 800fae8:	da04      	bge.n	800faf4 <__fputwc+0x40>
 800faea:	69a2      	ldr	r2, [r4, #24]
 800faec:	4293      	cmp	r3, r2
 800faee:	db1b      	blt.n	800fb28 <__fputwc+0x74>
 800faf0:	290a      	cmp	r1, #10
 800faf2:	d019      	beq.n	800fb28 <__fputwc+0x74>
 800faf4:	6823      	ldr	r3, [r4, #0]
 800faf6:	1c5a      	adds	r2, r3, #1
 800faf8:	6022      	str	r2, [r4, #0]
 800fafa:	7019      	strb	r1, [r3, #0]
 800fafc:	3601      	adds	r6, #1
 800fafe:	e7eb      	b.n	800fad8 <__fputwc+0x24>
 800fb00:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 800fb04:	463a      	mov	r2, r7
 800fb06:	a901      	add	r1, sp, #4
 800fb08:	4640      	mov	r0, r8
 800fb0a:	f000 f8b9 	bl	800fc80 <_wcrtomb_r>
 800fb0e:	1c43      	adds	r3, r0, #1
 800fb10:	4605      	mov	r5, r0
 800fb12:	d1de      	bne.n	800fad2 <__fputwc+0x1e>
 800fb14:	89a3      	ldrh	r3, [r4, #12]
 800fb16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb1a:	81a3      	strh	r3, [r4, #12]
 800fb1c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fb20:	4638      	mov	r0, r7
 800fb22:	b003      	add	sp, #12
 800fb24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb28:	4622      	mov	r2, r4
 800fb2a:	4640      	mov	r0, r8
 800fb2c:	f003 f9a6 	bl	8012e7c <__swbuf_r>
 800fb30:	3001      	adds	r0, #1
 800fb32:	d1e3      	bne.n	800fafc <__fputwc+0x48>
 800fb34:	e7f2      	b.n	800fb1c <__fputwc+0x68>

0800fb36 <_fputwc_r>:
 800fb36:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800fb38:	07db      	lsls	r3, r3, #31
 800fb3a:	b570      	push	{r4, r5, r6, lr}
 800fb3c:	4605      	mov	r5, r0
 800fb3e:	460e      	mov	r6, r1
 800fb40:	4614      	mov	r4, r2
 800fb42:	d405      	bmi.n	800fb50 <_fputwc_r+0x1a>
 800fb44:	8993      	ldrh	r3, [r2, #12]
 800fb46:	0598      	lsls	r0, r3, #22
 800fb48:	d402      	bmi.n	800fb50 <_fputwc_r+0x1a>
 800fb4a:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800fb4c:	f000 f888 	bl	800fc60 <__retarget_lock_acquire_recursive>
 800fb50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb54:	0499      	lsls	r1, r3, #18
 800fb56:	d406      	bmi.n	800fb66 <_fputwc_r+0x30>
 800fb58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fb5c:	81a3      	strh	r3, [r4, #12]
 800fb5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fb60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fb64:	6663      	str	r3, [r4, #100]	@ 0x64
 800fb66:	4622      	mov	r2, r4
 800fb68:	4628      	mov	r0, r5
 800fb6a:	4631      	mov	r1, r6
 800fb6c:	f7ff ffa2 	bl	800fab4 <__fputwc>
 800fb70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fb72:	07da      	lsls	r2, r3, #31
 800fb74:	4605      	mov	r5, r0
 800fb76:	d405      	bmi.n	800fb84 <_fputwc_r+0x4e>
 800fb78:	89a3      	ldrh	r3, [r4, #12]
 800fb7a:	059b      	lsls	r3, r3, #22
 800fb7c:	d402      	bmi.n	800fb84 <_fputwc_r+0x4e>
 800fb7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb80:	f000 f86f 	bl	800fc62 <__retarget_lock_release_recursive>
 800fb84:	4628      	mov	r0, r5
 800fb86:	bd70      	pop	{r4, r5, r6, pc}

0800fb88 <memmove>:
 800fb88:	4288      	cmp	r0, r1
 800fb8a:	b510      	push	{r4, lr}
 800fb8c:	eb01 0402 	add.w	r4, r1, r2
 800fb90:	d902      	bls.n	800fb98 <memmove+0x10>
 800fb92:	4284      	cmp	r4, r0
 800fb94:	4623      	mov	r3, r4
 800fb96:	d807      	bhi.n	800fba8 <memmove+0x20>
 800fb98:	1e43      	subs	r3, r0, #1
 800fb9a:	42a1      	cmp	r1, r4
 800fb9c:	d008      	beq.n	800fbb0 <memmove+0x28>
 800fb9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fba6:	e7f8      	b.n	800fb9a <memmove+0x12>
 800fba8:	4402      	add	r2, r0
 800fbaa:	4601      	mov	r1, r0
 800fbac:	428a      	cmp	r2, r1
 800fbae:	d100      	bne.n	800fbb2 <memmove+0x2a>
 800fbb0:	bd10      	pop	{r4, pc}
 800fbb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fbb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fbba:	e7f7      	b.n	800fbac <memmove+0x24>

0800fbbc <memset>:
 800fbbc:	4402      	add	r2, r0
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d100      	bne.n	800fbc6 <memset+0xa>
 800fbc4:	4770      	bx	lr
 800fbc6:	f803 1b01 	strb.w	r1, [r3], #1
 800fbca:	e7f9      	b.n	800fbc0 <memset+0x4>

0800fbcc <strncpy>:
 800fbcc:	b510      	push	{r4, lr}
 800fbce:	3901      	subs	r1, #1
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	b132      	cbz	r2, 800fbe2 <strncpy+0x16>
 800fbd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fbd8:	f803 4b01 	strb.w	r4, [r3], #1
 800fbdc:	3a01      	subs	r2, #1
 800fbde:	2c00      	cmp	r4, #0
 800fbe0:	d1f7      	bne.n	800fbd2 <strncpy+0x6>
 800fbe2:	441a      	add	r2, r3
 800fbe4:	2100      	movs	r1, #0
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d100      	bne.n	800fbec <strncpy+0x20>
 800fbea:	bd10      	pop	{r4, pc}
 800fbec:	f803 1b01 	strb.w	r1, [r3], #1
 800fbf0:	e7f9      	b.n	800fbe6 <strncpy+0x1a>
	...

0800fbf4 <__locale_mb_cur_max>:
 800fbf4:	4b01      	ldr	r3, [pc, #4]	@ (800fbfc <__locale_mb_cur_max+0x8>)
 800fbf6:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800fbfa:	4770      	bx	lr
 800fbfc:	2400001c 	.word	0x2400001c

0800fc00 <_localeconv_r>:
 800fc00:	4800      	ldr	r0, [pc, #0]	@ (800fc04 <_localeconv_r+0x4>)
 800fc02:	4770      	bx	lr
 800fc04:	2400010c 	.word	0x2400010c

0800fc08 <__errno>:
 800fc08:	4b01      	ldr	r3, [pc, #4]	@ (800fc10 <__errno+0x8>)
 800fc0a:	6818      	ldr	r0, [r3, #0]
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop
 800fc10:	24000188 	.word	0x24000188

0800fc14 <__libc_init_array>:
 800fc14:	b570      	push	{r4, r5, r6, lr}
 800fc16:	4d0d      	ldr	r5, [pc, #52]	@ (800fc4c <__libc_init_array+0x38>)
 800fc18:	4c0d      	ldr	r4, [pc, #52]	@ (800fc50 <__libc_init_array+0x3c>)
 800fc1a:	1b64      	subs	r4, r4, r5
 800fc1c:	10a4      	asrs	r4, r4, #2
 800fc1e:	2600      	movs	r6, #0
 800fc20:	42a6      	cmp	r6, r4
 800fc22:	d109      	bne.n	800fc38 <__libc_init_array+0x24>
 800fc24:	4d0b      	ldr	r5, [pc, #44]	@ (800fc54 <__libc_init_array+0x40>)
 800fc26:	4c0c      	ldr	r4, [pc, #48]	@ (800fc58 <__libc_init_array+0x44>)
 800fc28:	f004 fe88 	bl	801493c <_init>
 800fc2c:	1b64      	subs	r4, r4, r5
 800fc2e:	10a4      	asrs	r4, r4, #2
 800fc30:	2600      	movs	r6, #0
 800fc32:	42a6      	cmp	r6, r4
 800fc34:	d105      	bne.n	800fc42 <__libc_init_array+0x2e>
 800fc36:	bd70      	pop	{r4, r5, r6, pc}
 800fc38:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc3c:	4798      	blx	r3
 800fc3e:	3601      	adds	r6, #1
 800fc40:	e7ee      	b.n	800fc20 <__libc_init_array+0xc>
 800fc42:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc46:	4798      	blx	r3
 800fc48:	3601      	adds	r6, #1
 800fc4a:	e7f2      	b.n	800fc32 <__libc_init_array+0x1e>
 800fc4c:	080171f8 	.word	0x080171f8
 800fc50:	080171f8 	.word	0x080171f8
 800fc54:	080171f8 	.word	0x080171f8
 800fc58:	08017200 	.word	0x08017200

0800fc5c <__retarget_lock_init_recursive>:
 800fc5c:	4770      	bx	lr

0800fc5e <__retarget_lock_close_recursive>:
 800fc5e:	4770      	bx	lr

0800fc60 <__retarget_lock_acquire_recursive>:
 800fc60:	4770      	bx	lr

0800fc62 <__retarget_lock_release_recursive>:
 800fc62:	4770      	bx	lr

0800fc64 <memcpy>:
 800fc64:	440a      	add	r2, r1
 800fc66:	4291      	cmp	r1, r2
 800fc68:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800fc6c:	d100      	bne.n	800fc70 <memcpy+0xc>
 800fc6e:	4770      	bx	lr
 800fc70:	b510      	push	{r4, lr}
 800fc72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc7a:	4291      	cmp	r1, r2
 800fc7c:	d1f9      	bne.n	800fc72 <memcpy+0xe>
 800fc7e:	bd10      	pop	{r4, pc}

0800fc80 <_wcrtomb_r>:
 800fc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc82:	4c09      	ldr	r4, [pc, #36]	@ (800fca8 <_wcrtomb_r+0x28>)
 800fc84:	b085      	sub	sp, #20
 800fc86:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800fc8a:	4605      	mov	r5, r0
 800fc8c:	461e      	mov	r6, r3
 800fc8e:	b909      	cbnz	r1, 800fc94 <_wcrtomb_r+0x14>
 800fc90:	460a      	mov	r2, r1
 800fc92:	a901      	add	r1, sp, #4
 800fc94:	47b8      	blx	r7
 800fc96:	1c43      	adds	r3, r0, #1
 800fc98:	bf01      	itttt	eq
 800fc9a:	2300      	moveq	r3, #0
 800fc9c:	6033      	streq	r3, [r6, #0]
 800fc9e:	238a      	moveq	r3, #138	@ 0x8a
 800fca0:	602b      	streq	r3, [r5, #0]
 800fca2:	b005      	add	sp, #20
 800fca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fca6:	bf00      	nop
 800fca8:	2400001c 	.word	0x2400001c
 800fcac:	00000000 	.word	0x00000000

0800fcb0 <frexp>:
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	ee10 1a90 	vmov	r1, s1
 800fcb6:	6002      	str	r2, [r0, #0]
 800fcb8:	4a17      	ldr	r2, [pc, #92]	@ (800fd18 <frexp+0x68>)
 800fcba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d823      	bhi.n	800fd0a <frexp+0x5a>
 800fcc2:	ee10 2a10 	vmov	r2, s0
 800fcc6:	431a      	orrs	r2, r3
 800fcc8:	d01f      	beq.n	800fd0a <frexp+0x5a>
 800fcca:	4a14      	ldr	r2, [pc, #80]	@ (800fd1c <frexp+0x6c>)
 800fccc:	400a      	ands	r2, r1
 800fcce:	b952      	cbnz	r2, 800fce6 <frexp+0x36>
 800fcd0:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 800fd10 <frexp+0x60>
 800fcd4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fcd8:	ee10 1a90 	vmov	r1, s1
 800fcdc:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800fce0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fce4:	6002      	str	r2, [r0, #0]
 800fce6:	6802      	ldr	r2, [r0, #0]
 800fce8:	151b      	asrs	r3, r3, #20
 800fcea:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800fcee:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800fcf2:	441a      	add	r2, r3
 800fcf4:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800fcf8:	6002      	str	r2, [r0, #0]
 800fcfa:	ec53 2b10 	vmov	r2, r3, d0
 800fcfe:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
 800fd02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fd06:	ec43 2b10 	vmov	d0, r2, r3
 800fd0a:	4770      	bx	lr
 800fd0c:	f3af 8000 	nop.w
 800fd10:	00000000 	.word	0x00000000
 800fd14:	43500000 	.word	0x43500000
 800fd18:	7fefffff 	.word	0x7fefffff
 800fd1c:	7ff00000 	.word	0x7ff00000

0800fd20 <register_fini>:
 800fd20:	4b02      	ldr	r3, [pc, #8]	@ (800fd2c <register_fini+0xc>)
 800fd22:	b113      	cbz	r3, 800fd2a <register_fini+0xa>
 800fd24:	4802      	ldr	r0, [pc, #8]	@ (800fd30 <register_fini+0x10>)
 800fd26:	f000 b805 	b.w	800fd34 <atexit>
 800fd2a:	4770      	bx	lr
 800fd2c:	00000000 	.word	0x00000000
 800fd30:	08013019 	.word	0x08013019

0800fd34 <atexit>:
 800fd34:	2300      	movs	r3, #0
 800fd36:	4601      	mov	r1, r0
 800fd38:	461a      	mov	r2, r3
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f003 b980 	b.w	8013040 <__register_exitproc>

0800fd40 <quorem>:
 800fd40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd44:	6903      	ldr	r3, [r0, #16]
 800fd46:	690c      	ldr	r4, [r1, #16]
 800fd48:	42a3      	cmp	r3, r4
 800fd4a:	4607      	mov	r7, r0
 800fd4c:	db7e      	blt.n	800fe4c <quorem+0x10c>
 800fd4e:	3c01      	subs	r4, #1
 800fd50:	f101 0814 	add.w	r8, r1, #20
 800fd54:	00a3      	lsls	r3, r4, #2
 800fd56:	f100 0514 	add.w	r5, r0, #20
 800fd5a:	9300      	str	r3, [sp, #0]
 800fd5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd60:	9301      	str	r3, [sp, #4]
 800fd62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd72:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd76:	d32e      	bcc.n	800fdd6 <quorem+0x96>
 800fd78:	f04f 0a00 	mov.w	sl, #0
 800fd7c:	46c4      	mov	ip, r8
 800fd7e:	46ae      	mov	lr, r5
 800fd80:	46d3      	mov	fp, sl
 800fd82:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fd86:	b298      	uxth	r0, r3
 800fd88:	fb06 a000 	mla	r0, r6, r0, sl
 800fd8c:	0c02      	lsrs	r2, r0, #16
 800fd8e:	0c1b      	lsrs	r3, r3, #16
 800fd90:	fb06 2303 	mla	r3, r6, r3, r2
 800fd94:	f8de 2000 	ldr.w	r2, [lr]
 800fd98:	b280      	uxth	r0, r0
 800fd9a:	b292      	uxth	r2, r2
 800fd9c:	1a12      	subs	r2, r2, r0
 800fd9e:	445a      	add	r2, fp
 800fda0:	f8de 0000 	ldr.w	r0, [lr]
 800fda4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fdae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fdb2:	b292      	uxth	r2, r2
 800fdb4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fdb8:	45e1      	cmp	r9, ip
 800fdba:	f84e 2b04 	str.w	r2, [lr], #4
 800fdbe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fdc2:	d2de      	bcs.n	800fd82 <quorem+0x42>
 800fdc4:	9b00      	ldr	r3, [sp, #0]
 800fdc6:	58eb      	ldr	r3, [r5, r3]
 800fdc8:	b92b      	cbnz	r3, 800fdd6 <quorem+0x96>
 800fdca:	9b01      	ldr	r3, [sp, #4]
 800fdcc:	3b04      	subs	r3, #4
 800fdce:	429d      	cmp	r5, r3
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	d32f      	bcc.n	800fe34 <quorem+0xf4>
 800fdd4:	613c      	str	r4, [r7, #16]
 800fdd6:	4638      	mov	r0, r7
 800fdd8:	f002 fcfa 	bl	80127d0 <__mcmp>
 800fddc:	2800      	cmp	r0, #0
 800fdde:	db25      	blt.n	800fe2c <quorem+0xec>
 800fde0:	4629      	mov	r1, r5
 800fde2:	2000      	movs	r0, #0
 800fde4:	f858 2b04 	ldr.w	r2, [r8], #4
 800fde8:	f8d1 c000 	ldr.w	ip, [r1]
 800fdec:	fa1f fe82 	uxth.w	lr, r2
 800fdf0:	fa1f f38c 	uxth.w	r3, ip
 800fdf4:	eba3 030e 	sub.w	r3, r3, lr
 800fdf8:	4403      	add	r3, r0
 800fdfa:	0c12      	lsrs	r2, r2, #16
 800fdfc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fe00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe0a:	45c1      	cmp	r9, r8
 800fe0c:	f841 3b04 	str.w	r3, [r1], #4
 800fe10:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe14:	d2e6      	bcs.n	800fde4 <quorem+0xa4>
 800fe16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe1e:	b922      	cbnz	r2, 800fe2a <quorem+0xea>
 800fe20:	3b04      	subs	r3, #4
 800fe22:	429d      	cmp	r5, r3
 800fe24:	461a      	mov	r2, r3
 800fe26:	d30b      	bcc.n	800fe40 <quorem+0x100>
 800fe28:	613c      	str	r4, [r7, #16]
 800fe2a:	3601      	adds	r6, #1
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	b003      	add	sp, #12
 800fe30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe34:	6812      	ldr	r2, [r2, #0]
 800fe36:	3b04      	subs	r3, #4
 800fe38:	2a00      	cmp	r2, #0
 800fe3a:	d1cb      	bne.n	800fdd4 <quorem+0x94>
 800fe3c:	3c01      	subs	r4, #1
 800fe3e:	e7c6      	b.n	800fdce <quorem+0x8e>
 800fe40:	6812      	ldr	r2, [r2, #0]
 800fe42:	3b04      	subs	r3, #4
 800fe44:	2a00      	cmp	r2, #0
 800fe46:	d1ef      	bne.n	800fe28 <quorem+0xe8>
 800fe48:	3c01      	subs	r4, #1
 800fe4a:	e7ea      	b.n	800fe22 <quorem+0xe2>
 800fe4c:	2000      	movs	r0, #0
 800fe4e:	e7ee      	b.n	800fe2e <quorem+0xee>

0800fe50 <_dtoa_r>:
 800fe50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe54:	ed2d 8b02 	vpush	{d8}
 800fe58:	b091      	sub	sp, #68	@ 0x44
 800fe5a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fe5e:	9107      	str	r1, [sp, #28]
 800fe60:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800fe62:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fe64:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe66:	ec55 4b10 	vmov	r4, r5, d0
 800fe6a:	4681      	mov	r9, r0
 800fe6c:	930d      	str	r3, [sp, #52]	@ 0x34
 800fe6e:	b149      	cbz	r1, 800fe84 <_dtoa_r+0x34>
 800fe70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fe72:	604a      	str	r2, [r1, #4]
 800fe74:	2301      	movs	r3, #1
 800fe76:	4093      	lsls	r3, r2
 800fe78:	608b      	str	r3, [r1, #8]
 800fe7a:	f002 faa2 	bl	80123c2 <_Bfree>
 800fe7e:	2300      	movs	r3, #0
 800fe80:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 800fe84:	1e2b      	subs	r3, r5, #0
 800fe86:	bfbb      	ittet	lt
 800fe88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fe8c:	9303      	strlt	r3, [sp, #12]
 800fe8e:	2300      	movge	r3, #0
 800fe90:	2201      	movlt	r2, #1
 800fe92:	bfac      	ite	ge
 800fe94:	6033      	strge	r3, [r6, #0]
 800fe96:	6032      	strlt	r2, [r6, #0]
 800fe98:	4b91      	ldr	r3, [pc, #580]	@ (80100e0 <_dtoa_r+0x290>)
 800fe9a:	9e03      	ldr	r6, [sp, #12]
 800fe9c:	43b3      	bics	r3, r6
 800fe9e:	d114      	bne.n	800feca <_dtoa_r+0x7a>
 800fea0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fea2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fea6:	6013      	str	r3, [r2, #0]
 800fea8:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800feac:	4323      	orrs	r3, r4
 800feae:	f000 84df 	beq.w	8010870 <_dtoa_r+0xa20>
 800feb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800feb4:	4f8b      	ldr	r7, [pc, #556]	@ (80100e4 <_dtoa_r+0x294>)
 800feb6:	b113      	cbz	r3, 800febe <_dtoa_r+0x6e>
 800feb8:	1cfb      	adds	r3, r7, #3
 800feba:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800febc:	6013      	str	r3, [r2, #0]
 800febe:	4638      	mov	r0, r7
 800fec0:	b011      	add	sp, #68	@ 0x44
 800fec2:	ecbd 8b02 	vpop	{d8}
 800fec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feca:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fece:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed6:	d109      	bne.n	800feec <_dtoa_r+0x9c>
 800fed8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800feda:	2301      	movs	r3, #1
 800fedc:	6013      	str	r3, [r2, #0]
 800fede:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fee0:	b113      	cbz	r3, 800fee8 <_dtoa_r+0x98>
 800fee2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fee4:	4b80      	ldr	r3, [pc, #512]	@ (80100e8 <_dtoa_r+0x298>)
 800fee6:	6013      	str	r3, [r2, #0]
 800fee8:	4f80      	ldr	r7, [pc, #512]	@ (80100ec <_dtoa_r+0x29c>)
 800feea:	e7e8      	b.n	800febe <_dtoa_r+0x6e>
 800feec:	aa0e      	add	r2, sp, #56	@ 0x38
 800feee:	a90f      	add	r1, sp, #60	@ 0x3c
 800fef0:	4648      	mov	r0, r9
 800fef2:	eeb0 0b48 	vmov.f64	d0, d8
 800fef6:	f002 fd1b 	bl	8012930 <__d2b>
 800fefa:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fefe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff00:	9001      	str	r0, [sp, #4]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d045      	beq.n	800ff92 <_dtoa_r+0x142>
 800ff06:	eeb0 7b48 	vmov.f64	d7, d8
 800ff0a:	ee18 1a90 	vmov	r1, s17
 800ff0e:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ff12:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ff16:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ff1a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ff1e:	2500      	movs	r5, #0
 800ff20:	ee07 1a90 	vmov	s15, r1
 800ff24:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ff28:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 80100c8 <_dtoa_r+0x278>
 800ff2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ff30:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 80100d0 <_dtoa_r+0x280>
 800ff34:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ff38:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 80100d8 <_dtoa_r+0x288>
 800ff3c:	ee07 3a90 	vmov	s15, r3
 800ff40:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ff44:	eeb0 7b46 	vmov.f64	d7, d6
 800ff48:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ff4c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ff50:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ff54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff58:	ee16 8a90 	vmov	r8, s13
 800ff5c:	d508      	bpl.n	800ff70 <_dtoa_r+0x120>
 800ff5e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ff62:	eeb4 6b47 	vcmp.f64	d6, d7
 800ff66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff6a:	bf18      	it	ne
 800ff6c:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800ff70:	f1b8 0f16 	cmp.w	r8, #22
 800ff74:	d82b      	bhi.n	800ffce <_dtoa_r+0x17e>
 800ff76:	495e      	ldr	r1, [pc, #376]	@ (80100f0 <_dtoa_r+0x2a0>)
 800ff78:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ff7c:	ed91 7b00 	vldr	d7, [r1]
 800ff80:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ff84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff88:	d501      	bpl.n	800ff8e <_dtoa_r+0x13e>
 800ff8a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ff8e:	2100      	movs	r1, #0
 800ff90:	e01e      	b.n	800ffd0 <_dtoa_r+0x180>
 800ff92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff94:	4413      	add	r3, r2
 800ff96:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ff9a:	2920      	cmp	r1, #32
 800ff9c:	bfc1      	itttt	gt
 800ff9e:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ffa2:	408e      	lslgt	r6, r1
 800ffa4:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ffa8:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ffac:	bfd6      	itet	le
 800ffae:	f1c1 0120 	rsble	r1, r1, #32
 800ffb2:	4331      	orrgt	r1, r6
 800ffb4:	fa04 f101 	lslle.w	r1, r4, r1
 800ffb8:	ee07 1a90 	vmov	s15, r1
 800ffbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ffc0:	3b01      	subs	r3, #1
 800ffc2:	ee17 1a90 	vmov	r1, s15
 800ffc6:	2501      	movs	r5, #1
 800ffc8:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ffcc:	e7a8      	b.n	800ff20 <_dtoa_r+0xd0>
 800ffce:	2101      	movs	r1, #1
 800ffd0:	1ad2      	subs	r2, r2, r3
 800ffd2:	1e53      	subs	r3, r2, #1
 800ffd4:	9306      	str	r3, [sp, #24]
 800ffd6:	bf45      	ittet	mi
 800ffd8:	f1c2 0301 	rsbmi	r3, r2, #1
 800ffdc:	9305      	strmi	r3, [sp, #20]
 800ffde:	2300      	movpl	r3, #0
 800ffe0:	2300      	movmi	r3, #0
 800ffe2:	bf4c      	ite	mi
 800ffe4:	9306      	strmi	r3, [sp, #24]
 800ffe6:	9305      	strpl	r3, [sp, #20]
 800ffe8:	f1b8 0f00 	cmp.w	r8, #0
 800ffec:	910c      	str	r1, [sp, #48]	@ 0x30
 800ffee:	db18      	blt.n	8010022 <_dtoa_r+0x1d2>
 800fff0:	9b06      	ldr	r3, [sp, #24]
 800fff2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fff6:	4443      	add	r3, r8
 800fff8:	9306      	str	r3, [sp, #24]
 800fffa:	2300      	movs	r3, #0
 800fffc:	9a07      	ldr	r2, [sp, #28]
 800fffe:	2a09      	cmp	r2, #9
 8010000:	d84a      	bhi.n	8010098 <_dtoa_r+0x248>
 8010002:	2a05      	cmp	r2, #5
 8010004:	bfc4      	itt	gt
 8010006:	3a04      	subgt	r2, #4
 8010008:	9207      	strgt	r2, [sp, #28]
 801000a:	9a07      	ldr	r2, [sp, #28]
 801000c:	f1a2 0202 	sub.w	r2, r2, #2
 8010010:	bfcc      	ite	gt
 8010012:	2400      	movgt	r4, #0
 8010014:	2401      	movle	r4, #1
 8010016:	2a03      	cmp	r2, #3
 8010018:	d849      	bhi.n	80100ae <_dtoa_r+0x25e>
 801001a:	e8df f002 	tbb	[pc, r2]
 801001e:	2f0b      	.short	0x2f0b
 8010020:	3b2d      	.short	0x3b2d
 8010022:	9b05      	ldr	r3, [sp, #20]
 8010024:	2200      	movs	r2, #0
 8010026:	eba3 0308 	sub.w	r3, r3, r8
 801002a:	9305      	str	r3, [sp, #20]
 801002c:	920a      	str	r2, [sp, #40]	@ 0x28
 801002e:	f1c8 0300 	rsb	r3, r8, #0
 8010032:	e7e3      	b.n	800fffc <_dtoa_r+0x1ac>
 8010034:	2200      	movs	r2, #0
 8010036:	9208      	str	r2, [sp, #32]
 8010038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801003a:	2a00      	cmp	r2, #0
 801003c:	dc3a      	bgt.n	80100b4 <_dtoa_r+0x264>
 801003e:	f04f 0b01 	mov.w	fp, #1
 8010042:	46da      	mov	sl, fp
 8010044:	465a      	mov	r2, fp
 8010046:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801004a:	2100      	movs	r1, #0
 801004c:	2004      	movs	r0, #4
 801004e:	f100 0614 	add.w	r6, r0, #20
 8010052:	4296      	cmp	r6, r2
 8010054:	d933      	bls.n	80100be <_dtoa_r+0x26e>
 8010056:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 801005a:	4648      	mov	r0, r9
 801005c:	9304      	str	r3, [sp, #16]
 801005e:	f002 f98b 	bl	8012378 <_Balloc>
 8010062:	9b04      	ldr	r3, [sp, #16]
 8010064:	4607      	mov	r7, r0
 8010066:	2800      	cmp	r0, #0
 8010068:	d148      	bne.n	80100fc <_dtoa_r+0x2ac>
 801006a:	4b22      	ldr	r3, [pc, #136]	@ (80100f4 <_dtoa_r+0x2a4>)
 801006c:	4602      	mov	r2, r0
 801006e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010072:	4821      	ldr	r0, [pc, #132]	@ (80100f8 <_dtoa_r+0x2a8>)
 8010074:	f003 f824 	bl	80130c0 <__assert_func>
 8010078:	2201      	movs	r2, #1
 801007a:	e7dc      	b.n	8010036 <_dtoa_r+0x1e6>
 801007c:	2200      	movs	r2, #0
 801007e:	9208      	str	r2, [sp, #32]
 8010080:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010082:	eb08 0b02 	add.w	fp, r8, r2
 8010086:	f10b 0a01 	add.w	sl, fp, #1
 801008a:	4652      	mov	r2, sl
 801008c:	2a01      	cmp	r2, #1
 801008e:	bfb8      	it	lt
 8010090:	2201      	movlt	r2, #1
 8010092:	e7da      	b.n	801004a <_dtoa_r+0x1fa>
 8010094:	2201      	movs	r2, #1
 8010096:	e7f2      	b.n	801007e <_dtoa_r+0x22e>
 8010098:	2401      	movs	r4, #1
 801009a:	2200      	movs	r2, #0
 801009c:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80100a0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80100a4:	2100      	movs	r1, #0
 80100a6:	46da      	mov	sl, fp
 80100a8:	2212      	movs	r2, #18
 80100aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80100ac:	e7cd      	b.n	801004a <_dtoa_r+0x1fa>
 80100ae:	2201      	movs	r2, #1
 80100b0:	9208      	str	r2, [sp, #32]
 80100b2:	e7f5      	b.n	80100a0 <_dtoa_r+0x250>
 80100b4:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80100b8:	46da      	mov	sl, fp
 80100ba:	465a      	mov	r2, fp
 80100bc:	e7c5      	b.n	801004a <_dtoa_r+0x1fa>
 80100be:	3101      	adds	r1, #1
 80100c0:	0040      	lsls	r0, r0, #1
 80100c2:	e7c4      	b.n	801004e <_dtoa_r+0x1fe>
 80100c4:	f3af 8000 	nop.w
 80100c8:	636f4361 	.word	0x636f4361
 80100cc:	3fd287a7 	.word	0x3fd287a7
 80100d0:	8b60c8b3 	.word	0x8b60c8b3
 80100d4:	3fc68a28 	.word	0x3fc68a28
 80100d8:	509f79fb 	.word	0x509f79fb
 80100dc:	3fd34413 	.word	0x3fd34413
 80100e0:	7ff00000 	.word	0x7ff00000
 80100e4:	08014c96 	.word	0x08014c96
 80100e8:	08014c9b 	.word	0x08014c9b
 80100ec:	08014c9a 	.word	0x08014c9a
 80100f0:	08014dc8 	.word	0x08014dc8
 80100f4:	08014c9c 	.word	0x08014c9c
 80100f8:	08014cad 	.word	0x08014cad
 80100fc:	f1ba 0f0e 	cmp.w	sl, #14
 8010100:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 8010104:	d86f      	bhi.n	80101e6 <_dtoa_r+0x396>
 8010106:	2c00      	cmp	r4, #0
 8010108:	d06d      	beq.n	80101e6 <_dtoa_r+0x396>
 801010a:	f1b8 0f00 	cmp.w	r8, #0
 801010e:	f340 80c2 	ble.w	8010296 <_dtoa_r+0x446>
 8010112:	4aca      	ldr	r2, [pc, #808]	@ (801043c <_dtoa_r+0x5ec>)
 8010114:	f008 010f 	and.w	r1, r8, #15
 8010118:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801011c:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010120:	ed92 7b00 	vldr	d7, [r2]
 8010124:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010128:	f000 80a9 	beq.w	801027e <_dtoa_r+0x42e>
 801012c:	4ac4      	ldr	r2, [pc, #784]	@ (8010440 <_dtoa_r+0x5f0>)
 801012e:	ed92 6b08 	vldr	d6, [r2, #32]
 8010132:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010136:	ed8d 6b02 	vstr	d6, [sp, #8]
 801013a:	f001 010f 	and.w	r1, r1, #15
 801013e:	2203      	movs	r2, #3
 8010140:	48bf      	ldr	r0, [pc, #764]	@ (8010440 <_dtoa_r+0x5f0>)
 8010142:	2900      	cmp	r1, #0
 8010144:	f040 809d 	bne.w	8010282 <_dtoa_r+0x432>
 8010148:	ed9d 6b02 	vldr	d6, [sp, #8]
 801014c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010150:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010154:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010156:	ed9d 7b02 	vldr	d7, [sp, #8]
 801015a:	2900      	cmp	r1, #0
 801015c:	f000 80c1 	beq.w	80102e2 <_dtoa_r+0x492>
 8010160:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010164:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016c:	f140 80b9 	bpl.w	80102e2 <_dtoa_r+0x492>
 8010170:	f1ba 0f00 	cmp.w	sl, #0
 8010174:	f000 80b5 	beq.w	80102e2 <_dtoa_r+0x492>
 8010178:	f1bb 0f00 	cmp.w	fp, #0
 801017c:	dd31      	ble.n	80101e2 <_dtoa_r+0x392>
 801017e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010182:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010186:	ed8d 7b02 	vstr	d7, [sp, #8]
 801018a:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 801018e:	9104      	str	r1, [sp, #16]
 8010190:	3201      	adds	r2, #1
 8010192:	465c      	mov	r4, fp
 8010194:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010198:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801019c:	ee07 2a90 	vmov	s15, r2
 80101a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80101a4:	eea7 5b06 	vfma.f64	d5, d7, d6
 80101a8:	ee15 2a90 	vmov	r2, s11
 80101ac:	ec51 0b15 	vmov	r0, r1, d5
 80101b0:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80101b4:	2c00      	cmp	r4, #0
 80101b6:	f040 8098 	bne.w	80102ea <_dtoa_r+0x49a>
 80101ba:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80101be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80101c2:	ec41 0b17 	vmov	d7, r0, r1
 80101c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80101ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ce:	f300 8260 	bgt.w	8010692 <_dtoa_r+0x842>
 80101d2:	eeb1 7b47 	vneg.f64	d7, d7
 80101d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80101da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101de:	f100 80f5 	bmi.w	80103cc <_dtoa_r+0x57c>
 80101e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80101e6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80101e8:	2a00      	cmp	r2, #0
 80101ea:	f2c0 812b 	blt.w	8010444 <_dtoa_r+0x5f4>
 80101ee:	f1b8 0f0e 	cmp.w	r8, #14
 80101f2:	f300 8127 	bgt.w	8010444 <_dtoa_r+0x5f4>
 80101f6:	4b91      	ldr	r3, [pc, #580]	@ (801043c <_dtoa_r+0x5ec>)
 80101f8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80101fc:	ed93 6b00 	vldr	d6, [r3]
 8010200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010202:	2b00      	cmp	r3, #0
 8010204:	da03      	bge.n	801020e <_dtoa_r+0x3be>
 8010206:	f1ba 0f00 	cmp.w	sl, #0
 801020a:	f340 80d2 	ble.w	80103b2 <_dtoa_r+0x562>
 801020e:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010212:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010216:	463e      	mov	r6, r7
 8010218:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801021c:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010220:	ee15 3a10 	vmov	r3, s10
 8010224:	3330      	adds	r3, #48	@ 0x30
 8010226:	f806 3b01 	strb.w	r3, [r6], #1
 801022a:	1bf3      	subs	r3, r6, r7
 801022c:	459a      	cmp	sl, r3
 801022e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010232:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010236:	f040 80f8 	bne.w	801042a <_dtoa_r+0x5da>
 801023a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801023e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010246:	f300 80dd 	bgt.w	8010404 <_dtoa_r+0x5b4>
 801024a:	eeb4 7b46 	vcmp.f64	d7, d6
 801024e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010252:	d104      	bne.n	801025e <_dtoa_r+0x40e>
 8010254:	ee15 3a10 	vmov	r3, s10
 8010258:	07db      	lsls	r3, r3, #31
 801025a:	f100 80d3 	bmi.w	8010404 <_dtoa_r+0x5b4>
 801025e:	9901      	ldr	r1, [sp, #4]
 8010260:	4648      	mov	r0, r9
 8010262:	f002 f8ae 	bl	80123c2 <_Bfree>
 8010266:	2300      	movs	r3, #0
 8010268:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801026a:	7033      	strb	r3, [r6, #0]
 801026c:	f108 0301 	add.w	r3, r8, #1
 8010270:	6013      	str	r3, [r2, #0]
 8010272:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010274:	2b00      	cmp	r3, #0
 8010276:	f43f ae22 	beq.w	800febe <_dtoa_r+0x6e>
 801027a:	601e      	str	r6, [r3, #0]
 801027c:	e61f      	b.n	800febe <_dtoa_r+0x6e>
 801027e:	2202      	movs	r2, #2
 8010280:	e75e      	b.n	8010140 <_dtoa_r+0x2f0>
 8010282:	07cc      	lsls	r4, r1, #31
 8010284:	d504      	bpl.n	8010290 <_dtoa_r+0x440>
 8010286:	ed90 6b00 	vldr	d6, [r0]
 801028a:	3201      	adds	r2, #1
 801028c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010290:	1049      	asrs	r1, r1, #1
 8010292:	3008      	adds	r0, #8
 8010294:	e755      	b.n	8010142 <_dtoa_r+0x2f2>
 8010296:	d022      	beq.n	80102de <_dtoa_r+0x48e>
 8010298:	f1c8 0100 	rsb	r1, r8, #0
 801029c:	4a67      	ldr	r2, [pc, #412]	@ (801043c <_dtoa_r+0x5ec>)
 801029e:	f001 000f 	and.w	r0, r1, #15
 80102a2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80102a6:	ed92 7b00 	vldr	d7, [r2]
 80102aa:	ee28 7b07 	vmul.f64	d7, d8, d7
 80102ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80102b2:	4863      	ldr	r0, [pc, #396]	@ (8010440 <_dtoa_r+0x5f0>)
 80102b4:	1109      	asrs	r1, r1, #4
 80102b6:	2400      	movs	r4, #0
 80102b8:	2202      	movs	r2, #2
 80102ba:	b929      	cbnz	r1, 80102c8 <_dtoa_r+0x478>
 80102bc:	2c00      	cmp	r4, #0
 80102be:	f43f af49 	beq.w	8010154 <_dtoa_r+0x304>
 80102c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80102c6:	e745      	b.n	8010154 <_dtoa_r+0x304>
 80102c8:	07ce      	lsls	r6, r1, #31
 80102ca:	d505      	bpl.n	80102d8 <_dtoa_r+0x488>
 80102cc:	ed90 6b00 	vldr	d6, [r0]
 80102d0:	3201      	adds	r2, #1
 80102d2:	2401      	movs	r4, #1
 80102d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80102d8:	1049      	asrs	r1, r1, #1
 80102da:	3008      	adds	r0, #8
 80102dc:	e7ed      	b.n	80102ba <_dtoa_r+0x46a>
 80102de:	2202      	movs	r2, #2
 80102e0:	e738      	b.n	8010154 <_dtoa_r+0x304>
 80102e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80102e6:	4654      	mov	r4, sl
 80102e8:	e754      	b.n	8010194 <_dtoa_r+0x344>
 80102ea:	4a54      	ldr	r2, [pc, #336]	@ (801043c <_dtoa_r+0x5ec>)
 80102ec:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80102f0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80102f4:	9a08      	ldr	r2, [sp, #32]
 80102f6:	ec41 0b17 	vmov	d7, r0, r1
 80102fa:	443c      	add	r4, r7
 80102fc:	b34a      	cbz	r2, 8010352 <_dtoa_r+0x502>
 80102fe:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010302:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010306:	463e      	mov	r6, r7
 8010308:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801030c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010310:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010314:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010318:	ee14 2a90 	vmov	r2, s9
 801031c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010320:	3230      	adds	r2, #48	@ 0x30
 8010322:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010326:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801032e:	f806 2b01 	strb.w	r2, [r6], #1
 8010332:	d438      	bmi.n	80103a6 <_dtoa_r+0x556>
 8010334:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010338:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801033c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010340:	d462      	bmi.n	8010408 <_dtoa_r+0x5b8>
 8010342:	42a6      	cmp	r6, r4
 8010344:	f43f af4d 	beq.w	80101e2 <_dtoa_r+0x392>
 8010348:	ee27 7b03 	vmul.f64	d7, d7, d3
 801034c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010350:	e7e0      	b.n	8010314 <_dtoa_r+0x4c4>
 8010352:	4621      	mov	r1, r4
 8010354:	463e      	mov	r6, r7
 8010356:	ee27 7b04 	vmul.f64	d7, d7, d4
 801035a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801035e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010362:	ee14 2a90 	vmov	r2, s9
 8010366:	3230      	adds	r2, #48	@ 0x30
 8010368:	f806 2b01 	strb.w	r2, [r6], #1
 801036c:	42a6      	cmp	r6, r4
 801036e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010372:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010376:	d119      	bne.n	80103ac <_dtoa_r+0x55c>
 8010378:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801037c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010380:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010388:	dc3e      	bgt.n	8010408 <_dtoa_r+0x5b8>
 801038a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801038e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010396:	f57f af24 	bpl.w	80101e2 <_dtoa_r+0x392>
 801039a:	460e      	mov	r6, r1
 801039c:	3901      	subs	r1, #1
 801039e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80103a2:	2b30      	cmp	r3, #48	@ 0x30
 80103a4:	d0f9      	beq.n	801039a <_dtoa_r+0x54a>
 80103a6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80103aa:	e758      	b.n	801025e <_dtoa_r+0x40e>
 80103ac:	ee26 6b03 	vmul.f64	d6, d6, d3
 80103b0:	e7d5      	b.n	801035e <_dtoa_r+0x50e>
 80103b2:	d10b      	bne.n	80103cc <_dtoa_r+0x57c>
 80103b4:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80103b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80103bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80103c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103c8:	f2c0 8160 	blt.w	801068c <_dtoa_r+0x83c>
 80103cc:	2400      	movs	r4, #0
 80103ce:	4625      	mov	r5, r4
 80103d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103d2:	43db      	mvns	r3, r3
 80103d4:	9304      	str	r3, [sp, #16]
 80103d6:	463e      	mov	r6, r7
 80103d8:	f04f 0800 	mov.w	r8, #0
 80103dc:	4621      	mov	r1, r4
 80103de:	4648      	mov	r0, r9
 80103e0:	f001 ffef 	bl	80123c2 <_Bfree>
 80103e4:	2d00      	cmp	r5, #0
 80103e6:	d0de      	beq.n	80103a6 <_dtoa_r+0x556>
 80103e8:	f1b8 0f00 	cmp.w	r8, #0
 80103ec:	d005      	beq.n	80103fa <_dtoa_r+0x5aa>
 80103ee:	45a8      	cmp	r8, r5
 80103f0:	d003      	beq.n	80103fa <_dtoa_r+0x5aa>
 80103f2:	4641      	mov	r1, r8
 80103f4:	4648      	mov	r0, r9
 80103f6:	f001 ffe4 	bl	80123c2 <_Bfree>
 80103fa:	4629      	mov	r1, r5
 80103fc:	4648      	mov	r0, r9
 80103fe:	f001 ffe0 	bl	80123c2 <_Bfree>
 8010402:	e7d0      	b.n	80103a6 <_dtoa_r+0x556>
 8010404:	f8cd 8010 	str.w	r8, [sp, #16]
 8010408:	4633      	mov	r3, r6
 801040a:	461e      	mov	r6, r3
 801040c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010410:	2a39      	cmp	r2, #57	@ 0x39
 8010412:	d106      	bne.n	8010422 <_dtoa_r+0x5d2>
 8010414:	429f      	cmp	r7, r3
 8010416:	d1f8      	bne.n	801040a <_dtoa_r+0x5ba>
 8010418:	9a04      	ldr	r2, [sp, #16]
 801041a:	3201      	adds	r2, #1
 801041c:	9204      	str	r2, [sp, #16]
 801041e:	2230      	movs	r2, #48	@ 0x30
 8010420:	703a      	strb	r2, [r7, #0]
 8010422:	781a      	ldrb	r2, [r3, #0]
 8010424:	3201      	adds	r2, #1
 8010426:	701a      	strb	r2, [r3, #0]
 8010428:	e7bd      	b.n	80103a6 <_dtoa_r+0x556>
 801042a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801042e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010436:	f47f aeef 	bne.w	8010218 <_dtoa_r+0x3c8>
 801043a:	e710      	b.n	801025e <_dtoa_r+0x40e>
 801043c:	08014dc8 	.word	0x08014dc8
 8010440:	08014da0 	.word	0x08014da0
 8010444:	9908      	ldr	r1, [sp, #32]
 8010446:	2900      	cmp	r1, #0
 8010448:	f000 80e3 	beq.w	8010612 <_dtoa_r+0x7c2>
 801044c:	9907      	ldr	r1, [sp, #28]
 801044e:	2901      	cmp	r1, #1
 8010450:	f300 80c8 	bgt.w	80105e4 <_dtoa_r+0x794>
 8010454:	2d00      	cmp	r5, #0
 8010456:	f000 80c1 	beq.w	80105dc <_dtoa_r+0x78c>
 801045a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801045e:	9e05      	ldr	r6, [sp, #20]
 8010460:	461c      	mov	r4, r3
 8010462:	9304      	str	r3, [sp, #16]
 8010464:	9b05      	ldr	r3, [sp, #20]
 8010466:	4413      	add	r3, r2
 8010468:	9305      	str	r3, [sp, #20]
 801046a:	9b06      	ldr	r3, [sp, #24]
 801046c:	2101      	movs	r1, #1
 801046e:	4413      	add	r3, r2
 8010470:	4648      	mov	r0, r9
 8010472:	9306      	str	r3, [sp, #24]
 8010474:	f002 f840 	bl	80124f8 <__i2b>
 8010478:	9b04      	ldr	r3, [sp, #16]
 801047a:	4605      	mov	r5, r0
 801047c:	b166      	cbz	r6, 8010498 <_dtoa_r+0x648>
 801047e:	9a06      	ldr	r2, [sp, #24]
 8010480:	2a00      	cmp	r2, #0
 8010482:	dd09      	ble.n	8010498 <_dtoa_r+0x648>
 8010484:	42b2      	cmp	r2, r6
 8010486:	9905      	ldr	r1, [sp, #20]
 8010488:	bfa8      	it	ge
 801048a:	4632      	movge	r2, r6
 801048c:	1a89      	subs	r1, r1, r2
 801048e:	9105      	str	r1, [sp, #20]
 8010490:	9906      	ldr	r1, [sp, #24]
 8010492:	1ab6      	subs	r6, r6, r2
 8010494:	1a8a      	subs	r2, r1, r2
 8010496:	9206      	str	r2, [sp, #24]
 8010498:	b1fb      	cbz	r3, 80104da <_dtoa_r+0x68a>
 801049a:	9a08      	ldr	r2, [sp, #32]
 801049c:	2a00      	cmp	r2, #0
 801049e:	f000 80bc 	beq.w	801061a <_dtoa_r+0x7ca>
 80104a2:	b19c      	cbz	r4, 80104cc <_dtoa_r+0x67c>
 80104a4:	4629      	mov	r1, r5
 80104a6:	4622      	mov	r2, r4
 80104a8:	4648      	mov	r0, r9
 80104aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104ac:	f002 f8e4 	bl	8012678 <__pow5mult>
 80104b0:	9a01      	ldr	r2, [sp, #4]
 80104b2:	4601      	mov	r1, r0
 80104b4:	4605      	mov	r5, r0
 80104b6:	4648      	mov	r0, r9
 80104b8:	f002 f834 	bl	8012524 <__multiply>
 80104bc:	9901      	ldr	r1, [sp, #4]
 80104be:	9004      	str	r0, [sp, #16]
 80104c0:	4648      	mov	r0, r9
 80104c2:	f001 ff7e 	bl	80123c2 <_Bfree>
 80104c6:	9a04      	ldr	r2, [sp, #16]
 80104c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104ca:	9201      	str	r2, [sp, #4]
 80104cc:	1b1a      	subs	r2, r3, r4
 80104ce:	d004      	beq.n	80104da <_dtoa_r+0x68a>
 80104d0:	9901      	ldr	r1, [sp, #4]
 80104d2:	4648      	mov	r0, r9
 80104d4:	f002 f8d0 	bl	8012678 <__pow5mult>
 80104d8:	9001      	str	r0, [sp, #4]
 80104da:	2101      	movs	r1, #1
 80104dc:	4648      	mov	r0, r9
 80104de:	f002 f80b 	bl	80124f8 <__i2b>
 80104e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104e4:	4604      	mov	r4, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	f000 81cb 	beq.w	8010882 <_dtoa_r+0xa32>
 80104ec:	461a      	mov	r2, r3
 80104ee:	4601      	mov	r1, r0
 80104f0:	4648      	mov	r0, r9
 80104f2:	f002 f8c1 	bl	8012678 <__pow5mult>
 80104f6:	9b07      	ldr	r3, [sp, #28]
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	4604      	mov	r4, r0
 80104fc:	f300 8095 	bgt.w	801062a <_dtoa_r+0x7da>
 8010500:	9b02      	ldr	r3, [sp, #8]
 8010502:	2b00      	cmp	r3, #0
 8010504:	f040 808b 	bne.w	801061e <_dtoa_r+0x7ce>
 8010508:	9b03      	ldr	r3, [sp, #12]
 801050a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801050e:	2a00      	cmp	r2, #0
 8010510:	f040 8087 	bne.w	8010622 <_dtoa_r+0x7d2>
 8010514:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010518:	0d12      	lsrs	r2, r2, #20
 801051a:	0512      	lsls	r2, r2, #20
 801051c:	2a00      	cmp	r2, #0
 801051e:	f000 8082 	beq.w	8010626 <_dtoa_r+0x7d6>
 8010522:	9b05      	ldr	r3, [sp, #20]
 8010524:	3301      	adds	r3, #1
 8010526:	9305      	str	r3, [sp, #20]
 8010528:	9b06      	ldr	r3, [sp, #24]
 801052a:	3301      	adds	r3, #1
 801052c:	9306      	str	r3, [sp, #24]
 801052e:	2301      	movs	r3, #1
 8010530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010532:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010534:	2b00      	cmp	r3, #0
 8010536:	f000 81aa 	beq.w	801088e <_dtoa_r+0xa3e>
 801053a:	6922      	ldr	r2, [r4, #16]
 801053c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010540:	6910      	ldr	r0, [r2, #16]
 8010542:	f001 ff8d 	bl	8012460 <__hi0bits>
 8010546:	f1c0 0020 	rsb	r0, r0, #32
 801054a:	9b06      	ldr	r3, [sp, #24]
 801054c:	4418      	add	r0, r3
 801054e:	f010 001f 	ands.w	r0, r0, #31
 8010552:	d076      	beq.n	8010642 <_dtoa_r+0x7f2>
 8010554:	f1c0 0220 	rsb	r2, r0, #32
 8010558:	2a04      	cmp	r2, #4
 801055a:	dd69      	ble.n	8010630 <_dtoa_r+0x7e0>
 801055c:	9b05      	ldr	r3, [sp, #20]
 801055e:	f1c0 001c 	rsb	r0, r0, #28
 8010562:	4403      	add	r3, r0
 8010564:	9305      	str	r3, [sp, #20]
 8010566:	9b06      	ldr	r3, [sp, #24]
 8010568:	4406      	add	r6, r0
 801056a:	4403      	add	r3, r0
 801056c:	9306      	str	r3, [sp, #24]
 801056e:	9b05      	ldr	r3, [sp, #20]
 8010570:	2b00      	cmp	r3, #0
 8010572:	dd05      	ble.n	8010580 <_dtoa_r+0x730>
 8010574:	9901      	ldr	r1, [sp, #4]
 8010576:	461a      	mov	r2, r3
 8010578:	4648      	mov	r0, r9
 801057a:	f002 f8bd 	bl	80126f8 <__lshift>
 801057e:	9001      	str	r0, [sp, #4]
 8010580:	9b06      	ldr	r3, [sp, #24]
 8010582:	2b00      	cmp	r3, #0
 8010584:	dd05      	ble.n	8010592 <_dtoa_r+0x742>
 8010586:	4621      	mov	r1, r4
 8010588:	461a      	mov	r2, r3
 801058a:	4648      	mov	r0, r9
 801058c:	f002 f8b4 	bl	80126f8 <__lshift>
 8010590:	4604      	mov	r4, r0
 8010592:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010594:	2b00      	cmp	r3, #0
 8010596:	d056      	beq.n	8010646 <_dtoa_r+0x7f6>
 8010598:	9801      	ldr	r0, [sp, #4]
 801059a:	4621      	mov	r1, r4
 801059c:	f002 f918 	bl	80127d0 <__mcmp>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	da50      	bge.n	8010646 <_dtoa_r+0x7f6>
 80105a4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80105a8:	9304      	str	r3, [sp, #16]
 80105aa:	9901      	ldr	r1, [sp, #4]
 80105ac:	2300      	movs	r3, #0
 80105ae:	220a      	movs	r2, #10
 80105b0:	4648      	mov	r0, r9
 80105b2:	f001 ff0f 	bl	80123d4 <__multadd>
 80105b6:	9b08      	ldr	r3, [sp, #32]
 80105b8:	9001      	str	r0, [sp, #4]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	f000 8169 	beq.w	8010892 <_dtoa_r+0xa42>
 80105c0:	4629      	mov	r1, r5
 80105c2:	2300      	movs	r3, #0
 80105c4:	220a      	movs	r2, #10
 80105c6:	4648      	mov	r0, r9
 80105c8:	f001 ff04 	bl	80123d4 <__multadd>
 80105cc:	f1bb 0f00 	cmp.w	fp, #0
 80105d0:	4605      	mov	r5, r0
 80105d2:	dc64      	bgt.n	801069e <_dtoa_r+0x84e>
 80105d4:	9b07      	ldr	r3, [sp, #28]
 80105d6:	2b02      	cmp	r3, #2
 80105d8:	dc3e      	bgt.n	8010658 <_dtoa_r+0x808>
 80105da:	e060      	b.n	801069e <_dtoa_r+0x84e>
 80105dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80105de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80105e2:	e73c      	b.n	801045e <_dtoa_r+0x60e>
 80105e4:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80105e8:	42a3      	cmp	r3, r4
 80105ea:	bfbf      	itttt	lt
 80105ec:	1ae2      	sublt	r2, r4, r3
 80105ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80105f0:	189b      	addlt	r3, r3, r2
 80105f2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80105f4:	bfae      	itee	ge
 80105f6:	1b1c      	subge	r4, r3, r4
 80105f8:	4623      	movlt	r3, r4
 80105fa:	2400      	movlt	r4, #0
 80105fc:	f1ba 0f00 	cmp.w	sl, #0
 8010600:	bfb5      	itete	lt
 8010602:	9a05      	ldrlt	r2, [sp, #20]
 8010604:	9e05      	ldrge	r6, [sp, #20]
 8010606:	eba2 060a 	sublt.w	r6, r2, sl
 801060a:	4652      	movge	r2, sl
 801060c:	bfb8      	it	lt
 801060e:	2200      	movlt	r2, #0
 8010610:	e727      	b.n	8010462 <_dtoa_r+0x612>
 8010612:	9e05      	ldr	r6, [sp, #20]
 8010614:	9d08      	ldr	r5, [sp, #32]
 8010616:	461c      	mov	r4, r3
 8010618:	e730      	b.n	801047c <_dtoa_r+0x62c>
 801061a:	461a      	mov	r2, r3
 801061c:	e758      	b.n	80104d0 <_dtoa_r+0x680>
 801061e:	2300      	movs	r3, #0
 8010620:	e786      	b.n	8010530 <_dtoa_r+0x6e0>
 8010622:	9b02      	ldr	r3, [sp, #8]
 8010624:	e784      	b.n	8010530 <_dtoa_r+0x6e0>
 8010626:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010628:	e783      	b.n	8010532 <_dtoa_r+0x6e2>
 801062a:	2300      	movs	r3, #0
 801062c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801062e:	e784      	b.n	801053a <_dtoa_r+0x6ea>
 8010630:	d09d      	beq.n	801056e <_dtoa_r+0x71e>
 8010632:	9b05      	ldr	r3, [sp, #20]
 8010634:	321c      	adds	r2, #28
 8010636:	4413      	add	r3, r2
 8010638:	9305      	str	r3, [sp, #20]
 801063a:	9b06      	ldr	r3, [sp, #24]
 801063c:	4416      	add	r6, r2
 801063e:	4413      	add	r3, r2
 8010640:	e794      	b.n	801056c <_dtoa_r+0x71c>
 8010642:	4602      	mov	r2, r0
 8010644:	e7f5      	b.n	8010632 <_dtoa_r+0x7e2>
 8010646:	f1ba 0f00 	cmp.w	sl, #0
 801064a:	f8cd 8010 	str.w	r8, [sp, #16]
 801064e:	46d3      	mov	fp, sl
 8010650:	dc21      	bgt.n	8010696 <_dtoa_r+0x846>
 8010652:	9b07      	ldr	r3, [sp, #28]
 8010654:	2b02      	cmp	r3, #2
 8010656:	dd1e      	ble.n	8010696 <_dtoa_r+0x846>
 8010658:	f1bb 0f00 	cmp.w	fp, #0
 801065c:	f47f aeb8 	bne.w	80103d0 <_dtoa_r+0x580>
 8010660:	4621      	mov	r1, r4
 8010662:	465b      	mov	r3, fp
 8010664:	2205      	movs	r2, #5
 8010666:	4648      	mov	r0, r9
 8010668:	f001 feb4 	bl	80123d4 <__multadd>
 801066c:	4601      	mov	r1, r0
 801066e:	4604      	mov	r4, r0
 8010670:	9801      	ldr	r0, [sp, #4]
 8010672:	f002 f8ad 	bl	80127d0 <__mcmp>
 8010676:	2800      	cmp	r0, #0
 8010678:	f77f aeaa 	ble.w	80103d0 <_dtoa_r+0x580>
 801067c:	463e      	mov	r6, r7
 801067e:	2331      	movs	r3, #49	@ 0x31
 8010680:	f806 3b01 	strb.w	r3, [r6], #1
 8010684:	9b04      	ldr	r3, [sp, #16]
 8010686:	3301      	adds	r3, #1
 8010688:	9304      	str	r3, [sp, #16]
 801068a:	e6a5      	b.n	80103d8 <_dtoa_r+0x588>
 801068c:	f8cd 8010 	str.w	r8, [sp, #16]
 8010690:	4654      	mov	r4, sl
 8010692:	4625      	mov	r5, r4
 8010694:	e7f2      	b.n	801067c <_dtoa_r+0x82c>
 8010696:	9b08      	ldr	r3, [sp, #32]
 8010698:	2b00      	cmp	r3, #0
 801069a:	f000 80fe 	beq.w	801089a <_dtoa_r+0xa4a>
 801069e:	2e00      	cmp	r6, #0
 80106a0:	dd05      	ble.n	80106ae <_dtoa_r+0x85e>
 80106a2:	4629      	mov	r1, r5
 80106a4:	4632      	mov	r2, r6
 80106a6:	4648      	mov	r0, r9
 80106a8:	f002 f826 	bl	80126f8 <__lshift>
 80106ac:	4605      	mov	r5, r0
 80106ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d057      	beq.n	8010764 <_dtoa_r+0x914>
 80106b4:	6869      	ldr	r1, [r5, #4]
 80106b6:	4648      	mov	r0, r9
 80106b8:	f001 fe5e 	bl	8012378 <_Balloc>
 80106bc:	4606      	mov	r6, r0
 80106be:	b920      	cbnz	r0, 80106ca <_dtoa_r+0x87a>
 80106c0:	4b80      	ldr	r3, [pc, #512]	@ (80108c4 <_dtoa_r+0xa74>)
 80106c2:	4602      	mov	r2, r0
 80106c4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80106c8:	e4d3      	b.n	8010072 <_dtoa_r+0x222>
 80106ca:	692a      	ldr	r2, [r5, #16]
 80106cc:	3202      	adds	r2, #2
 80106ce:	0092      	lsls	r2, r2, #2
 80106d0:	f105 010c 	add.w	r1, r5, #12
 80106d4:	300c      	adds	r0, #12
 80106d6:	f7ff fac5 	bl	800fc64 <memcpy>
 80106da:	2201      	movs	r2, #1
 80106dc:	4631      	mov	r1, r6
 80106de:	4648      	mov	r0, r9
 80106e0:	f002 f80a 	bl	80126f8 <__lshift>
 80106e4:	1c7b      	adds	r3, r7, #1
 80106e6:	9305      	str	r3, [sp, #20]
 80106e8:	eb07 030b 	add.w	r3, r7, fp
 80106ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80106ee:	9b02      	ldr	r3, [sp, #8]
 80106f0:	f003 0301 	and.w	r3, r3, #1
 80106f4:	46a8      	mov	r8, r5
 80106f6:	9308      	str	r3, [sp, #32]
 80106f8:	4605      	mov	r5, r0
 80106fa:	9b05      	ldr	r3, [sp, #20]
 80106fc:	9801      	ldr	r0, [sp, #4]
 80106fe:	4621      	mov	r1, r4
 8010700:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8010704:	f7ff fb1c 	bl	800fd40 <quorem>
 8010708:	4641      	mov	r1, r8
 801070a:	9002      	str	r0, [sp, #8]
 801070c:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010710:	9801      	ldr	r0, [sp, #4]
 8010712:	f002 f85d 	bl	80127d0 <__mcmp>
 8010716:	462a      	mov	r2, r5
 8010718:	9006      	str	r0, [sp, #24]
 801071a:	4621      	mov	r1, r4
 801071c:	4648      	mov	r0, r9
 801071e:	f002 f873 	bl	8012808 <__mdiff>
 8010722:	68c2      	ldr	r2, [r0, #12]
 8010724:	4606      	mov	r6, r0
 8010726:	b9fa      	cbnz	r2, 8010768 <_dtoa_r+0x918>
 8010728:	4601      	mov	r1, r0
 801072a:	9801      	ldr	r0, [sp, #4]
 801072c:	f002 f850 	bl	80127d0 <__mcmp>
 8010730:	4602      	mov	r2, r0
 8010732:	4631      	mov	r1, r6
 8010734:	4648      	mov	r0, r9
 8010736:	920a      	str	r2, [sp, #40]	@ 0x28
 8010738:	f001 fe43 	bl	80123c2 <_Bfree>
 801073c:	9b07      	ldr	r3, [sp, #28]
 801073e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010740:	9e05      	ldr	r6, [sp, #20]
 8010742:	ea43 0102 	orr.w	r1, r3, r2
 8010746:	9b08      	ldr	r3, [sp, #32]
 8010748:	4319      	orrs	r1, r3
 801074a:	d10f      	bne.n	801076c <_dtoa_r+0x91c>
 801074c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010750:	d028      	beq.n	80107a4 <_dtoa_r+0x954>
 8010752:	9b06      	ldr	r3, [sp, #24]
 8010754:	2b00      	cmp	r3, #0
 8010756:	dd02      	ble.n	801075e <_dtoa_r+0x90e>
 8010758:	9b02      	ldr	r3, [sp, #8]
 801075a:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801075e:	f88b a000 	strb.w	sl, [fp]
 8010762:	e63b      	b.n	80103dc <_dtoa_r+0x58c>
 8010764:	4628      	mov	r0, r5
 8010766:	e7bd      	b.n	80106e4 <_dtoa_r+0x894>
 8010768:	2201      	movs	r2, #1
 801076a:	e7e2      	b.n	8010732 <_dtoa_r+0x8e2>
 801076c:	9b06      	ldr	r3, [sp, #24]
 801076e:	2b00      	cmp	r3, #0
 8010770:	db04      	blt.n	801077c <_dtoa_r+0x92c>
 8010772:	9907      	ldr	r1, [sp, #28]
 8010774:	430b      	orrs	r3, r1
 8010776:	9908      	ldr	r1, [sp, #32]
 8010778:	430b      	orrs	r3, r1
 801077a:	d120      	bne.n	80107be <_dtoa_r+0x96e>
 801077c:	2a00      	cmp	r2, #0
 801077e:	ddee      	ble.n	801075e <_dtoa_r+0x90e>
 8010780:	9901      	ldr	r1, [sp, #4]
 8010782:	2201      	movs	r2, #1
 8010784:	4648      	mov	r0, r9
 8010786:	f001 ffb7 	bl	80126f8 <__lshift>
 801078a:	4621      	mov	r1, r4
 801078c:	9001      	str	r0, [sp, #4]
 801078e:	f002 f81f 	bl	80127d0 <__mcmp>
 8010792:	2800      	cmp	r0, #0
 8010794:	dc03      	bgt.n	801079e <_dtoa_r+0x94e>
 8010796:	d1e2      	bne.n	801075e <_dtoa_r+0x90e>
 8010798:	f01a 0f01 	tst.w	sl, #1
 801079c:	d0df      	beq.n	801075e <_dtoa_r+0x90e>
 801079e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80107a2:	d1d9      	bne.n	8010758 <_dtoa_r+0x908>
 80107a4:	2339      	movs	r3, #57	@ 0x39
 80107a6:	f88b 3000 	strb.w	r3, [fp]
 80107aa:	4633      	mov	r3, r6
 80107ac:	461e      	mov	r6, r3
 80107ae:	3b01      	subs	r3, #1
 80107b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80107b4:	2a39      	cmp	r2, #57	@ 0x39
 80107b6:	d053      	beq.n	8010860 <_dtoa_r+0xa10>
 80107b8:	3201      	adds	r2, #1
 80107ba:	701a      	strb	r2, [r3, #0]
 80107bc:	e60e      	b.n	80103dc <_dtoa_r+0x58c>
 80107be:	2a00      	cmp	r2, #0
 80107c0:	dd07      	ble.n	80107d2 <_dtoa_r+0x982>
 80107c2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80107c6:	d0ed      	beq.n	80107a4 <_dtoa_r+0x954>
 80107c8:	f10a 0301 	add.w	r3, sl, #1
 80107cc:	f88b 3000 	strb.w	r3, [fp]
 80107d0:	e604      	b.n	80103dc <_dtoa_r+0x58c>
 80107d2:	9b05      	ldr	r3, [sp, #20]
 80107d4:	9a05      	ldr	r2, [sp, #20]
 80107d6:	f803 ac01 	strb.w	sl, [r3, #-1]
 80107da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107dc:	4293      	cmp	r3, r2
 80107de:	d029      	beq.n	8010834 <_dtoa_r+0x9e4>
 80107e0:	9901      	ldr	r1, [sp, #4]
 80107e2:	2300      	movs	r3, #0
 80107e4:	220a      	movs	r2, #10
 80107e6:	4648      	mov	r0, r9
 80107e8:	f001 fdf4 	bl	80123d4 <__multadd>
 80107ec:	45a8      	cmp	r8, r5
 80107ee:	9001      	str	r0, [sp, #4]
 80107f0:	f04f 0300 	mov.w	r3, #0
 80107f4:	f04f 020a 	mov.w	r2, #10
 80107f8:	4641      	mov	r1, r8
 80107fa:	4648      	mov	r0, r9
 80107fc:	d107      	bne.n	801080e <_dtoa_r+0x9be>
 80107fe:	f001 fde9 	bl	80123d4 <__multadd>
 8010802:	4680      	mov	r8, r0
 8010804:	4605      	mov	r5, r0
 8010806:	9b05      	ldr	r3, [sp, #20]
 8010808:	3301      	adds	r3, #1
 801080a:	9305      	str	r3, [sp, #20]
 801080c:	e775      	b.n	80106fa <_dtoa_r+0x8aa>
 801080e:	f001 fde1 	bl	80123d4 <__multadd>
 8010812:	4629      	mov	r1, r5
 8010814:	4680      	mov	r8, r0
 8010816:	2300      	movs	r3, #0
 8010818:	220a      	movs	r2, #10
 801081a:	4648      	mov	r0, r9
 801081c:	f001 fdda 	bl	80123d4 <__multadd>
 8010820:	4605      	mov	r5, r0
 8010822:	e7f0      	b.n	8010806 <_dtoa_r+0x9b6>
 8010824:	f1bb 0f00 	cmp.w	fp, #0
 8010828:	bfcc      	ite	gt
 801082a:	465e      	movgt	r6, fp
 801082c:	2601      	movle	r6, #1
 801082e:	443e      	add	r6, r7
 8010830:	f04f 0800 	mov.w	r8, #0
 8010834:	9901      	ldr	r1, [sp, #4]
 8010836:	2201      	movs	r2, #1
 8010838:	4648      	mov	r0, r9
 801083a:	f001 ff5d 	bl	80126f8 <__lshift>
 801083e:	4621      	mov	r1, r4
 8010840:	9001      	str	r0, [sp, #4]
 8010842:	f001 ffc5 	bl	80127d0 <__mcmp>
 8010846:	2800      	cmp	r0, #0
 8010848:	dcaf      	bgt.n	80107aa <_dtoa_r+0x95a>
 801084a:	d102      	bne.n	8010852 <_dtoa_r+0xa02>
 801084c:	f01a 0f01 	tst.w	sl, #1
 8010850:	d1ab      	bne.n	80107aa <_dtoa_r+0x95a>
 8010852:	4633      	mov	r3, r6
 8010854:	461e      	mov	r6, r3
 8010856:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801085a:	2a30      	cmp	r2, #48	@ 0x30
 801085c:	d0fa      	beq.n	8010854 <_dtoa_r+0xa04>
 801085e:	e5bd      	b.n	80103dc <_dtoa_r+0x58c>
 8010860:	429f      	cmp	r7, r3
 8010862:	d1a3      	bne.n	80107ac <_dtoa_r+0x95c>
 8010864:	9b04      	ldr	r3, [sp, #16]
 8010866:	3301      	adds	r3, #1
 8010868:	9304      	str	r3, [sp, #16]
 801086a:	2331      	movs	r3, #49	@ 0x31
 801086c:	703b      	strb	r3, [r7, #0]
 801086e:	e5b5      	b.n	80103dc <_dtoa_r+0x58c>
 8010870:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010872:	4f15      	ldr	r7, [pc, #84]	@ (80108c8 <_dtoa_r+0xa78>)
 8010874:	2b00      	cmp	r3, #0
 8010876:	f43f ab22 	beq.w	800febe <_dtoa_r+0x6e>
 801087a:	f107 0308 	add.w	r3, r7, #8
 801087e:	f7ff bb1c 	b.w	800feba <_dtoa_r+0x6a>
 8010882:	9b07      	ldr	r3, [sp, #28]
 8010884:	2b01      	cmp	r3, #1
 8010886:	f77f ae3b 	ble.w	8010500 <_dtoa_r+0x6b0>
 801088a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801088c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801088e:	2001      	movs	r0, #1
 8010890:	e65b      	b.n	801054a <_dtoa_r+0x6fa>
 8010892:	f1bb 0f00 	cmp.w	fp, #0
 8010896:	f77f aedc 	ble.w	8010652 <_dtoa_r+0x802>
 801089a:	463e      	mov	r6, r7
 801089c:	9801      	ldr	r0, [sp, #4]
 801089e:	4621      	mov	r1, r4
 80108a0:	f7ff fa4e 	bl	800fd40 <quorem>
 80108a4:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80108a8:	f806 ab01 	strb.w	sl, [r6], #1
 80108ac:	1bf2      	subs	r2, r6, r7
 80108ae:	4593      	cmp	fp, r2
 80108b0:	ddb8      	ble.n	8010824 <_dtoa_r+0x9d4>
 80108b2:	9901      	ldr	r1, [sp, #4]
 80108b4:	2300      	movs	r3, #0
 80108b6:	220a      	movs	r2, #10
 80108b8:	4648      	mov	r0, r9
 80108ba:	f001 fd8b 	bl	80123d4 <__multadd>
 80108be:	9001      	str	r0, [sp, #4]
 80108c0:	e7ec      	b.n	801089c <_dtoa_r+0xa4c>
 80108c2:	bf00      	nop
 80108c4:	08014c9c 	.word	0x08014c9c
 80108c8:	08014c8d 	.word	0x08014c8d

080108cc <_malloc_trim_r>:
 80108cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108d0:	4606      	mov	r6, r0
 80108d2:	2008      	movs	r0, #8
 80108d4:	4689      	mov	r9, r1
 80108d6:	f002 fb93 	bl	8013000 <sysconf>
 80108da:	4f24      	ldr	r7, [pc, #144]	@ (801096c <_malloc_trim_r+0xa0>)
 80108dc:	4680      	mov	r8, r0
 80108de:	4630      	mov	r0, r6
 80108e0:	f001 fd3e 	bl	8012360 <__malloc_lock>
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	685d      	ldr	r5, [r3, #4]
 80108e8:	f025 0503 	bic.w	r5, r5, #3
 80108ec:	f1a5 0411 	sub.w	r4, r5, #17
 80108f0:	eba4 0409 	sub.w	r4, r4, r9
 80108f4:	4444      	add	r4, r8
 80108f6:	fbb4 f4f8 	udiv	r4, r4, r8
 80108fa:	3c01      	subs	r4, #1
 80108fc:	fb08 f404 	mul.w	r4, r8, r4
 8010900:	45a0      	cmp	r8, r4
 8010902:	dd05      	ble.n	8010910 <_malloc_trim_r+0x44>
 8010904:	4630      	mov	r0, r6
 8010906:	f001 fd31 	bl	801236c <__malloc_unlock>
 801090a:	2000      	movs	r0, #0
 801090c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010910:	2100      	movs	r1, #0
 8010912:	4630      	mov	r0, r6
 8010914:	f002 fb52 	bl	8012fbc <_sbrk_r>
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	442b      	add	r3, r5
 801091c:	4298      	cmp	r0, r3
 801091e:	d1f1      	bne.n	8010904 <_malloc_trim_r+0x38>
 8010920:	4261      	negs	r1, r4
 8010922:	4630      	mov	r0, r6
 8010924:	f002 fb4a 	bl	8012fbc <_sbrk_r>
 8010928:	3001      	adds	r0, #1
 801092a:	d110      	bne.n	801094e <_malloc_trim_r+0x82>
 801092c:	2100      	movs	r1, #0
 801092e:	4630      	mov	r0, r6
 8010930:	f002 fb44 	bl	8012fbc <_sbrk_r>
 8010934:	68ba      	ldr	r2, [r7, #8]
 8010936:	1a83      	subs	r3, r0, r2
 8010938:	2b0f      	cmp	r3, #15
 801093a:	dde3      	ble.n	8010904 <_malloc_trim_r+0x38>
 801093c:	490c      	ldr	r1, [pc, #48]	@ (8010970 <_malloc_trim_r+0xa4>)
 801093e:	6809      	ldr	r1, [r1, #0]
 8010940:	1a40      	subs	r0, r0, r1
 8010942:	490c      	ldr	r1, [pc, #48]	@ (8010974 <_malloc_trim_r+0xa8>)
 8010944:	f043 0301 	orr.w	r3, r3, #1
 8010948:	6008      	str	r0, [r1, #0]
 801094a:	6053      	str	r3, [r2, #4]
 801094c:	e7da      	b.n	8010904 <_malloc_trim_r+0x38>
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	4a08      	ldr	r2, [pc, #32]	@ (8010974 <_malloc_trim_r+0xa8>)
 8010952:	1b2d      	subs	r5, r5, r4
 8010954:	f045 0501 	orr.w	r5, r5, #1
 8010958:	605d      	str	r5, [r3, #4]
 801095a:	6813      	ldr	r3, [r2, #0]
 801095c:	4630      	mov	r0, r6
 801095e:	1b1b      	subs	r3, r3, r4
 8010960:	6013      	str	r3, [r2, #0]
 8010962:	f001 fd03 	bl	801236c <__malloc_unlock>
 8010966:	2001      	movs	r0, #1
 8010968:	e7d0      	b.n	801090c <_malloc_trim_r+0x40>
 801096a:	bf00      	nop
 801096c:	240002bc 	.word	0x240002bc
 8010970:	240002b4 	.word	0x240002b4
 8010974:	24015354 	.word	0x24015354

08010978 <_free_r>:
 8010978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801097a:	4604      	mov	r4, r0
 801097c:	460f      	mov	r7, r1
 801097e:	2900      	cmp	r1, #0
 8010980:	f000 80b1 	beq.w	8010ae6 <_free_r+0x16e>
 8010984:	f001 fcec 	bl	8012360 <__malloc_lock>
 8010988:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801098c:	4d56      	ldr	r5, [pc, #344]	@ (8010ae8 <_free_r+0x170>)
 801098e:	f022 0001 	bic.w	r0, r2, #1
 8010992:	f1a7 0308 	sub.w	r3, r7, #8
 8010996:	eb03 0c00 	add.w	ip, r3, r0
 801099a:	68a9      	ldr	r1, [r5, #8]
 801099c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80109a0:	4561      	cmp	r1, ip
 80109a2:	f026 0603 	bic.w	r6, r6, #3
 80109a6:	f002 0201 	and.w	r2, r2, #1
 80109aa:	d11b      	bne.n	80109e4 <_free_r+0x6c>
 80109ac:	4406      	add	r6, r0
 80109ae:	b93a      	cbnz	r2, 80109c0 <_free_r+0x48>
 80109b0:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80109b4:	1a9b      	subs	r3, r3, r2
 80109b6:	4416      	add	r6, r2
 80109b8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80109bc:	60ca      	str	r2, [r1, #12]
 80109be:	6091      	str	r1, [r2, #8]
 80109c0:	f046 0201 	orr.w	r2, r6, #1
 80109c4:	605a      	str	r2, [r3, #4]
 80109c6:	60ab      	str	r3, [r5, #8]
 80109c8:	4b48      	ldr	r3, [pc, #288]	@ (8010aec <_free_r+0x174>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	42b3      	cmp	r3, r6
 80109ce:	d804      	bhi.n	80109da <_free_r+0x62>
 80109d0:	4b47      	ldr	r3, [pc, #284]	@ (8010af0 <_free_r+0x178>)
 80109d2:	4620      	mov	r0, r4
 80109d4:	6819      	ldr	r1, [r3, #0]
 80109d6:	f7ff ff79 	bl	80108cc <_malloc_trim_r>
 80109da:	4620      	mov	r0, r4
 80109dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80109e0:	f001 bcc4 	b.w	801236c <__malloc_unlock>
 80109e4:	f8cc 6004 	str.w	r6, [ip, #4]
 80109e8:	2a00      	cmp	r2, #0
 80109ea:	d138      	bne.n	8010a5e <_free_r+0xe6>
 80109ec:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80109f0:	1a5b      	subs	r3, r3, r1
 80109f2:	4408      	add	r0, r1
 80109f4:	6899      	ldr	r1, [r3, #8]
 80109f6:	f105 0708 	add.w	r7, r5, #8
 80109fa:	42b9      	cmp	r1, r7
 80109fc:	d031      	beq.n	8010a62 <_free_r+0xea>
 80109fe:	68df      	ldr	r7, [r3, #12]
 8010a00:	60cf      	str	r7, [r1, #12]
 8010a02:	60b9      	str	r1, [r7, #8]
 8010a04:	eb0c 0106 	add.w	r1, ip, r6
 8010a08:	6849      	ldr	r1, [r1, #4]
 8010a0a:	07c9      	lsls	r1, r1, #31
 8010a0c:	d40b      	bmi.n	8010a26 <_free_r+0xae>
 8010a0e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8010a12:	4430      	add	r0, r6
 8010a14:	bb3a      	cbnz	r2, 8010a66 <_free_r+0xee>
 8010a16:	4e37      	ldr	r6, [pc, #220]	@ (8010af4 <_free_r+0x17c>)
 8010a18:	42b1      	cmp	r1, r6
 8010a1a:	d124      	bne.n	8010a66 <_free_r+0xee>
 8010a1c:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8010a20:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8010a24:	2201      	movs	r2, #1
 8010a26:	f040 0101 	orr.w	r1, r0, #1
 8010a2a:	6059      	str	r1, [r3, #4]
 8010a2c:	5018      	str	r0, [r3, r0]
 8010a2e:	2a00      	cmp	r2, #0
 8010a30:	d1d3      	bne.n	80109da <_free_r+0x62>
 8010a32:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8010a36:	d21b      	bcs.n	8010a70 <_free_r+0xf8>
 8010a38:	08c2      	lsrs	r2, r0, #3
 8010a3a:	2101      	movs	r1, #1
 8010a3c:	0940      	lsrs	r0, r0, #5
 8010a3e:	4081      	lsls	r1, r0
 8010a40:	6868      	ldr	r0, [r5, #4]
 8010a42:	3201      	adds	r2, #1
 8010a44:	4301      	orrs	r1, r0
 8010a46:	6069      	str	r1, [r5, #4]
 8010a48:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8010a4c:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8010a50:	3908      	subs	r1, #8
 8010a52:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010a56:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8010a5a:	60c3      	str	r3, [r0, #12]
 8010a5c:	e7bd      	b.n	80109da <_free_r+0x62>
 8010a5e:	2200      	movs	r2, #0
 8010a60:	e7d0      	b.n	8010a04 <_free_r+0x8c>
 8010a62:	2201      	movs	r2, #1
 8010a64:	e7ce      	b.n	8010a04 <_free_r+0x8c>
 8010a66:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8010a6a:	60ce      	str	r6, [r1, #12]
 8010a6c:	60b1      	str	r1, [r6, #8]
 8010a6e:	e7da      	b.n	8010a26 <_free_r+0xae>
 8010a70:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8010a74:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8010a78:	d214      	bcs.n	8010aa4 <_free_r+0x12c>
 8010a7a:	0982      	lsrs	r2, r0, #6
 8010a7c:	3238      	adds	r2, #56	@ 0x38
 8010a7e:	1c51      	adds	r1, r2, #1
 8010a80:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8010a84:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8010a88:	428e      	cmp	r6, r1
 8010a8a:	d125      	bne.n	8010ad8 <_free_r+0x160>
 8010a8c:	2001      	movs	r0, #1
 8010a8e:	1092      	asrs	r2, r2, #2
 8010a90:	fa00 f202 	lsl.w	r2, r0, r2
 8010a94:	6868      	ldr	r0, [r5, #4]
 8010a96:	4302      	orrs	r2, r0
 8010a98:	606a      	str	r2, [r5, #4]
 8010a9a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8010a9e:	60b3      	str	r3, [r6, #8]
 8010aa0:	60cb      	str	r3, [r1, #12]
 8010aa2:	e79a      	b.n	80109da <_free_r+0x62>
 8010aa4:	2a14      	cmp	r2, #20
 8010aa6:	d801      	bhi.n	8010aac <_free_r+0x134>
 8010aa8:	325b      	adds	r2, #91	@ 0x5b
 8010aaa:	e7e8      	b.n	8010a7e <_free_r+0x106>
 8010aac:	2a54      	cmp	r2, #84	@ 0x54
 8010aae:	d802      	bhi.n	8010ab6 <_free_r+0x13e>
 8010ab0:	0b02      	lsrs	r2, r0, #12
 8010ab2:	326e      	adds	r2, #110	@ 0x6e
 8010ab4:	e7e3      	b.n	8010a7e <_free_r+0x106>
 8010ab6:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8010aba:	d802      	bhi.n	8010ac2 <_free_r+0x14a>
 8010abc:	0bc2      	lsrs	r2, r0, #15
 8010abe:	3277      	adds	r2, #119	@ 0x77
 8010ac0:	e7dd      	b.n	8010a7e <_free_r+0x106>
 8010ac2:	f240 5154 	movw	r1, #1364	@ 0x554
 8010ac6:	428a      	cmp	r2, r1
 8010ac8:	bf9a      	itte	ls
 8010aca:	0c82      	lsrls	r2, r0, #18
 8010acc:	327c      	addls	r2, #124	@ 0x7c
 8010ace:	227e      	movhi	r2, #126	@ 0x7e
 8010ad0:	e7d5      	b.n	8010a7e <_free_r+0x106>
 8010ad2:	6889      	ldr	r1, [r1, #8]
 8010ad4:	428e      	cmp	r6, r1
 8010ad6:	d004      	beq.n	8010ae2 <_free_r+0x16a>
 8010ad8:	684a      	ldr	r2, [r1, #4]
 8010ada:	f022 0203 	bic.w	r2, r2, #3
 8010ade:	4282      	cmp	r2, r0
 8010ae0:	d8f7      	bhi.n	8010ad2 <_free_r+0x15a>
 8010ae2:	68ce      	ldr	r6, [r1, #12]
 8010ae4:	e7d9      	b.n	8010a9a <_free_r+0x122>
 8010ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ae8:	240002bc 	.word	0x240002bc
 8010aec:	240002b8 	.word	0x240002b8
 8010af0:	24015384 	.word	0x24015384
 8010af4:	240002c4 	.word	0x240002c4

08010af8 <_malloc_r>:
 8010af8:	f101 030b 	add.w	r3, r1, #11
 8010afc:	2b16      	cmp	r3, #22
 8010afe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b02:	4605      	mov	r5, r0
 8010b04:	d906      	bls.n	8010b14 <_malloc_r+0x1c>
 8010b06:	f033 0707 	bics.w	r7, r3, #7
 8010b0a:	d504      	bpl.n	8010b16 <_malloc_r+0x1e>
 8010b0c:	230c      	movs	r3, #12
 8010b0e:	602b      	str	r3, [r5, #0]
 8010b10:	2400      	movs	r4, #0
 8010b12:	e1a3      	b.n	8010e5c <_malloc_r+0x364>
 8010b14:	2710      	movs	r7, #16
 8010b16:	42b9      	cmp	r1, r7
 8010b18:	d8f8      	bhi.n	8010b0c <_malloc_r+0x14>
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	f001 fc20 	bl	8012360 <__malloc_lock>
 8010b20:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8010b24:	4eaf      	ldr	r6, [pc, #700]	@ (8010de4 <_malloc_r+0x2ec>)
 8010b26:	d237      	bcs.n	8010b98 <_malloc_r+0xa0>
 8010b28:	f107 0208 	add.w	r2, r7, #8
 8010b2c:	4432      	add	r2, r6
 8010b2e:	f1a2 0108 	sub.w	r1, r2, #8
 8010b32:	6854      	ldr	r4, [r2, #4]
 8010b34:	428c      	cmp	r4, r1
 8010b36:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8010b3a:	d102      	bne.n	8010b42 <_malloc_r+0x4a>
 8010b3c:	68d4      	ldr	r4, [r2, #12]
 8010b3e:	42a2      	cmp	r2, r4
 8010b40:	d010      	beq.n	8010b64 <_malloc_r+0x6c>
 8010b42:	6863      	ldr	r3, [r4, #4]
 8010b44:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8010b48:	f023 0303 	bic.w	r3, r3, #3
 8010b4c:	60ca      	str	r2, [r1, #12]
 8010b4e:	4423      	add	r3, r4
 8010b50:	6091      	str	r1, [r2, #8]
 8010b52:	685a      	ldr	r2, [r3, #4]
 8010b54:	f042 0201 	orr.w	r2, r2, #1
 8010b58:	605a      	str	r2, [r3, #4]
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	f001 fc06 	bl	801236c <__malloc_unlock>
 8010b60:	3408      	adds	r4, #8
 8010b62:	e17b      	b.n	8010e5c <_malloc_r+0x364>
 8010b64:	3302      	adds	r3, #2
 8010b66:	6934      	ldr	r4, [r6, #16]
 8010b68:	499f      	ldr	r1, [pc, #636]	@ (8010de8 <_malloc_r+0x2f0>)
 8010b6a:	428c      	cmp	r4, r1
 8010b6c:	d077      	beq.n	8010c5e <_malloc_r+0x166>
 8010b6e:	6862      	ldr	r2, [r4, #4]
 8010b70:	f022 0c03 	bic.w	ip, r2, #3
 8010b74:	ebac 0007 	sub.w	r0, ip, r7
 8010b78:	280f      	cmp	r0, #15
 8010b7a:	dd48      	ble.n	8010c0e <_malloc_r+0x116>
 8010b7c:	19e2      	adds	r2, r4, r7
 8010b7e:	f040 0301 	orr.w	r3, r0, #1
 8010b82:	f047 0701 	orr.w	r7, r7, #1
 8010b86:	6067      	str	r7, [r4, #4]
 8010b88:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8010b8c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8010b90:	6053      	str	r3, [r2, #4]
 8010b92:	f844 000c 	str.w	r0, [r4, ip]
 8010b96:	e7e0      	b.n	8010b5a <_malloc_r+0x62>
 8010b98:	0a7b      	lsrs	r3, r7, #9
 8010b9a:	d02a      	beq.n	8010bf2 <_malloc_r+0xfa>
 8010b9c:	2b04      	cmp	r3, #4
 8010b9e:	d812      	bhi.n	8010bc6 <_malloc_r+0xce>
 8010ba0:	09bb      	lsrs	r3, r7, #6
 8010ba2:	3338      	adds	r3, #56	@ 0x38
 8010ba4:	1c5a      	adds	r2, r3, #1
 8010ba6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8010baa:	f1a2 0c08 	sub.w	ip, r2, #8
 8010bae:	6854      	ldr	r4, [r2, #4]
 8010bb0:	4564      	cmp	r4, ip
 8010bb2:	d006      	beq.n	8010bc2 <_malloc_r+0xca>
 8010bb4:	6862      	ldr	r2, [r4, #4]
 8010bb6:	f022 0203 	bic.w	r2, r2, #3
 8010bba:	1bd0      	subs	r0, r2, r7
 8010bbc:	280f      	cmp	r0, #15
 8010bbe:	dd1c      	ble.n	8010bfa <_malloc_r+0x102>
 8010bc0:	3b01      	subs	r3, #1
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	e7cf      	b.n	8010b66 <_malloc_r+0x6e>
 8010bc6:	2b14      	cmp	r3, #20
 8010bc8:	d801      	bhi.n	8010bce <_malloc_r+0xd6>
 8010bca:	335b      	adds	r3, #91	@ 0x5b
 8010bcc:	e7ea      	b.n	8010ba4 <_malloc_r+0xac>
 8010bce:	2b54      	cmp	r3, #84	@ 0x54
 8010bd0:	d802      	bhi.n	8010bd8 <_malloc_r+0xe0>
 8010bd2:	0b3b      	lsrs	r3, r7, #12
 8010bd4:	336e      	adds	r3, #110	@ 0x6e
 8010bd6:	e7e5      	b.n	8010ba4 <_malloc_r+0xac>
 8010bd8:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8010bdc:	d802      	bhi.n	8010be4 <_malloc_r+0xec>
 8010bde:	0bfb      	lsrs	r3, r7, #15
 8010be0:	3377      	adds	r3, #119	@ 0x77
 8010be2:	e7df      	b.n	8010ba4 <_malloc_r+0xac>
 8010be4:	f240 5254 	movw	r2, #1364	@ 0x554
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d804      	bhi.n	8010bf6 <_malloc_r+0xfe>
 8010bec:	0cbb      	lsrs	r3, r7, #18
 8010bee:	337c      	adds	r3, #124	@ 0x7c
 8010bf0:	e7d8      	b.n	8010ba4 <_malloc_r+0xac>
 8010bf2:	233f      	movs	r3, #63	@ 0x3f
 8010bf4:	e7d6      	b.n	8010ba4 <_malloc_r+0xac>
 8010bf6:	237e      	movs	r3, #126	@ 0x7e
 8010bf8:	e7d4      	b.n	8010ba4 <_malloc_r+0xac>
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	68e1      	ldr	r1, [r4, #12]
 8010bfe:	db04      	blt.n	8010c0a <_malloc_r+0x112>
 8010c00:	68a3      	ldr	r3, [r4, #8]
 8010c02:	60d9      	str	r1, [r3, #12]
 8010c04:	608b      	str	r3, [r1, #8]
 8010c06:	18a3      	adds	r3, r4, r2
 8010c08:	e7a3      	b.n	8010b52 <_malloc_r+0x5a>
 8010c0a:	460c      	mov	r4, r1
 8010c0c:	e7d0      	b.n	8010bb0 <_malloc_r+0xb8>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8010c14:	db07      	blt.n	8010c26 <_malloc_r+0x12e>
 8010c16:	44a4      	add	ip, r4
 8010c18:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8010c1c:	f043 0301 	orr.w	r3, r3, #1
 8010c20:	f8cc 3004 	str.w	r3, [ip, #4]
 8010c24:	e799      	b.n	8010b5a <_malloc_r+0x62>
 8010c26:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8010c2a:	6870      	ldr	r0, [r6, #4]
 8010c2c:	f080 8095 	bcs.w	8010d5a <_malloc_r+0x262>
 8010c30:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8010c34:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8010c38:	f04f 0c01 	mov.w	ip, #1
 8010c3c:	3201      	adds	r2, #1
 8010c3e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8010c42:	ea4c 0000 	orr.w	r0, ip, r0
 8010c46:	6070      	str	r0, [r6, #4]
 8010c48:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8010c4c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8010c50:	3808      	subs	r0, #8
 8010c52:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8010c56:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8010c5a:	f8cc 400c 	str.w	r4, [ip, #12]
 8010c5e:	1098      	asrs	r0, r3, #2
 8010c60:	2201      	movs	r2, #1
 8010c62:	4082      	lsls	r2, r0
 8010c64:	6870      	ldr	r0, [r6, #4]
 8010c66:	4290      	cmp	r0, r2
 8010c68:	d326      	bcc.n	8010cb8 <_malloc_r+0x1c0>
 8010c6a:	4210      	tst	r0, r2
 8010c6c:	d106      	bne.n	8010c7c <_malloc_r+0x184>
 8010c6e:	f023 0303 	bic.w	r3, r3, #3
 8010c72:	0052      	lsls	r2, r2, #1
 8010c74:	4210      	tst	r0, r2
 8010c76:	f103 0304 	add.w	r3, r3, #4
 8010c7a:	d0fa      	beq.n	8010c72 <_malloc_r+0x17a>
 8010c7c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8010c80:	46c1      	mov	r9, r8
 8010c82:	469e      	mov	lr, r3
 8010c84:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8010c88:	454c      	cmp	r4, r9
 8010c8a:	f040 80b9 	bne.w	8010e00 <_malloc_r+0x308>
 8010c8e:	f10e 0e01 	add.w	lr, lr, #1
 8010c92:	f01e 0f03 	tst.w	lr, #3
 8010c96:	f109 0908 	add.w	r9, r9, #8
 8010c9a:	d1f3      	bne.n	8010c84 <_malloc_r+0x18c>
 8010c9c:	0798      	lsls	r0, r3, #30
 8010c9e:	f040 80e3 	bne.w	8010e68 <_malloc_r+0x370>
 8010ca2:	6873      	ldr	r3, [r6, #4]
 8010ca4:	ea23 0302 	bic.w	r3, r3, r2
 8010ca8:	6073      	str	r3, [r6, #4]
 8010caa:	6870      	ldr	r0, [r6, #4]
 8010cac:	0052      	lsls	r2, r2, #1
 8010cae:	4290      	cmp	r0, r2
 8010cb0:	d302      	bcc.n	8010cb8 <_malloc_r+0x1c0>
 8010cb2:	2a00      	cmp	r2, #0
 8010cb4:	f040 80e5 	bne.w	8010e82 <_malloc_r+0x38a>
 8010cb8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8010cbc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010cc0:	f023 0903 	bic.w	r9, r3, #3
 8010cc4:	45b9      	cmp	r9, r7
 8010cc6:	d304      	bcc.n	8010cd2 <_malloc_r+0x1da>
 8010cc8:	eba9 0207 	sub.w	r2, r9, r7
 8010ccc:	2a0f      	cmp	r2, #15
 8010cce:	f300 8141 	bgt.w	8010f54 <_malloc_r+0x45c>
 8010cd2:	4b46      	ldr	r3, [pc, #280]	@ (8010dec <_malloc_r+0x2f4>)
 8010cd4:	6819      	ldr	r1, [r3, #0]
 8010cd6:	3110      	adds	r1, #16
 8010cd8:	4439      	add	r1, r7
 8010cda:	2008      	movs	r0, #8
 8010cdc:	9101      	str	r1, [sp, #4]
 8010cde:	f002 f98f 	bl	8013000 <sysconf>
 8010ce2:	4a43      	ldr	r2, [pc, #268]	@ (8010df0 <_malloc_r+0x2f8>)
 8010ce4:	9901      	ldr	r1, [sp, #4]
 8010ce6:	6813      	ldr	r3, [r2, #0]
 8010ce8:	3301      	adds	r3, #1
 8010cea:	bf1f      	itttt	ne
 8010cec:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 8010cf0:	1809      	addne	r1, r1, r0
 8010cf2:	4243      	negne	r3, r0
 8010cf4:	4019      	andne	r1, r3
 8010cf6:	4680      	mov	r8, r0
 8010cf8:	4628      	mov	r0, r5
 8010cfa:	9101      	str	r1, [sp, #4]
 8010cfc:	f002 f95e 	bl	8012fbc <_sbrk_r>
 8010d00:	1c42      	adds	r2, r0, #1
 8010d02:	eb0a 0b09 	add.w	fp, sl, r9
 8010d06:	4604      	mov	r4, r0
 8010d08:	f000 80f7 	beq.w	8010efa <_malloc_r+0x402>
 8010d0c:	4583      	cmp	fp, r0
 8010d0e:	9901      	ldr	r1, [sp, #4]
 8010d10:	4a37      	ldr	r2, [pc, #220]	@ (8010df0 <_malloc_r+0x2f8>)
 8010d12:	d902      	bls.n	8010d1a <_malloc_r+0x222>
 8010d14:	45b2      	cmp	sl, r6
 8010d16:	f040 80f0 	bne.w	8010efa <_malloc_r+0x402>
 8010d1a:	4b36      	ldr	r3, [pc, #216]	@ (8010df4 <_malloc_r+0x2fc>)
 8010d1c:	6818      	ldr	r0, [r3, #0]
 8010d1e:	45a3      	cmp	fp, r4
 8010d20:	eb00 0e01 	add.w	lr, r0, r1
 8010d24:	f8c3 e000 	str.w	lr, [r3]
 8010d28:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8010d2c:	f040 80ab 	bne.w	8010e86 <_malloc_r+0x38e>
 8010d30:	ea1b 0f0c 	tst.w	fp, ip
 8010d34:	f040 80a7 	bne.w	8010e86 <_malloc_r+0x38e>
 8010d38:	68b2      	ldr	r2, [r6, #8]
 8010d3a:	4449      	add	r1, r9
 8010d3c:	f041 0101 	orr.w	r1, r1, #1
 8010d40:	6051      	str	r1, [r2, #4]
 8010d42:	4a2d      	ldr	r2, [pc, #180]	@ (8010df8 <_malloc_r+0x300>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	6811      	ldr	r1, [r2, #0]
 8010d48:	428b      	cmp	r3, r1
 8010d4a:	bf88      	it	hi
 8010d4c:	6013      	strhi	r3, [r2, #0]
 8010d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8010dfc <_malloc_r+0x304>)
 8010d50:	6811      	ldr	r1, [r2, #0]
 8010d52:	428b      	cmp	r3, r1
 8010d54:	bf88      	it	hi
 8010d56:	6013      	strhi	r3, [r2, #0]
 8010d58:	e0cf      	b.n	8010efa <_malloc_r+0x402>
 8010d5a:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8010d5e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8010d62:	d218      	bcs.n	8010d96 <_malloc_r+0x29e>
 8010d64:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8010d68:	3238      	adds	r2, #56	@ 0x38
 8010d6a:	f102 0e01 	add.w	lr, r2, #1
 8010d6e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8010d72:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8010d76:	45f0      	cmp	r8, lr
 8010d78:	d12b      	bne.n	8010dd2 <_malloc_r+0x2da>
 8010d7a:	1092      	asrs	r2, r2, #2
 8010d7c:	f04f 0c01 	mov.w	ip, #1
 8010d80:	fa0c f202 	lsl.w	r2, ip, r2
 8010d84:	4302      	orrs	r2, r0
 8010d86:	6072      	str	r2, [r6, #4]
 8010d88:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8010d8c:	f8c8 4008 	str.w	r4, [r8, #8]
 8010d90:	f8ce 400c 	str.w	r4, [lr, #12]
 8010d94:	e763      	b.n	8010c5e <_malloc_r+0x166>
 8010d96:	2a14      	cmp	r2, #20
 8010d98:	d801      	bhi.n	8010d9e <_malloc_r+0x2a6>
 8010d9a:	325b      	adds	r2, #91	@ 0x5b
 8010d9c:	e7e5      	b.n	8010d6a <_malloc_r+0x272>
 8010d9e:	2a54      	cmp	r2, #84	@ 0x54
 8010da0:	d803      	bhi.n	8010daa <_malloc_r+0x2b2>
 8010da2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8010da6:	326e      	adds	r2, #110	@ 0x6e
 8010da8:	e7df      	b.n	8010d6a <_malloc_r+0x272>
 8010daa:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8010dae:	d803      	bhi.n	8010db8 <_malloc_r+0x2c0>
 8010db0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8010db4:	3277      	adds	r2, #119	@ 0x77
 8010db6:	e7d8      	b.n	8010d6a <_malloc_r+0x272>
 8010db8:	f240 5e54 	movw	lr, #1364	@ 0x554
 8010dbc:	4572      	cmp	r2, lr
 8010dbe:	bf9a      	itte	ls
 8010dc0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8010dc4:	327c      	addls	r2, #124	@ 0x7c
 8010dc6:	227e      	movhi	r2, #126	@ 0x7e
 8010dc8:	e7cf      	b.n	8010d6a <_malloc_r+0x272>
 8010dca:	f8de e008 	ldr.w	lr, [lr, #8]
 8010dce:	45f0      	cmp	r8, lr
 8010dd0:	d005      	beq.n	8010dde <_malloc_r+0x2e6>
 8010dd2:	f8de 2004 	ldr.w	r2, [lr, #4]
 8010dd6:	f022 0203 	bic.w	r2, r2, #3
 8010dda:	4562      	cmp	r2, ip
 8010ddc:	d8f5      	bhi.n	8010dca <_malloc_r+0x2d2>
 8010dde:	f8de 800c 	ldr.w	r8, [lr, #12]
 8010de2:	e7d1      	b.n	8010d88 <_malloc_r+0x290>
 8010de4:	240002bc 	.word	0x240002bc
 8010de8:	240002c4 	.word	0x240002c4
 8010dec:	24015384 	.word	0x24015384
 8010df0:	240002b4 	.word	0x240002b4
 8010df4:	24015354 	.word	0x24015354
 8010df8:	24015380 	.word	0x24015380
 8010dfc:	2401537c 	.word	0x2401537c
 8010e00:	6860      	ldr	r0, [r4, #4]
 8010e02:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8010e06:	f020 0003 	bic.w	r0, r0, #3
 8010e0a:	eba0 0a07 	sub.w	sl, r0, r7
 8010e0e:	f1ba 0f0f 	cmp.w	sl, #15
 8010e12:	dd12      	ble.n	8010e3a <_malloc_r+0x342>
 8010e14:	68a3      	ldr	r3, [r4, #8]
 8010e16:	19e2      	adds	r2, r4, r7
 8010e18:	f047 0701 	orr.w	r7, r7, #1
 8010e1c:	6067      	str	r7, [r4, #4]
 8010e1e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8010e22:	f8cc 3008 	str.w	r3, [ip, #8]
 8010e26:	f04a 0301 	orr.w	r3, sl, #1
 8010e2a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8010e2e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8010e32:	6053      	str	r3, [r2, #4]
 8010e34:	f844 a000 	str.w	sl, [r4, r0]
 8010e38:	e68f      	b.n	8010b5a <_malloc_r+0x62>
 8010e3a:	f1ba 0f00 	cmp.w	sl, #0
 8010e3e:	db11      	blt.n	8010e64 <_malloc_r+0x36c>
 8010e40:	4420      	add	r0, r4
 8010e42:	6843      	ldr	r3, [r0, #4]
 8010e44:	f043 0301 	orr.w	r3, r3, #1
 8010e48:	6043      	str	r3, [r0, #4]
 8010e4a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8010e4e:	4628      	mov	r0, r5
 8010e50:	f8c3 c00c 	str.w	ip, [r3, #12]
 8010e54:	f8cc 3008 	str.w	r3, [ip, #8]
 8010e58:	f001 fa88 	bl	801236c <__malloc_unlock>
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	b003      	add	sp, #12
 8010e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e64:	4664      	mov	r4, ip
 8010e66:	e70f      	b.n	8010c88 <_malloc_r+0x190>
 8010e68:	f858 0908 	ldr.w	r0, [r8], #-8
 8010e6c:	4540      	cmp	r0, r8
 8010e6e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010e72:	f43f af13 	beq.w	8010c9c <_malloc_r+0x1a4>
 8010e76:	e718      	b.n	8010caa <_malloc_r+0x1b2>
 8010e78:	3304      	adds	r3, #4
 8010e7a:	0052      	lsls	r2, r2, #1
 8010e7c:	4210      	tst	r0, r2
 8010e7e:	d0fb      	beq.n	8010e78 <_malloc_r+0x380>
 8010e80:	e6fc      	b.n	8010c7c <_malloc_r+0x184>
 8010e82:	4673      	mov	r3, lr
 8010e84:	e7fa      	b.n	8010e7c <_malloc_r+0x384>
 8010e86:	6810      	ldr	r0, [r2, #0]
 8010e88:	3001      	adds	r0, #1
 8010e8a:	bf1b      	ittet	ne
 8010e8c:	eba4 0b0b 	subne.w	fp, r4, fp
 8010e90:	eb0b 020e 	addne.w	r2, fp, lr
 8010e94:	6014      	streq	r4, [r2, #0]
 8010e96:	601a      	strne	r2, [r3, #0]
 8010e98:	f014 0b07 	ands.w	fp, r4, #7
 8010e9c:	bf1a      	itte	ne
 8010e9e:	f1cb 0008 	rsbne	r0, fp, #8
 8010ea2:	1824      	addne	r4, r4, r0
 8010ea4:	4658      	moveq	r0, fp
 8010ea6:	1862      	adds	r2, r4, r1
 8010ea8:	ea02 010c 	and.w	r1, r2, ip
 8010eac:	4480      	add	r8, r0
 8010eae:	eba8 0801 	sub.w	r8, r8, r1
 8010eb2:	ea08 080c 	and.w	r8, r8, ip
 8010eb6:	4641      	mov	r1, r8
 8010eb8:	4628      	mov	r0, r5
 8010eba:	9201      	str	r2, [sp, #4]
 8010ebc:	f002 f87e 	bl	8012fbc <_sbrk_r>
 8010ec0:	1c43      	adds	r3, r0, #1
 8010ec2:	9a01      	ldr	r2, [sp, #4]
 8010ec4:	4b28      	ldr	r3, [pc, #160]	@ (8010f68 <_malloc_r+0x470>)
 8010ec6:	d107      	bne.n	8010ed8 <_malloc_r+0x3e0>
 8010ec8:	f1bb 0f00 	cmp.w	fp, #0
 8010ecc:	d023      	beq.n	8010f16 <_malloc_r+0x41e>
 8010ece:	f1ab 0008 	sub.w	r0, fp, #8
 8010ed2:	4410      	add	r0, r2
 8010ed4:	f04f 0800 	mov.w	r8, #0
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	60b4      	str	r4, [r6, #8]
 8010edc:	1b00      	subs	r0, r0, r4
 8010ede:	4440      	add	r0, r8
 8010ee0:	4442      	add	r2, r8
 8010ee2:	f040 0001 	orr.w	r0, r0, #1
 8010ee6:	45b2      	cmp	sl, r6
 8010ee8:	601a      	str	r2, [r3, #0]
 8010eea:	6060      	str	r0, [r4, #4]
 8010eec:	f43f af29 	beq.w	8010d42 <_malloc_r+0x24a>
 8010ef0:	f1b9 0f0f 	cmp.w	r9, #15
 8010ef4:	d812      	bhi.n	8010f1c <_malloc_r+0x424>
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	6063      	str	r3, [r4, #4]
 8010efa:	68b3      	ldr	r3, [r6, #8]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	f023 0303 	bic.w	r3, r3, #3
 8010f02:	42bb      	cmp	r3, r7
 8010f04:	eba3 0207 	sub.w	r2, r3, r7
 8010f08:	d301      	bcc.n	8010f0e <_malloc_r+0x416>
 8010f0a:	2a0f      	cmp	r2, #15
 8010f0c:	dc22      	bgt.n	8010f54 <_malloc_r+0x45c>
 8010f0e:	4628      	mov	r0, r5
 8010f10:	f001 fa2c 	bl	801236c <__malloc_unlock>
 8010f14:	e5fc      	b.n	8010b10 <_malloc_r+0x18>
 8010f16:	4610      	mov	r0, r2
 8010f18:	46d8      	mov	r8, fp
 8010f1a:	e7dd      	b.n	8010ed8 <_malloc_r+0x3e0>
 8010f1c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010f20:	f1a9 090c 	sub.w	r9, r9, #12
 8010f24:	f029 0907 	bic.w	r9, r9, #7
 8010f28:	f002 0201 	and.w	r2, r2, #1
 8010f2c:	ea42 0209 	orr.w	r2, r2, r9
 8010f30:	f8ca 2004 	str.w	r2, [sl, #4]
 8010f34:	2105      	movs	r1, #5
 8010f36:	eb0a 0209 	add.w	r2, sl, r9
 8010f3a:	f1b9 0f0f 	cmp.w	r9, #15
 8010f3e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8010f42:	f67f aefe 	bls.w	8010d42 <_malloc_r+0x24a>
 8010f46:	f10a 0108 	add.w	r1, sl, #8
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	f7ff fd14 	bl	8010978 <_free_r>
 8010f50:	4b05      	ldr	r3, [pc, #20]	@ (8010f68 <_malloc_r+0x470>)
 8010f52:	e6f6      	b.n	8010d42 <_malloc_r+0x24a>
 8010f54:	68b4      	ldr	r4, [r6, #8]
 8010f56:	f047 0301 	orr.w	r3, r7, #1
 8010f5a:	4427      	add	r7, r4
 8010f5c:	f042 0201 	orr.w	r2, r2, #1
 8010f60:	6063      	str	r3, [r4, #4]
 8010f62:	60b7      	str	r7, [r6, #8]
 8010f64:	607a      	str	r2, [r7, #4]
 8010f66:	e5f8      	b.n	8010b5a <_malloc_r+0x62>
 8010f68:	24015354 	.word	0x24015354

08010f6c <__ascii_mbtowc>:
 8010f6c:	b082      	sub	sp, #8
 8010f6e:	b901      	cbnz	r1, 8010f72 <__ascii_mbtowc+0x6>
 8010f70:	a901      	add	r1, sp, #4
 8010f72:	b142      	cbz	r2, 8010f86 <__ascii_mbtowc+0x1a>
 8010f74:	b14b      	cbz	r3, 8010f8a <__ascii_mbtowc+0x1e>
 8010f76:	7813      	ldrb	r3, [r2, #0]
 8010f78:	600b      	str	r3, [r1, #0]
 8010f7a:	7812      	ldrb	r2, [r2, #0]
 8010f7c:	1e10      	subs	r0, r2, #0
 8010f7e:	bf18      	it	ne
 8010f80:	2001      	movne	r0, #1
 8010f82:	b002      	add	sp, #8
 8010f84:	4770      	bx	lr
 8010f86:	4610      	mov	r0, r2
 8010f88:	e7fb      	b.n	8010f82 <__ascii_mbtowc+0x16>
 8010f8a:	f06f 0001 	mvn.w	r0, #1
 8010f8e:	e7f8      	b.n	8010f82 <__ascii_mbtowc+0x16>

08010f90 <_svfprintf_r>:
 8010f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f94:	ed2d 8b04 	vpush	{d8-d9}
 8010f98:	b0cb      	sub	sp, #300	@ 0x12c
 8010f9a:	468a      	mov	sl, r1
 8010f9c:	4691      	mov	r9, r2
 8010f9e:	461e      	mov	r6, r3
 8010fa0:	9002      	str	r0, [sp, #8]
 8010fa2:	f7fe fe2d 	bl	800fc00 <_localeconv_r>
 8010fa6:	6803      	ldr	r3, [r0, #0]
 8010fa8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7ef f9e8 	bl	8000380 <strlen>
 8010fb0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8010fb4:	9009      	str	r0, [sp, #36]	@ 0x24
 8010fb6:	061c      	lsls	r4, r3, #24
 8010fb8:	d515      	bpl.n	8010fe6 <_svfprintf_r+0x56>
 8010fba:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010fbe:	b993      	cbnz	r3, 8010fe6 <_svfprintf_r+0x56>
 8010fc0:	9802      	ldr	r0, [sp, #8]
 8010fc2:	2140      	movs	r1, #64	@ 0x40
 8010fc4:	f7ff fd98 	bl	8010af8 <_malloc_r>
 8010fc8:	f8ca 0000 	str.w	r0, [sl]
 8010fcc:	f8ca 0010 	str.w	r0, [sl, #16]
 8010fd0:	b930      	cbnz	r0, 8010fe0 <_svfprintf_r+0x50>
 8010fd2:	9a02      	ldr	r2, [sp, #8]
 8010fd4:	230c      	movs	r3, #12
 8010fd6:	6013      	str	r3, [r2, #0]
 8010fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010fdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010fde:	e1e1      	b.n	80113a4 <_svfprintf_r+0x414>
 8010fe0:	2340      	movs	r3, #64	@ 0x40
 8010fe2:	f8ca 3014 	str.w	r3, [sl, #20]
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
 8010fec:	ed9f 8b96 	vldr	d8, [pc, #600]	@ 8011248 <_svfprintf_r+0x2b8>
 8010ff0:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 8010ff4:	ac21      	add	r4, sp, #132	@ 0x84
 8010ff6:	941e      	str	r4, [sp, #120]	@ 0x78
 8010ff8:	9303      	str	r3, [sp, #12]
 8010ffa:	9307      	str	r3, [sp, #28]
 8010ffc:	930e      	str	r3, [sp, #56]	@ 0x38
 8010ffe:	9310      	str	r3, [sp, #64]	@ 0x40
 8011000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011002:	464b      	mov	r3, r9
 8011004:	461d      	mov	r5, r3
 8011006:	f813 2b01 	ldrb.w	r2, [r3], #1
 801100a:	b10a      	cbz	r2, 8011010 <_svfprintf_r+0x80>
 801100c:	2a25      	cmp	r2, #37	@ 0x25
 801100e:	d1f9      	bne.n	8011004 <_svfprintf_r+0x74>
 8011010:	ebb5 0709 	subs.w	r7, r5, r9
 8011014:	d00d      	beq.n	8011032 <_svfprintf_r+0xa2>
 8011016:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011018:	443b      	add	r3, r7
 801101a:	9320      	str	r3, [sp, #128]	@ 0x80
 801101c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801101e:	3301      	adds	r3, #1
 8011020:	2b07      	cmp	r3, #7
 8011022:	e9c4 9700 	strd	r9, r7, [r4]
 8011026:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011028:	dc75      	bgt.n	8011116 <_svfprintf_r+0x186>
 801102a:	3408      	adds	r4, #8
 801102c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801102e:	443b      	add	r3, r7
 8011030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011032:	782b      	ldrb	r3, [r5, #0]
 8011034:	2b00      	cmp	r3, #0
 8011036:	f001 80ee 	beq.w	8012216 <_svfprintf_r+0x1286>
 801103a:	2200      	movs	r2, #0
 801103c:	1c6b      	adds	r3, r5, #1
 801103e:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 8011042:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011046:	920a      	str	r2, [sp, #40]	@ 0x28
 8011048:	4615      	mov	r5, r2
 801104a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801104e:	9204      	str	r2, [sp, #16]
 8011050:	9308      	str	r3, [sp, #32]
 8011052:	9b04      	ldr	r3, [sp, #16]
 8011054:	3b20      	subs	r3, #32
 8011056:	2b5a      	cmp	r3, #90	@ 0x5a
 8011058:	f200 8564 	bhi.w	8011b24 <_svfprintf_r+0xb94>
 801105c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011060:	0562009c 	.word	0x0562009c
 8011064:	00a40562 	.word	0x00a40562
 8011068:	05620562 	.word	0x05620562
 801106c:	00840562 	.word	0x00840562
 8011070:	05620562 	.word	0x05620562
 8011074:	00b100a7 	.word	0x00b100a7
 8011078:	00ae0562 	.word	0x00ae0562
 801107c:	056200b3 	.word	0x056200b3
 8011080:	00d000cd 	.word	0x00d000cd
 8011084:	00d000d0 	.word	0x00d000d0
 8011088:	00d000d0 	.word	0x00d000d0
 801108c:	00d000d0 	.word	0x00d000d0
 8011090:	00d000d0 	.word	0x00d000d0
 8011094:	05620562 	.word	0x05620562
 8011098:	05620562 	.word	0x05620562
 801109c:	05620562 	.word	0x05620562
 80110a0:	01460562 	.word	0x01460562
 80110a4:	01070562 	.word	0x01070562
 80110a8:	0146011a 	.word	0x0146011a
 80110ac:	01460146 	.word	0x01460146
 80110b0:	05620562 	.word	0x05620562
 80110b4:	05620562 	.word	0x05620562
 80110b8:	056200e1 	.word	0x056200e1
 80110bc:	045c0562 	.word	0x045c0562
 80110c0:	05620562 	.word	0x05620562
 80110c4:	04a60562 	.word	0x04a60562
 80110c8:	04c70562 	.word	0x04c70562
 80110cc:	05620562 	.word	0x05620562
 80110d0:	056204e9 	.word	0x056204e9
 80110d4:	05620562 	.word	0x05620562
 80110d8:	05620562 	.word	0x05620562
 80110dc:	05620562 	.word	0x05620562
 80110e0:	01460562 	.word	0x01460562
 80110e4:	01070562 	.word	0x01070562
 80110e8:	0146011c 	.word	0x0146011c
 80110ec:	01460146 	.word	0x01460146
 80110f0:	011c00e4 	.word	0x011c00e4
 80110f4:	05620101 	.word	0x05620101
 80110f8:	056200fa 	.word	0x056200fa
 80110fc:	045e043d 	.word	0x045e043d
 8011100:	01010495 	.word	0x01010495
 8011104:	04a60562 	.word	0x04a60562
 8011108:	04c9009a 	.word	0x04c9009a
 801110c:	05620562 	.word	0x05620562
 8011110:	05620065 	.word	0x05620065
 8011114:	009a      	.short	0x009a
 8011116:	9802      	ldr	r0, [sp, #8]
 8011118:	aa1e      	add	r2, sp, #120	@ 0x78
 801111a:	4651      	mov	r1, sl
 801111c:	f002 f836 	bl	801318c <__ssprint_r>
 8011120:	2800      	cmp	r0, #0
 8011122:	f040 813a 	bne.w	801139a <_svfprintf_r+0x40a>
 8011126:	ac21      	add	r4, sp, #132	@ 0x84
 8011128:	e780      	b.n	801102c <_svfprintf_r+0x9c>
 801112a:	4b49      	ldr	r3, [pc, #292]	@ (8011250 <_svfprintf_r+0x2c0>)
 801112c:	9312      	str	r3, [sp, #72]	@ 0x48
 801112e:	f015 0320 	ands.w	r3, r5, #32
 8011132:	f000 8481 	beq.w	8011a38 <_svfprintf_r+0xaa8>
 8011136:	3607      	adds	r6, #7
 8011138:	f026 0307 	bic.w	r3, r6, #7
 801113c:	461a      	mov	r2, r3
 801113e:	685f      	ldr	r7, [r3, #4]
 8011140:	f852 6b08 	ldr.w	r6, [r2], #8
 8011144:	9205      	str	r2, [sp, #20]
 8011146:	07eb      	lsls	r3, r5, #31
 8011148:	d50a      	bpl.n	8011160 <_svfprintf_r+0x1d0>
 801114a:	ea56 0307 	orrs.w	r3, r6, r7
 801114e:	d007      	beq.n	8011160 <_svfprintf_r+0x1d0>
 8011150:	2330      	movs	r3, #48	@ 0x30
 8011152:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8011156:	9b04      	ldr	r3, [sp, #16]
 8011158:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 801115c:	f045 0502 	orr.w	r5, r5, #2
 8011160:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8011164:	2302      	movs	r3, #2
 8011166:	e3e7      	b.n	8011938 <_svfprintf_r+0x9a8>
 8011168:	9802      	ldr	r0, [sp, #8]
 801116a:	f7fe fd49 	bl	800fc00 <_localeconv_r>
 801116e:	6843      	ldr	r3, [r0, #4]
 8011170:	9310      	str	r3, [sp, #64]	@ 0x40
 8011172:	4618      	mov	r0, r3
 8011174:	f7ef f904 	bl	8000380 <strlen>
 8011178:	900e      	str	r0, [sp, #56]	@ 0x38
 801117a:	9802      	ldr	r0, [sp, #8]
 801117c:	f7fe fd40 	bl	800fc00 <_localeconv_r>
 8011180:	6883      	ldr	r3, [r0, #8]
 8011182:	9307      	str	r3, [sp, #28]
 8011184:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011186:	b12b      	cbz	r3, 8011194 <_svfprintf_r+0x204>
 8011188:	9b07      	ldr	r3, [sp, #28]
 801118a:	b11b      	cbz	r3, 8011194 <_svfprintf_r+0x204>
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	b10b      	cbz	r3, 8011194 <_svfprintf_r+0x204>
 8011190:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8011194:	9b08      	ldr	r3, [sp, #32]
 8011196:	e758      	b.n	801104a <_svfprintf_r+0xba>
 8011198:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 801119c:	2b00      	cmp	r3, #0
 801119e:	d1f9      	bne.n	8011194 <_svfprintf_r+0x204>
 80111a0:	2320      	movs	r3, #32
 80111a2:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80111a6:	e7f5      	b.n	8011194 <_svfprintf_r+0x204>
 80111a8:	f045 0501 	orr.w	r5, r5, #1
 80111ac:	e7f2      	b.n	8011194 <_svfprintf_r+0x204>
 80111ae:	f856 3b04 	ldr.w	r3, [r6], #4
 80111b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	daed      	bge.n	8011194 <_svfprintf_r+0x204>
 80111b8:	425b      	negs	r3, r3
 80111ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80111bc:	f045 0504 	orr.w	r5, r5, #4
 80111c0:	e7e8      	b.n	8011194 <_svfprintf_r+0x204>
 80111c2:	232b      	movs	r3, #43	@ 0x2b
 80111c4:	e7ed      	b.n	80111a2 <_svfprintf_r+0x212>
 80111c6:	9b08      	ldr	r3, [sp, #32]
 80111c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111cc:	9204      	str	r2, [sp, #16]
 80111ce:	2a2a      	cmp	r2, #42	@ 0x2a
 80111d0:	d10f      	bne.n	80111f2 <_svfprintf_r+0x262>
 80111d2:	f856 2b04 	ldr.w	r2, [r6], #4
 80111d6:	9308      	str	r3, [sp, #32]
 80111d8:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 80111dc:	e7da      	b.n	8011194 <_svfprintf_r+0x204>
 80111de:	fb01 2808 	mla	r8, r1, r8, r2
 80111e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111e6:	9204      	str	r2, [sp, #16]
 80111e8:	9a04      	ldr	r2, [sp, #16]
 80111ea:	3a30      	subs	r2, #48	@ 0x30
 80111ec:	2a09      	cmp	r2, #9
 80111ee:	d9f6      	bls.n	80111de <_svfprintf_r+0x24e>
 80111f0:	e72e      	b.n	8011050 <_svfprintf_r+0xc0>
 80111f2:	f04f 0800 	mov.w	r8, #0
 80111f6:	210a      	movs	r1, #10
 80111f8:	e7f6      	b.n	80111e8 <_svfprintf_r+0x258>
 80111fa:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80111fe:	e7c9      	b.n	8011194 <_svfprintf_r+0x204>
 8011200:	2200      	movs	r2, #0
 8011202:	9b08      	ldr	r3, [sp, #32]
 8011204:	920a      	str	r2, [sp, #40]	@ 0x28
 8011206:	210a      	movs	r1, #10
 8011208:	9a04      	ldr	r2, [sp, #16]
 801120a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801120c:	3a30      	subs	r2, #48	@ 0x30
 801120e:	fb01 2200 	mla	r2, r1, r0, r2
 8011212:	920a      	str	r2, [sp, #40]	@ 0x28
 8011214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011218:	9204      	str	r2, [sp, #16]
 801121a:	3a30      	subs	r2, #48	@ 0x30
 801121c:	2a09      	cmp	r2, #9
 801121e:	d9f3      	bls.n	8011208 <_svfprintf_r+0x278>
 8011220:	e716      	b.n	8011050 <_svfprintf_r+0xc0>
 8011222:	f045 0508 	orr.w	r5, r5, #8
 8011226:	e7b5      	b.n	8011194 <_svfprintf_r+0x204>
 8011228:	9b08      	ldr	r3, [sp, #32]
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	2b68      	cmp	r3, #104	@ 0x68
 801122e:	bf01      	itttt	eq
 8011230:	9b08      	ldreq	r3, [sp, #32]
 8011232:	3301      	addeq	r3, #1
 8011234:	9308      	streq	r3, [sp, #32]
 8011236:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 801123a:	bf18      	it	ne
 801123c:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8011240:	e7a8      	b.n	8011194 <_svfprintf_r+0x204>
 8011242:	bf00      	nop
 8011244:	f3af 8000 	nop.w
	...
 8011250:	08014b51 	.word	0x08014b51
 8011254:	9b08      	ldr	r3, [sp, #32]
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	2b6c      	cmp	r3, #108	@ 0x6c
 801125a:	d105      	bne.n	8011268 <_svfprintf_r+0x2d8>
 801125c:	9b08      	ldr	r3, [sp, #32]
 801125e:	3301      	adds	r3, #1
 8011260:	9308      	str	r3, [sp, #32]
 8011262:	f045 0520 	orr.w	r5, r5, #32
 8011266:	e795      	b.n	8011194 <_svfprintf_r+0x204>
 8011268:	f045 0510 	orr.w	r5, r5, #16
 801126c:	e792      	b.n	8011194 <_svfprintf_r+0x204>
 801126e:	4632      	mov	r2, r6
 8011270:	f852 3b04 	ldr.w	r3, [r2], #4
 8011274:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8011278:	2300      	movs	r3, #0
 801127a:	9205      	str	r2, [sp, #20]
 801127c:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8011280:	469b      	mov	fp, r3
 8011282:	f04f 0801 	mov.w	r8, #1
 8011286:	930c      	str	r3, [sp, #48]	@ 0x30
 8011288:	461f      	mov	r7, r3
 801128a:	9306      	str	r3, [sp, #24]
 801128c:	461e      	mov	r6, r3
 801128e:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 8011292:	e1a1      	b.n	80115d8 <_svfprintf_r+0x648>
 8011294:	f045 0510 	orr.w	r5, r5, #16
 8011298:	06a8      	lsls	r0, r5, #26
 801129a:	d512      	bpl.n	80112c2 <_svfprintf_r+0x332>
 801129c:	3607      	adds	r6, #7
 801129e:	f026 0307 	bic.w	r3, r6, #7
 80112a2:	461a      	mov	r2, r3
 80112a4:	685f      	ldr	r7, [r3, #4]
 80112a6:	f852 6b08 	ldr.w	r6, [r2], #8
 80112aa:	9205      	str	r2, [sp, #20]
 80112ac:	2f00      	cmp	r7, #0
 80112ae:	da06      	bge.n	80112be <_svfprintf_r+0x32e>
 80112b0:	4276      	negs	r6, r6
 80112b2:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80112b6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80112ba:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80112be:	2301      	movs	r3, #1
 80112c0:	e33d      	b.n	801193e <_svfprintf_r+0x9ae>
 80112c2:	4633      	mov	r3, r6
 80112c4:	06e9      	lsls	r1, r5, #27
 80112c6:	f853 7b04 	ldr.w	r7, [r3], #4
 80112ca:	9305      	str	r3, [sp, #20]
 80112cc:	d502      	bpl.n	80112d4 <_svfprintf_r+0x344>
 80112ce:	463e      	mov	r6, r7
 80112d0:	17ff      	asrs	r7, r7, #31
 80112d2:	e7eb      	b.n	80112ac <_svfprintf_r+0x31c>
 80112d4:	066a      	lsls	r2, r5, #25
 80112d6:	d503      	bpl.n	80112e0 <_svfprintf_r+0x350>
 80112d8:	b23e      	sxth	r6, r7
 80112da:	f347 37c0 	sbfx	r7, r7, #15, #1
 80112de:	e7e5      	b.n	80112ac <_svfprintf_r+0x31c>
 80112e0:	05ab      	lsls	r3, r5, #22
 80112e2:	d5f4      	bpl.n	80112ce <_svfprintf_r+0x33e>
 80112e4:	b27e      	sxtb	r6, r7
 80112e6:	f347 17c0 	sbfx	r7, r7, #7, #1
 80112ea:	e7df      	b.n	80112ac <_svfprintf_r+0x31c>
 80112ec:	3607      	adds	r6, #7
 80112ee:	f026 0307 	bic.w	r3, r6, #7
 80112f2:	ecb3 8b02 	vldmia	r3!, {d8}
 80112f6:	ed9f 7b70 	vldr	d7, [pc, #448]	@ 80114b8 <_svfprintf_r+0x528>
 80112fa:	eeb0 6bc8 	vabs.f64	d6, d8
 80112fe:	eeb4 6b47 	vcmp.f64	d6, d7
 8011302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011306:	9305      	str	r3, [sp, #20]
 8011308:	dd18      	ble.n	801133c <_svfprintf_r+0x3ac>
 801130a:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 801130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011312:	d502      	bpl.n	801131a <_svfprintf_r+0x38a>
 8011314:	232d      	movs	r3, #45	@ 0x2d
 8011316:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 801131a:	4a69      	ldr	r2, [pc, #420]	@ (80114c0 <_svfprintf_r+0x530>)
 801131c:	4b69      	ldr	r3, [pc, #420]	@ (80114c4 <_svfprintf_r+0x534>)
 801131e:	9904      	ldr	r1, [sp, #16]
 8011320:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8011324:	2947      	cmp	r1, #71	@ 0x47
 8011326:	bfd4      	ite	le
 8011328:	4691      	movle	r9, r2
 801132a:	4699      	movgt	r9, r3
 801132c:	f04f 0b00 	mov.w	fp, #0
 8011330:	f04f 0803 	mov.w	r8, #3
 8011334:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8011338:	f000 bfa4 	b.w	8012284 <_svfprintf_r+0x12f4>
 801133c:	eeb4 8b48 	vcmp.f64	d8, d8
 8011340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011344:	d709      	bvc.n	801135a <_svfprintf_r+0x3ca>
 8011346:	ee18 3a90 	vmov	r3, s17
 801134a:	2b00      	cmp	r3, #0
 801134c:	bfbc      	itt	lt
 801134e:	232d      	movlt	r3, #45	@ 0x2d
 8011350:	f88d 305b 	strblt.w	r3, [sp, #91]	@ 0x5b
 8011354:	4a5c      	ldr	r2, [pc, #368]	@ (80114c8 <_svfprintf_r+0x538>)
 8011356:	4b5d      	ldr	r3, [pc, #372]	@ (80114cc <_svfprintf_r+0x53c>)
 8011358:	e7e1      	b.n	801131e <_svfprintf_r+0x38e>
 801135a:	9b04      	ldr	r3, [sp, #16]
 801135c:	2b61      	cmp	r3, #97	@ 0x61
 801135e:	d027      	beq.n	80113b0 <_svfprintf_r+0x420>
 8011360:	2b41      	cmp	r3, #65	@ 0x41
 8011362:	d127      	bne.n	80113b4 <_svfprintf_r+0x424>
 8011364:	2358      	movs	r3, #88	@ 0x58
 8011366:	2230      	movs	r2, #48	@ 0x30
 8011368:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 801136c:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 8011370:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8011374:	f045 0502 	orr.w	r5, r5, #2
 8011378:	f340 8089 	ble.w	801148e <_svfprintf_r+0x4fe>
 801137c:	9802      	ldr	r0, [sp, #8]
 801137e:	f108 0101 	add.w	r1, r8, #1
 8011382:	f7ff fbb9 	bl	8010af8 <_malloc_r>
 8011386:	4681      	mov	r9, r0
 8011388:	2800      	cmp	r0, #0
 801138a:	f040 8085 	bne.w	8011498 <_svfprintf_r+0x508>
 801138e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8011392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011396:	f8aa 300c 	strh.w	r3, [sl, #12]
 801139a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801139e:	065b      	lsls	r3, r3, #25
 80113a0:	f53f ae1a 	bmi.w	8010fd8 <_svfprintf_r+0x48>
 80113a4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80113a6:	b04b      	add	sp, #300	@ 0x12c
 80113a8:	ecbd 8b04 	vpop	{d8-d9}
 80113ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b0:	2378      	movs	r3, #120	@ 0x78
 80113b2:	e7d8      	b.n	8011366 <_svfprintf_r+0x3d6>
 80113b4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80113b8:	d070      	beq.n	801149c <_svfprintf_r+0x50c>
 80113ba:	9b04      	ldr	r3, [sp, #16]
 80113bc:	f023 0320 	bic.w	r3, r3, #32
 80113c0:	2b47      	cmp	r3, #71	@ 0x47
 80113c2:	d170      	bne.n	80114a6 <_svfprintf_r+0x516>
 80113c4:	f1b8 0f00 	cmp.w	r8, #0
 80113c8:	d16d      	bne.n	80114a6 <_svfprintf_r+0x516>
 80113ca:	46c3      	mov	fp, r8
 80113cc:	f04f 0801 	mov.w	r8, #1
 80113d0:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80113d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80113d6:	ee18 3a90 	vmov	r3, s17
 80113da:	2b00      	cmp	r3, #0
 80113dc:	da66      	bge.n	80114ac <_svfprintf_r+0x51c>
 80113de:	eeb1 9b48 	vneg.f64	d9, d8
 80113e2:	232d      	movs	r3, #45	@ 0x2d
 80113e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80113e6:	9b04      	ldr	r3, [sp, #16]
 80113e8:	f023 0720 	bic.w	r7, r3, #32
 80113ec:	2f41      	cmp	r7, #65	@ 0x41
 80113ee:	f040 81c6 	bne.w	801177e <_svfprintf_r+0x7ee>
 80113f2:	eeb0 0b49 	vmov.f64	d0, d9
 80113f6:	a818      	add	r0, sp, #96	@ 0x60
 80113f8:	f7fe fc5a 	bl	800fcb0 <frexp>
 80113fc:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
 8011400:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011404:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140c:	bf08      	it	eq
 801140e:	2301      	moveq	r3, #1
 8011410:	9a04      	ldr	r2, [sp, #16]
 8011412:	bf08      	it	eq
 8011414:	9318      	streq	r3, [sp, #96]	@ 0x60
 8011416:	492e      	ldr	r1, [pc, #184]	@ (80114d0 <_svfprintf_r+0x540>)
 8011418:	4b2e      	ldr	r3, [pc, #184]	@ (80114d4 <_svfprintf_r+0x544>)
 801141a:	eeb3 7b00 	vmov.f64	d7, #48	@ 0x41800000  16.0
 801141e:	2a61      	cmp	r2, #97	@ 0x61
 8011420:	bf18      	it	ne
 8011422:	4619      	movne	r1, r3
 8011424:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8011428:	464b      	mov	r3, r9
 801142a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801142e:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8011432:	ee16 0a90 	vmov	r0, s13
 8011436:	5c0e      	ldrb	r6, [r1, r0]
 8011438:	f803 6b01 	strb.w	r6, [r3], #1
 801143c:	1c56      	adds	r6, r2, #1
 801143e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011442:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011446:	d006      	beq.n	8011456 <_svfprintf_r+0x4c6>
 8011448:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801144c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011450:	f102 36ff 	add.w	r6, r2, #4294967295	@ 0xffffffff
 8011454:	d12e      	bne.n	80114b4 <_svfprintf_r+0x524>
 8011456:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801145a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011462:	dc39      	bgt.n	80114d8 <_svfprintf_r+0x548>
 8011464:	eeb4 0b47 	vcmp.f64	d0, d7
 8011468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801146c:	d101      	bne.n	8011472 <_svfprintf_r+0x4e2>
 801146e:	07c6      	lsls	r6, r0, #31
 8011470:	d432      	bmi.n	80114d8 <_svfprintf_r+0x548>
 8011472:	4619      	mov	r1, r3
 8011474:	189e      	adds	r6, r3, r2
 8011476:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 801147a:	1a70      	subs	r0, r6, r1
 801147c:	2800      	cmp	r0, #0
 801147e:	f280 817b 	bge.w	8011778 <_svfprintf_r+0x7e8>
 8011482:	1c51      	adds	r1, r2, #1
 8011484:	3201      	adds	r2, #1
 8011486:	bfb8      	it	lt
 8011488:	2100      	movlt	r1, #0
 801148a:	440b      	add	r3, r1
 801148c:	e037      	b.n	80114fe <_svfprintf_r+0x56e>
 801148e:	f04f 0b00 	mov.w	fp, #0
 8011492:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 8011496:	e79b      	b.n	80113d0 <_svfprintf_r+0x440>
 8011498:	4683      	mov	fp, r0
 801149a:	e799      	b.n	80113d0 <_svfprintf_r+0x440>
 801149c:	f04f 0b00 	mov.w	fp, #0
 80114a0:	f04f 0806 	mov.w	r8, #6
 80114a4:	e794      	b.n	80113d0 <_svfprintf_r+0x440>
 80114a6:	f04f 0b00 	mov.w	fp, #0
 80114aa:	e791      	b.n	80113d0 <_svfprintf_r+0x440>
 80114ac:	2300      	movs	r3, #0
 80114ae:	eeb0 9b48 	vmov.f64	d9, d8
 80114b2:	e797      	b.n	80113e4 <_svfprintf_r+0x454>
 80114b4:	4632      	mov	r2, r6
 80114b6:	e7b8      	b.n	801142a <_svfprintf_r+0x49a>
 80114b8:	ffffffff 	.word	0xffffffff
 80114bc:	7fefffff 	.word	0x7fefffff
 80114c0:	08014d05 	.word	0x08014d05
 80114c4:	08014d09 	.word	0x08014d09
 80114c8:	08014d0d 	.word	0x08014d0d
 80114cc:	08014d11 	.word	0x08014d11
 80114d0:	08014b51 	.word	0x08014b51
 80114d4:	08014b40 	.word	0x08014b40
 80114d8:	7bce      	ldrb	r6, [r1, #15]
 80114da:	931c      	str	r3, [sp, #112]	@ 0x70
 80114dc:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 80114e0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80114e2:	1e42      	subs	r2, r0, #1
 80114e4:	921c      	str	r2, [sp, #112]	@ 0x70
 80114e6:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80114ea:	42b2      	cmp	r2, r6
 80114ec:	f000 8141 	beq.w	8011772 <_svfprintf_r+0x7e2>
 80114f0:	2a39      	cmp	r2, #57	@ 0x39
 80114f2:	bf16      	itet	ne
 80114f4:	3201      	addne	r2, #1
 80114f6:	7a8a      	ldrbeq	r2, [r1, #10]
 80114f8:	b2d2      	uxtbne	r2, r2
 80114fa:	f800 2c01 	strb.w	r2, [r0, #-1]
 80114fe:	eba3 0309 	sub.w	r3, r3, r9
 8011502:	2f47      	cmp	r7, #71	@ 0x47
 8011504:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8011506:	9303      	str	r3, [sp, #12]
 8011508:	f040 8179 	bne.w	80117fe <_svfprintf_r+0x86e>
 801150c:	1cf1      	adds	r1, r6, #3
 801150e:	db02      	blt.n	8011516 <_svfprintf_r+0x586>
 8011510:	4546      	cmp	r6, r8
 8011512:	f340 8196 	ble.w	8011842 <_svfprintf_r+0x8b2>
 8011516:	9b04      	ldr	r3, [sp, #16]
 8011518:	3b02      	subs	r3, #2
 801151a:	9304      	str	r3, [sp, #16]
 801151c:	9904      	ldr	r1, [sp, #16]
 801151e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8011522:	f021 0120 	bic.w	r1, r1, #32
 8011526:	2941      	cmp	r1, #65	@ 0x41
 8011528:	bf08      	it	eq
 801152a:	320f      	addeq	r2, #15
 801152c:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8011530:	bf06      	itte	eq
 8011532:	b2d2      	uxtbeq	r2, r2
 8011534:	2101      	moveq	r1, #1
 8011536:	2100      	movne	r1, #0
 8011538:	2b00      	cmp	r3, #0
 801153a:	9318      	str	r3, [sp, #96]	@ 0x60
 801153c:	bfb8      	it	lt
 801153e:	f1c6 0301 	rsblt	r3, r6, #1
 8011542:	f88d 2068 	strb.w	r2, [sp, #104]	@ 0x68
 8011546:	bfb4      	ite	lt
 8011548:	222d      	movlt	r2, #45	@ 0x2d
 801154a:	222b      	movge	r2, #43	@ 0x2b
 801154c:	2b09      	cmp	r3, #9
 801154e:	f88d 2069 	strb.w	r2, [sp, #105]	@ 0x69
 8011552:	f340 8169 	ble.w	8011828 <_svfprintf_r+0x898>
 8011556:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 801155a:	270a      	movs	r7, #10
 801155c:	4602      	mov	r2, r0
 801155e:	fbb3 f6f7 	udiv	r6, r3, r7
 8011562:	fb07 3116 	mls	r1, r7, r6, r3
 8011566:	3130      	adds	r1, #48	@ 0x30
 8011568:	f802 1c01 	strb.w	r1, [r2, #-1]
 801156c:	4619      	mov	r1, r3
 801156e:	2963      	cmp	r1, #99	@ 0x63
 8011570:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8011574:	4633      	mov	r3, r6
 8011576:	dcf1      	bgt.n	801155c <_svfprintf_r+0x5cc>
 8011578:	3330      	adds	r3, #48	@ 0x30
 801157a:	1e91      	subs	r1, r2, #2
 801157c:	f800 3c01 	strb.w	r3, [r0, #-1]
 8011580:	f10d 0669 	add.w	r6, sp, #105	@ 0x69
 8011584:	460b      	mov	r3, r1
 8011586:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 801158a:	4283      	cmp	r3, r0
 801158c:	f0c0 8147 	bcc.w	801181e <_svfprintf_r+0x88e>
 8011590:	f10d 0379 	add.w	r3, sp, #121	@ 0x79
 8011594:	1a9b      	subs	r3, r3, r2
 8011596:	4281      	cmp	r1, r0
 8011598:	bf88      	it	hi
 801159a:	2300      	movhi	r3, #0
 801159c:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 80115a0:	441a      	add	r2, r3
 80115a2:	ab1a      	add	r3, sp, #104	@ 0x68
 80115a4:	1ad3      	subs	r3, r2, r3
 80115a6:	9a03      	ldr	r2, [sp, #12]
 80115a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80115aa:	2a01      	cmp	r2, #1
 80115ac:	eb03 0802 	add.w	r8, r3, r2
 80115b0:	dc01      	bgt.n	80115b6 <_svfprintf_r+0x626>
 80115b2:	07ea      	lsls	r2, r5, #31
 80115b4:	d501      	bpl.n	80115ba <_svfprintf_r+0x62a>
 80115b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115b8:	4498      	add	r8, r3
 80115ba:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80115be:	2700      	movs	r7, #0
 80115c0:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80115c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80115c6:	9706      	str	r7, [sp, #24]
 80115c8:	463e      	mov	r6, r7
 80115ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	f040 8180 	bne.w	80118d2 <_svfprintf_r+0x942>
 80115d2:	2300      	movs	r3, #0
 80115d4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80115d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80115d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115da:	4543      	cmp	r3, r8
 80115dc:	bfb8      	it	lt
 80115de:	4643      	movlt	r3, r8
 80115e0:	930d      	str	r3, [sp, #52]	@ 0x34
 80115e2:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 80115e6:	b113      	cbz	r3, 80115ee <_svfprintf_r+0x65e>
 80115e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80115ea:	3301      	adds	r3, #1
 80115ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80115ee:	f015 0302 	ands.w	r3, r5, #2
 80115f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80115f4:	bf1e      	ittt	ne
 80115f6:	9b0d      	ldrne	r3, [sp, #52]	@ 0x34
 80115f8:	3302      	addne	r3, #2
 80115fa:	930d      	strne	r3, [sp, #52]	@ 0x34
 80115fc:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8011600:	9314      	str	r3, [sp, #80]	@ 0x50
 8011602:	d120      	bne.n	8011646 <_svfprintf_r+0x6b6>
 8011604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011606:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011608:	1a9b      	subs	r3, r3, r2
 801160a:	2b00      	cmp	r3, #0
 801160c:	dd1b      	ble.n	8011646 <_svfprintf_r+0x6b6>
 801160e:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 8011612:	49a5      	ldr	r1, [pc, #660]	@ (80118a8 <_svfprintf_r+0x918>)
 8011614:	6021      	str	r1, [r4, #0]
 8011616:	2b10      	cmp	r3, #16
 8011618:	f102 0201 	add.w	r2, r2, #1
 801161c:	f104 0008 	add.w	r0, r4, #8
 8011620:	f300 828c 	bgt.w	8011b3c <_svfprintf_r+0xbac>
 8011624:	eb0c 0103 	add.w	r1, ip, r3
 8011628:	2a07      	cmp	r2, #7
 801162a:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 801162e:	6063      	str	r3, [r4, #4]
 8011630:	f340 8299 	ble.w	8011b66 <_svfprintf_r+0xbd6>
 8011634:	9802      	ldr	r0, [sp, #8]
 8011636:	aa1e      	add	r2, sp, #120	@ 0x78
 8011638:	4651      	mov	r1, sl
 801163a:	f001 fda7 	bl	801318c <__ssprint_r>
 801163e:	2800      	cmp	r0, #0
 8011640:	f040 85c7 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011644:	ac21      	add	r4, sp, #132	@ 0x84
 8011646:	f89d 205b 	ldrb.w	r2, [sp, #91]	@ 0x5b
 801164a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801164c:	b16a      	cbz	r2, 801166a <_svfprintf_r+0x6da>
 801164e:	f10d 025b 	add.w	r2, sp, #91	@ 0x5b
 8011652:	6022      	str	r2, [r4, #0]
 8011654:	2201      	movs	r2, #1
 8011656:	4413      	add	r3, r2
 8011658:	9320      	str	r3, [sp, #128]	@ 0x80
 801165a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801165c:	6062      	str	r2, [r4, #4]
 801165e:	4413      	add	r3, r2
 8011660:	2b07      	cmp	r3, #7
 8011662:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011664:	f300 8281 	bgt.w	8011b6a <_svfprintf_r+0xbda>
 8011668:	3408      	adds	r4, #8
 801166a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801166c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801166e:	b162      	cbz	r2, 801168a <_svfprintf_r+0x6fa>
 8011670:	aa17      	add	r2, sp, #92	@ 0x5c
 8011672:	6022      	str	r2, [r4, #0]
 8011674:	2202      	movs	r2, #2
 8011676:	4413      	add	r3, r2
 8011678:	9320      	str	r3, [sp, #128]	@ 0x80
 801167a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801167c:	6062      	str	r2, [r4, #4]
 801167e:	3301      	adds	r3, #1
 8011680:	2b07      	cmp	r3, #7
 8011682:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011684:	f300 827b 	bgt.w	8011b7e <_svfprintf_r+0xbee>
 8011688:	3408      	adds	r4, #8
 801168a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801168c:	2b80      	cmp	r3, #128	@ 0x80
 801168e:	d120      	bne.n	80116d2 <_svfprintf_r+0x742>
 8011690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011692:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011694:	1a9b      	subs	r3, r3, r2
 8011696:	2b00      	cmp	r3, #0
 8011698:	dd1b      	ble.n	80116d2 <_svfprintf_r+0x742>
 801169a:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 801169e:	4983      	ldr	r1, [pc, #524]	@ (80118ac <_svfprintf_r+0x91c>)
 80116a0:	6021      	str	r1, [r4, #0]
 80116a2:	2b10      	cmp	r3, #16
 80116a4:	f102 0201 	add.w	r2, r2, #1
 80116a8:	f104 0008 	add.w	r0, r4, #8
 80116ac:	f300 8271 	bgt.w	8011b92 <_svfprintf_r+0xc02>
 80116b0:	eb0c 0103 	add.w	r1, ip, r3
 80116b4:	2a07      	cmp	r2, #7
 80116b6:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 80116ba:	6063      	str	r3, [r4, #4]
 80116bc:	f340 827e 	ble.w	8011bbc <_svfprintf_r+0xc2c>
 80116c0:	9802      	ldr	r0, [sp, #8]
 80116c2:	aa1e      	add	r2, sp, #120	@ 0x78
 80116c4:	4651      	mov	r1, sl
 80116c6:	f001 fd61 	bl	801318c <__ssprint_r>
 80116ca:	2800      	cmp	r0, #0
 80116cc:	f040 8581 	bne.w	80121d2 <_svfprintf_r+0x1242>
 80116d0:	ac21      	add	r4, sp, #132	@ 0x84
 80116d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116d4:	eba3 0308 	sub.w	r3, r3, r8
 80116d8:	2b00      	cmp	r3, #0
 80116da:	930c      	str	r3, [sp, #48]	@ 0x30
 80116dc:	dd1c      	ble.n	8011718 <_svfprintf_r+0x788>
 80116de:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80116e0:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 80116e4:	2810      	cmp	r0, #16
 80116e6:	4871      	ldr	r0, [pc, #452]	@ (80118ac <_svfprintf_r+0x91c>)
 80116e8:	6020      	str	r0, [r4, #0]
 80116ea:	f102 0201 	add.w	r2, r2, #1
 80116ee:	f104 0108 	add.w	r1, r4, #8
 80116f2:	f300 8265 	bgt.w	8011bc0 <_svfprintf_r+0xc30>
 80116f6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80116f8:	6060      	str	r0, [r4, #4]
 80116fa:	4403      	add	r3, r0
 80116fc:	2a07      	cmp	r2, #7
 80116fe:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8011702:	f340 8272 	ble.w	8011bea <_svfprintf_r+0xc5a>
 8011706:	9802      	ldr	r0, [sp, #8]
 8011708:	aa1e      	add	r2, sp, #120	@ 0x78
 801170a:	4651      	mov	r1, sl
 801170c:	f001 fd3e 	bl	801318c <__ssprint_r>
 8011710:	2800      	cmp	r0, #0
 8011712:	f040 855e 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011716:	ac21      	add	r4, sp, #132	@ 0x84
 8011718:	05e9      	lsls	r1, r5, #23
 801171a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801171c:	f100 826c 	bmi.w	8011bf8 <_svfprintf_r+0xc68>
 8011720:	4443      	add	r3, r8
 8011722:	9320      	str	r3, [sp, #128]	@ 0x80
 8011724:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011726:	3301      	adds	r3, #1
 8011728:	2b07      	cmp	r3, #7
 801172a:	e9c4 9800 	strd	r9, r8, [r4]
 801172e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011730:	f300 82a4 	bgt.w	8011c7c <_svfprintf_r+0xcec>
 8011734:	3408      	adds	r4, #8
 8011736:	076a      	lsls	r2, r5, #29
 8011738:	f100 852d 	bmi.w	8012196 <_svfprintf_r+0x1206>
 801173c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011740:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011742:	428a      	cmp	r2, r1
 8011744:	bfac      	ite	ge
 8011746:	189b      	addge	r3, r3, r2
 8011748:	185b      	addlt	r3, r3, r1
 801174a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801174c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801174e:	b13b      	cbz	r3, 8011760 <_svfprintf_r+0x7d0>
 8011750:	9802      	ldr	r0, [sp, #8]
 8011752:	aa1e      	add	r2, sp, #120	@ 0x78
 8011754:	4651      	mov	r1, sl
 8011756:	f001 fd19 	bl	801318c <__ssprint_r>
 801175a:	2800      	cmp	r0, #0
 801175c:	f040 8539 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011760:	2300      	movs	r3, #0
 8011762:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011764:	f1bb 0f00 	cmp.w	fp, #0
 8011768:	f040 854f 	bne.w	801220a <_svfprintf_r+0x127a>
 801176c:	9e05      	ldr	r6, [sp, #20]
 801176e:	ac21      	add	r4, sp, #132	@ 0x84
 8011770:	e0bc      	b.n	80118ec <_svfprintf_r+0x95c>
 8011772:	f800 cc01 	strb.w	ip, [r0, #-1]
 8011776:	e6b3      	b.n	80114e0 <_svfprintf_r+0x550>
 8011778:	f801 cb01 	strb.w	ip, [r1], #1
 801177c:	e67d      	b.n	801147a <_svfprintf_r+0x4ea>
 801177e:	2f46      	cmp	r7, #70	@ 0x46
 8011780:	d005      	beq.n	801178e <_svfprintf_r+0x7fe>
 8011782:	2f45      	cmp	r7, #69	@ 0x45
 8011784:	d117      	bne.n	80117b6 <_svfprintf_r+0x826>
 8011786:	f108 0601 	add.w	r6, r8, #1
 801178a:	2102      	movs	r1, #2
 801178c:	e001      	b.n	8011792 <_svfprintf_r+0x802>
 801178e:	4646      	mov	r6, r8
 8011790:	2103      	movs	r1, #3
 8011792:	ab1c      	add	r3, sp, #112	@ 0x70
 8011794:	9301      	str	r3, [sp, #4]
 8011796:	ab19      	add	r3, sp, #100	@ 0x64
 8011798:	9300      	str	r3, [sp, #0]
 801179a:	9802      	ldr	r0, [sp, #8]
 801179c:	eeb0 0b49 	vmov.f64	d0, d9
 80117a0:	ab18      	add	r3, sp, #96	@ 0x60
 80117a2:	4632      	mov	r2, r6
 80117a4:	f7fe fb54 	bl	800fe50 <_dtoa_r>
 80117a8:	2f47      	cmp	r7, #71	@ 0x47
 80117aa:	4681      	mov	r9, r0
 80117ac:	d115      	bne.n	80117da <_svfprintf_r+0x84a>
 80117ae:	07e8      	lsls	r0, r5, #31
 80117b0:	d403      	bmi.n	80117ba <_svfprintf_r+0x82a>
 80117b2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80117b4:	e6a3      	b.n	80114fe <_svfprintf_r+0x56e>
 80117b6:	4646      	mov	r6, r8
 80117b8:	e7e7      	b.n	801178a <_svfprintf_r+0x7fa>
 80117ba:	eb09 0306 	add.w	r3, r9, r6
 80117be:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80117c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c6:	bf08      	it	eq
 80117c8:	931c      	streq	r3, [sp, #112]	@ 0x70
 80117ca:	2130      	movs	r1, #48	@ 0x30
 80117cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80117ce:	4293      	cmp	r3, r2
 80117d0:	d9ef      	bls.n	80117b2 <_svfprintf_r+0x822>
 80117d2:	1c50      	adds	r0, r2, #1
 80117d4:	901c      	str	r0, [sp, #112]	@ 0x70
 80117d6:	7011      	strb	r1, [r2, #0]
 80117d8:	e7f8      	b.n	80117cc <_svfprintf_r+0x83c>
 80117da:	2f46      	cmp	r7, #70	@ 0x46
 80117dc:	eb00 0306 	add.w	r3, r0, r6
 80117e0:	d1ed      	bne.n	80117be <_svfprintf_r+0x82e>
 80117e2:	7802      	ldrb	r2, [r0, #0]
 80117e4:	2a30      	cmp	r2, #48	@ 0x30
 80117e6:	d107      	bne.n	80117f8 <_svfprintf_r+0x868>
 80117e8:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80117ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f0:	bf1c      	itt	ne
 80117f2:	f1c6 0601 	rsbne	r6, r6, #1
 80117f6:	9618      	strne	r6, [sp, #96]	@ 0x60
 80117f8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80117fa:	4413      	add	r3, r2
 80117fc:	e7df      	b.n	80117be <_svfprintf_r+0x82e>
 80117fe:	2f46      	cmp	r7, #70	@ 0x46
 8011800:	f47f ae8c 	bne.w	801151c <_svfprintf_r+0x58c>
 8011804:	f005 0301 	and.w	r3, r5, #1
 8011808:	2e00      	cmp	r6, #0
 801180a:	ea43 0308 	orr.w	r3, r3, r8
 801180e:	dd25      	ble.n	801185c <_svfprintf_r+0x8cc>
 8011810:	b37b      	cbz	r3, 8011872 <_svfprintf_r+0x8e2>
 8011812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011814:	18f3      	adds	r3, r6, r3
 8011816:	4498      	add	r8, r3
 8011818:	2366      	movs	r3, #102	@ 0x66
 801181a:	9304      	str	r3, [sp, #16]
 801181c:	e02f      	b.n	801187e <_svfprintf_r+0x8ee>
 801181e:	f813 7b01 	ldrb.w	r7, [r3], #1
 8011822:	f806 7f01 	strb.w	r7, [r6, #1]!
 8011826:	e6b0      	b.n	801158a <_svfprintf_r+0x5fa>
 8011828:	b941      	cbnz	r1, 801183c <_svfprintf_r+0x8ac>
 801182a:	2230      	movs	r2, #48	@ 0x30
 801182c:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
 8011830:	f10d 026b 	add.w	r2, sp, #107	@ 0x6b
 8011834:	3330      	adds	r3, #48	@ 0x30
 8011836:	f802 3b01 	strb.w	r3, [r2], #1
 801183a:	e6b2      	b.n	80115a2 <_svfprintf_r+0x612>
 801183c:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 8011840:	e7f8      	b.n	8011834 <_svfprintf_r+0x8a4>
 8011842:	9b03      	ldr	r3, [sp, #12]
 8011844:	429e      	cmp	r6, r3
 8011846:	da0d      	bge.n	8011864 <_svfprintf_r+0x8d4>
 8011848:	9b03      	ldr	r3, [sp, #12]
 801184a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801184c:	2e00      	cmp	r6, #0
 801184e:	eb03 0802 	add.w	r8, r3, r2
 8011852:	dc0c      	bgt.n	801186e <_svfprintf_r+0x8de>
 8011854:	f1c6 0301 	rsb	r3, r6, #1
 8011858:	4498      	add	r8, r3
 801185a:	e008      	b.n	801186e <_svfprintf_r+0x8de>
 801185c:	b15b      	cbz	r3, 8011876 <_svfprintf_r+0x8e6>
 801185e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011860:	3301      	adds	r3, #1
 8011862:	e7d8      	b.n	8011816 <_svfprintf_r+0x886>
 8011864:	07eb      	lsls	r3, r5, #31
 8011866:	d51d      	bpl.n	80118a4 <_svfprintf_r+0x914>
 8011868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801186a:	eb06 0803 	add.w	r8, r6, r3
 801186e:	2367      	movs	r3, #103	@ 0x67
 8011870:	e7d3      	b.n	801181a <_svfprintf_r+0x88a>
 8011872:	46b0      	mov	r8, r6
 8011874:	e7d0      	b.n	8011818 <_svfprintf_r+0x888>
 8011876:	2366      	movs	r3, #102	@ 0x66
 8011878:	9304      	str	r3, [sp, #16]
 801187a:	f04f 0801 	mov.w	r8, #1
 801187e:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8011882:	9306      	str	r3, [sp, #24]
 8011884:	d023      	beq.n	80118ce <_svfprintf_r+0x93e>
 8011886:	2700      	movs	r7, #0
 8011888:	2e00      	cmp	r6, #0
 801188a:	9706      	str	r7, [sp, #24]
 801188c:	f77f ae9d 	ble.w	80115ca <_svfprintf_r+0x63a>
 8011890:	9b07      	ldr	r3, [sp, #28]
 8011892:	781b      	ldrb	r3, [r3, #0]
 8011894:	2bff      	cmp	r3, #255	@ 0xff
 8011896:	d10b      	bne.n	80118b0 <_svfprintf_r+0x920>
 8011898:	9b06      	ldr	r3, [sp, #24]
 801189a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801189c:	443b      	add	r3, r7
 801189e:	fb02 8803 	mla	r8, r2, r3, r8
 80118a2:	e692      	b.n	80115ca <_svfprintf_r+0x63a>
 80118a4:	46b0      	mov	r8, r6
 80118a6:	e7e2      	b.n	801186e <_svfprintf_r+0x8de>
 80118a8:	08014d25 	.word	0x08014d25
 80118ac:	08014d15 	.word	0x08014d15
 80118b0:	42b3      	cmp	r3, r6
 80118b2:	daf1      	bge.n	8011898 <_svfprintf_r+0x908>
 80118b4:	1af6      	subs	r6, r6, r3
 80118b6:	9b07      	ldr	r3, [sp, #28]
 80118b8:	785b      	ldrb	r3, [r3, #1]
 80118ba:	b133      	cbz	r3, 80118ca <_svfprintf_r+0x93a>
 80118bc:	9b06      	ldr	r3, [sp, #24]
 80118be:	3301      	adds	r3, #1
 80118c0:	9306      	str	r3, [sp, #24]
 80118c2:	9b07      	ldr	r3, [sp, #28]
 80118c4:	3301      	adds	r3, #1
 80118c6:	9307      	str	r3, [sp, #28]
 80118c8:	e7e2      	b.n	8011890 <_svfprintf_r+0x900>
 80118ca:	3701      	adds	r7, #1
 80118cc:	e7e0      	b.n	8011890 <_svfprintf_r+0x900>
 80118ce:	9f06      	ldr	r7, [sp, #24]
 80118d0:	e67b      	b.n	80115ca <_svfprintf_r+0x63a>
 80118d2:	232d      	movs	r3, #45	@ 0x2d
 80118d4:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80118d8:	e67b      	b.n	80115d2 <_svfprintf_r+0x642>
 80118da:	06af      	lsls	r7, r5, #26
 80118dc:	d50a      	bpl.n	80118f4 <_svfprintf_r+0x964>
 80118de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80118e0:	6833      	ldr	r3, [r6, #0]
 80118e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80118e4:	17d2      	asrs	r2, r2, #31
 80118e6:	e9c3 1200 	strd	r1, r2, [r3]
 80118ea:	3604      	adds	r6, #4
 80118ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80118f0:	f7ff bb87 	b.w	8011002 <_svfprintf_r+0x72>
 80118f4:	06e8      	lsls	r0, r5, #27
 80118f6:	d503      	bpl.n	8011900 <_svfprintf_r+0x970>
 80118f8:	6833      	ldr	r3, [r6, #0]
 80118fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80118fc:	601a      	str	r2, [r3, #0]
 80118fe:	e7f4      	b.n	80118ea <_svfprintf_r+0x95a>
 8011900:	0669      	lsls	r1, r5, #25
 8011902:	d503      	bpl.n	801190c <_svfprintf_r+0x97c>
 8011904:	6833      	ldr	r3, [r6, #0]
 8011906:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011908:	801a      	strh	r2, [r3, #0]
 801190a:	e7ee      	b.n	80118ea <_svfprintf_r+0x95a>
 801190c:	05aa      	lsls	r2, r5, #22
 801190e:	d5f3      	bpl.n	80118f8 <_svfprintf_r+0x968>
 8011910:	6833      	ldr	r3, [r6, #0]
 8011912:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011914:	701a      	strb	r2, [r3, #0]
 8011916:	e7e8      	b.n	80118ea <_svfprintf_r+0x95a>
 8011918:	f045 0510 	orr.w	r5, r5, #16
 801191c:	f015 0320 	ands.w	r3, r5, #32
 8011920:	d020      	beq.n	8011964 <_svfprintf_r+0x9d4>
 8011922:	3607      	adds	r6, #7
 8011924:	f026 0307 	bic.w	r3, r6, #7
 8011928:	461a      	mov	r2, r3
 801192a:	685f      	ldr	r7, [r3, #4]
 801192c:	f852 6b08 	ldr.w	r6, [r2], #8
 8011930:	9205      	str	r2, [sp, #20]
 8011932:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8011936:	2300      	movs	r3, #0
 8011938:	2200      	movs	r2, #0
 801193a:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 801193e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8011942:	f000 8473 	beq.w	801222c <_svfprintf_r+0x129c>
 8011946:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 801194a:	9206      	str	r2, [sp, #24]
 801194c:	ea56 0207 	orrs.w	r2, r6, r7
 8011950:	f040 8471 	bne.w	8012236 <_svfprintf_r+0x12a6>
 8011954:	f1b8 0f00 	cmp.w	r8, #0
 8011958:	f000 80dc 	beq.w	8011b14 <_svfprintf_r+0xb84>
 801195c:	2b01      	cmp	r3, #1
 801195e:	f040 846d 	bne.w	801223c <_svfprintf_r+0x12ac>
 8011962:	e083      	b.n	8011a6c <_svfprintf_r+0xadc>
 8011964:	4632      	mov	r2, r6
 8011966:	f015 0710 	ands.w	r7, r5, #16
 801196a:	f852 6b04 	ldr.w	r6, [r2], #4
 801196e:	9205      	str	r2, [sp, #20]
 8011970:	d001      	beq.n	8011976 <_svfprintf_r+0x9e6>
 8011972:	461f      	mov	r7, r3
 8011974:	e7dd      	b.n	8011932 <_svfprintf_r+0x9a2>
 8011976:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801197a:	d001      	beq.n	8011980 <_svfprintf_r+0x9f0>
 801197c:	b2b6      	uxth	r6, r6
 801197e:	e7d8      	b.n	8011932 <_svfprintf_r+0x9a2>
 8011980:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8011984:	d0d5      	beq.n	8011932 <_svfprintf_r+0x9a2>
 8011986:	b2f6      	uxtb	r6, r6
 8011988:	e7f3      	b.n	8011972 <_svfprintf_r+0x9e2>
 801198a:	4633      	mov	r3, r6
 801198c:	2278      	movs	r2, #120	@ 0x78
 801198e:	f853 6b04 	ldr.w	r6, [r3], #4
 8011992:	9305      	str	r3, [sp, #20]
 8011994:	f647 0330 	movw	r3, #30768	@ 0x7830
 8011998:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
 801199c:	4b94      	ldr	r3, [pc, #592]	@ (8011bf0 <_svfprintf_r+0xc60>)
 801199e:	9312      	str	r3, [sp, #72]	@ 0x48
 80119a0:	2700      	movs	r7, #0
 80119a2:	f045 0502 	orr.w	r5, r5, #2
 80119a6:	2302      	movs	r3, #2
 80119a8:	9204      	str	r2, [sp, #16]
 80119aa:	e7c5      	b.n	8011938 <_svfprintf_r+0x9a8>
 80119ac:	4633      	mov	r3, r6
 80119ae:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80119b2:	f853 9b04 	ldr.w	r9, [r3], #4
 80119b6:	9305      	str	r3, [sp, #20]
 80119b8:	f04f 0600 	mov.w	r6, #0
 80119bc:	f88d 605b 	strb.w	r6, [sp, #91]	@ 0x5b
 80119c0:	d00f      	beq.n	80119e2 <_svfprintf_r+0xa52>
 80119c2:	4642      	mov	r2, r8
 80119c4:	4631      	mov	r1, r6
 80119c6:	4648      	mov	r0, r9
 80119c8:	f7ee fc8a 	bl	80002e0 <memchr>
 80119cc:	4683      	mov	fp, r0
 80119ce:	2800      	cmp	r0, #0
 80119d0:	f43f acb0 	beq.w	8011334 <_svfprintf_r+0x3a4>
 80119d4:	eba0 0809 	sub.w	r8, r0, r9
 80119d8:	46b3      	mov	fp, r6
 80119da:	960c      	str	r6, [sp, #48]	@ 0x30
 80119dc:	4637      	mov	r7, r6
 80119de:	9606      	str	r6, [sp, #24]
 80119e0:	e5fa      	b.n	80115d8 <_svfprintf_r+0x648>
 80119e2:	4648      	mov	r0, r9
 80119e4:	f7ee fccc 	bl	8000380 <strlen>
 80119e8:	46b3      	mov	fp, r6
 80119ea:	4680      	mov	r8, r0
 80119ec:	e4a2      	b.n	8011334 <_svfprintf_r+0x3a4>
 80119ee:	f045 0510 	orr.w	r5, r5, #16
 80119f2:	f015 0320 	ands.w	r3, r5, #32
 80119f6:	d009      	beq.n	8011a0c <_svfprintf_r+0xa7c>
 80119f8:	3607      	adds	r6, #7
 80119fa:	f026 0307 	bic.w	r3, r6, #7
 80119fe:	461a      	mov	r2, r3
 8011a00:	685f      	ldr	r7, [r3, #4]
 8011a02:	f852 6b08 	ldr.w	r6, [r2], #8
 8011a06:	9205      	str	r2, [sp, #20]
 8011a08:	2301      	movs	r3, #1
 8011a0a:	e795      	b.n	8011938 <_svfprintf_r+0x9a8>
 8011a0c:	4632      	mov	r2, r6
 8011a0e:	f015 0710 	ands.w	r7, r5, #16
 8011a12:	f852 6b04 	ldr.w	r6, [r2], #4
 8011a16:	9205      	str	r2, [sp, #20]
 8011a18:	d001      	beq.n	8011a1e <_svfprintf_r+0xa8e>
 8011a1a:	461f      	mov	r7, r3
 8011a1c:	e7f4      	b.n	8011a08 <_svfprintf_r+0xa78>
 8011a1e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8011a22:	d001      	beq.n	8011a28 <_svfprintf_r+0xa98>
 8011a24:	b2b6      	uxth	r6, r6
 8011a26:	e7ef      	b.n	8011a08 <_svfprintf_r+0xa78>
 8011a28:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8011a2c:	d0ec      	beq.n	8011a08 <_svfprintf_r+0xa78>
 8011a2e:	b2f6      	uxtb	r6, r6
 8011a30:	e7f3      	b.n	8011a1a <_svfprintf_r+0xa8a>
 8011a32:	4b70      	ldr	r3, [pc, #448]	@ (8011bf4 <_svfprintf_r+0xc64>)
 8011a34:	f7ff bb7a 	b.w	801112c <_svfprintf_r+0x19c>
 8011a38:	4632      	mov	r2, r6
 8011a3a:	f015 0710 	ands.w	r7, r5, #16
 8011a3e:	f852 6b04 	ldr.w	r6, [r2], #4
 8011a42:	9205      	str	r2, [sp, #20]
 8011a44:	d002      	beq.n	8011a4c <_svfprintf_r+0xabc>
 8011a46:	461f      	mov	r7, r3
 8011a48:	f7ff bb7d 	b.w	8011146 <_svfprintf_r+0x1b6>
 8011a4c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8011a50:	d002      	beq.n	8011a58 <_svfprintf_r+0xac8>
 8011a52:	b2b6      	uxth	r6, r6
 8011a54:	f7ff bb77 	b.w	8011146 <_svfprintf_r+0x1b6>
 8011a58:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8011a5c:	f43f ab73 	beq.w	8011146 <_svfprintf_r+0x1b6>
 8011a60:	b2f6      	uxtb	r6, r6
 8011a62:	e7f0      	b.n	8011a46 <_svfprintf_r+0xab6>
 8011a64:	2e0a      	cmp	r6, #10
 8011a66:	f177 0300 	sbcs.w	r3, r7, #0
 8011a6a:	d206      	bcs.n	8011a7a <_svfprintf_r+0xaea>
 8011a6c:	3630      	adds	r6, #48	@ 0x30
 8011a6e:	b2f6      	uxtb	r6, r6
 8011a70:	f88d 6127 	strb.w	r6, [sp, #295]	@ 0x127
 8011a74:	f20d 1927 	addw	r9, sp, #295	@ 0x127
 8011a78:	e3fc      	b.n	8012274 <_svfprintf_r+0x12e4>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	9303      	str	r3, [sp, #12]
 8011a7e:	9b06      	ldr	r3, [sp, #24]
 8011a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011a84:	ad4a      	add	r5, sp, #296	@ 0x128
 8011a86:	930c      	str	r3, [sp, #48]	@ 0x30
 8011a88:	220a      	movs	r2, #10
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	4639      	mov	r1, r7
 8011a90:	f7ee fc7e 	bl	8000390 <__aeabi_uldivmod>
 8011a94:	3230      	adds	r2, #48	@ 0x30
 8011a96:	f805 2c01 	strb.w	r2, [r5, #-1]
 8011a9a:	9a03      	ldr	r2, [sp, #12]
 8011a9c:	3201      	adds	r2, #1
 8011a9e:	9203      	str	r2, [sp, #12]
 8011aa0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	468b      	mov	fp, r1
 8011aa6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8011aaa:	b1e2      	cbz	r2, 8011ae6 <_svfprintf_r+0xb56>
 8011aac:	9a07      	ldr	r2, [sp, #28]
 8011aae:	9903      	ldr	r1, [sp, #12]
 8011ab0:	7812      	ldrb	r2, [r2, #0]
 8011ab2:	4291      	cmp	r1, r2
 8011ab4:	d117      	bne.n	8011ae6 <_svfprintf_r+0xb56>
 8011ab6:	29ff      	cmp	r1, #255	@ 0xff
 8011ab8:	d015      	beq.n	8011ae6 <_svfprintf_r+0xb56>
 8011aba:	2e0a      	cmp	r6, #10
 8011abc:	f177 0200 	sbcs.w	r2, r7, #0
 8011ac0:	d311      	bcc.n	8011ae6 <_svfprintf_r+0xb56>
 8011ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ac4:	9003      	str	r0, [sp, #12]
 8011ac6:	eba9 0903 	sub.w	r9, r9, r3
 8011aca:	461a      	mov	r2, r3
 8011acc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011ace:	4648      	mov	r0, r9
 8011ad0:	f7fe f87c 	bl	800fbcc <strncpy>
 8011ad4:	9b07      	ldr	r3, [sp, #28]
 8011ad6:	785a      	ldrb	r2, [r3, #1]
 8011ad8:	9b03      	ldr	r3, [sp, #12]
 8011ada:	b11a      	cbz	r2, 8011ae4 <_svfprintf_r+0xb54>
 8011adc:	9a07      	ldr	r2, [sp, #28]
 8011ade:	3201      	adds	r2, #1
 8011ae0:	9207      	str	r2, [sp, #28]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	9203      	str	r2, [sp, #12]
 8011ae6:	2e0a      	cmp	r6, #10
 8011ae8:	f177 0700 	sbcs.w	r7, r7, #0
 8011aec:	f0c0 83c2 	bcc.w	8012274 <_svfprintf_r+0x12e4>
 8011af0:	461e      	mov	r6, r3
 8011af2:	465f      	mov	r7, fp
 8011af4:	464d      	mov	r5, r9
 8011af6:	e7c7      	b.n	8011a88 <_svfprintf_r+0xaf8>
 8011af8:	f006 030f 	and.w	r3, r6, #15
 8011afc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011afe:	0936      	lsrs	r6, r6, #4
 8011b00:	5cd3      	ldrb	r3, [r2, r3]
 8011b02:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011b06:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8011b0a:	093f      	lsrs	r7, r7, #4
 8011b0c:	ea56 0307 	orrs.w	r3, r6, r7
 8011b10:	d1f2      	bne.n	8011af8 <_svfprintf_r+0xb68>
 8011b12:	e3af      	b.n	8012274 <_svfprintf_r+0x12e4>
 8011b14:	b91b      	cbnz	r3, 8011b1e <_svfprintf_r+0xb8e>
 8011b16:	07e8      	lsls	r0, r5, #31
 8011b18:	d501      	bpl.n	8011b1e <_svfprintf_r+0xb8e>
 8011b1a:	2630      	movs	r6, #48	@ 0x30
 8011b1c:	e7a8      	b.n	8011a70 <_svfprintf_r+0xae0>
 8011b1e:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 8011b22:	e3a7      	b.n	8012274 <_svfprintf_r+0x12e4>
 8011b24:	9b04      	ldr	r3, [sp, #16]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	f000 8375 	beq.w	8012216 <_svfprintf_r+0x1286>
 8011b2c:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8011b30:	2300      	movs	r3, #0
 8011b32:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8011b36:	9605      	str	r6, [sp, #20]
 8011b38:	f7ff bba2 	b.w	8011280 <_svfprintf_r+0x2f0>
 8011b3c:	2110      	movs	r1, #16
 8011b3e:	6061      	str	r1, [r4, #4]
 8011b40:	2a07      	cmp	r2, #7
 8011b42:	4461      	add	r1, ip
 8011b44:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8011b48:	dd0a      	ble.n	8011b60 <_svfprintf_r+0xbd0>
 8011b4a:	9802      	ldr	r0, [sp, #8]
 8011b4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8011b4e:	aa1e      	add	r2, sp, #120	@ 0x78
 8011b50:	4651      	mov	r1, sl
 8011b52:	f001 fb1b 	bl	801318c <__ssprint_r>
 8011b56:	2800      	cmp	r0, #0
 8011b58:	f040 833b 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011b5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011b5e:	a821      	add	r0, sp, #132	@ 0x84
 8011b60:	3b10      	subs	r3, #16
 8011b62:	4604      	mov	r4, r0
 8011b64:	e553      	b.n	801160e <_svfprintf_r+0x67e>
 8011b66:	4604      	mov	r4, r0
 8011b68:	e56d      	b.n	8011646 <_svfprintf_r+0x6b6>
 8011b6a:	9802      	ldr	r0, [sp, #8]
 8011b6c:	aa1e      	add	r2, sp, #120	@ 0x78
 8011b6e:	4651      	mov	r1, sl
 8011b70:	f001 fb0c 	bl	801318c <__ssprint_r>
 8011b74:	2800      	cmp	r0, #0
 8011b76:	f040 832c 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011b7a:	ac21      	add	r4, sp, #132	@ 0x84
 8011b7c:	e575      	b.n	801166a <_svfprintf_r+0x6da>
 8011b7e:	9802      	ldr	r0, [sp, #8]
 8011b80:	aa1e      	add	r2, sp, #120	@ 0x78
 8011b82:	4651      	mov	r1, sl
 8011b84:	f001 fb02 	bl	801318c <__ssprint_r>
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	f040 8322 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011b8e:	ac21      	add	r4, sp, #132	@ 0x84
 8011b90:	e57b      	b.n	801168a <_svfprintf_r+0x6fa>
 8011b92:	2110      	movs	r1, #16
 8011b94:	6061      	str	r1, [r4, #4]
 8011b96:	2a07      	cmp	r2, #7
 8011b98:	4461      	add	r1, ip
 8011b9a:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8011b9e:	dd0a      	ble.n	8011bb6 <_svfprintf_r+0xc26>
 8011ba0:	9802      	ldr	r0, [sp, #8]
 8011ba2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011ba4:	aa1e      	add	r2, sp, #120	@ 0x78
 8011ba6:	4651      	mov	r1, sl
 8011ba8:	f001 faf0 	bl	801318c <__ssprint_r>
 8011bac:	2800      	cmp	r0, #0
 8011bae:	f040 8310 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011bb2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011bb4:	a821      	add	r0, sp, #132	@ 0x84
 8011bb6:	3b10      	subs	r3, #16
 8011bb8:	4604      	mov	r4, r0
 8011bba:	e56e      	b.n	801169a <_svfprintf_r+0x70a>
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	e588      	b.n	80116d2 <_svfprintf_r+0x742>
 8011bc0:	2010      	movs	r0, #16
 8011bc2:	4403      	add	r3, r0
 8011bc4:	2a07      	cmp	r2, #7
 8011bc6:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8011bca:	6060      	str	r0, [r4, #4]
 8011bcc:	dd08      	ble.n	8011be0 <_svfprintf_r+0xc50>
 8011bce:	9802      	ldr	r0, [sp, #8]
 8011bd0:	aa1e      	add	r2, sp, #120	@ 0x78
 8011bd2:	4651      	mov	r1, sl
 8011bd4:	f001 fada 	bl	801318c <__ssprint_r>
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	f040 82fa 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011bde:	a921      	add	r1, sp, #132	@ 0x84
 8011be0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011be2:	3b10      	subs	r3, #16
 8011be4:	930c      	str	r3, [sp, #48]	@ 0x30
 8011be6:	460c      	mov	r4, r1
 8011be8:	e579      	b.n	80116de <_svfprintf_r+0x74e>
 8011bea:	460c      	mov	r4, r1
 8011bec:	e594      	b.n	8011718 <_svfprintf_r+0x788>
 8011bee:	bf00      	nop
 8011bf0:	08014b51 	.word	0x08014b51
 8011bf4:	08014b40 	.word	0x08014b40
 8011bf8:	9a04      	ldr	r2, [sp, #16]
 8011bfa:	2a65      	cmp	r2, #101	@ 0x65
 8011bfc:	f340 823e 	ble.w	801207c <_svfprintf_r+0x10ec>
 8011c00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c08:	d169      	bne.n	8011cde <_svfprintf_r+0xd4e>
 8011c0a:	4a72      	ldr	r2, [pc, #456]	@ (8011dd4 <_svfprintf_r+0xe44>)
 8011c0c:	6022      	str	r2, [r4, #0]
 8011c0e:	2201      	movs	r2, #1
 8011c10:	4413      	add	r3, r2
 8011c12:	9320      	str	r3, [sp, #128]	@ 0x80
 8011c14:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011c16:	6062      	str	r2, [r4, #4]
 8011c18:	4413      	add	r3, r2
 8011c1a:	2b07      	cmp	r3, #7
 8011c1c:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011c1e:	dc37      	bgt.n	8011c90 <_svfprintf_r+0xd00>
 8011c20:	3408      	adds	r4, #8
 8011c22:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011c24:	9a03      	ldr	r2, [sp, #12]
 8011c26:	4293      	cmp	r3, r2
 8011c28:	db02      	blt.n	8011c30 <_svfprintf_r+0xca0>
 8011c2a:	07ea      	lsls	r2, r5, #31
 8011c2c:	f57f ad83 	bpl.w	8011736 <_svfprintf_r+0x7a6>
 8011c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c32:	6023      	str	r3, [r4, #0]
 8011c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c38:	6063      	str	r3, [r4, #4]
 8011c3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011c3c:	4413      	add	r3, r2
 8011c3e:	9320      	str	r3, [sp, #128]	@ 0x80
 8011c40:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011c42:	3301      	adds	r3, #1
 8011c44:	2b07      	cmp	r3, #7
 8011c46:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011c48:	dc2c      	bgt.n	8011ca4 <_svfprintf_r+0xd14>
 8011c4a:	3408      	adds	r4, #8
 8011c4c:	9b03      	ldr	r3, [sp, #12]
 8011c4e:	1e5e      	subs	r6, r3, #1
 8011c50:	2e00      	cmp	r6, #0
 8011c52:	f77f ad70 	ble.w	8011736 <_svfprintf_r+0x7a6>
 8011c56:	4f60      	ldr	r7, [pc, #384]	@ (8011dd8 <_svfprintf_r+0xe48>)
 8011c58:	f04f 0810 	mov.w	r8, #16
 8011c5c:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8011c60:	2e10      	cmp	r6, #16
 8011c62:	f103 0301 	add.w	r3, r3, #1
 8011c66:	f104 0108 	add.w	r1, r4, #8
 8011c6a:	6027      	str	r7, [r4, #0]
 8011c6c:	dc24      	bgt.n	8011cb8 <_svfprintf_r+0xd28>
 8011c6e:	6066      	str	r6, [r4, #4]
 8011c70:	2b07      	cmp	r3, #7
 8011c72:	4416      	add	r6, r2
 8011c74:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 8011c78:	f340 828a 	ble.w	8012190 <_svfprintf_r+0x1200>
 8011c7c:	9802      	ldr	r0, [sp, #8]
 8011c7e:	aa1e      	add	r2, sp, #120	@ 0x78
 8011c80:	4651      	mov	r1, sl
 8011c82:	f001 fa83 	bl	801318c <__ssprint_r>
 8011c86:	2800      	cmp	r0, #0
 8011c88:	f040 82a3 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011c8c:	ac21      	add	r4, sp, #132	@ 0x84
 8011c8e:	e552      	b.n	8011736 <_svfprintf_r+0x7a6>
 8011c90:	9802      	ldr	r0, [sp, #8]
 8011c92:	aa1e      	add	r2, sp, #120	@ 0x78
 8011c94:	4651      	mov	r1, sl
 8011c96:	f001 fa79 	bl	801318c <__ssprint_r>
 8011c9a:	2800      	cmp	r0, #0
 8011c9c:	f040 8299 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011ca0:	ac21      	add	r4, sp, #132	@ 0x84
 8011ca2:	e7be      	b.n	8011c22 <_svfprintf_r+0xc92>
 8011ca4:	9802      	ldr	r0, [sp, #8]
 8011ca6:	aa1e      	add	r2, sp, #120	@ 0x78
 8011ca8:	4651      	mov	r1, sl
 8011caa:	f001 fa6f 	bl	801318c <__ssprint_r>
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	f040 828f 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011cb4:	ac21      	add	r4, sp, #132	@ 0x84
 8011cb6:	e7c9      	b.n	8011c4c <_svfprintf_r+0xcbc>
 8011cb8:	3210      	adds	r2, #16
 8011cba:	2b07      	cmp	r3, #7
 8011cbc:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8011cc0:	f8c4 8004 	str.w	r8, [r4, #4]
 8011cc4:	dd08      	ble.n	8011cd8 <_svfprintf_r+0xd48>
 8011cc6:	9802      	ldr	r0, [sp, #8]
 8011cc8:	aa1e      	add	r2, sp, #120	@ 0x78
 8011cca:	4651      	mov	r1, sl
 8011ccc:	f001 fa5e 	bl	801318c <__ssprint_r>
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	f040 827e 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011cd6:	a921      	add	r1, sp, #132	@ 0x84
 8011cd8:	3e10      	subs	r6, #16
 8011cda:	460c      	mov	r4, r1
 8011cdc:	e7be      	b.n	8011c5c <_svfprintf_r+0xccc>
 8011cde:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011ce0:	2a00      	cmp	r2, #0
 8011ce2:	dc7b      	bgt.n	8011ddc <_svfprintf_r+0xe4c>
 8011ce4:	4a3b      	ldr	r2, [pc, #236]	@ (8011dd4 <_svfprintf_r+0xe44>)
 8011ce6:	6022      	str	r2, [r4, #0]
 8011ce8:	2201      	movs	r2, #1
 8011cea:	4413      	add	r3, r2
 8011cec:	9320      	str	r3, [sp, #128]	@ 0x80
 8011cee:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011cf0:	6062      	str	r2, [r4, #4]
 8011cf2:	4413      	add	r3, r2
 8011cf4:	2b07      	cmp	r3, #7
 8011cf6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011cf8:	dc46      	bgt.n	8011d88 <_svfprintf_r+0xdf8>
 8011cfa:	3408      	adds	r4, #8
 8011cfc:	9903      	ldr	r1, [sp, #12]
 8011cfe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011d00:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011d02:	430b      	orrs	r3, r1
 8011d04:	f005 0101 	and.w	r1, r5, #1
 8011d08:	430b      	orrs	r3, r1
 8011d0a:	f43f ad14 	beq.w	8011736 <_svfprintf_r+0x7a6>
 8011d0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d10:	6023      	str	r3, [r4, #0]
 8011d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d14:	6063      	str	r3, [r4, #4]
 8011d16:	441a      	add	r2, r3
 8011d18:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011d1a:	9220      	str	r2, [sp, #128]	@ 0x80
 8011d1c:	3301      	adds	r3, #1
 8011d1e:	2b07      	cmp	r3, #7
 8011d20:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011d22:	dc3b      	bgt.n	8011d9c <_svfprintf_r+0xe0c>
 8011d24:	f104 0308 	add.w	r3, r4, #8
 8011d28:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8011d2a:	2e00      	cmp	r6, #0
 8011d2c:	da1b      	bge.n	8011d66 <_svfprintf_r+0xdd6>
 8011d2e:	4f2a      	ldr	r7, [pc, #168]	@ (8011dd8 <_svfprintf_r+0xe48>)
 8011d30:	4276      	negs	r6, r6
 8011d32:	461a      	mov	r2, r3
 8011d34:	2410      	movs	r4, #16
 8011d36:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	@ 0x7c
 8011d3a:	2e10      	cmp	r6, #16
 8011d3c:	f101 0101 	add.w	r1, r1, #1
 8011d40:	f103 0308 	add.w	r3, r3, #8
 8011d44:	6017      	str	r7, [r2, #0]
 8011d46:	dc33      	bgt.n	8011db0 <_svfprintf_r+0xe20>
 8011d48:	6056      	str	r6, [r2, #4]
 8011d4a:	2907      	cmp	r1, #7
 8011d4c:	4406      	add	r6, r0
 8011d4e:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 8011d52:	dd08      	ble.n	8011d66 <_svfprintf_r+0xdd6>
 8011d54:	9802      	ldr	r0, [sp, #8]
 8011d56:	aa1e      	add	r2, sp, #120	@ 0x78
 8011d58:	4651      	mov	r1, sl
 8011d5a:	f001 fa17 	bl	801318c <__ssprint_r>
 8011d5e:	2800      	cmp	r0, #0
 8011d60:	f040 8237 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011d64:	ab21      	add	r3, sp, #132	@ 0x84
 8011d66:	9a03      	ldr	r2, [sp, #12]
 8011d68:	605a      	str	r2, [r3, #4]
 8011d6a:	9903      	ldr	r1, [sp, #12]
 8011d6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011d6e:	f8c3 9000 	str.w	r9, [r3]
 8011d72:	440a      	add	r2, r1
 8011d74:	9220      	str	r2, [sp, #128]	@ 0x80
 8011d76:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8011d78:	3201      	adds	r2, #1
 8011d7a:	2a07      	cmp	r2, #7
 8011d7c:	921f      	str	r2, [sp, #124]	@ 0x7c
 8011d7e:	f73f af7d 	bgt.w	8011c7c <_svfprintf_r+0xcec>
 8011d82:	f103 0408 	add.w	r4, r3, #8
 8011d86:	e4d6      	b.n	8011736 <_svfprintf_r+0x7a6>
 8011d88:	9802      	ldr	r0, [sp, #8]
 8011d8a:	aa1e      	add	r2, sp, #120	@ 0x78
 8011d8c:	4651      	mov	r1, sl
 8011d8e:	f001 f9fd 	bl	801318c <__ssprint_r>
 8011d92:	2800      	cmp	r0, #0
 8011d94:	f040 821d 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011d98:	ac21      	add	r4, sp, #132	@ 0x84
 8011d9a:	e7af      	b.n	8011cfc <_svfprintf_r+0xd6c>
 8011d9c:	9802      	ldr	r0, [sp, #8]
 8011d9e:	aa1e      	add	r2, sp, #120	@ 0x78
 8011da0:	4651      	mov	r1, sl
 8011da2:	f001 f9f3 	bl	801318c <__ssprint_r>
 8011da6:	2800      	cmp	r0, #0
 8011da8:	f040 8213 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011dac:	ab21      	add	r3, sp, #132	@ 0x84
 8011dae:	e7bb      	b.n	8011d28 <_svfprintf_r+0xd98>
 8011db0:	3010      	adds	r0, #16
 8011db2:	2907      	cmp	r1, #7
 8011db4:	e9cd 101f 	strd	r1, r0, [sp, #124]	@ 0x7c
 8011db8:	6054      	str	r4, [r2, #4]
 8011dba:	dd08      	ble.n	8011dce <_svfprintf_r+0xe3e>
 8011dbc:	9802      	ldr	r0, [sp, #8]
 8011dbe:	aa1e      	add	r2, sp, #120	@ 0x78
 8011dc0:	4651      	mov	r1, sl
 8011dc2:	f001 f9e3 	bl	801318c <__ssprint_r>
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	f040 8203 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011dcc:	ab21      	add	r3, sp, #132	@ 0x84
 8011dce:	3e10      	subs	r6, #16
 8011dd0:	461a      	mov	r2, r3
 8011dd2:	e7b0      	b.n	8011d36 <_svfprintf_r+0xda6>
 8011dd4:	08014c9a 	.word	0x08014c9a
 8011dd8:	08014d15 	.word	0x08014d15
 8011ddc:	9a03      	ldr	r2, [sp, #12]
 8011dde:	444a      	add	r2, r9
 8011de0:	9204      	str	r2, [sp, #16]
 8011de2:	9a03      	ldr	r2, [sp, #12]
 8011de4:	42b2      	cmp	r2, r6
 8011de6:	bfa8      	it	ge
 8011de8:	4632      	movge	r2, r6
 8011dea:	2a00      	cmp	r2, #0
 8011dec:	4690      	mov	r8, r2
 8011dee:	dd0a      	ble.n	8011e06 <_svfprintf_r+0xe76>
 8011df0:	4413      	add	r3, r2
 8011df2:	9320      	str	r3, [sp, #128]	@ 0x80
 8011df4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011df6:	3301      	adds	r3, #1
 8011df8:	2b07      	cmp	r3, #7
 8011dfa:	e9c4 9200 	strd	r9, r2, [r4]
 8011dfe:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011e00:	f300 8089 	bgt.w	8011f16 <_svfprintf_r+0xf86>
 8011e04:	3408      	adds	r4, #8
 8011e06:	4643      	mov	r3, r8
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	bfac      	ite	ge
 8011e0c:	eba6 0808 	subge.w	r8, r6, r8
 8011e10:	46b0      	movlt	r8, r6
 8011e12:	f1b8 0f00 	cmp.w	r8, #0
 8011e16:	dd1b      	ble.n	8011e50 <_svfprintf_r+0xec0>
 8011e18:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 8011e1c:	4896      	ldr	r0, [pc, #600]	@ (8012078 <_svfprintf_r+0x10e8>)
 8011e1e:	6020      	str	r0, [r4, #0]
 8011e20:	f1b8 0f10 	cmp.w	r8, #16
 8011e24:	f102 0201 	add.w	r2, r2, #1
 8011e28:	f104 0108 	add.w	r1, r4, #8
 8011e2c:	dc7d      	bgt.n	8011f2a <_svfprintf_r+0xf9a>
 8011e2e:	4443      	add	r3, r8
 8011e30:	2a07      	cmp	r2, #7
 8011e32:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8011e36:	f8c4 8004 	str.w	r8, [r4, #4]
 8011e3a:	f340 808a 	ble.w	8011f52 <_svfprintf_r+0xfc2>
 8011e3e:	9802      	ldr	r0, [sp, #8]
 8011e40:	aa1e      	add	r2, sp, #120	@ 0x78
 8011e42:	4651      	mov	r1, sl
 8011e44:	f001 f9a2 	bl	801318c <__ssprint_r>
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	f040 81c2 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011e4e:	ac21      	add	r4, sp, #132	@ 0x84
 8011e50:	056b      	lsls	r3, r5, #21
 8011e52:	eb09 0806 	add.w	r8, r9, r6
 8011e56:	d508      	bpl.n	8011e6a <_svfprintf_r+0xeda>
 8011e58:	9b06      	ldr	r3, [sp, #24]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d17b      	bne.n	8011f56 <_svfprintf_r+0xfc6>
 8011e5e:	2f00      	cmp	r7, #0
 8011e60:	d17b      	bne.n	8011f5a <_svfprintf_r+0xfca>
 8011e62:	9b04      	ldr	r3, [sp, #16]
 8011e64:	4598      	cmp	r8, r3
 8011e66:	bf28      	it	cs
 8011e68:	4698      	movcs	r8, r3
 8011e6a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011e6c:	9a03      	ldr	r2, [sp, #12]
 8011e6e:	4293      	cmp	r3, r2
 8011e70:	db01      	blt.n	8011e76 <_svfprintf_r+0xee6>
 8011e72:	07ee      	lsls	r6, r5, #31
 8011e74:	d50e      	bpl.n	8011e94 <_svfprintf_r+0xf04>
 8011e76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e78:	6023      	str	r3, [r4, #0]
 8011e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e7e:	6063      	str	r3, [r4, #4]
 8011e80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011e82:	4413      	add	r3, r2
 8011e84:	9320      	str	r3, [sp, #128]	@ 0x80
 8011e86:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011e88:	3301      	adds	r3, #1
 8011e8a:	2b07      	cmp	r3, #7
 8011e8c:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011e8e:	f300 80df 	bgt.w	8012050 <_svfprintf_r+0x10c0>
 8011e92:	3408      	adds	r4, #8
 8011e94:	9b03      	ldr	r3, [sp, #12]
 8011e96:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8011e98:	1bdf      	subs	r7, r3, r7
 8011e9a:	9b04      	ldr	r3, [sp, #16]
 8011e9c:	eba3 0308 	sub.w	r3, r3, r8
 8011ea0:	429f      	cmp	r7, r3
 8011ea2:	bfa8      	it	ge
 8011ea4:	461f      	movge	r7, r3
 8011ea6:	2f00      	cmp	r7, #0
 8011ea8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011eaa:	dd0a      	ble.n	8011ec2 <_svfprintf_r+0xf32>
 8011eac:	443b      	add	r3, r7
 8011eae:	9320      	str	r3, [sp, #128]	@ 0x80
 8011eb0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011eb2:	3301      	adds	r3, #1
 8011eb4:	2b07      	cmp	r3, #7
 8011eb6:	e9c4 8700 	strd	r8, r7, [r4]
 8011eba:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011ebc:	f300 80d2 	bgt.w	8012064 <_svfprintf_r+0x10d4>
 8011ec0:	3408      	adds	r4, #8
 8011ec2:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8011ec4:	9b03      	ldr	r3, [sp, #12]
 8011ec6:	2f00      	cmp	r7, #0
 8011ec8:	eba3 0606 	sub.w	r6, r3, r6
 8011ecc:	bfa8      	it	ge
 8011ece:	1bf6      	subge	r6, r6, r7
 8011ed0:	2e00      	cmp	r6, #0
 8011ed2:	f77f ac30 	ble.w	8011736 <_svfprintf_r+0x7a6>
 8011ed6:	4f68      	ldr	r7, [pc, #416]	@ (8012078 <_svfprintf_r+0x10e8>)
 8011ed8:	f04f 0810 	mov.w	r8, #16
 8011edc:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8011ee0:	2e10      	cmp	r6, #16
 8011ee2:	f103 0301 	add.w	r3, r3, #1
 8011ee6:	f104 0108 	add.w	r1, r4, #8
 8011eea:	6027      	str	r7, [r4, #0]
 8011eec:	f77f aebf 	ble.w	8011c6e <_svfprintf_r+0xcde>
 8011ef0:	3210      	adds	r2, #16
 8011ef2:	2b07      	cmp	r3, #7
 8011ef4:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8011ef8:	f8c4 8004 	str.w	r8, [r4, #4]
 8011efc:	dd08      	ble.n	8011f10 <_svfprintf_r+0xf80>
 8011efe:	9802      	ldr	r0, [sp, #8]
 8011f00:	aa1e      	add	r2, sp, #120	@ 0x78
 8011f02:	4651      	mov	r1, sl
 8011f04:	f001 f942 	bl	801318c <__ssprint_r>
 8011f08:	2800      	cmp	r0, #0
 8011f0a:	f040 8162 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011f0e:	a921      	add	r1, sp, #132	@ 0x84
 8011f10:	3e10      	subs	r6, #16
 8011f12:	460c      	mov	r4, r1
 8011f14:	e7e2      	b.n	8011edc <_svfprintf_r+0xf4c>
 8011f16:	9802      	ldr	r0, [sp, #8]
 8011f18:	aa1e      	add	r2, sp, #120	@ 0x78
 8011f1a:	4651      	mov	r1, sl
 8011f1c:	f001 f936 	bl	801318c <__ssprint_r>
 8011f20:	2800      	cmp	r0, #0
 8011f22:	f040 8156 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011f26:	ac21      	add	r4, sp, #132	@ 0x84
 8011f28:	e76d      	b.n	8011e06 <_svfprintf_r+0xe76>
 8011f2a:	2010      	movs	r0, #16
 8011f2c:	4403      	add	r3, r0
 8011f2e:	2a07      	cmp	r2, #7
 8011f30:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8011f34:	6060      	str	r0, [r4, #4]
 8011f36:	dd08      	ble.n	8011f4a <_svfprintf_r+0xfba>
 8011f38:	9802      	ldr	r0, [sp, #8]
 8011f3a:	aa1e      	add	r2, sp, #120	@ 0x78
 8011f3c:	4651      	mov	r1, sl
 8011f3e:	f001 f925 	bl	801318c <__ssprint_r>
 8011f42:	2800      	cmp	r0, #0
 8011f44:	f040 8145 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011f48:	a921      	add	r1, sp, #132	@ 0x84
 8011f4a:	f1a8 0810 	sub.w	r8, r8, #16
 8011f4e:	460c      	mov	r4, r1
 8011f50:	e762      	b.n	8011e18 <_svfprintf_r+0xe88>
 8011f52:	460c      	mov	r4, r1
 8011f54:	e77c      	b.n	8011e50 <_svfprintf_r+0xec0>
 8011f56:	2f00      	cmp	r7, #0
 8011f58:	d04a      	beq.n	8011ff0 <_svfprintf_r+0x1060>
 8011f5a:	3f01      	subs	r7, #1
 8011f5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011f5e:	6023      	str	r3, [r4, #0]
 8011f60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f64:	6063      	str	r3, [r4, #4]
 8011f66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011f68:	4413      	add	r3, r2
 8011f6a:	9320      	str	r3, [sp, #128]	@ 0x80
 8011f6c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011f6e:	3301      	adds	r3, #1
 8011f70:	2b07      	cmp	r3, #7
 8011f72:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011f74:	dc43      	bgt.n	8011ffe <_svfprintf_r+0x106e>
 8011f76:	3408      	adds	r4, #8
 8011f78:	9b07      	ldr	r3, [sp, #28]
 8011f7a:	781a      	ldrb	r2, [r3, #0]
 8011f7c:	9b04      	ldr	r3, [sp, #16]
 8011f7e:	eba3 0308 	sub.w	r3, r3, r8
 8011f82:	429a      	cmp	r2, r3
 8011f84:	bfa8      	it	ge
 8011f86:	461a      	movge	r2, r3
 8011f88:	2a00      	cmp	r2, #0
 8011f8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011f8c:	4691      	mov	r9, r2
 8011f8e:	dd09      	ble.n	8011fa4 <_svfprintf_r+0x1014>
 8011f90:	4413      	add	r3, r2
 8011f92:	9320      	str	r3, [sp, #128]	@ 0x80
 8011f94:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011f96:	3301      	adds	r3, #1
 8011f98:	2b07      	cmp	r3, #7
 8011f9a:	e9c4 8200 	strd	r8, r2, [r4]
 8011f9e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011fa0:	dc37      	bgt.n	8012012 <_svfprintf_r+0x1082>
 8011fa2:	3408      	adds	r4, #8
 8011fa4:	9b07      	ldr	r3, [sp, #28]
 8011fa6:	781e      	ldrb	r6, [r3, #0]
 8011fa8:	f1b9 0f00 	cmp.w	r9, #0
 8011fac:	bfa8      	it	ge
 8011fae:	eba6 0609 	subge.w	r6, r6, r9
 8011fb2:	2e00      	cmp	r6, #0
 8011fb4:	dd18      	ble.n	8011fe8 <_svfprintf_r+0x1058>
 8011fb6:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8011fba:	482f      	ldr	r0, [pc, #188]	@ (8012078 <_svfprintf_r+0x10e8>)
 8011fbc:	6020      	str	r0, [r4, #0]
 8011fbe:	2e10      	cmp	r6, #16
 8011fc0:	f103 0301 	add.w	r3, r3, #1
 8011fc4:	f104 0108 	add.w	r1, r4, #8
 8011fc8:	dc2d      	bgt.n	8012026 <_svfprintf_r+0x1096>
 8011fca:	6066      	str	r6, [r4, #4]
 8011fcc:	2b07      	cmp	r3, #7
 8011fce:	4416      	add	r6, r2
 8011fd0:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 8011fd4:	dd3a      	ble.n	801204c <_svfprintf_r+0x10bc>
 8011fd6:	9802      	ldr	r0, [sp, #8]
 8011fd8:	aa1e      	add	r2, sp, #120	@ 0x78
 8011fda:	4651      	mov	r1, sl
 8011fdc:	f001 f8d6 	bl	801318c <__ssprint_r>
 8011fe0:	2800      	cmp	r0, #0
 8011fe2:	f040 80f6 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8011fe6:	ac21      	add	r4, sp, #132	@ 0x84
 8011fe8:	9b07      	ldr	r3, [sp, #28]
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	4498      	add	r8, r3
 8011fee:	e733      	b.n	8011e58 <_svfprintf_r+0xec8>
 8011ff0:	9b07      	ldr	r3, [sp, #28]
 8011ff2:	3b01      	subs	r3, #1
 8011ff4:	9307      	str	r3, [sp, #28]
 8011ff6:	9b06      	ldr	r3, [sp, #24]
 8011ff8:	3b01      	subs	r3, #1
 8011ffa:	9306      	str	r3, [sp, #24]
 8011ffc:	e7ae      	b.n	8011f5c <_svfprintf_r+0xfcc>
 8011ffe:	9802      	ldr	r0, [sp, #8]
 8012000:	aa1e      	add	r2, sp, #120	@ 0x78
 8012002:	4651      	mov	r1, sl
 8012004:	f001 f8c2 	bl	801318c <__ssprint_r>
 8012008:	2800      	cmp	r0, #0
 801200a:	f040 80e2 	bne.w	80121d2 <_svfprintf_r+0x1242>
 801200e:	ac21      	add	r4, sp, #132	@ 0x84
 8012010:	e7b2      	b.n	8011f78 <_svfprintf_r+0xfe8>
 8012012:	9802      	ldr	r0, [sp, #8]
 8012014:	aa1e      	add	r2, sp, #120	@ 0x78
 8012016:	4651      	mov	r1, sl
 8012018:	f001 f8b8 	bl	801318c <__ssprint_r>
 801201c:	2800      	cmp	r0, #0
 801201e:	f040 80d8 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8012022:	ac21      	add	r4, sp, #132	@ 0x84
 8012024:	e7be      	b.n	8011fa4 <_svfprintf_r+0x1014>
 8012026:	2010      	movs	r0, #16
 8012028:	4402      	add	r2, r0
 801202a:	2b07      	cmp	r3, #7
 801202c:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8012030:	6060      	str	r0, [r4, #4]
 8012032:	dd08      	ble.n	8012046 <_svfprintf_r+0x10b6>
 8012034:	9802      	ldr	r0, [sp, #8]
 8012036:	aa1e      	add	r2, sp, #120	@ 0x78
 8012038:	4651      	mov	r1, sl
 801203a:	f001 f8a7 	bl	801318c <__ssprint_r>
 801203e:	2800      	cmp	r0, #0
 8012040:	f040 80c7 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8012044:	a921      	add	r1, sp, #132	@ 0x84
 8012046:	3e10      	subs	r6, #16
 8012048:	460c      	mov	r4, r1
 801204a:	e7b4      	b.n	8011fb6 <_svfprintf_r+0x1026>
 801204c:	460c      	mov	r4, r1
 801204e:	e7cb      	b.n	8011fe8 <_svfprintf_r+0x1058>
 8012050:	9802      	ldr	r0, [sp, #8]
 8012052:	aa1e      	add	r2, sp, #120	@ 0x78
 8012054:	4651      	mov	r1, sl
 8012056:	f001 f899 	bl	801318c <__ssprint_r>
 801205a:	2800      	cmp	r0, #0
 801205c:	f040 80b9 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8012060:	ac21      	add	r4, sp, #132	@ 0x84
 8012062:	e717      	b.n	8011e94 <_svfprintf_r+0xf04>
 8012064:	9802      	ldr	r0, [sp, #8]
 8012066:	aa1e      	add	r2, sp, #120	@ 0x78
 8012068:	4651      	mov	r1, sl
 801206a:	f001 f88f 	bl	801318c <__ssprint_r>
 801206e:	2800      	cmp	r0, #0
 8012070:	f040 80af 	bne.w	80121d2 <_svfprintf_r+0x1242>
 8012074:	ac21      	add	r4, sp, #132	@ 0x84
 8012076:	e724      	b.n	8011ec2 <_svfprintf_r+0xf32>
 8012078:	08014d15 	.word	0x08014d15
 801207c:	9803      	ldr	r0, [sp, #12]
 801207e:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8012080:	2801      	cmp	r0, #1
 8012082:	f103 0201 	add.w	r2, r3, #1
 8012086:	f101 0101 	add.w	r1, r1, #1
 801208a:	f104 0308 	add.w	r3, r4, #8
 801208e:	dc01      	bgt.n	8012094 <_svfprintf_r+0x1104>
 8012090:	07e8      	lsls	r0, r5, #31
 8012092:	d572      	bpl.n	801217a <_svfprintf_r+0x11ea>
 8012094:	2001      	movs	r0, #1
 8012096:	2907      	cmp	r1, #7
 8012098:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 801209c:	f8c4 9000 	str.w	r9, [r4]
 80120a0:	6060      	str	r0, [r4, #4]
 80120a2:	dd08      	ble.n	80120b6 <_svfprintf_r+0x1126>
 80120a4:	9802      	ldr	r0, [sp, #8]
 80120a6:	aa1e      	add	r2, sp, #120	@ 0x78
 80120a8:	4651      	mov	r1, sl
 80120aa:	f001 f86f 	bl	801318c <__ssprint_r>
 80120ae:	2800      	cmp	r0, #0
 80120b0:	f040 808f 	bne.w	80121d2 <_svfprintf_r+0x1242>
 80120b4:	ab21      	add	r3, sp, #132	@ 0x84
 80120b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80120b8:	601a      	str	r2, [r3, #0]
 80120ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80120be:	605a      	str	r2, [r3, #4]
 80120c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80120c2:	440a      	add	r2, r1
 80120c4:	9220      	str	r2, [sp, #128]	@ 0x80
 80120c6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80120c8:	3201      	adds	r2, #1
 80120ca:	2a07      	cmp	r2, #7
 80120cc:	921f      	str	r2, [sp, #124]	@ 0x7c
 80120ce:	dc25      	bgt.n	801211c <_svfprintf_r+0x118c>
 80120d0:	3308      	adds	r3, #8
 80120d2:	9803      	ldr	r0, [sp, #12]
 80120d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80120d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120dc:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	@ 0x7c
 80120e0:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80120e4:	d023      	beq.n	801212e <_svfprintf_r+0x119e>
 80120e6:	f109 0001 	add.w	r0, r9, #1
 80120ea:	e9c3 0400 	strd	r0, r4, [r3]
 80120ee:	9803      	ldr	r0, [sp, #12]
 80120f0:	3101      	adds	r1, #1
 80120f2:	3a01      	subs	r2, #1
 80120f4:	4402      	add	r2, r0
 80120f6:	2907      	cmp	r1, #7
 80120f8:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 80120fc:	dd46      	ble.n	801218c <_svfprintf_r+0x11fc>
 80120fe:	9802      	ldr	r0, [sp, #8]
 8012100:	aa1e      	add	r2, sp, #120	@ 0x78
 8012102:	4651      	mov	r1, sl
 8012104:	f001 f842 	bl	801318c <__ssprint_r>
 8012108:	2800      	cmp	r0, #0
 801210a:	d162      	bne.n	80121d2 <_svfprintf_r+0x1242>
 801210c:	ab21      	add	r3, sp, #132	@ 0x84
 801210e:	aa1a      	add	r2, sp, #104	@ 0x68
 8012110:	601a      	str	r2, [r3, #0]
 8012112:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012114:	605a      	str	r2, [r3, #4]
 8012116:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8012118:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801211a:	e62a      	b.n	8011d72 <_svfprintf_r+0xde2>
 801211c:	9802      	ldr	r0, [sp, #8]
 801211e:	aa1e      	add	r2, sp, #120	@ 0x78
 8012120:	4651      	mov	r1, sl
 8012122:	f001 f833 	bl	801318c <__ssprint_r>
 8012126:	2800      	cmp	r0, #0
 8012128:	d153      	bne.n	80121d2 <_svfprintf_r+0x1242>
 801212a:	ab21      	add	r3, sp, #132	@ 0x84
 801212c:	e7d1      	b.n	80120d2 <_svfprintf_r+0x1142>
 801212e:	9a03      	ldr	r2, [sp, #12]
 8012130:	2a01      	cmp	r2, #1
 8012132:	ddec      	ble.n	801210e <_svfprintf_r+0x117e>
 8012134:	4e56      	ldr	r6, [pc, #344]	@ (8012290 <_svfprintf_r+0x1300>)
 8012136:	2710      	movs	r7, #16
 8012138:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	@ 0x7c
 801213c:	2c10      	cmp	r4, #16
 801213e:	f102 0201 	add.w	r2, r2, #1
 8012142:	f103 0008 	add.w	r0, r3, #8
 8012146:	601e      	str	r6, [r3, #0]
 8012148:	dc07      	bgt.n	801215a <_svfprintf_r+0x11ca>
 801214a:	605c      	str	r4, [r3, #4]
 801214c:	2a07      	cmp	r2, #7
 801214e:	440c      	add	r4, r1
 8012150:	e9cd 241f 	strd	r2, r4, [sp, #124]	@ 0x7c
 8012154:	dcd3      	bgt.n	80120fe <_svfprintf_r+0x116e>
 8012156:	4603      	mov	r3, r0
 8012158:	e7d9      	b.n	801210e <_svfprintf_r+0x117e>
 801215a:	3110      	adds	r1, #16
 801215c:	2a07      	cmp	r2, #7
 801215e:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8012162:	605f      	str	r7, [r3, #4]
 8012164:	dd06      	ble.n	8012174 <_svfprintf_r+0x11e4>
 8012166:	9802      	ldr	r0, [sp, #8]
 8012168:	aa1e      	add	r2, sp, #120	@ 0x78
 801216a:	4651      	mov	r1, sl
 801216c:	f001 f80e 	bl	801318c <__ssprint_r>
 8012170:	bb78      	cbnz	r0, 80121d2 <_svfprintf_r+0x1242>
 8012172:	a821      	add	r0, sp, #132	@ 0x84
 8012174:	3c10      	subs	r4, #16
 8012176:	4603      	mov	r3, r0
 8012178:	e7de      	b.n	8012138 <_svfprintf_r+0x11a8>
 801217a:	2001      	movs	r0, #1
 801217c:	2907      	cmp	r1, #7
 801217e:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8012182:	f8c4 9000 	str.w	r9, [r4]
 8012186:	6060      	str	r0, [r4, #4]
 8012188:	ddc1      	ble.n	801210e <_svfprintf_r+0x117e>
 801218a:	e7b8      	b.n	80120fe <_svfprintf_r+0x116e>
 801218c:	3308      	adds	r3, #8
 801218e:	e7be      	b.n	801210e <_svfprintf_r+0x117e>
 8012190:	460c      	mov	r4, r1
 8012192:	f7ff bad0 	b.w	8011736 <_svfprintf_r+0x7a6>
 8012196:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012198:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801219a:	1a9d      	subs	r5, r3, r2
 801219c:	2d00      	cmp	r5, #0
 801219e:	f77f aacd 	ble.w	801173c <_svfprintf_r+0x7ac>
 80121a2:	4e3c      	ldr	r6, [pc, #240]	@ (8012294 <_svfprintf_r+0x1304>)
 80121a4:	2710      	movs	r7, #16
 80121a6:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 80121aa:	2d10      	cmp	r5, #16
 80121ac:	f103 0301 	add.w	r3, r3, #1
 80121b0:	6026      	str	r6, [r4, #0]
 80121b2:	dc18      	bgt.n	80121e6 <_svfprintf_r+0x1256>
 80121b4:	442a      	add	r2, r5
 80121b6:	2b07      	cmp	r3, #7
 80121b8:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 80121bc:	6065      	str	r5, [r4, #4]
 80121be:	f77f aabd 	ble.w	801173c <_svfprintf_r+0x7ac>
 80121c2:	9802      	ldr	r0, [sp, #8]
 80121c4:	aa1e      	add	r2, sp, #120	@ 0x78
 80121c6:	4651      	mov	r1, sl
 80121c8:	f000 ffe0 	bl	801318c <__ssprint_r>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	f43f aab5 	beq.w	801173c <_svfprintf_r+0x7ac>
 80121d2:	f1bb 0f00 	cmp.w	fp, #0
 80121d6:	f43f a8e0 	beq.w	801139a <_svfprintf_r+0x40a>
 80121da:	9802      	ldr	r0, [sp, #8]
 80121dc:	4659      	mov	r1, fp
 80121de:	f7fe fbcb 	bl	8010978 <_free_r>
 80121e2:	f7ff b8da 	b.w	801139a <_svfprintf_r+0x40a>
 80121e6:	3210      	adds	r2, #16
 80121e8:	2b07      	cmp	r3, #7
 80121ea:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 80121ee:	6067      	str	r7, [r4, #4]
 80121f0:	dc02      	bgt.n	80121f8 <_svfprintf_r+0x1268>
 80121f2:	3408      	adds	r4, #8
 80121f4:	3d10      	subs	r5, #16
 80121f6:	e7d6      	b.n	80121a6 <_svfprintf_r+0x1216>
 80121f8:	9802      	ldr	r0, [sp, #8]
 80121fa:	aa1e      	add	r2, sp, #120	@ 0x78
 80121fc:	4651      	mov	r1, sl
 80121fe:	f000 ffc5 	bl	801318c <__ssprint_r>
 8012202:	2800      	cmp	r0, #0
 8012204:	d1e5      	bne.n	80121d2 <_svfprintf_r+0x1242>
 8012206:	ac21      	add	r4, sp, #132	@ 0x84
 8012208:	e7f4      	b.n	80121f4 <_svfprintf_r+0x1264>
 801220a:	9802      	ldr	r0, [sp, #8]
 801220c:	4659      	mov	r1, fp
 801220e:	f7fe fbb3 	bl	8010978 <_free_r>
 8012212:	f7ff baab 	b.w	801176c <_svfprintf_r+0x7dc>
 8012216:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012218:	2b00      	cmp	r3, #0
 801221a:	f43f a8be 	beq.w	801139a <_svfprintf_r+0x40a>
 801221e:	9802      	ldr	r0, [sp, #8]
 8012220:	aa1e      	add	r2, sp, #120	@ 0x78
 8012222:	4651      	mov	r1, sl
 8012224:	f000 ffb2 	bl	801318c <__ssprint_r>
 8012228:	f7ff b8b7 	b.w	801139a <_svfprintf_r+0x40a>
 801222c:	ea56 0207 	orrs.w	r2, r6, r7
 8012230:	9506      	str	r5, [sp, #24]
 8012232:	f43f ab93 	beq.w	801195c <_svfprintf_r+0x9cc>
 8012236:	2b01      	cmp	r3, #1
 8012238:	f43f ac14 	beq.w	8011a64 <_svfprintf_r+0xad4>
 801223c:	2b02      	cmp	r3, #2
 801223e:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 8012242:	f43f ac59 	beq.w	8011af8 <_svfprintf_r+0xb68>
 8012246:	f006 0307 	and.w	r3, r6, #7
 801224a:	08f6      	lsrs	r6, r6, #3
 801224c:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8012250:	08ff      	lsrs	r7, r7, #3
 8012252:	3330      	adds	r3, #48	@ 0x30
 8012254:	ea56 0107 	orrs.w	r1, r6, r7
 8012258:	464a      	mov	r2, r9
 801225a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801225e:	d1f2      	bne.n	8012246 <_svfprintf_r+0x12b6>
 8012260:	9906      	ldr	r1, [sp, #24]
 8012262:	07cd      	lsls	r5, r1, #31
 8012264:	d506      	bpl.n	8012274 <_svfprintf_r+0x12e4>
 8012266:	2b30      	cmp	r3, #48	@ 0x30
 8012268:	d004      	beq.n	8012274 <_svfprintf_r+0x12e4>
 801226a:	2330      	movs	r3, #48	@ 0x30
 801226c:	f809 3c01 	strb.w	r3, [r9, #-1]
 8012270:	f1a2 0902 	sub.w	r9, r2, #2
 8012274:	ab4a      	add	r3, sp, #296	@ 0x128
 8012276:	9d06      	ldr	r5, [sp, #24]
 8012278:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 801227c:	f04f 0b00 	mov.w	fp, #0
 8012280:	eba3 0809 	sub.w	r8, r3, r9
 8012284:	465f      	mov	r7, fp
 8012286:	f8cd b018 	str.w	fp, [sp, #24]
 801228a:	465e      	mov	r6, fp
 801228c:	f7ff b9a4 	b.w	80115d8 <_svfprintf_r+0x648>
 8012290:	08014d15 	.word	0x08014d15
 8012294:	08014d25 	.word	0x08014d25

08012298 <__swhatbuf_r>:
 8012298:	b570      	push	{r4, r5, r6, lr}
 801229a:	460c      	mov	r4, r1
 801229c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122a0:	2900      	cmp	r1, #0
 80122a2:	b096      	sub	sp, #88	@ 0x58
 80122a4:	4615      	mov	r5, r2
 80122a6:	461e      	mov	r6, r3
 80122a8:	da07      	bge.n	80122ba <__swhatbuf_r+0x22>
 80122aa:	89a1      	ldrh	r1, [r4, #12]
 80122ac:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 80122b0:	d117      	bne.n	80122e2 <__swhatbuf_r+0x4a>
 80122b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80122b6:	4608      	mov	r0, r1
 80122b8:	e00f      	b.n	80122da <__swhatbuf_r+0x42>
 80122ba:	466a      	mov	r2, sp
 80122bc:	f000 fe38 	bl	8012f30 <_fstat_r>
 80122c0:	2800      	cmp	r0, #0
 80122c2:	dbf2      	blt.n	80122aa <__swhatbuf_r+0x12>
 80122c4:	9901      	ldr	r1, [sp, #4]
 80122c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80122ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80122ce:	4259      	negs	r1, r3
 80122d0:	4159      	adcs	r1, r3
 80122d2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80122d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80122da:	6031      	str	r1, [r6, #0]
 80122dc:	602b      	str	r3, [r5, #0]
 80122de:	b016      	add	sp, #88	@ 0x58
 80122e0:	bd70      	pop	{r4, r5, r6, pc}
 80122e2:	2100      	movs	r1, #0
 80122e4:	2340      	movs	r3, #64	@ 0x40
 80122e6:	e7e6      	b.n	80122b6 <__swhatbuf_r+0x1e>

080122e8 <__smakebuf_r>:
 80122e8:	898b      	ldrh	r3, [r1, #12]
 80122ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122ec:	079d      	lsls	r5, r3, #30
 80122ee:	4606      	mov	r6, r0
 80122f0:	460c      	mov	r4, r1
 80122f2:	d507      	bpl.n	8012304 <__smakebuf_r+0x1c>
 80122f4:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80122f8:	6023      	str	r3, [r4, #0]
 80122fa:	6123      	str	r3, [r4, #16]
 80122fc:	2301      	movs	r3, #1
 80122fe:	6163      	str	r3, [r4, #20]
 8012300:	b003      	add	sp, #12
 8012302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012304:	ab01      	add	r3, sp, #4
 8012306:	466a      	mov	r2, sp
 8012308:	f7ff ffc6 	bl	8012298 <__swhatbuf_r>
 801230c:	9f00      	ldr	r7, [sp, #0]
 801230e:	4605      	mov	r5, r0
 8012310:	4639      	mov	r1, r7
 8012312:	4630      	mov	r0, r6
 8012314:	f7fe fbf0 	bl	8010af8 <_malloc_r>
 8012318:	b948      	cbnz	r0, 801232e <__smakebuf_r+0x46>
 801231a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801231e:	059a      	lsls	r2, r3, #22
 8012320:	d4ee      	bmi.n	8012300 <__smakebuf_r+0x18>
 8012322:	f023 0303 	bic.w	r3, r3, #3
 8012326:	f043 0302 	orr.w	r3, r3, #2
 801232a:	81a3      	strh	r3, [r4, #12]
 801232c:	e7e2      	b.n	80122f4 <__smakebuf_r+0xc>
 801232e:	89a3      	ldrh	r3, [r4, #12]
 8012330:	6020      	str	r0, [r4, #0]
 8012332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012336:	81a3      	strh	r3, [r4, #12]
 8012338:	9b01      	ldr	r3, [sp, #4]
 801233a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801233e:	b15b      	cbz	r3, 8012358 <__smakebuf_r+0x70>
 8012340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012344:	4630      	mov	r0, r6
 8012346:	f000 fe05 	bl	8012f54 <_isatty_r>
 801234a:	b128      	cbz	r0, 8012358 <__smakebuf_r+0x70>
 801234c:	89a3      	ldrh	r3, [r4, #12]
 801234e:	f023 0303 	bic.w	r3, r3, #3
 8012352:	f043 0301 	orr.w	r3, r3, #1
 8012356:	81a3      	strh	r3, [r4, #12]
 8012358:	89a3      	ldrh	r3, [r4, #12]
 801235a:	431d      	orrs	r5, r3
 801235c:	81a5      	strh	r5, [r4, #12]
 801235e:	e7cf      	b.n	8012300 <__smakebuf_r+0x18>

08012360 <__malloc_lock>:
 8012360:	4801      	ldr	r0, [pc, #4]	@ (8012368 <__malloc_lock+0x8>)
 8012362:	f7fd bc7d 	b.w	800fc60 <__retarget_lock_acquire_recursive>
 8012366:	bf00      	nop
 8012368:	2401534c 	.word	0x2401534c

0801236c <__malloc_unlock>:
 801236c:	4801      	ldr	r0, [pc, #4]	@ (8012374 <__malloc_unlock+0x8>)
 801236e:	f7fd bc78 	b.w	800fc62 <__retarget_lock_release_recursive>
 8012372:	bf00      	nop
 8012374:	2401534c 	.word	0x2401534c

08012378 <_Balloc>:
 8012378:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801237a:	b570      	push	{r4, r5, r6, lr}
 801237c:	4605      	mov	r5, r0
 801237e:	460c      	mov	r4, r1
 8012380:	b17b      	cbz	r3, 80123a2 <_Balloc+0x2a>
 8012382:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8012384:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012388:	b9a0      	cbnz	r0, 80123b4 <_Balloc+0x3c>
 801238a:	2101      	movs	r1, #1
 801238c:	fa01 f604 	lsl.w	r6, r1, r4
 8012390:	1d72      	adds	r2, r6, #5
 8012392:	0092      	lsls	r2, r2, #2
 8012394:	4628      	mov	r0, r5
 8012396:	f000 feb1 	bl	80130fc <_calloc_r>
 801239a:	b148      	cbz	r0, 80123b0 <_Balloc+0x38>
 801239c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80123a0:	e00b      	b.n	80123ba <_Balloc+0x42>
 80123a2:	2221      	movs	r2, #33	@ 0x21
 80123a4:	2104      	movs	r1, #4
 80123a6:	f000 fea9 	bl	80130fc <_calloc_r>
 80123aa:	6468      	str	r0, [r5, #68]	@ 0x44
 80123ac:	2800      	cmp	r0, #0
 80123ae:	d1e8      	bne.n	8012382 <_Balloc+0xa>
 80123b0:	2000      	movs	r0, #0
 80123b2:	bd70      	pop	{r4, r5, r6, pc}
 80123b4:	6802      	ldr	r2, [r0, #0]
 80123b6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80123ba:	2300      	movs	r3, #0
 80123bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80123c0:	e7f7      	b.n	80123b2 <_Balloc+0x3a>

080123c2 <_Bfree>:
 80123c2:	b131      	cbz	r1, 80123d2 <_Bfree+0x10>
 80123c4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80123c6:	684a      	ldr	r2, [r1, #4]
 80123c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80123cc:	6008      	str	r0, [r1, #0]
 80123ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80123d2:	4770      	bx	lr

080123d4 <__multadd>:
 80123d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123d8:	690d      	ldr	r5, [r1, #16]
 80123da:	4607      	mov	r7, r0
 80123dc:	460c      	mov	r4, r1
 80123de:	461e      	mov	r6, r3
 80123e0:	f101 0c14 	add.w	ip, r1, #20
 80123e4:	2000      	movs	r0, #0
 80123e6:	f8dc 3000 	ldr.w	r3, [ip]
 80123ea:	b299      	uxth	r1, r3
 80123ec:	fb02 6101 	mla	r1, r2, r1, r6
 80123f0:	0c1e      	lsrs	r6, r3, #16
 80123f2:	0c0b      	lsrs	r3, r1, #16
 80123f4:	fb02 3306 	mla	r3, r2, r6, r3
 80123f8:	b289      	uxth	r1, r1
 80123fa:	3001      	adds	r0, #1
 80123fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012400:	4285      	cmp	r5, r0
 8012402:	f84c 1b04 	str.w	r1, [ip], #4
 8012406:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801240a:	dcec      	bgt.n	80123e6 <__multadd+0x12>
 801240c:	b30e      	cbz	r6, 8012452 <__multadd+0x7e>
 801240e:	68a3      	ldr	r3, [r4, #8]
 8012410:	42ab      	cmp	r3, r5
 8012412:	dc19      	bgt.n	8012448 <__multadd+0x74>
 8012414:	6861      	ldr	r1, [r4, #4]
 8012416:	4638      	mov	r0, r7
 8012418:	3101      	adds	r1, #1
 801241a:	f7ff ffad 	bl	8012378 <_Balloc>
 801241e:	4680      	mov	r8, r0
 8012420:	b928      	cbnz	r0, 801242e <__multadd+0x5a>
 8012422:	4602      	mov	r2, r0
 8012424:	4b0c      	ldr	r3, [pc, #48]	@ (8012458 <__multadd+0x84>)
 8012426:	480d      	ldr	r0, [pc, #52]	@ (801245c <__multadd+0x88>)
 8012428:	21ba      	movs	r1, #186	@ 0xba
 801242a:	f000 fe49 	bl	80130c0 <__assert_func>
 801242e:	6922      	ldr	r2, [r4, #16]
 8012430:	3202      	adds	r2, #2
 8012432:	f104 010c 	add.w	r1, r4, #12
 8012436:	0092      	lsls	r2, r2, #2
 8012438:	300c      	adds	r0, #12
 801243a:	f7fd fc13 	bl	800fc64 <memcpy>
 801243e:	4621      	mov	r1, r4
 8012440:	4638      	mov	r0, r7
 8012442:	f7ff ffbe 	bl	80123c2 <_Bfree>
 8012446:	4644      	mov	r4, r8
 8012448:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801244c:	3501      	adds	r5, #1
 801244e:	615e      	str	r6, [r3, #20]
 8012450:	6125      	str	r5, [r4, #16]
 8012452:	4620      	mov	r0, r4
 8012454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012458:	08014c9c 	.word	0x08014c9c
 801245c:	08014d35 	.word	0x08014d35

08012460 <__hi0bits>:
 8012460:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012464:	4603      	mov	r3, r0
 8012466:	bf36      	itet	cc
 8012468:	0403      	lslcc	r3, r0, #16
 801246a:	2000      	movcs	r0, #0
 801246c:	2010      	movcc	r0, #16
 801246e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012472:	bf3c      	itt	cc
 8012474:	021b      	lslcc	r3, r3, #8
 8012476:	3008      	addcc	r0, #8
 8012478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801247c:	bf3c      	itt	cc
 801247e:	011b      	lslcc	r3, r3, #4
 8012480:	3004      	addcc	r0, #4
 8012482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012486:	bf3c      	itt	cc
 8012488:	009b      	lslcc	r3, r3, #2
 801248a:	3002      	addcc	r0, #2
 801248c:	2b00      	cmp	r3, #0
 801248e:	db05      	blt.n	801249c <__hi0bits+0x3c>
 8012490:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012494:	f100 0001 	add.w	r0, r0, #1
 8012498:	bf08      	it	eq
 801249a:	2020      	moveq	r0, #32
 801249c:	4770      	bx	lr

0801249e <__lo0bits>:
 801249e:	6803      	ldr	r3, [r0, #0]
 80124a0:	4602      	mov	r2, r0
 80124a2:	f013 0007 	ands.w	r0, r3, #7
 80124a6:	d00b      	beq.n	80124c0 <__lo0bits+0x22>
 80124a8:	07d9      	lsls	r1, r3, #31
 80124aa:	d421      	bmi.n	80124f0 <__lo0bits+0x52>
 80124ac:	0798      	lsls	r0, r3, #30
 80124ae:	bf49      	itett	mi
 80124b0:	085b      	lsrmi	r3, r3, #1
 80124b2:	089b      	lsrpl	r3, r3, #2
 80124b4:	2001      	movmi	r0, #1
 80124b6:	6013      	strmi	r3, [r2, #0]
 80124b8:	bf5c      	itt	pl
 80124ba:	6013      	strpl	r3, [r2, #0]
 80124bc:	2002      	movpl	r0, #2
 80124be:	4770      	bx	lr
 80124c0:	b299      	uxth	r1, r3
 80124c2:	b909      	cbnz	r1, 80124c8 <__lo0bits+0x2a>
 80124c4:	0c1b      	lsrs	r3, r3, #16
 80124c6:	2010      	movs	r0, #16
 80124c8:	b2d9      	uxtb	r1, r3
 80124ca:	b909      	cbnz	r1, 80124d0 <__lo0bits+0x32>
 80124cc:	3008      	adds	r0, #8
 80124ce:	0a1b      	lsrs	r3, r3, #8
 80124d0:	0719      	lsls	r1, r3, #28
 80124d2:	bf04      	itt	eq
 80124d4:	091b      	lsreq	r3, r3, #4
 80124d6:	3004      	addeq	r0, #4
 80124d8:	0799      	lsls	r1, r3, #30
 80124da:	bf04      	itt	eq
 80124dc:	089b      	lsreq	r3, r3, #2
 80124de:	3002      	addeq	r0, #2
 80124e0:	07d9      	lsls	r1, r3, #31
 80124e2:	d403      	bmi.n	80124ec <__lo0bits+0x4e>
 80124e4:	085b      	lsrs	r3, r3, #1
 80124e6:	f100 0001 	add.w	r0, r0, #1
 80124ea:	d003      	beq.n	80124f4 <__lo0bits+0x56>
 80124ec:	6013      	str	r3, [r2, #0]
 80124ee:	4770      	bx	lr
 80124f0:	2000      	movs	r0, #0
 80124f2:	4770      	bx	lr
 80124f4:	2020      	movs	r0, #32
 80124f6:	4770      	bx	lr

080124f8 <__i2b>:
 80124f8:	b510      	push	{r4, lr}
 80124fa:	460c      	mov	r4, r1
 80124fc:	2101      	movs	r1, #1
 80124fe:	f7ff ff3b 	bl	8012378 <_Balloc>
 8012502:	4602      	mov	r2, r0
 8012504:	b928      	cbnz	r0, 8012512 <__i2b+0x1a>
 8012506:	4b05      	ldr	r3, [pc, #20]	@ (801251c <__i2b+0x24>)
 8012508:	4805      	ldr	r0, [pc, #20]	@ (8012520 <__i2b+0x28>)
 801250a:	f240 1145 	movw	r1, #325	@ 0x145
 801250e:	f000 fdd7 	bl	80130c0 <__assert_func>
 8012512:	2301      	movs	r3, #1
 8012514:	6144      	str	r4, [r0, #20]
 8012516:	6103      	str	r3, [r0, #16]
 8012518:	bd10      	pop	{r4, pc}
 801251a:	bf00      	nop
 801251c:	08014c9c 	.word	0x08014c9c
 8012520:	08014d35 	.word	0x08014d35

08012524 <__multiply>:
 8012524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012528:	4614      	mov	r4, r2
 801252a:	690a      	ldr	r2, [r1, #16]
 801252c:	6923      	ldr	r3, [r4, #16]
 801252e:	429a      	cmp	r2, r3
 8012530:	bfa8      	it	ge
 8012532:	4623      	movge	r3, r4
 8012534:	460f      	mov	r7, r1
 8012536:	bfa4      	itt	ge
 8012538:	460c      	movge	r4, r1
 801253a:	461f      	movge	r7, r3
 801253c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012540:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012544:	68a3      	ldr	r3, [r4, #8]
 8012546:	6861      	ldr	r1, [r4, #4]
 8012548:	eb0a 0609 	add.w	r6, sl, r9
 801254c:	42b3      	cmp	r3, r6
 801254e:	b085      	sub	sp, #20
 8012550:	bfb8      	it	lt
 8012552:	3101      	addlt	r1, #1
 8012554:	f7ff ff10 	bl	8012378 <_Balloc>
 8012558:	b930      	cbnz	r0, 8012568 <__multiply+0x44>
 801255a:	4602      	mov	r2, r0
 801255c:	4b44      	ldr	r3, [pc, #272]	@ (8012670 <__multiply+0x14c>)
 801255e:	4845      	ldr	r0, [pc, #276]	@ (8012674 <__multiply+0x150>)
 8012560:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012564:	f000 fdac 	bl	80130c0 <__assert_func>
 8012568:	f100 0514 	add.w	r5, r0, #20
 801256c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012570:	462b      	mov	r3, r5
 8012572:	2200      	movs	r2, #0
 8012574:	4543      	cmp	r3, r8
 8012576:	d321      	bcc.n	80125bc <__multiply+0x98>
 8012578:	f107 0114 	add.w	r1, r7, #20
 801257c:	f104 0214 	add.w	r2, r4, #20
 8012580:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012584:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012588:	9302      	str	r3, [sp, #8]
 801258a:	1b13      	subs	r3, r2, r4
 801258c:	3b15      	subs	r3, #21
 801258e:	f023 0303 	bic.w	r3, r3, #3
 8012592:	3304      	adds	r3, #4
 8012594:	f104 0715 	add.w	r7, r4, #21
 8012598:	42ba      	cmp	r2, r7
 801259a:	bf38      	it	cc
 801259c:	2304      	movcc	r3, #4
 801259e:	9301      	str	r3, [sp, #4]
 80125a0:	9b02      	ldr	r3, [sp, #8]
 80125a2:	9103      	str	r1, [sp, #12]
 80125a4:	428b      	cmp	r3, r1
 80125a6:	d80c      	bhi.n	80125c2 <__multiply+0x9e>
 80125a8:	2e00      	cmp	r6, #0
 80125aa:	dd03      	ble.n	80125b4 <__multiply+0x90>
 80125ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d05b      	beq.n	801266c <__multiply+0x148>
 80125b4:	6106      	str	r6, [r0, #16]
 80125b6:	b005      	add	sp, #20
 80125b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125bc:	f843 2b04 	str.w	r2, [r3], #4
 80125c0:	e7d8      	b.n	8012574 <__multiply+0x50>
 80125c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80125c6:	f1ba 0f00 	cmp.w	sl, #0
 80125ca:	d024      	beq.n	8012616 <__multiply+0xf2>
 80125cc:	f104 0e14 	add.w	lr, r4, #20
 80125d0:	46a9      	mov	r9, r5
 80125d2:	f04f 0c00 	mov.w	ip, #0
 80125d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80125da:	f8d9 3000 	ldr.w	r3, [r9]
 80125de:	fa1f fb87 	uxth.w	fp, r7
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80125e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80125ec:	f8d9 7000 	ldr.w	r7, [r9]
 80125f0:	4463      	add	r3, ip
 80125f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80125f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80125fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80125fe:	b29b      	uxth	r3, r3
 8012600:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012604:	4572      	cmp	r2, lr
 8012606:	f849 3b04 	str.w	r3, [r9], #4
 801260a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801260e:	d8e2      	bhi.n	80125d6 <__multiply+0xb2>
 8012610:	9b01      	ldr	r3, [sp, #4]
 8012612:	f845 c003 	str.w	ip, [r5, r3]
 8012616:	9b03      	ldr	r3, [sp, #12]
 8012618:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801261c:	3104      	adds	r1, #4
 801261e:	f1b9 0f00 	cmp.w	r9, #0
 8012622:	d021      	beq.n	8012668 <__multiply+0x144>
 8012624:	682b      	ldr	r3, [r5, #0]
 8012626:	f104 0c14 	add.w	ip, r4, #20
 801262a:	46ae      	mov	lr, r5
 801262c:	f04f 0a00 	mov.w	sl, #0
 8012630:	f8bc b000 	ldrh.w	fp, [ip]
 8012634:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012638:	fb09 770b 	mla	r7, r9, fp, r7
 801263c:	4457      	add	r7, sl
 801263e:	b29b      	uxth	r3, r3
 8012640:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012644:	f84e 3b04 	str.w	r3, [lr], #4
 8012648:	f85c 3b04 	ldr.w	r3, [ip], #4
 801264c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012650:	f8be 3000 	ldrh.w	r3, [lr]
 8012654:	fb09 330a 	mla	r3, r9, sl, r3
 8012658:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801265c:	4562      	cmp	r2, ip
 801265e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012662:	d8e5      	bhi.n	8012630 <__multiply+0x10c>
 8012664:	9f01      	ldr	r7, [sp, #4]
 8012666:	51eb      	str	r3, [r5, r7]
 8012668:	3504      	adds	r5, #4
 801266a:	e799      	b.n	80125a0 <__multiply+0x7c>
 801266c:	3e01      	subs	r6, #1
 801266e:	e79b      	b.n	80125a8 <__multiply+0x84>
 8012670:	08014c9c 	.word	0x08014c9c
 8012674:	08014d35 	.word	0x08014d35

08012678 <__pow5mult>:
 8012678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801267c:	4615      	mov	r5, r2
 801267e:	f012 0203 	ands.w	r2, r2, #3
 8012682:	4607      	mov	r7, r0
 8012684:	460e      	mov	r6, r1
 8012686:	d007      	beq.n	8012698 <__pow5mult+0x20>
 8012688:	4c1a      	ldr	r4, [pc, #104]	@ (80126f4 <__pow5mult+0x7c>)
 801268a:	3a01      	subs	r2, #1
 801268c:	2300      	movs	r3, #0
 801268e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012692:	f7ff fe9f 	bl	80123d4 <__multadd>
 8012696:	4606      	mov	r6, r0
 8012698:	10ad      	asrs	r5, r5, #2
 801269a:	d027      	beq.n	80126ec <__pow5mult+0x74>
 801269c:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 801269e:	b944      	cbnz	r4, 80126b2 <__pow5mult+0x3a>
 80126a0:	f240 2171 	movw	r1, #625	@ 0x271
 80126a4:	4638      	mov	r0, r7
 80126a6:	f7ff ff27 	bl	80124f8 <__i2b>
 80126aa:	2300      	movs	r3, #0
 80126ac:	6438      	str	r0, [r7, #64]	@ 0x40
 80126ae:	4604      	mov	r4, r0
 80126b0:	6003      	str	r3, [r0, #0]
 80126b2:	f04f 0900 	mov.w	r9, #0
 80126b6:	07eb      	lsls	r3, r5, #31
 80126b8:	d50a      	bpl.n	80126d0 <__pow5mult+0x58>
 80126ba:	4631      	mov	r1, r6
 80126bc:	4622      	mov	r2, r4
 80126be:	4638      	mov	r0, r7
 80126c0:	f7ff ff30 	bl	8012524 <__multiply>
 80126c4:	4631      	mov	r1, r6
 80126c6:	4680      	mov	r8, r0
 80126c8:	4638      	mov	r0, r7
 80126ca:	f7ff fe7a 	bl	80123c2 <_Bfree>
 80126ce:	4646      	mov	r6, r8
 80126d0:	106d      	asrs	r5, r5, #1
 80126d2:	d00b      	beq.n	80126ec <__pow5mult+0x74>
 80126d4:	6820      	ldr	r0, [r4, #0]
 80126d6:	b938      	cbnz	r0, 80126e8 <__pow5mult+0x70>
 80126d8:	4622      	mov	r2, r4
 80126da:	4621      	mov	r1, r4
 80126dc:	4638      	mov	r0, r7
 80126de:	f7ff ff21 	bl	8012524 <__multiply>
 80126e2:	6020      	str	r0, [r4, #0]
 80126e4:	f8c0 9000 	str.w	r9, [r0]
 80126e8:	4604      	mov	r4, r0
 80126ea:	e7e4      	b.n	80126b6 <__pow5mult+0x3e>
 80126ec:	4630      	mov	r0, r6
 80126ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126f2:	bf00      	nop
 80126f4:	08014d90 	.word	0x08014d90

080126f8 <__lshift>:
 80126f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126fc:	460c      	mov	r4, r1
 80126fe:	6849      	ldr	r1, [r1, #4]
 8012700:	6923      	ldr	r3, [r4, #16]
 8012702:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012706:	68a3      	ldr	r3, [r4, #8]
 8012708:	4607      	mov	r7, r0
 801270a:	4691      	mov	r9, r2
 801270c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012710:	f108 0601 	add.w	r6, r8, #1
 8012714:	42b3      	cmp	r3, r6
 8012716:	db0b      	blt.n	8012730 <__lshift+0x38>
 8012718:	4638      	mov	r0, r7
 801271a:	f7ff fe2d 	bl	8012378 <_Balloc>
 801271e:	4605      	mov	r5, r0
 8012720:	b948      	cbnz	r0, 8012736 <__lshift+0x3e>
 8012722:	4602      	mov	r2, r0
 8012724:	4b28      	ldr	r3, [pc, #160]	@ (80127c8 <__lshift+0xd0>)
 8012726:	4829      	ldr	r0, [pc, #164]	@ (80127cc <__lshift+0xd4>)
 8012728:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801272c:	f000 fcc8 	bl	80130c0 <__assert_func>
 8012730:	3101      	adds	r1, #1
 8012732:	005b      	lsls	r3, r3, #1
 8012734:	e7ee      	b.n	8012714 <__lshift+0x1c>
 8012736:	2300      	movs	r3, #0
 8012738:	f100 0114 	add.w	r1, r0, #20
 801273c:	f100 0210 	add.w	r2, r0, #16
 8012740:	4618      	mov	r0, r3
 8012742:	4553      	cmp	r3, sl
 8012744:	db33      	blt.n	80127ae <__lshift+0xb6>
 8012746:	6920      	ldr	r0, [r4, #16]
 8012748:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801274c:	f104 0314 	add.w	r3, r4, #20
 8012750:	f019 091f 	ands.w	r9, r9, #31
 8012754:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012758:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801275c:	d02b      	beq.n	80127b6 <__lshift+0xbe>
 801275e:	f1c9 0e20 	rsb	lr, r9, #32
 8012762:	468a      	mov	sl, r1
 8012764:	2200      	movs	r2, #0
 8012766:	6818      	ldr	r0, [r3, #0]
 8012768:	fa00 f009 	lsl.w	r0, r0, r9
 801276c:	4310      	orrs	r0, r2
 801276e:	f84a 0b04 	str.w	r0, [sl], #4
 8012772:	f853 2b04 	ldr.w	r2, [r3], #4
 8012776:	459c      	cmp	ip, r3
 8012778:	fa22 f20e 	lsr.w	r2, r2, lr
 801277c:	d8f3      	bhi.n	8012766 <__lshift+0x6e>
 801277e:	ebac 0304 	sub.w	r3, ip, r4
 8012782:	3b15      	subs	r3, #21
 8012784:	f023 0303 	bic.w	r3, r3, #3
 8012788:	3304      	adds	r3, #4
 801278a:	f104 0015 	add.w	r0, r4, #21
 801278e:	4584      	cmp	ip, r0
 8012790:	bf38      	it	cc
 8012792:	2304      	movcc	r3, #4
 8012794:	50ca      	str	r2, [r1, r3]
 8012796:	b10a      	cbz	r2, 801279c <__lshift+0xa4>
 8012798:	f108 0602 	add.w	r6, r8, #2
 801279c:	3e01      	subs	r6, #1
 801279e:	4638      	mov	r0, r7
 80127a0:	612e      	str	r6, [r5, #16]
 80127a2:	4621      	mov	r1, r4
 80127a4:	f7ff fe0d 	bl	80123c2 <_Bfree>
 80127a8:	4628      	mov	r0, r5
 80127aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80127b2:	3301      	adds	r3, #1
 80127b4:	e7c5      	b.n	8012742 <__lshift+0x4a>
 80127b6:	3904      	subs	r1, #4
 80127b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80127bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80127c0:	459c      	cmp	ip, r3
 80127c2:	d8f9      	bhi.n	80127b8 <__lshift+0xc0>
 80127c4:	e7ea      	b.n	801279c <__lshift+0xa4>
 80127c6:	bf00      	nop
 80127c8:	08014c9c 	.word	0x08014c9c
 80127cc:	08014d35 	.word	0x08014d35

080127d0 <__mcmp>:
 80127d0:	690a      	ldr	r2, [r1, #16]
 80127d2:	4603      	mov	r3, r0
 80127d4:	6900      	ldr	r0, [r0, #16]
 80127d6:	1a80      	subs	r0, r0, r2
 80127d8:	b530      	push	{r4, r5, lr}
 80127da:	d10e      	bne.n	80127fa <__mcmp+0x2a>
 80127dc:	3314      	adds	r3, #20
 80127de:	3114      	adds	r1, #20
 80127e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80127e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80127e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80127ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80127f0:	4295      	cmp	r5, r2
 80127f2:	d003      	beq.n	80127fc <__mcmp+0x2c>
 80127f4:	d205      	bcs.n	8012802 <__mcmp+0x32>
 80127f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80127fa:	bd30      	pop	{r4, r5, pc}
 80127fc:	42a3      	cmp	r3, r4
 80127fe:	d3f3      	bcc.n	80127e8 <__mcmp+0x18>
 8012800:	e7fb      	b.n	80127fa <__mcmp+0x2a>
 8012802:	2001      	movs	r0, #1
 8012804:	e7f9      	b.n	80127fa <__mcmp+0x2a>
	...

08012808 <__mdiff>:
 8012808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801280c:	4689      	mov	r9, r1
 801280e:	4606      	mov	r6, r0
 8012810:	4611      	mov	r1, r2
 8012812:	4648      	mov	r0, r9
 8012814:	4614      	mov	r4, r2
 8012816:	f7ff ffdb 	bl	80127d0 <__mcmp>
 801281a:	1e05      	subs	r5, r0, #0
 801281c:	d112      	bne.n	8012844 <__mdiff+0x3c>
 801281e:	4629      	mov	r1, r5
 8012820:	4630      	mov	r0, r6
 8012822:	f7ff fda9 	bl	8012378 <_Balloc>
 8012826:	4602      	mov	r2, r0
 8012828:	b928      	cbnz	r0, 8012836 <__mdiff+0x2e>
 801282a:	4b3f      	ldr	r3, [pc, #252]	@ (8012928 <__mdiff+0x120>)
 801282c:	f240 2137 	movw	r1, #567	@ 0x237
 8012830:	483e      	ldr	r0, [pc, #248]	@ (801292c <__mdiff+0x124>)
 8012832:	f000 fc45 	bl	80130c0 <__assert_func>
 8012836:	2301      	movs	r3, #1
 8012838:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801283c:	4610      	mov	r0, r2
 801283e:	b003      	add	sp, #12
 8012840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012844:	bfbc      	itt	lt
 8012846:	464b      	movlt	r3, r9
 8012848:	46a1      	movlt	r9, r4
 801284a:	4630      	mov	r0, r6
 801284c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012850:	bfba      	itte	lt
 8012852:	461c      	movlt	r4, r3
 8012854:	2501      	movlt	r5, #1
 8012856:	2500      	movge	r5, #0
 8012858:	f7ff fd8e 	bl	8012378 <_Balloc>
 801285c:	4602      	mov	r2, r0
 801285e:	b918      	cbnz	r0, 8012868 <__mdiff+0x60>
 8012860:	4b31      	ldr	r3, [pc, #196]	@ (8012928 <__mdiff+0x120>)
 8012862:	f240 2145 	movw	r1, #581	@ 0x245
 8012866:	e7e3      	b.n	8012830 <__mdiff+0x28>
 8012868:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801286c:	6926      	ldr	r6, [r4, #16]
 801286e:	60c5      	str	r5, [r0, #12]
 8012870:	f109 0310 	add.w	r3, r9, #16
 8012874:	f109 0514 	add.w	r5, r9, #20
 8012878:	f104 0e14 	add.w	lr, r4, #20
 801287c:	f100 0b14 	add.w	fp, r0, #20
 8012880:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012884:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012888:	9301      	str	r3, [sp, #4]
 801288a:	46d9      	mov	r9, fp
 801288c:	f04f 0c00 	mov.w	ip, #0
 8012890:	9b01      	ldr	r3, [sp, #4]
 8012892:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012896:	f853 af04 	ldr.w	sl, [r3, #4]!
 801289a:	9301      	str	r3, [sp, #4]
 801289c:	fa1f f38a 	uxth.w	r3, sl
 80128a0:	4619      	mov	r1, r3
 80128a2:	b283      	uxth	r3, r0
 80128a4:	1acb      	subs	r3, r1, r3
 80128a6:	0c00      	lsrs	r0, r0, #16
 80128a8:	4463      	add	r3, ip
 80128aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80128ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80128b2:	b29b      	uxth	r3, r3
 80128b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80128b8:	4576      	cmp	r6, lr
 80128ba:	f849 3b04 	str.w	r3, [r9], #4
 80128be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80128c2:	d8e5      	bhi.n	8012890 <__mdiff+0x88>
 80128c4:	1b33      	subs	r3, r6, r4
 80128c6:	3b15      	subs	r3, #21
 80128c8:	f023 0303 	bic.w	r3, r3, #3
 80128cc:	3415      	adds	r4, #21
 80128ce:	3304      	adds	r3, #4
 80128d0:	42a6      	cmp	r6, r4
 80128d2:	bf38      	it	cc
 80128d4:	2304      	movcc	r3, #4
 80128d6:	441d      	add	r5, r3
 80128d8:	445b      	add	r3, fp
 80128da:	461e      	mov	r6, r3
 80128dc:	462c      	mov	r4, r5
 80128de:	4544      	cmp	r4, r8
 80128e0:	d30e      	bcc.n	8012900 <__mdiff+0xf8>
 80128e2:	f108 0103 	add.w	r1, r8, #3
 80128e6:	1b49      	subs	r1, r1, r5
 80128e8:	f021 0103 	bic.w	r1, r1, #3
 80128ec:	3d03      	subs	r5, #3
 80128ee:	45a8      	cmp	r8, r5
 80128f0:	bf38      	it	cc
 80128f2:	2100      	movcc	r1, #0
 80128f4:	440b      	add	r3, r1
 80128f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80128fa:	b191      	cbz	r1, 8012922 <__mdiff+0x11a>
 80128fc:	6117      	str	r7, [r2, #16]
 80128fe:	e79d      	b.n	801283c <__mdiff+0x34>
 8012900:	f854 1b04 	ldr.w	r1, [r4], #4
 8012904:	46e6      	mov	lr, ip
 8012906:	0c08      	lsrs	r0, r1, #16
 8012908:	fa1c fc81 	uxtah	ip, ip, r1
 801290c:	4471      	add	r1, lr
 801290e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012912:	b289      	uxth	r1, r1
 8012914:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012918:	f846 1b04 	str.w	r1, [r6], #4
 801291c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012920:	e7dd      	b.n	80128de <__mdiff+0xd6>
 8012922:	3f01      	subs	r7, #1
 8012924:	e7e7      	b.n	80128f6 <__mdiff+0xee>
 8012926:	bf00      	nop
 8012928:	08014c9c 	.word	0x08014c9c
 801292c:	08014d35 	.word	0x08014d35

08012930 <__d2b>:
 8012930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012934:	460f      	mov	r7, r1
 8012936:	2101      	movs	r1, #1
 8012938:	ec59 8b10 	vmov	r8, r9, d0
 801293c:	4616      	mov	r6, r2
 801293e:	f7ff fd1b 	bl	8012378 <_Balloc>
 8012942:	4604      	mov	r4, r0
 8012944:	b930      	cbnz	r0, 8012954 <__d2b+0x24>
 8012946:	4602      	mov	r2, r0
 8012948:	4b23      	ldr	r3, [pc, #140]	@ (80129d8 <__d2b+0xa8>)
 801294a:	4824      	ldr	r0, [pc, #144]	@ (80129dc <__d2b+0xac>)
 801294c:	f240 310f 	movw	r1, #783	@ 0x30f
 8012950:	f000 fbb6 	bl	80130c0 <__assert_func>
 8012954:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801295c:	b10d      	cbz	r5, 8012962 <__d2b+0x32>
 801295e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012962:	9301      	str	r3, [sp, #4]
 8012964:	f1b8 0300 	subs.w	r3, r8, #0
 8012968:	d023      	beq.n	80129b2 <__d2b+0x82>
 801296a:	4668      	mov	r0, sp
 801296c:	9300      	str	r3, [sp, #0]
 801296e:	f7ff fd96 	bl	801249e <__lo0bits>
 8012972:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012976:	b1d0      	cbz	r0, 80129ae <__d2b+0x7e>
 8012978:	f1c0 0320 	rsb	r3, r0, #32
 801297c:	fa02 f303 	lsl.w	r3, r2, r3
 8012980:	430b      	orrs	r3, r1
 8012982:	40c2      	lsrs	r2, r0
 8012984:	6163      	str	r3, [r4, #20]
 8012986:	9201      	str	r2, [sp, #4]
 8012988:	9b01      	ldr	r3, [sp, #4]
 801298a:	61a3      	str	r3, [r4, #24]
 801298c:	2b00      	cmp	r3, #0
 801298e:	bf0c      	ite	eq
 8012990:	2201      	moveq	r2, #1
 8012992:	2202      	movne	r2, #2
 8012994:	6122      	str	r2, [r4, #16]
 8012996:	b1a5      	cbz	r5, 80129c2 <__d2b+0x92>
 8012998:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801299c:	4405      	add	r5, r0
 801299e:	603d      	str	r5, [r7, #0]
 80129a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80129a4:	6030      	str	r0, [r6, #0]
 80129a6:	4620      	mov	r0, r4
 80129a8:	b003      	add	sp, #12
 80129aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129ae:	6161      	str	r1, [r4, #20]
 80129b0:	e7ea      	b.n	8012988 <__d2b+0x58>
 80129b2:	a801      	add	r0, sp, #4
 80129b4:	f7ff fd73 	bl	801249e <__lo0bits>
 80129b8:	9b01      	ldr	r3, [sp, #4]
 80129ba:	6163      	str	r3, [r4, #20]
 80129bc:	3020      	adds	r0, #32
 80129be:	2201      	movs	r2, #1
 80129c0:	e7e8      	b.n	8012994 <__d2b+0x64>
 80129c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80129c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80129ca:	6038      	str	r0, [r7, #0]
 80129cc:	6918      	ldr	r0, [r3, #16]
 80129ce:	f7ff fd47 	bl	8012460 <__hi0bits>
 80129d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80129d6:	e7e5      	b.n	80129a4 <__d2b+0x74>
 80129d8:	08014c9c 	.word	0x08014c9c
 80129dc:	08014d35 	.word	0x08014d35

080129e0 <_fclose_r>:
 80129e0:	b570      	push	{r4, r5, r6, lr}
 80129e2:	4605      	mov	r5, r0
 80129e4:	460c      	mov	r4, r1
 80129e6:	b1b1      	cbz	r1, 8012a16 <_fclose_r+0x36>
 80129e8:	b118      	cbz	r0, 80129f2 <_fclose_r+0x12>
 80129ea:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80129ec:	b90b      	cbnz	r3, 80129f2 <_fclose_r+0x12>
 80129ee:	f7fc fe89 	bl	800f704 <__sinit>
 80129f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80129f4:	07de      	lsls	r6, r3, #31
 80129f6:	d405      	bmi.n	8012a04 <_fclose_r+0x24>
 80129f8:	89a3      	ldrh	r3, [r4, #12]
 80129fa:	0598      	lsls	r0, r3, #22
 80129fc:	d402      	bmi.n	8012a04 <_fclose_r+0x24>
 80129fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a00:	f7fd f92e 	bl	800fc60 <__retarget_lock_acquire_recursive>
 8012a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a08:	b943      	cbnz	r3, 8012a1c <_fclose_r+0x3c>
 8012a0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a0c:	07d9      	lsls	r1, r3, #31
 8012a0e:	d402      	bmi.n	8012a16 <_fclose_r+0x36>
 8012a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a12:	f7fd f926 	bl	800fc62 <__retarget_lock_release_recursive>
 8012a16:	2600      	movs	r6, #0
 8012a18:	4630      	mov	r0, r6
 8012a1a:	bd70      	pop	{r4, r5, r6, pc}
 8012a1c:	4621      	mov	r1, r4
 8012a1e:	4628      	mov	r0, r5
 8012a20:	f7fc fd16 	bl	800f450 <__sflush_r>
 8012a24:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012a26:	4606      	mov	r6, r0
 8012a28:	b133      	cbz	r3, 8012a38 <_fclose_r+0x58>
 8012a2a:	69e1      	ldr	r1, [r4, #28]
 8012a2c:	4628      	mov	r0, r5
 8012a2e:	4798      	blx	r3
 8012a30:	2800      	cmp	r0, #0
 8012a32:	bfb8      	it	lt
 8012a34:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8012a38:	89a3      	ldrh	r3, [r4, #12]
 8012a3a:	061a      	lsls	r2, r3, #24
 8012a3c:	d503      	bpl.n	8012a46 <_fclose_r+0x66>
 8012a3e:	6921      	ldr	r1, [r4, #16]
 8012a40:	4628      	mov	r0, r5
 8012a42:	f7fd ff99 	bl	8010978 <_free_r>
 8012a46:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012a48:	b141      	cbz	r1, 8012a5c <_fclose_r+0x7c>
 8012a4a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8012a4e:	4299      	cmp	r1, r3
 8012a50:	d002      	beq.n	8012a58 <_fclose_r+0x78>
 8012a52:	4628      	mov	r0, r5
 8012a54:	f7fd ff90 	bl	8010978 <_free_r>
 8012a58:	2300      	movs	r3, #0
 8012a5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8012a5c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012a5e:	b121      	cbz	r1, 8012a6a <_fclose_r+0x8a>
 8012a60:	4628      	mov	r0, r5
 8012a62:	f7fd ff89 	bl	8010978 <_free_r>
 8012a66:	2300      	movs	r3, #0
 8012a68:	6463      	str	r3, [r4, #68]	@ 0x44
 8012a6a:	f7fc fe3f 	bl	800f6ec <__sfp_lock_acquire>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	81a3      	strh	r3, [r4, #12]
 8012a72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a74:	07db      	lsls	r3, r3, #31
 8012a76:	d402      	bmi.n	8012a7e <_fclose_r+0x9e>
 8012a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a7a:	f7fd f8f2 	bl	800fc62 <__retarget_lock_release_recursive>
 8012a7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a80:	f7fd f8ed 	bl	800fc5e <__retarget_lock_close_recursive>
 8012a84:	f7fc fe38 	bl	800f6f8 <__sfp_lock_release>
 8012a88:	e7c6      	b.n	8012a18 <_fclose_r+0x38>
	...

08012a8c <_realloc_r>:
 8012a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a90:	4682      	mov	sl, r0
 8012a92:	4693      	mov	fp, r2
 8012a94:	460c      	mov	r4, r1
 8012a96:	b929      	cbnz	r1, 8012aa4 <_realloc_r+0x18>
 8012a98:	4611      	mov	r1, r2
 8012a9a:	b003      	add	sp, #12
 8012a9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa0:	f7fe b82a 	b.w	8010af8 <_malloc_r>
 8012aa4:	f7ff fc5c 	bl	8012360 <__malloc_lock>
 8012aa8:	f10b 080b 	add.w	r8, fp, #11
 8012aac:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8012ab0:	f1b8 0f16 	cmp.w	r8, #22
 8012ab4:	f1a4 0908 	sub.w	r9, r4, #8
 8012ab8:	f025 0603 	bic.w	r6, r5, #3
 8012abc:	d908      	bls.n	8012ad0 <_realloc_r+0x44>
 8012abe:	f038 0807 	bics.w	r8, r8, #7
 8012ac2:	d507      	bpl.n	8012ad4 <_realloc_r+0x48>
 8012ac4:	230c      	movs	r3, #12
 8012ac6:	f8ca 3000 	str.w	r3, [sl]
 8012aca:	f04f 0b00 	mov.w	fp, #0
 8012ace:	e032      	b.n	8012b36 <_realloc_r+0xaa>
 8012ad0:	f04f 0810 	mov.w	r8, #16
 8012ad4:	45c3      	cmp	fp, r8
 8012ad6:	d8f5      	bhi.n	8012ac4 <_realloc_r+0x38>
 8012ad8:	4546      	cmp	r6, r8
 8012ada:	f280 8174 	bge.w	8012dc6 <_realloc_r+0x33a>
 8012ade:	4b9e      	ldr	r3, [pc, #632]	@ (8012d58 <_realloc_r+0x2cc>)
 8012ae0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8012ae4:	eb09 0106 	add.w	r1, r9, r6
 8012ae8:	458c      	cmp	ip, r1
 8012aea:	6848      	ldr	r0, [r1, #4]
 8012aec:	d005      	beq.n	8012afa <_realloc_r+0x6e>
 8012aee:	f020 0201 	bic.w	r2, r0, #1
 8012af2:	440a      	add	r2, r1
 8012af4:	6852      	ldr	r2, [r2, #4]
 8012af6:	07d7      	lsls	r7, r2, #31
 8012af8:	d449      	bmi.n	8012b8e <_realloc_r+0x102>
 8012afa:	f020 0003 	bic.w	r0, r0, #3
 8012afe:	458c      	cmp	ip, r1
 8012b00:	eb06 0700 	add.w	r7, r6, r0
 8012b04:	d11b      	bne.n	8012b3e <_realloc_r+0xb2>
 8012b06:	f108 0210 	add.w	r2, r8, #16
 8012b0a:	42ba      	cmp	r2, r7
 8012b0c:	dc41      	bgt.n	8012b92 <_realloc_r+0x106>
 8012b0e:	eb09 0208 	add.w	r2, r9, r8
 8012b12:	eba7 0708 	sub.w	r7, r7, r8
 8012b16:	f047 0701 	orr.w	r7, r7, #1
 8012b1a:	609a      	str	r2, [r3, #8]
 8012b1c:	6057      	str	r7, [r2, #4]
 8012b1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012b22:	f003 0301 	and.w	r3, r3, #1
 8012b26:	ea43 0308 	orr.w	r3, r3, r8
 8012b2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b2e:	4650      	mov	r0, sl
 8012b30:	f7ff fc1c 	bl	801236c <__malloc_unlock>
 8012b34:	46a3      	mov	fp, r4
 8012b36:	4658      	mov	r0, fp
 8012b38:	b003      	add	sp, #12
 8012b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b3e:	45b8      	cmp	r8, r7
 8012b40:	dc27      	bgt.n	8012b92 <_realloc_r+0x106>
 8012b42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012b46:	60d3      	str	r3, [r2, #12]
 8012b48:	609a      	str	r2, [r3, #8]
 8012b4a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012b4e:	eba7 0008 	sub.w	r0, r7, r8
 8012b52:	280f      	cmp	r0, #15
 8012b54:	f003 0301 	and.w	r3, r3, #1
 8012b58:	eb09 0207 	add.w	r2, r9, r7
 8012b5c:	f240 8135 	bls.w	8012dca <_realloc_r+0x33e>
 8012b60:	eb09 0108 	add.w	r1, r9, r8
 8012b64:	ea48 0303 	orr.w	r3, r8, r3
 8012b68:	f040 0001 	orr.w	r0, r0, #1
 8012b6c:	f8c9 3004 	str.w	r3, [r9, #4]
 8012b70:	6048      	str	r0, [r1, #4]
 8012b72:	6853      	ldr	r3, [r2, #4]
 8012b74:	f043 0301 	orr.w	r3, r3, #1
 8012b78:	6053      	str	r3, [r2, #4]
 8012b7a:	3108      	adds	r1, #8
 8012b7c:	4650      	mov	r0, sl
 8012b7e:	f7fd fefb 	bl	8010978 <_free_r>
 8012b82:	4650      	mov	r0, sl
 8012b84:	f7ff fbf2 	bl	801236c <__malloc_unlock>
 8012b88:	f109 0b08 	add.w	fp, r9, #8
 8012b8c:	e7d3      	b.n	8012b36 <_realloc_r+0xaa>
 8012b8e:	2000      	movs	r0, #0
 8012b90:	4601      	mov	r1, r0
 8012b92:	07ea      	lsls	r2, r5, #31
 8012b94:	f100 80c7 	bmi.w	8012d26 <_realloc_r+0x29a>
 8012b98:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8012b9c:	eba9 0505 	sub.w	r5, r9, r5
 8012ba0:	686a      	ldr	r2, [r5, #4]
 8012ba2:	f022 0203 	bic.w	r2, r2, #3
 8012ba6:	4432      	add	r2, r6
 8012ba8:	9201      	str	r2, [sp, #4]
 8012baa:	2900      	cmp	r1, #0
 8012bac:	f000 8086 	beq.w	8012cbc <_realloc_r+0x230>
 8012bb0:	458c      	cmp	ip, r1
 8012bb2:	eb00 0702 	add.w	r7, r0, r2
 8012bb6:	d149      	bne.n	8012c4c <_realloc_r+0x1c0>
 8012bb8:	f108 0210 	add.w	r2, r8, #16
 8012bbc:	42ba      	cmp	r2, r7
 8012bbe:	dc7d      	bgt.n	8012cbc <_realloc_r+0x230>
 8012bc0:	46ab      	mov	fp, r5
 8012bc2:	68ea      	ldr	r2, [r5, #12]
 8012bc4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8012bc8:	60ca      	str	r2, [r1, #12]
 8012bca:	6091      	str	r1, [r2, #8]
 8012bcc:	1f32      	subs	r2, r6, #4
 8012bce:	2a24      	cmp	r2, #36	@ 0x24
 8012bd0:	d836      	bhi.n	8012c40 <_realloc_r+0x1b4>
 8012bd2:	2a13      	cmp	r2, #19
 8012bd4:	d932      	bls.n	8012c3c <_realloc_r+0x1b0>
 8012bd6:	6821      	ldr	r1, [r4, #0]
 8012bd8:	60a9      	str	r1, [r5, #8]
 8012bda:	6861      	ldr	r1, [r4, #4]
 8012bdc:	60e9      	str	r1, [r5, #12]
 8012bde:	2a1b      	cmp	r2, #27
 8012be0:	d81a      	bhi.n	8012c18 <_realloc_r+0x18c>
 8012be2:	3408      	adds	r4, #8
 8012be4:	f105 0210 	add.w	r2, r5, #16
 8012be8:	6821      	ldr	r1, [r4, #0]
 8012bea:	6011      	str	r1, [r2, #0]
 8012bec:	6861      	ldr	r1, [r4, #4]
 8012bee:	6051      	str	r1, [r2, #4]
 8012bf0:	68a1      	ldr	r1, [r4, #8]
 8012bf2:	6091      	str	r1, [r2, #8]
 8012bf4:	eb05 0208 	add.w	r2, r5, r8
 8012bf8:	eba7 0708 	sub.w	r7, r7, r8
 8012bfc:	f047 0701 	orr.w	r7, r7, #1
 8012c00:	609a      	str	r2, [r3, #8]
 8012c02:	6057      	str	r7, [r2, #4]
 8012c04:	686b      	ldr	r3, [r5, #4]
 8012c06:	f003 0301 	and.w	r3, r3, #1
 8012c0a:	ea43 0308 	orr.w	r3, r3, r8
 8012c0e:	606b      	str	r3, [r5, #4]
 8012c10:	4650      	mov	r0, sl
 8012c12:	f7ff fbab 	bl	801236c <__malloc_unlock>
 8012c16:	e78e      	b.n	8012b36 <_realloc_r+0xaa>
 8012c18:	68a1      	ldr	r1, [r4, #8]
 8012c1a:	6129      	str	r1, [r5, #16]
 8012c1c:	68e1      	ldr	r1, [r4, #12]
 8012c1e:	6169      	str	r1, [r5, #20]
 8012c20:	2a24      	cmp	r2, #36	@ 0x24
 8012c22:	bf01      	itttt	eq
 8012c24:	6922      	ldreq	r2, [r4, #16]
 8012c26:	61aa      	streq	r2, [r5, #24]
 8012c28:	6961      	ldreq	r1, [r4, #20]
 8012c2a:	61e9      	streq	r1, [r5, #28]
 8012c2c:	bf19      	ittee	ne
 8012c2e:	3410      	addne	r4, #16
 8012c30:	f105 0218 	addne.w	r2, r5, #24
 8012c34:	f105 0220 	addeq.w	r2, r5, #32
 8012c38:	3418      	addeq	r4, #24
 8012c3a:	e7d5      	b.n	8012be8 <_realloc_r+0x15c>
 8012c3c:	465a      	mov	r2, fp
 8012c3e:	e7d3      	b.n	8012be8 <_realloc_r+0x15c>
 8012c40:	4621      	mov	r1, r4
 8012c42:	4658      	mov	r0, fp
 8012c44:	f7fc ffa0 	bl	800fb88 <memmove>
 8012c48:	4b43      	ldr	r3, [pc, #268]	@ (8012d58 <_realloc_r+0x2cc>)
 8012c4a:	e7d3      	b.n	8012bf4 <_realloc_r+0x168>
 8012c4c:	45b8      	cmp	r8, r7
 8012c4e:	dc35      	bgt.n	8012cbc <_realloc_r+0x230>
 8012c50:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012c54:	4628      	mov	r0, r5
 8012c56:	60d3      	str	r3, [r2, #12]
 8012c58:	609a      	str	r2, [r3, #8]
 8012c5a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8012c5e:	68eb      	ldr	r3, [r5, #12]
 8012c60:	60d3      	str	r3, [r2, #12]
 8012c62:	609a      	str	r2, [r3, #8]
 8012c64:	1f32      	subs	r2, r6, #4
 8012c66:	2a24      	cmp	r2, #36	@ 0x24
 8012c68:	d824      	bhi.n	8012cb4 <_realloc_r+0x228>
 8012c6a:	2a13      	cmp	r2, #19
 8012c6c:	d908      	bls.n	8012c80 <_realloc_r+0x1f4>
 8012c6e:	6823      	ldr	r3, [r4, #0]
 8012c70:	60ab      	str	r3, [r5, #8]
 8012c72:	6863      	ldr	r3, [r4, #4]
 8012c74:	60eb      	str	r3, [r5, #12]
 8012c76:	2a1b      	cmp	r2, #27
 8012c78:	d80a      	bhi.n	8012c90 <_realloc_r+0x204>
 8012c7a:	3408      	adds	r4, #8
 8012c7c:	f105 0010 	add.w	r0, r5, #16
 8012c80:	6823      	ldr	r3, [r4, #0]
 8012c82:	6003      	str	r3, [r0, #0]
 8012c84:	6863      	ldr	r3, [r4, #4]
 8012c86:	6043      	str	r3, [r0, #4]
 8012c88:	68a3      	ldr	r3, [r4, #8]
 8012c8a:	6083      	str	r3, [r0, #8]
 8012c8c:	46a9      	mov	r9, r5
 8012c8e:	e75c      	b.n	8012b4a <_realloc_r+0xbe>
 8012c90:	68a3      	ldr	r3, [r4, #8]
 8012c92:	612b      	str	r3, [r5, #16]
 8012c94:	68e3      	ldr	r3, [r4, #12]
 8012c96:	616b      	str	r3, [r5, #20]
 8012c98:	2a24      	cmp	r2, #36	@ 0x24
 8012c9a:	bf01      	itttt	eq
 8012c9c:	6923      	ldreq	r3, [r4, #16]
 8012c9e:	61ab      	streq	r3, [r5, #24]
 8012ca0:	6963      	ldreq	r3, [r4, #20]
 8012ca2:	61eb      	streq	r3, [r5, #28]
 8012ca4:	bf19      	ittee	ne
 8012ca6:	3410      	addne	r4, #16
 8012ca8:	f105 0018 	addne.w	r0, r5, #24
 8012cac:	f105 0020 	addeq.w	r0, r5, #32
 8012cb0:	3418      	addeq	r4, #24
 8012cb2:	e7e5      	b.n	8012c80 <_realloc_r+0x1f4>
 8012cb4:	4621      	mov	r1, r4
 8012cb6:	f7fc ff67 	bl	800fb88 <memmove>
 8012cba:	e7e7      	b.n	8012c8c <_realloc_r+0x200>
 8012cbc:	9b01      	ldr	r3, [sp, #4]
 8012cbe:	4598      	cmp	r8, r3
 8012cc0:	dc31      	bgt.n	8012d26 <_realloc_r+0x29a>
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	68eb      	ldr	r3, [r5, #12]
 8012cc6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8012cca:	60d3      	str	r3, [r2, #12]
 8012ccc:	609a      	str	r2, [r3, #8]
 8012cce:	1f32      	subs	r2, r6, #4
 8012cd0:	2a24      	cmp	r2, #36	@ 0x24
 8012cd2:	d824      	bhi.n	8012d1e <_realloc_r+0x292>
 8012cd4:	2a13      	cmp	r2, #19
 8012cd6:	d908      	bls.n	8012cea <_realloc_r+0x25e>
 8012cd8:	6823      	ldr	r3, [r4, #0]
 8012cda:	60ab      	str	r3, [r5, #8]
 8012cdc:	6863      	ldr	r3, [r4, #4]
 8012cde:	60eb      	str	r3, [r5, #12]
 8012ce0:	2a1b      	cmp	r2, #27
 8012ce2:	d80a      	bhi.n	8012cfa <_realloc_r+0x26e>
 8012ce4:	3408      	adds	r4, #8
 8012ce6:	f105 0010 	add.w	r0, r5, #16
 8012cea:	6823      	ldr	r3, [r4, #0]
 8012cec:	6003      	str	r3, [r0, #0]
 8012cee:	6863      	ldr	r3, [r4, #4]
 8012cf0:	6043      	str	r3, [r0, #4]
 8012cf2:	68a3      	ldr	r3, [r4, #8]
 8012cf4:	6083      	str	r3, [r0, #8]
 8012cf6:	9f01      	ldr	r7, [sp, #4]
 8012cf8:	e7c8      	b.n	8012c8c <_realloc_r+0x200>
 8012cfa:	68a3      	ldr	r3, [r4, #8]
 8012cfc:	612b      	str	r3, [r5, #16]
 8012cfe:	68e3      	ldr	r3, [r4, #12]
 8012d00:	616b      	str	r3, [r5, #20]
 8012d02:	2a24      	cmp	r2, #36	@ 0x24
 8012d04:	bf01      	itttt	eq
 8012d06:	6923      	ldreq	r3, [r4, #16]
 8012d08:	61ab      	streq	r3, [r5, #24]
 8012d0a:	6963      	ldreq	r3, [r4, #20]
 8012d0c:	61eb      	streq	r3, [r5, #28]
 8012d0e:	bf19      	ittee	ne
 8012d10:	3410      	addne	r4, #16
 8012d12:	f105 0018 	addne.w	r0, r5, #24
 8012d16:	f105 0020 	addeq.w	r0, r5, #32
 8012d1a:	3418      	addeq	r4, #24
 8012d1c:	e7e5      	b.n	8012cea <_realloc_r+0x25e>
 8012d1e:	4621      	mov	r1, r4
 8012d20:	f7fc ff32 	bl	800fb88 <memmove>
 8012d24:	e7e7      	b.n	8012cf6 <_realloc_r+0x26a>
 8012d26:	4659      	mov	r1, fp
 8012d28:	4650      	mov	r0, sl
 8012d2a:	f7fd fee5 	bl	8010af8 <_malloc_r>
 8012d2e:	4683      	mov	fp, r0
 8012d30:	b918      	cbnz	r0, 8012d3a <_realloc_r+0x2ae>
 8012d32:	4650      	mov	r0, sl
 8012d34:	f7ff fb1a 	bl	801236c <__malloc_unlock>
 8012d38:	e6c7      	b.n	8012aca <_realloc_r+0x3e>
 8012d3a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012d3e:	f023 0301 	bic.w	r3, r3, #1
 8012d42:	444b      	add	r3, r9
 8012d44:	f1a0 0208 	sub.w	r2, r0, #8
 8012d48:	4293      	cmp	r3, r2
 8012d4a:	d107      	bne.n	8012d5c <_realloc_r+0x2d0>
 8012d4c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8012d50:	f027 0703 	bic.w	r7, r7, #3
 8012d54:	4437      	add	r7, r6
 8012d56:	e6f8      	b.n	8012b4a <_realloc_r+0xbe>
 8012d58:	240002bc 	.word	0x240002bc
 8012d5c:	1f32      	subs	r2, r6, #4
 8012d5e:	2a24      	cmp	r2, #36	@ 0x24
 8012d60:	d82d      	bhi.n	8012dbe <_realloc_r+0x332>
 8012d62:	2a13      	cmp	r2, #19
 8012d64:	d928      	bls.n	8012db8 <_realloc_r+0x32c>
 8012d66:	6823      	ldr	r3, [r4, #0]
 8012d68:	6003      	str	r3, [r0, #0]
 8012d6a:	6863      	ldr	r3, [r4, #4]
 8012d6c:	6043      	str	r3, [r0, #4]
 8012d6e:	2a1b      	cmp	r2, #27
 8012d70:	d80e      	bhi.n	8012d90 <_realloc_r+0x304>
 8012d72:	f104 0208 	add.w	r2, r4, #8
 8012d76:	f100 0308 	add.w	r3, r0, #8
 8012d7a:	6811      	ldr	r1, [r2, #0]
 8012d7c:	6019      	str	r1, [r3, #0]
 8012d7e:	6851      	ldr	r1, [r2, #4]
 8012d80:	6059      	str	r1, [r3, #4]
 8012d82:	6892      	ldr	r2, [r2, #8]
 8012d84:	609a      	str	r2, [r3, #8]
 8012d86:	4621      	mov	r1, r4
 8012d88:	4650      	mov	r0, sl
 8012d8a:	f7fd fdf5 	bl	8010978 <_free_r>
 8012d8e:	e73f      	b.n	8012c10 <_realloc_r+0x184>
 8012d90:	68a3      	ldr	r3, [r4, #8]
 8012d92:	6083      	str	r3, [r0, #8]
 8012d94:	68e3      	ldr	r3, [r4, #12]
 8012d96:	60c3      	str	r3, [r0, #12]
 8012d98:	2a24      	cmp	r2, #36	@ 0x24
 8012d9a:	bf01      	itttt	eq
 8012d9c:	6923      	ldreq	r3, [r4, #16]
 8012d9e:	6103      	streq	r3, [r0, #16]
 8012da0:	6961      	ldreq	r1, [r4, #20]
 8012da2:	6141      	streq	r1, [r0, #20]
 8012da4:	bf19      	ittee	ne
 8012da6:	f104 0210 	addne.w	r2, r4, #16
 8012daa:	f100 0310 	addne.w	r3, r0, #16
 8012dae:	f104 0218 	addeq.w	r2, r4, #24
 8012db2:	f100 0318 	addeq.w	r3, r0, #24
 8012db6:	e7e0      	b.n	8012d7a <_realloc_r+0x2ee>
 8012db8:	4603      	mov	r3, r0
 8012dba:	4622      	mov	r2, r4
 8012dbc:	e7dd      	b.n	8012d7a <_realloc_r+0x2ee>
 8012dbe:	4621      	mov	r1, r4
 8012dc0:	f7fc fee2 	bl	800fb88 <memmove>
 8012dc4:	e7df      	b.n	8012d86 <_realloc_r+0x2fa>
 8012dc6:	4637      	mov	r7, r6
 8012dc8:	e6bf      	b.n	8012b4a <_realloc_r+0xbe>
 8012dca:	431f      	orrs	r7, r3
 8012dcc:	f8c9 7004 	str.w	r7, [r9, #4]
 8012dd0:	6853      	ldr	r3, [r2, #4]
 8012dd2:	f043 0301 	orr.w	r3, r3, #1
 8012dd6:	6053      	str	r3, [r2, #4]
 8012dd8:	e6d3      	b.n	8012b82 <_realloc_r+0xf6>
 8012dda:	bf00      	nop

08012ddc <__sread>:
 8012ddc:	b510      	push	{r4, lr}
 8012dde:	460c      	mov	r4, r1
 8012de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012de4:	f000 f8d8 	bl	8012f98 <_read_r>
 8012de8:	2800      	cmp	r0, #0
 8012dea:	bfab      	itete	ge
 8012dec:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8012dee:	89a3      	ldrhlt	r3, [r4, #12]
 8012df0:	181b      	addge	r3, r3, r0
 8012df2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012df6:	bfac      	ite	ge
 8012df8:	6523      	strge	r3, [r4, #80]	@ 0x50
 8012dfa:	81a3      	strhlt	r3, [r4, #12]
 8012dfc:	bd10      	pop	{r4, pc}

08012dfe <__swrite>:
 8012dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e02:	461f      	mov	r7, r3
 8012e04:	898b      	ldrh	r3, [r1, #12]
 8012e06:	05db      	lsls	r3, r3, #23
 8012e08:	4605      	mov	r5, r0
 8012e0a:	460c      	mov	r4, r1
 8012e0c:	4616      	mov	r6, r2
 8012e0e:	d505      	bpl.n	8012e1c <__swrite+0x1e>
 8012e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e14:	2302      	movs	r3, #2
 8012e16:	2200      	movs	r2, #0
 8012e18:	f000 f8ac 	bl	8012f74 <_lseek_r>
 8012e1c:	89a3      	ldrh	r3, [r4, #12]
 8012e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012e26:	81a3      	strh	r3, [r4, #12]
 8012e28:	4632      	mov	r2, r6
 8012e2a:	463b      	mov	r3, r7
 8012e2c:	4628      	mov	r0, r5
 8012e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e32:	f000 b8d3 	b.w	8012fdc <_write_r>

08012e36 <__sseek>:
 8012e36:	b510      	push	{r4, lr}
 8012e38:	460c      	mov	r4, r1
 8012e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e3e:	f000 f899 	bl	8012f74 <_lseek_r>
 8012e42:	1c43      	adds	r3, r0, #1
 8012e44:	89a3      	ldrh	r3, [r4, #12]
 8012e46:	bf15      	itete	ne
 8012e48:	6520      	strne	r0, [r4, #80]	@ 0x50
 8012e4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012e4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012e52:	81a3      	strheq	r3, [r4, #12]
 8012e54:	bf18      	it	ne
 8012e56:	81a3      	strhne	r3, [r4, #12]
 8012e58:	bd10      	pop	{r4, pc}

08012e5a <__sclose>:
 8012e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e5e:	f000 b857 	b.w	8012f10 <_close_r>

08012e62 <__ascii_wctomb>:
 8012e62:	4603      	mov	r3, r0
 8012e64:	4608      	mov	r0, r1
 8012e66:	b141      	cbz	r1, 8012e7a <__ascii_wctomb+0x18>
 8012e68:	2aff      	cmp	r2, #255	@ 0xff
 8012e6a:	d904      	bls.n	8012e76 <__ascii_wctomb+0x14>
 8012e6c:	228a      	movs	r2, #138	@ 0x8a
 8012e6e:	601a      	str	r2, [r3, #0]
 8012e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e74:	4770      	bx	lr
 8012e76:	700a      	strb	r2, [r1, #0]
 8012e78:	2001      	movs	r0, #1
 8012e7a:	4770      	bx	lr

08012e7c <__swbuf_r>:
 8012e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e7e:	460e      	mov	r6, r1
 8012e80:	4614      	mov	r4, r2
 8012e82:	4605      	mov	r5, r0
 8012e84:	b118      	cbz	r0, 8012e8e <__swbuf_r+0x12>
 8012e86:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012e88:	b90b      	cbnz	r3, 8012e8e <__swbuf_r+0x12>
 8012e8a:	f7fc fc3b 	bl	800f704 <__sinit>
 8012e8e:	69a3      	ldr	r3, [r4, #24]
 8012e90:	60a3      	str	r3, [r4, #8]
 8012e92:	89a3      	ldrh	r3, [r4, #12]
 8012e94:	0719      	lsls	r1, r3, #28
 8012e96:	d501      	bpl.n	8012e9c <__swbuf_r+0x20>
 8012e98:	6923      	ldr	r3, [r4, #16]
 8012e9a:	b943      	cbnz	r3, 8012eae <__swbuf_r+0x32>
 8012e9c:	4621      	mov	r1, r4
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	f7fc fdb2 	bl	800fa08 <__swsetup_r>
 8012ea4:	b118      	cbz	r0, 8012eae <__swbuf_r+0x32>
 8012ea6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012eaa:	4638      	mov	r0, r7
 8012eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012eb2:	b2f6      	uxtb	r6, r6
 8012eb4:	049a      	lsls	r2, r3, #18
 8012eb6:	4637      	mov	r7, r6
 8012eb8:	d406      	bmi.n	8012ec8 <__swbuf_r+0x4c>
 8012eba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012ebe:	81a3      	strh	r3, [r4, #12]
 8012ec0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ec2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012ec6:	6663      	str	r3, [r4, #100]	@ 0x64
 8012ec8:	6823      	ldr	r3, [r4, #0]
 8012eca:	6922      	ldr	r2, [r4, #16]
 8012ecc:	1a98      	subs	r0, r3, r2
 8012ece:	6963      	ldr	r3, [r4, #20]
 8012ed0:	4283      	cmp	r3, r0
 8012ed2:	dc05      	bgt.n	8012ee0 <__swbuf_r+0x64>
 8012ed4:	4621      	mov	r1, r4
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	f7fc fb42 	bl	800f560 <_fflush_r>
 8012edc:	2800      	cmp	r0, #0
 8012ede:	d1e2      	bne.n	8012ea6 <__swbuf_r+0x2a>
 8012ee0:	68a3      	ldr	r3, [r4, #8]
 8012ee2:	3b01      	subs	r3, #1
 8012ee4:	60a3      	str	r3, [r4, #8]
 8012ee6:	6823      	ldr	r3, [r4, #0]
 8012ee8:	1c5a      	adds	r2, r3, #1
 8012eea:	6022      	str	r2, [r4, #0]
 8012eec:	701e      	strb	r6, [r3, #0]
 8012eee:	6962      	ldr	r2, [r4, #20]
 8012ef0:	1c43      	adds	r3, r0, #1
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d004      	beq.n	8012f00 <__swbuf_r+0x84>
 8012ef6:	89a3      	ldrh	r3, [r4, #12]
 8012ef8:	07db      	lsls	r3, r3, #31
 8012efa:	d5d6      	bpl.n	8012eaa <__swbuf_r+0x2e>
 8012efc:	2e0a      	cmp	r6, #10
 8012efe:	d1d4      	bne.n	8012eaa <__swbuf_r+0x2e>
 8012f00:	4621      	mov	r1, r4
 8012f02:	4628      	mov	r0, r5
 8012f04:	f7fc fb2c 	bl	800f560 <_fflush_r>
 8012f08:	2800      	cmp	r0, #0
 8012f0a:	d0ce      	beq.n	8012eaa <__swbuf_r+0x2e>
 8012f0c:	e7cb      	b.n	8012ea6 <__swbuf_r+0x2a>
	...

08012f10 <_close_r>:
 8012f10:	b538      	push	{r3, r4, r5, lr}
 8012f12:	4d06      	ldr	r5, [pc, #24]	@ (8012f2c <_close_r+0x1c>)
 8012f14:	2300      	movs	r3, #0
 8012f16:	4604      	mov	r4, r0
 8012f18:	4608      	mov	r0, r1
 8012f1a:	602b      	str	r3, [r5, #0]
 8012f1c:	f7ef fcd8 	bl	80028d0 <_close>
 8012f20:	1c43      	adds	r3, r0, #1
 8012f22:	d102      	bne.n	8012f2a <_close_r+0x1a>
 8012f24:	682b      	ldr	r3, [r5, #0]
 8012f26:	b103      	cbz	r3, 8012f2a <_close_r+0x1a>
 8012f28:	6023      	str	r3, [r4, #0]
 8012f2a:	bd38      	pop	{r3, r4, r5, pc}
 8012f2c:	24015388 	.word	0x24015388

08012f30 <_fstat_r>:
 8012f30:	b538      	push	{r3, r4, r5, lr}
 8012f32:	4d07      	ldr	r5, [pc, #28]	@ (8012f50 <_fstat_r+0x20>)
 8012f34:	2300      	movs	r3, #0
 8012f36:	4604      	mov	r4, r0
 8012f38:	4608      	mov	r0, r1
 8012f3a:	4611      	mov	r1, r2
 8012f3c:	602b      	str	r3, [r5, #0]
 8012f3e:	f7ef fcd3 	bl	80028e8 <_fstat>
 8012f42:	1c43      	adds	r3, r0, #1
 8012f44:	d102      	bne.n	8012f4c <_fstat_r+0x1c>
 8012f46:	682b      	ldr	r3, [r5, #0]
 8012f48:	b103      	cbz	r3, 8012f4c <_fstat_r+0x1c>
 8012f4a:	6023      	str	r3, [r4, #0]
 8012f4c:	bd38      	pop	{r3, r4, r5, pc}
 8012f4e:	bf00      	nop
 8012f50:	24015388 	.word	0x24015388

08012f54 <_isatty_r>:
 8012f54:	b538      	push	{r3, r4, r5, lr}
 8012f56:	4d06      	ldr	r5, [pc, #24]	@ (8012f70 <_isatty_r+0x1c>)
 8012f58:	2300      	movs	r3, #0
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	4608      	mov	r0, r1
 8012f5e:	602b      	str	r3, [r5, #0]
 8012f60:	f7ef fcd2 	bl	8002908 <_isatty>
 8012f64:	1c43      	adds	r3, r0, #1
 8012f66:	d102      	bne.n	8012f6e <_isatty_r+0x1a>
 8012f68:	682b      	ldr	r3, [r5, #0]
 8012f6a:	b103      	cbz	r3, 8012f6e <_isatty_r+0x1a>
 8012f6c:	6023      	str	r3, [r4, #0]
 8012f6e:	bd38      	pop	{r3, r4, r5, pc}
 8012f70:	24015388 	.word	0x24015388

08012f74 <_lseek_r>:
 8012f74:	b538      	push	{r3, r4, r5, lr}
 8012f76:	4d07      	ldr	r5, [pc, #28]	@ (8012f94 <_lseek_r+0x20>)
 8012f78:	4604      	mov	r4, r0
 8012f7a:	4608      	mov	r0, r1
 8012f7c:	4611      	mov	r1, r2
 8012f7e:	2200      	movs	r2, #0
 8012f80:	602a      	str	r2, [r5, #0]
 8012f82:	461a      	mov	r2, r3
 8012f84:	f7ef fccb 	bl	800291e <_lseek>
 8012f88:	1c43      	adds	r3, r0, #1
 8012f8a:	d102      	bne.n	8012f92 <_lseek_r+0x1e>
 8012f8c:	682b      	ldr	r3, [r5, #0]
 8012f8e:	b103      	cbz	r3, 8012f92 <_lseek_r+0x1e>
 8012f90:	6023      	str	r3, [r4, #0]
 8012f92:	bd38      	pop	{r3, r4, r5, pc}
 8012f94:	24015388 	.word	0x24015388

08012f98 <_read_r>:
 8012f98:	b538      	push	{r3, r4, r5, lr}
 8012f9a:	4d07      	ldr	r5, [pc, #28]	@ (8012fb8 <_read_r+0x20>)
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	4608      	mov	r0, r1
 8012fa0:	4611      	mov	r1, r2
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	602a      	str	r2, [r5, #0]
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	f7ef fc59 	bl	800285e <_read>
 8012fac:	1c43      	adds	r3, r0, #1
 8012fae:	d102      	bne.n	8012fb6 <_read_r+0x1e>
 8012fb0:	682b      	ldr	r3, [r5, #0]
 8012fb2:	b103      	cbz	r3, 8012fb6 <_read_r+0x1e>
 8012fb4:	6023      	str	r3, [r4, #0]
 8012fb6:	bd38      	pop	{r3, r4, r5, pc}
 8012fb8:	24015388 	.word	0x24015388

08012fbc <_sbrk_r>:
 8012fbc:	b538      	push	{r3, r4, r5, lr}
 8012fbe:	4d06      	ldr	r5, [pc, #24]	@ (8012fd8 <_sbrk_r+0x1c>)
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	4608      	mov	r0, r1
 8012fc6:	602b      	str	r3, [r5, #0]
 8012fc8:	f7ef fcb6 	bl	8002938 <_sbrk>
 8012fcc:	1c43      	adds	r3, r0, #1
 8012fce:	d102      	bne.n	8012fd6 <_sbrk_r+0x1a>
 8012fd0:	682b      	ldr	r3, [r5, #0]
 8012fd2:	b103      	cbz	r3, 8012fd6 <_sbrk_r+0x1a>
 8012fd4:	6023      	str	r3, [r4, #0]
 8012fd6:	bd38      	pop	{r3, r4, r5, pc}
 8012fd8:	24015388 	.word	0x24015388

08012fdc <_write_r>:
 8012fdc:	b538      	push	{r3, r4, r5, lr}
 8012fde:	4d07      	ldr	r5, [pc, #28]	@ (8012ffc <_write_r+0x20>)
 8012fe0:	4604      	mov	r4, r0
 8012fe2:	4608      	mov	r0, r1
 8012fe4:	4611      	mov	r1, r2
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	602a      	str	r2, [r5, #0]
 8012fea:	461a      	mov	r2, r3
 8012fec:	f7ef fc54 	bl	8002898 <_write>
 8012ff0:	1c43      	adds	r3, r0, #1
 8012ff2:	d102      	bne.n	8012ffa <_write_r+0x1e>
 8012ff4:	682b      	ldr	r3, [r5, #0]
 8012ff6:	b103      	cbz	r3, 8012ffa <_write_r+0x1e>
 8012ff8:	6023      	str	r3, [r4, #0]
 8012ffa:	bd38      	pop	{r3, r4, r5, pc}
 8012ffc:	24015388 	.word	0x24015388

08013000 <sysconf>:
 8013000:	2808      	cmp	r0, #8
 8013002:	b508      	push	{r3, lr}
 8013004:	d006      	beq.n	8013014 <sysconf+0x14>
 8013006:	f7fc fdff 	bl	800fc08 <__errno>
 801300a:	2316      	movs	r3, #22
 801300c:	6003      	str	r3, [r0, #0]
 801300e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013012:	bd08      	pop	{r3, pc}
 8013014:	2080      	movs	r0, #128	@ 0x80
 8013016:	e7fc      	b.n	8013012 <sysconf+0x12>

08013018 <__libc_fini_array>:
 8013018:	b538      	push	{r3, r4, r5, lr}
 801301a:	4d07      	ldr	r5, [pc, #28]	@ (8013038 <__libc_fini_array+0x20>)
 801301c:	4c07      	ldr	r4, [pc, #28]	@ (801303c <__libc_fini_array+0x24>)
 801301e:	1b64      	subs	r4, r4, r5
 8013020:	10a4      	asrs	r4, r4, #2
 8013022:	b91c      	cbnz	r4, 801302c <__libc_fini_array+0x14>
 8013024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013028:	f001 bc8e 	b.w	8014948 <_fini>
 801302c:	3c01      	subs	r4, #1
 801302e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8013032:	4798      	blx	r3
 8013034:	e7f5      	b.n	8013022 <__libc_fini_array+0xa>
 8013036:	bf00      	nop
 8013038:	08017200 	.word	0x08017200
 801303c:	08017204 	.word	0x08017204

08013040 <__register_exitproc>:
 8013040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013044:	f8df a074 	ldr.w	sl, [pc, #116]	@ 80130bc <__register_exitproc+0x7c>
 8013048:	4606      	mov	r6, r0
 801304a:	f8da 0000 	ldr.w	r0, [sl]
 801304e:	4698      	mov	r8, r3
 8013050:	460f      	mov	r7, r1
 8013052:	4691      	mov	r9, r2
 8013054:	f7fc fe04 	bl	800fc60 <__retarget_lock_acquire_recursive>
 8013058:	4b16      	ldr	r3, [pc, #88]	@ (80130b4 <__register_exitproc+0x74>)
 801305a:	681c      	ldr	r4, [r3, #0]
 801305c:	b90c      	cbnz	r4, 8013062 <__register_exitproc+0x22>
 801305e:	4c16      	ldr	r4, [pc, #88]	@ (80130b8 <__register_exitproc+0x78>)
 8013060:	601c      	str	r4, [r3, #0]
 8013062:	6865      	ldr	r5, [r4, #4]
 8013064:	f8da 0000 	ldr.w	r0, [sl]
 8013068:	2d1f      	cmp	r5, #31
 801306a:	dd05      	ble.n	8013078 <__register_exitproc+0x38>
 801306c:	f7fc fdf9 	bl	800fc62 <__retarget_lock_release_recursive>
 8013070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013078:	b19e      	cbz	r6, 80130a2 <__register_exitproc+0x62>
 801307a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801307e:	2201      	movs	r2, #1
 8013080:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8013084:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8013088:	40aa      	lsls	r2, r5
 801308a:	4313      	orrs	r3, r2
 801308c:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8013090:	2e02      	cmp	r6, #2
 8013092:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8013096:	bf02      	ittt	eq
 8013098:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 801309c:	4313      	orreq	r3, r2
 801309e:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 80130a2:	1c6b      	adds	r3, r5, #1
 80130a4:	3502      	adds	r5, #2
 80130a6:	6063      	str	r3, [r4, #4]
 80130a8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80130ac:	f7fc fdd9 	bl	800fc62 <__retarget_lock_release_recursive>
 80130b0:	2000      	movs	r0, #0
 80130b2:	e7df      	b.n	8013074 <__register_exitproc+0x34>
 80130b4:	24015350 	.word	0x24015350
 80130b8:	2401538c 	.word	0x2401538c
 80130bc:	240002b0 	.word	0x240002b0

080130c0 <__assert_func>:
 80130c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80130c2:	4614      	mov	r4, r2
 80130c4:	461a      	mov	r2, r3
 80130c6:	4b09      	ldr	r3, [pc, #36]	@ (80130ec <__assert_func+0x2c>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	4605      	mov	r5, r0
 80130cc:	68d8      	ldr	r0, [r3, #12]
 80130ce:	b954      	cbnz	r4, 80130e6 <__assert_func+0x26>
 80130d0:	4b07      	ldr	r3, [pc, #28]	@ (80130f0 <__assert_func+0x30>)
 80130d2:	461c      	mov	r4, r3
 80130d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80130d8:	9100      	str	r1, [sp, #0]
 80130da:	462b      	mov	r3, r5
 80130dc:	4905      	ldr	r1, [pc, #20]	@ (80130f4 <__assert_func+0x34>)
 80130de:	f000 f843 	bl	8013168 <fiprintf>
 80130e2:	f000 f8d0 	bl	8013286 <abort>
 80130e6:	4b04      	ldr	r3, [pc, #16]	@ (80130f8 <__assert_func+0x38>)
 80130e8:	e7f4      	b.n	80130d4 <__assert_func+0x14>
 80130ea:	bf00      	nop
 80130ec:	24000188 	.word	0x24000188
 80130f0:	08014ecb 	.word	0x08014ecb
 80130f4:	08014e9d 	.word	0x08014e9d
 80130f8:	08014e90 	.word	0x08014e90

080130fc <_calloc_r>:
 80130fc:	b538      	push	{r3, r4, r5, lr}
 80130fe:	fba1 1502 	umull	r1, r5, r1, r2
 8013102:	b935      	cbnz	r5, 8013112 <_calloc_r+0x16>
 8013104:	f7fd fcf8 	bl	8010af8 <_malloc_r>
 8013108:	4604      	mov	r4, r0
 801310a:	b938      	cbnz	r0, 801311c <_calloc_r+0x20>
 801310c:	2400      	movs	r4, #0
 801310e:	4620      	mov	r0, r4
 8013110:	bd38      	pop	{r3, r4, r5, pc}
 8013112:	f7fc fd79 	bl	800fc08 <__errno>
 8013116:	230c      	movs	r3, #12
 8013118:	6003      	str	r3, [r0, #0]
 801311a:	e7f7      	b.n	801310c <_calloc_r+0x10>
 801311c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013120:	f022 0203 	bic.w	r2, r2, #3
 8013124:	3a04      	subs	r2, #4
 8013126:	2a24      	cmp	r2, #36	@ 0x24
 8013128:	d819      	bhi.n	801315e <_calloc_r+0x62>
 801312a:	2a13      	cmp	r2, #19
 801312c:	d915      	bls.n	801315a <_calloc_r+0x5e>
 801312e:	2a1b      	cmp	r2, #27
 8013130:	e9c0 5500 	strd	r5, r5, [r0]
 8013134:	d806      	bhi.n	8013144 <_calloc_r+0x48>
 8013136:	f100 0308 	add.w	r3, r0, #8
 801313a:	2200      	movs	r2, #0
 801313c:	e9c3 2200 	strd	r2, r2, [r3]
 8013140:	609a      	str	r2, [r3, #8]
 8013142:	e7e4      	b.n	801310e <_calloc_r+0x12>
 8013144:	2a24      	cmp	r2, #36	@ 0x24
 8013146:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801314a:	bf11      	iteee	ne
 801314c:	f100 0310 	addne.w	r3, r0, #16
 8013150:	6105      	streq	r5, [r0, #16]
 8013152:	f100 0318 	addeq.w	r3, r0, #24
 8013156:	6145      	streq	r5, [r0, #20]
 8013158:	e7ef      	b.n	801313a <_calloc_r+0x3e>
 801315a:	4603      	mov	r3, r0
 801315c:	e7ed      	b.n	801313a <_calloc_r+0x3e>
 801315e:	4629      	mov	r1, r5
 8013160:	f7fc fd2c 	bl	800fbbc <memset>
 8013164:	e7d3      	b.n	801310e <_calloc_r+0x12>
	...

08013168 <fiprintf>:
 8013168:	b40e      	push	{r1, r2, r3}
 801316a:	b503      	push	{r0, r1, lr}
 801316c:	4601      	mov	r1, r0
 801316e:	ab03      	add	r3, sp, #12
 8013170:	4805      	ldr	r0, [pc, #20]	@ (8013188 <fiprintf+0x20>)
 8013172:	f853 2b04 	ldr.w	r2, [r3], #4
 8013176:	6800      	ldr	r0, [r0, #0]
 8013178:	9301      	str	r3, [sp, #4]
 801317a:	f7fb fca1 	bl	800eac0 <_vfiprintf_r>
 801317e:	b002      	add	sp, #8
 8013180:	f85d eb04 	ldr.w	lr, [sp], #4
 8013184:	b003      	add	sp, #12
 8013186:	4770      	bx	lr
 8013188:	24000188 	.word	0x24000188

0801318c <__ssprint_r>:
 801318c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013190:	6893      	ldr	r3, [r2, #8]
 8013192:	f8d2 b000 	ldr.w	fp, [r2]
 8013196:	9001      	str	r0, [sp, #4]
 8013198:	460c      	mov	r4, r1
 801319a:	4617      	mov	r7, r2
 801319c:	2b00      	cmp	r3, #0
 801319e:	d157      	bne.n	8013250 <__ssprint_r+0xc4>
 80131a0:	2000      	movs	r0, #0
 80131a2:	2300      	movs	r3, #0
 80131a4:	607b      	str	r3, [r7, #4]
 80131a6:	b003      	add	sp, #12
 80131a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ac:	e9db a800 	ldrd	sl, r8, [fp]
 80131b0:	f10b 0b08 	add.w	fp, fp, #8
 80131b4:	68a6      	ldr	r6, [r4, #8]
 80131b6:	6820      	ldr	r0, [r4, #0]
 80131b8:	f1b8 0f00 	cmp.w	r8, #0
 80131bc:	d0f6      	beq.n	80131ac <__ssprint_r+0x20>
 80131be:	45b0      	cmp	r8, r6
 80131c0:	d32e      	bcc.n	8013220 <__ssprint_r+0x94>
 80131c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80131c6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80131ca:	d029      	beq.n	8013220 <__ssprint_r+0x94>
 80131cc:	6921      	ldr	r1, [r4, #16]
 80131ce:	6965      	ldr	r5, [r4, #20]
 80131d0:	eba0 0901 	sub.w	r9, r0, r1
 80131d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80131d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80131dc:	f109 0001 	add.w	r0, r9, #1
 80131e0:	106d      	asrs	r5, r5, #1
 80131e2:	4440      	add	r0, r8
 80131e4:	4285      	cmp	r5, r0
 80131e6:	bf38      	it	cc
 80131e8:	4605      	movcc	r5, r0
 80131ea:	0553      	lsls	r3, r2, #21
 80131ec:	d534      	bpl.n	8013258 <__ssprint_r+0xcc>
 80131ee:	9801      	ldr	r0, [sp, #4]
 80131f0:	4629      	mov	r1, r5
 80131f2:	f7fd fc81 	bl	8010af8 <_malloc_r>
 80131f6:	4606      	mov	r6, r0
 80131f8:	2800      	cmp	r0, #0
 80131fa:	d038      	beq.n	801326e <__ssprint_r+0xe2>
 80131fc:	464a      	mov	r2, r9
 80131fe:	6921      	ldr	r1, [r4, #16]
 8013200:	f7fc fd30 	bl	800fc64 <memcpy>
 8013204:	89a2      	ldrh	r2, [r4, #12]
 8013206:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 801320a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801320e:	81a2      	strh	r2, [r4, #12]
 8013210:	6126      	str	r6, [r4, #16]
 8013212:	6165      	str	r5, [r4, #20]
 8013214:	444e      	add	r6, r9
 8013216:	eba5 0509 	sub.w	r5, r5, r9
 801321a:	6026      	str	r6, [r4, #0]
 801321c:	60a5      	str	r5, [r4, #8]
 801321e:	4646      	mov	r6, r8
 8013220:	4546      	cmp	r6, r8
 8013222:	bf28      	it	cs
 8013224:	4646      	movcs	r6, r8
 8013226:	4632      	mov	r2, r6
 8013228:	4651      	mov	r1, sl
 801322a:	6820      	ldr	r0, [r4, #0]
 801322c:	f7fc fcac 	bl	800fb88 <memmove>
 8013230:	68a2      	ldr	r2, [r4, #8]
 8013232:	1b92      	subs	r2, r2, r6
 8013234:	60a2      	str	r2, [r4, #8]
 8013236:	6822      	ldr	r2, [r4, #0]
 8013238:	4432      	add	r2, r6
 801323a:	6022      	str	r2, [r4, #0]
 801323c:	68ba      	ldr	r2, [r7, #8]
 801323e:	eba2 0308 	sub.w	r3, r2, r8
 8013242:	44c2      	add	sl, r8
 8013244:	60bb      	str	r3, [r7, #8]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d0aa      	beq.n	80131a0 <__ssprint_r+0x14>
 801324a:	f04f 0800 	mov.w	r8, #0
 801324e:	e7b1      	b.n	80131b4 <__ssprint_r+0x28>
 8013250:	f04f 0a00 	mov.w	sl, #0
 8013254:	46d0      	mov	r8, sl
 8013256:	e7ad      	b.n	80131b4 <__ssprint_r+0x28>
 8013258:	9801      	ldr	r0, [sp, #4]
 801325a:	462a      	mov	r2, r5
 801325c:	f7ff fc16 	bl	8012a8c <_realloc_r>
 8013260:	4606      	mov	r6, r0
 8013262:	2800      	cmp	r0, #0
 8013264:	d1d4      	bne.n	8013210 <__ssprint_r+0x84>
 8013266:	6921      	ldr	r1, [r4, #16]
 8013268:	9801      	ldr	r0, [sp, #4]
 801326a:	f7fd fb85 	bl	8010978 <_free_r>
 801326e:	9a01      	ldr	r2, [sp, #4]
 8013270:	230c      	movs	r3, #12
 8013272:	6013      	str	r3, [r2, #0]
 8013274:	89a3      	ldrh	r3, [r4, #12]
 8013276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801327a:	81a3      	strh	r3, [r4, #12]
 801327c:	2300      	movs	r3, #0
 801327e:	60bb      	str	r3, [r7, #8]
 8013280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013284:	e78d      	b.n	80131a2 <__ssprint_r+0x16>

08013286 <abort>:
 8013286:	b508      	push	{r3, lr}
 8013288:	2006      	movs	r0, #6
 801328a:	f000 f82d 	bl	80132e8 <raise>
 801328e:	2001      	movs	r0, #1
 8013290:	f7ef fada 	bl	8002848 <_exit>

08013294 <_raise_r>:
 8013294:	291f      	cmp	r1, #31
 8013296:	b538      	push	{r3, r4, r5, lr}
 8013298:	4605      	mov	r5, r0
 801329a:	460c      	mov	r4, r1
 801329c:	d904      	bls.n	80132a8 <_raise_r+0x14>
 801329e:	2316      	movs	r3, #22
 80132a0:	6003      	str	r3, [r0, #0]
 80132a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80132a6:	bd38      	pop	{r3, r4, r5, pc}
 80132a8:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 80132ac:	b112      	cbz	r2, 80132b4 <_raise_r+0x20>
 80132ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80132b2:	b94b      	cbnz	r3, 80132c8 <_raise_r+0x34>
 80132b4:	4628      	mov	r0, r5
 80132b6:	f000 f831 	bl	801331c <_getpid_r>
 80132ba:	4622      	mov	r2, r4
 80132bc:	4601      	mov	r1, r0
 80132be:	4628      	mov	r0, r5
 80132c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132c4:	f000 b818 	b.w	80132f8 <_kill_r>
 80132c8:	2b01      	cmp	r3, #1
 80132ca:	d00a      	beq.n	80132e2 <_raise_r+0x4e>
 80132cc:	1c59      	adds	r1, r3, #1
 80132ce:	d103      	bne.n	80132d8 <_raise_r+0x44>
 80132d0:	2316      	movs	r3, #22
 80132d2:	6003      	str	r3, [r0, #0]
 80132d4:	2001      	movs	r0, #1
 80132d6:	e7e6      	b.n	80132a6 <_raise_r+0x12>
 80132d8:	2100      	movs	r1, #0
 80132da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80132de:	4620      	mov	r0, r4
 80132e0:	4798      	blx	r3
 80132e2:	2000      	movs	r0, #0
 80132e4:	e7df      	b.n	80132a6 <_raise_r+0x12>
	...

080132e8 <raise>:
 80132e8:	4b02      	ldr	r3, [pc, #8]	@ (80132f4 <raise+0xc>)
 80132ea:	4601      	mov	r1, r0
 80132ec:	6818      	ldr	r0, [r3, #0]
 80132ee:	f7ff bfd1 	b.w	8013294 <_raise_r>
 80132f2:	bf00      	nop
 80132f4:	24000188 	.word	0x24000188

080132f8 <_kill_r>:
 80132f8:	b538      	push	{r3, r4, r5, lr}
 80132fa:	4d07      	ldr	r5, [pc, #28]	@ (8013318 <_kill_r+0x20>)
 80132fc:	2300      	movs	r3, #0
 80132fe:	4604      	mov	r4, r0
 8013300:	4608      	mov	r0, r1
 8013302:	4611      	mov	r1, r2
 8013304:	602b      	str	r3, [r5, #0]
 8013306:	f7ef fa8f 	bl	8002828 <_kill>
 801330a:	1c43      	adds	r3, r0, #1
 801330c:	d102      	bne.n	8013314 <_kill_r+0x1c>
 801330e:	682b      	ldr	r3, [r5, #0]
 8013310:	b103      	cbz	r3, 8013314 <_kill_r+0x1c>
 8013312:	6023      	str	r3, [r4, #0]
 8013314:	bd38      	pop	{r3, r4, r5, pc}
 8013316:	bf00      	nop
 8013318:	24015388 	.word	0x24015388

0801331c <_getpid_r>:
 801331c:	f7ef ba7c 	b.w	8002818 <_getpid>

08013320 <cabs>:
 8013320:	b508      	push	{r3, lr}
 8013322:	ed2d 8b06 	vpush	{d8-d10}
 8013326:	eeb0 ab40 	vmov.f64	d10, d0
 801332a:	eeb0 9b41 	vmov.f64	d9, d1
 801332e:	f000 fc26 	bl	8013b7e <creal>
 8013332:	eeb0 1b49 	vmov.f64	d1, d9
 8013336:	eeb0 8b40 	vmov.f64	d8, d0
 801333a:	eeb0 0b4a 	vmov.f64	d0, d10
 801333e:	f000 fc1b 	bl	8013b78 <cimag>
 8013342:	eeb0 1b40 	vmov.f64	d1, d0
 8013346:	eeb0 0b48 	vmov.f64	d0, d8
 801334a:	ecbd 8b06 	vpop	{d8-d10}
 801334e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013352:	f000 bdd1 	b.w	8013ef8 <hypot>
	...

08013358 <log>:
 8013358:	b4f0      	push	{r4, r5, r6, r7}
 801335a:	ee10 0a90 	vmov	r0, s1
 801335e:	ee10 3a10 	vmov	r3, s0
 8013362:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8013366:	429c      	cmp	r4, r3
 8013368:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 801336c:	4c70      	ldr	r4, [pc, #448]	@ (8013530 <log+0x1d8>)
 801336e:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8013372:	418c      	sbcs	r4, r1
 8013374:	ed2d 8b02 	vpush	{d8}
 8013378:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801337c:	d35a      	bcc.n	8013434 <log+0xdc>
 801337e:	4a6d      	ldr	r2, [pc, #436]	@ (8013534 <log+0x1dc>)
 8013380:	4290      	cmp	r0, r2
 8013382:	bf08      	it	eq
 8013384:	2b00      	cmpeq	r3, #0
 8013386:	f000 80c4 	beq.w	8013512 <log+0x1ba>
 801338a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801338e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013392:	4b69      	ldr	r3, [pc, #420]	@ (8013538 <log+0x1e0>)
 8013394:	ee20 2b00 	vmul.f64	d2, d0, d0
 8013398:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801339c:	ee20 4b02 	vmul.f64	d4, d0, d2
 80133a0:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80133a4:	eea6 7b00 	vfma.f64	d7, d6, d0
 80133a8:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80133ac:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80133b0:	eea6 7b02 	vfma.f64	d7, d6, d2
 80133b4:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80133b8:	eea5 6b00 	vfma.f64	d6, d5, d0
 80133bc:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80133c0:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80133c4:	eea5 6b02 	vfma.f64	d6, d5, d2
 80133c8:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80133cc:	eea3 5b00 	vfma.f64	d5, d3, d0
 80133d0:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80133d4:	eea3 5b02 	vfma.f64	d5, d3, d2
 80133d8:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80133dc:	eea3 5b04 	vfma.f64	d5, d3, d4
 80133e0:	eea5 6b04 	vfma.f64	d6, d5, d4
 80133e4:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80133e8:	eea6 7b04 	vfma.f64	d7, d6, d4
 80133ec:	eeb0 2b47 	vmov.f64	d2, d7
 80133f0:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8013518 <log+0x1c0>
 80133f4:	eeb0 6b40 	vmov.f64	d6, d0
 80133f8:	eeb0 3b40 	vmov.f64	d3, d0
 80133fc:	eea0 6b07 	vfma.f64	d6, d0, d7
 8013400:	eea0 6b47 	vfms.f64	d6, d0, d7
 8013404:	ee30 8b46 	vsub.f64	d8, d0, d6
 8013408:	ee26 1b06 	vmul.f64	d1, d6, d6
 801340c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8013410:	ee30 7b43 	vsub.f64	d7, d0, d3
 8013414:	ee30 0b06 	vadd.f64	d0, d0, d6
 8013418:	eea1 7b05 	vfma.f64	d7, d1, d5
 801341c:	ee25 5b08 	vmul.f64	d5, d5, d8
 8013420:	eea5 7b00 	vfma.f64	d7, d5, d0
 8013424:	eea2 7b04 	vfma.f64	d7, d2, d4
 8013428:	ee33 0b07 	vadd.f64	d0, d3, d7
 801342c:	ecbd 8b02 	vpop	{d8}
 8013430:	bcf0      	pop	{r4, r5, r6, r7}
 8013432:	4770      	bx	lr
 8013434:	f1a2 0410 	sub.w	r4, r2, #16
 8013438:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 801343c:	428c      	cmp	r4, r1
 801343e:	d923      	bls.n	8013488 <log+0x130>
 8013440:	18d9      	adds	r1, r3, r3
 8013442:	eb40 0400 	adc.w	r4, r0, r0
 8013446:	4321      	orrs	r1, r4
 8013448:	d105      	bne.n	8013456 <log+0xfe>
 801344a:	ecbd 8b02 	vpop	{d8}
 801344e:	2001      	movs	r0, #1
 8013450:	bcf0      	pop	{r4, r5, r6, r7}
 8013452:	f000 bda9 	b.w	8013fa8 <__math_divzero>
 8013456:	4939      	ldr	r1, [pc, #228]	@ (801353c <log+0x1e4>)
 8013458:	4288      	cmp	r0, r1
 801345a:	bf08      	it	eq
 801345c:	2b00      	cmpeq	r3, #0
 801345e:	d0e5      	beq.n	801342c <log+0xd4>
 8013460:	0413      	lsls	r3, r2, #16
 8013462:	d403      	bmi.n	801346c <log+0x114>
 8013464:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8013468:	4393      	bics	r3, r2
 801346a:	d104      	bne.n	8013476 <log+0x11e>
 801346c:	ecbd 8b02 	vpop	{d8}
 8013470:	bcf0      	pop	{r4, r5, r6, r7}
 8013472:	f000 bdb1 	b.w	8013fd8 <__math_invalid>
 8013476:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013520 <log+0x1c8>
 801347a:	ee20 7b07 	vmul.f64	d7, d0, d7
 801347e:	ec53 2b17 	vmov	r2, r3, d7
 8013482:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8013486:	4613      	mov	r3, r2
 8013488:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 801348c:	492a      	ldr	r1, [pc, #168]	@ (8013538 <log+0x1e0>)
 801348e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8013492:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8013496:	f3c2 3446 	ubfx	r4, r2, #13, #7
 801349a:	0d15      	lsrs	r5, r2, #20
 801349c:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 80134a0:	052d      	lsls	r5, r5, #20
 80134a2:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 80134a6:	1e1e      	subs	r6, r3, #0
 80134a8:	1b47      	subs	r7, r0, r5
 80134aa:	ec47 6b16 	vmov	d6, r6, r7
 80134ae:	1512      	asrs	r2, r2, #20
 80134b0:	eea7 5b06 	vfma.f64	d5, d7, d6
 80134b4:	ee07 2a90 	vmov	s15, r2
 80134b8:	ee25 2b05 	vmul.f64	d2, d5, d5
 80134bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80134c0:	ed91 4b00 	vldr	d4, [r1]
 80134c4:	ee25 1b02 	vmul.f64	d1, d5, d2
 80134c8:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 80134cc:	eea4 7b06 	vfma.f64	d7, d4, d6
 80134d0:	ee35 4b07 	vadd.f64	d4, d5, d7
 80134d4:	ee37 0b44 	vsub.f64	d0, d7, d4
 80134d8:	ed91 7b02 	vldr	d7, [r1, #8]
 80134dc:	ee30 0b05 	vadd.f64	d0, d0, d5
 80134e0:	eea7 0b06 	vfma.f64	d0, d7, d6
 80134e4:	ed91 7b04 	vldr	d7, [r1, #16]
 80134e8:	ed91 6b08 	vldr	d6, [r1, #32]
 80134ec:	eea7 0b02 	vfma.f64	d0, d7, d2
 80134f0:	ed91 7b06 	vldr	d7, [r1, #24]
 80134f4:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 80134f8:	eea6 7b05 	vfma.f64	d7, d6, d5
 80134fc:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8013500:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013504:	eea6 7b02 	vfma.f64	d7, d6, d2
 8013508:	eea1 0b07 	vfma.f64	d0, d1, d7
 801350c:	ee30 0b04 	vadd.f64	d0, d0, d4
 8013510:	e78c      	b.n	801342c <log+0xd4>
 8013512:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8013528 <log+0x1d0>
 8013516:	e789      	b.n	801342c <log+0xd4>
 8013518:	00000000 	.word	0x00000000
 801351c:	41a00000 	.word	0x41a00000
 8013520:	00000000 	.word	0x00000000
 8013524:	43300000 	.word	0x43300000
	...
 8013530:	000308ff 	.word	0x000308ff
 8013534:	3ff00000 	.word	0x3ff00000
 8013538:	08014ed0 	.word	0x08014ed0
 801353c:	7ff00000 	.word	0x7ff00000

08013540 <checkint>:
 8013540:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013544:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8013548:	429a      	cmp	r2, r3
 801354a:	b570      	push	{r4, r5, r6, lr}
 801354c:	dd2a      	ble.n	80135a4 <checkint+0x64>
 801354e:	f240 4333 	movw	r3, #1075	@ 0x433
 8013552:	429a      	cmp	r2, r3
 8013554:	dc24      	bgt.n	80135a0 <checkint+0x60>
 8013556:	1a9b      	subs	r3, r3, r2
 8013558:	f1a3 0620 	sub.w	r6, r3, #32
 801355c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013560:	fa02 f403 	lsl.w	r4, r2, r3
 8013564:	fa02 f606 	lsl.w	r6, r2, r6
 8013568:	f1c3 0520 	rsb	r5, r3, #32
 801356c:	fa22 f505 	lsr.w	r5, r2, r5
 8013570:	4334      	orrs	r4, r6
 8013572:	432c      	orrs	r4, r5
 8013574:	409a      	lsls	r2, r3
 8013576:	ea20 0202 	bic.w	r2, r0, r2
 801357a:	ea21 0404 	bic.w	r4, r1, r4
 801357e:	4322      	orrs	r2, r4
 8013580:	f1a3 0420 	sub.w	r4, r3, #32
 8013584:	f1c3 0220 	rsb	r2, r3, #32
 8013588:	d10c      	bne.n	80135a4 <checkint+0x64>
 801358a:	40d8      	lsrs	r0, r3
 801358c:	fa01 f302 	lsl.w	r3, r1, r2
 8013590:	4318      	orrs	r0, r3
 8013592:	40e1      	lsrs	r1, r4
 8013594:	4308      	orrs	r0, r1
 8013596:	f000 0001 	and.w	r0, r0, #1
 801359a:	f1d0 0002 	rsbs	r0, r0, #2
 801359e:	bd70      	pop	{r4, r5, r6, pc}
 80135a0:	2002      	movs	r0, #2
 80135a2:	e7fc      	b.n	801359e <checkint+0x5e>
 80135a4:	2000      	movs	r0, #0
 80135a6:	e7fa      	b.n	801359e <checkint+0x5e>

080135a8 <pow>:
 80135a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ac:	ee10 4a90 	vmov	r4, s1
 80135b0:	ed2d 8b0a 	vpush	{d8-d12}
 80135b4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 80135b8:	ee11 aa90 	vmov	sl, s3
 80135bc:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80135c0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 80135c4:	429a      	cmp	r2, r3
 80135c6:	ee10 5a10 	vmov	r5, s0
 80135ca:	ee11 0a10 	vmov	r0, s2
 80135ce:	b087      	sub	sp, #28
 80135d0:	46c4      	mov	ip, r8
 80135d2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 80135d6:	d806      	bhi.n	80135e6 <pow+0x3e>
 80135d8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 80135dc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 80135e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80135e2:	f240 8157 	bls.w	8013894 <pow+0x2ec>
 80135e6:	1802      	adds	r2, r0, r0
 80135e8:	eb4a 010a 	adc.w	r1, sl, sl
 80135ec:	f06f 0b01 	mvn.w	fp, #1
 80135f0:	1e57      	subs	r7, r2, #1
 80135f2:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 80135f6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 80135fa:	45bb      	cmp	fp, r7
 80135fc:	eb7e 0303 	sbcs.w	r3, lr, r3
 8013600:	d242      	bcs.n	8013688 <pow+0xe0>
 8013602:	ea52 0301 	orrs.w	r3, r2, r1
 8013606:	f04f 0300 	mov.w	r3, #0
 801360a:	d10c      	bne.n	8013626 <pow+0x7e>
 801360c:	196d      	adds	r5, r5, r5
 801360e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8013612:	4164      	adcs	r4, r4
 8013614:	42ab      	cmp	r3, r5
 8013616:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801361a:	41a3      	sbcs	r3, r4
 801361c:	f0c0 808f 	bcc.w	801373e <pow+0x196>
 8013620:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013624:	e02b      	b.n	801367e <pow+0xd6>
 8013626:	4ed4      	ldr	r6, [pc, #848]	@ (8013978 <pow+0x3d0>)
 8013628:	42b4      	cmp	r4, r6
 801362a:	bf08      	it	eq
 801362c:	429d      	cmpeq	r5, r3
 801362e:	d109      	bne.n	8013644 <pow+0x9c>
 8013630:	1800      	adds	r0, r0, r0
 8013632:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8013636:	eb4a 0a0a 	adc.w	sl, sl, sl
 801363a:	4283      	cmp	r3, r0
 801363c:	4bcf      	ldr	r3, [pc, #828]	@ (801397c <pow+0x3d4>)
 801363e:	eb73 030a 	sbcs.w	r3, r3, sl
 8013642:	e7eb      	b.n	801361c <pow+0x74>
 8013644:	196d      	adds	r5, r5, r5
 8013646:	48ce      	ldr	r0, [pc, #824]	@ (8013980 <pow+0x3d8>)
 8013648:	4164      	adcs	r4, r4
 801364a:	42ab      	cmp	r3, r5
 801364c:	eb70 0604 	sbcs.w	r6, r0, r4
 8013650:	d375      	bcc.n	801373e <pow+0x196>
 8013652:	4281      	cmp	r1, r0
 8013654:	bf08      	it	eq
 8013656:	429a      	cmpeq	r2, r3
 8013658:	d171      	bne.n	801373e <pow+0x196>
 801365a:	4aca      	ldr	r2, [pc, #808]	@ (8013984 <pow+0x3dc>)
 801365c:	4294      	cmp	r4, r2
 801365e:	bf08      	it	eq
 8013660:	429d      	cmpeq	r5, r3
 8013662:	d0dd      	beq.n	8013620 <pow+0x78>
 8013664:	4294      	cmp	r4, r2
 8013666:	ea6f 0a0a 	mvn.w	sl, sl
 801366a:	bf34      	ite	cc
 801366c:	2400      	movcc	r4, #0
 801366e:	2401      	movcs	r4, #1
 8013670:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8013674:	4554      	cmp	r4, sl
 8013676:	f040 81dc 	bne.w	8013a32 <pow+0x48a>
 801367a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801367e:	b007      	add	sp, #28
 8013680:	ecbd 8b0a 	vpop	{d8-d12}
 8013684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013688:	196f      	adds	r7, r5, r5
 801368a:	eb44 0904 	adc.w	r9, r4, r4
 801368e:	1e7a      	subs	r2, r7, #1
 8013690:	f169 0300 	sbc.w	r3, r9, #0
 8013694:	4593      	cmp	fp, r2
 8013696:	eb7e 0303 	sbcs.w	r3, lr, r3
 801369a:	d225      	bcs.n	80136e8 <pow+0x140>
 801369c:	ee20 0b00 	vmul.f64	d0, d0, d0
 80136a0:	2c00      	cmp	r4, #0
 80136a2:	da13      	bge.n	80136cc <pow+0x124>
 80136a4:	4651      	mov	r1, sl
 80136a6:	f7ff ff4b 	bl	8013540 <checkint>
 80136aa:	2801      	cmp	r0, #1
 80136ac:	d10e      	bne.n	80136cc <pow+0x124>
 80136ae:	eeb1 0b40 	vneg.f64	d0, d0
 80136b2:	ea57 0909 	orrs.w	r9, r7, r9
 80136b6:	d10b      	bne.n	80136d0 <pow+0x128>
 80136b8:	f1ba 0f00 	cmp.w	sl, #0
 80136bc:	dadf      	bge.n	801367e <pow+0xd6>
 80136be:	b007      	add	sp, #28
 80136c0:	ecbd 8b0a 	vpop	{d8-d12}
 80136c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c8:	f000 bc6e 	b.w	8013fa8 <__math_divzero>
 80136cc:	2000      	movs	r0, #0
 80136ce:	e7f0      	b.n	80136b2 <pow+0x10a>
 80136d0:	f1ba 0f00 	cmp.w	sl, #0
 80136d4:	dad3      	bge.n	801367e <pow+0xd6>
 80136d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80136da:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80136de:	ed8d 7b00 	vstr	d7, [sp]
 80136e2:	ed9d 0b00 	vldr	d0, [sp]
 80136e6:	e7ca      	b.n	801367e <pow+0xd6>
 80136e8:	2c00      	cmp	r4, #0
 80136ea:	da2b      	bge.n	8013744 <pow+0x19c>
 80136ec:	4651      	mov	r1, sl
 80136ee:	f7ff ff27 	bl	8013540 <checkint>
 80136f2:	b930      	cbnz	r0, 8013702 <pow+0x15a>
 80136f4:	b007      	add	sp, #28
 80136f6:	ecbd 8b0a 	vpop	{d8-d12}
 80136fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136fe:	f000 bc6b 	b.w	8013fd8 <__math_invalid>
 8013702:	1e41      	subs	r1, r0, #1
 8013704:	4248      	negs	r0, r1
 8013706:	4148      	adcs	r0, r1
 8013708:	0480      	lsls	r0, r0, #18
 801370a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801370e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8013712:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8013716:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801371a:	2b7f      	cmp	r3, #127	@ 0x7f
 801371c:	d92d      	bls.n	801377a <pow+0x1d2>
 801371e:	4b96      	ldr	r3, [pc, #600]	@ (8013978 <pow+0x3d0>)
 8013720:	2000      	movs	r0, #0
 8013722:	429c      	cmp	r4, r3
 8013724:	bf08      	it	eq
 8013726:	4285      	cmpeq	r5, r0
 8013728:	f43f af7a 	beq.w	8013620 <pow+0x78>
 801372c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8013730:	428a      	cmp	r2, r1
 8013732:	d80c      	bhi.n	801374e <pow+0x1a6>
 8013734:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013738:	42a8      	cmp	r0, r5
 801373a:	41a3      	sbcs	r3, r4
 801373c:	d204      	bcs.n	8013748 <pow+0x1a0>
 801373e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8013742:	e79c      	b.n	801367e <pow+0xd6>
 8013744:	2000      	movs	r0, #0
 8013746:	e7e4      	b.n	8013712 <pow+0x16a>
 8013748:	ee30 0b41 	vsub.f64	d0, d0, d1
 801374c:	e797      	b.n	801367e <pow+0xd6>
 801374e:	2d01      	cmp	r5, #1
 8013750:	eb74 0303 	sbcs.w	r3, r4, r3
 8013754:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013758:	bf34      	ite	cc
 801375a:	2301      	movcc	r3, #1
 801375c:	2300      	movcs	r3, #0
 801375e:	4296      	cmp	r6, r2
 8013760:	bf8c      	ite	hi
 8013762:	2600      	movhi	r6, #0
 8013764:	2601      	movls	r6, #1
 8013766:	42b3      	cmp	r3, r6
 8013768:	f000 809c 	beq.w	80138a4 <pow+0x2fc>
 801376c:	b007      	add	sp, #28
 801376e:	ecbd 8b0a 	vpop	{d8-d12}
 8013772:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013776:	f000 bc0f 	b.w	8013f98 <__math_oflow>
 801377a:	f1bc 0f00 	cmp.w	ip, #0
 801377e:	d10a      	bne.n	8013796 <pow+0x1ee>
 8013780:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8013968 <pow+0x3c0>
 8013784:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013788:	ec53 2b17 	vmov	r2, r3, d7
 801378c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8013790:	4615      	mov	r5, r2
 8013792:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8013796:	4a7c      	ldr	r2, [pc, #496]	@ (8013988 <pow+0x3e0>)
 8013798:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801379c:	4422      	add	r2, r4
 801379e:	1513      	asrs	r3, r2, #20
 80137a0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 80137a4:	ee03 3a10 	vmov	s6, r3
 80137a8:	0d12      	lsrs	r2, r2, #20
 80137aa:	4b78      	ldr	r3, [pc, #480]	@ (801398c <pow+0x3e4>)
 80137ac:	0512      	lsls	r2, r2, #20
 80137ae:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 80137b2:	1aa7      	subs	r7, r4, r2
 80137b4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 80137b8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 80137bc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 80137c0:	1e2e      	subs	r6, r5, #0
 80137c2:	ec47 6b14 	vmov	d4, r6, r7
 80137c6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 80137ca:	eea4 6b05 	vfma.f64	d6, d4, d5
 80137ce:	ed93 5b00 	vldr	d5, [r3]
 80137d2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80137d6:	eea3 2b05 	vfma.f64	d2, d3, d5
 80137da:	ed93 5b02 	vldr	d5, [r3, #8]
 80137de:	ee36 4b02 	vadd.f64	d4, d6, d2
 80137e2:	ee32 2b44 	vsub.f64	d2, d2, d4
 80137e6:	eea3 7b05 	vfma.f64	d7, d3, d5
 80137ea:	ed93 5b04 	vldr	d5, [r3, #16]
 80137ee:	ee32 2b06 	vadd.f64	d2, d2, d6
 80137f2:	ee37 7b02 	vadd.f64	d7, d7, d2
 80137f6:	ee26 5b05 	vmul.f64	d5, d6, d5
 80137fa:	ee26 0b05 	vmul.f64	d0, d6, d5
 80137fe:	ee34 8b00 	vadd.f64	d8, d4, d0
 8013802:	eeb0 9b40 	vmov.f64	d9, d0
 8013806:	ee34 4b48 	vsub.f64	d4, d4, d8
 801380a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801380e:	ee34 ab00 	vadd.f64	d10, d4, d0
 8013812:	ed93 5b06 	vldr	d5, [r3, #24]
 8013816:	ee26 bb00 	vmul.f64	d11, d6, d0
 801381a:	ee37 7b09 	vadd.f64	d7, d7, d9
 801381e:	ed93 4b08 	vldr	d4, [r3, #32]
 8013822:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8013826:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801382a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801382e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8013832:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8013836:	eea6 4b03 	vfma.f64	d4, d6, d3
 801383a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801383e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8013842:	eea0 4b03 	vfma.f64	d4, d0, d3
 8013846:	eea0 5b04 	vfma.f64	d5, d0, d4
 801384a:	eeab 7b05 	vfma.f64	d7, d11, d5
 801384e:	ee38 4b07 	vadd.f64	d4, d8, d7
 8013852:	ee21 6b04 	vmul.f64	d6, d1, d4
 8013856:	ee16 3a90 	vmov	r3, s13
 801385a:	eeb0 5b46 	vmov.f64	d5, d6
 801385e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8013862:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8013866:	18b2      	adds	r2, r6, r2
 8013868:	2a3e      	cmp	r2, #62	@ 0x3e
 801386a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801386e:	ee38 8b44 	vsub.f64	d8, d8, d4
 8013872:	ee38 8b07 	vadd.f64	d8, d8, d7
 8013876:	eea1 5b08 	vfma.f64	d5, d1, d8
 801387a:	d91b      	bls.n	80138b4 <pow+0x30c>
 801387c:	2a00      	cmp	r2, #0
 801387e:	da0b      	bge.n	8013898 <pow+0x2f0>
 8013880:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013884:	ee36 0b00 	vadd.f64	d0, d6, d0
 8013888:	2800      	cmp	r0, #0
 801388a:	f43f aef8 	beq.w	801367e <pow+0xd6>
 801388e:	eeb1 0b40 	vneg.f64	d0, d0
 8013892:	e6f4      	b.n	801367e <pow+0xd6>
 8013894:	2000      	movs	r0, #0
 8013896:	e77e      	b.n	8013796 <pow+0x1ee>
 8013898:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801389c:	d909      	bls.n	80138b2 <pow+0x30a>
 801389e:	2b00      	cmp	r3, #0
 80138a0:	f6bf af64 	bge.w	801376c <pow+0x1c4>
 80138a4:	b007      	add	sp, #28
 80138a6:	ecbd 8b0a 	vpop	{d8-d12}
 80138aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ae:	f000 bb6b 	b.w	8013f88 <__math_uflow>
 80138b2:	2600      	movs	r6, #0
 80138b4:	4936      	ldr	r1, [pc, #216]	@ (8013990 <pow+0x3e8>)
 80138b6:	ed91 4b02 	vldr	d4, [r1, #8]
 80138ba:	ed91 3b00 	vldr	d3, [r1]
 80138be:	eeb0 7b44 	vmov.f64	d7, d4
 80138c2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80138c6:	ee17 5a10 	vmov	r5, s14
 80138ca:	ee37 7b44 	vsub.f64	d7, d7, d4
 80138ce:	ed91 4b04 	vldr	d4, [r1, #16]
 80138d2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 80138d6:	eea7 6b04 	vfma.f64	d6, d7, d4
 80138da:	ed91 4b06 	vldr	d4, [r1, #24]
 80138de:	18dc      	adds	r4, r3, r3
 80138e0:	f104 030f 	add.w	r3, r4, #15
 80138e4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80138e8:	eea7 6b04 	vfma.f64	d6, d7, d4
 80138ec:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 80138f0:	ee35 5b06 	vadd.f64	d5, d5, d6
 80138f4:	ee25 6b05 	vmul.f64	d6, d5, d5
 80138f8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 80138fc:	ed91 4b08 	vldr	d4, [r1, #32]
 8013900:	ee35 7b07 	vadd.f64	d7, d5, d7
 8013904:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8013908:	eea5 4b03 	vfma.f64	d4, d5, d3
 801390c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8013910:	eea6 7b04 	vfma.f64	d7, d6, d4
 8013914:	ee26 6b06 	vmul.f64	d6, d6, d6
 8013918:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801391c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8013920:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8013924:	eea5 4b03 	vfma.f64	d4, d5, d3
 8013928:	1940      	adds	r0, r0, r5
 801392a:	2700      	movs	r7, #0
 801392c:	eb17 020c 	adds.w	r2, r7, ip
 8013930:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8013934:	eea6 7b04 	vfma.f64	d7, d6, d4
 8013938:	2e00      	cmp	r6, #0
 801393a:	d175      	bne.n	8013a28 <pow+0x480>
 801393c:	42bd      	cmp	r5, r7
 801393e:	db29      	blt.n	8013994 <pow+0x3ec>
 8013940:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8013944:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8013948:	4610      	mov	r0, r2
 801394a:	ec41 0b10 	vmov	d0, r0, r1
 801394e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8013952:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8013970 <pow+0x3c8>
 8013956:	ee20 0b07 	vmul.f64	d0, d0, d7
 801395a:	b007      	add	sp, #28
 801395c:	ecbd 8b0a 	vpop	{d8-d12}
 8013960:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013964:	f000 bb50 	b.w	8014008 <__math_check_oflow>
 8013968:	00000000 	.word	0x00000000
 801396c:	43300000 	.word	0x43300000
 8013970:	00000000 	.word	0x00000000
 8013974:	7f000000 	.word	0x7f000000
 8013978:	3ff00000 	.word	0x3ff00000
 801397c:	fff00000 	.word	0xfff00000
 8013980:	ffe00000 	.word	0xffe00000
 8013984:	7fe00000 	.word	0x7fe00000
 8013988:	c0196aab 	.word	0xc0196aab
 801398c:	08015760 	.word	0x08015760
 8013990:	08016930 	.word	0x08016930
 8013994:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8013998:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801399c:	4610      	mov	r0, r2
 801399e:	ec41 0b15 	vmov	d5, r0, r1
 80139a2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 80139a6:	ee27 6b05 	vmul.f64	d6, d7, d5
 80139aa:	ee35 7b06 	vadd.f64	d7, d5, d6
 80139ae:	eeb0 4bc7 	vabs.f64	d4, d7
 80139b2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80139b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ba:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8013a38 <pow+0x490>
 80139be:	d52a      	bpl.n	8013a16 <pow+0x46e>
 80139c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80139c4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80139c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139cc:	ee35 5b06 	vadd.f64	d5, d5, d6
 80139d0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 80139d4:	bf58      	it	pl
 80139d6:	eeb0 4b43 	vmovpl.f64	d4, d3
 80139da:	ee37 3b04 	vadd.f64	d3, d7, d4
 80139de:	ee34 6b43 	vsub.f64	d6, d4, d3
 80139e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80139e6:	ee36 6b05 	vadd.f64	d6, d6, d5
 80139ea:	ee36 6b03 	vadd.f64	d6, d6, d3
 80139ee:	ee36 7b44 	vsub.f64	d7, d6, d4
 80139f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80139f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139fa:	d104      	bne.n	8013a06 <pow+0x45e>
 80139fc:	4632      	mov	r2, r6
 80139fe:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8013a02:	ec43 2b17 	vmov	d7, r2, r3
 8013a06:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013a0a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013a0e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8013a12:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013a16:	ee27 0b00 	vmul.f64	d0, d7, d0
 8013a1a:	b007      	add	sp, #28
 8013a1c:	ecbd 8b0a 	vpop	{d8-d12}
 8013a20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a24:	f000 bae7 	b.w	8013ff6 <__math_check_uflow>
 8013a28:	ec43 2b10 	vmov	d0, r2, r3
 8013a2c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8013a30:	e625      	b.n	801367e <pow+0xd6>
 8013a32:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8013a40 <pow+0x498>
 8013a36:	e622      	b.n	801367e <pow+0xd6>
 8013a38:	00000000 	.word	0x00000000
 8013a3c:	00100000 	.word	0x00100000
	...

08013a48 <cos>:
 8013a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a4a:	eeb0 7b40 	vmov.f64	d7, d0
 8013a4e:	ee17 3a90 	vmov	r3, s15
 8013a52:	4a21      	ldr	r2, [pc, #132]	@ (8013ad8 <cos+0x90>)
 8013a54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013a58:	4293      	cmp	r3, r2
 8013a5a:	d806      	bhi.n	8013a6a <cos+0x22>
 8013a5c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8013ad0 <cos+0x88>
 8013a60:	b005      	add	sp, #20
 8013a62:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a66:	f000 bd5f 	b.w	8014528 <__kernel_cos>
 8013a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8013adc <cos+0x94>)
 8013a6c:	4293      	cmp	r3, r2
 8013a6e:	d904      	bls.n	8013a7a <cos+0x32>
 8013a70:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013a74:	b005      	add	sp, #20
 8013a76:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a7a:	4668      	mov	r0, sp
 8013a7c:	f000 f8f8 	bl	8013c70 <__ieee754_rem_pio2>
 8013a80:	f000 0003 	and.w	r0, r0, #3
 8013a84:	2801      	cmp	r0, #1
 8013a86:	d009      	beq.n	8013a9c <cos+0x54>
 8013a88:	2802      	cmp	r0, #2
 8013a8a:	d010      	beq.n	8013aae <cos+0x66>
 8013a8c:	b9b0      	cbnz	r0, 8013abc <cos+0x74>
 8013a8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013a92:	ed9d 0b00 	vldr	d0, [sp]
 8013a96:	f000 fd47 	bl	8014528 <__kernel_cos>
 8013a9a:	e7eb      	b.n	8013a74 <cos+0x2c>
 8013a9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013aa0:	ed9d 0b00 	vldr	d0, [sp]
 8013aa4:	f000 fda8 	bl	80145f8 <__kernel_sin>
 8013aa8:	eeb1 0b40 	vneg.f64	d0, d0
 8013aac:	e7e2      	b.n	8013a74 <cos+0x2c>
 8013aae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013ab2:	ed9d 0b00 	vldr	d0, [sp]
 8013ab6:	f000 fd37 	bl	8014528 <__kernel_cos>
 8013aba:	e7f5      	b.n	8013aa8 <cos+0x60>
 8013abc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013ac0:	ed9d 0b00 	vldr	d0, [sp]
 8013ac4:	2001      	movs	r0, #1
 8013ac6:	f000 fd97 	bl	80145f8 <__kernel_sin>
 8013aca:	e7d3      	b.n	8013a74 <cos+0x2c>
 8013acc:	f3af 8000 	nop.w
	...
 8013ad8:	3fe921fb 	.word	0x3fe921fb
 8013adc:	7fefffff 	.word	0x7fefffff

08013ae0 <sin>:
 8013ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ae2:	eeb0 7b40 	vmov.f64	d7, d0
 8013ae6:	ee17 3a90 	vmov	r3, s15
 8013aea:	4a21      	ldr	r2, [pc, #132]	@ (8013b70 <sin+0x90>)
 8013aec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013af0:	4293      	cmp	r3, r2
 8013af2:	d807      	bhi.n	8013b04 <sin+0x24>
 8013af4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8013b68 <sin+0x88>
 8013af8:	2000      	movs	r0, #0
 8013afa:	b005      	add	sp, #20
 8013afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b00:	f000 bd7a 	b.w	80145f8 <__kernel_sin>
 8013b04:	4a1b      	ldr	r2, [pc, #108]	@ (8013b74 <sin+0x94>)
 8013b06:	4293      	cmp	r3, r2
 8013b08:	d904      	bls.n	8013b14 <sin+0x34>
 8013b0a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013b0e:	b005      	add	sp, #20
 8013b10:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b14:	4668      	mov	r0, sp
 8013b16:	f000 f8ab 	bl	8013c70 <__ieee754_rem_pio2>
 8013b1a:	f000 0003 	and.w	r0, r0, #3
 8013b1e:	2801      	cmp	r0, #1
 8013b20:	d00a      	beq.n	8013b38 <sin+0x58>
 8013b22:	2802      	cmp	r0, #2
 8013b24:	d00f      	beq.n	8013b46 <sin+0x66>
 8013b26:	b9c0      	cbnz	r0, 8013b5a <sin+0x7a>
 8013b28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b2c:	ed9d 0b00 	vldr	d0, [sp]
 8013b30:	2001      	movs	r0, #1
 8013b32:	f000 fd61 	bl	80145f8 <__kernel_sin>
 8013b36:	e7ea      	b.n	8013b0e <sin+0x2e>
 8013b38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b3c:	ed9d 0b00 	vldr	d0, [sp]
 8013b40:	f000 fcf2 	bl	8014528 <__kernel_cos>
 8013b44:	e7e3      	b.n	8013b0e <sin+0x2e>
 8013b46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b4a:	ed9d 0b00 	vldr	d0, [sp]
 8013b4e:	2001      	movs	r0, #1
 8013b50:	f000 fd52 	bl	80145f8 <__kernel_sin>
 8013b54:	eeb1 0b40 	vneg.f64	d0, d0
 8013b58:	e7d9      	b.n	8013b0e <sin+0x2e>
 8013b5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b5e:	ed9d 0b00 	vldr	d0, [sp]
 8013b62:	f000 fce1 	bl	8014528 <__kernel_cos>
 8013b66:	e7f5      	b.n	8013b54 <sin+0x74>
	...
 8013b70:	3fe921fb 	.word	0x3fe921fb
 8013b74:	7fefffff 	.word	0x7fefffff

08013b78 <cimag>:
 8013b78:	eeb0 0b41 	vmov.f64	d0, d1
 8013b7c:	4770      	bx	lr

08013b7e <creal>:
 8013b7e:	4770      	bx	lr

08013b80 <floor>:
 8013b80:	ee10 3a90 	vmov	r3, s1
 8013b84:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8013b88:	ee10 2a10 	vmov	r2, s0
 8013b8c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8013b90:	2913      	cmp	r1, #19
 8013b92:	b530      	push	{r4, r5, lr}
 8013b94:	4615      	mov	r5, r2
 8013b96:	dc33      	bgt.n	8013c00 <floor+0x80>
 8013b98:	2900      	cmp	r1, #0
 8013b9a:	da18      	bge.n	8013bce <floor+0x4e>
 8013b9c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8013c60 <floor+0xe0>
 8013ba0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013ba4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bac:	dd0a      	ble.n	8013bc4 <floor+0x44>
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	da50      	bge.n	8013c54 <floor+0xd4>
 8013bb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013bb6:	4313      	orrs	r3, r2
 8013bb8:	2200      	movs	r2, #0
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8013c68 <floor+0xe8>)
 8013bbe:	bf08      	it	eq
 8013bc0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013bc4:	4619      	mov	r1, r3
 8013bc6:	4610      	mov	r0, r2
 8013bc8:	ec41 0b10 	vmov	d0, r0, r1
 8013bcc:	e01f      	b.n	8013c0e <floor+0x8e>
 8013bce:	4827      	ldr	r0, [pc, #156]	@ (8013c6c <floor+0xec>)
 8013bd0:	4108      	asrs	r0, r1
 8013bd2:	ea03 0400 	and.w	r4, r3, r0
 8013bd6:	4314      	orrs	r4, r2
 8013bd8:	d019      	beq.n	8013c0e <floor+0x8e>
 8013bda:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013c60 <floor+0xe0>
 8013bde:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013be2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bea:	ddeb      	ble.n	8013bc4 <floor+0x44>
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	bfbe      	ittt	lt
 8013bf0:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8013bf4:	410a      	asrlt	r2, r1
 8013bf6:	189b      	addlt	r3, r3, r2
 8013bf8:	ea23 0300 	bic.w	r3, r3, r0
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	e7e1      	b.n	8013bc4 <floor+0x44>
 8013c00:	2933      	cmp	r1, #51	@ 0x33
 8013c02:	dd05      	ble.n	8013c10 <floor+0x90>
 8013c04:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013c08:	d101      	bne.n	8013c0e <floor+0x8e>
 8013c0a:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013c0e:	bd30      	pop	{r4, r5, pc}
 8013c10:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8013c14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013c18:	40e0      	lsrs	r0, r4
 8013c1a:	4210      	tst	r0, r2
 8013c1c:	d0f7      	beq.n	8013c0e <floor+0x8e>
 8013c1e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8013c60 <floor+0xe0>
 8013c22:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013c26:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c2e:	ddc9      	ble.n	8013bc4 <floor+0x44>
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	da02      	bge.n	8013c3a <floor+0xba>
 8013c34:	2914      	cmp	r1, #20
 8013c36:	d103      	bne.n	8013c40 <floor+0xc0>
 8013c38:	3301      	adds	r3, #1
 8013c3a:	ea22 0200 	bic.w	r2, r2, r0
 8013c3e:	e7c1      	b.n	8013bc4 <floor+0x44>
 8013c40:	2401      	movs	r4, #1
 8013c42:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8013c46:	fa04 f101 	lsl.w	r1, r4, r1
 8013c4a:	440a      	add	r2, r1
 8013c4c:	42aa      	cmp	r2, r5
 8013c4e:	bf38      	it	cc
 8013c50:	191b      	addcc	r3, r3, r4
 8013c52:	e7f2      	b.n	8013c3a <floor+0xba>
 8013c54:	2200      	movs	r2, #0
 8013c56:	4613      	mov	r3, r2
 8013c58:	e7b4      	b.n	8013bc4 <floor+0x44>
 8013c5a:	bf00      	nop
 8013c5c:	f3af 8000 	nop.w
 8013c60:	8800759c 	.word	0x8800759c
 8013c64:	7e37e43c 	.word	0x7e37e43c
 8013c68:	bff00000 	.word	0xbff00000
 8013c6c:	000fffff 	.word	0x000fffff

08013c70 <__ieee754_rem_pio2>:
 8013c70:	b570      	push	{r4, r5, r6, lr}
 8013c72:	eeb0 7b40 	vmov.f64	d7, d0
 8013c76:	ee17 5a90 	vmov	r5, s15
 8013c7a:	4b99      	ldr	r3, [pc, #612]	@ (8013ee0 <__ieee754_rem_pio2+0x270>)
 8013c7c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013c80:	429e      	cmp	r6, r3
 8013c82:	b088      	sub	sp, #32
 8013c84:	4604      	mov	r4, r0
 8013c86:	d807      	bhi.n	8013c98 <__ieee754_rem_pio2+0x28>
 8013c88:	2200      	movs	r2, #0
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	ed84 0b00 	vstr	d0, [r4]
 8013c90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013c94:	2000      	movs	r0, #0
 8013c96:	e01b      	b.n	8013cd0 <__ieee754_rem_pio2+0x60>
 8013c98:	4b92      	ldr	r3, [pc, #584]	@ (8013ee4 <__ieee754_rem_pio2+0x274>)
 8013c9a:	429e      	cmp	r6, r3
 8013c9c:	d83b      	bhi.n	8013d16 <__ieee754_rem_pio2+0xa6>
 8013c9e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8013ca2:	2d00      	cmp	r5, #0
 8013ca4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8013ea0 <__ieee754_rem_pio2+0x230>
 8013ca8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8013cac:	dd19      	ble.n	8013ce2 <__ieee754_rem_pio2+0x72>
 8013cae:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013cb2:	429e      	cmp	r6, r3
 8013cb4:	d00e      	beq.n	8013cd4 <__ieee754_rem_pio2+0x64>
 8013cb6:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8013ea8 <__ieee754_rem_pio2+0x238>
 8013cba:	ee37 6b45 	vsub.f64	d6, d7, d5
 8013cbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013cc2:	ed84 6b00 	vstr	d6, [r4]
 8013cc6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013cca:	ed84 7b02 	vstr	d7, [r4, #8]
 8013cce:	2001      	movs	r0, #1
 8013cd0:	b008      	add	sp, #32
 8013cd2:	bd70      	pop	{r4, r5, r6, pc}
 8013cd4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8013eb0 <__ieee754_rem_pio2+0x240>
 8013cd8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8013eb8 <__ieee754_rem_pio2+0x248>
 8013cdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013ce0:	e7eb      	b.n	8013cba <__ieee754_rem_pio2+0x4a>
 8013ce2:	429e      	cmp	r6, r3
 8013ce4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8013ce8:	d00e      	beq.n	8013d08 <__ieee754_rem_pio2+0x98>
 8013cea:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8013ea8 <__ieee754_rem_pio2+0x238>
 8013cee:	ee37 6b05 	vadd.f64	d6, d7, d5
 8013cf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013cf6:	ed84 6b00 	vstr	d6, [r4]
 8013cfa:	ee37 7b05 	vadd.f64	d7, d7, d5
 8013cfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d02:	ed84 7b02 	vstr	d7, [r4, #8]
 8013d06:	e7e3      	b.n	8013cd0 <__ieee754_rem_pio2+0x60>
 8013d08:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8013eb0 <__ieee754_rem_pio2+0x240>
 8013d0c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8013eb8 <__ieee754_rem_pio2+0x248>
 8013d10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013d14:	e7eb      	b.n	8013cee <__ieee754_rem_pio2+0x7e>
 8013d16:	4b74      	ldr	r3, [pc, #464]	@ (8013ee8 <__ieee754_rem_pio2+0x278>)
 8013d18:	429e      	cmp	r6, r3
 8013d1a:	d870      	bhi.n	8013dfe <__ieee754_rem_pio2+0x18e>
 8013d1c:	f000 fcc4 	bl	80146a8 <fabs>
 8013d20:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8013d24:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013ec0 <__ieee754_rem_pio2+0x250>
 8013d28:	eea0 7b06 	vfma.f64	d7, d0, d6
 8013d2c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8013d30:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013d34:	ee17 0a90 	vmov	r0, s15
 8013d38:	eeb1 4b45 	vneg.f64	d4, d5
 8013d3c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8013ea0 <__ieee754_rem_pio2+0x230>
 8013d40:	eea5 0b47 	vfms.f64	d0, d5, d7
 8013d44:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8013ea8 <__ieee754_rem_pio2+0x238>
 8013d48:	281f      	cmp	r0, #31
 8013d4a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8013d4e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013d52:	dc05      	bgt.n	8013d60 <__ieee754_rem_pio2+0xf0>
 8013d54:	4b65      	ldr	r3, [pc, #404]	@ (8013eec <__ieee754_rem_pio2+0x27c>)
 8013d56:	1e42      	subs	r2, r0, #1
 8013d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d5c:	42b3      	cmp	r3, r6
 8013d5e:	d109      	bne.n	8013d74 <__ieee754_rem_pio2+0x104>
 8013d60:	ee16 3a90 	vmov	r3, s13
 8013d64:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013d68:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8013d6c:	2b10      	cmp	r3, #16
 8013d6e:	ea4f 5226 	mov.w	r2, r6, asr #20
 8013d72:	dc02      	bgt.n	8013d7a <__ieee754_rem_pio2+0x10a>
 8013d74:	ed84 6b00 	vstr	d6, [r4]
 8013d78:	e01a      	b.n	8013db0 <__ieee754_rem_pio2+0x140>
 8013d7a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8013eb0 <__ieee754_rem_pio2+0x240>
 8013d7e:	eeb0 6b40 	vmov.f64	d6, d0
 8013d82:	eea4 6b03 	vfma.f64	d6, d4, d3
 8013d86:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013d8a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8013d8e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8013eb8 <__ieee754_rem_pio2+0x248>
 8013d92:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8013d96:	ee36 3b47 	vsub.f64	d3, d6, d7
 8013d9a:	ee13 3a90 	vmov	r3, s7
 8013d9e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013da2:	1ad3      	subs	r3, r2, r3
 8013da4:	2b31      	cmp	r3, #49	@ 0x31
 8013da6:	dc17      	bgt.n	8013dd8 <__ieee754_rem_pio2+0x168>
 8013da8:	eeb0 0b46 	vmov.f64	d0, d6
 8013dac:	ed84 3b00 	vstr	d3, [r4]
 8013db0:	ed94 6b00 	vldr	d6, [r4]
 8013db4:	2d00      	cmp	r5, #0
 8013db6:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013dba:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013dbe:	ed84 0b02 	vstr	d0, [r4, #8]
 8013dc2:	da85      	bge.n	8013cd0 <__ieee754_rem_pio2+0x60>
 8013dc4:	eeb1 6b46 	vneg.f64	d6, d6
 8013dc8:	eeb1 0b40 	vneg.f64	d0, d0
 8013dcc:	ed84 6b00 	vstr	d6, [r4]
 8013dd0:	ed84 0b02 	vstr	d0, [r4, #8]
 8013dd4:	4240      	negs	r0, r0
 8013dd6:	e77b      	b.n	8013cd0 <__ieee754_rem_pio2+0x60>
 8013dd8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8013ec8 <__ieee754_rem_pio2+0x258>
 8013ddc:	eeb0 0b46 	vmov.f64	d0, d6
 8013de0:	eea4 0b07 	vfma.f64	d0, d4, d7
 8013de4:	ee36 6b40 	vsub.f64	d6, d6, d0
 8013de8:	eea4 6b07 	vfma.f64	d6, d4, d7
 8013dec:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8013ed0 <__ieee754_rem_pio2+0x260>
 8013df0:	eeb0 7b46 	vmov.f64	d7, d6
 8013df4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8013df8:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013dfc:	e7ba      	b.n	8013d74 <__ieee754_rem_pio2+0x104>
 8013dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8013ef0 <__ieee754_rem_pio2+0x280>)
 8013e00:	429e      	cmp	r6, r3
 8013e02:	d906      	bls.n	8013e12 <__ieee754_rem_pio2+0x1a2>
 8013e04:	ee30 7b40 	vsub.f64	d7, d0, d0
 8013e08:	ed80 7b02 	vstr	d7, [r0, #8]
 8013e0c:	ed80 7b00 	vstr	d7, [r0]
 8013e10:	e740      	b.n	8013c94 <__ieee754_rem_pio2+0x24>
 8013e12:	ee10 3a10 	vmov	r3, s0
 8013e16:	1532      	asrs	r2, r6, #20
 8013e18:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8013e22:	ec41 0b17 	vmov	d7, r0, r1
 8013e26:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013e2a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8013ed8 <__ieee754_rem_pio2+0x268>
 8013e2e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013e32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013e36:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013e3a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013e3e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013e42:	a808      	add	r0, sp, #32
 8013e44:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013e48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013e4c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013e50:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013e54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013e58:	2103      	movs	r1, #3
 8013e5a:	ed30 7b02 	vldmdb	r0!, {d7}
 8013e5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e66:	460b      	mov	r3, r1
 8013e68:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8013e6c:	d0f5      	beq.n	8013e5a <__ieee754_rem_pio2+0x1ea>
 8013e6e:	4921      	ldr	r1, [pc, #132]	@ (8013ef4 <__ieee754_rem_pio2+0x284>)
 8013e70:	9101      	str	r1, [sp, #4]
 8013e72:	2102      	movs	r1, #2
 8013e74:	9100      	str	r1, [sp, #0]
 8013e76:	a802      	add	r0, sp, #8
 8013e78:	4621      	mov	r1, r4
 8013e7a:	f000 f8d9 	bl	8014030 <__kernel_rem_pio2>
 8013e7e:	2d00      	cmp	r5, #0
 8013e80:	f6bf af26 	bge.w	8013cd0 <__ieee754_rem_pio2+0x60>
 8013e84:	ed94 7b00 	vldr	d7, [r4]
 8013e88:	eeb1 7b47 	vneg.f64	d7, d7
 8013e8c:	ed84 7b00 	vstr	d7, [r4]
 8013e90:	ed94 7b02 	vldr	d7, [r4, #8]
 8013e94:	eeb1 7b47 	vneg.f64	d7, d7
 8013e98:	ed84 7b02 	vstr	d7, [r4, #8]
 8013e9c:	e79a      	b.n	8013dd4 <__ieee754_rem_pio2+0x164>
 8013e9e:	bf00      	nop
 8013ea0:	54400000 	.word	0x54400000
 8013ea4:	3ff921fb 	.word	0x3ff921fb
 8013ea8:	1a626331 	.word	0x1a626331
 8013eac:	3dd0b461 	.word	0x3dd0b461
 8013eb0:	1a600000 	.word	0x1a600000
 8013eb4:	3dd0b461 	.word	0x3dd0b461
 8013eb8:	2e037073 	.word	0x2e037073
 8013ebc:	3ba3198a 	.word	0x3ba3198a
 8013ec0:	6dc9c883 	.word	0x6dc9c883
 8013ec4:	3fe45f30 	.word	0x3fe45f30
 8013ec8:	2e000000 	.word	0x2e000000
 8013ecc:	3ba3198a 	.word	0x3ba3198a
 8013ed0:	252049c1 	.word	0x252049c1
 8013ed4:	397b839a 	.word	0x397b839a
 8013ed8:	00000000 	.word	0x00000000
 8013edc:	41700000 	.word	0x41700000
 8013ee0:	3fe921fb 	.word	0x3fe921fb
 8013ee4:	4002d97b 	.word	0x4002d97b
 8013ee8:	413921fb 	.word	0x413921fb
 8013eec:	080167a8 	.word	0x080167a8
 8013ef0:	7fefffff 	.word	0x7fefffff
 8013ef4:	08016828 	.word	0x08016828

08013ef8 <hypot>:
 8013ef8:	b508      	push	{r3, lr}
 8013efa:	ed2d 8b06 	vpush	{d8-d10}
 8013efe:	eeb0 ab40 	vmov.f64	d10, d0
 8013f02:	eeb0 9b41 	vmov.f64	d9, d1
 8013f06:	f000 fc63 	bl	80147d0 <__ieee754_hypot>
 8013f0a:	eeb0 8b40 	vmov.f64	d8, d0
 8013f0e:	f000 fbd3 	bl	80146b8 <finite>
 8013f12:	b978      	cbnz	r0, 8013f34 <hypot+0x3c>
 8013f14:	eeb0 0b4a 	vmov.f64	d0, d10
 8013f18:	f000 fbce 	bl	80146b8 <finite>
 8013f1c:	b150      	cbz	r0, 8013f34 <hypot+0x3c>
 8013f1e:	eeb0 0b49 	vmov.f64	d0, d9
 8013f22:	f000 fbc9 	bl	80146b8 <finite>
 8013f26:	b128      	cbz	r0, 8013f34 <hypot+0x3c>
 8013f28:	f7fb fe6e 	bl	800fc08 <__errno>
 8013f2c:	ed9f 8b04 	vldr	d8, [pc, #16]	@ 8013f40 <hypot+0x48>
 8013f30:	2322      	movs	r3, #34	@ 0x22
 8013f32:	6003      	str	r3, [r0, #0]
 8013f34:	eeb0 0b48 	vmov.f64	d0, d8
 8013f38:	ecbd 8b06 	vpop	{d8-d10}
 8013f3c:	bd08      	pop	{r3, pc}
 8013f3e:	bf00      	nop
 8013f40:	00000000 	.word	0x00000000
 8013f44:	7ff00000 	.word	0x7ff00000

08013f48 <with_errno>:
 8013f48:	b510      	push	{r4, lr}
 8013f4a:	ed2d 8b02 	vpush	{d8}
 8013f4e:	eeb0 8b40 	vmov.f64	d8, d0
 8013f52:	4604      	mov	r4, r0
 8013f54:	f7fb fe58 	bl	800fc08 <__errno>
 8013f58:	eeb0 0b48 	vmov.f64	d0, d8
 8013f5c:	ecbd 8b02 	vpop	{d8}
 8013f60:	6004      	str	r4, [r0, #0]
 8013f62:	bd10      	pop	{r4, pc}

08013f64 <xflow>:
 8013f64:	b082      	sub	sp, #8
 8013f66:	b158      	cbz	r0, 8013f80 <xflow+0x1c>
 8013f68:	eeb1 7b40 	vneg.f64	d7, d0
 8013f6c:	ed8d 7b00 	vstr	d7, [sp]
 8013f70:	ed9d 7b00 	vldr	d7, [sp]
 8013f74:	2022      	movs	r0, #34	@ 0x22
 8013f76:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013f7a:	b002      	add	sp, #8
 8013f7c:	f7ff bfe4 	b.w	8013f48 <with_errno>
 8013f80:	eeb0 7b40 	vmov.f64	d7, d0
 8013f84:	e7f2      	b.n	8013f6c <xflow+0x8>
	...

08013f88 <__math_uflow>:
 8013f88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013f90 <__math_uflow+0x8>
 8013f8c:	f7ff bfea 	b.w	8013f64 <xflow>
 8013f90:	00000000 	.word	0x00000000
 8013f94:	10000000 	.word	0x10000000

08013f98 <__math_oflow>:
 8013f98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013fa0 <__math_oflow+0x8>
 8013f9c:	f7ff bfe2 	b.w	8013f64 <xflow>
 8013fa0:	00000000 	.word	0x00000000
 8013fa4:	70000000 	.word	0x70000000

08013fa8 <__math_divzero>:
 8013fa8:	b082      	sub	sp, #8
 8013faa:	2800      	cmp	r0, #0
 8013fac:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8013fb0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8013fb4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8013fb8:	ed8d 7b00 	vstr	d7, [sp]
 8013fbc:	ed9d 0b00 	vldr	d0, [sp]
 8013fc0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8013fd0 <__math_divzero+0x28>
 8013fc4:	2022      	movs	r0, #34	@ 0x22
 8013fc6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8013fca:	b002      	add	sp, #8
 8013fcc:	f7ff bfbc 	b.w	8013f48 <with_errno>
	...

08013fd8 <__math_invalid>:
 8013fd8:	eeb0 7b40 	vmov.f64	d7, d0
 8013fdc:	eeb4 7b47 	vcmp.f64	d7, d7
 8013fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fe4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013fe8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8013fec:	d602      	bvs.n	8013ff4 <__math_invalid+0x1c>
 8013fee:	2021      	movs	r0, #33	@ 0x21
 8013ff0:	f7ff bfaa 	b.w	8013f48 <with_errno>
 8013ff4:	4770      	bx	lr

08013ff6 <__math_check_uflow>:
 8013ff6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ffe:	d102      	bne.n	8014006 <__math_check_uflow+0x10>
 8014000:	2022      	movs	r0, #34	@ 0x22
 8014002:	f7ff bfa1 	b.w	8013f48 <with_errno>
 8014006:	4770      	bx	lr

08014008 <__math_check_oflow>:
 8014008:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8014028 <__math_check_oflow+0x20>
 801400c:	eeb0 7bc0 	vabs.f64	d7, d0
 8014010:	eeb4 7b46 	vcmp.f64	d7, d6
 8014014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014018:	dd02      	ble.n	8014020 <__math_check_oflow+0x18>
 801401a:	2022      	movs	r0, #34	@ 0x22
 801401c:	f7ff bf94 	b.w	8013f48 <with_errno>
 8014020:	4770      	bx	lr
 8014022:	bf00      	nop
 8014024:	f3af 8000 	nop.w
 8014028:	ffffffff 	.word	0xffffffff
 801402c:	7fefffff 	.word	0x7fefffff

08014030 <__kernel_rem_pio2>:
 8014030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014034:	ed2d 8b06 	vpush	{d8-d10}
 8014038:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801403c:	469b      	mov	fp, r3
 801403e:	9001      	str	r0, [sp, #4]
 8014040:	4bbb      	ldr	r3, [pc, #748]	@ (8014330 <__kernel_rem_pio2+0x300>)
 8014042:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8014044:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8014048:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801404c:	f112 0f14 	cmn.w	r2, #20
 8014050:	bfa8      	it	ge
 8014052:	1ed3      	subge	r3, r2, #3
 8014054:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 8014058:	bfb8      	it	lt
 801405a:	2300      	movlt	r3, #0
 801405c:	f06f 0517 	mvn.w	r5, #23
 8014060:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8014318 <__kernel_rem_pio2+0x2e8>
 8014064:	bfa4      	itt	ge
 8014066:	2018      	movge	r0, #24
 8014068:	fb93 f3f0 	sdivge	r3, r3, r0
 801406c:	fb03 5505 	mla	r5, r3, r5, r5
 8014070:	eba3 040a 	sub.w	r4, r3, sl
 8014074:	4415      	add	r5, r2
 8014076:	460f      	mov	r7, r1
 8014078:	eb09 060a 	add.w	r6, r9, sl
 801407c:	a81a      	add	r0, sp, #104	@ 0x68
 801407e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8014082:	2200      	movs	r2, #0
 8014084:	42b2      	cmp	r2, r6
 8014086:	dd0e      	ble.n	80140a6 <__kernel_rem_pio2+0x76>
 8014088:	aa1a      	add	r2, sp, #104	@ 0x68
 801408a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801408e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8014092:	2600      	movs	r6, #0
 8014094:	454e      	cmp	r6, r9
 8014096:	dc25      	bgt.n	80140e4 <__kernel_rem_pio2+0xb4>
 8014098:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8014318 <__kernel_rem_pio2+0x2e8>
 801409c:	f8dd c004 	ldr.w	ip, [sp, #4]
 80140a0:	4614      	mov	r4, r2
 80140a2:	2000      	movs	r0, #0
 80140a4:	e015      	b.n	80140d2 <__kernel_rem_pio2+0xa2>
 80140a6:	42d4      	cmn	r4, r2
 80140a8:	d409      	bmi.n	80140be <__kernel_rem_pio2+0x8e>
 80140aa:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 80140ae:	ee07 1a90 	vmov	s15, r1
 80140b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80140b6:	eca0 7b02 	vstmia	r0!, {d7}
 80140ba:	3201      	adds	r2, #1
 80140bc:	e7e2      	b.n	8014084 <__kernel_rem_pio2+0x54>
 80140be:	eeb0 7b46 	vmov.f64	d7, d6
 80140c2:	e7f8      	b.n	80140b6 <__kernel_rem_pio2+0x86>
 80140c4:	ecbc 5b02 	vldmia	ip!, {d5}
 80140c8:	ed94 6b00 	vldr	d6, [r4]
 80140cc:	3001      	adds	r0, #1
 80140ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 80140d2:	4550      	cmp	r0, sl
 80140d4:	f1a4 0408 	sub.w	r4, r4, #8
 80140d8:	ddf4      	ble.n	80140c4 <__kernel_rem_pio2+0x94>
 80140da:	ecae 7b02 	vstmia	lr!, {d7}
 80140de:	3601      	adds	r6, #1
 80140e0:	3208      	adds	r2, #8
 80140e2:	e7d7      	b.n	8014094 <__kernel_rem_pio2+0x64>
 80140e4:	aa06      	add	r2, sp, #24
 80140e6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8014320 <__kernel_rem_pio2+0x2f0>
 80140ea:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8014328 <__kernel_rem_pio2+0x2f8>
 80140ee:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80140f2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80140f6:	9203      	str	r2, [sp, #12]
 80140f8:	9302      	str	r3, [sp, #8]
 80140fa:	464c      	mov	r4, r9
 80140fc:	00e3      	lsls	r3, r4, #3
 80140fe:	9304      	str	r3, [sp, #16]
 8014100:	ab92      	add	r3, sp, #584	@ 0x248
 8014102:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014106:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801410a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801410c:	ab06      	add	r3, sp, #24
 801410e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8014112:	461e      	mov	r6, r3
 8014114:	4620      	mov	r0, r4
 8014116:	2800      	cmp	r0, #0
 8014118:	f1a2 0208 	sub.w	r2, r2, #8
 801411c:	dc4a      	bgt.n	80141b4 <__kernel_rem_pio2+0x184>
 801411e:	4628      	mov	r0, r5
 8014120:	9305      	str	r3, [sp, #20]
 8014122:	f000 fad5 	bl	80146d0 <scalbn>
 8014126:	eeb0 8b40 	vmov.f64	d8, d0
 801412a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801412e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8014132:	f7ff fd25 	bl	8013b80 <floor>
 8014136:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801413a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801413e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8014142:	2d00      	cmp	r5, #0
 8014144:	ee17 8a90 	vmov	r8, s15
 8014148:	9b05      	ldr	r3, [sp, #20]
 801414a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801414e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8014152:	dd41      	ble.n	80141d8 <__kernel_rem_pio2+0x1a8>
 8014154:	1e60      	subs	r0, r4, #1
 8014156:	aa06      	add	r2, sp, #24
 8014158:	f1c5 0c18 	rsb	ip, r5, #24
 801415c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8014160:	fa46 f20c 	asr.w	r2, r6, ip
 8014164:	4490      	add	r8, r2
 8014166:	fa02 f20c 	lsl.w	r2, r2, ip
 801416a:	1ab6      	subs	r6, r6, r2
 801416c:	aa06      	add	r2, sp, #24
 801416e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8014172:	f1c5 0217 	rsb	r2, r5, #23
 8014176:	4116      	asrs	r6, r2
 8014178:	2e00      	cmp	r6, #0
 801417a:	dd3c      	ble.n	80141f6 <__kernel_rem_pio2+0x1c6>
 801417c:	f04f 0c00 	mov.w	ip, #0
 8014180:	f108 0801 	add.w	r8, r8, #1
 8014184:	4660      	mov	r0, ip
 8014186:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801418a:	4564      	cmp	r4, ip
 801418c:	dc66      	bgt.n	801425c <__kernel_rem_pio2+0x22c>
 801418e:	2d00      	cmp	r5, #0
 8014190:	dd03      	ble.n	801419a <__kernel_rem_pio2+0x16a>
 8014192:	2d01      	cmp	r5, #1
 8014194:	d072      	beq.n	801427c <__kernel_rem_pio2+0x24c>
 8014196:	2d02      	cmp	r5, #2
 8014198:	d07a      	beq.n	8014290 <__kernel_rem_pio2+0x260>
 801419a:	2e02      	cmp	r6, #2
 801419c:	d12b      	bne.n	80141f6 <__kernel_rem_pio2+0x1c6>
 801419e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80141a2:	ee30 8b48 	vsub.f64	d8, d0, d8
 80141a6:	b330      	cbz	r0, 80141f6 <__kernel_rem_pio2+0x1c6>
 80141a8:	4628      	mov	r0, r5
 80141aa:	f000 fa91 	bl	80146d0 <scalbn>
 80141ae:	ee38 8b40 	vsub.f64	d8, d8, d0
 80141b2:	e020      	b.n	80141f6 <__kernel_rem_pio2+0x1c6>
 80141b4:	ee20 7b09 	vmul.f64	d7, d0, d9
 80141b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80141bc:	3801      	subs	r0, #1
 80141be:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80141c2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80141c6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80141ca:	eca6 0a01 	vstmia	r6!, {s0}
 80141ce:	ed92 0b00 	vldr	d0, [r2]
 80141d2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80141d6:	e79e      	b.n	8014116 <__kernel_rem_pio2+0xe6>
 80141d8:	d105      	bne.n	80141e6 <__kernel_rem_pio2+0x1b6>
 80141da:	1e62      	subs	r2, r4, #1
 80141dc:	a906      	add	r1, sp, #24
 80141de:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80141e2:	15f6      	asrs	r6, r6, #23
 80141e4:	e7c8      	b.n	8014178 <__kernel_rem_pio2+0x148>
 80141e6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80141ea:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80141ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f2:	da31      	bge.n	8014258 <__kernel_rem_pio2+0x228>
 80141f4:	2600      	movs	r6, #0
 80141f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80141fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141fe:	f040 809b 	bne.w	8014338 <__kernel_rem_pio2+0x308>
 8014202:	1e62      	subs	r2, r4, #1
 8014204:	2000      	movs	r0, #0
 8014206:	454a      	cmp	r2, r9
 8014208:	da49      	bge.n	801429e <__kernel_rem_pio2+0x26e>
 801420a:	2800      	cmp	r0, #0
 801420c:	d062      	beq.n	80142d4 <__kernel_rem_pio2+0x2a4>
 801420e:	3c01      	subs	r4, #1
 8014210:	ab06      	add	r3, sp, #24
 8014212:	3d18      	subs	r5, #24
 8014214:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d0f8      	beq.n	801420e <__kernel_rem_pio2+0x1de>
 801421c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8014220:	4628      	mov	r0, r5
 8014222:	f000 fa55 	bl	80146d0 <scalbn>
 8014226:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8014320 <__kernel_rem_pio2+0x2f0>
 801422a:	1c62      	adds	r2, r4, #1
 801422c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801422e:	00d3      	lsls	r3, r2, #3
 8014230:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014234:	4622      	mov	r2, r4
 8014236:	2a00      	cmp	r2, #0
 8014238:	f280 80a8 	bge.w	801438c <__kernel_rem_pio2+0x35c>
 801423c:	4622      	mov	r2, r4
 801423e:	2a00      	cmp	r2, #0
 8014240:	f2c0 80c6 	blt.w	80143d0 <__kernel_rem_pio2+0x3a0>
 8014244:	a96a      	add	r1, sp, #424	@ 0x1a8
 8014246:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801424a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8014318 <__kernel_rem_pio2+0x2e8>
 801424e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8014334 <__kernel_rem_pio2+0x304>
 8014252:	2000      	movs	r0, #0
 8014254:	1aa1      	subs	r1, r4, r2
 8014256:	e0b0      	b.n	80143ba <__kernel_rem_pio2+0x38a>
 8014258:	2602      	movs	r6, #2
 801425a:	e78f      	b.n	801417c <__kernel_rem_pio2+0x14c>
 801425c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014260:	b948      	cbnz	r0, 8014276 <__kernel_rem_pio2+0x246>
 8014262:	b122      	cbz	r2, 801426e <__kernel_rem_pio2+0x23e>
 8014264:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8014268:	f843 2c04 	str.w	r2, [r3, #-4]
 801426c:	2201      	movs	r2, #1
 801426e:	f10c 0c01 	add.w	ip, ip, #1
 8014272:	4610      	mov	r0, r2
 8014274:	e789      	b.n	801418a <__kernel_rem_pio2+0x15a>
 8014276:	ebae 0202 	sub.w	r2, lr, r2
 801427a:	e7f5      	b.n	8014268 <__kernel_rem_pio2+0x238>
 801427c:	1e62      	subs	r2, r4, #1
 801427e:	ab06      	add	r3, sp, #24
 8014280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014284:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014288:	a906      	add	r1, sp, #24
 801428a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801428e:	e784      	b.n	801419a <__kernel_rem_pio2+0x16a>
 8014290:	1e62      	subs	r2, r4, #1
 8014292:	ab06      	add	r3, sp, #24
 8014294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014298:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801429c:	e7f4      	b.n	8014288 <__kernel_rem_pio2+0x258>
 801429e:	ab06      	add	r3, sp, #24
 80142a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142a4:	3a01      	subs	r2, #1
 80142a6:	4318      	orrs	r0, r3
 80142a8:	e7ad      	b.n	8014206 <__kernel_rem_pio2+0x1d6>
 80142aa:	3301      	adds	r3, #1
 80142ac:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80142b0:	2800      	cmp	r0, #0
 80142b2:	d0fa      	beq.n	80142aa <__kernel_rem_pio2+0x27a>
 80142b4:	9a04      	ldr	r2, [sp, #16]
 80142b6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 80142ba:	446a      	add	r2, sp
 80142bc:	eb04 000b 	add.w	r0, r4, fp
 80142c0:	a91a      	add	r1, sp, #104	@ 0x68
 80142c2:	1c66      	adds	r6, r4, #1
 80142c4:	3a98      	subs	r2, #152	@ 0x98
 80142c6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80142ca:	4423      	add	r3, r4
 80142cc:	42b3      	cmp	r3, r6
 80142ce:	da04      	bge.n	80142da <__kernel_rem_pio2+0x2aa>
 80142d0:	461c      	mov	r4, r3
 80142d2:	e713      	b.n	80140fc <__kernel_rem_pio2+0xcc>
 80142d4:	9a03      	ldr	r2, [sp, #12]
 80142d6:	2301      	movs	r3, #1
 80142d8:	e7e8      	b.n	80142ac <__kernel_rem_pio2+0x27c>
 80142da:	9902      	ldr	r1, [sp, #8]
 80142dc:	f8dd c004 	ldr.w	ip, [sp, #4]
 80142e0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80142e4:	9104      	str	r1, [sp, #16]
 80142e6:	ee07 1a90 	vmov	s15, r1
 80142ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80142ee:	2400      	movs	r4, #0
 80142f0:	eca0 7b02 	vstmia	r0!, {d7}
 80142f4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014318 <__kernel_rem_pio2+0x2e8>
 80142f8:	4686      	mov	lr, r0
 80142fa:	4554      	cmp	r4, sl
 80142fc:	dd03      	ble.n	8014306 <__kernel_rem_pio2+0x2d6>
 80142fe:	eca2 7b02 	vstmia	r2!, {d7}
 8014302:	3601      	adds	r6, #1
 8014304:	e7e2      	b.n	80142cc <__kernel_rem_pio2+0x29c>
 8014306:	ecbc 5b02 	vldmia	ip!, {d5}
 801430a:	ed3e 6b02 	vldmdb	lr!, {d6}
 801430e:	3401      	adds	r4, #1
 8014310:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014314:	e7f1      	b.n	80142fa <__kernel_rem_pio2+0x2ca>
 8014316:	bf00      	nop
	...
 8014324:	3e700000 	.word	0x3e700000
 8014328:	00000000 	.word	0x00000000
 801432c:	41700000 	.word	0x41700000
 8014330:	080171e0 	.word	0x080171e0
 8014334:	080171a0 	.word	0x080171a0
 8014338:	4268      	negs	r0, r5
 801433a:	eeb0 0b48 	vmov.f64	d0, d8
 801433e:	f000 f9c7 	bl	80146d0 <scalbn>
 8014342:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8014510 <__kernel_rem_pio2+0x4e0>
 8014346:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801434a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801434e:	db17      	blt.n	8014380 <__kernel_rem_pio2+0x350>
 8014350:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8014518 <__kernel_rem_pio2+0x4e8>
 8014354:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014358:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801435c:	aa06      	add	r2, sp, #24
 801435e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8014362:	eea5 0b46 	vfms.f64	d0, d5, d6
 8014366:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801436a:	3518      	adds	r5, #24
 801436c:	ee10 3a10 	vmov	r3, s0
 8014370:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014374:	ee17 3a10 	vmov	r3, s14
 8014378:	3401      	adds	r4, #1
 801437a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801437e:	e74d      	b.n	801421c <__kernel_rem_pio2+0x1ec>
 8014380:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014384:	aa06      	add	r2, sp, #24
 8014386:	ee10 3a10 	vmov	r3, s0
 801438a:	e7f6      	b.n	801437a <__kernel_rem_pio2+0x34a>
 801438c:	a806      	add	r0, sp, #24
 801438e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8014392:	9001      	str	r0, [sp, #4]
 8014394:	ee07 0a90 	vmov	s15, r0
 8014398:	3a01      	subs	r2, #1
 801439a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801439e:	ee27 7b00 	vmul.f64	d7, d7, d0
 80143a2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80143a6:	ed21 7b02 	vstmdb	r1!, {d7}
 80143aa:	e744      	b.n	8014236 <__kernel_rem_pio2+0x206>
 80143ac:	ecbc 5b02 	vldmia	ip!, {d5}
 80143b0:	ecb5 6b02 	vldmia	r5!, {d6}
 80143b4:	3001      	adds	r0, #1
 80143b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80143ba:	4548      	cmp	r0, r9
 80143bc:	dc01      	bgt.n	80143c2 <__kernel_rem_pio2+0x392>
 80143be:	4281      	cmp	r1, r0
 80143c0:	daf4      	bge.n	80143ac <__kernel_rem_pio2+0x37c>
 80143c2:	a842      	add	r0, sp, #264	@ 0x108
 80143c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80143c8:	ed81 7b00 	vstr	d7, [r1]
 80143cc:	3a01      	subs	r2, #1
 80143ce:	e736      	b.n	801423e <__kernel_rem_pio2+0x20e>
 80143d0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80143d2:	2a02      	cmp	r2, #2
 80143d4:	dc0a      	bgt.n	80143ec <__kernel_rem_pio2+0x3bc>
 80143d6:	2a00      	cmp	r2, #0
 80143d8:	dc2d      	bgt.n	8014436 <__kernel_rem_pio2+0x406>
 80143da:	d046      	beq.n	801446a <__kernel_rem_pio2+0x43a>
 80143dc:	f008 0007 	and.w	r0, r8, #7
 80143e0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80143e4:	ecbd 8b06 	vpop	{d8-d10}
 80143e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ec:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80143ee:	2a03      	cmp	r2, #3
 80143f0:	d1f4      	bne.n	80143dc <__kernel_rem_pio2+0x3ac>
 80143f2:	a942      	add	r1, sp, #264	@ 0x108
 80143f4:	f1a3 0208 	sub.w	r2, r3, #8
 80143f8:	440a      	add	r2, r1
 80143fa:	4611      	mov	r1, r2
 80143fc:	4620      	mov	r0, r4
 80143fe:	2800      	cmp	r0, #0
 8014400:	f1a1 0108 	sub.w	r1, r1, #8
 8014404:	dc52      	bgt.n	80144ac <__kernel_rem_pio2+0x47c>
 8014406:	4621      	mov	r1, r4
 8014408:	2901      	cmp	r1, #1
 801440a:	f1a2 0208 	sub.w	r2, r2, #8
 801440e:	dc5d      	bgt.n	80144cc <__kernel_rem_pio2+0x49c>
 8014410:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8014520 <__kernel_rem_pio2+0x4f0>
 8014414:	aa42      	add	r2, sp, #264	@ 0x108
 8014416:	4413      	add	r3, r2
 8014418:	2c01      	cmp	r4, #1
 801441a:	dc67      	bgt.n	80144ec <__kernel_rem_pio2+0x4bc>
 801441c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8014420:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8014424:	2e00      	cmp	r6, #0
 8014426:	d167      	bne.n	80144f8 <__kernel_rem_pio2+0x4c8>
 8014428:	ed87 5b00 	vstr	d5, [r7]
 801442c:	ed87 6b02 	vstr	d6, [r7, #8]
 8014430:	ed87 7b04 	vstr	d7, [r7, #16]
 8014434:	e7d2      	b.n	80143dc <__kernel_rem_pio2+0x3ac>
 8014436:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8014520 <__kernel_rem_pio2+0x4f0>
 801443a:	aa42      	add	r2, sp, #264	@ 0x108
 801443c:	4413      	add	r3, r2
 801443e:	4622      	mov	r2, r4
 8014440:	2a00      	cmp	r2, #0
 8014442:	da24      	bge.n	801448e <__kernel_rem_pio2+0x45e>
 8014444:	b34e      	cbz	r6, 801449a <__kernel_rem_pio2+0x46a>
 8014446:	eeb1 7b46 	vneg.f64	d7, d6
 801444a:	ed87 7b00 	vstr	d7, [r7]
 801444e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8014452:	aa44      	add	r2, sp, #272	@ 0x110
 8014454:	2301      	movs	r3, #1
 8014456:	ee37 7b46 	vsub.f64	d7, d7, d6
 801445a:	429c      	cmp	r4, r3
 801445c:	da20      	bge.n	80144a0 <__kernel_rem_pio2+0x470>
 801445e:	b10e      	cbz	r6, 8014464 <__kernel_rem_pio2+0x434>
 8014460:	eeb1 7b47 	vneg.f64	d7, d7
 8014464:	ed87 7b02 	vstr	d7, [r7, #8]
 8014468:	e7b8      	b.n	80143dc <__kernel_rem_pio2+0x3ac>
 801446a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8014520 <__kernel_rem_pio2+0x4f0>
 801446e:	aa42      	add	r2, sp, #264	@ 0x108
 8014470:	4413      	add	r3, r2
 8014472:	2c00      	cmp	r4, #0
 8014474:	da05      	bge.n	8014482 <__kernel_rem_pio2+0x452>
 8014476:	b10e      	cbz	r6, 801447c <__kernel_rem_pio2+0x44c>
 8014478:	eeb1 7b47 	vneg.f64	d7, d7
 801447c:	ed87 7b00 	vstr	d7, [r7]
 8014480:	e7ac      	b.n	80143dc <__kernel_rem_pio2+0x3ac>
 8014482:	ed33 6b02 	vldmdb	r3!, {d6}
 8014486:	3c01      	subs	r4, #1
 8014488:	ee37 7b06 	vadd.f64	d7, d7, d6
 801448c:	e7f1      	b.n	8014472 <__kernel_rem_pio2+0x442>
 801448e:	ed33 7b02 	vldmdb	r3!, {d7}
 8014492:	3a01      	subs	r2, #1
 8014494:	ee36 6b07 	vadd.f64	d6, d6, d7
 8014498:	e7d2      	b.n	8014440 <__kernel_rem_pio2+0x410>
 801449a:	eeb0 7b46 	vmov.f64	d7, d6
 801449e:	e7d4      	b.n	801444a <__kernel_rem_pio2+0x41a>
 80144a0:	ecb2 6b02 	vldmia	r2!, {d6}
 80144a4:	3301      	adds	r3, #1
 80144a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80144aa:	e7d6      	b.n	801445a <__kernel_rem_pio2+0x42a>
 80144ac:	ed91 7b00 	vldr	d7, [r1]
 80144b0:	ed91 5b02 	vldr	d5, [r1, #8]
 80144b4:	3801      	subs	r0, #1
 80144b6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80144ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80144be:	ed81 6b00 	vstr	d6, [r1]
 80144c2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80144c6:	ed81 7b02 	vstr	d7, [r1, #8]
 80144ca:	e798      	b.n	80143fe <__kernel_rem_pio2+0x3ce>
 80144cc:	ed92 7b00 	vldr	d7, [r2]
 80144d0:	ed92 5b02 	vldr	d5, [r2, #8]
 80144d4:	3901      	subs	r1, #1
 80144d6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80144da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80144de:	ed82 6b00 	vstr	d6, [r2]
 80144e2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80144e6:	ed82 7b02 	vstr	d7, [r2, #8]
 80144ea:	e78d      	b.n	8014408 <__kernel_rem_pio2+0x3d8>
 80144ec:	ed33 6b02 	vldmdb	r3!, {d6}
 80144f0:	3c01      	subs	r4, #1
 80144f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80144f6:	e78f      	b.n	8014418 <__kernel_rem_pio2+0x3e8>
 80144f8:	eeb1 5b45 	vneg.f64	d5, d5
 80144fc:	eeb1 6b46 	vneg.f64	d6, d6
 8014500:	ed87 5b00 	vstr	d5, [r7]
 8014504:	eeb1 7b47 	vneg.f64	d7, d7
 8014508:	ed87 6b02 	vstr	d6, [r7, #8]
 801450c:	e790      	b.n	8014430 <__kernel_rem_pio2+0x400>
 801450e:	bf00      	nop
 8014510:	00000000 	.word	0x00000000
 8014514:	41700000 	.word	0x41700000
 8014518:	00000000 	.word	0x00000000
 801451c:	3e700000 	.word	0x3e700000
	...

08014528 <__kernel_cos>:
 8014528:	eeb0 5b40 	vmov.f64	d5, d0
 801452c:	ee15 1a90 	vmov	r1, s11
 8014530:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8014534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8014538:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801453c:	d204      	bcs.n	8014548 <__kernel_cos+0x20>
 801453e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8014542:	ee17 3a90 	vmov	r3, s15
 8014546:	b343      	cbz	r3, 801459a <__kernel_cos+0x72>
 8014548:	ee25 6b05 	vmul.f64	d6, d5, d5
 801454c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8014550:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 80145c0 <__kernel_cos+0x98>
 8014554:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80145c8 <__kernel_cos+0xa0>
 8014558:	eea6 4b07 	vfma.f64	d4, d6, d7
 801455c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80145d0 <__kernel_cos+0xa8>
 8014560:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014564:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80145d8 <__kernel_cos+0xb0>
 8014568:	eea7 4b06 	vfma.f64	d4, d7, d6
 801456c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80145e0 <__kernel_cos+0xb8>
 8014570:	4b1f      	ldr	r3, [pc, #124]	@ (80145f0 <__kernel_cos+0xc8>)
 8014572:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014576:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80145e8 <__kernel_cos+0xc0>
 801457a:	4299      	cmp	r1, r3
 801457c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8014580:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8014584:	ee24 4b06 	vmul.f64	d4, d4, d6
 8014588:	ee26 7b07 	vmul.f64	d7, d6, d7
 801458c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8014590:	d804      	bhi.n	801459c <__kernel_cos+0x74>
 8014592:	ee37 7b41 	vsub.f64	d7, d7, d1
 8014596:	ee30 0b47 	vsub.f64	d0, d0, d7
 801459a:	4770      	bx	lr
 801459c:	4b15      	ldr	r3, [pc, #84]	@ (80145f4 <__kernel_cos+0xcc>)
 801459e:	4299      	cmp	r1, r3
 80145a0:	d809      	bhi.n	80145b6 <__kernel_cos+0x8e>
 80145a2:	2200      	movs	r2, #0
 80145a4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 80145a8:	ec43 2b16 	vmov	d6, r2, r3
 80145ac:	ee30 0b46 	vsub.f64	d0, d0, d6
 80145b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80145b4:	e7ed      	b.n	8014592 <__kernel_cos+0x6a>
 80145b6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 80145ba:	e7f7      	b.n	80145ac <__kernel_cos+0x84>
 80145bc:	f3af 8000 	nop.w
 80145c0:	be8838d4 	.word	0xbe8838d4
 80145c4:	bda8fae9 	.word	0xbda8fae9
 80145c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80145cc:	3e21ee9e 	.word	0x3e21ee9e
 80145d0:	809c52ad 	.word	0x809c52ad
 80145d4:	be927e4f 	.word	0xbe927e4f
 80145d8:	19cb1590 	.word	0x19cb1590
 80145dc:	3efa01a0 	.word	0x3efa01a0
 80145e0:	16c15177 	.word	0x16c15177
 80145e4:	bf56c16c 	.word	0xbf56c16c
 80145e8:	5555554c 	.word	0x5555554c
 80145ec:	3fa55555 	.word	0x3fa55555
 80145f0:	3fd33332 	.word	0x3fd33332
 80145f4:	3fe90000 	.word	0x3fe90000

080145f8 <__kernel_sin>:
 80145f8:	ee10 3a90 	vmov	r3, s1
 80145fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014600:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8014604:	d204      	bcs.n	8014610 <__kernel_sin+0x18>
 8014606:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801460a:	ee17 3a90 	vmov	r3, s15
 801460e:	b35b      	cbz	r3, 8014668 <__kernel_sin+0x70>
 8014610:	ee20 6b00 	vmul.f64	d6, d0, d0
 8014614:	ee20 5b06 	vmul.f64	d5, d0, d6
 8014618:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8014670 <__kernel_sin+0x78>
 801461c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8014678 <__kernel_sin+0x80>
 8014620:	eea6 4b07 	vfma.f64	d4, d6, d7
 8014624:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8014680 <__kernel_sin+0x88>
 8014628:	eea4 7b06 	vfma.f64	d7, d4, d6
 801462c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8014688 <__kernel_sin+0x90>
 8014630:	eea7 4b06 	vfma.f64	d4, d7, d6
 8014634:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8014690 <__kernel_sin+0x98>
 8014638:	eea4 7b06 	vfma.f64	d7, d4, d6
 801463c:	b930      	cbnz	r0, 801464c <__kernel_sin+0x54>
 801463e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8014698 <__kernel_sin+0xa0>
 8014642:	eea6 4b07 	vfma.f64	d4, d6, d7
 8014646:	eea4 0b05 	vfma.f64	d0, d4, d5
 801464a:	4770      	bx	lr
 801464c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8014650:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8014654:	eea1 7b04 	vfma.f64	d7, d1, d4
 8014658:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801465c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80146a0 <__kernel_sin+0xa8>
 8014660:	eea5 1b07 	vfma.f64	d1, d5, d7
 8014664:	ee30 0b41 	vsub.f64	d0, d0, d1
 8014668:	4770      	bx	lr
 801466a:	bf00      	nop
 801466c:	f3af 8000 	nop.w
 8014670:	5acfd57c 	.word	0x5acfd57c
 8014674:	3de5d93a 	.word	0x3de5d93a
 8014678:	8a2b9ceb 	.word	0x8a2b9ceb
 801467c:	be5ae5e6 	.word	0xbe5ae5e6
 8014680:	57b1fe7d 	.word	0x57b1fe7d
 8014684:	3ec71de3 	.word	0x3ec71de3
 8014688:	19c161d5 	.word	0x19c161d5
 801468c:	bf2a01a0 	.word	0xbf2a01a0
 8014690:	1110f8a6 	.word	0x1110f8a6
 8014694:	3f811111 	.word	0x3f811111
 8014698:	55555549 	.word	0x55555549
 801469c:	bfc55555 	.word	0xbfc55555
 80146a0:	55555549 	.word	0x55555549
 80146a4:	3fc55555 	.word	0x3fc55555

080146a8 <fabs>:
 80146a8:	ec51 0b10 	vmov	r0, r1, d0
 80146ac:	4602      	mov	r2, r0
 80146ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80146b2:	ec43 2b10 	vmov	d0, r2, r3
 80146b6:	4770      	bx	lr

080146b8 <finite>:
 80146b8:	b082      	sub	sp, #8
 80146ba:	ed8d 0b00 	vstr	d0, [sp]
 80146be:	9801      	ldr	r0, [sp, #4]
 80146c0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80146c4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80146c8:	0fc0      	lsrs	r0, r0, #31
 80146ca:	b002      	add	sp, #8
 80146cc:	4770      	bx	lr
	...

080146d0 <scalbn>:
 80146d0:	ee10 1a90 	vmov	r1, s1
 80146d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80146d8:	b98b      	cbnz	r3, 80146fe <scalbn+0x2e>
 80146da:	ee10 3a10 	vmov	r3, s0
 80146de:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80146e2:	4319      	orrs	r1, r3
 80146e4:	d00a      	beq.n	80146fc <scalbn+0x2c>
 80146e6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8014798 <scalbn+0xc8>
 80146ea:	4b37      	ldr	r3, [pc, #220]	@ (80147c8 <scalbn+0xf8>)
 80146ec:	ee20 0b07 	vmul.f64	d0, d0, d7
 80146f0:	4298      	cmp	r0, r3
 80146f2:	da0b      	bge.n	801470c <scalbn+0x3c>
 80146f4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80147a0 <scalbn+0xd0>
 80146f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80146fc:	4770      	bx	lr
 80146fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8014702:	4293      	cmp	r3, r2
 8014704:	d107      	bne.n	8014716 <scalbn+0x46>
 8014706:	ee30 0b00 	vadd.f64	d0, d0, d0
 801470a:	4770      	bx	lr
 801470c:	ee10 1a90 	vmov	r1, s1
 8014710:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014714:	3b36      	subs	r3, #54	@ 0x36
 8014716:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801471a:	4290      	cmp	r0, r2
 801471c:	dd0d      	ble.n	801473a <scalbn+0x6a>
 801471e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80147a8 <scalbn+0xd8>
 8014722:	ee10 3a90 	vmov	r3, s1
 8014726:	eeb0 6b47 	vmov.f64	d6, d7
 801472a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 80147b0 <scalbn+0xe0>
 801472e:	2b00      	cmp	r3, #0
 8014730:	fe27 7b05 	vselge.f64	d7, d7, d5
 8014734:	ee27 0b06 	vmul.f64	d0, d7, d6
 8014738:	4770      	bx	lr
 801473a:	4418      	add	r0, r3
 801473c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8014740:	4298      	cmp	r0, r3
 8014742:	dcec      	bgt.n	801471e <scalbn+0x4e>
 8014744:	2800      	cmp	r0, #0
 8014746:	dd0a      	ble.n	801475e <scalbn+0x8e>
 8014748:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801474c:	ec53 2b10 	vmov	r2, r3, d0
 8014750:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8014754:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8014758:	ec43 2b10 	vmov	d0, r2, r3
 801475c:	4770      	bx	lr
 801475e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8014762:	da09      	bge.n	8014778 <scalbn+0xa8>
 8014764:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80147a0 <scalbn+0xd0>
 8014768:	ee10 3a90 	vmov	r3, s1
 801476c:	eeb0 6b47 	vmov.f64	d6, d7
 8014770:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80147b8 <scalbn+0xe8>
 8014774:	2b00      	cmp	r3, #0
 8014776:	e7db      	b.n	8014730 <scalbn+0x60>
 8014778:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801477c:	ec53 2b10 	vmov	r2, r3, d0
 8014780:	3036      	adds	r0, #54	@ 0x36
 8014782:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8014786:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801478a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80147c0 <scalbn+0xf0>
 801478e:	ec43 2b10 	vmov	d0, r2, r3
 8014792:	e7b1      	b.n	80146f8 <scalbn+0x28>
 8014794:	f3af 8000 	nop.w
 8014798:	00000000 	.word	0x00000000
 801479c:	43500000 	.word	0x43500000
 80147a0:	c2f8f359 	.word	0xc2f8f359
 80147a4:	01a56e1f 	.word	0x01a56e1f
 80147a8:	8800759c 	.word	0x8800759c
 80147ac:	7e37e43c 	.word	0x7e37e43c
 80147b0:	8800759c 	.word	0x8800759c
 80147b4:	fe37e43c 	.word	0xfe37e43c
 80147b8:	c2f8f359 	.word	0xc2f8f359
 80147bc:	81a56e1f 	.word	0x81a56e1f
 80147c0:	00000000 	.word	0x00000000
 80147c4:	3c900000 	.word	0x3c900000
 80147c8:	ffff3cb0 	.word	0xffff3cb0
 80147cc:	00000000 	.word	0x00000000

080147d0 <__ieee754_hypot>:
 80147d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d2:	ec51 0b10 	vmov	r0, r1, d0
 80147d6:	ec53 2b11 	vmov	r2, r3, d1
 80147da:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 80147de:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 80147e2:	42a5      	cmp	r5, r4
 80147e4:	da05      	bge.n	80147f2 <__ieee754_hypot+0x22>
 80147e6:	462e      	mov	r6, r5
 80147e8:	4625      	mov	r5, r4
 80147ea:	4634      	mov	r4, r6
 80147ec:	4606      	mov	r6, r0
 80147ee:	4610      	mov	r0, r2
 80147f0:	4632      	mov	r2, r6
 80147f2:	4623      	mov	r3, r4
 80147f4:	ec43 2b14 	vmov	d4, r2, r3
 80147f8:	1b2b      	subs	r3, r5, r4
 80147fa:	4629      	mov	r1, r5
 80147fc:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8014800:	ec41 0b10 	vmov	d0, r0, r1
 8014804:	dd02      	ble.n	801480c <__ieee754_hypot+0x3c>
 8014806:	ee30 0b04 	vadd.f64	d0, d0, d4
 801480a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801480c:	4b46      	ldr	r3, [pc, #280]	@ (8014928 <__ieee754_hypot+0x158>)
 801480e:	429d      	cmp	r5, r3
 8014810:	dd58      	ble.n	80148c4 <__ieee754_hypot+0xf4>
 8014812:	4b46      	ldr	r3, [pc, #280]	@ (801492c <__ieee754_hypot+0x15c>)
 8014814:	429d      	cmp	r5, r3
 8014816:	dd0f      	ble.n	8014838 <__ieee754_hypot+0x68>
 8014818:	ee14 3a10 	vmov	r3, s8
 801481c:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 8014820:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014824:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8014828:	4305      	orrs	r5, r0
 801482a:	bf18      	it	ne
 801482c:	ee30 0b04 	vaddne.f64	d0, d0, d4
 8014830:	431c      	orrs	r4, r3
 8014832:	fe04 0b00 	vseleq.f64	d0, d4, d0
 8014836:	e7e8      	b.n	801480a <__ieee754_hypot+0x3a>
 8014838:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 801483c:	4602      	mov	r2, r0
 801483e:	462b      	mov	r3, r5
 8014840:	ec43 2b10 	vmov	d0, r2, r3
 8014844:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 8014848:	ec53 2b14 	vmov	r2, r3, d4
 801484c:	4623      	mov	r3, r4
 801484e:	ec43 2b14 	vmov	d4, r2, r3
 8014852:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8014856:	4b36      	ldr	r3, [pc, #216]	@ (8014930 <__ieee754_hypot+0x160>)
 8014858:	429c      	cmp	r4, r3
 801485a:	dc0e      	bgt.n	801487a <__ieee754_hypot+0xaa>
 801485c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8014860:	da32      	bge.n	80148c8 <__ieee754_hypot+0xf8>
 8014862:	ee14 3a10 	vmov	r3, s8
 8014866:	4323      	orrs	r3, r4
 8014868:	d0cf      	beq.n	801480a <__ieee754_hypot+0x3a>
 801486a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8014920 <__ieee754_hypot+0x150>
 801486e:	f2a6 36fe 	subw	r6, r6, #1022	@ 0x3fe
 8014872:	ee24 4b07 	vmul.f64	d4, d4, d7
 8014876:	ee20 0b07 	vmul.f64	d0, d0, d7
 801487a:	ee30 5b44 	vsub.f64	d5, d0, d4
 801487e:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8014882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014886:	f04f 0200 	mov.w	r2, #0
 801488a:	d52e      	bpl.n	80148ea <__ieee754_hypot+0x11a>
 801488c:	462b      	mov	r3, r5
 801488e:	ec43 2b17 	vmov	d7, r2, r3
 8014892:	ee30 6b07 	vadd.f64	d6, d0, d7
 8014896:	ee30 0b47 	vsub.f64	d0, d0, d7
 801489a:	ee26 0b00 	vmul.f64	d0, d6, d0
 801489e:	eea4 0b04 	vfma.f64	d0, d4, d4
 80148a2:	eea7 0b07 	vfma.f64	d0, d7, d7
 80148a6:	f000 f845 	bl	8014934 <__ieee754_sqrt>
 80148aa:	2e00      	cmp	r6, #0
 80148ac:	d0ad      	beq.n	801480a <__ieee754_hypot+0x3a>
 80148ae:	0533      	lsls	r3, r6, #20
 80148b0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80148b4:	2000      	movs	r0, #0
 80148b6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80148ba:	ec41 0b17 	vmov	d7, r0, r1
 80148be:	ee20 0b07 	vmul.f64	d0, d0, d7
 80148c2:	e7a2      	b.n	801480a <__ieee754_hypot+0x3a>
 80148c4:	2600      	movs	r6, #0
 80148c6:	e7c6      	b.n	8014856 <__ieee754_hypot+0x86>
 80148c8:	ec53 2b10 	vmov	r2, r3, d0
 80148cc:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 80148d0:	462b      	mov	r3, r5
 80148d2:	ec43 2b10 	vmov	d0, r2, r3
 80148d6:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 80148da:	ec53 2b14 	vmov	r2, r3, d4
 80148de:	4623      	mov	r3, r4
 80148e0:	ec43 2b14 	vmov	d4, r2, r3
 80148e4:	f5a6 7616 	sub.w	r6, r6, #600	@ 0x258
 80148e8:	e7c7      	b.n	801487a <__ieee754_hypot+0xaa>
 80148ea:	4623      	mov	r3, r4
 80148ec:	ec43 2b16 	vmov	d6, r2, r3
 80148f0:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 80148f4:	2200      	movs	r2, #0
 80148f6:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 80148fa:	ec43 2b17 	vmov	d7, r2, r3
 80148fe:	ee34 3b46 	vsub.f64	d3, d4, d6
 8014902:	eeb0 2b47 	vmov.f64	d2, d7
 8014906:	ee90 2b01 	vfnms.f64	d2, d0, d1
 801490a:	ee24 0b02 	vmul.f64	d0, d4, d2
 801490e:	eea3 0b07 	vfma.f64	d0, d3, d7
 8014912:	eea5 0b05 	vfma.f64	d0, d5, d5
 8014916:	eea6 0b07 	vfma.f64	d0, d6, d7
 801491a:	e7c4      	b.n	80148a6 <__ieee754_hypot+0xd6>
 801491c:	f3af 8000 	nop.w
 8014920:	00000000 	.word	0x00000000
 8014924:	7fd00000 	.word	0x7fd00000
 8014928:	5f300000 	.word	0x5f300000
 801492c:	7fefffff 	.word	0x7fefffff
 8014930:	20afffff 	.word	0x20afffff

08014934 <__ieee754_sqrt>:
 8014934:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8014938:	4770      	bx	lr
	...

0801493c <_init>:
 801493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801493e:	bf00      	nop
 8014940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014942:	bc08      	pop	{r3}
 8014944:	469e      	mov	lr, r3
 8014946:	4770      	bx	lr

08014948 <_fini>:
 8014948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801494a:	bf00      	nop
 801494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801494e:	bc08      	pop	{r3}
 8014950:	469e      	mov	lr, r3
 8014952:	4770      	bx	lr
